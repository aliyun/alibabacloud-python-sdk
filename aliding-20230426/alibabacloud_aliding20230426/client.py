# -*- coding: utf-8 -*-
# This file is auto-generated, don't edit it. Thanks.
from typing import Dict
from Tea.core import TeaCore

from alibabacloud_tea_openapi.client import Client as OpenApiClient
from alibabacloud_tea_openapi import models as open_api_models
from alibabacloud_tea_util.client import Client as UtilClient
from alibabacloud_endpoint_util.client import Client as EndpointUtilClient
from alibabacloud_aliding20230426 import models as aliding_20230426_models
from alibabacloud_tea_util import models as util_models
from alibabacloud_openapi_util.client import Client as OpenApiUtilClient


class Client(OpenApiClient):
    """
    *\
    """
    def __init__(
        self, 
        config: open_api_models.Config,
    ):
        super().__init__(config)
        self._endpoint_rule = ''
        self.check_config(config)
        self._endpoint = self.get_endpoint('aliding', self._region_id, self._endpoint_rule, self._network, self._suffix, self._endpoint_map, self._endpoint)

    def get_endpoint(
        self,
        product_id: str,
        region_id: str,
        endpoint_rule: str,
        network: str,
        suffix: str,
        endpoint_map: Dict[str, str],
        endpoint: str,
    ) -> str:
        if not UtilClient.empty(endpoint):
            return endpoint
        if not UtilClient.is_unset(endpoint_map) and not UtilClient.empty(endpoint_map.get(region_id)):
            return endpoint_map.get(region_id)
        return EndpointUtilClient.get_endpoint_rules(product_id, region_id, endpoint_rule, network, suffix)

    def add_attendee_with_options(
        self,
        tmp_req: aliding_20230426_models.AddAttendeeRequest,
        tmp_header: aliding_20230426_models.AddAttendeeHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.AddAttendeeResponse:
        """
        @summary 添加日程参与者
        
        @param tmp_req: AddAttendeeRequest
        @param tmp_header: AddAttendeeHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddAttendeeResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.AddAttendeeShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.AddAttendeeShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.attendees_to_add):
            request.attendees_to_add_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.attendees_to_add, 'AttendeesToAdd', 'json')
        body = {}
        if not UtilClient.is_unset(request.attendees_to_add_shrink):
            body['AttendeesToAdd'] = request.attendees_to_add_shrink
        if not UtilClient.is_unset(request.calendar_id):
            body['CalendarId'] = request.calendar_id
        if not UtilClient.is_unset(request.event_id):
            body['EventId'] = request.event_id
        if not UtilClient.is_unset(request.chat_notification):
            body['chatNotification'] = request.chat_notification
        if not UtilClient.is_unset(request.push_notification):
            body['pushNotification'] = request.push_notification
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='AddAttendee',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/addAttendee',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.AddAttendeeResponse(),
            self.call_api(params, req, runtime)
        )

    async def add_attendee_with_options_async(
        self,
        tmp_req: aliding_20230426_models.AddAttendeeRequest,
        tmp_header: aliding_20230426_models.AddAttendeeHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.AddAttendeeResponse:
        """
        @summary 添加日程参与者
        
        @param tmp_req: AddAttendeeRequest
        @param tmp_header: AddAttendeeHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddAttendeeResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.AddAttendeeShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.AddAttendeeShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.attendees_to_add):
            request.attendees_to_add_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.attendees_to_add, 'AttendeesToAdd', 'json')
        body = {}
        if not UtilClient.is_unset(request.attendees_to_add_shrink):
            body['AttendeesToAdd'] = request.attendees_to_add_shrink
        if not UtilClient.is_unset(request.calendar_id):
            body['CalendarId'] = request.calendar_id
        if not UtilClient.is_unset(request.event_id):
            body['EventId'] = request.event_id
        if not UtilClient.is_unset(request.chat_notification):
            body['chatNotification'] = request.chat_notification
        if not UtilClient.is_unset(request.push_notification):
            body['pushNotification'] = request.push_notification
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='AddAttendee',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/addAttendee',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.AddAttendeeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def add_attendee(
        self,
        request: aliding_20230426_models.AddAttendeeRequest,
    ) -> aliding_20230426_models.AddAttendeeResponse:
        """
        @summary 添加日程参与者
        
        @param request: AddAttendeeRequest
        @return: AddAttendeeResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.AddAttendeeHeaders()
        return self.add_attendee_with_options(request, headers, runtime)

    async def add_attendee_async(
        self,
        request: aliding_20230426_models.AddAttendeeRequest,
    ) -> aliding_20230426_models.AddAttendeeResponse:
        """
        @summary 添加日程参与者
        
        @param request: AddAttendeeRequest
        @return: AddAttendeeResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.AddAttendeeHeaders()
        return await self.add_attendee_with_options_async(request, headers, runtime)

    def add_drive_space_with_options(
        self,
        tmp_req: aliding_20230426_models.AddDriveSpaceRequest,
        tmp_header: aliding_20230426_models.AddDriveSpaceHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.AddDriveSpaceResponse:
        """
        @summary 新建钉盘空间
        
        @param tmp_req: AddDriveSpaceRequest
        @param tmp_header: AddDriveSpaceHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddDriveSpaceResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.AddDriveSpaceShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.AddDriveSpaceShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='AddDriveSpace',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/addDriveSpace',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.AddDriveSpaceResponse(),
            self.call_api(params, req, runtime)
        )

    async def add_drive_space_with_options_async(
        self,
        tmp_req: aliding_20230426_models.AddDriveSpaceRequest,
        tmp_header: aliding_20230426_models.AddDriveSpaceHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.AddDriveSpaceResponse:
        """
        @summary 新建钉盘空间
        
        @param tmp_req: AddDriveSpaceRequest
        @param tmp_header: AddDriveSpaceHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddDriveSpaceResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.AddDriveSpaceShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.AddDriveSpaceShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='AddDriveSpace',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/addDriveSpace',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.AddDriveSpaceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def add_drive_space(
        self,
        request: aliding_20230426_models.AddDriveSpaceRequest,
    ) -> aliding_20230426_models.AddDriveSpaceResponse:
        """
        @summary 新建钉盘空间
        
        @param request: AddDriveSpaceRequest
        @return: AddDriveSpaceResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.AddDriveSpaceHeaders()
        return self.add_drive_space_with_options(request, headers, runtime)

    async def add_drive_space_async(
        self,
        request: aliding_20230426_models.AddDriveSpaceRequest,
    ) -> aliding_20230426_models.AddDriveSpaceResponse:
        """
        @summary 新建钉盘空间
        
        @param request: AddDriveSpaceRequest
        @return: AddDriveSpaceResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.AddDriveSpaceHeaders()
        return await self.add_drive_space_with_options_async(request, headers, runtime)

    def add_folder_with_options(
        self,
        tmp_req: aliding_20230426_models.AddFolderRequest,
        tmp_header: aliding_20230426_models.AddFolderHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.AddFolderResponse:
        """
        @summary 添加文件夹
        
        @param tmp_req: AddFolderRequest
        @param tmp_header: AddFolderHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddFolderResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.AddFolderShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.AddFolderShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.option):
            request.option_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.option, 'Option', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.option_shrink):
            body['Option'] = request.option_shrink
        if not UtilClient.is_unset(request.parent_id):
            body['ParentId'] = request.parent_id
        if not UtilClient.is_unset(request.space_id):
            body['SpaceId'] = request.space_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='AddFolder',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/addFolder',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.AddFolderResponse(),
            self.call_api(params, req, runtime)
        )

    async def add_folder_with_options_async(
        self,
        tmp_req: aliding_20230426_models.AddFolderRequest,
        tmp_header: aliding_20230426_models.AddFolderHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.AddFolderResponse:
        """
        @summary 添加文件夹
        
        @param tmp_req: AddFolderRequest
        @param tmp_header: AddFolderHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddFolderResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.AddFolderShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.AddFolderShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.option):
            request.option_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.option, 'Option', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.option_shrink):
            body['Option'] = request.option_shrink
        if not UtilClient.is_unset(request.parent_id):
            body['ParentId'] = request.parent_id
        if not UtilClient.is_unset(request.space_id):
            body['SpaceId'] = request.space_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='AddFolder',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/addFolder',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.AddFolderResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def add_folder(
        self,
        request: aliding_20230426_models.AddFolderRequest,
    ) -> aliding_20230426_models.AddFolderResponse:
        """
        @summary 添加文件夹
        
        @param request: AddFolderRequest
        @return: AddFolderResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.AddFolderHeaders()
        return self.add_folder_with_options(request, headers, runtime)

    async def add_folder_async(
        self,
        request: aliding_20230426_models.AddFolderRequest,
    ) -> aliding_20230426_models.AddFolderResponse:
        """
        @summary 添加文件夹
        
        @param request: AddFolderRequest
        @return: AddFolderResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.AddFolderHeaders()
        return await self.add_folder_with_options_async(request, headers, runtime)

    def add_meeting_rooms_with_options(
        self,
        tmp_req: aliding_20230426_models.AddMeetingRoomsRequest,
        tmp_header: aliding_20230426_models.AddMeetingRoomsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.AddMeetingRoomsResponse:
        """
        @summary 预定会议室
        
        @param tmp_req: AddMeetingRoomsRequest
        @param tmp_header: AddMeetingRoomsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddMeetingRoomsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.AddMeetingRoomsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.AddMeetingRoomsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.meeting_rooms_to_add):
            request.meeting_rooms_to_add_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.meeting_rooms_to_add, 'MeetingRoomsToAdd', 'json')
        body = {}
        if not UtilClient.is_unset(request.calendar_id):
            body['CalendarId'] = request.calendar_id
        if not UtilClient.is_unset(request.event_id):
            body['EventId'] = request.event_id
        if not UtilClient.is_unset(request.meeting_rooms_to_add_shrink):
            body['MeetingRoomsToAdd'] = request.meeting_rooms_to_add_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='AddMeetingRooms',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/addMeetingRooms',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.AddMeetingRoomsResponse(),
            self.call_api(params, req, runtime)
        )

    async def add_meeting_rooms_with_options_async(
        self,
        tmp_req: aliding_20230426_models.AddMeetingRoomsRequest,
        tmp_header: aliding_20230426_models.AddMeetingRoomsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.AddMeetingRoomsResponse:
        """
        @summary 预定会议室
        
        @param tmp_req: AddMeetingRoomsRequest
        @param tmp_header: AddMeetingRoomsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddMeetingRoomsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.AddMeetingRoomsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.AddMeetingRoomsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.meeting_rooms_to_add):
            request.meeting_rooms_to_add_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.meeting_rooms_to_add, 'MeetingRoomsToAdd', 'json')
        body = {}
        if not UtilClient.is_unset(request.calendar_id):
            body['CalendarId'] = request.calendar_id
        if not UtilClient.is_unset(request.event_id):
            body['EventId'] = request.event_id
        if not UtilClient.is_unset(request.meeting_rooms_to_add_shrink):
            body['MeetingRoomsToAdd'] = request.meeting_rooms_to_add_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='AddMeetingRooms',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/addMeetingRooms',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.AddMeetingRoomsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def add_meeting_rooms(
        self,
        request: aliding_20230426_models.AddMeetingRoomsRequest,
    ) -> aliding_20230426_models.AddMeetingRoomsResponse:
        """
        @summary 预定会议室
        
        @param request: AddMeetingRoomsRequest
        @return: AddMeetingRoomsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.AddMeetingRoomsHeaders()
        return self.add_meeting_rooms_with_options(request, headers, runtime)

    async def add_meeting_rooms_async(
        self,
        request: aliding_20230426_models.AddMeetingRoomsRequest,
    ) -> aliding_20230426_models.AddMeetingRoomsResponse:
        """
        @summary 预定会议室
        
        @param request: AddMeetingRoomsRequest
        @return: AddMeetingRoomsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.AddMeetingRoomsHeaders()
        return await self.add_meeting_rooms_with_options_async(request, headers, runtime)

    def add_multi_dim_table_with_options(
        self,
        tmp_req: aliding_20230426_models.AddMultiDimTableRequest,
        tmp_header: aliding_20230426_models.AddMultiDimTableHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.AddMultiDimTableResponse:
        """
        @summary 新增数据表
        
        @param tmp_req: AddMultiDimTableRequest
        @param tmp_header: AddMultiDimTableHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddMultiDimTableResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.AddMultiDimTableShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.AddMultiDimTableShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.fields):
            request.fields_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.fields, 'Fields', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.base_id):
            body['BaseId'] = request.base_id
        if not UtilClient.is_unset(request.fields_shrink):
            body['Fields'] = request.fields_shrink
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='AddMultiDimTable',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/table/addMultiDimTable',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.AddMultiDimTableResponse(),
            self.call_api(params, req, runtime)
        )

    async def add_multi_dim_table_with_options_async(
        self,
        tmp_req: aliding_20230426_models.AddMultiDimTableRequest,
        tmp_header: aliding_20230426_models.AddMultiDimTableHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.AddMultiDimTableResponse:
        """
        @summary 新增数据表
        
        @param tmp_req: AddMultiDimTableRequest
        @param tmp_header: AddMultiDimTableHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddMultiDimTableResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.AddMultiDimTableShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.AddMultiDimTableShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.fields):
            request.fields_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.fields, 'Fields', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.base_id):
            body['BaseId'] = request.base_id
        if not UtilClient.is_unset(request.fields_shrink):
            body['Fields'] = request.fields_shrink
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='AddMultiDimTable',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/table/addMultiDimTable',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.AddMultiDimTableResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def add_multi_dim_table(
        self,
        request: aliding_20230426_models.AddMultiDimTableRequest,
    ) -> aliding_20230426_models.AddMultiDimTableResponse:
        """
        @summary 新增数据表
        
        @param request: AddMultiDimTableRequest
        @return: AddMultiDimTableResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.AddMultiDimTableHeaders()
        return self.add_multi_dim_table_with_options(request, headers, runtime)

    async def add_multi_dim_table_async(
        self,
        request: aliding_20230426_models.AddMultiDimTableRequest,
    ) -> aliding_20230426_models.AddMultiDimTableResponse:
        """
        @summary 新增数据表
        
        @param request: AddMultiDimTableRequest
        @return: AddMultiDimTableResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.AddMultiDimTableHeaders()
        return await self.add_multi_dim_table_with_options_async(request, headers, runtime)

    def add_permission_with_options(
        self,
        tmp_req: aliding_20230426_models.AddPermissionRequest,
        tmp_header: aliding_20230426_models.AddPermissionHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.AddPermissionResponse:
        """
        @summary 添加文件权限
        
        @param tmp_req: AddPermissionRequest
        @param tmp_header: AddPermissionHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddPermissionResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.AddPermissionShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.AddPermissionShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.members):
            request.members_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.members, 'Members', 'json')
        if not UtilClient.is_unset(tmp_req.option):
            request.option_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.option, 'Option', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.dentry_uuid):
            body['DentryUuid'] = request.dentry_uuid
        if not UtilClient.is_unset(request.members_shrink):
            body['Members'] = request.members_shrink
        if not UtilClient.is_unset(request.option_shrink):
            body['Option'] = request.option_shrink
        if not UtilClient.is_unset(request.role_id):
            body['RoleId'] = request.role_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='AddPermission',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/addPermission',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.AddPermissionResponse(),
            self.call_api(params, req, runtime)
        )

    async def add_permission_with_options_async(
        self,
        tmp_req: aliding_20230426_models.AddPermissionRequest,
        tmp_header: aliding_20230426_models.AddPermissionHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.AddPermissionResponse:
        """
        @summary 添加文件权限
        
        @param tmp_req: AddPermissionRequest
        @param tmp_header: AddPermissionHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddPermissionResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.AddPermissionShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.AddPermissionShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.members):
            request.members_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.members, 'Members', 'json')
        if not UtilClient.is_unset(tmp_req.option):
            request.option_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.option, 'Option', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.dentry_uuid):
            body['DentryUuid'] = request.dentry_uuid
        if not UtilClient.is_unset(request.members_shrink):
            body['Members'] = request.members_shrink
        if not UtilClient.is_unset(request.option_shrink):
            body['Option'] = request.option_shrink
        if not UtilClient.is_unset(request.role_id):
            body['RoleId'] = request.role_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='AddPermission',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/addPermission',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.AddPermissionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def add_permission(
        self,
        request: aliding_20230426_models.AddPermissionRequest,
    ) -> aliding_20230426_models.AddPermissionResponse:
        """
        @summary 添加文件权限
        
        @param request: AddPermissionRequest
        @return: AddPermissionResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.AddPermissionHeaders()
        return self.add_permission_with_options(request, headers, runtime)

    async def add_permission_async(
        self,
        request: aliding_20230426_models.AddPermissionRequest,
    ) -> aliding_20230426_models.AddPermissionResponse:
        """
        @summary 添加文件权限
        
        @param request: AddPermissionRequest
        @return: AddPermissionResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.AddPermissionHeaders()
        return await self.add_permission_with_options_async(request, headers, runtime)

    def add_record_permission_with_options(
        self,
        tmp_req: aliding_20230426_models.AddRecordPermissionRequest,
        tmp_header: aliding_20230426_models.AddRecordPermissionHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.AddRecordPermissionResponse:
        """
        @summary 添加闪记权限
        
        @param tmp_req: AddRecordPermissionRequest
        @param tmp_header: AddRecordPermissionHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddRecordPermissionResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.AddRecordPermissionShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.AddRecordPermissionShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.biz_type):
            body['BizType'] = request.biz_type
        if not UtilClient.is_unset(request.conference_id):
            body['ConferenceId'] = request.conference_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.user_id):
            body['UserId'] = request.user_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='AddRecordPermission',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/addRecordPermission',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.AddRecordPermissionResponse(),
            self.call_api(params, req, runtime)
        )

    async def add_record_permission_with_options_async(
        self,
        tmp_req: aliding_20230426_models.AddRecordPermissionRequest,
        tmp_header: aliding_20230426_models.AddRecordPermissionHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.AddRecordPermissionResponse:
        """
        @summary 添加闪记权限
        
        @param tmp_req: AddRecordPermissionRequest
        @param tmp_header: AddRecordPermissionHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddRecordPermissionResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.AddRecordPermissionShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.AddRecordPermissionShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.biz_type):
            body['BizType'] = request.biz_type
        if not UtilClient.is_unset(request.conference_id):
            body['ConferenceId'] = request.conference_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.user_id):
            body['UserId'] = request.user_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='AddRecordPermission',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/addRecordPermission',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.AddRecordPermissionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def add_record_permission(
        self,
        request: aliding_20230426_models.AddRecordPermissionRequest,
    ) -> aliding_20230426_models.AddRecordPermissionResponse:
        """
        @summary 添加闪记权限
        
        @param request: AddRecordPermissionRequest
        @return: AddRecordPermissionResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.AddRecordPermissionHeaders()
        return self.add_record_permission_with_options(request, headers, runtime)

    async def add_record_permission_async(
        self,
        request: aliding_20230426_models.AddRecordPermissionRequest,
    ) -> aliding_20230426_models.AddRecordPermissionResponse:
        """
        @summary 添加闪记权限
        
        @param request: AddRecordPermissionRequest
        @return: AddRecordPermissionResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.AddRecordPermissionHeaders()
        return await self.add_record_permission_with_options_async(request, headers, runtime)

    def add_scenegroup_member_with_options(
        self,
        request: aliding_20230426_models.AddScenegroupMemberRequest,
        tmp_header: aliding_20230426_models.AddScenegroupMemberHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.AddScenegroupMemberResponse:
        """
        @summary 新增群成员
        
        @param request: AddScenegroupMemberRequest
        @param tmp_header: AddScenegroupMemberHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddScenegroupMemberResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.AddScenegroupMemberShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.open_conversation_id):
            body['OpenConversationId'] = request.open_conversation_id
        if not UtilClient.is_unset(request.user_ids):
            body['UserIds'] = request.user_ids
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='AddScenegroupMember',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/im/addScenegroupMember',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.AddScenegroupMemberResponse(),
            self.call_api(params, req, runtime)
        )

    async def add_scenegroup_member_with_options_async(
        self,
        request: aliding_20230426_models.AddScenegroupMemberRequest,
        tmp_header: aliding_20230426_models.AddScenegroupMemberHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.AddScenegroupMemberResponse:
        """
        @summary 新增群成员
        
        @param request: AddScenegroupMemberRequest
        @param tmp_header: AddScenegroupMemberHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddScenegroupMemberResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.AddScenegroupMemberShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.open_conversation_id):
            body['OpenConversationId'] = request.open_conversation_id
        if not UtilClient.is_unset(request.user_ids):
            body['UserIds'] = request.user_ids
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='AddScenegroupMember',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/im/addScenegroupMember',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.AddScenegroupMemberResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def add_scenegroup_member(
        self,
        request: aliding_20230426_models.AddScenegroupMemberRequest,
    ) -> aliding_20230426_models.AddScenegroupMemberResponse:
        """
        @summary 新增群成员
        
        @param request: AddScenegroupMemberRequest
        @return: AddScenegroupMemberResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.AddScenegroupMemberHeaders()
        return self.add_scenegroup_member_with_options(request, headers, runtime)

    async def add_scenegroup_member_async(
        self,
        request: aliding_20230426_models.AddScenegroupMemberRequest,
    ) -> aliding_20230426_models.AddScenegroupMemberResponse:
        """
        @summary 新增群成员
        
        @param request: AddScenegroupMemberRequest
        @return: AddScenegroupMemberResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.AddScenegroupMemberHeaders()
        return await self.add_scenegroup_member_with_options_async(request, headers, runtime)

    def add_ticket_memo_with_options(
        self,
        tmp_req: aliding_20230426_models.AddTicketMemoRequest,
        tmp_header: aliding_20230426_models.AddTicketMemoHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.AddTicketMemoResponse:
        """
        @summary 工单添加备注
        
        @param tmp_req: AddTicketMemoRequest
        @param tmp_header: AddTicketMemoHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddTicketMemoResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.AddTicketMemoShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.AddTicketMemoShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        if not UtilClient.is_unset(tmp_req.ticket_memo):
            request.ticket_memo_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ticket_memo, 'TicketMemo', 'json')
        body = {}
        if not UtilClient.is_unset(request.open_team_id):
            body['OpenTeamId'] = request.open_team_id
        if not UtilClient.is_unset(request.open_ticket_id):
            body['OpenTicketId'] = request.open_ticket_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.ticket_memo_shrink):
            body['TicketMemo'] = request.ticket_memo_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='AddTicketMemo',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ticket/addTicketMemo',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.AddTicketMemoResponse(),
            self.call_api(params, req, runtime)
        )

    async def add_ticket_memo_with_options_async(
        self,
        tmp_req: aliding_20230426_models.AddTicketMemoRequest,
        tmp_header: aliding_20230426_models.AddTicketMemoHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.AddTicketMemoResponse:
        """
        @summary 工单添加备注
        
        @param tmp_req: AddTicketMemoRequest
        @param tmp_header: AddTicketMemoHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddTicketMemoResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.AddTicketMemoShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.AddTicketMemoShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        if not UtilClient.is_unset(tmp_req.ticket_memo):
            request.ticket_memo_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ticket_memo, 'TicketMemo', 'json')
        body = {}
        if not UtilClient.is_unset(request.open_team_id):
            body['OpenTeamId'] = request.open_team_id
        if not UtilClient.is_unset(request.open_ticket_id):
            body['OpenTicketId'] = request.open_ticket_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.ticket_memo_shrink):
            body['TicketMemo'] = request.ticket_memo_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='AddTicketMemo',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ticket/addTicketMemo',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.AddTicketMemoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def add_ticket_memo(
        self,
        request: aliding_20230426_models.AddTicketMemoRequest,
    ) -> aliding_20230426_models.AddTicketMemoResponse:
        """
        @summary 工单添加备注
        
        @param request: AddTicketMemoRequest
        @return: AddTicketMemoResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.AddTicketMemoHeaders()
        return self.add_ticket_memo_with_options(request, headers, runtime)

    async def add_ticket_memo_async(
        self,
        request: aliding_20230426_models.AddTicketMemoRequest,
    ) -> aliding_20230426_models.AddTicketMemoResponse:
        """
        @summary 工单添加备注
        
        @param request: AddTicketMemoRequest
        @return: AddTicketMemoResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.AddTicketMemoHeaders()
        return await self.add_ticket_memo_with_options_async(request, headers, runtime)

    def add_workspace_with_options(
        self,
        tmp_req: aliding_20230426_models.AddWorkspaceRequest,
        tmp_header: aliding_20230426_models.AddWorkspaceHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.AddWorkspaceResponse:
        """
        @summary 新建知识库
        
        @param tmp_req: AddWorkspaceRequest
        @param tmp_header: AddWorkspaceHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddWorkspaceResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.AddWorkspaceShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.AddWorkspaceShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.option):
            request.option_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.option, 'Option', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.option_shrink):
            body['Option'] = request.option_shrink
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='AddWorkspace',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v2/documents/addWorkspace',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.AddWorkspaceResponse(),
            self.call_api(params, req, runtime)
        )

    async def add_workspace_with_options_async(
        self,
        tmp_req: aliding_20230426_models.AddWorkspaceRequest,
        tmp_header: aliding_20230426_models.AddWorkspaceHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.AddWorkspaceResponse:
        """
        @summary 新建知识库
        
        @param tmp_req: AddWorkspaceRequest
        @param tmp_header: AddWorkspaceHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddWorkspaceResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.AddWorkspaceShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.AddWorkspaceShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.option):
            request.option_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.option, 'Option', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.option_shrink):
            body['Option'] = request.option_shrink
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='AddWorkspace',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v2/documents/addWorkspace',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.AddWorkspaceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def add_workspace(
        self,
        request: aliding_20230426_models.AddWorkspaceRequest,
    ) -> aliding_20230426_models.AddWorkspaceResponse:
        """
        @summary 新建知识库
        
        @param request: AddWorkspaceRequest
        @return: AddWorkspaceResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.AddWorkspaceHeaders()
        return self.add_workspace_with_options(request, headers, runtime)

    async def add_workspace_async(
        self,
        request: aliding_20230426_models.AddWorkspaceRequest,
    ) -> aliding_20230426_models.AddWorkspaceResponse:
        """
        @summary 新建知识库
        
        @param request: AddWorkspaceRequest
        @return: AddWorkspaceResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.AddWorkspaceHeaders()
        return await self.add_workspace_with_options_async(request, headers, runtime)

    def add_workspace_doc_members_with_options(
        self,
        tmp_req: aliding_20230426_models.AddWorkspaceDocMembersRequest,
        tmp_header: aliding_20230426_models.AddWorkspaceDocMembersHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.AddWorkspaceDocMembersResponse:
        """
        @summary 添加知识库文档成员
        
        @param tmp_req: AddWorkspaceDocMembersRequest
        @param tmp_header: AddWorkspaceDocMembersHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddWorkspaceDocMembersResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.AddWorkspaceDocMembersShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.AddWorkspaceDocMembersShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.members):
            request.members_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.members, 'Members', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.members_shrink):
            body['Members'] = request.members_shrink
        if not UtilClient.is_unset(request.node_id):
            body['NodeId'] = request.node_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workspace_id):
            body['WorkspaceId'] = request.workspace_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='AddWorkspaceDocMembers',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/addWorkspaceDocMembers',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.AddWorkspaceDocMembersResponse(),
            self.call_api(params, req, runtime)
        )

    async def add_workspace_doc_members_with_options_async(
        self,
        tmp_req: aliding_20230426_models.AddWorkspaceDocMembersRequest,
        tmp_header: aliding_20230426_models.AddWorkspaceDocMembersHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.AddWorkspaceDocMembersResponse:
        """
        @summary 添加知识库文档成员
        
        @param tmp_req: AddWorkspaceDocMembersRequest
        @param tmp_header: AddWorkspaceDocMembersHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddWorkspaceDocMembersResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.AddWorkspaceDocMembersShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.AddWorkspaceDocMembersShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.members):
            request.members_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.members, 'Members', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.members_shrink):
            body['Members'] = request.members_shrink
        if not UtilClient.is_unset(request.node_id):
            body['NodeId'] = request.node_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workspace_id):
            body['WorkspaceId'] = request.workspace_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='AddWorkspaceDocMembers',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/addWorkspaceDocMembers',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.AddWorkspaceDocMembersResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def add_workspace_doc_members(
        self,
        request: aliding_20230426_models.AddWorkspaceDocMembersRequest,
    ) -> aliding_20230426_models.AddWorkspaceDocMembersResponse:
        """
        @summary 添加知识库文档成员
        
        @param request: AddWorkspaceDocMembersRequest
        @return: AddWorkspaceDocMembersResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.AddWorkspaceDocMembersHeaders()
        return self.add_workspace_doc_members_with_options(request, headers, runtime)

    async def add_workspace_doc_members_async(
        self,
        request: aliding_20230426_models.AddWorkspaceDocMembersRequest,
    ) -> aliding_20230426_models.AddWorkspaceDocMembersResponse:
        """
        @summary 添加知识库文档成员
        
        @param request: AddWorkspaceDocMembersRequest
        @return: AddWorkspaceDocMembersResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.AddWorkspaceDocMembersHeaders()
        return await self.add_workspace_doc_members_with_options_async(request, headers, runtime)

    def add_workspace_members_with_options(
        self,
        tmp_req: aliding_20230426_models.AddWorkspaceMembersRequest,
        tmp_header: aliding_20230426_models.AddWorkspaceMembersHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.AddWorkspaceMembersResponse:
        """
        @summary 添加知识库成员
        
        @param tmp_req: AddWorkspaceMembersRequest
        @param tmp_header: AddWorkspaceMembersHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddWorkspaceMembersResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.AddWorkspaceMembersShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.AddWorkspaceMembersShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.members):
            request.members_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.members, 'Members', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.members_shrink):
            body['Members'] = request.members_shrink
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workspace_id):
            body['WorkspaceId'] = request.workspace_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='AddWorkspaceMembers',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/addWorkspaceMembers',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.AddWorkspaceMembersResponse(),
            self.call_api(params, req, runtime)
        )

    async def add_workspace_members_with_options_async(
        self,
        tmp_req: aliding_20230426_models.AddWorkspaceMembersRequest,
        tmp_header: aliding_20230426_models.AddWorkspaceMembersHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.AddWorkspaceMembersResponse:
        """
        @summary 添加知识库成员
        
        @param tmp_req: AddWorkspaceMembersRequest
        @param tmp_header: AddWorkspaceMembersHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddWorkspaceMembersResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.AddWorkspaceMembersShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.AddWorkspaceMembersShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.members):
            request.members_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.members, 'Members', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.members_shrink):
            body['Members'] = request.members_shrink
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workspace_id):
            body['WorkspaceId'] = request.workspace_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='AddWorkspaceMembers',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/addWorkspaceMembers',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.AddWorkspaceMembersResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def add_workspace_members(
        self,
        request: aliding_20230426_models.AddWorkspaceMembersRequest,
    ) -> aliding_20230426_models.AddWorkspaceMembersResponse:
        """
        @summary 添加知识库成员
        
        @param request: AddWorkspaceMembersRequest
        @return: AddWorkspaceMembersResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.AddWorkspaceMembersHeaders()
        return self.add_workspace_members_with_options(request, headers, runtime)

    async def add_workspace_members_async(
        self,
        request: aliding_20230426_models.AddWorkspaceMembersRequest,
    ) -> aliding_20230426_models.AddWorkspaceMembersResponse:
        """
        @summary 添加知识库成员
        
        @param request: AddWorkspaceMembersRequest
        @return: AddWorkspaceMembersResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.AddWorkspaceMembersHeaders()
        return await self.add_workspace_members_with_options_async(request, headers, runtime)

    def assign_ticket_with_options(
        self,
        tmp_req: aliding_20230426_models.AssignTicketRequest,
        tmp_header: aliding_20230426_models.AssignTicketHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.AssignTicketResponse:
        """
        @summary 指派工单
        
        @param tmp_req: AssignTicketRequest
        @param tmp_header: AssignTicketHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: AssignTicketResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.AssignTicketShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.AssignTicketShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.notify):
            request.notify_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.notify, 'Notify', 'json')
        if not UtilClient.is_unset(tmp_req.processor_user_ids):
            request.processor_user_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.processor_user_ids, 'ProcessorUserIds', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        if not UtilClient.is_unset(tmp_req.ticket_memo):
            request.ticket_memo_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ticket_memo, 'TicketMemo', 'json')
        body = {}
        if not UtilClient.is_unset(request.notify_shrink):
            body['Notify'] = request.notify_shrink
        if not UtilClient.is_unset(request.open_team_id):
            body['OpenTeamId'] = request.open_team_id
        if not UtilClient.is_unset(request.open_ticket_id):
            body['OpenTicketId'] = request.open_ticket_id
        if not UtilClient.is_unset(request.processor_user_ids_shrink):
            body['ProcessorUserIds'] = request.processor_user_ids_shrink
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.ticket_memo_shrink):
            body['TicketMemo'] = request.ticket_memo_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='AssignTicket',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ticket/assignTicket',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.AssignTicketResponse(),
            self.call_api(params, req, runtime)
        )

    async def assign_ticket_with_options_async(
        self,
        tmp_req: aliding_20230426_models.AssignTicketRequest,
        tmp_header: aliding_20230426_models.AssignTicketHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.AssignTicketResponse:
        """
        @summary 指派工单
        
        @param tmp_req: AssignTicketRequest
        @param tmp_header: AssignTicketHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: AssignTicketResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.AssignTicketShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.AssignTicketShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.notify):
            request.notify_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.notify, 'Notify', 'json')
        if not UtilClient.is_unset(tmp_req.processor_user_ids):
            request.processor_user_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.processor_user_ids, 'ProcessorUserIds', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        if not UtilClient.is_unset(tmp_req.ticket_memo):
            request.ticket_memo_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ticket_memo, 'TicketMemo', 'json')
        body = {}
        if not UtilClient.is_unset(request.notify_shrink):
            body['Notify'] = request.notify_shrink
        if not UtilClient.is_unset(request.open_team_id):
            body['OpenTeamId'] = request.open_team_id
        if not UtilClient.is_unset(request.open_ticket_id):
            body['OpenTicketId'] = request.open_ticket_id
        if not UtilClient.is_unset(request.processor_user_ids_shrink):
            body['ProcessorUserIds'] = request.processor_user_ids_shrink
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.ticket_memo_shrink):
            body['TicketMemo'] = request.ticket_memo_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='AssignTicket',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ticket/assignTicket',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.AssignTicketResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def assign_ticket(
        self,
        request: aliding_20230426_models.AssignTicketRequest,
    ) -> aliding_20230426_models.AssignTicketResponse:
        """
        @summary 指派工单
        
        @param request: AssignTicketRequest
        @return: AssignTicketResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.AssignTicketHeaders()
        return self.assign_ticket_with_options(request, headers, runtime)

    async def assign_ticket_async(
        self,
        request: aliding_20230426_models.AssignTicketRequest,
    ) -> aliding_20230426_models.AssignTicketResponse:
        """
        @summary 指派工单
        
        @param request: AssignTicketRequest
        @return: AssignTicketResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.AssignTicketHeaders()
        return await self.assign_ticket_with_options_async(request, headers, runtime)

    def authorize_skill_with_options(
        self,
        tmp_req: aliding_20230426_models.AuthorizeSkillRequest,
        tmp_header: aliding_20230426_models.AuthorizeSkillHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.AuthorizeSkillResponse:
        """
        @summary 校验AI技能调用权限
        
        @param tmp_req: AuthorizeSkillRequest
        @param tmp_header: AuthorizeSkillHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: AuthorizeSkillResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.AuthorizeSkillShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.AuthorizeSkillShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.permission_codes):
            request.permission_codes_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.permission_codes, 'PermissionCodes', 'json')
        body = {}
        if not UtilClient.is_unset(request.permission_codes_shrink):
            body['PermissionCodes'] = request.permission_codes_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='AuthorizeSkill',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/ai/v1/skill/authorizeSkill',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.AuthorizeSkillResponse(),
            self.call_api(params, req, runtime)
        )

    async def authorize_skill_with_options_async(
        self,
        tmp_req: aliding_20230426_models.AuthorizeSkillRequest,
        tmp_header: aliding_20230426_models.AuthorizeSkillHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.AuthorizeSkillResponse:
        """
        @summary 校验AI技能调用权限
        
        @param tmp_req: AuthorizeSkillRequest
        @param tmp_header: AuthorizeSkillHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: AuthorizeSkillResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.AuthorizeSkillShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.AuthorizeSkillShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.permission_codes):
            request.permission_codes_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.permission_codes, 'PermissionCodes', 'json')
        body = {}
        if not UtilClient.is_unset(request.permission_codes_shrink):
            body['PermissionCodes'] = request.permission_codes_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='AuthorizeSkill',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/ai/v1/skill/authorizeSkill',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.AuthorizeSkillResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def authorize_skill(
        self,
        request: aliding_20230426_models.AuthorizeSkillRequest,
    ) -> aliding_20230426_models.AuthorizeSkillResponse:
        """
        @summary 校验AI技能调用权限
        
        @param request: AuthorizeSkillRequest
        @return: AuthorizeSkillResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.AuthorizeSkillHeaders()
        return self.authorize_skill_with_options(request, headers, runtime)

    async def authorize_skill_async(
        self,
        request: aliding_20230426_models.AuthorizeSkillRequest,
    ) -> aliding_20230426_models.AuthorizeSkillResponse:
        """
        @summary 校验AI技能调用权限
        
        @param request: AuthorizeSkillRequest
        @return: AuthorizeSkillResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.AuthorizeSkillHeaders()
        return await self.authorize_skill_with_options_async(request, headers, runtime)

    def batch_get_form_data_by_id_list_with_options(
        self,
        tmp_req: aliding_20230426_models.BatchGetFormDataByIdListRequest,
        tmp_header: aliding_20230426_models.BatchGetFormDataByIdListHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.BatchGetFormDataByIdListResponse:
        """
        @summary 批量获取表单实例数据
        
        @param tmp_req: BatchGetFormDataByIdListRequest
        @param tmp_header: BatchGetFormDataByIdListHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: BatchGetFormDataByIdListResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.BatchGetFormDataByIdListShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.BatchGetFormDataByIdListShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.form_instance_id_list):
            request.form_instance_id_list_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.form_instance_id_list, 'FormInstanceIdList', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.form_instance_id_list_shrink):
            body['FormInstanceIdList'] = request.form_instance_id_list_shrink
        if not UtilClient.is_unset(request.form_uuid):
            body['FormUuid'] = request.form_uuid
        if not UtilClient.is_unset(request.need_form_instance_value):
            body['NeedFormInstanceValue'] = request.need_form_instance_value
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='BatchGetFormDataByIdList',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/batchGetFormDataByIdList',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.BatchGetFormDataByIdListResponse(),
            self.call_api(params, req, runtime)
        )

    async def batch_get_form_data_by_id_list_with_options_async(
        self,
        tmp_req: aliding_20230426_models.BatchGetFormDataByIdListRequest,
        tmp_header: aliding_20230426_models.BatchGetFormDataByIdListHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.BatchGetFormDataByIdListResponse:
        """
        @summary 批量获取表单实例数据
        
        @param tmp_req: BatchGetFormDataByIdListRequest
        @param tmp_header: BatchGetFormDataByIdListHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: BatchGetFormDataByIdListResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.BatchGetFormDataByIdListShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.BatchGetFormDataByIdListShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.form_instance_id_list):
            request.form_instance_id_list_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.form_instance_id_list, 'FormInstanceIdList', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.form_instance_id_list_shrink):
            body['FormInstanceIdList'] = request.form_instance_id_list_shrink
        if not UtilClient.is_unset(request.form_uuid):
            body['FormUuid'] = request.form_uuid
        if not UtilClient.is_unset(request.need_form_instance_value):
            body['NeedFormInstanceValue'] = request.need_form_instance_value
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='BatchGetFormDataByIdList',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/batchGetFormDataByIdList',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.BatchGetFormDataByIdListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def batch_get_form_data_by_id_list(
        self,
        request: aliding_20230426_models.BatchGetFormDataByIdListRequest,
    ) -> aliding_20230426_models.BatchGetFormDataByIdListResponse:
        """
        @summary 批量获取表单实例数据
        
        @param request: BatchGetFormDataByIdListRequest
        @return: BatchGetFormDataByIdListResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.BatchGetFormDataByIdListHeaders()
        return self.batch_get_form_data_by_id_list_with_options(request, headers, runtime)

    async def batch_get_form_data_by_id_list_async(
        self,
        request: aliding_20230426_models.BatchGetFormDataByIdListRequest,
    ) -> aliding_20230426_models.BatchGetFormDataByIdListResponse:
        """
        @summary 批量获取表单实例数据
        
        @param request: BatchGetFormDataByIdListRequest
        @return: BatchGetFormDataByIdListResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.BatchGetFormDataByIdListHeaders()
        return await self.batch_get_form_data_by_id_list_with_options_async(request, headers, runtime)

    def batch_removal_by_form_instance_id_list_with_options(
        self,
        tmp_req: aliding_20230426_models.BatchRemovalByFormInstanceIdListRequest,
        tmp_header: aliding_20230426_models.BatchRemovalByFormInstanceIdListHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.BatchRemovalByFormInstanceIdListResponse:
        """
        @summary 批量删除表单实例
        
        @param tmp_req: BatchRemovalByFormInstanceIdListRequest
        @param tmp_header: BatchRemovalByFormInstanceIdListHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: BatchRemovalByFormInstanceIdListResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.BatchRemovalByFormInstanceIdListShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.BatchRemovalByFormInstanceIdListShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.form_instance_id_list):
            request.form_instance_id_list_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.form_instance_id_list, 'FormInstanceIdList', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.asynchronous_execution):
            body['AsynchronousExecution'] = request.asynchronous_execution
        if not UtilClient.is_unset(request.execute_expression):
            body['ExecuteExpression'] = request.execute_expression
        if not UtilClient.is_unset(request.form_instance_id_list_shrink):
            body['FormInstanceIdList'] = request.form_instance_id_list_shrink
        if not UtilClient.is_unset(request.form_uuid):
            body['FormUuid'] = request.form_uuid
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='BatchRemovalByFormInstanceIdList',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/batchRemovalByFormInstanceIdList',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.BatchRemovalByFormInstanceIdListResponse(),
            self.call_api(params, req, runtime)
        )

    async def batch_removal_by_form_instance_id_list_with_options_async(
        self,
        tmp_req: aliding_20230426_models.BatchRemovalByFormInstanceIdListRequest,
        tmp_header: aliding_20230426_models.BatchRemovalByFormInstanceIdListHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.BatchRemovalByFormInstanceIdListResponse:
        """
        @summary 批量删除表单实例
        
        @param tmp_req: BatchRemovalByFormInstanceIdListRequest
        @param tmp_header: BatchRemovalByFormInstanceIdListHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: BatchRemovalByFormInstanceIdListResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.BatchRemovalByFormInstanceIdListShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.BatchRemovalByFormInstanceIdListShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.form_instance_id_list):
            request.form_instance_id_list_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.form_instance_id_list, 'FormInstanceIdList', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.asynchronous_execution):
            body['AsynchronousExecution'] = request.asynchronous_execution
        if not UtilClient.is_unset(request.execute_expression):
            body['ExecuteExpression'] = request.execute_expression
        if not UtilClient.is_unset(request.form_instance_id_list_shrink):
            body['FormInstanceIdList'] = request.form_instance_id_list_shrink
        if not UtilClient.is_unset(request.form_uuid):
            body['FormUuid'] = request.form_uuid
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='BatchRemovalByFormInstanceIdList',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/batchRemovalByFormInstanceIdList',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.BatchRemovalByFormInstanceIdListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def batch_removal_by_form_instance_id_list(
        self,
        request: aliding_20230426_models.BatchRemovalByFormInstanceIdListRequest,
    ) -> aliding_20230426_models.BatchRemovalByFormInstanceIdListResponse:
        """
        @summary 批量删除表单实例
        
        @param request: BatchRemovalByFormInstanceIdListRequest
        @return: BatchRemovalByFormInstanceIdListResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.BatchRemovalByFormInstanceIdListHeaders()
        return self.batch_removal_by_form_instance_id_list_with_options(request, headers, runtime)

    async def batch_removal_by_form_instance_id_list_async(
        self,
        request: aliding_20230426_models.BatchRemovalByFormInstanceIdListRequest,
    ) -> aliding_20230426_models.BatchRemovalByFormInstanceIdListResponse:
        """
        @summary 批量删除表单实例
        
        @param request: BatchRemovalByFormInstanceIdListRequest
        @return: BatchRemovalByFormInstanceIdListResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.BatchRemovalByFormInstanceIdListHeaders()
        return await self.batch_removal_by_form_instance_id_list_with_options_async(request, headers, runtime)

    def batch_save_form_data_with_options(
        self,
        tmp_req: aliding_20230426_models.BatchSaveFormDataRequest,
        tmp_header: aliding_20230426_models.BatchSaveFormDataHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.BatchSaveFormDataResponse:
        """
        @summary 批量创建表单实例
        
        @param tmp_req: BatchSaveFormDataRequest
        @param tmp_header: BatchSaveFormDataHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: BatchSaveFormDataResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.BatchSaveFormDataShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.BatchSaveFormDataShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.form_data_json_list):
            request.form_data_json_list_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.form_data_json_list, 'FormDataJsonList', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.asynchronous_execution):
            body['AsynchronousExecution'] = request.asynchronous_execution
        if not UtilClient.is_unset(request.form_data_json_list_shrink):
            body['FormDataJsonList'] = request.form_data_json_list_shrink
        if not UtilClient.is_unset(request.form_uuid):
            body['FormUuid'] = request.form_uuid
        if not UtilClient.is_unset(request.keep_running_after_exception):
            body['KeepRunningAfterException'] = request.keep_running_after_exception
        if not UtilClient.is_unset(request.no_execute_expression):
            body['NoExecuteExpression'] = request.no_execute_expression
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='BatchSaveFormData',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/batchSaveFormData',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.BatchSaveFormDataResponse(),
            self.call_api(params, req, runtime)
        )

    async def batch_save_form_data_with_options_async(
        self,
        tmp_req: aliding_20230426_models.BatchSaveFormDataRequest,
        tmp_header: aliding_20230426_models.BatchSaveFormDataHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.BatchSaveFormDataResponse:
        """
        @summary 批量创建表单实例
        
        @param tmp_req: BatchSaveFormDataRequest
        @param tmp_header: BatchSaveFormDataHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: BatchSaveFormDataResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.BatchSaveFormDataShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.BatchSaveFormDataShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.form_data_json_list):
            request.form_data_json_list_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.form_data_json_list, 'FormDataJsonList', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.asynchronous_execution):
            body['AsynchronousExecution'] = request.asynchronous_execution
        if not UtilClient.is_unset(request.form_data_json_list_shrink):
            body['FormDataJsonList'] = request.form_data_json_list_shrink
        if not UtilClient.is_unset(request.form_uuid):
            body['FormUuid'] = request.form_uuid
        if not UtilClient.is_unset(request.keep_running_after_exception):
            body['KeepRunningAfterException'] = request.keep_running_after_exception
        if not UtilClient.is_unset(request.no_execute_expression):
            body['NoExecuteExpression'] = request.no_execute_expression
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='BatchSaveFormData',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/batchSaveFormData',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.BatchSaveFormDataResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def batch_save_form_data(
        self,
        request: aliding_20230426_models.BatchSaveFormDataRequest,
    ) -> aliding_20230426_models.BatchSaveFormDataResponse:
        """
        @summary 批量创建表单实例
        
        @param request: BatchSaveFormDataRequest
        @return: BatchSaveFormDataResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.BatchSaveFormDataHeaders()
        return self.batch_save_form_data_with_options(request, headers, runtime)

    async def batch_save_form_data_async(
        self,
        request: aliding_20230426_models.BatchSaveFormDataRequest,
    ) -> aliding_20230426_models.BatchSaveFormDataResponse:
        """
        @summary 批量创建表单实例
        
        @param request: BatchSaveFormDataRequest
        @return: BatchSaveFormDataResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.BatchSaveFormDataHeaders()
        return await self.batch_save_form_data_with_options_async(request, headers, runtime)

    def batch_update_form_data_by_instance_id_with_options(
        self,
        tmp_req: aliding_20230426_models.BatchUpdateFormDataByInstanceIdRequest,
        tmp_header: aliding_20230426_models.BatchUpdateFormDataByInstanceIdHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.BatchUpdateFormDataByInstanceIdResponse:
        """
        @summary 批量更新表单实例内的组件值
        
        @param tmp_req: BatchUpdateFormDataByInstanceIdRequest
        @param tmp_header: BatchUpdateFormDataByInstanceIdHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: BatchUpdateFormDataByInstanceIdResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.BatchUpdateFormDataByInstanceIdShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.BatchUpdateFormDataByInstanceIdShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.form_instance_id_list):
            request.form_instance_id_list_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.form_instance_id_list, 'FormInstanceIdList', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.asynchronous_execution):
            body['AsynchronousExecution'] = request.asynchronous_execution
        if not UtilClient.is_unset(request.form_instance_id_list_shrink):
            body['FormInstanceIdList'] = request.form_instance_id_list_shrink
        if not UtilClient.is_unset(request.form_uuid):
            body['FormUuid'] = request.form_uuid
        if not UtilClient.is_unset(request.ignore_empty):
            body['IgnoreEmpty'] = request.ignore_empty
        if not UtilClient.is_unset(request.no_execute_expression):
            body['NoExecuteExpression'] = request.no_execute_expression
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        if not UtilClient.is_unset(request.update_form_data_json):
            body['UpdateFormDataJson'] = request.update_form_data_json
        if not UtilClient.is_unset(request.use_latest_form_schema_version):
            body['UseLatestFormSchemaVersion'] = request.use_latest_form_schema_version
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='BatchUpdateFormDataByInstanceId',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/batchUpdateFormDataByInstanceId',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.BatchUpdateFormDataByInstanceIdResponse(),
            self.call_api(params, req, runtime)
        )

    async def batch_update_form_data_by_instance_id_with_options_async(
        self,
        tmp_req: aliding_20230426_models.BatchUpdateFormDataByInstanceIdRequest,
        tmp_header: aliding_20230426_models.BatchUpdateFormDataByInstanceIdHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.BatchUpdateFormDataByInstanceIdResponse:
        """
        @summary 批量更新表单实例内的组件值
        
        @param tmp_req: BatchUpdateFormDataByInstanceIdRequest
        @param tmp_header: BatchUpdateFormDataByInstanceIdHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: BatchUpdateFormDataByInstanceIdResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.BatchUpdateFormDataByInstanceIdShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.BatchUpdateFormDataByInstanceIdShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.form_instance_id_list):
            request.form_instance_id_list_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.form_instance_id_list, 'FormInstanceIdList', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.asynchronous_execution):
            body['AsynchronousExecution'] = request.asynchronous_execution
        if not UtilClient.is_unset(request.form_instance_id_list_shrink):
            body['FormInstanceIdList'] = request.form_instance_id_list_shrink
        if not UtilClient.is_unset(request.form_uuid):
            body['FormUuid'] = request.form_uuid
        if not UtilClient.is_unset(request.ignore_empty):
            body['IgnoreEmpty'] = request.ignore_empty
        if not UtilClient.is_unset(request.no_execute_expression):
            body['NoExecuteExpression'] = request.no_execute_expression
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        if not UtilClient.is_unset(request.update_form_data_json):
            body['UpdateFormDataJson'] = request.update_form_data_json
        if not UtilClient.is_unset(request.use_latest_form_schema_version):
            body['UseLatestFormSchemaVersion'] = request.use_latest_form_schema_version
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='BatchUpdateFormDataByInstanceId',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/batchUpdateFormDataByInstanceId',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.BatchUpdateFormDataByInstanceIdResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def batch_update_form_data_by_instance_id(
        self,
        request: aliding_20230426_models.BatchUpdateFormDataByInstanceIdRequest,
    ) -> aliding_20230426_models.BatchUpdateFormDataByInstanceIdResponse:
        """
        @summary 批量更新表单实例内的组件值
        
        @param request: BatchUpdateFormDataByInstanceIdRequest
        @return: BatchUpdateFormDataByInstanceIdResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.BatchUpdateFormDataByInstanceIdHeaders()
        return self.batch_update_form_data_by_instance_id_with_options(request, headers, runtime)

    async def batch_update_form_data_by_instance_id_async(
        self,
        request: aliding_20230426_models.BatchUpdateFormDataByInstanceIdRequest,
    ) -> aliding_20230426_models.BatchUpdateFormDataByInstanceIdResponse:
        """
        @summary 批量更新表单实例内的组件值
        
        @param request: BatchUpdateFormDataByInstanceIdRequest
        @return: BatchUpdateFormDataByInstanceIdResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.BatchUpdateFormDataByInstanceIdHeaders()
        return await self.batch_update_form_data_by_instance_id_with_options_async(request, headers, runtime)

    def batch_update_form_data_by_instance_map_with_options(
        self,
        tmp_req: aliding_20230426_models.BatchUpdateFormDataByInstanceMapRequest,
        tmp_header: aliding_20230426_models.BatchUpdateFormDataByInstanceMapHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.BatchUpdateFormDataByInstanceMapResponse:
        """
        @summary 通过表单实例数据批量更新表单实例
        
        @param tmp_req: BatchUpdateFormDataByInstanceMapRequest
        @param tmp_header: BatchUpdateFormDataByInstanceMapHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: BatchUpdateFormDataByInstanceMapResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.BatchUpdateFormDataByInstanceMapShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.BatchUpdateFormDataByInstanceMapShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.update_form_data_json_map):
            request.update_form_data_json_map_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.update_form_data_json_map, 'UpdateFormDataJsonMap', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.asynchronous_execution):
            body['AsynchronousExecution'] = request.asynchronous_execution
        if not UtilClient.is_unset(request.form_uuid):
            body['FormUuid'] = request.form_uuid
        if not UtilClient.is_unset(request.ignore_empty):
            body['IgnoreEmpty'] = request.ignore_empty
        if not UtilClient.is_unset(request.no_execute_expression):
            body['NoExecuteExpression'] = request.no_execute_expression
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        if not UtilClient.is_unset(request.update_form_data_json_map_shrink):
            body['UpdateFormDataJsonMap'] = request.update_form_data_json_map_shrink
        if not UtilClient.is_unset(request.use_latest_form_schema_version):
            body['UseLatestFormSchemaVersion'] = request.use_latest_form_schema_version
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='BatchUpdateFormDataByInstanceMap',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/batchUpdateFormDataByInstanceMap',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.BatchUpdateFormDataByInstanceMapResponse(),
            self.call_api(params, req, runtime)
        )

    async def batch_update_form_data_by_instance_map_with_options_async(
        self,
        tmp_req: aliding_20230426_models.BatchUpdateFormDataByInstanceMapRequest,
        tmp_header: aliding_20230426_models.BatchUpdateFormDataByInstanceMapHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.BatchUpdateFormDataByInstanceMapResponse:
        """
        @summary 通过表单实例数据批量更新表单实例
        
        @param tmp_req: BatchUpdateFormDataByInstanceMapRequest
        @param tmp_header: BatchUpdateFormDataByInstanceMapHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: BatchUpdateFormDataByInstanceMapResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.BatchUpdateFormDataByInstanceMapShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.BatchUpdateFormDataByInstanceMapShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.update_form_data_json_map):
            request.update_form_data_json_map_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.update_form_data_json_map, 'UpdateFormDataJsonMap', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.asynchronous_execution):
            body['AsynchronousExecution'] = request.asynchronous_execution
        if not UtilClient.is_unset(request.form_uuid):
            body['FormUuid'] = request.form_uuid
        if not UtilClient.is_unset(request.ignore_empty):
            body['IgnoreEmpty'] = request.ignore_empty
        if not UtilClient.is_unset(request.no_execute_expression):
            body['NoExecuteExpression'] = request.no_execute_expression
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        if not UtilClient.is_unset(request.update_form_data_json_map_shrink):
            body['UpdateFormDataJsonMap'] = request.update_form_data_json_map_shrink
        if not UtilClient.is_unset(request.use_latest_form_schema_version):
            body['UseLatestFormSchemaVersion'] = request.use_latest_form_schema_version
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='BatchUpdateFormDataByInstanceMap',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/batchUpdateFormDataByInstanceMap',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.BatchUpdateFormDataByInstanceMapResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def batch_update_form_data_by_instance_map(
        self,
        request: aliding_20230426_models.BatchUpdateFormDataByInstanceMapRequest,
    ) -> aliding_20230426_models.BatchUpdateFormDataByInstanceMapResponse:
        """
        @summary 通过表单实例数据批量更新表单实例
        
        @param request: BatchUpdateFormDataByInstanceMapRequest
        @return: BatchUpdateFormDataByInstanceMapResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.BatchUpdateFormDataByInstanceMapHeaders()
        return self.batch_update_form_data_by_instance_map_with_options(request, headers, runtime)

    async def batch_update_form_data_by_instance_map_async(
        self,
        request: aliding_20230426_models.BatchUpdateFormDataByInstanceMapRequest,
    ) -> aliding_20230426_models.BatchUpdateFormDataByInstanceMapResponse:
        """
        @summary 通过表单实例数据批量更新表单实例
        
        @param request: BatchUpdateFormDataByInstanceMapRequest
        @return: BatchUpdateFormDataByInstanceMapResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.BatchUpdateFormDataByInstanceMapHeaders()
        return await self.batch_update_form_data_by_instance_map_with_options_async(request, headers, runtime)

    def cancel_schedule_conference_with_options(
        self,
        tmp_req: aliding_20230426_models.CancelScheduleConferenceRequest,
        tmp_header: aliding_20230426_models.CancelScheduleConferenceHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CancelScheduleConferenceResponse:
        """
        @summary 取消预约会议
        
        @param tmp_req: CancelScheduleConferenceRequest
        @param tmp_header: CancelScheduleConferenceHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CancelScheduleConferenceResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CancelScheduleConferenceShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CancelScheduleConferenceShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.schedule_conference_id):
            body['ScheduleConferenceId'] = request.schedule_conference_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CancelScheduleConference',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/cancelScheduleConference',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CancelScheduleConferenceResponse(),
            self.call_api(params, req, runtime)
        )

    async def cancel_schedule_conference_with_options_async(
        self,
        tmp_req: aliding_20230426_models.CancelScheduleConferenceRequest,
        tmp_header: aliding_20230426_models.CancelScheduleConferenceHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CancelScheduleConferenceResponse:
        """
        @summary 取消预约会议
        
        @param tmp_req: CancelScheduleConferenceRequest
        @param tmp_header: CancelScheduleConferenceHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CancelScheduleConferenceResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CancelScheduleConferenceShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CancelScheduleConferenceShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.schedule_conference_id):
            body['ScheduleConferenceId'] = request.schedule_conference_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CancelScheduleConference',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/cancelScheduleConference',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CancelScheduleConferenceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def cancel_schedule_conference(
        self,
        request: aliding_20230426_models.CancelScheduleConferenceRequest,
    ) -> aliding_20230426_models.CancelScheduleConferenceResponse:
        """
        @summary 取消预约会议
        
        @param request: CancelScheduleConferenceRequest
        @return: CancelScheduleConferenceResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CancelScheduleConferenceHeaders()
        return self.cancel_schedule_conference_with_options(request, headers, runtime)

    async def cancel_schedule_conference_async(
        self,
        request: aliding_20230426_models.CancelScheduleConferenceRequest,
    ) -> aliding_20230426_models.CancelScheduleConferenceResponse:
        """
        @summary 取消预约会议
        
        @param request: CancelScheduleConferenceRequest
        @return: CancelScheduleConferenceResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CancelScheduleConferenceHeaders()
        return await self.cancel_schedule_conference_with_options_async(request, headers, runtime)

    def change_ding_talk_id_with_options(
        self,
        tmp_req: aliding_20230426_models.ChangeDingTalkIdRequest,
        tmp_header: aliding_20230426_models.ChangeDingTalkIdHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ChangeDingTalkIdResponse:
        """
        @summary 修改阿里钉号
        
        @param tmp_req: ChangeDingTalkIdRequest
        @param tmp_header: ChangeDingTalkIdHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ChangeDingTalkIdResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.ChangeDingTalkIdShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.ChangeDingTalkIdShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.ding_talk_id):
            body['DingTalkId'] = request.ding_talk_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ChangeDingTalkId',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/user/changeDingTalkId',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ChangeDingTalkIdResponse(),
            self.call_api(params, req, runtime)
        )

    async def change_ding_talk_id_with_options_async(
        self,
        tmp_req: aliding_20230426_models.ChangeDingTalkIdRequest,
        tmp_header: aliding_20230426_models.ChangeDingTalkIdHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ChangeDingTalkIdResponse:
        """
        @summary 修改阿里钉号
        
        @param tmp_req: ChangeDingTalkIdRequest
        @param tmp_header: ChangeDingTalkIdHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ChangeDingTalkIdResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.ChangeDingTalkIdShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.ChangeDingTalkIdShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.ding_talk_id):
            body['DingTalkId'] = request.ding_talk_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ChangeDingTalkId',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/user/changeDingTalkId',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ChangeDingTalkIdResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def change_ding_talk_id(
        self,
        request: aliding_20230426_models.ChangeDingTalkIdRequest,
    ) -> aliding_20230426_models.ChangeDingTalkIdResponse:
        """
        @summary 修改阿里钉号
        
        @param request: ChangeDingTalkIdRequest
        @return: ChangeDingTalkIdResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ChangeDingTalkIdHeaders()
        return self.change_ding_talk_id_with_options(request, headers, runtime)

    async def change_ding_talk_id_async(
        self,
        request: aliding_20230426_models.ChangeDingTalkIdRequest,
    ) -> aliding_20230426_models.ChangeDingTalkIdResponse:
        """
        @summary 修改阿里钉号
        
        @param request: ChangeDingTalkIdRequest
        @return: ChangeDingTalkIdResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ChangeDingTalkIdHeaders()
        return await self.change_ding_talk_id_with_options_async(request, headers, runtime)

    def check_alibaba_staff_with_options(
        self,
        tmp_req: aliding_20230426_models.CheckAlibabaStaffRequest,
        tmp_header: aliding_20230426_models.CheckAlibabaStaffHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CheckAlibabaStaffResponse:
        """
        @summary 校验阿里员工
        
        @param tmp_req: CheckAlibabaStaffRequest
        @param tmp_header: CheckAlibabaStaffHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CheckAlibabaStaffResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CheckAlibabaStaffShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CheckAlibabaStaffShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.mobile):
            body['Mobile'] = request.mobile
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CheckAlibabaStaff',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/im/checkAlibabaStaff',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CheckAlibabaStaffResponse(),
            self.call_api(params, req, runtime)
        )

    async def check_alibaba_staff_with_options_async(
        self,
        tmp_req: aliding_20230426_models.CheckAlibabaStaffRequest,
        tmp_header: aliding_20230426_models.CheckAlibabaStaffHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CheckAlibabaStaffResponse:
        """
        @summary 校验阿里员工
        
        @param tmp_req: CheckAlibabaStaffRequest
        @param tmp_header: CheckAlibabaStaffHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CheckAlibabaStaffResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CheckAlibabaStaffShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CheckAlibabaStaffShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.mobile):
            body['Mobile'] = request.mobile
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CheckAlibabaStaff',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/im/checkAlibabaStaff',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CheckAlibabaStaffResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def check_alibaba_staff(
        self,
        request: aliding_20230426_models.CheckAlibabaStaffRequest,
    ) -> aliding_20230426_models.CheckAlibabaStaffResponse:
        """
        @summary 校验阿里员工
        
        @param request: CheckAlibabaStaffRequest
        @return: CheckAlibabaStaffResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CheckAlibabaStaffHeaders()
        return self.check_alibaba_staff_with_options(request, headers, runtime)

    async def check_alibaba_staff_async(
        self,
        request: aliding_20230426_models.CheckAlibabaStaffRequest,
    ) -> aliding_20230426_models.CheckAlibabaStaffResponse:
        """
        @summary 校验阿里员工
        
        @param request: CheckAlibabaStaffRequest
        @return: CheckAlibabaStaffResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CheckAlibabaStaffHeaders()
        return await self.check_alibaba_staff_with_options_async(request, headers, runtime)

    def check_user_is_group_member_with_options(
        self,
        request: aliding_20230426_models.CheckUserIsGroupMemberRequest,
        tmp_header: aliding_20230426_models.CheckUserIsGroupMemberHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CheckUserIsGroupMemberResponse:
        """
        @summary 查询用户是否为企业内部群成员
        
        @param request: CheckUserIsGroupMemberRequest
        @param tmp_header: CheckUserIsGroupMemberHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CheckUserIsGroupMemberResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.CheckUserIsGroupMemberShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.open_conversation_id):
            body['OpenConversationId'] = request.open_conversation_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CheckUserIsGroupMember',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/im/checkUserIsGroupMember',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CheckUserIsGroupMemberResponse(),
            self.call_api(params, req, runtime)
        )

    async def check_user_is_group_member_with_options_async(
        self,
        request: aliding_20230426_models.CheckUserIsGroupMemberRequest,
        tmp_header: aliding_20230426_models.CheckUserIsGroupMemberHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CheckUserIsGroupMemberResponse:
        """
        @summary 查询用户是否为企业内部群成员
        
        @param request: CheckUserIsGroupMemberRequest
        @param tmp_header: CheckUserIsGroupMemberHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CheckUserIsGroupMemberResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.CheckUserIsGroupMemberShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.open_conversation_id):
            body['OpenConversationId'] = request.open_conversation_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CheckUserIsGroupMember',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/im/checkUserIsGroupMember',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CheckUserIsGroupMemberResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def check_user_is_group_member(
        self,
        request: aliding_20230426_models.CheckUserIsGroupMemberRequest,
    ) -> aliding_20230426_models.CheckUserIsGroupMemberResponse:
        """
        @summary 查询用户是否为企业内部群成员
        
        @param request: CheckUserIsGroupMemberRequest
        @return: CheckUserIsGroupMemberResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CheckUserIsGroupMemberHeaders()
        return self.check_user_is_group_member_with_options(request, headers, runtime)

    async def check_user_is_group_member_async(
        self,
        request: aliding_20230426_models.CheckUserIsGroupMemberRequest,
    ) -> aliding_20230426_models.CheckUserIsGroupMemberResponse:
        """
        @summary 查询用户是否为企业内部群成员
        
        @param request: CheckUserIsGroupMemberRequest
        @return: CheckUserIsGroupMemberResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CheckUserIsGroupMemberHeaders()
        return await self.check_user_is_group_member_with_options_async(request, headers, runtime)

    def clear_with_options(
        self,
        tmp_req: aliding_20230426_models.ClearRequest,
        tmp_header: aliding_20230426_models.ClearHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ClearResponse:
        """
        @summary 清除单元格所有内容
        
        @param tmp_req: ClearRequest
        @param tmp_header: ClearHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ClearResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.ClearShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.ClearShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.range_address):
            body['RangeAddress'] = request.range_address
        if not UtilClient.is_unset(request.sheet_id):
            body['SheetId'] = request.sheet_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workbook_id):
            body['WorkbookId'] = request.workbook_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='Clear',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/clear',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ClearResponse(),
            self.call_api(params, req, runtime)
        )

    async def clear_with_options_async(
        self,
        tmp_req: aliding_20230426_models.ClearRequest,
        tmp_header: aliding_20230426_models.ClearHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ClearResponse:
        """
        @summary 清除单元格所有内容
        
        @param tmp_req: ClearRequest
        @param tmp_header: ClearHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ClearResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.ClearShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.ClearShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.range_address):
            body['RangeAddress'] = request.range_address
        if not UtilClient.is_unset(request.sheet_id):
            body['SheetId'] = request.sheet_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workbook_id):
            body['WorkbookId'] = request.workbook_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='Clear',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/clear',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ClearResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def clear(
        self,
        request: aliding_20230426_models.ClearRequest,
    ) -> aliding_20230426_models.ClearResponse:
        """
        @summary 清除单元格所有内容
        
        @param request: ClearRequest
        @return: ClearResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ClearHeaders()
        return self.clear_with_options(request, headers, runtime)

    async def clear_async(
        self,
        request: aliding_20230426_models.ClearRequest,
    ) -> aliding_20230426_models.ClearResponse:
        """
        @summary 清除单元格所有内容
        
        @param request: ClearRequest
        @return: ClearResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ClearHeaders()
        return await self.clear_with_options_async(request, headers, runtime)

    def clear_data_with_options(
        self,
        tmp_req: aliding_20230426_models.ClearDataRequest,
        tmp_header: aliding_20230426_models.ClearDataHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ClearDataResponse:
        """
        @summary 清除单元格数据
        
        @param tmp_req: ClearDataRequest
        @param tmp_header: ClearDataHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ClearDataResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.ClearDataShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.ClearDataShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.range_address):
            body['RangeAddress'] = request.range_address
        if not UtilClient.is_unset(request.sheet_id):
            body['SheetId'] = request.sheet_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workbook_id):
            body['WorkbookId'] = request.workbook_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ClearData',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/clearData',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ClearDataResponse(),
            self.call_api(params, req, runtime)
        )

    async def clear_data_with_options_async(
        self,
        tmp_req: aliding_20230426_models.ClearDataRequest,
        tmp_header: aliding_20230426_models.ClearDataHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ClearDataResponse:
        """
        @summary 清除单元格数据
        
        @param tmp_req: ClearDataRequest
        @param tmp_header: ClearDataHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ClearDataResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.ClearDataShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.ClearDataShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.range_address):
            body['RangeAddress'] = request.range_address
        if not UtilClient.is_unset(request.sheet_id):
            body['SheetId'] = request.sheet_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workbook_id):
            body['WorkbookId'] = request.workbook_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ClearData',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/clearData',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ClearDataResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def clear_data(
        self,
        request: aliding_20230426_models.ClearDataRequest,
    ) -> aliding_20230426_models.ClearDataResponse:
        """
        @summary 清除单元格数据
        
        @param request: ClearDataRequest
        @return: ClearDataResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ClearDataHeaders()
        return self.clear_data_with_options(request, headers, runtime)

    async def clear_data_async(
        self,
        request: aliding_20230426_models.ClearDataRequest,
    ) -> aliding_20230426_models.ClearDataResponse:
        """
        @summary 清除单元格数据
        
        @param request: ClearDataRequest
        @return: ClearDataResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ClearDataHeaders()
        return await self.clear_data_with_options_async(request, headers, runtime)

    def close_video_conference_with_options(
        self,
        tmp_req: aliding_20230426_models.CloseVideoConferenceRequest,
        tmp_header: aliding_20230426_models.CloseVideoConferenceHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CloseVideoConferenceResponse:
        """
        @summary 关闭视频会议
        
        @param tmp_req: CloseVideoConferenceRequest
        @param tmp_header: CloseVideoConferenceHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CloseVideoConferenceResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CloseVideoConferenceShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CloseVideoConferenceShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.conference_id):
            body['conferenceId'] = request.conference_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CloseVideoConference',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/closeVideoConference',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CloseVideoConferenceResponse(),
            self.call_api(params, req, runtime)
        )

    async def close_video_conference_with_options_async(
        self,
        tmp_req: aliding_20230426_models.CloseVideoConferenceRequest,
        tmp_header: aliding_20230426_models.CloseVideoConferenceHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CloseVideoConferenceResponse:
        """
        @summary 关闭视频会议
        
        @param tmp_req: CloseVideoConferenceRequest
        @param tmp_header: CloseVideoConferenceHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CloseVideoConferenceResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CloseVideoConferenceShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CloseVideoConferenceShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.conference_id):
            body['conferenceId'] = request.conference_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CloseVideoConference',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/closeVideoConference',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CloseVideoConferenceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def close_video_conference(
        self,
        request: aliding_20230426_models.CloseVideoConferenceRequest,
    ) -> aliding_20230426_models.CloseVideoConferenceResponse:
        """
        @summary 关闭视频会议
        
        @param request: CloseVideoConferenceRequest
        @return: CloseVideoConferenceResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CloseVideoConferenceHeaders()
        return self.close_video_conference_with_options(request, headers, runtime)

    async def close_video_conference_async(
        self,
        request: aliding_20230426_models.CloseVideoConferenceRequest,
    ) -> aliding_20230426_models.CloseVideoConferenceResponse:
        """
        @summary 关闭视频会议
        
        @param request: CloseVideoConferenceRequest
        @return: CloseVideoConferenceResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CloseVideoConferenceHeaders()
        return await self.close_video_conference_with_options_async(request, headers, runtime)

    def comment_list_report_with_options(
        self,
        tmp_req: aliding_20230426_models.CommentListReportRequest,
        tmp_header: aliding_20230426_models.CommentListReportHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CommentListReportResponse:
        """
        @summary 获取日志评论列表
        
        @param tmp_req: CommentListReportRequest
        @param tmp_header: CommentListReportHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CommentListReportResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CommentListReportShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CommentListReportShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.offset):
            body['Offset'] = request.offset
        if not UtilClient.is_unset(request.report_id):
            body['ReportId'] = request.report_id
        if not UtilClient.is_unset(request.size):
            body['Size'] = request.size
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CommentListReport',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/log/commentListReport',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CommentListReportResponse(),
            self.call_api(params, req, runtime)
        )

    async def comment_list_report_with_options_async(
        self,
        tmp_req: aliding_20230426_models.CommentListReportRequest,
        tmp_header: aliding_20230426_models.CommentListReportHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CommentListReportResponse:
        """
        @summary 获取日志评论列表
        
        @param tmp_req: CommentListReportRequest
        @param tmp_header: CommentListReportHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CommentListReportResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CommentListReportShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CommentListReportShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.offset):
            body['Offset'] = request.offset
        if not UtilClient.is_unset(request.report_id):
            body['ReportId'] = request.report_id
        if not UtilClient.is_unset(request.size):
            body['Size'] = request.size
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CommentListReport',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/log/commentListReport',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CommentListReportResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def comment_list_report(
        self,
        request: aliding_20230426_models.CommentListReportRequest,
    ) -> aliding_20230426_models.CommentListReportResponse:
        """
        @summary 获取日志评论列表
        
        @param request: CommentListReportRequest
        @return: CommentListReportResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CommentListReportHeaders()
        return self.comment_list_report_with_options(request, headers, runtime)

    async def comment_list_report_async(
        self,
        request: aliding_20230426_models.CommentListReportRequest,
    ) -> aliding_20230426_models.CommentListReportResponse:
        """
        @summary 获取日志评论列表
        
        @param request: CommentListReportRequest
        @return: CommentListReportResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CommentListReportHeaders()
        return await self.comment_list_report_with_options_async(request, headers, runtime)

    def commit_file_with_options(
        self,
        tmp_req: aliding_20230426_models.CommitFileRequest,
        tmp_header: aliding_20230426_models.CommitFileHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CommitFileResponse:
        """
        @summary 提交文件
        
        @param tmp_req: CommitFileRequest
        @param tmp_header: CommitFileHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CommitFileResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CommitFileShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CommitFileShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.option):
            request.option_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.option, 'Option', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.option_shrink):
            body['Option'] = request.option_shrink
        if not UtilClient.is_unset(request.parent_dentry_uuid):
            body['ParentDentryUuid'] = request.parent_dentry_uuid
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.upload_key):
            body['UploadKey'] = request.upload_key
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CommitFile',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/commitFile',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CommitFileResponse(),
            self.call_api(params, req, runtime)
        )

    async def commit_file_with_options_async(
        self,
        tmp_req: aliding_20230426_models.CommitFileRequest,
        tmp_header: aliding_20230426_models.CommitFileHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CommitFileResponse:
        """
        @summary 提交文件
        
        @param tmp_req: CommitFileRequest
        @param tmp_header: CommitFileHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CommitFileResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CommitFileShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CommitFileShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.option):
            request.option_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.option, 'Option', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.option_shrink):
            body['Option'] = request.option_shrink
        if not UtilClient.is_unset(request.parent_dentry_uuid):
            body['ParentDentryUuid'] = request.parent_dentry_uuid
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.upload_key):
            body['UploadKey'] = request.upload_key
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CommitFile',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/commitFile',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CommitFileResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def commit_file(
        self,
        request: aliding_20230426_models.CommitFileRequest,
    ) -> aliding_20230426_models.CommitFileResponse:
        """
        @summary 提交文件
        
        @param request: CommitFileRequest
        @return: CommitFileResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CommitFileHeaders()
        return self.commit_file_with_options(request, headers, runtime)

    async def commit_file_async(
        self,
        request: aliding_20230426_models.CommitFileRequest,
    ) -> aliding_20230426_models.CommitFileResponse:
        """
        @summary 提交文件
        
        @param request: CommitFileRequest
        @return: CommitFileResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CommitFileHeaders()
        return await self.commit_file_with_options_async(request, headers, runtime)

    def copy_dentry_with_options(
        self,
        tmp_req: aliding_20230426_models.CopyDentryRequest,
        tmp_header: aliding_20230426_models.CopyDentryHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CopyDentryResponse:
        """
        @summary 创建知识库节点副本
        
        @param tmp_req: CopyDentryRequest
        @param tmp_header: CopyDentryHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CopyDentryResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CopyDentryShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CopyDentryShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.dentry_id):
            body['DentryId'] = request.dentry_id
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.space_id):
            body['SpaceId'] = request.space_id
        if not UtilClient.is_unset(request.target_space_id):
            body['TargetSpaceId'] = request.target_space_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.to_next_dentry_id):
            body['ToNextDentryId'] = request.to_next_dentry_id
        if not UtilClient.is_unset(request.to_parent_dentry_id):
            body['ToParentDentryId'] = request.to_parent_dentry_id
        if not UtilClient.is_unset(request.to_prev_dentry_id):
            body['ToPrevDentryId'] = request.to_prev_dentry_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CopyDentry',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v2/documents/copyDentry',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CopyDentryResponse(),
            self.call_api(params, req, runtime)
        )

    async def copy_dentry_with_options_async(
        self,
        tmp_req: aliding_20230426_models.CopyDentryRequest,
        tmp_header: aliding_20230426_models.CopyDentryHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CopyDentryResponse:
        """
        @summary 创建知识库节点副本
        
        @param tmp_req: CopyDentryRequest
        @param tmp_header: CopyDentryHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CopyDentryResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CopyDentryShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CopyDentryShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.dentry_id):
            body['DentryId'] = request.dentry_id
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.space_id):
            body['SpaceId'] = request.space_id
        if not UtilClient.is_unset(request.target_space_id):
            body['TargetSpaceId'] = request.target_space_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.to_next_dentry_id):
            body['ToNextDentryId'] = request.to_next_dentry_id
        if not UtilClient.is_unset(request.to_parent_dentry_id):
            body['ToParentDentryId'] = request.to_parent_dentry_id
        if not UtilClient.is_unset(request.to_prev_dentry_id):
            body['ToPrevDentryId'] = request.to_prev_dentry_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CopyDentry',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v2/documents/copyDentry',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CopyDentryResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def copy_dentry(
        self,
        request: aliding_20230426_models.CopyDentryRequest,
    ) -> aliding_20230426_models.CopyDentryResponse:
        """
        @summary 创建知识库节点副本
        
        @param request: CopyDentryRequest
        @return: CopyDentryResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CopyDentryHeaders()
        return self.copy_dentry_with_options(request, headers, runtime)

    async def copy_dentry_async(
        self,
        request: aliding_20230426_models.CopyDentryRequest,
    ) -> aliding_20230426_models.CopyDentryResponse:
        """
        @summary 创建知识库节点副本
        
        @param request: CopyDentryRequest
        @return: CopyDentryResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CopyDentryHeaders()
        return await self.copy_dentry_with_options_async(request, headers, runtime)

    def create_aliding_assistant_with_options(
        self,
        tmp_req: aliding_20230426_models.CreateAlidingAssistantRequest,
        tmp_header: aliding_20230426_models.CreateAlidingAssistantHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateAlidingAssistantResponse:
        """
        @param tmp_req: CreateAlidingAssistantRequest
        @param tmp_header: CreateAlidingAssistantHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateAlidingAssistantResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateAlidingAssistantShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateAlidingAssistantShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.ext):
            request.ext_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ext, 'Ext', 'json')
        if not UtilClient.is_unset(tmp_req.recommend_prompts):
            request.recommend_prompts_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.recommend_prompts, 'RecommendPrompts', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_code):
            body['AppCode'] = request.app_code
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.ext_shrink):
            body['Ext'] = request.ext_shrink
        if not UtilClient.is_unset(request.icon):
            body['Icon'] = request.icon
        if not UtilClient.is_unset(request.instructions):
            body['Instructions'] = request.instructions
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.recommend_prompts_shrink):
            body['RecommendPrompts'] = request.recommend_prompts_shrink
        if not UtilClient.is_unset(request.source):
            body['Source'] = request.source
        if not UtilClient.is_unset(request.source_identity_id):
            body['SourceIdentityId'] = request.source_identity_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.welcome_content):
            body['WelcomeContent'] = request.welcome_content
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateAlidingAssistant',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/aiagent/createAlidingAssistant',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateAlidingAssistantResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_aliding_assistant_with_options_async(
        self,
        tmp_req: aliding_20230426_models.CreateAlidingAssistantRequest,
        tmp_header: aliding_20230426_models.CreateAlidingAssistantHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateAlidingAssistantResponse:
        """
        @param tmp_req: CreateAlidingAssistantRequest
        @param tmp_header: CreateAlidingAssistantHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateAlidingAssistantResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateAlidingAssistantShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateAlidingAssistantShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.ext):
            request.ext_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ext, 'Ext', 'json')
        if not UtilClient.is_unset(tmp_req.recommend_prompts):
            request.recommend_prompts_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.recommend_prompts, 'RecommendPrompts', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_code):
            body['AppCode'] = request.app_code
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.ext_shrink):
            body['Ext'] = request.ext_shrink
        if not UtilClient.is_unset(request.icon):
            body['Icon'] = request.icon
        if not UtilClient.is_unset(request.instructions):
            body['Instructions'] = request.instructions
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.recommend_prompts_shrink):
            body['RecommendPrompts'] = request.recommend_prompts_shrink
        if not UtilClient.is_unset(request.source):
            body['Source'] = request.source
        if not UtilClient.is_unset(request.source_identity_id):
            body['SourceIdentityId'] = request.source_identity_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.welcome_content):
            body['WelcomeContent'] = request.welcome_content
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateAlidingAssistant',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/aiagent/createAlidingAssistant',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateAlidingAssistantResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_aliding_assistant(
        self,
        request: aliding_20230426_models.CreateAlidingAssistantRequest,
    ) -> aliding_20230426_models.CreateAlidingAssistantResponse:
        """
        @param request: CreateAlidingAssistantRequest
        @return: CreateAlidingAssistantResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateAlidingAssistantHeaders()
        return self.create_aliding_assistant_with_options(request, headers, runtime)

    async def create_aliding_assistant_async(
        self,
        request: aliding_20230426_models.CreateAlidingAssistantRequest,
    ) -> aliding_20230426_models.CreateAlidingAssistantResponse:
        """
        @param request: CreateAlidingAssistantRequest
        @return: CreateAlidingAssistantResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateAlidingAssistantHeaders()
        return await self.create_aliding_assistant_with_options_async(request, headers, runtime)

    def create_delivery_plan_with_options(
        self,
        tmp_req: aliding_20230426_models.CreateDeliveryPlanRequest,
        tmp_header: aliding_20230426_models.CreateDeliveryPlanHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateDeliveryPlanResponse:
        """
        @summary 发布钉钉投放活动
        
        @param tmp_req: CreateDeliveryPlanRequest
        @param tmp_header: CreateDeliveryPlanHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateDeliveryPlanResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateDeliveryPlanShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateDeliveryPlanShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.content):
            request.content_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.content, 'Content', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        if not UtilClient.is_unset(tmp_req.user_id_list):
            request.user_id_list_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.user_id_list, 'UserIdList', 'json')
        body = {}
        if not UtilClient.is_unset(request.content_shrink):
            body['Content'] = request.content_shrink
        if not UtilClient.is_unset(request.end_time):
            body['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.res_id):
            body['ResId'] = request.res_id
        if not UtilClient.is_unset(request.start_time):
            body['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.user_id_list_shrink):
            body['UserIdList'] = request.user_id_list_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateDeliveryPlan',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/watt/createDeliveryPlan',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateDeliveryPlanResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_delivery_plan_with_options_async(
        self,
        tmp_req: aliding_20230426_models.CreateDeliveryPlanRequest,
        tmp_header: aliding_20230426_models.CreateDeliveryPlanHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateDeliveryPlanResponse:
        """
        @summary 发布钉钉投放活动
        
        @param tmp_req: CreateDeliveryPlanRequest
        @param tmp_header: CreateDeliveryPlanHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateDeliveryPlanResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateDeliveryPlanShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateDeliveryPlanShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.content):
            request.content_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.content, 'Content', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        if not UtilClient.is_unset(tmp_req.user_id_list):
            request.user_id_list_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.user_id_list, 'UserIdList', 'json')
        body = {}
        if not UtilClient.is_unset(request.content_shrink):
            body['Content'] = request.content_shrink
        if not UtilClient.is_unset(request.end_time):
            body['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.res_id):
            body['ResId'] = request.res_id
        if not UtilClient.is_unset(request.start_time):
            body['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.user_id_list_shrink):
            body['UserIdList'] = request.user_id_list_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateDeliveryPlan',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/watt/createDeliveryPlan',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateDeliveryPlanResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_delivery_plan(
        self,
        request: aliding_20230426_models.CreateDeliveryPlanRequest,
    ) -> aliding_20230426_models.CreateDeliveryPlanResponse:
        """
        @summary 发布钉钉投放活动
        
        @param request: CreateDeliveryPlanRequest
        @return: CreateDeliveryPlanResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateDeliveryPlanHeaders()
        return self.create_delivery_plan_with_options(request, headers, runtime)

    async def create_delivery_plan_async(
        self,
        request: aliding_20230426_models.CreateDeliveryPlanRequest,
    ) -> aliding_20230426_models.CreateDeliveryPlanResponse:
        """
        @summary 发布钉钉投放活动
        
        @param request: CreateDeliveryPlanRequest
        @return: CreateDeliveryPlanResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateDeliveryPlanHeaders()
        return await self.create_delivery_plan_with_options_async(request, headers, runtime)

    def create_dingtalk_personal_todo_task_with_options(
        self,
        tmp_req: aliding_20230426_models.CreateDingtalkPersonalTodoTaskRequest,
        tmp_header: aliding_20230426_models.CreateDingtalkPersonalTodoTaskHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateDingtalkPersonalTodoTaskResponse:
        """
        @summary 委托权限创建钉钉个人待办
        
        @param tmp_req: CreateDingtalkPersonalTodoTaskRequest
        @param tmp_header: CreateDingtalkPersonalTodoTaskHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateDingtalkPersonalTodoTaskResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateDingtalkPersonalTodoTaskShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateDingtalkPersonalTodoTaskShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.executor_ids):
            request.executor_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.executor_ids, 'ExecutorIds', 'json')
        if not UtilClient.is_unset(tmp_req.notify_configs):
            request.notify_configs_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.notify_configs, 'NotifyConfigs', 'json')
        if not UtilClient.is_unset(tmp_req.participant_ids):
            request.participant_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.participant_ids, 'ParticipantIds', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.due_time):
            body['DueTime'] = request.due_time
        if not UtilClient.is_unset(request.executor_ids_shrink):
            body['ExecutorIds'] = request.executor_ids_shrink
        if not UtilClient.is_unset(request.notify_configs_shrink):
            body['NotifyConfigs'] = request.notify_configs_shrink
        if not UtilClient.is_unset(request.participant_ids_shrink):
            body['ParticipantIds'] = request.participant_ids_shrink
        if not UtilClient.is_unset(request.subject):
            body['Subject'] = request.subject
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.user_token):
            body['UserToken'] = request.user_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateDingtalkPersonalTodoTask',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/task/createDingtalkPersonalTodoTask',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateDingtalkPersonalTodoTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_dingtalk_personal_todo_task_with_options_async(
        self,
        tmp_req: aliding_20230426_models.CreateDingtalkPersonalTodoTaskRequest,
        tmp_header: aliding_20230426_models.CreateDingtalkPersonalTodoTaskHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateDingtalkPersonalTodoTaskResponse:
        """
        @summary 委托权限创建钉钉个人待办
        
        @param tmp_req: CreateDingtalkPersonalTodoTaskRequest
        @param tmp_header: CreateDingtalkPersonalTodoTaskHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateDingtalkPersonalTodoTaskResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateDingtalkPersonalTodoTaskShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateDingtalkPersonalTodoTaskShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.executor_ids):
            request.executor_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.executor_ids, 'ExecutorIds', 'json')
        if not UtilClient.is_unset(tmp_req.notify_configs):
            request.notify_configs_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.notify_configs, 'NotifyConfigs', 'json')
        if not UtilClient.is_unset(tmp_req.participant_ids):
            request.participant_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.participant_ids, 'ParticipantIds', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.due_time):
            body['DueTime'] = request.due_time
        if not UtilClient.is_unset(request.executor_ids_shrink):
            body['ExecutorIds'] = request.executor_ids_shrink
        if not UtilClient.is_unset(request.notify_configs_shrink):
            body['NotifyConfigs'] = request.notify_configs_shrink
        if not UtilClient.is_unset(request.participant_ids_shrink):
            body['ParticipantIds'] = request.participant_ids_shrink
        if not UtilClient.is_unset(request.subject):
            body['Subject'] = request.subject
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.user_token):
            body['UserToken'] = request.user_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateDingtalkPersonalTodoTask',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/task/createDingtalkPersonalTodoTask',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateDingtalkPersonalTodoTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_dingtalk_personal_todo_task(
        self,
        request: aliding_20230426_models.CreateDingtalkPersonalTodoTaskRequest,
    ) -> aliding_20230426_models.CreateDingtalkPersonalTodoTaskResponse:
        """
        @summary 委托权限创建钉钉个人待办
        
        @param request: CreateDingtalkPersonalTodoTaskRequest
        @return: CreateDingtalkPersonalTodoTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateDingtalkPersonalTodoTaskHeaders()
        return self.create_dingtalk_personal_todo_task_with_options(request, headers, runtime)

    async def create_dingtalk_personal_todo_task_async(
        self,
        request: aliding_20230426_models.CreateDingtalkPersonalTodoTaskRequest,
    ) -> aliding_20230426_models.CreateDingtalkPersonalTodoTaskResponse:
        """
        @summary 委托权限创建钉钉个人待办
        
        @param request: CreateDingtalkPersonalTodoTaskRequest
        @return: CreateDingtalkPersonalTodoTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateDingtalkPersonalTodoTaskHeaders()
        return await self.create_dingtalk_personal_todo_task_with_options_async(request, headers, runtime)

    def create_event_with_options(
        self,
        tmp_req: aliding_20230426_models.CreateEventRequest,
        tmp_header: aliding_20230426_models.CreateEventHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateEventResponse:
        """
        @summary 创建日程
        
        @param tmp_req: CreateEventRequest
        @param tmp_header: CreateEventHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateEventResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateEventShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateEventShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.attendees):
            request.attendees_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.attendees, 'Attendees', 'json')
        if not UtilClient.is_unset(tmp_req.card_instances):
            request.card_instances_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.card_instances, 'CardInstances', 'json')
        if not UtilClient.is_unset(tmp_req.end):
            request.end_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.end, 'End', 'json')
        if not UtilClient.is_unset(tmp_req.extra):
            request.extra_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.extra, 'Extra', 'json')
        if not UtilClient.is_unset(tmp_req.location):
            request.location_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.location, 'Location', 'json')
        if not UtilClient.is_unset(tmp_req.online_meeting_info):
            request.online_meeting_info_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.online_meeting_info, 'OnlineMeetingInfo', 'json')
        if not UtilClient.is_unset(tmp_req.recurrence):
            request.recurrence_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.recurrence, 'Recurrence', 'json')
        if not UtilClient.is_unset(tmp_req.reminders):
            request.reminders_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.reminders, 'Reminders', 'json')
        if not UtilClient.is_unset(tmp_req.rich_text_description):
            request.rich_text_description_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.rich_text_description, 'RichTextDescription', 'json')
        if not UtilClient.is_unset(tmp_req.ui_configs):
            request.ui_configs_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ui_configs, 'UiConfigs', 'json')
        if not UtilClient.is_unset(tmp_req.start):
            request.start_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.start, 'start', 'json')
        body = {}
        if not UtilClient.is_unset(request.attendees_shrink):
            body['Attendees'] = request.attendees_shrink
        if not UtilClient.is_unset(request.card_instances_shrink):
            body['CardInstances'] = request.card_instances_shrink
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.end_shrink):
            body['End'] = request.end_shrink
        if not UtilClient.is_unset(request.extra_shrink):
            body['Extra'] = request.extra_shrink
        if not UtilClient.is_unset(request.is_all_day):
            body['IsAllDay'] = request.is_all_day
        if not UtilClient.is_unset(request.location_shrink):
            body['Location'] = request.location_shrink
        if not UtilClient.is_unset(request.online_meeting_info_shrink):
            body['OnlineMeetingInfo'] = request.online_meeting_info_shrink
        if not UtilClient.is_unset(request.recurrence_shrink):
            body['Recurrence'] = request.recurrence_shrink
        if not UtilClient.is_unset(request.reminders_shrink):
            body['Reminders'] = request.reminders_shrink
        if not UtilClient.is_unset(request.rich_text_description_shrink):
            body['RichTextDescription'] = request.rich_text_description_shrink
        if not UtilClient.is_unset(request.summary):
            body['Summary'] = request.summary
        if not UtilClient.is_unset(request.ui_configs_shrink):
            body['UiConfigs'] = request.ui_configs_shrink
        if not UtilClient.is_unset(request.calendar_id):
            body['calendarId'] = request.calendar_id
        if not UtilClient.is_unset(request.start_shrink):
            body['start'] = request.start_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateEvent',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/createEvent',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateEventResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_event_with_options_async(
        self,
        tmp_req: aliding_20230426_models.CreateEventRequest,
        tmp_header: aliding_20230426_models.CreateEventHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateEventResponse:
        """
        @summary 创建日程
        
        @param tmp_req: CreateEventRequest
        @param tmp_header: CreateEventHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateEventResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateEventShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateEventShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.attendees):
            request.attendees_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.attendees, 'Attendees', 'json')
        if not UtilClient.is_unset(tmp_req.card_instances):
            request.card_instances_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.card_instances, 'CardInstances', 'json')
        if not UtilClient.is_unset(tmp_req.end):
            request.end_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.end, 'End', 'json')
        if not UtilClient.is_unset(tmp_req.extra):
            request.extra_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.extra, 'Extra', 'json')
        if not UtilClient.is_unset(tmp_req.location):
            request.location_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.location, 'Location', 'json')
        if not UtilClient.is_unset(tmp_req.online_meeting_info):
            request.online_meeting_info_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.online_meeting_info, 'OnlineMeetingInfo', 'json')
        if not UtilClient.is_unset(tmp_req.recurrence):
            request.recurrence_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.recurrence, 'Recurrence', 'json')
        if not UtilClient.is_unset(tmp_req.reminders):
            request.reminders_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.reminders, 'Reminders', 'json')
        if not UtilClient.is_unset(tmp_req.rich_text_description):
            request.rich_text_description_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.rich_text_description, 'RichTextDescription', 'json')
        if not UtilClient.is_unset(tmp_req.ui_configs):
            request.ui_configs_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ui_configs, 'UiConfigs', 'json')
        if not UtilClient.is_unset(tmp_req.start):
            request.start_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.start, 'start', 'json')
        body = {}
        if not UtilClient.is_unset(request.attendees_shrink):
            body['Attendees'] = request.attendees_shrink
        if not UtilClient.is_unset(request.card_instances_shrink):
            body['CardInstances'] = request.card_instances_shrink
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.end_shrink):
            body['End'] = request.end_shrink
        if not UtilClient.is_unset(request.extra_shrink):
            body['Extra'] = request.extra_shrink
        if not UtilClient.is_unset(request.is_all_day):
            body['IsAllDay'] = request.is_all_day
        if not UtilClient.is_unset(request.location_shrink):
            body['Location'] = request.location_shrink
        if not UtilClient.is_unset(request.online_meeting_info_shrink):
            body['OnlineMeetingInfo'] = request.online_meeting_info_shrink
        if not UtilClient.is_unset(request.recurrence_shrink):
            body['Recurrence'] = request.recurrence_shrink
        if not UtilClient.is_unset(request.reminders_shrink):
            body['Reminders'] = request.reminders_shrink
        if not UtilClient.is_unset(request.rich_text_description_shrink):
            body['RichTextDescription'] = request.rich_text_description_shrink
        if not UtilClient.is_unset(request.summary):
            body['Summary'] = request.summary
        if not UtilClient.is_unset(request.ui_configs_shrink):
            body['UiConfigs'] = request.ui_configs_shrink
        if not UtilClient.is_unset(request.calendar_id):
            body['calendarId'] = request.calendar_id
        if not UtilClient.is_unset(request.start_shrink):
            body['start'] = request.start_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateEvent',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/createEvent',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateEventResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_event(
        self,
        request: aliding_20230426_models.CreateEventRequest,
    ) -> aliding_20230426_models.CreateEventResponse:
        """
        @summary 创建日程
        
        @param request: CreateEventRequest
        @return: CreateEventResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateEventHeaders()
        return self.create_event_with_options(request, headers, runtime)

    async def create_event_async(
        self,
        request: aliding_20230426_models.CreateEventRequest,
    ) -> aliding_20230426_models.CreateEventResponse:
        """
        @summary 创建日程
        
        @param request: CreateEventRequest
        @return: CreateEventResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateEventHeaders()
        return await self.create_event_with_options_async(request, headers, runtime)

    def create_live_with_options(
        self,
        tmp_req: aliding_20230426_models.CreateLiveRequest,
        tmp_header: aliding_20230426_models.CreateLiveHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateLiveResponse:
        """
        @summary 创建直播
        
        @param tmp_req: CreateLiveRequest
        @param tmp_header: CreateLiveHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateLiveResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateLiveShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateLiveShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.cover_url):
            body['CoverUrl'] = request.cover_url
        if not UtilClient.is_unset(request.introduction):
            body['Introduction'] = request.introduction
        if not UtilClient.is_unset(request.pre_end_time):
            body['PreEndTime'] = request.pre_end_time
        if not UtilClient.is_unset(request.pre_start_time):
            body['PreStartTime'] = request.pre_start_time
        if not UtilClient.is_unset(request.public_type):
            body['PublicType'] = request.public_type
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.title):
            body['Title'] = request.title
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateLive',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/createLive',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateLiveResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_live_with_options_async(
        self,
        tmp_req: aliding_20230426_models.CreateLiveRequest,
        tmp_header: aliding_20230426_models.CreateLiveHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateLiveResponse:
        """
        @summary 创建直播
        
        @param tmp_req: CreateLiveRequest
        @param tmp_header: CreateLiveHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateLiveResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateLiveShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateLiveShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.cover_url):
            body['CoverUrl'] = request.cover_url
        if not UtilClient.is_unset(request.introduction):
            body['Introduction'] = request.introduction
        if not UtilClient.is_unset(request.pre_end_time):
            body['PreEndTime'] = request.pre_end_time
        if not UtilClient.is_unset(request.pre_start_time):
            body['PreStartTime'] = request.pre_start_time
        if not UtilClient.is_unset(request.public_type):
            body['PublicType'] = request.public_type
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.title):
            body['Title'] = request.title
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateLive',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/createLive',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateLiveResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_live(
        self,
        request: aliding_20230426_models.CreateLiveRequest,
    ) -> aliding_20230426_models.CreateLiveResponse:
        """
        @summary 创建直播
        
        @param request: CreateLiveRequest
        @return: CreateLiveResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateLiveHeaders()
        return self.create_live_with_options(request, headers, runtime)

    async def create_live_async(
        self,
        request: aliding_20230426_models.CreateLiveRequest,
    ) -> aliding_20230426_models.CreateLiveResponse:
        """
        @summary 创建直播
        
        @param request: CreateLiveRequest
        @return: CreateLiveResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateLiveHeaders()
        return await self.create_live_with_options_async(request, headers, runtime)

    def create_meeting_room_with_options(
        self,
        tmp_req: aliding_20230426_models.CreateMeetingRoomRequest,
        tmp_header: aliding_20230426_models.CreateMeetingRoomHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateMeetingRoomResponse:
        """
        @summary 创建会议室
        
        @param tmp_req: CreateMeetingRoomRequest
        @param tmp_header: CreateMeetingRoomHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateMeetingRoomResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateMeetingRoomShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateMeetingRoomShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.reservation_authority):
            request.reservation_authority_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.reservation_authority, 'ReservationAuthority', 'json')
        if not UtilClient.is_unset(tmp_req.room_label_ids):
            request.room_label_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.room_label_ids, 'RoomLabelIds', 'json')
        if not UtilClient.is_unset(tmp_req.room_location):
            request.room_location_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.room_location, 'RoomLocation', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.enable_cycle_reservation):
            body['EnableCycleReservation'] = request.enable_cycle_reservation
        if not UtilClient.is_unset(request.group_id):
            body['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.isv_room_id):
            body['IsvRoomId'] = request.isv_room_id
        if not UtilClient.is_unset(request.reservation_authority_shrink):
            body['ReservationAuthority'] = request.reservation_authority_shrink
        if not UtilClient.is_unset(request.room_capacity):
            body['RoomCapacity'] = request.room_capacity
        if not UtilClient.is_unset(request.room_label_ids_shrink):
            body['RoomLabelIds'] = request.room_label_ids_shrink
        if not UtilClient.is_unset(request.room_location_shrink):
            body['RoomLocation'] = request.room_location_shrink
        if not UtilClient.is_unset(request.room_name):
            body['RoomName'] = request.room_name
        if not UtilClient.is_unset(request.room_picture):
            body['RoomPicture'] = request.room_picture
        if not UtilClient.is_unset(request.room_status):
            body['RoomStatus'] = request.room_status
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateMeetingRoom',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/createMeetingRoom',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateMeetingRoomResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_meeting_room_with_options_async(
        self,
        tmp_req: aliding_20230426_models.CreateMeetingRoomRequest,
        tmp_header: aliding_20230426_models.CreateMeetingRoomHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateMeetingRoomResponse:
        """
        @summary 创建会议室
        
        @param tmp_req: CreateMeetingRoomRequest
        @param tmp_header: CreateMeetingRoomHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateMeetingRoomResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateMeetingRoomShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateMeetingRoomShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.reservation_authority):
            request.reservation_authority_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.reservation_authority, 'ReservationAuthority', 'json')
        if not UtilClient.is_unset(tmp_req.room_label_ids):
            request.room_label_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.room_label_ids, 'RoomLabelIds', 'json')
        if not UtilClient.is_unset(tmp_req.room_location):
            request.room_location_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.room_location, 'RoomLocation', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.enable_cycle_reservation):
            body['EnableCycleReservation'] = request.enable_cycle_reservation
        if not UtilClient.is_unset(request.group_id):
            body['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.isv_room_id):
            body['IsvRoomId'] = request.isv_room_id
        if not UtilClient.is_unset(request.reservation_authority_shrink):
            body['ReservationAuthority'] = request.reservation_authority_shrink
        if not UtilClient.is_unset(request.room_capacity):
            body['RoomCapacity'] = request.room_capacity
        if not UtilClient.is_unset(request.room_label_ids_shrink):
            body['RoomLabelIds'] = request.room_label_ids_shrink
        if not UtilClient.is_unset(request.room_location_shrink):
            body['RoomLocation'] = request.room_location_shrink
        if not UtilClient.is_unset(request.room_name):
            body['RoomName'] = request.room_name
        if not UtilClient.is_unset(request.room_picture):
            body['RoomPicture'] = request.room_picture
        if not UtilClient.is_unset(request.room_status):
            body['RoomStatus'] = request.room_status
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateMeetingRoom',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/createMeetingRoom',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateMeetingRoomResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_meeting_room(
        self,
        request: aliding_20230426_models.CreateMeetingRoomRequest,
    ) -> aliding_20230426_models.CreateMeetingRoomResponse:
        """
        @summary 创建会议室
        
        @param request: CreateMeetingRoomRequest
        @return: CreateMeetingRoomResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateMeetingRoomHeaders()
        return self.create_meeting_room_with_options(request, headers, runtime)

    async def create_meeting_room_async(
        self,
        request: aliding_20230426_models.CreateMeetingRoomRequest,
    ) -> aliding_20230426_models.CreateMeetingRoomResponse:
        """
        @summary 创建会议室
        
        @param request: CreateMeetingRoomRequest
        @return: CreateMeetingRoomResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateMeetingRoomHeaders()
        return await self.create_meeting_room_with_options_async(request, headers, runtime)

    def create_meeting_room_group_with_options(
        self,
        tmp_req: aliding_20230426_models.CreateMeetingRoomGroupRequest,
        tmp_header: aliding_20230426_models.CreateMeetingRoomGroupHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateMeetingRoomGroupResponse:
        """
        @summary 创建会议室分组
        
        @param tmp_req: CreateMeetingRoomGroupRequest
        @param tmp_header: CreateMeetingRoomGroupHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateMeetingRoomGroupResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateMeetingRoomGroupShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateMeetingRoomGroupShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.group_name):
            body['GroupName'] = request.group_name
        if not UtilClient.is_unset(request.parent_group_id):
            body['ParentGroupId'] = request.parent_group_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateMeetingRoomGroup',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/createMeetingRoomGroup',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateMeetingRoomGroupResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_meeting_room_group_with_options_async(
        self,
        tmp_req: aliding_20230426_models.CreateMeetingRoomGroupRequest,
        tmp_header: aliding_20230426_models.CreateMeetingRoomGroupHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateMeetingRoomGroupResponse:
        """
        @summary 创建会议室分组
        
        @param tmp_req: CreateMeetingRoomGroupRequest
        @param tmp_header: CreateMeetingRoomGroupHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateMeetingRoomGroupResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateMeetingRoomGroupShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateMeetingRoomGroupShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.group_name):
            body['GroupName'] = request.group_name
        if not UtilClient.is_unset(request.parent_group_id):
            body['ParentGroupId'] = request.parent_group_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateMeetingRoomGroup',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/createMeetingRoomGroup',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateMeetingRoomGroupResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_meeting_room_group(
        self,
        request: aliding_20230426_models.CreateMeetingRoomGroupRequest,
    ) -> aliding_20230426_models.CreateMeetingRoomGroupResponse:
        """
        @summary 创建会议室分组
        
        @param request: CreateMeetingRoomGroupRequest
        @return: CreateMeetingRoomGroupResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateMeetingRoomGroupHeaders()
        return self.create_meeting_room_group_with_options(request, headers, runtime)

    async def create_meeting_room_group_async(
        self,
        request: aliding_20230426_models.CreateMeetingRoomGroupRequest,
    ) -> aliding_20230426_models.CreateMeetingRoomGroupResponse:
        """
        @summary 创建会议室分组
        
        @param request: CreateMeetingRoomGroupRequest
        @return: CreateMeetingRoomGroupResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateMeetingRoomGroupHeaders()
        return await self.create_meeting_room_group_with_options_async(request, headers, runtime)

    def create_message_with_options(
        self,
        request: aliding_20230426_models.CreateMessageRequest,
        headers: aliding_20230426_models.CreateMessageHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateMessageResponse:
        """
        @summary 创建消息
        
        @param request: CreateMessageRequest
        @param headers: CreateMessageHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateMessageResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.assistant_id):
            body['assistantId'] = request.assistant_id
        if not UtilClient.is_unset(request.messages):
            body['messages'] = request.messages
        if not UtilClient.is_unset(request.original_assistant_id):
            body['originalAssistantId'] = request.original_assistant_id
        if not UtilClient.is_unset(request.source_id_of_original_assistant_id):
            body['sourceIdOfOriginalAssistantId'] = request.source_id_of_original_assistant_id
        if not UtilClient.is_unset(request.source_type_of_original_assistant_id):
            body['sourceTypeOfOriginalAssistantId'] = request.source_type_of_original_assistant_id
        if not UtilClient.is_unset(request.thread_id):
            body['threadId'] = request.thread_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_id):
            real_headers['accountId'] = UtilClient.to_jsonstring(headers.account_id)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateMessage',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/ai/v1/assistant/createMessage',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='json',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateMessageResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_message_with_options_async(
        self,
        request: aliding_20230426_models.CreateMessageRequest,
        headers: aliding_20230426_models.CreateMessageHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateMessageResponse:
        """
        @summary 创建消息
        
        @param request: CreateMessageRequest
        @param headers: CreateMessageHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateMessageResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.assistant_id):
            body['assistantId'] = request.assistant_id
        if not UtilClient.is_unset(request.messages):
            body['messages'] = request.messages
        if not UtilClient.is_unset(request.original_assistant_id):
            body['originalAssistantId'] = request.original_assistant_id
        if not UtilClient.is_unset(request.source_id_of_original_assistant_id):
            body['sourceIdOfOriginalAssistantId'] = request.source_id_of_original_assistant_id
        if not UtilClient.is_unset(request.source_type_of_original_assistant_id):
            body['sourceTypeOfOriginalAssistantId'] = request.source_type_of_original_assistant_id
        if not UtilClient.is_unset(request.thread_id):
            body['threadId'] = request.thread_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_id):
            real_headers['accountId'] = UtilClient.to_jsonstring(headers.account_id)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateMessage',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/ai/v1/assistant/createMessage',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='json',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateMessageResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_message(
        self,
        request: aliding_20230426_models.CreateMessageRequest,
    ) -> aliding_20230426_models.CreateMessageResponse:
        """
        @summary 创建消息
        
        @param request: CreateMessageRequest
        @return: CreateMessageResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateMessageHeaders()
        return self.create_message_with_options(request, headers, runtime)

    async def create_message_async(
        self,
        request: aliding_20230426_models.CreateMessageRequest,
    ) -> aliding_20230426_models.CreateMessageResponse:
        """
        @summary 创建消息
        
        @param request: CreateMessageRequest
        @return: CreateMessageResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateMessageHeaders()
        return await self.create_message_with_options_async(request, headers, runtime)

    def create_multi_dim_table_field_with_options(
        self,
        tmp_req: aliding_20230426_models.CreateMultiDimTableFieldRequest,
        tmp_header: aliding_20230426_models.CreateMultiDimTableFieldHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateMultiDimTableFieldResponse:
        """
        @summary 创建字段
        
        @param tmp_req: CreateMultiDimTableFieldRequest
        @param tmp_header: CreateMultiDimTableFieldHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateMultiDimTableFieldResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateMultiDimTableFieldShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateMultiDimTableFieldShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.property):
            request.property_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.property, 'Property', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.base_id):
            body['BaseId'] = request.base_id
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.property_shrink):
            body['Property'] = request.property_shrink
        if not UtilClient.is_unset(request.sheet_id_or_name):
            body['SheetIdOrName'] = request.sheet_id_or_name
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.type):
            body['Type'] = request.type
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateMultiDimTableField',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/table/createMultiDimTableField',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateMultiDimTableFieldResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_multi_dim_table_field_with_options_async(
        self,
        tmp_req: aliding_20230426_models.CreateMultiDimTableFieldRequest,
        tmp_header: aliding_20230426_models.CreateMultiDimTableFieldHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateMultiDimTableFieldResponse:
        """
        @summary 创建字段
        
        @param tmp_req: CreateMultiDimTableFieldRequest
        @param tmp_header: CreateMultiDimTableFieldHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateMultiDimTableFieldResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateMultiDimTableFieldShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateMultiDimTableFieldShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.property):
            request.property_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.property, 'Property', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.base_id):
            body['BaseId'] = request.base_id
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.property_shrink):
            body['Property'] = request.property_shrink
        if not UtilClient.is_unset(request.sheet_id_or_name):
            body['SheetIdOrName'] = request.sheet_id_or_name
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.type):
            body['Type'] = request.type
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateMultiDimTableField',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/table/createMultiDimTableField',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateMultiDimTableFieldResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_multi_dim_table_field(
        self,
        request: aliding_20230426_models.CreateMultiDimTableFieldRequest,
    ) -> aliding_20230426_models.CreateMultiDimTableFieldResponse:
        """
        @summary 创建字段
        
        @param request: CreateMultiDimTableFieldRequest
        @return: CreateMultiDimTableFieldResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateMultiDimTableFieldHeaders()
        return self.create_multi_dim_table_field_with_options(request, headers, runtime)

    async def create_multi_dim_table_field_async(
        self,
        request: aliding_20230426_models.CreateMultiDimTableFieldRequest,
    ) -> aliding_20230426_models.CreateMultiDimTableFieldResponse:
        """
        @summary 创建字段
        
        @param request: CreateMultiDimTableFieldRequest
        @return: CreateMultiDimTableFieldResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateMultiDimTableFieldHeaders()
        return await self.create_multi_dim_table_field_with_options_async(request, headers, runtime)

    def create_or_update_form_data_with_options(
        self,
        request: aliding_20230426_models.CreateOrUpdateFormDataRequest,
        tmp_header: aliding_20230426_models.CreateOrUpdateFormDataHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateOrUpdateFormDataResponse:
        """
        @summary 新增或更新表单实例
        
        @param request: CreateOrUpdateFormDataRequest
        @param tmp_header: CreateOrUpdateFormDataHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateOrUpdateFormDataResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.CreateOrUpdateFormDataShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.form_data_json):
            body['FormDataJson'] = request.form_data_json
        if not UtilClient.is_unset(request.form_uuid):
            body['FormUuid'] = request.form_uuid
        if not UtilClient.is_unset(request.no_execute_expression):
            body['NoExecuteExpression'] = request.no_execute_expression
        if not UtilClient.is_unset(request.search_condition):
            body['SearchCondition'] = request.search_condition
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        if not UtilClient.is_unset(request.user_id):
            body['UserId'] = request.user_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateOrUpdateFormData',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/createOrUpdateFormData',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateOrUpdateFormDataResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_or_update_form_data_with_options_async(
        self,
        request: aliding_20230426_models.CreateOrUpdateFormDataRequest,
        tmp_header: aliding_20230426_models.CreateOrUpdateFormDataHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateOrUpdateFormDataResponse:
        """
        @summary 新增或更新表单实例
        
        @param request: CreateOrUpdateFormDataRequest
        @param tmp_header: CreateOrUpdateFormDataHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateOrUpdateFormDataResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.CreateOrUpdateFormDataShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.form_data_json):
            body['FormDataJson'] = request.form_data_json
        if not UtilClient.is_unset(request.form_uuid):
            body['FormUuid'] = request.form_uuid
        if not UtilClient.is_unset(request.no_execute_expression):
            body['NoExecuteExpression'] = request.no_execute_expression
        if not UtilClient.is_unset(request.search_condition):
            body['SearchCondition'] = request.search_condition
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        if not UtilClient.is_unset(request.user_id):
            body['UserId'] = request.user_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateOrUpdateFormData',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/createOrUpdateFormData',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateOrUpdateFormDataResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_or_update_form_data(
        self,
        request: aliding_20230426_models.CreateOrUpdateFormDataRequest,
    ) -> aliding_20230426_models.CreateOrUpdateFormDataResponse:
        """
        @summary 新增或更新表单实例
        
        @param request: CreateOrUpdateFormDataRequest
        @return: CreateOrUpdateFormDataResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateOrUpdateFormDataHeaders()
        return self.create_or_update_form_data_with_options(request, headers, runtime)

    async def create_or_update_form_data_async(
        self,
        request: aliding_20230426_models.CreateOrUpdateFormDataRequest,
    ) -> aliding_20230426_models.CreateOrUpdateFormDataResponse:
        """
        @summary 新增或更新表单实例
        
        @param request: CreateOrUpdateFormDataRequest
        @return: CreateOrUpdateFormDataResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateOrUpdateFormDataHeaders()
        return await self.create_or_update_form_data_with_options_async(request, headers, runtime)

    def create_org_honor_template_with_options(
        self,
        tmp_req: aliding_20230426_models.CreateOrgHonorTemplateRequest,
        tmp_header: aliding_20230426_models.CreateOrgHonorTemplateHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateOrgHonorTemplateResponse:
        """
        @summary 创建荣誉勋章模板
        
        @param tmp_req: CreateOrgHonorTemplateRequest
        @param tmp_header: CreateOrgHonorTemplateHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateOrgHonorTemplateResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateOrgHonorTemplateShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateOrgHonorTemplateShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.avatar_frame_media_id):
            body['avatarFrameMediaId'] = request.avatar_frame_media_id
        if not UtilClient.is_unset(request.default_bg_color):
            body['defaultBgColor'] = request.default_bg_color
        if not UtilClient.is_unset(request.medal_desc):
            body['medalDesc'] = request.medal_desc
        if not UtilClient.is_unset(request.medal_media_id):
            body['medalMediaId'] = request.medal_media_id
        if not UtilClient.is_unset(request.medal_name):
            body['medalName'] = request.medal_name
        if not UtilClient.is_unset(request.org_id):
            body['orgId'] = request.org_id
        if not UtilClient.is_unset(request.user_id):
            body['userId'] = request.user_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateOrgHonorTemplate',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/aliding/v1/honor/createOrgHonorTemplate',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateOrgHonorTemplateResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_org_honor_template_with_options_async(
        self,
        tmp_req: aliding_20230426_models.CreateOrgHonorTemplateRequest,
        tmp_header: aliding_20230426_models.CreateOrgHonorTemplateHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateOrgHonorTemplateResponse:
        """
        @summary 创建荣誉勋章模板
        
        @param tmp_req: CreateOrgHonorTemplateRequest
        @param tmp_header: CreateOrgHonorTemplateHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateOrgHonorTemplateResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateOrgHonorTemplateShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateOrgHonorTemplateShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.avatar_frame_media_id):
            body['avatarFrameMediaId'] = request.avatar_frame_media_id
        if not UtilClient.is_unset(request.default_bg_color):
            body['defaultBgColor'] = request.default_bg_color
        if not UtilClient.is_unset(request.medal_desc):
            body['medalDesc'] = request.medal_desc
        if not UtilClient.is_unset(request.medal_media_id):
            body['medalMediaId'] = request.medal_media_id
        if not UtilClient.is_unset(request.medal_name):
            body['medalName'] = request.medal_name
        if not UtilClient.is_unset(request.org_id):
            body['orgId'] = request.org_id
        if not UtilClient.is_unset(request.user_id):
            body['userId'] = request.user_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateOrgHonorTemplate',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/aliding/v1/honor/createOrgHonorTemplate',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateOrgHonorTemplateResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_org_honor_template(
        self,
        request: aliding_20230426_models.CreateOrgHonorTemplateRequest,
    ) -> aliding_20230426_models.CreateOrgHonorTemplateResponse:
        """
        @summary 创建荣誉勋章模板
        
        @param request: CreateOrgHonorTemplateRequest
        @return: CreateOrgHonorTemplateResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateOrgHonorTemplateHeaders()
        return self.create_org_honor_template_with_options(request, headers, runtime)

    async def create_org_honor_template_async(
        self,
        request: aliding_20230426_models.CreateOrgHonorTemplateRequest,
    ) -> aliding_20230426_models.CreateOrgHonorTemplateResponse:
        """
        @summary 创建荣誉勋章模板
        
        @param request: CreateOrgHonorTemplateRequest
        @return: CreateOrgHonorTemplateResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateOrgHonorTemplateHeaders()
        return await self.create_org_honor_template_with_options_async(request, headers, runtime)

    def create_personal_todo_task_with_options(
        self,
        tmp_req: aliding_20230426_models.CreatePersonalTodoTaskRequest,
        tmp_header: aliding_20230426_models.CreatePersonalTodoTaskHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreatePersonalTodoTaskResponse:
        """
        @summary 创建钉钉个人待办任务
        
        @param tmp_req: CreatePersonalTodoTaskRequest
        @param tmp_header: CreatePersonalTodoTaskHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreatePersonalTodoTaskResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreatePersonalTodoTaskShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreatePersonalTodoTaskShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.executor_ids):
            request.executor_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.executor_ids, 'ExecutorIds', 'json')
        if not UtilClient.is_unset(tmp_req.notify_configs):
            request.notify_configs_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.notify_configs, 'NotifyConfigs', 'json')
        if not UtilClient.is_unset(tmp_req.participant_ids):
            request.participant_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.participant_ids, 'ParticipantIds', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.due_time):
            body['DueTime'] = request.due_time
        if not UtilClient.is_unset(request.executor_ids_shrink):
            body['ExecutorIds'] = request.executor_ids_shrink
        if not UtilClient.is_unset(request.notify_configs_shrink):
            body['NotifyConfigs'] = request.notify_configs_shrink
        if not UtilClient.is_unset(request.participant_ids_shrink):
            body['ParticipantIds'] = request.participant_ids_shrink
        if not UtilClient.is_unset(request.reminder_time_stamp):
            body['ReminderTimeStamp'] = request.reminder_time_stamp
        if not UtilClient.is_unset(request.subject):
            body['Subject'] = request.subject
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreatePersonalTodoTask',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/task/createPersonalTodoTask',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreatePersonalTodoTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_personal_todo_task_with_options_async(
        self,
        tmp_req: aliding_20230426_models.CreatePersonalTodoTaskRequest,
        tmp_header: aliding_20230426_models.CreatePersonalTodoTaskHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreatePersonalTodoTaskResponse:
        """
        @summary 创建钉钉个人待办任务
        
        @param tmp_req: CreatePersonalTodoTaskRequest
        @param tmp_header: CreatePersonalTodoTaskHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreatePersonalTodoTaskResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreatePersonalTodoTaskShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreatePersonalTodoTaskShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.executor_ids):
            request.executor_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.executor_ids, 'ExecutorIds', 'json')
        if not UtilClient.is_unset(tmp_req.notify_configs):
            request.notify_configs_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.notify_configs, 'NotifyConfigs', 'json')
        if not UtilClient.is_unset(tmp_req.participant_ids):
            request.participant_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.participant_ids, 'ParticipantIds', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.due_time):
            body['DueTime'] = request.due_time
        if not UtilClient.is_unset(request.executor_ids_shrink):
            body['ExecutorIds'] = request.executor_ids_shrink
        if not UtilClient.is_unset(request.notify_configs_shrink):
            body['NotifyConfigs'] = request.notify_configs_shrink
        if not UtilClient.is_unset(request.participant_ids_shrink):
            body['ParticipantIds'] = request.participant_ids_shrink
        if not UtilClient.is_unset(request.reminder_time_stamp):
            body['ReminderTimeStamp'] = request.reminder_time_stamp
        if not UtilClient.is_unset(request.subject):
            body['Subject'] = request.subject
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreatePersonalTodoTask',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/task/createPersonalTodoTask',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreatePersonalTodoTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_personal_todo_task(
        self,
        request: aliding_20230426_models.CreatePersonalTodoTaskRequest,
    ) -> aliding_20230426_models.CreatePersonalTodoTaskResponse:
        """
        @summary 创建钉钉个人待办任务
        
        @param request: CreatePersonalTodoTaskRequest
        @return: CreatePersonalTodoTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreatePersonalTodoTaskHeaders()
        return self.create_personal_todo_task_with_options(request, headers, runtime)

    async def create_personal_todo_task_async(
        self,
        request: aliding_20230426_models.CreatePersonalTodoTaskRequest,
    ) -> aliding_20230426_models.CreatePersonalTodoTaskResponse:
        """
        @summary 创建钉钉个人待办任务
        
        @param request: CreatePersonalTodoTaskRequest
        @return: CreatePersonalTodoTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreatePersonalTodoTaskHeaders()
        return await self.create_personal_todo_task_with_options_async(request, headers, runtime)

    def create_report_with_options(
        self,
        tmp_req: aliding_20230426_models.CreateReportRequest,
        tmp_header: aliding_20230426_models.CreateReportHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateReportResponse:
        """
        @summary 创建日志
        
        @param tmp_req: CreateReportRequest
        @param tmp_header: CreateReportHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateReportResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateReportShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateReportShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.contents):
            request.contents_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.contents, 'Contents', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        if not UtilClient.is_unset(tmp_req.to_cids):
            request.to_cids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.to_cids, 'ToCids', 'json')
        if not UtilClient.is_unset(tmp_req.to_userids):
            request.to_userids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.to_userids, 'ToUserids', 'json')
        body = {}
        if not UtilClient.is_unset(request.contents_shrink):
            body['Contents'] = request.contents_shrink
        if not UtilClient.is_unset(request.dd_from):
            body['DdFrom'] = request.dd_from
        if not UtilClient.is_unset(request.template_id):
            body['TemplateId'] = request.template_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.to_chat):
            body['ToChat'] = request.to_chat
        if not UtilClient.is_unset(request.to_cids_shrink):
            body['ToCids'] = request.to_cids_shrink
        if not UtilClient.is_unset(request.to_userids_shrink):
            body['ToUserids'] = request.to_userids_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateReport',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/log/createReport',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateReportResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_report_with_options_async(
        self,
        tmp_req: aliding_20230426_models.CreateReportRequest,
        tmp_header: aliding_20230426_models.CreateReportHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateReportResponse:
        """
        @summary 创建日志
        
        @param tmp_req: CreateReportRequest
        @param tmp_header: CreateReportHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateReportResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateReportShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateReportShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.contents):
            request.contents_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.contents, 'Contents', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        if not UtilClient.is_unset(tmp_req.to_cids):
            request.to_cids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.to_cids, 'ToCids', 'json')
        if not UtilClient.is_unset(tmp_req.to_userids):
            request.to_userids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.to_userids, 'ToUserids', 'json')
        body = {}
        if not UtilClient.is_unset(request.contents_shrink):
            body['Contents'] = request.contents_shrink
        if not UtilClient.is_unset(request.dd_from):
            body['DdFrom'] = request.dd_from
        if not UtilClient.is_unset(request.template_id):
            body['TemplateId'] = request.template_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.to_chat):
            body['ToChat'] = request.to_chat
        if not UtilClient.is_unset(request.to_cids_shrink):
            body['ToCids'] = request.to_cids_shrink
        if not UtilClient.is_unset(request.to_userids_shrink):
            body['ToUserids'] = request.to_userids_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateReport',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/log/createReport',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateReportResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_report(
        self,
        request: aliding_20230426_models.CreateReportRequest,
    ) -> aliding_20230426_models.CreateReportResponse:
        """
        @summary 创建日志
        
        @param request: CreateReportRequest
        @return: CreateReportResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateReportHeaders()
        return self.create_report_with_options(request, headers, runtime)

    async def create_report_async(
        self,
        request: aliding_20230426_models.CreateReportRequest,
    ) -> aliding_20230426_models.CreateReportResponse:
        """
        @summary 创建日志
        
        @param request: CreateReportRequest
        @return: CreateReportResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateReportHeaders()
        return await self.create_report_with_options_async(request, headers, runtime)

    def create_run_with_options(
        self,
        request: aliding_20230426_models.CreateRunRequest,
        headers: aliding_20230426_models.CreateRunHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateRunResponse:
        """
        @summary 创建运行
        
        @param request: CreateRunRequest
        @param headers: CreateRunHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateRunResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.allow_struct_view_content):
            body['allowStructViewContent'] = request.allow_struct_view_content
        if not UtilClient.is_unset(request.assistant_id):
            body['assistantId'] = request.assistant_id
        if not UtilClient.is_unset(request.original_assistant_id):
            body['originalAssistantId'] = request.original_assistant_id
        if not UtilClient.is_unset(request.source_id_of_original_assistant_id):
            body['sourceIdOfOriginalAssistantId'] = request.source_id_of_original_assistant_id
        if not UtilClient.is_unset(request.source_type_of_original_assistant_id):
            body['sourceTypeOfOriginalAssistantId'] = request.source_type_of_original_assistant_id
        if not UtilClient.is_unset(request.stream):
            body['stream'] = request.stream
        if not UtilClient.is_unset(request.thread_id):
            body['threadId'] = request.thread_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_id):
            real_headers['accountId'] = UtilClient.to_jsonstring(headers.account_id)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateRun',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/ai/v1/assistant/createRun',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='json',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateRunResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_run_with_options_async(
        self,
        request: aliding_20230426_models.CreateRunRequest,
        headers: aliding_20230426_models.CreateRunHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateRunResponse:
        """
        @summary 创建运行
        
        @param request: CreateRunRequest
        @param headers: CreateRunHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateRunResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.allow_struct_view_content):
            body['allowStructViewContent'] = request.allow_struct_view_content
        if not UtilClient.is_unset(request.assistant_id):
            body['assistantId'] = request.assistant_id
        if not UtilClient.is_unset(request.original_assistant_id):
            body['originalAssistantId'] = request.original_assistant_id
        if not UtilClient.is_unset(request.source_id_of_original_assistant_id):
            body['sourceIdOfOriginalAssistantId'] = request.source_id_of_original_assistant_id
        if not UtilClient.is_unset(request.source_type_of_original_assistant_id):
            body['sourceTypeOfOriginalAssistantId'] = request.source_type_of_original_assistant_id
        if not UtilClient.is_unset(request.stream):
            body['stream'] = request.stream
        if not UtilClient.is_unset(request.thread_id):
            body['threadId'] = request.thread_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_id):
            real_headers['accountId'] = UtilClient.to_jsonstring(headers.account_id)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateRun',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/ai/v1/assistant/createRun',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='json',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateRunResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_run(
        self,
        request: aliding_20230426_models.CreateRunRequest,
    ) -> aliding_20230426_models.CreateRunResponse:
        """
        @summary 创建运行
        
        @param request: CreateRunRequest
        @return: CreateRunResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateRunHeaders()
        return self.create_run_with_options(request, headers, runtime)

    async def create_run_async(
        self,
        request: aliding_20230426_models.CreateRunRequest,
    ) -> aliding_20230426_models.CreateRunResponse:
        """
        @summary 创建运行
        
        @param request: CreateRunRequest
        @return: CreateRunResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateRunHeaders()
        return await self.create_run_with_options_async(request, headers, runtime)

    def create_scenegroup_with_options(
        self,
        request: aliding_20230426_models.CreateScenegroupRequest,
        tmp_header: aliding_20230426_models.CreateScenegroupHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateScenegroupResponse:
        """
        @summary 创建场景群
        
        @param request: CreateScenegroupRequest
        @param tmp_header: CreateScenegroupHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateScenegroupResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.CreateScenegroupShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.add_friend_forbidden):
            body['AddFriendForbidden'] = request.add_friend_forbidden
        if not UtilClient.is_unset(request.all_members_can_create_calendar):
            body['AllMembersCanCreateCalendar'] = request.all_members_can_create_calendar
        if not UtilClient.is_unset(request.all_members_can_create_mcs_conf):
            body['AllMembersCanCreateMcsConf'] = request.all_members_can_create_mcs_conf
        if not UtilClient.is_unset(request.chat_banned_type):
            body['ChatBannedType'] = request.chat_banned_type
        if not UtilClient.is_unset(request.group_email_disabled):
            body['GroupEmailDisabled'] = request.group_email_disabled
        if not UtilClient.is_unset(request.group_live_switch):
            body['GroupLiveSwitch'] = request.group_live_switch
        if not UtilClient.is_unset(request.icon):
            body['Icon'] = request.icon
        if not UtilClient.is_unset(request.management_type):
            body['ManagementType'] = request.management_type
        if not UtilClient.is_unset(request.members_to_admin_chat):
            body['MembersToAdminChat'] = request.members_to_admin_chat
        if not UtilClient.is_unset(request.mention_all_authority):
            body['MentionAllAuthority'] = request.mention_all_authority
        if not UtilClient.is_unset(request.only_admin_can_ding):
            body['OnlyAdminCanDing'] = request.only_admin_can_ding
        if not UtilClient.is_unset(request.only_admin_can_set_msg_top):
            body['OnlyAdminCanSetMsgTop'] = request.only_admin_can_set_msg_top
        if not UtilClient.is_unset(request.searchable):
            body['Searchable'] = request.searchable
        if not UtilClient.is_unset(request.show_history_type):
            body['ShowHistoryType'] = request.show_history_type
        if not UtilClient.is_unset(request.subadmin_ids):
            body['SubadminIds'] = request.subadmin_ids
        if not UtilClient.is_unset(request.template_id):
            body['TemplateId'] = request.template_id
        if not UtilClient.is_unset(request.title):
            body['Title'] = request.title
        if not UtilClient.is_unset(request.user_ids):
            body['UserIds'] = request.user_ids
        if not UtilClient.is_unset(request.uuid):
            body['Uuid'] = request.uuid
        if not UtilClient.is_unset(request.validation_type):
            body['ValidationType'] = request.validation_type
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateScenegroup',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/im/createScenegroup',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateScenegroupResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_scenegroup_with_options_async(
        self,
        request: aliding_20230426_models.CreateScenegroupRequest,
        tmp_header: aliding_20230426_models.CreateScenegroupHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateScenegroupResponse:
        """
        @summary 创建场景群
        
        @param request: CreateScenegroupRequest
        @param tmp_header: CreateScenegroupHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateScenegroupResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.CreateScenegroupShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.add_friend_forbidden):
            body['AddFriendForbidden'] = request.add_friend_forbidden
        if not UtilClient.is_unset(request.all_members_can_create_calendar):
            body['AllMembersCanCreateCalendar'] = request.all_members_can_create_calendar
        if not UtilClient.is_unset(request.all_members_can_create_mcs_conf):
            body['AllMembersCanCreateMcsConf'] = request.all_members_can_create_mcs_conf
        if not UtilClient.is_unset(request.chat_banned_type):
            body['ChatBannedType'] = request.chat_banned_type
        if not UtilClient.is_unset(request.group_email_disabled):
            body['GroupEmailDisabled'] = request.group_email_disabled
        if not UtilClient.is_unset(request.group_live_switch):
            body['GroupLiveSwitch'] = request.group_live_switch
        if not UtilClient.is_unset(request.icon):
            body['Icon'] = request.icon
        if not UtilClient.is_unset(request.management_type):
            body['ManagementType'] = request.management_type
        if not UtilClient.is_unset(request.members_to_admin_chat):
            body['MembersToAdminChat'] = request.members_to_admin_chat
        if not UtilClient.is_unset(request.mention_all_authority):
            body['MentionAllAuthority'] = request.mention_all_authority
        if not UtilClient.is_unset(request.only_admin_can_ding):
            body['OnlyAdminCanDing'] = request.only_admin_can_ding
        if not UtilClient.is_unset(request.only_admin_can_set_msg_top):
            body['OnlyAdminCanSetMsgTop'] = request.only_admin_can_set_msg_top
        if not UtilClient.is_unset(request.searchable):
            body['Searchable'] = request.searchable
        if not UtilClient.is_unset(request.show_history_type):
            body['ShowHistoryType'] = request.show_history_type
        if not UtilClient.is_unset(request.subadmin_ids):
            body['SubadminIds'] = request.subadmin_ids
        if not UtilClient.is_unset(request.template_id):
            body['TemplateId'] = request.template_id
        if not UtilClient.is_unset(request.title):
            body['Title'] = request.title
        if not UtilClient.is_unset(request.user_ids):
            body['UserIds'] = request.user_ids
        if not UtilClient.is_unset(request.uuid):
            body['Uuid'] = request.uuid
        if not UtilClient.is_unset(request.validation_type):
            body['ValidationType'] = request.validation_type
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateScenegroup',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/im/createScenegroup',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateScenegroupResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_scenegroup(
        self,
        request: aliding_20230426_models.CreateScenegroupRequest,
    ) -> aliding_20230426_models.CreateScenegroupResponse:
        """
        @summary 创建场景群
        
        @param request: CreateScenegroupRequest
        @return: CreateScenegroupResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateScenegroupHeaders()
        return self.create_scenegroup_with_options(request, headers, runtime)

    async def create_scenegroup_async(
        self,
        request: aliding_20230426_models.CreateScenegroupRequest,
    ) -> aliding_20230426_models.CreateScenegroupResponse:
        """
        @summary 创建场景群
        
        @param request: CreateScenegroupRequest
        @return: CreateScenegroupResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateScenegroupHeaders()
        return await self.create_scenegroup_with_options_async(request, headers, runtime)

    def create_schedule_conference_with_options(
        self,
        tmp_req: aliding_20230426_models.CreateScheduleConferenceRequest,
        tmp_header: aliding_20230426_models.CreateScheduleConferenceHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateScheduleConferenceResponse:
        """
        @summary 创建预约会议
        
        @param tmp_req: CreateScheduleConferenceRequest
        @param tmp_header: CreateScheduleConferenceHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateScheduleConferenceResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateScheduleConferenceShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateScheduleConferenceShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.schedule_conf_setting_model):
            request.schedule_conf_setting_model_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.schedule_conf_setting_model, 'ScheduleConfSettingModel', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.end_time):
            body['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.schedule_conf_setting_model_shrink):
            body['ScheduleConfSettingModel'] = request.schedule_conf_setting_model_shrink
        if not UtilClient.is_unset(request.start_time):
            body['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.title):
            body['Title'] = request.title
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateScheduleConference',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/createScheduleConference',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateScheduleConferenceResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_schedule_conference_with_options_async(
        self,
        tmp_req: aliding_20230426_models.CreateScheduleConferenceRequest,
        tmp_header: aliding_20230426_models.CreateScheduleConferenceHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateScheduleConferenceResponse:
        """
        @summary 创建预约会议
        
        @param tmp_req: CreateScheduleConferenceRequest
        @param tmp_header: CreateScheduleConferenceHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateScheduleConferenceResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateScheduleConferenceShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateScheduleConferenceShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.schedule_conf_setting_model):
            request.schedule_conf_setting_model_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.schedule_conf_setting_model, 'ScheduleConfSettingModel', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.end_time):
            body['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.schedule_conf_setting_model_shrink):
            body['ScheduleConfSettingModel'] = request.schedule_conf_setting_model_shrink
        if not UtilClient.is_unset(request.start_time):
            body['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.title):
            body['Title'] = request.title
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateScheduleConference',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/createScheduleConference',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateScheduleConferenceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_schedule_conference(
        self,
        request: aliding_20230426_models.CreateScheduleConferenceRequest,
    ) -> aliding_20230426_models.CreateScheduleConferenceResponse:
        """
        @summary 创建预约会议
        
        @param request: CreateScheduleConferenceRequest
        @return: CreateScheduleConferenceResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateScheduleConferenceHeaders()
        return self.create_schedule_conference_with_options(request, headers, runtime)

    async def create_schedule_conference_async(
        self,
        request: aliding_20230426_models.CreateScheduleConferenceRequest,
    ) -> aliding_20230426_models.CreateScheduleConferenceResponse:
        """
        @summary 创建预约会议
        
        @param request: CreateScheduleConferenceRequest
        @return: CreateScheduleConferenceResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateScheduleConferenceHeaders()
        return await self.create_schedule_conference_with_options_async(request, headers, runtime)

    def create_search_dome_with_options(
        self,
        tmp_req: aliding_20230426_models.CreateSearchDomeRequest,
        tmp_header: aliding_20230426_models.CreateSearchDomeHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateSearchDomeResponse:
        """
        @summary 发布钉钉搜索穹顶
        
        @param tmp_req: CreateSearchDomeRequest
        @param tmp_header: CreateSearchDomeHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateSearchDomeResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateSearchDomeShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateSearchDomeShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        if not UtilClient.is_unset(tmp_req.user_id_list):
            request.user_id_list_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.user_id_list, 'UserIdList', 'json')
        body = {}
        if not UtilClient.is_unset(request.content):
            body['Content'] = request.content
        if not UtilClient.is_unset(request.end_time):
            body['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.res_id):
            body['ResId'] = request.res_id
        if not UtilClient.is_unset(request.start_time):
            body['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.user_id_list_shrink):
            body['UserIdList'] = request.user_id_list_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateSearchDome',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/watt/createSearchDome',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateSearchDomeResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_search_dome_with_options_async(
        self,
        tmp_req: aliding_20230426_models.CreateSearchDomeRequest,
        tmp_header: aliding_20230426_models.CreateSearchDomeHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateSearchDomeResponse:
        """
        @summary 发布钉钉搜索穹顶
        
        @param tmp_req: CreateSearchDomeRequest
        @param tmp_header: CreateSearchDomeHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateSearchDomeResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateSearchDomeShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateSearchDomeShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        if not UtilClient.is_unset(tmp_req.user_id_list):
            request.user_id_list_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.user_id_list, 'UserIdList', 'json')
        body = {}
        if not UtilClient.is_unset(request.content):
            body['Content'] = request.content
        if not UtilClient.is_unset(request.end_time):
            body['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.res_id):
            body['ResId'] = request.res_id
        if not UtilClient.is_unset(request.start_time):
            body['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.user_id_list_shrink):
            body['UserIdList'] = request.user_id_list_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateSearchDome',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/watt/createSearchDome',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateSearchDomeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_search_dome(
        self,
        request: aliding_20230426_models.CreateSearchDomeRequest,
    ) -> aliding_20230426_models.CreateSearchDomeResponse:
        """
        @summary 发布钉钉搜索穹顶
        
        @param request: CreateSearchDomeRequest
        @return: CreateSearchDomeResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateSearchDomeHeaders()
        return self.create_search_dome_with_options(request, headers, runtime)

    async def create_search_dome_async(
        self,
        request: aliding_20230426_models.CreateSearchDomeRequest,
    ) -> aliding_20230426_models.CreateSearchDomeResponse:
        """
        @summary 发布钉钉搜索穹顶
        
        @param request: CreateSearchDomeRequest
        @return: CreateSearchDomeResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateSearchDomeHeaders()
        return await self.create_search_dome_with_options_async(request, headers, runtime)

    def create_search_keyword_with_options(
        self,
        tmp_req: aliding_20230426_models.CreateSearchKeywordRequest,
        tmp_header: aliding_20230426_models.CreateSearchKeywordHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateSearchKeywordResponse:
        """
        @summary 发布钉钉搜索关键词
        
        @param tmp_req: CreateSearchKeywordRequest
        @param tmp_header: CreateSearchKeywordHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateSearchKeywordResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateSearchKeywordShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateSearchKeywordShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        if not UtilClient.is_unset(tmp_req.user_id_list):
            request.user_id_list_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.user_id_list, 'UserIdList', 'json')
        body = {}
        if not UtilClient.is_unset(request.content):
            body['Content'] = request.content
        if not UtilClient.is_unset(request.end_time):
            body['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.res_id):
            body['ResId'] = request.res_id
        if not UtilClient.is_unset(request.start_time):
            body['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.user_id_list_shrink):
            body['UserIdList'] = request.user_id_list_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateSearchKeyword',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/watt/createSearchKeyword',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateSearchKeywordResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_search_keyword_with_options_async(
        self,
        tmp_req: aliding_20230426_models.CreateSearchKeywordRequest,
        tmp_header: aliding_20230426_models.CreateSearchKeywordHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateSearchKeywordResponse:
        """
        @summary 发布钉钉搜索关键词
        
        @param tmp_req: CreateSearchKeywordRequest
        @param tmp_header: CreateSearchKeywordHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateSearchKeywordResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateSearchKeywordShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateSearchKeywordShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        if not UtilClient.is_unset(tmp_req.user_id_list):
            request.user_id_list_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.user_id_list, 'UserIdList', 'json')
        body = {}
        if not UtilClient.is_unset(request.content):
            body['Content'] = request.content
        if not UtilClient.is_unset(request.end_time):
            body['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.res_id):
            body['ResId'] = request.res_id
        if not UtilClient.is_unset(request.start_time):
            body['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.user_id_list_shrink):
            body['UserIdList'] = request.user_id_list_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateSearchKeyword',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/watt/createSearchKeyword',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateSearchKeywordResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_search_keyword(
        self,
        request: aliding_20230426_models.CreateSearchKeywordRequest,
    ) -> aliding_20230426_models.CreateSearchKeywordResponse:
        """
        @summary 发布钉钉搜索关键词
        
        @param request: CreateSearchKeywordRequest
        @return: CreateSearchKeywordResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateSearchKeywordHeaders()
        return self.create_search_keyword_with_options(request, headers, runtime)

    async def create_search_keyword_async(
        self,
        request: aliding_20230426_models.CreateSearchKeywordRequest,
    ) -> aliding_20230426_models.CreateSearchKeywordResponse:
        """
        @summary 发布钉钉搜索关键词
        
        @param request: CreateSearchKeywordRequest
        @return: CreateSearchKeywordResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateSearchKeywordHeaders()
        return await self.create_search_keyword_with_options_async(request, headers, runtime)

    def create_sheet_with_options(
        self,
        tmp_req: aliding_20230426_models.CreateSheetRequest,
        tmp_header: aliding_20230426_models.CreateSheetHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateSheetResponse:
        """
        @summary 创建工作表
        
        @param tmp_req: CreateSheetRequest
        @param tmp_header: CreateSheetHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateSheetResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateSheetShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateSheetShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workbook_id):
            body['WorkbookId'] = request.workbook_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateSheet',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/createSheet',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateSheetResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_sheet_with_options_async(
        self,
        tmp_req: aliding_20230426_models.CreateSheetRequest,
        tmp_header: aliding_20230426_models.CreateSheetHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateSheetResponse:
        """
        @summary 创建工作表
        
        @param tmp_req: CreateSheetRequest
        @param tmp_header: CreateSheetHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateSheetResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateSheetShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateSheetShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workbook_id):
            body['WorkbookId'] = request.workbook_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateSheet',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/createSheet',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateSheetResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_sheet(
        self,
        request: aliding_20230426_models.CreateSheetRequest,
    ) -> aliding_20230426_models.CreateSheetResponse:
        """
        @summary 创建工作表
        
        @param request: CreateSheetRequest
        @return: CreateSheetResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateSheetHeaders()
        return self.create_sheet_with_options(request, headers, runtime)

    async def create_sheet_async(
        self,
        request: aliding_20230426_models.CreateSheetRequest,
    ) -> aliding_20230426_models.CreateSheetResponse:
        """
        @summary 创建工作表
        
        @param request: CreateSheetRequest
        @return: CreateSheetResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateSheetHeaders()
        return await self.create_sheet_with_options_async(request, headers, runtime)

    def create_subscribed_calendar_with_options(
        self,
        tmp_req: aliding_20230426_models.CreateSubscribedCalendarRequest,
        tmp_header: aliding_20230426_models.CreateSubscribedCalendarHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateSubscribedCalendarResponse:
        """
        @summary 创建订阅日历
        
        @param tmp_req: CreateSubscribedCalendarRequest
        @param tmp_header: CreateSubscribedCalendarHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateSubscribedCalendarResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateSubscribedCalendarShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateSubscribedCalendarShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.managers):
            request.managers_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.managers, 'Managers', 'json')
        if not UtilClient.is_unset(tmp_req.subscribe_scope):
            request.subscribe_scope_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.subscribe_scope, 'SubscribeScope', 'json')
        body = {}
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.managers_shrink):
            body['Managers'] = request.managers_shrink
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.subscribe_scope_shrink):
            body['SubscribeScope'] = request.subscribe_scope_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateSubscribedCalendar',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/createSubscribedCalendar',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateSubscribedCalendarResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_subscribed_calendar_with_options_async(
        self,
        tmp_req: aliding_20230426_models.CreateSubscribedCalendarRequest,
        tmp_header: aliding_20230426_models.CreateSubscribedCalendarHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateSubscribedCalendarResponse:
        """
        @summary 创建订阅日历
        
        @param tmp_req: CreateSubscribedCalendarRequest
        @param tmp_header: CreateSubscribedCalendarHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateSubscribedCalendarResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateSubscribedCalendarShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateSubscribedCalendarShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.managers):
            request.managers_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.managers, 'Managers', 'json')
        if not UtilClient.is_unset(tmp_req.subscribe_scope):
            request.subscribe_scope_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.subscribe_scope, 'SubscribeScope', 'json')
        body = {}
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.managers_shrink):
            body['Managers'] = request.managers_shrink
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.subscribe_scope_shrink):
            body['SubscribeScope'] = request.subscribe_scope_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateSubscribedCalendar',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/createSubscribedCalendar',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateSubscribedCalendarResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_subscribed_calendar(
        self,
        request: aliding_20230426_models.CreateSubscribedCalendarRequest,
    ) -> aliding_20230426_models.CreateSubscribedCalendarResponse:
        """
        @summary 创建订阅日历
        
        @param request: CreateSubscribedCalendarRequest
        @return: CreateSubscribedCalendarResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateSubscribedCalendarHeaders()
        return self.create_subscribed_calendar_with_options(request, headers, runtime)

    async def create_subscribed_calendar_async(
        self,
        request: aliding_20230426_models.CreateSubscribedCalendarRequest,
    ) -> aliding_20230426_models.CreateSubscribedCalendarResponse:
        """
        @summary 创建订阅日历
        
        @param request: CreateSubscribedCalendarRequest
        @return: CreateSubscribedCalendarResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateSubscribedCalendarHeaders()
        return await self.create_subscribed_calendar_with_options_async(request, headers, runtime)

    def create_thread_with_options(
        self,
        request: aliding_20230426_models.CreateThreadRequest,
        headers: aliding_20230426_models.CreateThreadHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateThreadResponse:
        """
        @summary 创建线程
        
        @param request: CreateThreadRequest
        @param headers: CreateThreadHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateThreadResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.assistant_id):
            body['assistantId'] = request.assistant_id
        if not UtilClient.is_unset(request.original_assistant_id):
            body['originalAssistantId'] = request.original_assistant_id
        if not UtilClient.is_unset(request.source_id_of_original_assistant_id):
            body['sourceIdOfOriginalAssistantId'] = request.source_id_of_original_assistant_id
        if not UtilClient.is_unset(request.source_type_of_original_assistant_id):
            body['sourceTypeOfOriginalAssistantId'] = request.source_type_of_original_assistant_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_id):
            real_headers['accountId'] = UtilClient.to_jsonstring(headers.account_id)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateThread',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/ai/v1/assistant/createThread',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='json',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateThreadResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_thread_with_options_async(
        self,
        request: aliding_20230426_models.CreateThreadRequest,
        headers: aliding_20230426_models.CreateThreadHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateThreadResponse:
        """
        @summary 创建线程
        
        @param request: CreateThreadRequest
        @param headers: CreateThreadHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateThreadResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.assistant_id):
            body['assistantId'] = request.assistant_id
        if not UtilClient.is_unset(request.original_assistant_id):
            body['originalAssistantId'] = request.original_assistant_id
        if not UtilClient.is_unset(request.source_id_of_original_assistant_id):
            body['sourceIdOfOriginalAssistantId'] = request.source_id_of_original_assistant_id
        if not UtilClient.is_unset(request.source_type_of_original_assistant_id):
            body['sourceTypeOfOriginalAssistantId'] = request.source_type_of_original_assistant_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_id):
            real_headers['accountId'] = UtilClient.to_jsonstring(headers.account_id)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateThread',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/ai/v1/assistant/createThread',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='json',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateThreadResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_thread(
        self,
        request: aliding_20230426_models.CreateThreadRequest,
    ) -> aliding_20230426_models.CreateThreadResponse:
        """
        @summary 创建线程
        
        @param request: CreateThreadRequest
        @return: CreateThreadResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateThreadHeaders()
        return self.create_thread_with_options(request, headers, runtime)

    async def create_thread_async(
        self,
        request: aliding_20230426_models.CreateThreadRequest,
    ) -> aliding_20230426_models.CreateThreadResponse:
        """
        @summary 创建线程
        
        @param request: CreateThreadRequest
        @return: CreateThreadResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateThreadHeaders()
        return await self.create_thread_with_options_async(request, headers, runtime)

    def create_ticket_with_options(
        self,
        tmp_req: aliding_20230426_models.CreateTicketRequest,
        tmp_header: aliding_20230426_models.CreateTicketHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateTicketResponse:
        """
        @summary 创建工单
        
        @param tmp_req: CreateTicketRequest
        @param tmp_header: CreateTicketHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateTicketResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateTicketShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateTicketShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.notify):
            request.notify_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.notify, 'Notify', 'json')
        if not UtilClient.is_unset(tmp_req.processor_user_ids):
            request.processor_user_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.processor_user_ids, 'ProcessorUserIds', 'json')
        if not UtilClient.is_unset(tmp_req.scene_context):
            request.scene_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.scene_context, 'SceneContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.custom_fields):
            body['CustomFields'] = request.custom_fields
        if not UtilClient.is_unset(request.notify_shrink):
            body['Notify'] = request.notify_shrink
        if not UtilClient.is_unset(request.open_team_id):
            body['OpenTeamId'] = request.open_team_id
        if not UtilClient.is_unset(request.open_template_biz_id):
            body['OpenTemplateBizId'] = request.open_template_biz_id
        if not UtilClient.is_unset(request.processor_user_ids_shrink):
            body['ProcessorUserIds'] = request.processor_user_ids_shrink
        if not UtilClient.is_unset(request.scene):
            body['Scene'] = request.scene
        if not UtilClient.is_unset(request.scene_context_shrink):
            body['SceneContext'] = request.scene_context_shrink
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.title):
            body['Title'] = request.title
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateTicket',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ticket/createTicket',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateTicketResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_ticket_with_options_async(
        self,
        tmp_req: aliding_20230426_models.CreateTicketRequest,
        tmp_header: aliding_20230426_models.CreateTicketHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateTicketResponse:
        """
        @summary 创建工单
        
        @param tmp_req: CreateTicketRequest
        @param tmp_header: CreateTicketHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateTicketResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateTicketShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateTicketShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.notify):
            request.notify_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.notify, 'Notify', 'json')
        if not UtilClient.is_unset(tmp_req.processor_user_ids):
            request.processor_user_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.processor_user_ids, 'ProcessorUserIds', 'json')
        if not UtilClient.is_unset(tmp_req.scene_context):
            request.scene_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.scene_context, 'SceneContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.custom_fields):
            body['CustomFields'] = request.custom_fields
        if not UtilClient.is_unset(request.notify_shrink):
            body['Notify'] = request.notify_shrink
        if not UtilClient.is_unset(request.open_team_id):
            body['OpenTeamId'] = request.open_team_id
        if not UtilClient.is_unset(request.open_template_biz_id):
            body['OpenTemplateBizId'] = request.open_template_biz_id
        if not UtilClient.is_unset(request.processor_user_ids_shrink):
            body['ProcessorUserIds'] = request.processor_user_ids_shrink
        if not UtilClient.is_unset(request.scene):
            body['Scene'] = request.scene
        if not UtilClient.is_unset(request.scene_context_shrink):
            body['SceneContext'] = request.scene_context_shrink
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.title):
            body['Title'] = request.title
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateTicket',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ticket/createTicket',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateTicketResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_ticket(
        self,
        request: aliding_20230426_models.CreateTicketRequest,
    ) -> aliding_20230426_models.CreateTicketResponse:
        """
        @summary 创建工单
        
        @param request: CreateTicketRequest
        @return: CreateTicketResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateTicketHeaders()
        return self.create_ticket_with_options(request, headers, runtime)

    async def create_ticket_async(
        self,
        request: aliding_20230426_models.CreateTicketRequest,
    ) -> aliding_20230426_models.CreateTicketResponse:
        """
        @summary 创建工单
        
        @param request: CreateTicketRequest
        @return: CreateTicketResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateTicketHeaders()
        return await self.create_ticket_with_options_async(request, headers, runtime)

    def create_todo_task_with_options(
        self,
        tmp_req: aliding_20230426_models.CreateTodoTaskRequest,
        tmp_header: aliding_20230426_models.CreateTodoTaskHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateTodoTaskResponse:
        """
        @summary 创建代办
        
        @param tmp_req: CreateTodoTaskRequest
        @param tmp_header: CreateTodoTaskHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateTodoTaskResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateTodoTaskShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateTodoTaskShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        if not UtilClient.is_unset(tmp_req.action_list):
            request.action_list_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.action_list, 'actionList', 'json')
        if not UtilClient.is_unset(tmp_req.content_field_list):
            request.content_field_list_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.content_field_list, 'contentFieldList', 'json')
        if not UtilClient.is_unset(tmp_req.detail_url):
            request.detail_url_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.detail_url, 'detailUrl', 'json')
        if not UtilClient.is_unset(tmp_req.executor_ids):
            request.executor_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.executor_ids, 'executorIds', 'json')
        if not UtilClient.is_unset(tmp_req.notify_configs):
            request.notify_configs_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.notify_configs, 'notifyConfigs', 'json')
        if not UtilClient.is_unset(tmp_req.participant_ids):
            request.participant_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.participant_ids, 'participantIds', 'json')
        query = {}
        if not UtilClient.is_unset(request.operator_id):
            query['operatorId'] = request.operator_id
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.action_list_shrink):
            body['actionList'] = request.action_list_shrink
        if not UtilClient.is_unset(request.content_field_list_shrink):
            body['contentFieldList'] = request.content_field_list_shrink
        if not UtilClient.is_unset(request.creator_id):
            body['creatorId'] = request.creator_id
        if not UtilClient.is_unset(request.description):
            body['description'] = request.description
        if not UtilClient.is_unset(request.detail_url_shrink):
            body['detailUrl'] = request.detail_url_shrink
        if not UtilClient.is_unset(request.due_time):
            body['dueTime'] = request.due_time
        if not UtilClient.is_unset(request.executor_ids_shrink):
            body['executorIds'] = request.executor_ids_shrink
        if not UtilClient.is_unset(request.is_only_show_executor):
            body['isOnlyShowExecutor'] = request.is_only_show_executor
        if not UtilClient.is_unset(request.notify_configs_shrink):
            body['notifyConfigs'] = request.notify_configs_shrink
        if not UtilClient.is_unset(request.participant_ids_shrink):
            body['participantIds'] = request.participant_ids_shrink
        if not UtilClient.is_unset(request.priority):
            body['priority'] = request.priority
        if not UtilClient.is_unset(request.source_id):
            body['sourceId'] = request.source_id
        if not UtilClient.is_unset(request.subject):
            body['subject'] = request.subject
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateTodoTask',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/task/createTodoTask',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateTodoTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_todo_task_with_options_async(
        self,
        tmp_req: aliding_20230426_models.CreateTodoTaskRequest,
        tmp_header: aliding_20230426_models.CreateTodoTaskHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateTodoTaskResponse:
        """
        @summary 创建代办
        
        @param tmp_req: CreateTodoTaskRequest
        @param tmp_header: CreateTodoTaskHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateTodoTaskResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateTodoTaskShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateTodoTaskShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        if not UtilClient.is_unset(tmp_req.action_list):
            request.action_list_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.action_list, 'actionList', 'json')
        if not UtilClient.is_unset(tmp_req.content_field_list):
            request.content_field_list_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.content_field_list, 'contentFieldList', 'json')
        if not UtilClient.is_unset(tmp_req.detail_url):
            request.detail_url_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.detail_url, 'detailUrl', 'json')
        if not UtilClient.is_unset(tmp_req.executor_ids):
            request.executor_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.executor_ids, 'executorIds', 'json')
        if not UtilClient.is_unset(tmp_req.notify_configs):
            request.notify_configs_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.notify_configs, 'notifyConfigs', 'json')
        if not UtilClient.is_unset(tmp_req.participant_ids):
            request.participant_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.participant_ids, 'participantIds', 'json')
        query = {}
        if not UtilClient.is_unset(request.operator_id):
            query['operatorId'] = request.operator_id
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.action_list_shrink):
            body['actionList'] = request.action_list_shrink
        if not UtilClient.is_unset(request.content_field_list_shrink):
            body['contentFieldList'] = request.content_field_list_shrink
        if not UtilClient.is_unset(request.creator_id):
            body['creatorId'] = request.creator_id
        if not UtilClient.is_unset(request.description):
            body['description'] = request.description
        if not UtilClient.is_unset(request.detail_url_shrink):
            body['detailUrl'] = request.detail_url_shrink
        if not UtilClient.is_unset(request.due_time):
            body['dueTime'] = request.due_time
        if not UtilClient.is_unset(request.executor_ids_shrink):
            body['executorIds'] = request.executor_ids_shrink
        if not UtilClient.is_unset(request.is_only_show_executor):
            body['isOnlyShowExecutor'] = request.is_only_show_executor
        if not UtilClient.is_unset(request.notify_configs_shrink):
            body['notifyConfigs'] = request.notify_configs_shrink
        if not UtilClient.is_unset(request.participant_ids_shrink):
            body['participantIds'] = request.participant_ids_shrink
        if not UtilClient.is_unset(request.priority):
            body['priority'] = request.priority
        if not UtilClient.is_unset(request.source_id):
            body['sourceId'] = request.source_id
        if not UtilClient.is_unset(request.subject):
            body['subject'] = request.subject
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateTodoTask',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/task/createTodoTask',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateTodoTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_todo_task(
        self,
        request: aliding_20230426_models.CreateTodoTaskRequest,
    ) -> aliding_20230426_models.CreateTodoTaskResponse:
        """
        @summary 创建代办
        
        @param request: CreateTodoTaskRequest
        @return: CreateTodoTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateTodoTaskHeaders()
        return self.create_todo_task_with_options(request, headers, runtime)

    async def create_todo_task_async(
        self,
        request: aliding_20230426_models.CreateTodoTaskRequest,
    ) -> aliding_20230426_models.CreateTodoTaskResponse:
        """
        @summary 创建代办
        
        @param request: CreateTodoTaskRequest
        @return: CreateTodoTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateTodoTaskHeaders()
        return await self.create_todo_task_with_options_async(request, headers, runtime)

    def create_video_conference_with_options(
        self,
        tmp_req: aliding_20230426_models.CreateVideoConferenceRequest,
        tmp_header: aliding_20230426_models.CreateVideoConferenceHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateVideoConferenceResponse:
        """
        @summary 创建视频会议
        
        @param tmp_req: CreateVideoConferenceRequest
        @param tmp_header: CreateVideoConferenceHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateVideoConferenceResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateVideoConferenceShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateVideoConferenceShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.invite_user_ids):
            request.invite_user_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.invite_user_ids, 'InviteUserIds', 'json')
        body = {}
        if not UtilClient.is_unset(request.conf_title):
            body['ConfTitle'] = request.conf_title
        if not UtilClient.is_unset(request.invite_caller):
            body['InviteCaller'] = request.invite_caller
        if not UtilClient.is_unset(request.invite_user_ids_shrink):
            body['InviteUserIds'] = request.invite_user_ids_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateVideoConference',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/createVideoConference',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateVideoConferenceResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_video_conference_with_options_async(
        self,
        tmp_req: aliding_20230426_models.CreateVideoConferenceRequest,
        tmp_header: aliding_20230426_models.CreateVideoConferenceHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateVideoConferenceResponse:
        """
        @summary 创建视频会议
        
        @param tmp_req: CreateVideoConferenceRequest
        @param tmp_header: CreateVideoConferenceHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateVideoConferenceResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateVideoConferenceShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateVideoConferenceShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.invite_user_ids):
            request.invite_user_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.invite_user_ids, 'InviteUserIds', 'json')
        body = {}
        if not UtilClient.is_unset(request.conf_title):
            body['ConfTitle'] = request.conf_title
        if not UtilClient.is_unset(request.invite_caller):
            body['InviteCaller'] = request.invite_caller
        if not UtilClient.is_unset(request.invite_user_ids_shrink):
            body['InviteUserIds'] = request.invite_user_ids_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateVideoConference',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/createVideoConference',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateVideoConferenceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_video_conference(
        self,
        request: aliding_20230426_models.CreateVideoConferenceRequest,
    ) -> aliding_20230426_models.CreateVideoConferenceResponse:
        """
        @summary 创建视频会议
        
        @param request: CreateVideoConferenceRequest
        @return: CreateVideoConferenceResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateVideoConferenceHeaders()
        return self.create_video_conference_with_options(request, headers, runtime)

    async def create_video_conference_async(
        self,
        request: aliding_20230426_models.CreateVideoConferenceRequest,
    ) -> aliding_20230426_models.CreateVideoConferenceResponse:
        """
        @summary 创建视频会议
        
        @param request: CreateVideoConferenceRequest
        @return: CreateVideoConferenceResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateVideoConferenceHeaders()
        return await self.create_video_conference_with_options_async(request, headers, runtime)

    def create_workspace_with_options(
        self,
        tmp_req: aliding_20230426_models.CreateWorkspaceRequest,
        tmp_header: aliding_20230426_models.CreateWorkspaceHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateWorkspaceResponse:
        """
        @summary 创建知识库
        
        @param tmp_req: CreateWorkspaceRequest
        @param tmp_header: CreateWorkspaceHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateWorkspaceResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateWorkspaceShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateWorkspaceShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateWorkspace',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/createWorkspace',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateWorkspaceResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_workspace_with_options_async(
        self,
        tmp_req: aliding_20230426_models.CreateWorkspaceRequest,
        tmp_header: aliding_20230426_models.CreateWorkspaceHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateWorkspaceResponse:
        """
        @summary 创建知识库
        
        @param tmp_req: CreateWorkspaceRequest
        @param tmp_header: CreateWorkspaceHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateWorkspaceResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateWorkspaceShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateWorkspaceShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateWorkspace',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/createWorkspace',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateWorkspaceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_workspace(
        self,
        request: aliding_20230426_models.CreateWorkspaceRequest,
    ) -> aliding_20230426_models.CreateWorkspaceResponse:
        """
        @summary 创建知识库
        
        @param request: CreateWorkspaceRequest
        @return: CreateWorkspaceResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateWorkspaceHeaders()
        return self.create_workspace_with_options(request, headers, runtime)

    async def create_workspace_async(
        self,
        request: aliding_20230426_models.CreateWorkspaceRequest,
    ) -> aliding_20230426_models.CreateWorkspaceResponse:
        """
        @summary 创建知识库
        
        @param request: CreateWorkspaceRequest
        @return: CreateWorkspaceResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateWorkspaceHeaders()
        return await self.create_workspace_with_options_async(request, headers, runtime)

    def create_workspace_doc_with_options(
        self,
        tmp_req: aliding_20230426_models.CreateWorkspaceDocRequest,
        tmp_header: aliding_20230426_models.CreateWorkspaceDocHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateWorkspaceDocResponse:
        """
        @summary 创建知识库文档
        
        @param tmp_req: CreateWorkspaceDocRequest
        @param tmp_header: CreateWorkspaceDocHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateWorkspaceDocResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateWorkspaceDocShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateWorkspaceDocShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.doc_type):
            body['DocType'] = request.doc_type
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.parent_node_id):
            body['ParentNodeId'] = request.parent_node_id
        if not UtilClient.is_unset(request.template_id):
            body['TemplateId'] = request.template_id
        if not UtilClient.is_unset(request.template_type):
            body['TemplateType'] = request.template_type
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workspace_id):
            body['WorkspaceId'] = request.workspace_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateWorkspaceDoc',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/createWorkspaceDoc',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateWorkspaceDocResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_workspace_doc_with_options_async(
        self,
        tmp_req: aliding_20230426_models.CreateWorkspaceDocRequest,
        tmp_header: aliding_20230426_models.CreateWorkspaceDocHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.CreateWorkspaceDocResponse:
        """
        @summary 创建知识库文档
        
        @param tmp_req: CreateWorkspaceDocRequest
        @param tmp_header: CreateWorkspaceDocHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateWorkspaceDocResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.CreateWorkspaceDocShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.CreateWorkspaceDocShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.doc_type):
            body['DocType'] = request.doc_type
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.parent_node_id):
            body['ParentNodeId'] = request.parent_node_id
        if not UtilClient.is_unset(request.template_id):
            body['TemplateId'] = request.template_id
        if not UtilClient.is_unset(request.template_type):
            body['TemplateType'] = request.template_type
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workspace_id):
            body['WorkspaceId'] = request.workspace_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateWorkspaceDoc',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/createWorkspaceDoc',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.CreateWorkspaceDocResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_workspace_doc(
        self,
        request: aliding_20230426_models.CreateWorkspaceDocRequest,
    ) -> aliding_20230426_models.CreateWorkspaceDocResponse:
        """
        @summary 创建知识库文档
        
        @param request: CreateWorkspaceDocRequest
        @return: CreateWorkspaceDocResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateWorkspaceDocHeaders()
        return self.create_workspace_doc_with_options(request, headers, runtime)

    async def create_workspace_doc_async(
        self,
        request: aliding_20230426_models.CreateWorkspaceDocRequest,
    ) -> aliding_20230426_models.CreateWorkspaceDocResponse:
        """
        @summary 创建知识库文档
        
        @param request: CreateWorkspaceDocRequest
        @return: CreateWorkspaceDocResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.CreateWorkspaceDocHeaders()
        return await self.create_workspace_doc_with_options_async(request, headers, runtime)

    def delete_aliding_assistant_with_options(
        self,
        tmp_req: aliding_20230426_models.DeleteAlidingAssistantRequest,
        tmp_header: aliding_20230426_models.DeleteAlidingAssistantHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeleteAlidingAssistantResponse:
        """
        @param tmp_req: DeleteAlidingAssistantRequest
        @param tmp_header: DeleteAlidingAssistantHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteAlidingAssistantResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.DeleteAlidingAssistantShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.DeleteAlidingAssistantShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.assistant_id):
            body['AssistantId'] = request.assistant_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteAlidingAssistant',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/aiagent/deleteAlidingAssistant',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeleteAlidingAssistantResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_aliding_assistant_with_options_async(
        self,
        tmp_req: aliding_20230426_models.DeleteAlidingAssistantRequest,
        tmp_header: aliding_20230426_models.DeleteAlidingAssistantHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeleteAlidingAssistantResponse:
        """
        @param tmp_req: DeleteAlidingAssistantRequest
        @param tmp_header: DeleteAlidingAssistantHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteAlidingAssistantResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.DeleteAlidingAssistantShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.DeleteAlidingAssistantShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.assistant_id):
            body['AssistantId'] = request.assistant_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteAlidingAssistant',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/aiagent/deleteAlidingAssistant',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeleteAlidingAssistantResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_aliding_assistant(
        self,
        request: aliding_20230426_models.DeleteAlidingAssistantRequest,
    ) -> aliding_20230426_models.DeleteAlidingAssistantResponse:
        """
        @param request: DeleteAlidingAssistantRequest
        @return: DeleteAlidingAssistantResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeleteAlidingAssistantHeaders()
        return self.delete_aliding_assistant_with_options(request, headers, runtime)

    async def delete_aliding_assistant_async(
        self,
        request: aliding_20230426_models.DeleteAlidingAssistantRequest,
    ) -> aliding_20230426_models.DeleteAlidingAssistantResponse:
        """
        @param request: DeleteAlidingAssistantRequest
        @return: DeleteAlidingAssistantResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeleteAlidingAssistantHeaders()
        return await self.delete_aliding_assistant_with_options_async(request, headers, runtime)

    def delete_columns_with_options(
        self,
        tmp_req: aliding_20230426_models.DeleteColumnsRequest,
        tmp_header: aliding_20230426_models.DeleteColumnsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeleteColumnsResponse:
        """
        @summary 删除指定列
        
        @param tmp_req: DeleteColumnsRequest
        @param tmp_header: DeleteColumnsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteColumnsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.DeleteColumnsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.DeleteColumnsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.column):
            body['Column'] = request.column
        if not UtilClient.is_unset(request.column_count):
            body['ColumnCount'] = request.column_count
        if not UtilClient.is_unset(request.sheet_id):
            body['SheetId'] = request.sheet_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workbook_id):
            body['WorkbookId'] = request.workbook_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteColumns',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/deleteColumns',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeleteColumnsResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_columns_with_options_async(
        self,
        tmp_req: aliding_20230426_models.DeleteColumnsRequest,
        tmp_header: aliding_20230426_models.DeleteColumnsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeleteColumnsResponse:
        """
        @summary 删除指定列
        
        @param tmp_req: DeleteColumnsRequest
        @param tmp_header: DeleteColumnsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteColumnsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.DeleteColumnsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.DeleteColumnsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.column):
            body['Column'] = request.column
        if not UtilClient.is_unset(request.column_count):
            body['ColumnCount'] = request.column_count
        if not UtilClient.is_unset(request.sheet_id):
            body['SheetId'] = request.sheet_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workbook_id):
            body['WorkbookId'] = request.workbook_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteColumns',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/deleteColumns',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeleteColumnsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_columns(
        self,
        request: aliding_20230426_models.DeleteColumnsRequest,
    ) -> aliding_20230426_models.DeleteColumnsResponse:
        """
        @summary 删除指定列
        
        @param request: DeleteColumnsRequest
        @return: DeleteColumnsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeleteColumnsHeaders()
        return self.delete_columns_with_options(request, headers, runtime)

    async def delete_columns_async(
        self,
        request: aliding_20230426_models.DeleteColumnsRequest,
    ) -> aliding_20230426_models.DeleteColumnsResponse:
        """
        @summary 删除指定列
        
        @param request: DeleteColumnsRequest
        @return: DeleteColumnsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeleteColumnsHeaders()
        return await self.delete_columns_with_options_async(request, headers, runtime)

    def delete_dentry_with_options(
        self,
        tmp_req: aliding_20230426_models.DeleteDentryRequest,
        tmp_header: aliding_20230426_models.DeleteDentryHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeleteDentryResponse:
        """
        @summary 删除文件或文件夹
        
        @param tmp_req: DeleteDentryRequest
        @param tmp_header: DeleteDentryHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteDentryResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.DeleteDentryShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.DeleteDentryShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.dentry_id):
            body['DentryId'] = request.dentry_id
        if not UtilClient.is_unset(request.space_id):
            body['SpaceId'] = request.space_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.to_recycle_bin):
            body['ToRecycleBin'] = request.to_recycle_bin
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteDentry',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/deleteDentry',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeleteDentryResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_dentry_with_options_async(
        self,
        tmp_req: aliding_20230426_models.DeleteDentryRequest,
        tmp_header: aliding_20230426_models.DeleteDentryHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeleteDentryResponse:
        """
        @summary 删除文件或文件夹
        
        @param tmp_req: DeleteDentryRequest
        @param tmp_header: DeleteDentryHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteDentryResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.DeleteDentryShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.DeleteDentryShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.dentry_id):
            body['DentryId'] = request.dentry_id
        if not UtilClient.is_unset(request.space_id):
            body['SpaceId'] = request.space_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.to_recycle_bin):
            body['ToRecycleBin'] = request.to_recycle_bin
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteDentry',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/deleteDentry',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeleteDentryResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_dentry(
        self,
        request: aliding_20230426_models.DeleteDentryRequest,
    ) -> aliding_20230426_models.DeleteDentryResponse:
        """
        @summary 删除文件或文件夹
        
        @param request: DeleteDentryRequest
        @return: DeleteDentryResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeleteDentryHeaders()
        return self.delete_dentry_with_options(request, headers, runtime)

    async def delete_dentry_async(
        self,
        request: aliding_20230426_models.DeleteDentryRequest,
    ) -> aliding_20230426_models.DeleteDentryResponse:
        """
        @summary 删除文件或文件夹
        
        @param request: DeleteDentryRequest
        @return: DeleteDentryResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeleteDentryHeaders()
        return await self.delete_dentry_with_options_async(request, headers, runtime)

    def delete_drive_space_with_options(
        self,
        tmp_req: aliding_20230426_models.DeleteDriveSpaceRequest,
        tmp_header: aliding_20230426_models.DeleteDriveSpaceHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeleteDriveSpaceResponse:
        """
        @summary 删除钉盘空间
        
        @param tmp_req: DeleteDriveSpaceRequest
        @param tmp_header: DeleteDriveSpaceHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteDriveSpaceResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.DeleteDriveSpaceShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.DeleteDriveSpaceShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.space_id):
            body['SpaceId'] = request.space_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteDriveSpace',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/deleteDriveSpace',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeleteDriveSpaceResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_drive_space_with_options_async(
        self,
        tmp_req: aliding_20230426_models.DeleteDriveSpaceRequest,
        tmp_header: aliding_20230426_models.DeleteDriveSpaceHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeleteDriveSpaceResponse:
        """
        @summary 删除钉盘空间
        
        @param tmp_req: DeleteDriveSpaceRequest
        @param tmp_header: DeleteDriveSpaceHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteDriveSpaceResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.DeleteDriveSpaceShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.DeleteDriveSpaceShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.space_id):
            body['SpaceId'] = request.space_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteDriveSpace',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/deleteDriveSpace',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeleteDriveSpaceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_drive_space(
        self,
        request: aliding_20230426_models.DeleteDriveSpaceRequest,
    ) -> aliding_20230426_models.DeleteDriveSpaceResponse:
        """
        @summary 删除钉盘空间
        
        @param request: DeleteDriveSpaceRequest
        @return: DeleteDriveSpaceResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeleteDriveSpaceHeaders()
        return self.delete_drive_space_with_options(request, headers, runtime)

    async def delete_drive_space_async(
        self,
        request: aliding_20230426_models.DeleteDriveSpaceRequest,
    ) -> aliding_20230426_models.DeleteDriveSpaceResponse:
        """
        @summary 删除钉盘空间
        
        @param request: DeleteDriveSpaceRequest
        @return: DeleteDriveSpaceResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeleteDriveSpaceHeaders()
        return await self.delete_drive_space_with_options_async(request, headers, runtime)

    def delete_event_with_options(
        self,
        request: aliding_20230426_models.DeleteEventRequest,
        tmp_header: aliding_20230426_models.DeleteEventHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeleteEventResponse:
        """
        @summary 删除日程
        
        @param request: DeleteEventRequest
        @param tmp_header: DeleteEventHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteEventResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.DeleteEventShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.calendar_id):
            body['CalendarId'] = request.calendar_id
        if not UtilClient.is_unset(request.event_id):
            body['EventId'] = request.event_id
        if not UtilClient.is_unset(request.push_notification):
            body['pushNotification'] = request.push_notification
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteEvent',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/deleteEvent',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeleteEventResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_event_with_options_async(
        self,
        request: aliding_20230426_models.DeleteEventRequest,
        tmp_header: aliding_20230426_models.DeleteEventHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeleteEventResponse:
        """
        @summary 删除日程
        
        @param request: DeleteEventRequest
        @param tmp_header: DeleteEventHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteEventResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.DeleteEventShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.calendar_id):
            body['CalendarId'] = request.calendar_id
        if not UtilClient.is_unset(request.event_id):
            body['EventId'] = request.event_id
        if not UtilClient.is_unset(request.push_notification):
            body['pushNotification'] = request.push_notification
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteEvent',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/deleteEvent',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeleteEventResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_event(
        self,
        request: aliding_20230426_models.DeleteEventRequest,
    ) -> aliding_20230426_models.DeleteEventResponse:
        """
        @summary 删除日程
        
        @param request: DeleteEventRequest
        @return: DeleteEventResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeleteEventHeaders()
        return self.delete_event_with_options(request, headers, runtime)

    async def delete_event_async(
        self,
        request: aliding_20230426_models.DeleteEventRequest,
    ) -> aliding_20230426_models.DeleteEventResponse:
        """
        @summary 删除日程
        
        @param request: DeleteEventRequest
        @return: DeleteEventResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeleteEventHeaders()
        return await self.delete_event_with_options_async(request, headers, runtime)

    def delete_form_data_with_options(
        self,
        request: aliding_20230426_models.DeleteFormDataRequest,
        tmp_header: aliding_20230426_models.DeleteFormDataHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeleteFormDataResponse:
        """
        @summary 删除表单数据
        
        @param request: DeleteFormDataRequest
        @param tmp_header: DeleteFormDataHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteFormDataResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.DeleteFormDataShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.form_instance_id):
            body['FormInstanceId'] = request.form_instance_id
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteFormData',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/deleteFormData',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeleteFormDataResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_form_data_with_options_async(
        self,
        request: aliding_20230426_models.DeleteFormDataRequest,
        tmp_header: aliding_20230426_models.DeleteFormDataHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeleteFormDataResponse:
        """
        @summary 删除表单数据
        
        @param request: DeleteFormDataRequest
        @param tmp_header: DeleteFormDataHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteFormDataResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.DeleteFormDataShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.form_instance_id):
            body['FormInstanceId'] = request.form_instance_id
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteFormData',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/deleteFormData',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeleteFormDataResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_form_data(
        self,
        request: aliding_20230426_models.DeleteFormDataRequest,
    ) -> aliding_20230426_models.DeleteFormDataResponse:
        """
        @summary 删除表单数据
        
        @param request: DeleteFormDataRequest
        @return: DeleteFormDataResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeleteFormDataHeaders()
        return self.delete_form_data_with_options(request, headers, runtime)

    async def delete_form_data_async(
        self,
        request: aliding_20230426_models.DeleteFormDataRequest,
    ) -> aliding_20230426_models.DeleteFormDataResponse:
        """
        @summary 删除表单数据
        
        @param request: DeleteFormDataRequest
        @return: DeleteFormDataResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeleteFormDataHeaders()
        return await self.delete_form_data_with_options_async(request, headers, runtime)

    def delete_instance_with_options(
        self,
        request: aliding_20230426_models.DeleteInstanceRequest,
        tmp_header: aliding_20230426_models.DeleteInstanceHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeleteInstanceResponse:
        """
        @param request: DeleteInstanceRequest
        @param tmp_header: DeleteInstanceHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteInstanceResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.DeleteInstanceShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.process_instance_id):
            body['ProcessInstanceId'] = request.process_instance_id
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteInstance',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/deleteInstance',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeleteInstanceResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_instance_with_options_async(
        self,
        request: aliding_20230426_models.DeleteInstanceRequest,
        tmp_header: aliding_20230426_models.DeleteInstanceHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeleteInstanceResponse:
        """
        @param request: DeleteInstanceRequest
        @param tmp_header: DeleteInstanceHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteInstanceResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.DeleteInstanceShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.process_instance_id):
            body['ProcessInstanceId'] = request.process_instance_id
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteInstance',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/deleteInstance',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeleteInstanceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_instance(
        self,
        request: aliding_20230426_models.DeleteInstanceRequest,
    ) -> aliding_20230426_models.DeleteInstanceResponse:
        """
        @param request: DeleteInstanceRequest
        @return: DeleteInstanceResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeleteInstanceHeaders()
        return self.delete_instance_with_options(request, headers, runtime)

    async def delete_instance_async(
        self,
        request: aliding_20230426_models.DeleteInstanceRequest,
    ) -> aliding_20230426_models.DeleteInstanceResponse:
        """
        @param request: DeleteInstanceRequest
        @return: DeleteInstanceResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeleteInstanceHeaders()
        return await self.delete_instance_with_options_async(request, headers, runtime)

    def delete_live_with_options(
        self,
        tmp_req: aliding_20230426_models.DeleteLiveRequest,
        tmp_header: aliding_20230426_models.DeleteLiveHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeleteLiveResponse:
        """
        @summary 删除直播
        
        @param tmp_req: DeleteLiveRequest
        @param tmp_header: DeleteLiveHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteLiveResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.DeleteLiveShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.DeleteLiveShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.live_id):
            body['LiveId'] = request.live_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteLive',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/deleteLive',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeleteLiveResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_live_with_options_async(
        self,
        tmp_req: aliding_20230426_models.DeleteLiveRequest,
        tmp_header: aliding_20230426_models.DeleteLiveHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeleteLiveResponse:
        """
        @summary 删除直播
        
        @param tmp_req: DeleteLiveRequest
        @param tmp_header: DeleteLiveHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteLiveResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.DeleteLiveShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.DeleteLiveShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.live_id):
            body['LiveId'] = request.live_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteLive',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/deleteLive',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeleteLiveResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_live(
        self,
        request: aliding_20230426_models.DeleteLiveRequest,
    ) -> aliding_20230426_models.DeleteLiveResponse:
        """
        @summary 删除直播
        
        @param request: DeleteLiveRequest
        @return: DeleteLiveResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeleteLiveHeaders()
        return self.delete_live_with_options(request, headers, runtime)

    async def delete_live_async(
        self,
        request: aliding_20230426_models.DeleteLiveRequest,
    ) -> aliding_20230426_models.DeleteLiveResponse:
        """
        @summary 删除直播
        
        @param request: DeleteLiveRequest
        @return: DeleteLiveResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeleteLiveHeaders()
        return await self.delete_live_with_options_async(request, headers, runtime)

    def delete_meeting_room_with_options(
        self,
        tmp_req: aliding_20230426_models.DeleteMeetingRoomRequest,
        tmp_header: aliding_20230426_models.DeleteMeetingRoomHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeleteMeetingRoomResponse:
        """
        @summary 删除会议室
        
        @param tmp_req: DeleteMeetingRoomRequest
        @param tmp_header: DeleteMeetingRoomHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteMeetingRoomResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.DeleteMeetingRoomShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.DeleteMeetingRoomShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.room_id):
            body['RoomId'] = request.room_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteMeetingRoom',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/deleteMeetingRoom',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeleteMeetingRoomResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_meeting_room_with_options_async(
        self,
        tmp_req: aliding_20230426_models.DeleteMeetingRoomRequest,
        tmp_header: aliding_20230426_models.DeleteMeetingRoomHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeleteMeetingRoomResponse:
        """
        @summary 删除会议室
        
        @param tmp_req: DeleteMeetingRoomRequest
        @param tmp_header: DeleteMeetingRoomHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteMeetingRoomResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.DeleteMeetingRoomShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.DeleteMeetingRoomShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.room_id):
            body['RoomId'] = request.room_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteMeetingRoom',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/deleteMeetingRoom',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeleteMeetingRoomResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_meeting_room(
        self,
        request: aliding_20230426_models.DeleteMeetingRoomRequest,
    ) -> aliding_20230426_models.DeleteMeetingRoomResponse:
        """
        @summary 删除会议室
        
        @param request: DeleteMeetingRoomRequest
        @return: DeleteMeetingRoomResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeleteMeetingRoomHeaders()
        return self.delete_meeting_room_with_options(request, headers, runtime)

    async def delete_meeting_room_async(
        self,
        request: aliding_20230426_models.DeleteMeetingRoomRequest,
    ) -> aliding_20230426_models.DeleteMeetingRoomResponse:
        """
        @summary 删除会议室
        
        @param request: DeleteMeetingRoomRequest
        @return: DeleteMeetingRoomResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeleteMeetingRoomHeaders()
        return await self.delete_meeting_room_with_options_async(request, headers, runtime)

    def delete_meeting_room_group_with_options(
        self,
        tmp_req: aliding_20230426_models.DeleteMeetingRoomGroupRequest,
        tmp_header: aliding_20230426_models.DeleteMeetingRoomGroupHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeleteMeetingRoomGroupResponse:
        """
        @summary 删除会议室分组
        
        @param tmp_req: DeleteMeetingRoomGroupRequest
        @param tmp_header: DeleteMeetingRoomGroupHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteMeetingRoomGroupResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.DeleteMeetingRoomGroupShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.DeleteMeetingRoomGroupShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.group_id):
            body['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteMeetingRoomGroup',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/deleteMeetingRoomGroup',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeleteMeetingRoomGroupResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_meeting_room_group_with_options_async(
        self,
        tmp_req: aliding_20230426_models.DeleteMeetingRoomGroupRequest,
        tmp_header: aliding_20230426_models.DeleteMeetingRoomGroupHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeleteMeetingRoomGroupResponse:
        """
        @summary 删除会议室分组
        
        @param tmp_req: DeleteMeetingRoomGroupRequest
        @param tmp_header: DeleteMeetingRoomGroupHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteMeetingRoomGroupResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.DeleteMeetingRoomGroupShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.DeleteMeetingRoomGroupShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.group_id):
            body['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteMeetingRoomGroup',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/deleteMeetingRoomGroup',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeleteMeetingRoomGroupResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_meeting_room_group(
        self,
        request: aliding_20230426_models.DeleteMeetingRoomGroupRequest,
    ) -> aliding_20230426_models.DeleteMeetingRoomGroupResponse:
        """
        @summary 删除会议室分组
        
        @param request: DeleteMeetingRoomGroupRequest
        @return: DeleteMeetingRoomGroupResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeleteMeetingRoomGroupHeaders()
        return self.delete_meeting_room_group_with_options(request, headers, runtime)

    async def delete_meeting_room_group_async(
        self,
        request: aliding_20230426_models.DeleteMeetingRoomGroupRequest,
    ) -> aliding_20230426_models.DeleteMeetingRoomGroupResponse:
        """
        @summary 删除会议室分组
        
        @param request: DeleteMeetingRoomGroupRequest
        @return: DeleteMeetingRoomGroupResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeleteMeetingRoomGroupHeaders()
        return await self.delete_meeting_room_group_with_options_async(request, headers, runtime)

    def delete_multi_dim_table_field_with_options(
        self,
        tmp_req: aliding_20230426_models.DeleteMultiDimTableFieldRequest,
        tmp_header: aliding_20230426_models.DeleteMultiDimTableFieldHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeleteMultiDimTableFieldResponse:
        """
        @summary 删除字段
        
        @param tmp_req: DeleteMultiDimTableFieldRequest
        @param tmp_header: DeleteMultiDimTableFieldHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteMultiDimTableFieldResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.DeleteMultiDimTableFieldShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.DeleteMultiDimTableFieldShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.base_id):
            body['BaseId'] = request.base_id
        if not UtilClient.is_unset(request.field_id_or_name):
            body['FieldIdOrName'] = request.field_id_or_name
        if not UtilClient.is_unset(request.sheet_id_or_name):
            body['SheetIdOrName'] = request.sheet_id_or_name
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteMultiDimTableField',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/table/deleteMultiDimTableField',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeleteMultiDimTableFieldResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_multi_dim_table_field_with_options_async(
        self,
        tmp_req: aliding_20230426_models.DeleteMultiDimTableFieldRequest,
        tmp_header: aliding_20230426_models.DeleteMultiDimTableFieldHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeleteMultiDimTableFieldResponse:
        """
        @summary 删除字段
        
        @param tmp_req: DeleteMultiDimTableFieldRequest
        @param tmp_header: DeleteMultiDimTableFieldHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteMultiDimTableFieldResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.DeleteMultiDimTableFieldShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.DeleteMultiDimTableFieldShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.base_id):
            body['BaseId'] = request.base_id
        if not UtilClient.is_unset(request.field_id_or_name):
            body['FieldIdOrName'] = request.field_id_or_name
        if not UtilClient.is_unset(request.sheet_id_or_name):
            body['SheetIdOrName'] = request.sheet_id_or_name
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteMultiDimTableField',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/table/deleteMultiDimTableField',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeleteMultiDimTableFieldResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_multi_dim_table_field(
        self,
        request: aliding_20230426_models.DeleteMultiDimTableFieldRequest,
    ) -> aliding_20230426_models.DeleteMultiDimTableFieldResponse:
        """
        @summary 删除字段
        
        @param request: DeleteMultiDimTableFieldRequest
        @return: DeleteMultiDimTableFieldResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeleteMultiDimTableFieldHeaders()
        return self.delete_multi_dim_table_field_with_options(request, headers, runtime)

    async def delete_multi_dim_table_field_async(
        self,
        request: aliding_20230426_models.DeleteMultiDimTableFieldRequest,
    ) -> aliding_20230426_models.DeleteMultiDimTableFieldResponse:
        """
        @summary 删除字段
        
        @param request: DeleteMultiDimTableFieldRequest
        @return: DeleteMultiDimTableFieldResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeleteMultiDimTableFieldHeaders()
        return await self.delete_multi_dim_table_field_with_options_async(request, headers, runtime)

    def delete_multi_dim_table_records_with_options(
        self,
        tmp_req: aliding_20230426_models.DeleteMultiDimTableRecordsRequest,
        tmp_header: aliding_20230426_models.DeleteMultiDimTableRecordsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeleteMultiDimTableRecordsResponse:
        """
        @summary 删除多行记录
        
        @param tmp_req: DeleteMultiDimTableRecordsRequest
        @param tmp_header: DeleteMultiDimTableRecordsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteMultiDimTableRecordsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.DeleteMultiDimTableRecordsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.DeleteMultiDimTableRecordsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.record_ids):
            request.record_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.record_ids, 'RecordIds', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.base_id):
            body['BaseId'] = request.base_id
        if not UtilClient.is_unset(request.record_ids_shrink):
            body['RecordIds'] = request.record_ids_shrink
        if not UtilClient.is_unset(request.sheet_id_or_name):
            body['SheetIdOrName'] = request.sheet_id_or_name
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteMultiDimTableRecords',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/table/deleteMultiDimTableRecords',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeleteMultiDimTableRecordsResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_multi_dim_table_records_with_options_async(
        self,
        tmp_req: aliding_20230426_models.DeleteMultiDimTableRecordsRequest,
        tmp_header: aliding_20230426_models.DeleteMultiDimTableRecordsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeleteMultiDimTableRecordsResponse:
        """
        @summary 删除多行记录
        
        @param tmp_req: DeleteMultiDimTableRecordsRequest
        @param tmp_header: DeleteMultiDimTableRecordsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteMultiDimTableRecordsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.DeleteMultiDimTableRecordsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.DeleteMultiDimTableRecordsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.record_ids):
            request.record_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.record_ids, 'RecordIds', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.base_id):
            body['BaseId'] = request.base_id
        if not UtilClient.is_unset(request.record_ids_shrink):
            body['RecordIds'] = request.record_ids_shrink
        if not UtilClient.is_unset(request.sheet_id_or_name):
            body['SheetIdOrName'] = request.sheet_id_or_name
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteMultiDimTableRecords',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/table/deleteMultiDimTableRecords',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeleteMultiDimTableRecordsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_multi_dim_table_records(
        self,
        request: aliding_20230426_models.DeleteMultiDimTableRecordsRequest,
    ) -> aliding_20230426_models.DeleteMultiDimTableRecordsResponse:
        """
        @summary 删除多行记录
        
        @param request: DeleteMultiDimTableRecordsRequest
        @return: DeleteMultiDimTableRecordsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeleteMultiDimTableRecordsHeaders()
        return self.delete_multi_dim_table_records_with_options(request, headers, runtime)

    async def delete_multi_dim_table_records_async(
        self,
        request: aliding_20230426_models.DeleteMultiDimTableRecordsRequest,
    ) -> aliding_20230426_models.DeleteMultiDimTableRecordsResponse:
        """
        @summary 删除多行记录
        
        @param request: DeleteMultiDimTableRecordsRequest
        @return: DeleteMultiDimTableRecordsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeleteMultiDimTableRecordsHeaders()
        return await self.delete_multi_dim_table_records_with_options_async(request, headers, runtime)

    def delete_permission_with_options(
        self,
        tmp_req: aliding_20230426_models.DeletePermissionRequest,
        tmp_header: aliding_20230426_models.DeletePermissionHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeletePermissionResponse:
        """
        @summary 删除文件权限
        
        @param tmp_req: DeletePermissionRequest
        @param tmp_header: DeletePermissionHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeletePermissionResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.DeletePermissionShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.DeletePermissionShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.members):
            request.members_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.members, 'Members', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.dentry_uuid):
            body['DentryUuid'] = request.dentry_uuid
        if not UtilClient.is_unset(request.members_shrink):
            body['Members'] = request.members_shrink
        if not UtilClient.is_unset(request.role_id):
            body['RoleId'] = request.role_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeletePermission',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/deletePermission',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeletePermissionResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_permission_with_options_async(
        self,
        tmp_req: aliding_20230426_models.DeletePermissionRequest,
        tmp_header: aliding_20230426_models.DeletePermissionHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeletePermissionResponse:
        """
        @summary 删除文件权限
        
        @param tmp_req: DeletePermissionRequest
        @param tmp_header: DeletePermissionHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeletePermissionResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.DeletePermissionShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.DeletePermissionShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.members):
            request.members_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.members, 'Members', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.dentry_uuid):
            body['DentryUuid'] = request.dentry_uuid
        if not UtilClient.is_unset(request.members_shrink):
            body['Members'] = request.members_shrink
        if not UtilClient.is_unset(request.role_id):
            body['RoleId'] = request.role_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeletePermission',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/deletePermission',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeletePermissionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_permission(
        self,
        request: aliding_20230426_models.DeletePermissionRequest,
    ) -> aliding_20230426_models.DeletePermissionResponse:
        """
        @summary 删除文件权限
        
        @param request: DeletePermissionRequest
        @return: DeletePermissionResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeletePermissionHeaders()
        return self.delete_permission_with_options(request, headers, runtime)

    async def delete_permission_async(
        self,
        request: aliding_20230426_models.DeletePermissionRequest,
    ) -> aliding_20230426_models.DeletePermissionResponse:
        """
        @summary 删除文件权限
        
        @param request: DeletePermissionRequest
        @return: DeletePermissionResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeletePermissionHeaders()
        return await self.delete_permission_with_options_async(request, headers, runtime)

    def delete_rows_with_options(
        self,
        tmp_req: aliding_20230426_models.DeleteRowsRequest,
        tmp_header: aliding_20230426_models.DeleteRowsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeleteRowsResponse:
        """
        @summary 删除指定行
        
        @param tmp_req: DeleteRowsRequest
        @param tmp_header: DeleteRowsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteRowsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.DeleteRowsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.DeleteRowsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.row):
            body['Row'] = request.row
        if not UtilClient.is_unset(request.row_count):
            body['RowCount'] = request.row_count
        if not UtilClient.is_unset(request.sheet_id):
            body['SheetId'] = request.sheet_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workbook_id):
            body['WorkbookId'] = request.workbook_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteRows',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/deleteRows',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeleteRowsResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_rows_with_options_async(
        self,
        tmp_req: aliding_20230426_models.DeleteRowsRequest,
        tmp_header: aliding_20230426_models.DeleteRowsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeleteRowsResponse:
        """
        @summary 删除指定行
        
        @param tmp_req: DeleteRowsRequest
        @param tmp_header: DeleteRowsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteRowsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.DeleteRowsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.DeleteRowsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.row):
            body['Row'] = request.row
        if not UtilClient.is_unset(request.row_count):
            body['RowCount'] = request.row_count
        if not UtilClient.is_unset(request.sheet_id):
            body['SheetId'] = request.sheet_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workbook_id):
            body['WorkbookId'] = request.workbook_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteRows',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/deleteRows',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeleteRowsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_rows(
        self,
        request: aliding_20230426_models.DeleteRowsRequest,
    ) -> aliding_20230426_models.DeleteRowsResponse:
        """
        @summary 删除指定行
        
        @param request: DeleteRowsRequest
        @return: DeleteRowsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeleteRowsHeaders()
        return self.delete_rows_with_options(request, headers, runtime)

    async def delete_rows_async(
        self,
        request: aliding_20230426_models.DeleteRowsRequest,
    ) -> aliding_20230426_models.DeleteRowsResponse:
        """
        @summary 删除指定行
        
        @param request: DeleteRowsRequest
        @return: DeleteRowsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeleteRowsHeaders()
        return await self.delete_rows_with_options_async(request, headers, runtime)

    def delete_scenegroup_member_with_options(
        self,
        request: aliding_20230426_models.DeleteScenegroupMemberRequest,
        tmp_header: aliding_20230426_models.DeleteScenegroupMemberHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeleteScenegroupMemberResponse:
        """
        @summary 删除群成员
        
        @param request: DeleteScenegroupMemberRequest
        @param tmp_header: DeleteScenegroupMemberHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteScenegroupMemberResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.DeleteScenegroupMemberShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.open_conversation_id):
            body['OpenConversationId'] = request.open_conversation_id
        if not UtilClient.is_unset(request.user_ids):
            body['UserIds'] = request.user_ids
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteScenegroupMember',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/im/deleteScenegroupMember',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeleteScenegroupMemberResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_scenegroup_member_with_options_async(
        self,
        request: aliding_20230426_models.DeleteScenegroupMemberRequest,
        tmp_header: aliding_20230426_models.DeleteScenegroupMemberHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeleteScenegroupMemberResponse:
        """
        @summary 删除群成员
        
        @param request: DeleteScenegroupMemberRequest
        @param tmp_header: DeleteScenegroupMemberHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteScenegroupMemberResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.DeleteScenegroupMemberShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.open_conversation_id):
            body['OpenConversationId'] = request.open_conversation_id
        if not UtilClient.is_unset(request.user_ids):
            body['UserIds'] = request.user_ids
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteScenegroupMember',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/im/deleteScenegroupMember',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeleteScenegroupMemberResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_scenegroup_member(
        self,
        request: aliding_20230426_models.DeleteScenegroupMemberRequest,
    ) -> aliding_20230426_models.DeleteScenegroupMemberResponse:
        """
        @summary 删除群成员
        
        @param request: DeleteScenegroupMemberRequest
        @return: DeleteScenegroupMemberResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeleteScenegroupMemberHeaders()
        return self.delete_scenegroup_member_with_options(request, headers, runtime)

    async def delete_scenegroup_member_async(
        self,
        request: aliding_20230426_models.DeleteScenegroupMemberRequest,
    ) -> aliding_20230426_models.DeleteScenegroupMemberResponse:
        """
        @summary 删除群成员
        
        @param request: DeleteScenegroupMemberRequest
        @return: DeleteScenegroupMemberResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeleteScenegroupMemberHeaders()
        return await self.delete_scenegroup_member_with_options_async(request, headers, runtime)

    def delete_sheet_with_options(
        self,
        tmp_req: aliding_20230426_models.DeleteSheetRequest,
        tmp_header: aliding_20230426_models.DeleteSheetHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeleteSheetResponse:
        """
        @summary 删除一个工作表
        
        @param tmp_req: DeleteSheetRequest
        @param tmp_header: DeleteSheetHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteSheetResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.DeleteSheetShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.DeleteSheetShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.sheet_id):
            body['SheetId'] = request.sheet_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workbook_id):
            body['WorkbookId'] = request.workbook_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteSheet',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/deleteSheet',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeleteSheetResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_sheet_with_options_async(
        self,
        tmp_req: aliding_20230426_models.DeleteSheetRequest,
        tmp_header: aliding_20230426_models.DeleteSheetHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeleteSheetResponse:
        """
        @summary 删除一个工作表
        
        @param tmp_req: DeleteSheetRequest
        @param tmp_header: DeleteSheetHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteSheetResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.DeleteSheetShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.DeleteSheetShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.sheet_id):
            body['SheetId'] = request.sheet_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workbook_id):
            body['WorkbookId'] = request.workbook_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteSheet',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/deleteSheet',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeleteSheetResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_sheet(
        self,
        request: aliding_20230426_models.DeleteSheetRequest,
    ) -> aliding_20230426_models.DeleteSheetResponse:
        """
        @summary 删除一个工作表
        
        @param request: DeleteSheetRequest
        @return: DeleteSheetResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeleteSheetHeaders()
        return self.delete_sheet_with_options(request, headers, runtime)

    async def delete_sheet_async(
        self,
        request: aliding_20230426_models.DeleteSheetRequest,
    ) -> aliding_20230426_models.DeleteSheetResponse:
        """
        @summary 删除一个工作表
        
        @param request: DeleteSheetRequest
        @return: DeleteSheetResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeleteSheetHeaders()
        return await self.delete_sheet_with_options_async(request, headers, runtime)

    def delete_subscribed_calendar_with_options(
        self,
        request: aliding_20230426_models.DeleteSubscribedCalendarRequest,
        tmp_header: aliding_20230426_models.DeleteSubscribedCalendarHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeleteSubscribedCalendarResponse:
        """
        @summary 删除订阅日历
        
        @param request: DeleteSubscribedCalendarRequest
        @param tmp_header: DeleteSubscribedCalendarHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteSubscribedCalendarResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.DeleteSubscribedCalendarShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.calendar_id):
            body['CalendarId'] = request.calendar_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteSubscribedCalendar',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/deleteSubscribedCalendar',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeleteSubscribedCalendarResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_subscribed_calendar_with_options_async(
        self,
        request: aliding_20230426_models.DeleteSubscribedCalendarRequest,
        tmp_header: aliding_20230426_models.DeleteSubscribedCalendarHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeleteSubscribedCalendarResponse:
        """
        @summary 删除订阅日历
        
        @param request: DeleteSubscribedCalendarRequest
        @param tmp_header: DeleteSubscribedCalendarHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteSubscribedCalendarResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.DeleteSubscribedCalendarShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.calendar_id):
            body['CalendarId'] = request.calendar_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteSubscribedCalendar',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/deleteSubscribedCalendar',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeleteSubscribedCalendarResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_subscribed_calendar(
        self,
        request: aliding_20230426_models.DeleteSubscribedCalendarRequest,
    ) -> aliding_20230426_models.DeleteSubscribedCalendarResponse:
        """
        @summary 删除订阅日历
        
        @param request: DeleteSubscribedCalendarRequest
        @return: DeleteSubscribedCalendarResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeleteSubscribedCalendarHeaders()
        return self.delete_subscribed_calendar_with_options(request, headers, runtime)

    async def delete_subscribed_calendar_async(
        self,
        request: aliding_20230426_models.DeleteSubscribedCalendarRequest,
    ) -> aliding_20230426_models.DeleteSubscribedCalendarResponse:
        """
        @summary 删除订阅日历
        
        @param request: DeleteSubscribedCalendarRequest
        @return: DeleteSubscribedCalendarResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeleteSubscribedCalendarHeaders()
        return await self.delete_subscribed_calendar_with_options_async(request, headers, runtime)

    def delete_todo_task_with_options(
        self,
        tmp_req: aliding_20230426_models.DeleteTodoTaskRequest,
        tmp_header: aliding_20230426_models.DeleteTodoTaskHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeleteTodoTaskResponse:
        """
        @summary 删除代办
        
        @param tmp_req: DeleteTodoTaskRequest
        @param tmp_header: DeleteTodoTaskHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteTodoTaskResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.DeleteTodoTaskShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.DeleteTodoTaskShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.operator_id):
            body['operatorId'] = request.operator_id
        if not UtilClient.is_unset(request.task_id):
            body['taskId'] = request.task_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteTodoTask',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/task/deleteTodoTask',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeleteTodoTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_todo_task_with_options_async(
        self,
        tmp_req: aliding_20230426_models.DeleteTodoTaskRequest,
        tmp_header: aliding_20230426_models.DeleteTodoTaskHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeleteTodoTaskResponse:
        """
        @summary 删除代办
        
        @param tmp_req: DeleteTodoTaskRequest
        @param tmp_header: DeleteTodoTaskHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteTodoTaskResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.DeleteTodoTaskShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.DeleteTodoTaskShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.operator_id):
            body['operatorId'] = request.operator_id
        if not UtilClient.is_unset(request.task_id):
            body['taskId'] = request.task_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteTodoTask',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/task/deleteTodoTask',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeleteTodoTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_todo_task(
        self,
        request: aliding_20230426_models.DeleteTodoTaskRequest,
    ) -> aliding_20230426_models.DeleteTodoTaskResponse:
        """
        @summary 删除代办
        
        @param request: DeleteTodoTaskRequest
        @return: DeleteTodoTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeleteTodoTaskHeaders()
        return self.delete_todo_task_with_options(request, headers, runtime)

    async def delete_todo_task_async(
        self,
        request: aliding_20230426_models.DeleteTodoTaskRequest,
    ) -> aliding_20230426_models.DeleteTodoTaskResponse:
        """
        @summary 删除代办
        
        @param request: DeleteTodoTaskRequest
        @return: DeleteTodoTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeleteTodoTaskHeaders()
        return await self.delete_todo_task_with_options_async(request, headers, runtime)

    def delete_workspace_doc_members_with_options(
        self,
        tmp_req: aliding_20230426_models.DeleteWorkspaceDocMembersRequest,
        tmp_header: aliding_20230426_models.DeleteWorkspaceDocMembersHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeleteWorkspaceDocMembersResponse:
        """
        @summary 删除知识库文档成员
        
        @param tmp_req: DeleteWorkspaceDocMembersRequest
        @param tmp_header: DeleteWorkspaceDocMembersHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteWorkspaceDocMembersResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.DeleteWorkspaceDocMembersShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.DeleteWorkspaceDocMembersShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.members):
            request.members_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.members, 'Members', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.members_shrink):
            body['Members'] = request.members_shrink
        if not UtilClient.is_unset(request.node_id):
            body['NodeId'] = request.node_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workspace_id):
            body['WorkspaceId'] = request.workspace_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteWorkspaceDocMembers',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/deleteWorkspaceDocMembers',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeleteWorkspaceDocMembersResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_workspace_doc_members_with_options_async(
        self,
        tmp_req: aliding_20230426_models.DeleteWorkspaceDocMembersRequest,
        tmp_header: aliding_20230426_models.DeleteWorkspaceDocMembersHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeleteWorkspaceDocMembersResponse:
        """
        @summary 删除知识库文档成员
        
        @param tmp_req: DeleteWorkspaceDocMembersRequest
        @param tmp_header: DeleteWorkspaceDocMembersHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteWorkspaceDocMembersResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.DeleteWorkspaceDocMembersShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.DeleteWorkspaceDocMembersShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.members):
            request.members_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.members, 'Members', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.members_shrink):
            body['Members'] = request.members_shrink
        if not UtilClient.is_unset(request.node_id):
            body['NodeId'] = request.node_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workspace_id):
            body['WorkspaceId'] = request.workspace_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteWorkspaceDocMembers',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/deleteWorkspaceDocMembers',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeleteWorkspaceDocMembersResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_workspace_doc_members(
        self,
        request: aliding_20230426_models.DeleteWorkspaceDocMembersRequest,
    ) -> aliding_20230426_models.DeleteWorkspaceDocMembersResponse:
        """
        @summary 删除知识库文档成员
        
        @param request: DeleteWorkspaceDocMembersRequest
        @return: DeleteWorkspaceDocMembersResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeleteWorkspaceDocMembersHeaders()
        return self.delete_workspace_doc_members_with_options(request, headers, runtime)

    async def delete_workspace_doc_members_async(
        self,
        request: aliding_20230426_models.DeleteWorkspaceDocMembersRequest,
    ) -> aliding_20230426_models.DeleteWorkspaceDocMembersResponse:
        """
        @summary 删除知识库文档成员
        
        @param request: DeleteWorkspaceDocMembersRequest
        @return: DeleteWorkspaceDocMembersResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeleteWorkspaceDocMembersHeaders()
        return await self.delete_workspace_doc_members_with_options_async(request, headers, runtime)

    def delete_workspace_members_with_options(
        self,
        tmp_req: aliding_20230426_models.DeleteWorkspaceMembersRequest,
        tmp_header: aliding_20230426_models.DeleteWorkspaceMembersHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeleteWorkspaceMembersResponse:
        """
        @summary 删除知识库成员
        
        @param tmp_req: DeleteWorkspaceMembersRequest
        @param tmp_header: DeleteWorkspaceMembersHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteWorkspaceMembersResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.DeleteWorkspaceMembersShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.DeleteWorkspaceMembersShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.members):
            request.members_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.members, 'Members', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.members_shrink):
            body['Members'] = request.members_shrink
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workspace_id):
            body['WorkspaceId'] = request.workspace_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteWorkspaceMembers',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/deleteWorkspaceMembers',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeleteWorkspaceMembersResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_workspace_members_with_options_async(
        self,
        tmp_req: aliding_20230426_models.DeleteWorkspaceMembersRequest,
        tmp_header: aliding_20230426_models.DeleteWorkspaceMembersHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DeleteWorkspaceMembersResponse:
        """
        @summary 删除知识库成员
        
        @param tmp_req: DeleteWorkspaceMembersRequest
        @param tmp_header: DeleteWorkspaceMembersHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteWorkspaceMembersResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.DeleteWorkspaceMembersShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.DeleteWorkspaceMembersShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.members):
            request.members_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.members, 'Members', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.members_shrink):
            body['Members'] = request.members_shrink
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workspace_id):
            body['WorkspaceId'] = request.workspace_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteWorkspaceMembers',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/deleteWorkspaceMembers',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DeleteWorkspaceMembersResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_workspace_members(
        self,
        request: aliding_20230426_models.DeleteWorkspaceMembersRequest,
    ) -> aliding_20230426_models.DeleteWorkspaceMembersResponse:
        """
        @summary 删除知识库成员
        
        @param request: DeleteWorkspaceMembersRequest
        @return: DeleteWorkspaceMembersResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeleteWorkspaceMembersHeaders()
        return self.delete_workspace_members_with_options(request, headers, runtime)

    async def delete_workspace_members_async(
        self,
        request: aliding_20230426_models.DeleteWorkspaceMembersRequest,
    ) -> aliding_20230426_models.DeleteWorkspaceMembersResponse:
        """
        @summary 删除知识库成员
        
        @param request: DeleteWorkspaceMembersRequest
        @return: DeleteWorkspaceMembersResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DeleteWorkspaceMembersHeaders()
        return await self.delete_workspace_members_with_options_async(request, headers, runtime)

    def doc_blocks_query_with_options(
        self,
        tmp_req: aliding_20230426_models.DocBlocksQueryRequest,
        tmp_header: aliding_20230426_models.DocBlocksQueryHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DocBlocksQueryResponse:
        """
        @summary 查询块元素
        
        @param tmp_req: DocBlocksQueryRequest
        @param tmp_header: DocBlocksQueryHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DocBlocksQueryResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.DocBlocksQueryShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.DocBlocksQueryShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.block_type):
            body['BlockType'] = request.block_type
        if not UtilClient.is_unset(request.doc_key):
            body['DocKey'] = request.doc_key
        if not UtilClient.is_unset(request.end_index):
            body['EndIndex'] = request.end_index
        if not UtilClient.is_unset(request.start_index):
            body['StartIndex'] = request.start_index
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DocBlocksQuery',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/docBlocksQuery',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DocBlocksQueryResponse(),
            self.call_api(params, req, runtime)
        )

    async def doc_blocks_query_with_options_async(
        self,
        tmp_req: aliding_20230426_models.DocBlocksQueryRequest,
        tmp_header: aliding_20230426_models.DocBlocksQueryHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DocBlocksQueryResponse:
        """
        @summary 查询块元素
        
        @param tmp_req: DocBlocksQueryRequest
        @param tmp_header: DocBlocksQueryHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DocBlocksQueryResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.DocBlocksQueryShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.DocBlocksQueryShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.block_type):
            body['BlockType'] = request.block_type
        if not UtilClient.is_unset(request.doc_key):
            body['DocKey'] = request.doc_key
        if not UtilClient.is_unset(request.end_index):
            body['EndIndex'] = request.end_index
        if not UtilClient.is_unset(request.start_index):
            body['StartIndex'] = request.start_index
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DocBlocksQuery',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/docBlocksQuery',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DocBlocksQueryResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def doc_blocks_query(
        self,
        request: aliding_20230426_models.DocBlocksQueryRequest,
    ) -> aliding_20230426_models.DocBlocksQueryResponse:
        """
        @summary 查询块元素
        
        @param request: DocBlocksQueryRequest
        @return: DocBlocksQueryResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DocBlocksQueryHeaders()
        return self.doc_blocks_query_with_options(request, headers, runtime)

    async def doc_blocks_query_async(
        self,
        request: aliding_20230426_models.DocBlocksQueryRequest,
    ) -> aliding_20230426_models.DocBlocksQueryResponse:
        """
        @summary 查询块元素
        
        @param request: DocBlocksQueryRequest
        @return: DocBlocksQueryResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DocBlocksQueryHeaders()
        return await self.doc_blocks_query_with_options_async(request, headers, runtime)

    def doc_update_content_with_options(
        self,
        tmp_req: aliding_20230426_models.DocUpdateContentRequest,
        tmp_header: aliding_20230426_models.DocUpdateContentHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DocUpdateContentResponse:
        """
        @summary 覆写文档
        
        @param tmp_req: DocUpdateContentRequest
        @param tmp_header: DocUpdateContentHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DocUpdateContentResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.DocUpdateContentShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.DocUpdateContentShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.content):
            body['Content'] = request.content
        if not UtilClient.is_unset(request.data_type):
            body['DataType'] = request.data_type
        if not UtilClient.is_unset(request.doc_key):
            body['DocKey'] = request.doc_key
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DocUpdateContent',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/docUpdateContent',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DocUpdateContentResponse(),
            self.call_api(params, req, runtime)
        )

    async def doc_update_content_with_options_async(
        self,
        tmp_req: aliding_20230426_models.DocUpdateContentRequest,
        tmp_header: aliding_20230426_models.DocUpdateContentHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.DocUpdateContentResponse:
        """
        @summary 覆写文档
        
        @param tmp_req: DocUpdateContentRequest
        @param tmp_header: DocUpdateContentHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: DocUpdateContentResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.DocUpdateContentShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.DocUpdateContentShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.content):
            body['Content'] = request.content
        if not UtilClient.is_unset(request.data_type):
            body['DataType'] = request.data_type
        if not UtilClient.is_unset(request.doc_key):
            body['DocKey'] = request.doc_key
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DocUpdateContent',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/docUpdateContent',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.DocUpdateContentResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def doc_update_content(
        self,
        request: aliding_20230426_models.DocUpdateContentRequest,
    ) -> aliding_20230426_models.DocUpdateContentResponse:
        """
        @summary 覆写文档
        
        @param request: DocUpdateContentRequest
        @return: DocUpdateContentResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DocUpdateContentHeaders()
        return self.doc_update_content_with_options(request, headers, runtime)

    async def doc_update_content_async(
        self,
        request: aliding_20230426_models.DocUpdateContentRequest,
    ) -> aliding_20230426_models.DocUpdateContentResponse:
        """
        @summary 覆写文档
        
        @param request: DocUpdateContentRequest
        @return: DocUpdateContentResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.DocUpdateContentHeaders()
        return await self.doc_update_content_with_options_async(request, headers, runtime)

    def execute_batch_task_with_options(
        self,
        request: aliding_20230426_models.ExecuteBatchTaskRequest,
        tmp_header: aliding_20230426_models.ExecuteBatchTaskHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ExecuteBatchTaskResponse:
        """
        @summary 批量执行宜搭审批任务
        
        @param request: ExecuteBatchTaskRequest
        @param tmp_header: ExecuteBatchTaskHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ExecuteBatchTaskResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.ExecuteBatchTaskShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.out_result):
            body['OutResult'] = request.out_result
        if not UtilClient.is_unset(request.remark):
            body['Remark'] = request.remark
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        if not UtilClient.is_unset(request.task_information_list):
            body['TaskInformationList'] = request.task_information_list
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ExecuteBatchTask',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/executeBatchTask',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ExecuteBatchTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def execute_batch_task_with_options_async(
        self,
        request: aliding_20230426_models.ExecuteBatchTaskRequest,
        tmp_header: aliding_20230426_models.ExecuteBatchTaskHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ExecuteBatchTaskResponse:
        """
        @summary 批量执行宜搭审批任务
        
        @param request: ExecuteBatchTaskRequest
        @param tmp_header: ExecuteBatchTaskHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ExecuteBatchTaskResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.ExecuteBatchTaskShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.out_result):
            body['OutResult'] = request.out_result
        if not UtilClient.is_unset(request.remark):
            body['Remark'] = request.remark
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        if not UtilClient.is_unset(request.task_information_list):
            body['TaskInformationList'] = request.task_information_list
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ExecuteBatchTask',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/executeBatchTask',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ExecuteBatchTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def execute_batch_task(
        self,
        request: aliding_20230426_models.ExecuteBatchTaskRequest,
    ) -> aliding_20230426_models.ExecuteBatchTaskResponse:
        """
        @summary 批量执行宜搭审批任务
        
        @param request: ExecuteBatchTaskRequest
        @return: ExecuteBatchTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ExecuteBatchTaskHeaders()
        return self.execute_batch_task_with_options(request, headers, runtime)

    async def execute_batch_task_async(
        self,
        request: aliding_20230426_models.ExecuteBatchTaskRequest,
    ) -> aliding_20230426_models.ExecuteBatchTaskResponse:
        """
        @summary 批量执行宜搭审批任务
        
        @param request: ExecuteBatchTaskRequest
        @return: ExecuteBatchTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ExecuteBatchTaskHeaders()
        return await self.execute_batch_task_with_options_async(request, headers, runtime)

    def execute_platform_task_with_options(
        self,
        request: aliding_20230426_models.ExecutePlatformTaskRequest,
        tmp_header: aliding_20230426_models.ExecutePlatformTaskHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ExecutePlatformTaskResponse:
        """
        @summary 执行宜搭的审批任务
        
        @param request: ExecutePlatformTaskRequest
        @param tmp_header: ExecutePlatformTaskHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ExecutePlatformTaskResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.ExecutePlatformTaskShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.form_data_json):
            body['FormDataJson'] = request.form_data_json
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.no_execute_expressions):
            body['NoExecuteExpressions'] = request.no_execute_expressions
        if not UtilClient.is_unset(request.out_result):
            body['OutResult'] = request.out_result
        if not UtilClient.is_unset(request.process_instance_id):
            body['ProcessInstanceId'] = request.process_instance_id
        if not UtilClient.is_unset(request.remark):
            body['Remark'] = request.remark
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ExecutePlatformTask',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/executePlatformTask',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ExecutePlatformTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def execute_platform_task_with_options_async(
        self,
        request: aliding_20230426_models.ExecutePlatformTaskRequest,
        tmp_header: aliding_20230426_models.ExecutePlatformTaskHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ExecutePlatformTaskResponse:
        """
        @summary 执行宜搭的审批任务
        
        @param request: ExecutePlatformTaskRequest
        @param tmp_header: ExecutePlatformTaskHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ExecutePlatformTaskResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.ExecutePlatformTaskShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.form_data_json):
            body['FormDataJson'] = request.form_data_json
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.no_execute_expressions):
            body['NoExecuteExpressions'] = request.no_execute_expressions
        if not UtilClient.is_unset(request.out_result):
            body['OutResult'] = request.out_result
        if not UtilClient.is_unset(request.process_instance_id):
            body['ProcessInstanceId'] = request.process_instance_id
        if not UtilClient.is_unset(request.remark):
            body['Remark'] = request.remark
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ExecutePlatformTask',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/executePlatformTask',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ExecutePlatformTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def execute_platform_task(
        self,
        request: aliding_20230426_models.ExecutePlatformTaskRequest,
    ) -> aliding_20230426_models.ExecutePlatformTaskResponse:
        """
        @summary 执行宜搭的审批任务
        
        @param request: ExecutePlatformTaskRequest
        @return: ExecutePlatformTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ExecutePlatformTaskHeaders()
        return self.execute_platform_task_with_options(request, headers, runtime)

    async def execute_platform_task_async(
        self,
        request: aliding_20230426_models.ExecutePlatformTaskRequest,
    ) -> aliding_20230426_models.ExecutePlatformTaskResponse:
        """
        @summary 执行宜搭的审批任务
        
        @param request: ExecutePlatformTaskRequest
        @return: ExecutePlatformTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ExecutePlatformTaskHeaders()
        return await self.execute_platform_task_with_options_async(request, headers, runtime)

    def execute_task_with_options(
        self,
        request: aliding_20230426_models.ExecuteTaskRequest,
        tmp_header: aliding_20230426_models.ExecuteTaskHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ExecuteTaskResponse:
        """
        @summary 同意或拒绝宜搭审批任务(执行审批任务)
        
        @param request: ExecuteTaskRequest
        @param tmp_header: ExecuteTaskHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ExecuteTaskResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.ExecuteTaskShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.digital_sign_url):
            body['DigitalSignUrl'] = request.digital_sign_url
        if not UtilClient.is_unset(request.form_data_json):
            body['FormDataJson'] = request.form_data_json
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.no_execute_expressions):
            body['NoExecuteExpressions'] = request.no_execute_expressions
        if not UtilClient.is_unset(request.out_result):
            body['OutResult'] = request.out_result
        if not UtilClient.is_unset(request.process_instance_id):
            body['ProcessInstanceId'] = request.process_instance_id
        if not UtilClient.is_unset(request.remark):
            body['Remark'] = request.remark
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        if not UtilClient.is_unset(request.task_id):
            body['TaskId'] = request.task_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ExecuteTask',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/executeTask',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ExecuteTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def execute_task_with_options_async(
        self,
        request: aliding_20230426_models.ExecuteTaskRequest,
        tmp_header: aliding_20230426_models.ExecuteTaskHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ExecuteTaskResponse:
        """
        @summary 同意或拒绝宜搭审批任务(执行审批任务)
        
        @param request: ExecuteTaskRequest
        @param tmp_header: ExecuteTaskHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ExecuteTaskResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.ExecuteTaskShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.digital_sign_url):
            body['DigitalSignUrl'] = request.digital_sign_url
        if not UtilClient.is_unset(request.form_data_json):
            body['FormDataJson'] = request.form_data_json
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.no_execute_expressions):
            body['NoExecuteExpressions'] = request.no_execute_expressions
        if not UtilClient.is_unset(request.out_result):
            body['OutResult'] = request.out_result
        if not UtilClient.is_unset(request.process_instance_id):
            body['ProcessInstanceId'] = request.process_instance_id
        if not UtilClient.is_unset(request.remark):
            body['Remark'] = request.remark
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        if not UtilClient.is_unset(request.task_id):
            body['TaskId'] = request.task_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ExecuteTask',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/executeTask',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ExecuteTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def execute_task(
        self,
        request: aliding_20230426_models.ExecuteTaskRequest,
    ) -> aliding_20230426_models.ExecuteTaskResponse:
        """
        @summary 同意或拒绝宜搭审批任务(执行审批任务)
        
        @param request: ExecuteTaskRequest
        @return: ExecuteTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ExecuteTaskHeaders()
        return self.execute_task_with_options(request, headers, runtime)

    async def execute_task_async(
        self,
        request: aliding_20230426_models.ExecuteTaskRequest,
    ) -> aliding_20230426_models.ExecuteTaskResponse:
        """
        @summary 同意或拒绝宜搭审批任务(执行审批任务)
        
        @param request: ExecuteTaskRequest
        @return: ExecuteTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ExecuteTaskHeaders()
        return await self.execute_task_with_options_async(request, headers, runtime)

    def expand_group_capacity_with_options(
        self,
        tmp_req: aliding_20230426_models.ExpandGroupCapacityRequest,
        tmp_header: aliding_20230426_models.ExpandGroupCapacityHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ExpandGroupCapacityResponse:
        """
        @summary 群扩容
        
        @param tmp_req: ExpandGroupCapacityRequest
        @param tmp_header: ExpandGroupCapacityHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ExpandGroupCapacityResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.ExpandGroupCapacityShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.ExpandGroupCapacityShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.open_conversation_id):
            body['OpenConversationId'] = request.open_conversation_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ExpandGroupCapacity',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/aliding/v1/im/expandGroupCapacity',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ExpandGroupCapacityResponse(),
            self.call_api(params, req, runtime)
        )

    async def expand_group_capacity_with_options_async(
        self,
        tmp_req: aliding_20230426_models.ExpandGroupCapacityRequest,
        tmp_header: aliding_20230426_models.ExpandGroupCapacityHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ExpandGroupCapacityResponse:
        """
        @summary 群扩容
        
        @param tmp_req: ExpandGroupCapacityRequest
        @param tmp_header: ExpandGroupCapacityHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ExpandGroupCapacityResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.ExpandGroupCapacityShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.ExpandGroupCapacityShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.open_conversation_id):
            body['OpenConversationId'] = request.open_conversation_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ExpandGroupCapacity',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/aliding/v1/im/expandGroupCapacity',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ExpandGroupCapacityResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def expand_group_capacity(
        self,
        request: aliding_20230426_models.ExpandGroupCapacityRequest,
    ) -> aliding_20230426_models.ExpandGroupCapacityResponse:
        """
        @summary 群扩容
        
        @param request: ExpandGroupCapacityRequest
        @return: ExpandGroupCapacityResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ExpandGroupCapacityHeaders()
        return self.expand_group_capacity_with_options(request, headers, runtime)

    async def expand_group_capacity_async(
        self,
        request: aliding_20230426_models.ExpandGroupCapacityRequest,
    ) -> aliding_20230426_models.ExpandGroupCapacityResponse:
        """
        @summary 群扩容
        
        @param request: ExpandGroupCapacityRequest
        @return: ExpandGroupCapacityResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ExpandGroupCapacityHeaders()
        return await self.expand_group_capacity_with_options_async(request, headers, runtime)

    def finish_ticket_with_options(
        self,
        tmp_req: aliding_20230426_models.FinishTicketRequest,
        tmp_header: aliding_20230426_models.FinishTicketHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.FinishTicketResponse:
        """
        @summary 完结工单
        
        @param tmp_req: FinishTicketRequest
        @param tmp_header: FinishTicketHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: FinishTicketResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.FinishTicketShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.FinishTicketShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.notify):
            request.notify_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.notify, 'Notify', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        if not UtilClient.is_unset(tmp_req.ticket_memo):
            request.ticket_memo_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ticket_memo, 'TicketMemo', 'json')
        body = {}
        if not UtilClient.is_unset(request.notify_shrink):
            body['Notify'] = request.notify_shrink
        if not UtilClient.is_unset(request.open_team_id):
            body['OpenTeamId'] = request.open_team_id
        if not UtilClient.is_unset(request.open_ticket_id):
            body['OpenTicketId'] = request.open_ticket_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.ticket_memo_shrink):
            body['TicketMemo'] = request.ticket_memo_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='FinishTicket',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ticket/finishTicket',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.FinishTicketResponse(),
            self.call_api(params, req, runtime)
        )

    async def finish_ticket_with_options_async(
        self,
        tmp_req: aliding_20230426_models.FinishTicketRequest,
        tmp_header: aliding_20230426_models.FinishTicketHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.FinishTicketResponse:
        """
        @summary 完结工单
        
        @param tmp_req: FinishTicketRequest
        @param tmp_header: FinishTicketHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: FinishTicketResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.FinishTicketShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.FinishTicketShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.notify):
            request.notify_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.notify, 'Notify', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        if not UtilClient.is_unset(tmp_req.ticket_memo):
            request.ticket_memo_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ticket_memo, 'TicketMemo', 'json')
        body = {}
        if not UtilClient.is_unset(request.notify_shrink):
            body['Notify'] = request.notify_shrink
        if not UtilClient.is_unset(request.open_team_id):
            body['OpenTeamId'] = request.open_team_id
        if not UtilClient.is_unset(request.open_ticket_id):
            body['OpenTicketId'] = request.open_ticket_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.ticket_memo_shrink):
            body['TicketMemo'] = request.ticket_memo_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='FinishTicket',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ticket/finishTicket',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.FinishTicketResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def finish_ticket(
        self,
        request: aliding_20230426_models.FinishTicketRequest,
    ) -> aliding_20230426_models.FinishTicketResponse:
        """
        @summary 完结工单
        
        @param request: FinishTicketRequest
        @return: FinishTicketResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.FinishTicketHeaders()
        return self.finish_ticket_with_options(request, headers, runtime)

    async def finish_ticket_async(
        self,
        request: aliding_20230426_models.FinishTicketRequest,
    ) -> aliding_20230426_models.FinishTicketResponse:
        """
        @summary 完结工单
        
        @param request: FinishTicketRequest
        @return: FinishTicketResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.FinishTicketHeaders()
        return await self.finish_ticket_with_options_async(request, headers, runtime)

    def get_activity_list_with_options(
        self,
        request: aliding_20230426_models.GetActivityListRequest,
        tmp_header: aliding_20230426_models.GetActivityListHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetActivityListResponse:
        """
        @summary 获取流程设计的节点信息
        
        @param request: GetActivityListRequest
        @param tmp_header: GetActivityListHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetActivityListResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetActivityListShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.process_code):
            body['ProcessCode'] = request.process_code
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetActivityList',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/getActivityList',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetActivityListResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_activity_list_with_options_async(
        self,
        request: aliding_20230426_models.GetActivityListRequest,
        tmp_header: aliding_20230426_models.GetActivityListHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetActivityListResponse:
        """
        @summary 获取流程设计的节点信息
        
        @param request: GetActivityListRequest
        @param tmp_header: GetActivityListHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetActivityListResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetActivityListShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.process_code):
            body['ProcessCode'] = request.process_code
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetActivityList',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/getActivityList',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetActivityListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_activity_list(
        self,
        request: aliding_20230426_models.GetActivityListRequest,
    ) -> aliding_20230426_models.GetActivityListResponse:
        """
        @summary 获取流程设计的节点信息
        
        @param request: GetActivityListRequest
        @return: GetActivityListResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetActivityListHeaders()
        return self.get_activity_list_with_options(request, headers, runtime)

    async def get_activity_list_async(
        self,
        request: aliding_20230426_models.GetActivityListRequest,
    ) -> aliding_20230426_models.GetActivityListResponse:
        """
        @summary 获取流程设计的节点信息
        
        @param request: GetActivityListRequest
        @return: GetActivityListResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetActivityListHeaders()
        return await self.get_activity_list_with_options_async(request, headers, runtime)

    def get_aliding_assistant_info_with_options(
        self,
        tmp_req: aliding_20230426_models.GetAlidingAssistantInfoRequest,
        tmp_header: aliding_20230426_models.GetAlidingAssistantInfoHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetAlidingAssistantInfoResponse:
        """
        @summary 获取阿里钉ai助理信息
        
        @param tmp_req: GetAlidingAssistantInfoRequest
        @param tmp_header: GetAlidingAssistantInfoHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAlidingAssistantInfoResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetAlidingAssistantInfoShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetAlidingAssistantInfoShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.assistant_id):
            body['AssistantId'] = request.assistant_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetAlidingAssistantInfo',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/aiagent/getAlidingAssistantInfo',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetAlidingAssistantInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_aliding_assistant_info_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetAlidingAssistantInfoRequest,
        tmp_header: aliding_20230426_models.GetAlidingAssistantInfoHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetAlidingAssistantInfoResponse:
        """
        @summary 获取阿里钉ai助理信息
        
        @param tmp_req: GetAlidingAssistantInfoRequest
        @param tmp_header: GetAlidingAssistantInfoHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAlidingAssistantInfoResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetAlidingAssistantInfoShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetAlidingAssistantInfoShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.assistant_id):
            body['AssistantId'] = request.assistant_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetAlidingAssistantInfo',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/aiagent/getAlidingAssistantInfo',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetAlidingAssistantInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_aliding_assistant_info(
        self,
        request: aliding_20230426_models.GetAlidingAssistantInfoRequest,
    ) -> aliding_20230426_models.GetAlidingAssistantInfoResponse:
        """
        @summary 获取阿里钉ai助理信息
        
        @param request: GetAlidingAssistantInfoRequest
        @return: GetAlidingAssistantInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetAlidingAssistantInfoHeaders()
        return self.get_aliding_assistant_info_with_options(request, headers, runtime)

    async def get_aliding_assistant_info_async(
        self,
        request: aliding_20230426_models.GetAlidingAssistantInfoRequest,
    ) -> aliding_20230426_models.GetAlidingAssistantInfoResponse:
        """
        @summary 获取阿里钉ai助理信息
        
        @param request: GetAlidingAssistantInfoRequest
        @return: GetAlidingAssistantInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetAlidingAssistantInfoHeaders()
        return await self.get_aliding_assistant_info_with_options_async(request, headers, runtime)

    def get_all_sheets_with_options(
        self,
        tmp_req: aliding_20230426_models.GetAllSheetsRequest,
        tmp_header: aliding_20230426_models.GetAllSheetsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetAllSheetsResponse:
        """
        @summary 获取所有工作表
        
        @param tmp_req: GetAllSheetsRequest
        @param tmp_header: GetAllSheetsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAllSheetsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetAllSheetsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetAllSheetsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workbook_id):
            body['WorkbookId'] = request.workbook_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetAllSheets',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/getAllSheets',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetAllSheetsResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_all_sheets_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetAllSheetsRequest,
        tmp_header: aliding_20230426_models.GetAllSheetsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetAllSheetsResponse:
        """
        @summary 获取所有工作表
        
        @param tmp_req: GetAllSheetsRequest
        @param tmp_header: GetAllSheetsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAllSheetsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetAllSheetsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetAllSheetsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workbook_id):
            body['WorkbookId'] = request.workbook_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetAllSheets',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/getAllSheets',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetAllSheetsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_all_sheets(
        self,
        request: aliding_20230426_models.GetAllSheetsRequest,
    ) -> aliding_20230426_models.GetAllSheetsResponse:
        """
        @summary 获取所有工作表
        
        @param request: GetAllSheetsRequest
        @return: GetAllSheetsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetAllSheetsHeaders()
        return self.get_all_sheets_with_options(request, headers, runtime)

    async def get_all_sheets_async(
        self,
        request: aliding_20230426_models.GetAllSheetsRequest,
    ) -> aliding_20230426_models.GetAllSheetsResponse:
        """
        @summary 获取所有工作表
        
        @param request: GetAllSheetsRequest
        @return: GetAllSheetsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetAllSheetsHeaders()
        return await self.get_all_sheets_with_options_async(request, headers, runtime)

    def get_assistant_capability_with_options(
        self,
        request: aliding_20230426_models.GetAssistantCapabilityRequest,
        headers: aliding_20230426_models.GetAssistantCapabilityHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetAssistantCapabilityResponse:
        """
        @summary 获取助理能力
        
        @param request: GetAssistantCapabilityRequest
        @param headers: GetAssistantCapabilityHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAssistantCapabilityResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.assistant_id):
            body['assistantId'] = request.assistant_id
        if not UtilClient.is_unset(request.messages):
            body['messages'] = request.messages
        if not UtilClient.is_unset(request.original_assistant_id):
            body['originalAssistantId'] = request.original_assistant_id
        if not UtilClient.is_unset(request.protocol):
            body['protocol'] = request.protocol
        if not UtilClient.is_unset(request.source_id_of_original_assistant_id):
            body['sourceIdOfOriginalAssistantId'] = request.source_id_of_original_assistant_id
        if not UtilClient.is_unset(request.source_type_of_original_assistant_id):
            body['sourceTypeOfOriginalAssistantId'] = request.source_type_of_original_assistant_id
        if not UtilClient.is_unset(request.thread_id):
            body['threadId'] = request.thread_id
        if not UtilClient.is_unset(request.timeout):
            body['timeout'] = request.timeout
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_id):
            real_headers['accountId'] = UtilClient.to_jsonstring(headers.account_id)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetAssistantCapability',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/ai/v1/assistant/getAssistantCapability',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='json',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetAssistantCapabilityResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_assistant_capability_with_options_async(
        self,
        request: aliding_20230426_models.GetAssistantCapabilityRequest,
        headers: aliding_20230426_models.GetAssistantCapabilityHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetAssistantCapabilityResponse:
        """
        @summary 获取助理能力
        
        @param request: GetAssistantCapabilityRequest
        @param headers: GetAssistantCapabilityHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAssistantCapabilityResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.assistant_id):
            body['assistantId'] = request.assistant_id
        if not UtilClient.is_unset(request.messages):
            body['messages'] = request.messages
        if not UtilClient.is_unset(request.original_assistant_id):
            body['originalAssistantId'] = request.original_assistant_id
        if not UtilClient.is_unset(request.protocol):
            body['protocol'] = request.protocol
        if not UtilClient.is_unset(request.source_id_of_original_assistant_id):
            body['sourceIdOfOriginalAssistantId'] = request.source_id_of_original_assistant_id
        if not UtilClient.is_unset(request.source_type_of_original_assistant_id):
            body['sourceTypeOfOriginalAssistantId'] = request.source_type_of_original_assistant_id
        if not UtilClient.is_unset(request.thread_id):
            body['threadId'] = request.thread_id
        if not UtilClient.is_unset(request.timeout):
            body['timeout'] = request.timeout
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_id):
            real_headers['accountId'] = UtilClient.to_jsonstring(headers.account_id)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetAssistantCapability',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/ai/v1/assistant/getAssistantCapability',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='json',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetAssistantCapabilityResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_assistant_capability(
        self,
        request: aliding_20230426_models.GetAssistantCapabilityRequest,
    ) -> aliding_20230426_models.GetAssistantCapabilityResponse:
        """
        @summary 获取助理能力
        
        @param request: GetAssistantCapabilityRequest
        @return: GetAssistantCapabilityResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetAssistantCapabilityHeaders()
        return self.get_assistant_capability_with_options(request, headers, runtime)

    async def get_assistant_capability_async(
        self,
        request: aliding_20230426_models.GetAssistantCapabilityRequest,
    ) -> aliding_20230426_models.GetAssistantCapabilityResponse:
        """
        @summary 获取助理能力
        
        @param request: GetAssistantCapabilityRequest
        @return: GetAssistantCapabilityResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetAssistantCapabilityHeaders()
        return await self.get_assistant_capability_with_options_async(request, headers, runtime)

    def get_conversaion_space_with_options(
        self,
        tmp_req: aliding_20230426_models.GetConversaionSpaceRequest,
        tmp_header: aliding_20230426_models.GetConversaionSpaceHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetConversaionSpaceResponse:
        """
        @summary 获取群存储空间信息
        
        @param tmp_req: GetConversaionSpaceRequest
        @param tmp_header: GetConversaionSpaceHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetConversaionSpaceResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetConversaionSpaceShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetConversaionSpaceShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.open_conversation_id):
            body['OpenConversationId'] = request.open_conversation_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetConversaionSpace',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/getConversaionSpace',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetConversaionSpaceResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_conversaion_space_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetConversaionSpaceRequest,
        tmp_header: aliding_20230426_models.GetConversaionSpaceHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetConversaionSpaceResponse:
        """
        @summary 获取群存储空间信息
        
        @param tmp_req: GetConversaionSpaceRequest
        @param tmp_header: GetConversaionSpaceHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetConversaionSpaceResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetConversaionSpaceShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetConversaionSpaceShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.open_conversation_id):
            body['OpenConversationId'] = request.open_conversation_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetConversaionSpace',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/getConversaionSpace',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetConversaionSpaceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_conversaion_space(
        self,
        request: aliding_20230426_models.GetConversaionSpaceRequest,
    ) -> aliding_20230426_models.GetConversaionSpaceResponse:
        """
        @summary 获取群存储空间信息
        
        @param request: GetConversaionSpaceRequest
        @return: GetConversaionSpaceResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetConversaionSpaceHeaders()
        return self.get_conversaion_space_with_options(request, headers, runtime)

    async def get_conversaion_space_async(
        self,
        request: aliding_20230426_models.GetConversaionSpaceRequest,
    ) -> aliding_20230426_models.GetConversaionSpaceResponse:
        """
        @summary 获取群存储空间信息
        
        @param request: GetConversaionSpaceRequest
        @return: GetConversaionSpaceResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetConversaionSpaceHeaders()
        return await self.get_conversaion_space_with_options_async(request, headers, runtime)

    def get_corp_accomplishment_tasks_with_options(
        self,
        request: aliding_20230426_models.GetCorpAccomplishmentTasksRequest,
        tmp_header: aliding_20230426_models.GetCorpAccomplishmentTasksHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetCorpAccomplishmentTasksResponse:
        """
        @summary 获取组织内已完成的审批任务
        
        @param request: GetCorpAccomplishmentTasksRequest
        @param tmp_header: GetCorpAccomplishmentTasksHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCorpAccomplishmentTasksResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetCorpAccomplishmentTasksShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_types):
            body['AppTypes'] = request.app_types
        if not UtilClient.is_unset(request.corp_id):
            body['CorpId'] = request.corp_id
        if not UtilClient.is_unset(request.create_from_time_gmt):
            body['CreateFromTimeGMT'] = request.create_from_time_gmt
        if not UtilClient.is_unset(request.create_to_time_gmt):
            body['CreateToTimeGMT'] = request.create_to_time_gmt
        if not UtilClient.is_unset(request.keyword):
            body['Keyword'] = request.keyword
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.process_codes):
            body['ProcessCodes'] = request.process_codes
        if not UtilClient.is_unset(request.token):
            body['Token'] = request.token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetCorpAccomplishmentTasks',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/getCorpAccomplishmentTasks',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetCorpAccomplishmentTasksResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_corp_accomplishment_tasks_with_options_async(
        self,
        request: aliding_20230426_models.GetCorpAccomplishmentTasksRequest,
        tmp_header: aliding_20230426_models.GetCorpAccomplishmentTasksHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetCorpAccomplishmentTasksResponse:
        """
        @summary 获取组织内已完成的审批任务
        
        @param request: GetCorpAccomplishmentTasksRequest
        @param tmp_header: GetCorpAccomplishmentTasksHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCorpAccomplishmentTasksResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetCorpAccomplishmentTasksShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_types):
            body['AppTypes'] = request.app_types
        if not UtilClient.is_unset(request.corp_id):
            body['CorpId'] = request.corp_id
        if not UtilClient.is_unset(request.create_from_time_gmt):
            body['CreateFromTimeGMT'] = request.create_from_time_gmt
        if not UtilClient.is_unset(request.create_to_time_gmt):
            body['CreateToTimeGMT'] = request.create_to_time_gmt
        if not UtilClient.is_unset(request.keyword):
            body['Keyword'] = request.keyword
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.process_codes):
            body['ProcessCodes'] = request.process_codes
        if not UtilClient.is_unset(request.token):
            body['Token'] = request.token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetCorpAccomplishmentTasks',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/getCorpAccomplishmentTasks',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetCorpAccomplishmentTasksResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_corp_accomplishment_tasks(
        self,
        request: aliding_20230426_models.GetCorpAccomplishmentTasksRequest,
    ) -> aliding_20230426_models.GetCorpAccomplishmentTasksResponse:
        """
        @summary 获取组织内已完成的审批任务
        
        @param request: GetCorpAccomplishmentTasksRequest
        @return: GetCorpAccomplishmentTasksResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetCorpAccomplishmentTasksHeaders()
        return self.get_corp_accomplishment_tasks_with_options(request, headers, runtime)

    async def get_corp_accomplishment_tasks_async(
        self,
        request: aliding_20230426_models.GetCorpAccomplishmentTasksRequest,
    ) -> aliding_20230426_models.GetCorpAccomplishmentTasksResponse:
        """
        @summary 获取组织内已完成的审批任务
        
        @param request: GetCorpAccomplishmentTasksRequest
        @return: GetCorpAccomplishmentTasksResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetCorpAccomplishmentTasksHeaders()
        return await self.get_corp_accomplishment_tasks_with_options_async(request, headers, runtime)

    def get_corp_tasks_with_options(
        self,
        request: aliding_20230426_models.GetCorpTasksRequest,
        tmp_header: aliding_20230426_models.GetCorpTasksHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetCorpTasksResponse:
        """
        @summary 获取任务列表（组织维度）
        
        @param request: GetCorpTasksRequest
        @param tmp_header: GetCorpTasksHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCorpTasksResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetCorpTasksShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_types):
            body['AppTypes'] = request.app_types
        if not UtilClient.is_unset(request.corp_id):
            body['CorpId'] = request.corp_id
        if not UtilClient.is_unset(request.create_from_time_gmt):
            body['CreateFromTimeGMT'] = request.create_from_time_gmt
        if not UtilClient.is_unset(request.create_to_time_gmt):
            body['CreateToTimeGMT'] = request.create_to_time_gmt
        if not UtilClient.is_unset(request.keyword):
            body['Keyword'] = request.keyword
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.process_codes):
            body['ProcessCodes'] = request.process_codes
        if not UtilClient.is_unset(request.token):
            body['Token'] = request.token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetCorpTasks',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/getCorpTasks',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetCorpTasksResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_corp_tasks_with_options_async(
        self,
        request: aliding_20230426_models.GetCorpTasksRequest,
        tmp_header: aliding_20230426_models.GetCorpTasksHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetCorpTasksResponse:
        """
        @summary 获取任务列表（组织维度）
        
        @param request: GetCorpTasksRequest
        @param tmp_header: GetCorpTasksHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCorpTasksResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetCorpTasksShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_types):
            body['AppTypes'] = request.app_types
        if not UtilClient.is_unset(request.corp_id):
            body['CorpId'] = request.corp_id
        if not UtilClient.is_unset(request.create_from_time_gmt):
            body['CreateFromTimeGMT'] = request.create_from_time_gmt
        if not UtilClient.is_unset(request.create_to_time_gmt):
            body['CreateToTimeGMT'] = request.create_to_time_gmt
        if not UtilClient.is_unset(request.keyword):
            body['Keyword'] = request.keyword
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.process_codes):
            body['ProcessCodes'] = request.process_codes
        if not UtilClient.is_unset(request.token):
            body['Token'] = request.token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetCorpTasks',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/getCorpTasks',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetCorpTasksResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_corp_tasks(
        self,
        request: aliding_20230426_models.GetCorpTasksRequest,
    ) -> aliding_20230426_models.GetCorpTasksResponse:
        """
        @summary 获取任务列表（组织维度）
        
        @param request: GetCorpTasksRequest
        @return: GetCorpTasksResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetCorpTasksHeaders()
        return self.get_corp_tasks_with_options(request, headers, runtime)

    async def get_corp_tasks_async(
        self,
        request: aliding_20230426_models.GetCorpTasksRequest,
    ) -> aliding_20230426_models.GetCorpTasksResponse:
        """
        @summary 获取任务列表（组织维度）
        
        @param request: GetCorpTasksRequest
        @return: GetCorpTasksResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetCorpTasksHeaders()
        return await self.get_corp_tasks_with_options_async(request, headers, runtime)

    def get_dept_no_with_options(
        self,
        tmp_req: aliding_20230426_models.GetDeptNoRequest,
        tmp_header: aliding_20230426_models.GetDeptNoHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetDeptNoResponse:
        """
        @param tmp_req: GetDeptNoRequest
        @param tmp_header: GetDeptNoHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDeptNoResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetDeptNoShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetDeptNoShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.dept_id):
            body['deptId'] = request.dept_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetDeptNo',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/aliding/v1/dept/getDeptNo',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetDeptNoResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_dept_no_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetDeptNoRequest,
        tmp_header: aliding_20230426_models.GetDeptNoHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetDeptNoResponse:
        """
        @param tmp_req: GetDeptNoRequest
        @param tmp_header: GetDeptNoHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDeptNoResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetDeptNoShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetDeptNoShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.dept_id):
            body['deptId'] = request.dept_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetDeptNo',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/aliding/v1/dept/getDeptNo',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetDeptNoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_dept_no(
        self,
        request: aliding_20230426_models.GetDeptNoRequest,
    ) -> aliding_20230426_models.GetDeptNoResponse:
        """
        @param request: GetDeptNoRequest
        @return: GetDeptNoResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetDeptNoHeaders()
        return self.get_dept_no_with_options(request, headers, runtime)

    async def get_dept_no_async(
        self,
        request: aliding_20230426_models.GetDeptNoRequest,
    ) -> aliding_20230426_models.GetDeptNoResponse:
        """
        @param request: GetDeptNoRequest
        @return: GetDeptNoResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetDeptNoHeaders()
        return await self.get_dept_no_with_options_async(request, headers, runtime)

    def get_doc_content_with_options(
        self,
        tmp_req: aliding_20230426_models.GetDocContentRequest,
        tmp_header: aliding_20230426_models.GetDocContentHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetDocContentResponse:
        """
        @summary 委托权限获取文档内容
        
        @param tmp_req: GetDocContentRequest
        @param tmp_header: GetDocContentHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDocContentResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetDocContentShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetDocContentShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.dentry_uuid):
            body['DentryUuid'] = request.dentry_uuid
        if not UtilClient.is_unset(request.target_format):
            body['TargetFormat'] = request.target_format
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.user_token):
            body['userToken'] = request.user_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetDocContent',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v2/documents/getDocContent',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetDocContentResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_doc_content_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetDocContentRequest,
        tmp_header: aliding_20230426_models.GetDocContentHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetDocContentResponse:
        """
        @summary 委托权限获取文档内容
        
        @param tmp_req: GetDocContentRequest
        @param tmp_header: GetDocContentHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDocContentResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetDocContentShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetDocContentShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.dentry_uuid):
            body['DentryUuid'] = request.dentry_uuid
        if not UtilClient.is_unset(request.target_format):
            body['TargetFormat'] = request.target_format
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.user_token):
            body['userToken'] = request.user_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetDocContent',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v2/documents/getDocContent',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetDocContentResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_doc_content(
        self,
        request: aliding_20230426_models.GetDocContentRequest,
    ) -> aliding_20230426_models.GetDocContentResponse:
        """
        @summary 委托权限获取文档内容
        
        @param request: GetDocContentRequest
        @return: GetDocContentResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetDocContentHeaders()
        return self.get_doc_content_with_options(request, headers, runtime)

    async def get_doc_content_async(
        self,
        request: aliding_20230426_models.GetDocContentRequest,
    ) -> aliding_20230426_models.GetDocContentResponse:
        """
        @summary 委托权限获取文档内容
        
        @param request: GetDocContentRequest
        @return: GetDocContentResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetDocContentHeaders()
        return await self.get_doc_content_with_options_async(request, headers, runtime)

    def get_doc_content_tak_id_with_options(
        self,
        tmp_req: aliding_20230426_models.GetDocContentTakIdRequest,
        tmp_header: aliding_20230426_models.GetDocContentTakIdHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetDocContentTakIdResponse:
        """
        @summary 委托权限获取文档内容taskId
        
        @param tmp_req: GetDocContentTakIdRequest
        @param tmp_header: GetDocContentTakIdHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDocContentTakIdResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetDocContentTakIdShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetDocContentTakIdShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.dentry_uuid):
            body['DentryUuid'] = request.dentry_uuid
        if not UtilClient.is_unset(request.generate_cp):
            body['GenerateCp'] = request.generate_cp
        if not UtilClient.is_unset(request.target_format):
            body['TargetFormat'] = request.target_format
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetDocContentTakId',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v2/documents/getDocContentTakId',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetDocContentTakIdResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_doc_content_tak_id_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetDocContentTakIdRequest,
        tmp_header: aliding_20230426_models.GetDocContentTakIdHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetDocContentTakIdResponse:
        """
        @summary 委托权限获取文档内容taskId
        
        @param tmp_req: GetDocContentTakIdRequest
        @param tmp_header: GetDocContentTakIdHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDocContentTakIdResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetDocContentTakIdShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetDocContentTakIdShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.dentry_uuid):
            body['DentryUuid'] = request.dentry_uuid
        if not UtilClient.is_unset(request.generate_cp):
            body['GenerateCp'] = request.generate_cp
        if not UtilClient.is_unset(request.target_format):
            body['TargetFormat'] = request.target_format
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetDocContentTakId',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v2/documents/getDocContentTakId',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetDocContentTakIdResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_doc_content_tak_id(
        self,
        request: aliding_20230426_models.GetDocContentTakIdRequest,
    ) -> aliding_20230426_models.GetDocContentTakIdResponse:
        """
        @summary 委托权限获取文档内容taskId
        
        @param request: GetDocContentTakIdRequest
        @return: GetDocContentTakIdResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetDocContentTakIdHeaders()
        return self.get_doc_content_tak_id_with_options(request, headers, runtime)

    async def get_doc_content_tak_id_async(
        self,
        request: aliding_20230426_models.GetDocContentTakIdRequest,
    ) -> aliding_20230426_models.GetDocContentTakIdResponse:
        """
        @summary 委托权限获取文档内容taskId
        
        @param request: GetDocContentTakIdRequest
        @return: GetDocContentTakIdResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetDocContentTakIdHeaders()
        return await self.get_doc_content_tak_id_with_options_async(request, headers, runtime)

    def get_event_with_options(
        self,
        request: aliding_20230426_models.GetEventRequest,
        tmp_header: aliding_20230426_models.GetEventHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetEventResponse:
        """
        @summary 查询单个日程详情
        
        @param request: GetEventRequest
        @param tmp_header: GetEventHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetEventResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetEventShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        query = {}
        if not UtilClient.is_unset(request.max_attendees):
            query['MaxAttendees'] = request.max_attendees
        body = {}
        if not UtilClient.is_unset(request.calendar_id):
            body['CalendarId'] = request.calendar_id
        if not UtilClient.is_unset(request.event_id):
            body['EventId'] = request.event_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetEvent',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/getEvent',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetEventResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_event_with_options_async(
        self,
        request: aliding_20230426_models.GetEventRequest,
        tmp_header: aliding_20230426_models.GetEventHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetEventResponse:
        """
        @summary 查询单个日程详情
        
        @param request: GetEventRequest
        @param tmp_header: GetEventHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetEventResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetEventShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        query = {}
        if not UtilClient.is_unset(request.max_attendees):
            query['MaxAttendees'] = request.max_attendees
        body = {}
        if not UtilClient.is_unset(request.calendar_id):
            body['CalendarId'] = request.calendar_id
        if not UtilClient.is_unset(request.event_id):
            body['EventId'] = request.event_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetEvent',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/getEvent',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetEventResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_event(
        self,
        request: aliding_20230426_models.GetEventRequest,
    ) -> aliding_20230426_models.GetEventResponse:
        """
        @summary 查询单个日程详情
        
        @param request: GetEventRequest
        @return: GetEventResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetEventHeaders()
        return self.get_event_with_options(request, headers, runtime)

    async def get_event_async(
        self,
        request: aliding_20230426_models.GetEventRequest,
    ) -> aliding_20230426_models.GetEventResponse:
        """
        @summary 查询单个日程详情
        
        @param request: GetEventRequest
        @return: GetEventResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetEventHeaders()
        return await self.get_event_with_options_async(request, headers, runtime)

    def get_field_def_by_uuid_with_options(
        self,
        request: aliding_20230426_models.GetFieldDefByUuidRequest,
        tmp_header: aliding_20230426_models.GetFieldDefByUuidHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetFieldDefByUuidResponse:
        """
        @summary 获取表单内的组件信息
        
        @param request: GetFieldDefByUuidRequest
        @param tmp_header: GetFieldDefByUuidHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetFieldDefByUuidResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetFieldDefByUuidShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.form_uuid):
            body['FormUuid'] = request.form_uuid
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetFieldDefByUuid',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/getFieldDefByUuid',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetFieldDefByUuidResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_field_def_by_uuid_with_options_async(
        self,
        request: aliding_20230426_models.GetFieldDefByUuidRequest,
        tmp_header: aliding_20230426_models.GetFieldDefByUuidHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetFieldDefByUuidResponse:
        """
        @summary 获取表单内的组件信息
        
        @param request: GetFieldDefByUuidRequest
        @param tmp_header: GetFieldDefByUuidHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetFieldDefByUuidResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetFieldDefByUuidShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.form_uuid):
            body['FormUuid'] = request.form_uuid
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetFieldDefByUuid',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/getFieldDefByUuid',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetFieldDefByUuidResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_field_def_by_uuid(
        self,
        request: aliding_20230426_models.GetFieldDefByUuidRequest,
    ) -> aliding_20230426_models.GetFieldDefByUuidResponse:
        """
        @summary 获取表单内的组件信息
        
        @param request: GetFieldDefByUuidRequest
        @return: GetFieldDefByUuidResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetFieldDefByUuidHeaders()
        return self.get_field_def_by_uuid_with_options(request, headers, runtime)

    async def get_field_def_by_uuid_async(
        self,
        request: aliding_20230426_models.GetFieldDefByUuidRequest,
    ) -> aliding_20230426_models.GetFieldDefByUuidResponse:
        """
        @summary 获取表单内的组件信息
        
        @param request: GetFieldDefByUuidRequest
        @return: GetFieldDefByUuidResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetFieldDefByUuidHeaders()
        return await self.get_field_def_by_uuid_with_options_async(request, headers, runtime)

    def get_file_download_info_with_options(
        self,
        tmp_req: aliding_20230426_models.GetFileDownloadInfoRequest,
        tmp_header: aliding_20230426_models.GetFileDownloadInfoHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetFileDownloadInfoResponse:
        """
        @summary 获取文件下载信息
        
        @param tmp_req: GetFileDownloadInfoRequest
        @param tmp_header: GetFileDownloadInfoHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetFileDownloadInfoResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetFileDownloadInfoShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetFileDownloadInfoShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.option):
            request.option_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.option, 'Option', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.dentry_id):
            body['DentryId'] = request.dentry_id
        if not UtilClient.is_unset(request.option_shrink):
            body['Option'] = request.option_shrink
        if not UtilClient.is_unset(request.space_id):
            body['SpaceId'] = request.space_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetFileDownloadInfo',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/getFileDownloadInfo',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetFileDownloadInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_file_download_info_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetFileDownloadInfoRequest,
        tmp_header: aliding_20230426_models.GetFileDownloadInfoHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetFileDownloadInfoResponse:
        """
        @summary 获取文件下载信息
        
        @param tmp_req: GetFileDownloadInfoRequest
        @param tmp_header: GetFileDownloadInfoHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetFileDownloadInfoResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetFileDownloadInfoShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetFileDownloadInfoShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.option):
            request.option_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.option, 'Option', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.dentry_id):
            body['DentryId'] = request.dentry_id
        if not UtilClient.is_unset(request.option_shrink):
            body['Option'] = request.option_shrink
        if not UtilClient.is_unset(request.space_id):
            body['SpaceId'] = request.space_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetFileDownloadInfo',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/getFileDownloadInfo',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetFileDownloadInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_file_download_info(
        self,
        request: aliding_20230426_models.GetFileDownloadInfoRequest,
    ) -> aliding_20230426_models.GetFileDownloadInfoResponse:
        """
        @summary 获取文件下载信息
        
        @param request: GetFileDownloadInfoRequest
        @return: GetFileDownloadInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetFileDownloadInfoHeaders()
        return self.get_file_download_info_with_options(request, headers, runtime)

    async def get_file_download_info_async(
        self,
        request: aliding_20230426_models.GetFileDownloadInfoRequest,
    ) -> aliding_20230426_models.GetFileDownloadInfoResponse:
        """
        @summary 获取文件下载信息
        
        @param request: GetFileDownloadInfoRequest
        @return: GetFileDownloadInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetFileDownloadInfoHeaders()
        return await self.get_file_download_info_with_options_async(request, headers, runtime)

    def get_file_upload_info_with_options(
        self,
        tmp_req: aliding_20230426_models.GetFileUploadInfoRequest,
        tmp_header: aliding_20230426_models.GetFileUploadInfoHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetFileUploadInfoResponse:
        """
        @summary 获取文件上传信息
        
        @param tmp_req: GetFileUploadInfoRequest
        @param tmp_header: GetFileUploadInfoHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetFileUploadInfoResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetFileUploadInfoShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetFileUploadInfoShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.option):
            request.option_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.option, 'Option', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.option_shrink):
            body['Option'] = request.option_shrink
        if not UtilClient.is_unset(request.parent_dentry_uuid):
            body['ParentDentryUuid'] = request.parent_dentry_uuid
        if not UtilClient.is_unset(request.protocol):
            body['Protocol'] = request.protocol
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetFileUploadInfo',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/getFileUploadInfo',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetFileUploadInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_file_upload_info_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetFileUploadInfoRequest,
        tmp_header: aliding_20230426_models.GetFileUploadInfoHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetFileUploadInfoResponse:
        """
        @summary 获取文件上传信息
        
        @param tmp_req: GetFileUploadInfoRequest
        @param tmp_header: GetFileUploadInfoHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetFileUploadInfoResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetFileUploadInfoShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetFileUploadInfoShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.option):
            request.option_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.option, 'Option', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.option_shrink):
            body['Option'] = request.option_shrink
        if not UtilClient.is_unset(request.parent_dentry_uuid):
            body['ParentDentryUuid'] = request.parent_dentry_uuid
        if not UtilClient.is_unset(request.protocol):
            body['Protocol'] = request.protocol
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetFileUploadInfo',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/getFileUploadInfo',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetFileUploadInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_file_upload_info(
        self,
        request: aliding_20230426_models.GetFileUploadInfoRequest,
    ) -> aliding_20230426_models.GetFileUploadInfoResponse:
        """
        @summary 获取文件上传信息
        
        @param request: GetFileUploadInfoRequest
        @return: GetFileUploadInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetFileUploadInfoHeaders()
        return self.get_file_upload_info_with_options(request, headers, runtime)

    async def get_file_upload_info_async(
        self,
        request: aliding_20230426_models.GetFileUploadInfoRequest,
    ) -> aliding_20230426_models.GetFileUploadInfoResponse:
        """
        @summary 获取文件上传信息
        
        @param request: GetFileUploadInfoRequest
        @return: GetFileUploadInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetFileUploadInfoHeaders()
        return await self.get_file_upload_info_with_options_async(request, headers, runtime)

    def get_form_component_definition_list_with_options(
        self,
        request: aliding_20230426_models.GetFormComponentDefinitionListRequest,
        tmp_header: aliding_20230426_models.GetFormComponentDefinitionListHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetFormComponentDefinitionListResponse:
        """
        @summary 获取表单组件定义列表
        
        @param request: GetFormComponentDefinitionListRequest
        @param tmp_header: GetFormComponentDefinitionListHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetFormComponentDefinitionListResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetFormComponentDefinitionListShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.form_uuid):
            body['FormUuid'] = request.form_uuid
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetFormComponentDefinitionList',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/getFormComponentDefinitionList',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetFormComponentDefinitionListResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_form_component_definition_list_with_options_async(
        self,
        request: aliding_20230426_models.GetFormComponentDefinitionListRequest,
        tmp_header: aliding_20230426_models.GetFormComponentDefinitionListHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetFormComponentDefinitionListResponse:
        """
        @summary 获取表单组件定义列表
        
        @param request: GetFormComponentDefinitionListRequest
        @param tmp_header: GetFormComponentDefinitionListHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetFormComponentDefinitionListResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetFormComponentDefinitionListShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.form_uuid):
            body['FormUuid'] = request.form_uuid
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetFormComponentDefinitionList',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/getFormComponentDefinitionList',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetFormComponentDefinitionListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_form_component_definition_list(
        self,
        request: aliding_20230426_models.GetFormComponentDefinitionListRequest,
    ) -> aliding_20230426_models.GetFormComponentDefinitionListResponse:
        """
        @summary 获取表单组件定义列表
        
        @param request: GetFormComponentDefinitionListRequest
        @return: GetFormComponentDefinitionListResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetFormComponentDefinitionListHeaders()
        return self.get_form_component_definition_list_with_options(request, headers, runtime)

    async def get_form_component_definition_list_async(
        self,
        request: aliding_20230426_models.GetFormComponentDefinitionListRequest,
    ) -> aliding_20230426_models.GetFormComponentDefinitionListResponse:
        """
        @summary 获取表单组件定义列表
        
        @param request: GetFormComponentDefinitionListRequest
        @return: GetFormComponentDefinitionListResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetFormComponentDefinitionListHeaders()
        return await self.get_form_component_definition_list_with_options_async(request, headers, runtime)

    def get_form_data_by_idwith_options(
        self,
        request: aliding_20230426_models.GetFormDataByIDRequest,
        tmp_header: aliding_20230426_models.GetFormDataByIDHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetFormDataByIDResponse:
        """
        @summary 查询表单数据
        
        @param request: GetFormDataByIDRequest
        @param tmp_header: GetFormDataByIDHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetFormDataByIDResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetFormDataByIDShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetFormDataByID',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/getFormDataByID',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetFormDataByIDResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_form_data_by_idwith_options_async(
        self,
        request: aliding_20230426_models.GetFormDataByIDRequest,
        tmp_header: aliding_20230426_models.GetFormDataByIDHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetFormDataByIDResponse:
        """
        @summary 查询表单数据
        
        @param request: GetFormDataByIDRequest
        @param tmp_header: GetFormDataByIDHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetFormDataByIDResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetFormDataByIDShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetFormDataByID',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/getFormDataByID',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetFormDataByIDResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_form_data_by_id(
        self,
        request: aliding_20230426_models.GetFormDataByIDRequest,
    ) -> aliding_20230426_models.GetFormDataByIDResponse:
        """
        @summary 查询表单数据
        
        @param request: GetFormDataByIDRequest
        @return: GetFormDataByIDResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetFormDataByIDHeaders()
        return self.get_form_data_by_idwith_options(request, headers, runtime)

    async def get_form_data_by_id_async(
        self,
        request: aliding_20230426_models.GetFormDataByIDRequest,
    ) -> aliding_20230426_models.GetFormDataByIDResponse:
        """
        @summary 查询表单数据
        
        @param request: GetFormDataByIDRequest
        @return: GetFormDataByIDResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetFormDataByIDHeaders()
        return await self.get_form_data_by_idwith_options_async(request, headers, runtime)

    def get_form_list_in_app_with_options(
        self,
        request: aliding_20230426_models.GetFormListInAppRequest,
        tmp_header: aliding_20230426_models.GetFormListInAppHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetFormListInAppResponse:
        """
        @summary 获取指定应用下的表单列表
        
        @param request: GetFormListInAppRequest
        @param tmp_header: GetFormListInAppHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetFormListInAppResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetFormListInAppShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.form_types):
            body['FormTypes'] = request.form_types
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetFormListInApp',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/getFormListInApp',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetFormListInAppResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_form_list_in_app_with_options_async(
        self,
        request: aliding_20230426_models.GetFormListInAppRequest,
        tmp_header: aliding_20230426_models.GetFormListInAppHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetFormListInAppResponse:
        """
        @summary 获取指定应用下的表单列表
        
        @param request: GetFormListInAppRequest
        @param tmp_header: GetFormListInAppHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetFormListInAppResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetFormListInAppShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.form_types):
            body['FormTypes'] = request.form_types
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetFormListInApp',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/getFormListInApp',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetFormListInAppResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_form_list_in_app(
        self,
        request: aliding_20230426_models.GetFormListInAppRequest,
    ) -> aliding_20230426_models.GetFormListInAppResponse:
        """
        @summary 获取指定应用下的表单列表
        
        @param request: GetFormListInAppRequest
        @return: GetFormListInAppResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetFormListInAppHeaders()
        return self.get_form_list_in_app_with_options(request, headers, runtime)

    async def get_form_list_in_app_async(
        self,
        request: aliding_20230426_models.GetFormListInAppRequest,
    ) -> aliding_20230426_models.GetFormListInAppResponse:
        """
        @summary 获取指定应用下的表单列表
        
        @param request: GetFormListInAppRequest
        @return: GetFormListInAppResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetFormListInAppHeaders()
        return await self.get_form_list_in_app_with_options_async(request, headers, runtime)

    def get_group_live_list_with_options(
        self,
        tmp_req: aliding_20230426_models.GetGroupLiveListRequest,
        tmp_header: aliding_20230426_models.GetGroupLiveListHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetGroupLiveListResponse:
        """
        @summary 查询群内直播信息(最早支持2024年01月数据)
        
        @param tmp_req: GetGroupLiveListRequest
        @param tmp_header: GetGroupLiveListHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetGroupLiveListResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetGroupLiveListShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetGroupLiveListShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.end_time):
            body['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.open_conversation_id):
            body['OpenConversationId'] = request.open_conversation_id
        if not UtilClient.is_unset(request.start_time):
            body['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetGroupLiveList',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/getGroupLiveList',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetGroupLiveListResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_group_live_list_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetGroupLiveListRequest,
        tmp_header: aliding_20230426_models.GetGroupLiveListHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetGroupLiveListResponse:
        """
        @summary 查询群内直播信息(最早支持2024年01月数据)
        
        @param tmp_req: GetGroupLiveListRequest
        @param tmp_header: GetGroupLiveListHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetGroupLiveListResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetGroupLiveListShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetGroupLiveListShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.end_time):
            body['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.open_conversation_id):
            body['OpenConversationId'] = request.open_conversation_id
        if not UtilClient.is_unset(request.start_time):
            body['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetGroupLiveList',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/getGroupLiveList',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetGroupLiveListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_group_live_list(
        self,
        request: aliding_20230426_models.GetGroupLiveListRequest,
    ) -> aliding_20230426_models.GetGroupLiveListResponse:
        """
        @summary 查询群内直播信息(最早支持2024年01月数据)
        
        @param request: GetGroupLiveListRequest
        @return: GetGroupLiveListResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetGroupLiveListHeaders()
        return self.get_group_live_list_with_options(request, headers, runtime)

    async def get_group_live_list_async(
        self,
        request: aliding_20230426_models.GetGroupLiveListRequest,
    ) -> aliding_20230426_models.GetGroupLiveListResponse:
        """
        @summary 查询群内直播信息(最早支持2024年01月数据)
        
        @param request: GetGroupLiveListRequest
        @return: GetGroupLiveListResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetGroupLiveListHeaders()
        return await self.get_group_live_list_with_options_async(request, headers, runtime)

    def get_inner_group_members_with_options(
        self,
        request: aliding_20230426_models.GetInnerGroupMembersRequest,
        tmp_header: aliding_20230426_models.GetInnerGroupMembersHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetInnerGroupMembersResponse:
        """
        @summary 查询企业内部群成员
        
        @param request: GetInnerGroupMembersRequest
        @param tmp_header: GetInnerGroupMembersHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetInnerGroupMembersResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetInnerGroupMembersShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.max_results):
            body['MaxResults'] = request.max_results
        if not UtilClient.is_unset(request.next_token):
            body['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.open_conversation_id):
            body['OpenConversationId'] = request.open_conversation_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetInnerGroupMembers',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/im/getInnerGroupMembers',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetInnerGroupMembersResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_inner_group_members_with_options_async(
        self,
        request: aliding_20230426_models.GetInnerGroupMembersRequest,
        tmp_header: aliding_20230426_models.GetInnerGroupMembersHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetInnerGroupMembersResponse:
        """
        @summary 查询企业内部群成员
        
        @param request: GetInnerGroupMembersRequest
        @param tmp_header: GetInnerGroupMembersHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetInnerGroupMembersResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetInnerGroupMembersShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.max_results):
            body['MaxResults'] = request.max_results
        if not UtilClient.is_unset(request.next_token):
            body['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.open_conversation_id):
            body['OpenConversationId'] = request.open_conversation_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetInnerGroupMembers',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/im/getInnerGroupMembers',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetInnerGroupMembersResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_inner_group_members(
        self,
        request: aliding_20230426_models.GetInnerGroupMembersRequest,
    ) -> aliding_20230426_models.GetInnerGroupMembersResponse:
        """
        @summary 查询企业内部群成员
        
        @param request: GetInnerGroupMembersRequest
        @return: GetInnerGroupMembersResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetInnerGroupMembersHeaders()
        return self.get_inner_group_members_with_options(request, headers, runtime)

    async def get_inner_group_members_async(
        self,
        request: aliding_20230426_models.GetInnerGroupMembersRequest,
    ) -> aliding_20230426_models.GetInnerGroupMembersResponse:
        """
        @summary 查询企业内部群成员
        
        @param request: GetInnerGroupMembersRequest
        @return: GetInnerGroupMembersResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetInnerGroupMembersHeaders()
        return await self.get_inner_group_members_with_options_async(request, headers, runtime)

    def get_instance_by_id_with_options(
        self,
        request: aliding_20230426_models.GetInstanceByIdRequest,
        tmp_header: aliding_20230426_models.GetInstanceByIdHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetInstanceByIdResponse:
        """
        @summary 根据流程实例ID获取流程实例
        
        @param request: GetInstanceByIdRequest
        @param tmp_header: GetInstanceByIdHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetInstanceByIdResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetInstanceByIdShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetInstanceById',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/getInstanceById',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetInstanceByIdResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_instance_by_id_with_options_async(
        self,
        request: aliding_20230426_models.GetInstanceByIdRequest,
        tmp_header: aliding_20230426_models.GetInstanceByIdHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetInstanceByIdResponse:
        """
        @summary 根据流程实例ID获取流程实例
        
        @param request: GetInstanceByIdRequest
        @param tmp_header: GetInstanceByIdHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetInstanceByIdResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetInstanceByIdShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetInstanceById',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/getInstanceById',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetInstanceByIdResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_instance_by_id(
        self,
        request: aliding_20230426_models.GetInstanceByIdRequest,
    ) -> aliding_20230426_models.GetInstanceByIdResponse:
        """
        @summary 根据流程实例ID获取流程实例
        
        @param request: GetInstanceByIdRequest
        @return: GetInstanceByIdResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetInstanceByIdHeaders()
        return self.get_instance_by_id_with_options(request, headers, runtime)

    async def get_instance_by_id_async(
        self,
        request: aliding_20230426_models.GetInstanceByIdRequest,
    ) -> aliding_20230426_models.GetInstanceByIdResponse:
        """
        @summary 根据流程实例ID获取流程实例
        
        @param request: GetInstanceByIdRequest
        @return: GetInstanceByIdResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetInstanceByIdHeaders()
        return await self.get_instance_by_id_with_options_async(request, headers, runtime)

    def get_instance_id_list_with_options(
        self,
        request: aliding_20230426_models.GetInstanceIdListRequest,
        tmp_header: aliding_20230426_models.GetInstanceIdListHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetInstanceIdListResponse:
        """
        @summary 获取实例ID列表
        
        @param request: GetInstanceIdListRequest
        @param tmp_header: GetInstanceIdListHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetInstanceIdListResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetInstanceIdListShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.approved_result):
            body['ApprovedResult'] = request.approved_result
        if not UtilClient.is_unset(request.create_from_time_gmt):
            body['CreateFromTimeGMT'] = request.create_from_time_gmt
        if not UtilClient.is_unset(request.create_to_time_gmt):
            body['CreateToTimeGMT'] = request.create_to_time_gmt
        if not UtilClient.is_unset(request.form_uuid):
            body['FormUuid'] = request.form_uuid
        if not UtilClient.is_unset(request.instance_status):
            body['InstanceStatus'] = request.instance_status
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.modified_from_time_gmt):
            body['ModifiedFromTimeGMT'] = request.modified_from_time_gmt
        if not UtilClient.is_unset(request.modified_to_time_gmt):
            body['ModifiedToTimeGMT'] = request.modified_to_time_gmt
        if not UtilClient.is_unset(request.originator_id):
            body['OriginatorId'] = request.originator_id
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.search_field_json):
            body['SearchFieldJson'] = request.search_field_json
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        if not UtilClient.is_unset(request.task_id):
            body['TaskId'] = request.task_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetInstanceIdList',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/getInstanceIdList',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetInstanceIdListResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_instance_id_list_with_options_async(
        self,
        request: aliding_20230426_models.GetInstanceIdListRequest,
        tmp_header: aliding_20230426_models.GetInstanceIdListHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetInstanceIdListResponse:
        """
        @summary 获取实例ID列表
        
        @param request: GetInstanceIdListRequest
        @param tmp_header: GetInstanceIdListHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetInstanceIdListResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetInstanceIdListShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.approved_result):
            body['ApprovedResult'] = request.approved_result
        if not UtilClient.is_unset(request.create_from_time_gmt):
            body['CreateFromTimeGMT'] = request.create_from_time_gmt
        if not UtilClient.is_unset(request.create_to_time_gmt):
            body['CreateToTimeGMT'] = request.create_to_time_gmt
        if not UtilClient.is_unset(request.form_uuid):
            body['FormUuid'] = request.form_uuid
        if not UtilClient.is_unset(request.instance_status):
            body['InstanceStatus'] = request.instance_status
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.modified_from_time_gmt):
            body['ModifiedFromTimeGMT'] = request.modified_from_time_gmt
        if not UtilClient.is_unset(request.modified_to_time_gmt):
            body['ModifiedToTimeGMT'] = request.modified_to_time_gmt
        if not UtilClient.is_unset(request.originator_id):
            body['OriginatorId'] = request.originator_id
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.search_field_json):
            body['SearchFieldJson'] = request.search_field_json
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        if not UtilClient.is_unset(request.task_id):
            body['TaskId'] = request.task_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetInstanceIdList',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/getInstanceIdList',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetInstanceIdListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_instance_id_list(
        self,
        request: aliding_20230426_models.GetInstanceIdListRequest,
    ) -> aliding_20230426_models.GetInstanceIdListResponse:
        """
        @summary 获取实例ID列表
        
        @param request: GetInstanceIdListRequest
        @return: GetInstanceIdListResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetInstanceIdListHeaders()
        return self.get_instance_id_list_with_options(request, headers, runtime)

    async def get_instance_id_list_async(
        self,
        request: aliding_20230426_models.GetInstanceIdListRequest,
    ) -> aliding_20230426_models.GetInstanceIdListResponse:
        """
        @summary 获取实例ID列表
        
        @param request: GetInstanceIdListRequest
        @return: GetInstanceIdListResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetInstanceIdListHeaders()
        return await self.get_instance_id_list_with_options_async(request, headers, runtime)

    def get_instances_with_options(
        self,
        request: aliding_20230426_models.GetInstancesRequest,
        tmp_header: aliding_20230426_models.GetInstancesHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetInstancesResponse:
        """
        @summary 获取流程实例
        
        @param request: GetInstancesRequest
        @param tmp_header: GetInstancesHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetInstancesResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetInstancesShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.approved_result):
            body['ApprovedResult'] = request.approved_result
        if not UtilClient.is_unset(request.create_from_time_gmt):
            body['CreateFromTimeGMT'] = request.create_from_time_gmt
        if not UtilClient.is_unset(request.create_to_time_gmt):
            body['CreateToTimeGMT'] = request.create_to_time_gmt
        if not UtilClient.is_unset(request.form_uuid):
            body['FormUuid'] = request.form_uuid
        if not UtilClient.is_unset(request.instance_status):
            body['InstanceStatus'] = request.instance_status
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.modified_from_time_gmt):
            body['ModifiedFromTimeGMT'] = request.modified_from_time_gmt
        if not UtilClient.is_unset(request.modified_to_time_gmt):
            body['ModifiedToTimeGMT'] = request.modified_to_time_gmt
        if not UtilClient.is_unset(request.order_config_json):
            body['OrderConfigJson'] = request.order_config_json
        if not UtilClient.is_unset(request.originator_id):
            body['OriginatorId'] = request.originator_id
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.search_field_json):
            body['SearchFieldJson'] = request.search_field_json
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        if not UtilClient.is_unset(request.task_id):
            body['TaskId'] = request.task_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetInstances',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/getInstances',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetInstancesResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_instances_with_options_async(
        self,
        request: aliding_20230426_models.GetInstancesRequest,
        tmp_header: aliding_20230426_models.GetInstancesHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetInstancesResponse:
        """
        @summary 获取流程实例
        
        @param request: GetInstancesRequest
        @param tmp_header: GetInstancesHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetInstancesResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetInstancesShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.approved_result):
            body['ApprovedResult'] = request.approved_result
        if not UtilClient.is_unset(request.create_from_time_gmt):
            body['CreateFromTimeGMT'] = request.create_from_time_gmt
        if not UtilClient.is_unset(request.create_to_time_gmt):
            body['CreateToTimeGMT'] = request.create_to_time_gmt
        if not UtilClient.is_unset(request.form_uuid):
            body['FormUuid'] = request.form_uuid
        if not UtilClient.is_unset(request.instance_status):
            body['InstanceStatus'] = request.instance_status
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.modified_from_time_gmt):
            body['ModifiedFromTimeGMT'] = request.modified_from_time_gmt
        if not UtilClient.is_unset(request.modified_to_time_gmt):
            body['ModifiedToTimeGMT'] = request.modified_to_time_gmt
        if not UtilClient.is_unset(request.order_config_json):
            body['OrderConfigJson'] = request.order_config_json
        if not UtilClient.is_unset(request.originator_id):
            body['OriginatorId'] = request.originator_id
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.search_field_json):
            body['SearchFieldJson'] = request.search_field_json
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        if not UtilClient.is_unset(request.task_id):
            body['TaskId'] = request.task_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetInstances',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/getInstances',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetInstancesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_instances(
        self,
        request: aliding_20230426_models.GetInstancesRequest,
    ) -> aliding_20230426_models.GetInstancesResponse:
        """
        @summary 获取流程实例
        
        @param request: GetInstancesRequest
        @return: GetInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetInstancesHeaders()
        return self.get_instances_with_options(request, headers, runtime)

    async def get_instances_async(
        self,
        request: aliding_20230426_models.GetInstancesRequest,
    ) -> aliding_20230426_models.GetInstancesResponse:
        """
        @summary 获取流程实例
        
        @param request: GetInstancesRequest
        @return: GetInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetInstancesHeaders()
        return await self.get_instances_with_options_async(request, headers, runtime)

    def get_instances_by_id_list_with_options(
        self,
        request: aliding_20230426_models.GetInstancesByIdListRequest,
        tmp_header: aliding_20230426_models.GetInstancesByIdListHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetInstancesByIdListResponse:
        """
        @summary 根据实例 ID 列表批量获取流程实例详情(批量获取流程实例列表)
        
        @param request: GetInstancesByIdListRequest
        @param tmp_header: GetInstancesByIdListHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetInstancesByIdListResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetInstancesByIdListShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.process_instance_ids):
            body['ProcessInstanceIds'] = request.process_instance_ids
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetInstancesByIdList',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/getInstancesByIdList',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetInstancesByIdListResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_instances_by_id_list_with_options_async(
        self,
        request: aliding_20230426_models.GetInstancesByIdListRequest,
        tmp_header: aliding_20230426_models.GetInstancesByIdListHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetInstancesByIdListResponse:
        """
        @summary 根据实例 ID 列表批量获取流程实例详情(批量获取流程实例列表)
        
        @param request: GetInstancesByIdListRequest
        @param tmp_header: GetInstancesByIdListHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetInstancesByIdListResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetInstancesByIdListShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.process_instance_ids):
            body['ProcessInstanceIds'] = request.process_instance_ids
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetInstancesByIdList',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/getInstancesByIdList',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetInstancesByIdListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_instances_by_id_list(
        self,
        request: aliding_20230426_models.GetInstancesByIdListRequest,
    ) -> aliding_20230426_models.GetInstancesByIdListResponse:
        """
        @summary 根据实例 ID 列表批量获取流程实例详情(批量获取流程实例列表)
        
        @param request: GetInstancesByIdListRequest
        @return: GetInstancesByIdListResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetInstancesByIdListHeaders()
        return self.get_instances_by_id_list_with_options(request, headers, runtime)

    async def get_instances_by_id_list_async(
        self,
        request: aliding_20230426_models.GetInstancesByIdListRequest,
    ) -> aliding_20230426_models.GetInstancesByIdListResponse:
        """
        @summary 根据实例 ID 列表批量获取流程实例详情(批量获取流程实例列表)
        
        @param request: GetInstancesByIdListRequest
        @return: GetInstancesByIdListResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetInstancesByIdListHeaders()
        return await self.get_instances_by_id_list_with_options_async(request, headers, runtime)

    def get_live_replay_url_with_options(
        self,
        tmp_req: aliding_20230426_models.GetLiveReplayUrlRequest,
        tmp_header: aliding_20230426_models.GetLiveReplayUrlHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetLiveReplayUrlResponse:
        """
        @summary 获取直播的可下载回放地址
        
        @param tmp_req: GetLiveReplayUrlRequest
        @param tmp_header: GetLiveReplayUrlHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetLiveReplayUrlResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetLiveReplayUrlShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetLiveReplayUrlShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.live_id):
            body['LiveId'] = request.live_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetLiveReplayUrl',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/getLiveReplayUrl',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetLiveReplayUrlResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_live_replay_url_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetLiveReplayUrlRequest,
        tmp_header: aliding_20230426_models.GetLiveReplayUrlHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetLiveReplayUrlResponse:
        """
        @summary 获取直播的可下载回放地址
        
        @param tmp_req: GetLiveReplayUrlRequest
        @param tmp_header: GetLiveReplayUrlHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetLiveReplayUrlResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetLiveReplayUrlShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetLiveReplayUrlShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.live_id):
            body['LiveId'] = request.live_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetLiveReplayUrl',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/getLiveReplayUrl',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetLiveReplayUrlResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_live_replay_url(
        self,
        request: aliding_20230426_models.GetLiveReplayUrlRequest,
    ) -> aliding_20230426_models.GetLiveReplayUrlResponse:
        """
        @summary 获取直播的可下载回放地址
        
        @param request: GetLiveReplayUrlRequest
        @return: GetLiveReplayUrlResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetLiveReplayUrlHeaders()
        return self.get_live_replay_url_with_options(request, headers, runtime)

    async def get_live_replay_url_async(
        self,
        request: aliding_20230426_models.GetLiveReplayUrlRequest,
    ) -> aliding_20230426_models.GetLiveReplayUrlResponse:
        """
        @summary 获取直播的可下载回放地址
        
        @param request: GetLiveReplayUrlRequest
        @return: GetLiveReplayUrlResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetLiveReplayUrlHeaders()
        return await self.get_live_replay_url_with_options_async(request, headers, runtime)

    def get_me_corp_submission_with_options(
        self,
        request: aliding_20230426_models.GetMeCorpSubmissionRequest,
        tmp_header: aliding_20230426_models.GetMeCorpSubmissionHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetMeCorpSubmissionResponse:
        """
        @summary 获取组织内某人提交的任务
        
        @param request: GetMeCorpSubmissionRequest
        @param tmp_header: GetMeCorpSubmissionHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetMeCorpSubmissionResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetMeCorpSubmissionShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_types):
            body['AppTypes'] = request.app_types
        if not UtilClient.is_unset(request.corp_id):
            body['CorpId'] = request.corp_id
        if not UtilClient.is_unset(request.create_from_time_gmt):
            body['CreateFromTimeGMT'] = request.create_from_time_gmt
        if not UtilClient.is_unset(request.create_to_time_gmt):
            body['CreateToTimeGMT'] = request.create_to_time_gmt
        if not UtilClient.is_unset(request.keyword):
            body['Keyword'] = request.keyword
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.process_codes):
            body['ProcessCodes'] = request.process_codes
        if not UtilClient.is_unset(request.token):
            body['Token'] = request.token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetMeCorpSubmission',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/getMeCorpSubmission',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetMeCorpSubmissionResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_me_corp_submission_with_options_async(
        self,
        request: aliding_20230426_models.GetMeCorpSubmissionRequest,
        tmp_header: aliding_20230426_models.GetMeCorpSubmissionHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetMeCorpSubmissionResponse:
        """
        @summary 获取组织内某人提交的任务
        
        @param request: GetMeCorpSubmissionRequest
        @param tmp_header: GetMeCorpSubmissionHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetMeCorpSubmissionResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetMeCorpSubmissionShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_types):
            body['AppTypes'] = request.app_types
        if not UtilClient.is_unset(request.corp_id):
            body['CorpId'] = request.corp_id
        if not UtilClient.is_unset(request.create_from_time_gmt):
            body['CreateFromTimeGMT'] = request.create_from_time_gmt
        if not UtilClient.is_unset(request.create_to_time_gmt):
            body['CreateToTimeGMT'] = request.create_to_time_gmt
        if not UtilClient.is_unset(request.keyword):
            body['Keyword'] = request.keyword
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.process_codes):
            body['ProcessCodes'] = request.process_codes
        if not UtilClient.is_unset(request.token):
            body['Token'] = request.token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetMeCorpSubmission',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/getMeCorpSubmission',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetMeCorpSubmissionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_me_corp_submission(
        self,
        request: aliding_20230426_models.GetMeCorpSubmissionRequest,
    ) -> aliding_20230426_models.GetMeCorpSubmissionResponse:
        """
        @summary 获取组织内某人提交的任务
        
        @param request: GetMeCorpSubmissionRequest
        @return: GetMeCorpSubmissionResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetMeCorpSubmissionHeaders()
        return self.get_me_corp_submission_with_options(request, headers, runtime)

    async def get_me_corp_submission_async(
        self,
        request: aliding_20230426_models.GetMeCorpSubmissionRequest,
    ) -> aliding_20230426_models.GetMeCorpSubmissionResponse:
        """
        @summary 获取组织内某人提交的任务
        
        @param request: GetMeCorpSubmissionRequest
        @return: GetMeCorpSubmissionResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetMeCorpSubmissionHeaders()
        return await self.get_me_corp_submission_with_options_async(request, headers, runtime)

    def get_meeting_rooms_schedule_with_options(
        self,
        tmp_req: aliding_20230426_models.GetMeetingRoomsScheduleRequest,
        tmp_header: aliding_20230426_models.GetMeetingRoomsScheduleHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetMeetingRoomsScheduleResponse:
        """
        @summary 获取会议室忙闲信息
        
        @param tmp_req: GetMeetingRoomsScheduleRequest
        @param tmp_header: GetMeetingRoomsScheduleHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetMeetingRoomsScheduleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetMeetingRoomsScheduleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetMeetingRoomsScheduleShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.room_ids):
            request.room_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.room_ids, 'RoomIds', 'json')
        body = {}
        if not UtilClient.is_unset(request.end_time):
            body['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.room_ids_shrink):
            body['RoomIds'] = request.room_ids_shrink
        if not UtilClient.is_unset(request.start_time):
            body['StartTime'] = request.start_time
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetMeetingRoomsSchedule',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/getMeetingRoomsSchedule',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetMeetingRoomsScheduleResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_meeting_rooms_schedule_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetMeetingRoomsScheduleRequest,
        tmp_header: aliding_20230426_models.GetMeetingRoomsScheduleHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetMeetingRoomsScheduleResponse:
        """
        @summary 获取会议室忙闲信息
        
        @param tmp_req: GetMeetingRoomsScheduleRequest
        @param tmp_header: GetMeetingRoomsScheduleHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetMeetingRoomsScheduleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetMeetingRoomsScheduleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetMeetingRoomsScheduleShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.room_ids):
            request.room_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.room_ids, 'RoomIds', 'json')
        body = {}
        if not UtilClient.is_unset(request.end_time):
            body['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.room_ids_shrink):
            body['RoomIds'] = request.room_ids_shrink
        if not UtilClient.is_unset(request.start_time):
            body['StartTime'] = request.start_time
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetMeetingRoomsSchedule',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/getMeetingRoomsSchedule',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetMeetingRoomsScheduleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_meeting_rooms_schedule(
        self,
        request: aliding_20230426_models.GetMeetingRoomsScheduleRequest,
    ) -> aliding_20230426_models.GetMeetingRoomsScheduleResponse:
        """
        @summary 获取会议室忙闲信息
        
        @param request: GetMeetingRoomsScheduleRequest
        @return: GetMeetingRoomsScheduleResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetMeetingRoomsScheduleHeaders()
        return self.get_meeting_rooms_schedule_with_options(request, headers, runtime)

    async def get_meeting_rooms_schedule_async(
        self,
        request: aliding_20230426_models.GetMeetingRoomsScheduleRequest,
    ) -> aliding_20230426_models.GetMeetingRoomsScheduleResponse:
        """
        @summary 获取会议室忙闲信息
        
        @param request: GetMeetingRoomsScheduleRequest
        @return: GetMeetingRoomsScheduleResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetMeetingRoomsScheduleHeaders()
        return await self.get_meeting_rooms_schedule_with_options_async(request, headers, runtime)

    def get_mine_workspace_with_options(
        self,
        tmp_req: aliding_20230426_models.GetMineWorkspaceRequest,
        tmp_header: aliding_20230426_models.GetMineWorkspaceHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetMineWorkspaceResponse:
        """
        @summary 获取我的文档知识库信息
        
        @param tmp_req: GetMineWorkspaceRequest
        @param tmp_header: GetMineWorkspaceHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetMineWorkspaceResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetMineWorkspaceShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetMineWorkspaceShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.request):
            request.request_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.request, 'Request', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.request_shrink):
            body['Request'] = request.request_shrink
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetMineWorkspace',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v2/documents/getMineWorkspace',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetMineWorkspaceResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_mine_workspace_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetMineWorkspaceRequest,
        tmp_header: aliding_20230426_models.GetMineWorkspaceHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetMineWorkspaceResponse:
        """
        @summary 获取我的文档知识库信息
        
        @param tmp_req: GetMineWorkspaceRequest
        @param tmp_header: GetMineWorkspaceHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetMineWorkspaceResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetMineWorkspaceShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetMineWorkspaceShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.request):
            request.request_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.request, 'Request', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.request_shrink):
            body['Request'] = request.request_shrink
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetMineWorkspace',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v2/documents/getMineWorkspace',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetMineWorkspaceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_mine_workspace(
        self,
        request: aliding_20230426_models.GetMineWorkspaceRequest,
    ) -> aliding_20230426_models.GetMineWorkspaceResponse:
        """
        @summary 获取我的文档知识库信息
        
        @param request: GetMineWorkspaceRequest
        @return: GetMineWorkspaceResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetMineWorkspaceHeaders()
        return self.get_mine_workspace_with_options(request, headers, runtime)

    async def get_mine_workspace_async(
        self,
        request: aliding_20230426_models.GetMineWorkspaceRequest,
    ) -> aliding_20230426_models.GetMineWorkspaceResponse:
        """
        @summary 获取我的文档知识库信息
        
        @param request: GetMineWorkspaceRequest
        @return: GetMineWorkspaceResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetMineWorkspaceHeaders()
        return await self.get_mine_workspace_with_options_async(request, headers, runtime)

    def get_multi_dim_table_all_fields_with_options(
        self,
        tmp_req: aliding_20230426_models.GetMultiDimTableAllFieldsRequest,
        tmp_header: aliding_20230426_models.GetMultiDimTableAllFieldsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetMultiDimTableAllFieldsResponse:
        """
        @summary 获取所有字段
        
        @param tmp_req: GetMultiDimTableAllFieldsRequest
        @param tmp_header: GetMultiDimTableAllFieldsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetMultiDimTableAllFieldsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetMultiDimTableAllFieldsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetMultiDimTableAllFieldsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.base_id):
            body['BaseId'] = request.base_id
        if not UtilClient.is_unset(request.sheet_id_or_name):
            body['SheetIdOrName'] = request.sheet_id_or_name
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetMultiDimTableAllFields',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/table/getMultiDimTableAllFields',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetMultiDimTableAllFieldsResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_multi_dim_table_all_fields_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetMultiDimTableAllFieldsRequest,
        tmp_header: aliding_20230426_models.GetMultiDimTableAllFieldsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetMultiDimTableAllFieldsResponse:
        """
        @summary 获取所有字段
        
        @param tmp_req: GetMultiDimTableAllFieldsRequest
        @param tmp_header: GetMultiDimTableAllFieldsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetMultiDimTableAllFieldsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetMultiDimTableAllFieldsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetMultiDimTableAllFieldsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.base_id):
            body['BaseId'] = request.base_id
        if not UtilClient.is_unset(request.sheet_id_or_name):
            body['SheetIdOrName'] = request.sheet_id_or_name
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetMultiDimTableAllFields',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/table/getMultiDimTableAllFields',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetMultiDimTableAllFieldsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_multi_dim_table_all_fields(
        self,
        request: aliding_20230426_models.GetMultiDimTableAllFieldsRequest,
    ) -> aliding_20230426_models.GetMultiDimTableAllFieldsResponse:
        """
        @summary 获取所有字段
        
        @param request: GetMultiDimTableAllFieldsRequest
        @return: GetMultiDimTableAllFieldsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetMultiDimTableAllFieldsHeaders()
        return self.get_multi_dim_table_all_fields_with_options(request, headers, runtime)

    async def get_multi_dim_table_all_fields_async(
        self,
        request: aliding_20230426_models.GetMultiDimTableAllFieldsRequest,
    ) -> aliding_20230426_models.GetMultiDimTableAllFieldsResponse:
        """
        @summary 获取所有字段
        
        @param request: GetMultiDimTableAllFieldsRequest
        @return: GetMultiDimTableAllFieldsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetMultiDimTableAllFieldsHeaders()
        return await self.get_multi_dim_table_all_fields_with_options_async(request, headers, runtime)

    def get_multi_dim_table_all_sheets_with_options(
        self,
        tmp_req: aliding_20230426_models.GetMultiDimTableAllSheetsRequest,
        tmp_header: aliding_20230426_models.GetMultiDimTableAllSheetsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetMultiDimTableAllSheetsResponse:
        """
        @summary 获取所有数据表
        
        @param tmp_req: GetMultiDimTableAllSheetsRequest
        @param tmp_header: GetMultiDimTableAllSheetsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetMultiDimTableAllSheetsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetMultiDimTableAllSheetsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetMultiDimTableAllSheetsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.base_id):
            body['BaseId'] = request.base_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetMultiDimTableAllSheets',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/table/getMultiDimTableAllSheets',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetMultiDimTableAllSheetsResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_multi_dim_table_all_sheets_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetMultiDimTableAllSheetsRequest,
        tmp_header: aliding_20230426_models.GetMultiDimTableAllSheetsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetMultiDimTableAllSheetsResponse:
        """
        @summary 获取所有数据表
        
        @param tmp_req: GetMultiDimTableAllSheetsRequest
        @param tmp_header: GetMultiDimTableAllSheetsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetMultiDimTableAllSheetsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetMultiDimTableAllSheetsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetMultiDimTableAllSheetsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.base_id):
            body['BaseId'] = request.base_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetMultiDimTableAllSheets',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/table/getMultiDimTableAllSheets',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetMultiDimTableAllSheetsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_multi_dim_table_all_sheets(
        self,
        request: aliding_20230426_models.GetMultiDimTableAllSheetsRequest,
    ) -> aliding_20230426_models.GetMultiDimTableAllSheetsResponse:
        """
        @summary 获取所有数据表
        
        @param request: GetMultiDimTableAllSheetsRequest
        @return: GetMultiDimTableAllSheetsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetMultiDimTableAllSheetsHeaders()
        return self.get_multi_dim_table_all_sheets_with_options(request, headers, runtime)

    async def get_multi_dim_table_all_sheets_async(
        self,
        request: aliding_20230426_models.GetMultiDimTableAllSheetsRequest,
    ) -> aliding_20230426_models.GetMultiDimTableAllSheetsResponse:
        """
        @summary 获取所有数据表
        
        @param request: GetMultiDimTableAllSheetsRequest
        @return: GetMultiDimTableAllSheetsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetMultiDimTableAllSheetsHeaders()
        return await self.get_multi_dim_table_all_sheets_with_options_async(request, headers, runtime)

    def get_multi_dim_table_record_with_options(
        self,
        tmp_req: aliding_20230426_models.GetMultiDimTableRecordRequest,
        tmp_header: aliding_20230426_models.GetMultiDimTableRecordHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetMultiDimTableRecordResponse:
        """
        @summary 获取记录
        
        @param tmp_req: GetMultiDimTableRecordRequest
        @param tmp_header: GetMultiDimTableRecordHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetMultiDimTableRecordResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetMultiDimTableRecordShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetMultiDimTableRecordShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.base_id):
            body['BaseId'] = request.base_id
        if not UtilClient.is_unset(request.record_id):
            body['RecordId'] = request.record_id
        if not UtilClient.is_unset(request.sheet_id_or_name):
            body['SheetIdOrName'] = request.sheet_id_or_name
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetMultiDimTableRecord',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/table/getMultiDimTableRecord',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetMultiDimTableRecordResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_multi_dim_table_record_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetMultiDimTableRecordRequest,
        tmp_header: aliding_20230426_models.GetMultiDimTableRecordHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetMultiDimTableRecordResponse:
        """
        @summary 获取记录
        
        @param tmp_req: GetMultiDimTableRecordRequest
        @param tmp_header: GetMultiDimTableRecordHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetMultiDimTableRecordResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetMultiDimTableRecordShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetMultiDimTableRecordShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.base_id):
            body['BaseId'] = request.base_id
        if not UtilClient.is_unset(request.record_id):
            body['RecordId'] = request.record_id
        if not UtilClient.is_unset(request.sheet_id_or_name):
            body['SheetIdOrName'] = request.sheet_id_or_name
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetMultiDimTableRecord',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/table/getMultiDimTableRecord',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetMultiDimTableRecordResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_multi_dim_table_record(
        self,
        request: aliding_20230426_models.GetMultiDimTableRecordRequest,
    ) -> aliding_20230426_models.GetMultiDimTableRecordResponse:
        """
        @summary 获取记录
        
        @param request: GetMultiDimTableRecordRequest
        @return: GetMultiDimTableRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetMultiDimTableRecordHeaders()
        return self.get_multi_dim_table_record_with_options(request, headers, runtime)

    async def get_multi_dim_table_record_async(
        self,
        request: aliding_20230426_models.GetMultiDimTableRecordRequest,
    ) -> aliding_20230426_models.GetMultiDimTableRecordResponse:
        """
        @summary 获取记录
        
        @param request: GetMultiDimTableRecordRequest
        @return: GetMultiDimTableRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetMultiDimTableRecordHeaders()
        return await self.get_multi_dim_table_record_with_options_async(request, headers, runtime)

    def get_multi_dim_table_sheet_with_options(
        self,
        tmp_req: aliding_20230426_models.GetMultiDimTableSheetRequest,
        tmp_header: aliding_20230426_models.GetMultiDimTableSheetHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetMultiDimTableSheetResponse:
        """
        @summary 获取数据表
        
        @param tmp_req: GetMultiDimTableSheetRequest
        @param tmp_header: GetMultiDimTableSheetHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetMultiDimTableSheetResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetMultiDimTableSheetShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetMultiDimTableSheetShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.base_id):
            body['BaseId'] = request.base_id
        if not UtilClient.is_unset(request.sheet_id_or_name):
            body['SheetIdOrName'] = request.sheet_id_or_name
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetMultiDimTableSheet',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/table/getMultiDimTableSheet',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetMultiDimTableSheetResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_multi_dim_table_sheet_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetMultiDimTableSheetRequest,
        tmp_header: aliding_20230426_models.GetMultiDimTableSheetHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetMultiDimTableSheetResponse:
        """
        @summary 获取数据表
        
        @param tmp_req: GetMultiDimTableSheetRequest
        @param tmp_header: GetMultiDimTableSheetHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetMultiDimTableSheetResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetMultiDimTableSheetShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetMultiDimTableSheetShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.base_id):
            body['BaseId'] = request.base_id
        if not UtilClient.is_unset(request.sheet_id_or_name):
            body['SheetIdOrName'] = request.sheet_id_or_name
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetMultiDimTableSheet',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/table/getMultiDimTableSheet',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetMultiDimTableSheetResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_multi_dim_table_sheet(
        self,
        request: aliding_20230426_models.GetMultiDimTableSheetRequest,
    ) -> aliding_20230426_models.GetMultiDimTableSheetResponse:
        """
        @summary 获取数据表
        
        @param request: GetMultiDimTableSheetRequest
        @return: GetMultiDimTableSheetResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetMultiDimTableSheetHeaders()
        return self.get_multi_dim_table_sheet_with_options(request, headers, runtime)

    async def get_multi_dim_table_sheet_async(
        self,
        request: aliding_20230426_models.GetMultiDimTableSheetRequest,
    ) -> aliding_20230426_models.GetMultiDimTableSheetResponse:
        """
        @summary 获取数据表
        
        @param request: GetMultiDimTableSheetRequest
        @return: GetMultiDimTableSheetResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetMultiDimTableSheetHeaders()
        return await self.get_multi_dim_table_sheet_with_options_async(request, headers, runtime)

    def get_multipart_file_upload_infos_with_options(
        self,
        tmp_req: aliding_20230426_models.GetMultipartFileUploadInfosRequest,
        tmp_header: aliding_20230426_models.GetMultipartFileUploadInfosHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetMultipartFileUploadInfosResponse:
        """
        @summary 获取文件分片上传信息
        
        @param tmp_req: GetMultipartFileUploadInfosRequest
        @param tmp_header: GetMultipartFileUploadInfosHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetMultipartFileUploadInfosResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetMultipartFileUploadInfosShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetMultipartFileUploadInfosShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.option):
            request.option_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.option, 'Option', 'json')
        if not UtilClient.is_unset(tmp_req.part_numbers):
            request.part_numbers_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.part_numbers, 'PartNumbers', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.option_shrink):
            body['Option'] = request.option_shrink
        if not UtilClient.is_unset(request.part_numbers_shrink):
            body['PartNumbers'] = request.part_numbers_shrink
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.upload_key):
            body['UploadKey'] = request.upload_key
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetMultipartFileUploadInfos',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/GetMultipartFileUploadInfos',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetMultipartFileUploadInfosResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_multipart_file_upload_infos_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetMultipartFileUploadInfosRequest,
        tmp_header: aliding_20230426_models.GetMultipartFileUploadInfosHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetMultipartFileUploadInfosResponse:
        """
        @summary 获取文件分片上传信息
        
        @param tmp_req: GetMultipartFileUploadInfosRequest
        @param tmp_header: GetMultipartFileUploadInfosHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetMultipartFileUploadInfosResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetMultipartFileUploadInfosShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetMultipartFileUploadInfosShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.option):
            request.option_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.option, 'Option', 'json')
        if not UtilClient.is_unset(tmp_req.part_numbers):
            request.part_numbers_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.part_numbers, 'PartNumbers', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.option_shrink):
            body['Option'] = request.option_shrink
        if not UtilClient.is_unset(request.part_numbers_shrink):
            body['PartNumbers'] = request.part_numbers_shrink
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.upload_key):
            body['UploadKey'] = request.upload_key
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetMultipartFileUploadInfos',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/GetMultipartFileUploadInfos',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetMultipartFileUploadInfosResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_multipart_file_upload_infos(
        self,
        request: aliding_20230426_models.GetMultipartFileUploadInfosRequest,
    ) -> aliding_20230426_models.GetMultipartFileUploadInfosResponse:
        """
        @summary 获取文件分片上传信息
        
        @param request: GetMultipartFileUploadInfosRequest
        @return: GetMultipartFileUploadInfosResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetMultipartFileUploadInfosHeaders()
        return self.get_multipart_file_upload_infos_with_options(request, headers, runtime)

    async def get_multipart_file_upload_infos_async(
        self,
        request: aliding_20230426_models.GetMultipartFileUploadInfosRequest,
    ) -> aliding_20230426_models.GetMultipartFileUploadInfosResponse:
        """
        @summary 获取文件分片上传信息
        
        @param request: GetMultipartFileUploadInfosRequest
        @return: GetMultipartFileUploadInfosResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetMultipartFileUploadInfosHeaders()
        return await self.get_multipart_file_upload_infos_with_options_async(request, headers, runtime)

    def get_newest_inner_groups_with_options(
        self,
        tmp_req: aliding_20230426_models.GetNewestInnerGroupsRequest,
        tmp_header: aliding_20230426_models.GetNewestInnerGroupsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetNewestInnerGroupsResponse:
        """
        @summary 查询最近活跃的企业内部群列表
        
        @param tmp_req: GetNewestInnerGroupsRequest
        @param tmp_header: GetNewestInnerGroupsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetNewestInnerGroupsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetNewestInnerGroupsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetNewestInnerGroupsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.request):
            request.request_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.request, 'Request', 'json')
        body = {}
        if not UtilClient.is_unset(request.request_shrink):
            body['Request'] = request.request_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetNewestInnerGroups',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/im/getNewestInnerGroups',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetNewestInnerGroupsResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_newest_inner_groups_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetNewestInnerGroupsRequest,
        tmp_header: aliding_20230426_models.GetNewestInnerGroupsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetNewestInnerGroupsResponse:
        """
        @summary 查询最近活跃的企业内部群列表
        
        @param tmp_req: GetNewestInnerGroupsRequest
        @param tmp_header: GetNewestInnerGroupsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetNewestInnerGroupsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetNewestInnerGroupsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetNewestInnerGroupsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.request):
            request.request_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.request, 'Request', 'json')
        body = {}
        if not UtilClient.is_unset(request.request_shrink):
            body['Request'] = request.request_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetNewestInnerGroups',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/im/getNewestInnerGroups',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetNewestInnerGroupsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_newest_inner_groups(
        self,
        request: aliding_20230426_models.GetNewestInnerGroupsRequest,
    ) -> aliding_20230426_models.GetNewestInnerGroupsResponse:
        """
        @summary 查询最近活跃的企业内部群列表
        
        @param request: GetNewestInnerGroupsRequest
        @return: GetNewestInnerGroupsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetNewestInnerGroupsHeaders()
        return self.get_newest_inner_groups_with_options(request, headers, runtime)

    async def get_newest_inner_groups_async(
        self,
        request: aliding_20230426_models.GetNewestInnerGroupsRequest,
    ) -> aliding_20230426_models.GetNewestInnerGroupsResponse:
        """
        @summary 查询最近活跃的企业内部群列表
        
        @param request: GetNewestInnerGroupsRequest
        @return: GetNewestInnerGroupsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetNewestInnerGroupsHeaders()
        return await self.get_newest_inner_groups_with_options_async(request, headers, runtime)

    def get_node_with_options(
        self,
        tmp_req: aliding_20230426_models.GetNodeRequest,
        tmp_header: aliding_20230426_models.GetNodeHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetNodeResponse:
        """
        @summary 获取节点
        
        @param tmp_req: GetNodeRequest
        @param tmp_header: GetNodeHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetNodeResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetNodeShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetNodeShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.node_id):
            body['NodeId'] = request.node_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.with_permission_role):
            body['WithPermissionRole'] = request.with_permission_role
        if not UtilClient.is_unset(request.with_statistical_info):
            body['WithStatisticalInfo'] = request.with_statistical_info
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetNode',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v2/documents/getNode',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetNodeResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_node_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetNodeRequest,
        tmp_header: aliding_20230426_models.GetNodeHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetNodeResponse:
        """
        @summary 获取节点
        
        @param tmp_req: GetNodeRequest
        @param tmp_header: GetNodeHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetNodeResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetNodeShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetNodeShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.node_id):
            body['NodeId'] = request.node_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.with_permission_role):
            body['WithPermissionRole'] = request.with_permission_role
        if not UtilClient.is_unset(request.with_statistical_info):
            body['WithStatisticalInfo'] = request.with_statistical_info
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetNode',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v2/documents/getNode',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetNodeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_node(
        self,
        request: aliding_20230426_models.GetNodeRequest,
    ) -> aliding_20230426_models.GetNodeResponse:
        """
        @summary 获取节点
        
        @param request: GetNodeRequest
        @return: GetNodeResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetNodeHeaders()
        return self.get_node_with_options(request, headers, runtime)

    async def get_node_async(
        self,
        request: aliding_20230426_models.GetNodeRequest,
    ) -> aliding_20230426_models.GetNodeResponse:
        """
        @summary 获取节点
        
        @param request: GetNodeRequest
        @return: GetNodeResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetNodeHeaders()
        return await self.get_node_with_options_async(request, headers, runtime)

    def get_node_by_url_with_options(
        self,
        tmp_req: aliding_20230426_models.GetNodeByUrlRequest,
        tmp_header: aliding_20230426_models.GetNodeByUrlHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetNodeByUrlResponse:
        """
        @summary 通过链接获取节点
        
        @param tmp_req: GetNodeByUrlRequest
        @param tmp_header: GetNodeByUrlHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetNodeByUrlResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetNodeByUrlShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetNodeByUrlShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.option):
            request.option_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.option, 'Option', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.option_shrink):
            body['Option'] = request.option_shrink
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.url):
            body['Url'] = request.url
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetNodeByUrl',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v2/documents/getNodeByUrl',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetNodeByUrlResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_node_by_url_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetNodeByUrlRequest,
        tmp_header: aliding_20230426_models.GetNodeByUrlHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetNodeByUrlResponse:
        """
        @summary 通过链接获取节点
        
        @param tmp_req: GetNodeByUrlRequest
        @param tmp_header: GetNodeByUrlHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetNodeByUrlResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetNodeByUrlShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetNodeByUrlShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.option):
            request.option_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.option, 'Option', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.option_shrink):
            body['Option'] = request.option_shrink
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.url):
            body['Url'] = request.url
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetNodeByUrl',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v2/documents/getNodeByUrl',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetNodeByUrlResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_node_by_url(
        self,
        request: aliding_20230426_models.GetNodeByUrlRequest,
    ) -> aliding_20230426_models.GetNodeByUrlResponse:
        """
        @summary 通过链接获取节点
        
        @param request: GetNodeByUrlRequest
        @return: GetNodeByUrlResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetNodeByUrlHeaders()
        return self.get_node_by_url_with_options(request, headers, runtime)

    async def get_node_by_url_async(
        self,
        request: aliding_20230426_models.GetNodeByUrlRequest,
    ) -> aliding_20230426_models.GetNodeByUrlResponse:
        """
        @summary 通过链接获取节点
        
        @param request: GetNodeByUrlRequest
        @return: GetNodeByUrlResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetNodeByUrlHeaders()
        return await self.get_node_by_url_with_options_async(request, headers, runtime)

    def get_nodes_with_options(
        self,
        tmp_req: aliding_20230426_models.GetNodesRequest,
        tmp_header: aliding_20230426_models.GetNodesHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetNodesResponse:
        """
        @summary 批量获取节点
        
        @param tmp_req: GetNodesRequest
        @param tmp_header: GetNodesHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetNodesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetNodesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetNodesShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.node_ids):
            request.node_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.node_ids, 'NodeIds', 'json')
        if not UtilClient.is_unset(tmp_req.option):
            request.option_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.option, 'Option', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.node_ids_shrink):
            body['NodeIds'] = request.node_ids_shrink
        if not UtilClient.is_unset(request.option_shrink):
            body['Option'] = request.option_shrink
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetNodes',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v2/documents/getNodes',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetNodesResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_nodes_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetNodesRequest,
        tmp_header: aliding_20230426_models.GetNodesHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetNodesResponse:
        """
        @summary 批量获取节点
        
        @param tmp_req: GetNodesRequest
        @param tmp_header: GetNodesHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetNodesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetNodesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetNodesShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.node_ids):
            request.node_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.node_ids, 'NodeIds', 'json')
        if not UtilClient.is_unset(tmp_req.option):
            request.option_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.option, 'Option', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.node_ids_shrink):
            body['NodeIds'] = request.node_ids_shrink
        if not UtilClient.is_unset(request.option_shrink):
            body['Option'] = request.option_shrink
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetNodes',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v2/documents/getNodes',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetNodesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_nodes(
        self,
        request: aliding_20230426_models.GetNodesRequest,
    ) -> aliding_20230426_models.GetNodesResponse:
        """
        @summary 批量获取节点
        
        @param request: GetNodesRequest
        @return: GetNodesResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetNodesHeaders()
        return self.get_nodes_with_options(request, headers, runtime)

    async def get_nodes_async(
        self,
        request: aliding_20230426_models.GetNodesRequest,
    ) -> aliding_20230426_models.GetNodesResponse:
        """
        @summary 批量获取节点
        
        @param request: GetNodesRequest
        @return: GetNodesResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetNodesHeaders()
        return await self.get_nodes_with_options_async(request, headers, runtime)

    def get_notify_me_with_options(
        self,
        request: aliding_20230426_models.GetNotifyMeRequest,
        tmp_header: aliding_20230426_models.GetNotifyMeHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetNotifyMeResponse:
        """
        @summary 获取发送给用户的通知
        
        @param request: GetNotifyMeRequest
        @param tmp_header: GetNotifyMeHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetNotifyMeResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetNotifyMeShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_types):
            body['AppTypes'] = request.app_types
        if not UtilClient.is_unset(request.corp_id):
            body['CorpId'] = request.corp_id
        if not UtilClient.is_unset(request.create_from_time_gmt):
            body['CreateFromTimeGMT'] = request.create_from_time_gmt
        if not UtilClient.is_unset(request.create_to_time_gmt):
            body['CreateToTimeGMT'] = request.create_to_time_gmt
        if not UtilClient.is_unset(request.instance_create_from_time_gmt):
            body['InstanceCreateFromTimeGMT'] = request.instance_create_from_time_gmt
        if not UtilClient.is_unset(request.instance_create_to_time_gmt):
            body['InstanceCreateToTimeGMT'] = request.instance_create_to_time_gmt
        if not UtilClient.is_unset(request.keyword):
            body['Keyword'] = request.keyword
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.process_codes):
            body['ProcessCodes'] = request.process_codes
        if not UtilClient.is_unset(request.token):
            body['Token'] = request.token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetNotifyMe',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/getNotifyMe',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetNotifyMeResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_notify_me_with_options_async(
        self,
        request: aliding_20230426_models.GetNotifyMeRequest,
        tmp_header: aliding_20230426_models.GetNotifyMeHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetNotifyMeResponse:
        """
        @summary 获取发送给用户的通知
        
        @param request: GetNotifyMeRequest
        @param tmp_header: GetNotifyMeHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetNotifyMeResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetNotifyMeShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_types):
            body['AppTypes'] = request.app_types
        if not UtilClient.is_unset(request.corp_id):
            body['CorpId'] = request.corp_id
        if not UtilClient.is_unset(request.create_from_time_gmt):
            body['CreateFromTimeGMT'] = request.create_from_time_gmt
        if not UtilClient.is_unset(request.create_to_time_gmt):
            body['CreateToTimeGMT'] = request.create_to_time_gmt
        if not UtilClient.is_unset(request.instance_create_from_time_gmt):
            body['InstanceCreateFromTimeGMT'] = request.instance_create_from_time_gmt
        if not UtilClient.is_unset(request.instance_create_to_time_gmt):
            body['InstanceCreateToTimeGMT'] = request.instance_create_to_time_gmt
        if not UtilClient.is_unset(request.keyword):
            body['Keyword'] = request.keyword
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.process_codes):
            body['ProcessCodes'] = request.process_codes
        if not UtilClient.is_unset(request.token):
            body['Token'] = request.token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetNotifyMe',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/getNotifyMe',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetNotifyMeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_notify_me(
        self,
        request: aliding_20230426_models.GetNotifyMeRequest,
    ) -> aliding_20230426_models.GetNotifyMeResponse:
        """
        @summary 获取发送给用户的通知
        
        @param request: GetNotifyMeRequest
        @return: GetNotifyMeResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetNotifyMeHeaders()
        return self.get_notify_me_with_options(request, headers, runtime)

    async def get_notify_me_async(
        self,
        request: aliding_20230426_models.GetNotifyMeRequest,
    ) -> aliding_20230426_models.GetNotifyMeResponse:
        """
        @summary 获取发送给用户的通知
        
        @param request: GetNotifyMeRequest
        @return: GetNotifyMeResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetNotifyMeHeaders()
        return await self.get_notify_me_with_options_async(request, headers, runtime)

    def get_open_url_with_options(
        self,
        request: aliding_20230426_models.GetOpenUrlRequest,
        tmp_header: aliding_20230426_models.GetOpenUrlHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetOpenUrlResponse:
        """
        @summary 获取宜搭附件临时免登地址
        
        @param request: GetOpenUrlRequest
        @param tmp_header: GetOpenUrlHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOpenUrlResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetOpenUrlShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.file_url):
            body['FileUrl'] = request.file_url
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        if not UtilClient.is_unset(request.timeout):
            body['Timeout'] = request.timeout
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetOpenUrl',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/getOpenUrl',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetOpenUrlResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_open_url_with_options_async(
        self,
        request: aliding_20230426_models.GetOpenUrlRequest,
        tmp_header: aliding_20230426_models.GetOpenUrlHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetOpenUrlResponse:
        """
        @summary 获取宜搭附件临时免登地址
        
        @param request: GetOpenUrlRequest
        @param tmp_header: GetOpenUrlHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOpenUrlResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetOpenUrlShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.file_url):
            body['FileUrl'] = request.file_url
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        if not UtilClient.is_unset(request.timeout):
            body['Timeout'] = request.timeout
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetOpenUrl',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/getOpenUrl',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetOpenUrlResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_open_url(
        self,
        request: aliding_20230426_models.GetOpenUrlRequest,
    ) -> aliding_20230426_models.GetOpenUrlResponse:
        """
        @summary 获取宜搭附件临时免登地址
        
        @param request: GetOpenUrlRequest
        @return: GetOpenUrlResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetOpenUrlHeaders()
        return self.get_open_url_with_options(request, headers, runtime)

    async def get_open_url_async(
        self,
        request: aliding_20230426_models.GetOpenUrlRequest,
    ) -> aliding_20230426_models.GetOpenUrlResponse:
        """
        @summary 获取宜搭附件临时免登地址
        
        @param request: GetOpenUrlRequest
        @return: GetOpenUrlResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetOpenUrlHeaders()
        return await self.get_open_url_with_options_async(request, headers, runtime)

    def get_operation_records_with_options(
        self,
        request: aliding_20230426_models.GetOperationRecordsRequest,
        tmp_header: aliding_20230426_models.GetOperationRecordsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetOperationRecordsResponse:
        """
        @summary 获取审批记录
        
        @param request: GetOperationRecordsRequest
        @param tmp_header: GetOperationRecordsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOperationRecordsResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetOperationRecordsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.process_instance_id):
            body['ProcessInstanceId'] = request.process_instance_id
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetOperationRecords',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/getOperationRecords',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetOperationRecordsResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_operation_records_with_options_async(
        self,
        request: aliding_20230426_models.GetOperationRecordsRequest,
        tmp_header: aliding_20230426_models.GetOperationRecordsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetOperationRecordsResponse:
        """
        @summary 获取审批记录
        
        @param request: GetOperationRecordsRequest
        @param tmp_header: GetOperationRecordsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOperationRecordsResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetOperationRecordsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.process_instance_id):
            body['ProcessInstanceId'] = request.process_instance_id
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetOperationRecords',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/getOperationRecords',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetOperationRecordsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_operation_records(
        self,
        request: aliding_20230426_models.GetOperationRecordsRequest,
    ) -> aliding_20230426_models.GetOperationRecordsResponse:
        """
        @summary 获取审批记录
        
        @param request: GetOperationRecordsRequest
        @return: GetOperationRecordsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetOperationRecordsHeaders()
        return self.get_operation_records_with_options(request, headers, runtime)

    async def get_operation_records_async(
        self,
        request: aliding_20230426_models.GetOperationRecordsRequest,
    ) -> aliding_20230426_models.GetOperationRecordsResponse:
        """
        @summary 获取审批记录
        
        @param request: GetOperationRecordsRequest
        @return: GetOperationRecordsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetOperationRecordsHeaders()
        return await self.get_operation_records_with_options_async(request, headers, runtime)

    def get_org_live_list_with_options(
        self,
        tmp_req: aliding_20230426_models.GetOrgLiveListRequest,
        tmp_header: aliding_20230426_models.GetOrgLiveListHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetOrgLiveListResponse:
        """
        @param tmp_req: GetOrgLiveListRequest
        @param tmp_header: GetOrgLiveListHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOrgLiveListResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetOrgLiveListShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetOrgLiveListShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.corp_id):
            body['CorpId'] = request.corp_id
        if not UtilClient.is_unset(request.end_time):
            body['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.start_time):
            body['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.user_id):
            body['UserId'] = request.user_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetOrgLiveList',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/getOrgLiveList',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetOrgLiveListResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_org_live_list_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetOrgLiveListRequest,
        tmp_header: aliding_20230426_models.GetOrgLiveListHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetOrgLiveListResponse:
        """
        @param tmp_req: GetOrgLiveListRequest
        @param tmp_header: GetOrgLiveListHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOrgLiveListResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetOrgLiveListShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetOrgLiveListShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.corp_id):
            body['CorpId'] = request.corp_id
        if not UtilClient.is_unset(request.end_time):
            body['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.start_time):
            body['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.user_id):
            body['UserId'] = request.user_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetOrgLiveList',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/getOrgLiveList',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetOrgLiveListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_org_live_list(
        self,
        request: aliding_20230426_models.GetOrgLiveListRequest,
    ) -> aliding_20230426_models.GetOrgLiveListResponse:
        """
        @param request: GetOrgLiveListRequest
        @return: GetOrgLiveListResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetOrgLiveListHeaders()
        return self.get_org_live_list_with_options(request, headers, runtime)

    async def get_org_live_list_async(
        self,
        request: aliding_20230426_models.GetOrgLiveListRequest,
    ) -> aliding_20230426_models.GetOrgLiveListResponse:
        """
        @param request: GetOrgLiveListRequest
        @return: GetOrgLiveListResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetOrgLiveListHeaders()
        return await self.get_org_live_list_with_options_async(request, headers, runtime)

    def get_org_or_web_open_doc_content_task_id_with_options(
        self,
        tmp_req: aliding_20230426_models.GetOrgOrWebOpenDocContentTaskIdRequest,
        tmp_header: aliding_20230426_models.GetOrgOrWebOpenDocContentTaskIdHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetOrgOrWebOpenDocContentTaskIdResponse:
        """
        @summary 委托权限获取组织或者互联网公开文档内容taskId
        
        @param tmp_req: GetOrgOrWebOpenDocContentTaskIdRequest
        @param tmp_header: GetOrgOrWebOpenDocContentTaskIdHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOrgOrWebOpenDocContentTaskIdResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetOrgOrWebOpenDocContentTaskIdShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetOrgOrWebOpenDocContentTaskIdShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.dentry_uuid):
            body['DentryUuid'] = request.dentry_uuid
        if not UtilClient.is_unset(request.generate_cp):
            body['GenerateCp'] = request.generate_cp
        if not UtilClient.is_unset(request.scope_type):
            body['ScopeType'] = request.scope_type
        if not UtilClient.is_unset(request.target_format):
            body['TargetFormat'] = request.target_format
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetOrgOrWebOpenDocContentTaskId',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v2/documents/getOrgOrWebOpenDocContentTaskId',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetOrgOrWebOpenDocContentTaskIdResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_org_or_web_open_doc_content_task_id_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetOrgOrWebOpenDocContentTaskIdRequest,
        tmp_header: aliding_20230426_models.GetOrgOrWebOpenDocContentTaskIdHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetOrgOrWebOpenDocContentTaskIdResponse:
        """
        @summary 委托权限获取组织或者互联网公开文档内容taskId
        
        @param tmp_req: GetOrgOrWebOpenDocContentTaskIdRequest
        @param tmp_header: GetOrgOrWebOpenDocContentTaskIdHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOrgOrWebOpenDocContentTaskIdResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetOrgOrWebOpenDocContentTaskIdShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetOrgOrWebOpenDocContentTaskIdShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.dentry_uuid):
            body['DentryUuid'] = request.dentry_uuid
        if not UtilClient.is_unset(request.generate_cp):
            body['GenerateCp'] = request.generate_cp
        if not UtilClient.is_unset(request.scope_type):
            body['ScopeType'] = request.scope_type
        if not UtilClient.is_unset(request.target_format):
            body['TargetFormat'] = request.target_format
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetOrgOrWebOpenDocContentTaskId',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v2/documents/getOrgOrWebOpenDocContentTaskId',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetOrgOrWebOpenDocContentTaskIdResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_org_or_web_open_doc_content_task_id(
        self,
        request: aliding_20230426_models.GetOrgOrWebOpenDocContentTaskIdRequest,
    ) -> aliding_20230426_models.GetOrgOrWebOpenDocContentTaskIdResponse:
        """
        @summary 委托权限获取组织或者互联网公开文档内容taskId
        
        @param request: GetOrgOrWebOpenDocContentTaskIdRequest
        @return: GetOrgOrWebOpenDocContentTaskIdResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetOrgOrWebOpenDocContentTaskIdHeaders()
        return self.get_org_or_web_open_doc_content_task_id_with_options(request, headers, runtime)

    async def get_org_or_web_open_doc_content_task_id_async(
        self,
        request: aliding_20230426_models.GetOrgOrWebOpenDocContentTaskIdRequest,
    ) -> aliding_20230426_models.GetOrgOrWebOpenDocContentTaskIdResponse:
        """
        @summary 委托权限获取组织或者互联网公开文档内容taskId
        
        @param request: GetOrgOrWebOpenDocContentTaskIdRequest
        @return: GetOrgOrWebOpenDocContentTaskIdResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetOrgOrWebOpenDocContentTaskIdHeaders()
        return await self.get_org_or_web_open_doc_content_task_id_with_options_async(request, headers, runtime)

    def get_process_definition_with_options(
        self,
        request: aliding_20230426_models.GetProcessDefinitionRequest,
        tmp_header: aliding_20230426_models.GetProcessDefinitionHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetProcessDefinitionResponse:
        """
        @summary 获取流程定义
        
        @param request: GetProcessDefinitionRequest
        @param tmp_header: GetProcessDefinitionHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetProcessDefinitionResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetProcessDefinitionShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.corp_id):
            body['CorpId'] = request.corp_id
        if not UtilClient.is_unset(request.group_id):
            body['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.name_space):
            body['NameSpace'] = request.name_space
        if not UtilClient.is_unset(request.order_number):
            body['OrderNumber'] = request.order_number
        if not UtilClient.is_unset(request.process_instance_id):
            body['ProcessInstanceId'] = request.process_instance_id
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        if not UtilClient.is_unset(request.system_type):
            body['SystemType'] = request.system_type
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetProcessDefinition',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/getProcessDefinition',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetProcessDefinitionResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_process_definition_with_options_async(
        self,
        request: aliding_20230426_models.GetProcessDefinitionRequest,
        tmp_header: aliding_20230426_models.GetProcessDefinitionHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetProcessDefinitionResponse:
        """
        @summary 获取流程定义
        
        @param request: GetProcessDefinitionRequest
        @param tmp_header: GetProcessDefinitionHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetProcessDefinitionResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetProcessDefinitionShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.corp_id):
            body['CorpId'] = request.corp_id
        if not UtilClient.is_unset(request.group_id):
            body['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.name_space):
            body['NameSpace'] = request.name_space
        if not UtilClient.is_unset(request.order_number):
            body['OrderNumber'] = request.order_number
        if not UtilClient.is_unset(request.process_instance_id):
            body['ProcessInstanceId'] = request.process_instance_id
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        if not UtilClient.is_unset(request.system_type):
            body['SystemType'] = request.system_type
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetProcessDefinition',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/getProcessDefinition',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetProcessDefinitionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_process_definition(
        self,
        request: aliding_20230426_models.GetProcessDefinitionRequest,
    ) -> aliding_20230426_models.GetProcessDefinitionResponse:
        """
        @summary 获取流程定义
        
        @param request: GetProcessDefinitionRequest
        @return: GetProcessDefinitionResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetProcessDefinitionHeaders()
        return self.get_process_definition_with_options(request, headers, runtime)

    async def get_process_definition_async(
        self,
        request: aliding_20230426_models.GetProcessDefinitionRequest,
    ) -> aliding_20230426_models.GetProcessDefinitionResponse:
        """
        @summary 获取流程定义
        
        @param request: GetProcessDefinitionRequest
        @return: GetProcessDefinitionResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetProcessDefinitionHeaders()
        return await self.get_process_definition_with_options_async(request, headers, runtime)

    def get_range_with_options(
        self,
        tmp_req: aliding_20230426_models.GetRangeRequest,
        tmp_header: aliding_20230426_models.GetRangeHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetRangeResponse:
        """
        @summary 获取单元格区域
        
        @param tmp_req: GetRangeRequest
        @param tmp_header: GetRangeHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetRangeResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetRangeShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetRangeShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.range_address):
            body['RangeAddress'] = request.range_address
        if not UtilClient.is_unset(request.select):
            body['Select'] = request.select
        if not UtilClient.is_unset(request.sheet_id):
            body['SheetId'] = request.sheet_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workbook_id):
            body['WorkbookId'] = request.workbook_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetRange',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/getRange',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetRangeResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_range_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetRangeRequest,
        tmp_header: aliding_20230426_models.GetRangeHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetRangeResponse:
        """
        @summary 获取单元格区域
        
        @param tmp_req: GetRangeRequest
        @param tmp_header: GetRangeHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetRangeResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetRangeShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetRangeShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.range_address):
            body['RangeAddress'] = request.range_address
        if not UtilClient.is_unset(request.select):
            body['Select'] = request.select
        if not UtilClient.is_unset(request.sheet_id):
            body['SheetId'] = request.sheet_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workbook_id):
            body['WorkbookId'] = request.workbook_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetRange',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/getRange',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetRangeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_range(
        self,
        request: aliding_20230426_models.GetRangeRequest,
    ) -> aliding_20230426_models.GetRangeResponse:
        """
        @summary 获取单元格区域
        
        @param request: GetRangeRequest
        @return: GetRangeResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetRangeHeaders()
        return self.get_range_with_options(request, headers, runtime)

    async def get_range_async(
        self,
        request: aliding_20230426_models.GetRangeRequest,
    ) -> aliding_20230426_models.GetRangeResponse:
        """
        @summary 获取单元格区域
        
        @param request: GetRangeRequest
        @return: GetRangeResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetRangeHeaders()
        return await self.get_range_with_options_async(request, headers, runtime)

    def get_related_workspaces_with_options(
        self,
        tmp_req: aliding_20230426_models.GetRelatedWorkspacesRequest,
        tmp_header: aliding_20230426_models.GetRelatedWorkspacesHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetRelatedWorkspacesResponse:
        """
        @summary 查询用户有权限的知识库列表(旧)
        
        @param tmp_req: GetRelatedWorkspacesRequest
        @param tmp_header: GetRelatedWorkspacesHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetRelatedWorkspacesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetRelatedWorkspacesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetRelatedWorkspacesShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.include_recent):
            body['IncludeRecent'] = request.include_recent
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetRelatedWorkspaces',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/getRelatedWorkspaces',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetRelatedWorkspacesResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_related_workspaces_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetRelatedWorkspacesRequest,
        tmp_header: aliding_20230426_models.GetRelatedWorkspacesHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetRelatedWorkspacesResponse:
        """
        @summary 查询用户有权限的知识库列表(旧)
        
        @param tmp_req: GetRelatedWorkspacesRequest
        @param tmp_header: GetRelatedWorkspacesHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetRelatedWorkspacesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetRelatedWorkspacesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetRelatedWorkspacesShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.include_recent):
            body['IncludeRecent'] = request.include_recent
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetRelatedWorkspaces',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/getRelatedWorkspaces',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetRelatedWorkspacesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_related_workspaces(
        self,
        request: aliding_20230426_models.GetRelatedWorkspacesRequest,
    ) -> aliding_20230426_models.GetRelatedWorkspacesResponse:
        """
        @summary 查询用户有权限的知识库列表(旧)
        
        @param request: GetRelatedWorkspacesRequest
        @return: GetRelatedWorkspacesResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetRelatedWorkspacesHeaders()
        return self.get_related_workspaces_with_options(request, headers, runtime)

    async def get_related_workspaces_async(
        self,
        request: aliding_20230426_models.GetRelatedWorkspacesRequest,
    ) -> aliding_20230426_models.GetRelatedWorkspacesResponse:
        """
        @summary 查询用户有权限的知识库列表(旧)
        
        @param request: GetRelatedWorkspacesRequest
        @return: GetRelatedWorkspacesResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetRelatedWorkspacesHeaders()
        return await self.get_related_workspaces_with_options_async(request, headers, runtime)

    def get_report_template_by_name_with_options(
        self,
        tmp_req: aliding_20230426_models.GetReportTemplateByNameRequest,
        tmp_header: aliding_20230426_models.GetReportTemplateByNameHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetReportTemplateByNameResponse:
        """
        @summary 获取模板详情
        
        @param tmp_req: GetReportTemplateByNameRequest
        @param tmp_header: GetReportTemplateByNameHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetReportTemplateByNameResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetReportTemplateByNameShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetReportTemplateByNameShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.template_name):
            body['TemplateName'] = request.template_name
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetReportTemplateByName',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/log/getReportTemplateByName',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetReportTemplateByNameResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_report_template_by_name_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetReportTemplateByNameRequest,
        tmp_header: aliding_20230426_models.GetReportTemplateByNameHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetReportTemplateByNameResponse:
        """
        @summary 获取模板详情
        
        @param tmp_req: GetReportTemplateByNameRequest
        @param tmp_header: GetReportTemplateByNameHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetReportTemplateByNameResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetReportTemplateByNameShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetReportTemplateByNameShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.template_name):
            body['TemplateName'] = request.template_name
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetReportTemplateByName',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/log/getReportTemplateByName',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetReportTemplateByNameResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_report_template_by_name(
        self,
        request: aliding_20230426_models.GetReportTemplateByNameRequest,
    ) -> aliding_20230426_models.GetReportTemplateByNameResponse:
        """
        @summary 获取模板详情
        
        @param request: GetReportTemplateByNameRequest
        @return: GetReportTemplateByNameResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetReportTemplateByNameHeaders()
        return self.get_report_template_by_name_with_options(request, headers, runtime)

    async def get_report_template_by_name_async(
        self,
        request: aliding_20230426_models.GetReportTemplateByNameRequest,
    ) -> aliding_20230426_models.GetReportTemplateByNameResponse:
        """
        @summary 获取模板详情
        
        @param request: GetReportTemplateByNameRequest
        @return: GetReportTemplateByNameResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetReportTemplateByNameHeaders()
        return await self.get_report_template_by_name_with_options_async(request, headers, runtime)

    def get_report_un_read_count_with_options(
        self,
        tmp_req: aliding_20230426_models.GetReportUnReadCountRequest,
        tmp_header: aliding_20230426_models.GetReportUnReadCountHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetReportUnReadCountResponse:
        """
        @summary 获取员工有多少数量的日志（一个月内）是未读状态
        
        @param tmp_req: GetReportUnReadCountRequest
        @param tmp_header: GetReportUnReadCountHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetReportUnReadCountResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetReportUnReadCountShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetReportUnReadCountShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.request):
            request.request_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.request, 'Request', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.request_shrink):
            body['Request'] = request.request_shrink
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetReportUnReadCount',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/log/getReportUnReadCount',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetReportUnReadCountResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_report_un_read_count_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetReportUnReadCountRequest,
        tmp_header: aliding_20230426_models.GetReportUnReadCountHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetReportUnReadCountResponse:
        """
        @summary 获取员工有多少数量的日志（一个月内）是未读状态
        
        @param tmp_req: GetReportUnReadCountRequest
        @param tmp_header: GetReportUnReadCountHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetReportUnReadCountResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetReportUnReadCountShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetReportUnReadCountShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.request):
            request.request_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.request, 'Request', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.request_shrink):
            body['Request'] = request.request_shrink
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetReportUnReadCount',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/log/getReportUnReadCount',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetReportUnReadCountResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_report_un_read_count(
        self,
        request: aliding_20230426_models.GetReportUnReadCountRequest,
    ) -> aliding_20230426_models.GetReportUnReadCountResponse:
        """
        @summary 获取员工有多少数量的日志（一个月内）是未读状态
        
        @param request: GetReportUnReadCountRequest
        @return: GetReportUnReadCountResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetReportUnReadCountHeaders()
        return self.get_report_un_read_count_with_options(request, headers, runtime)

    async def get_report_un_read_count_async(
        self,
        request: aliding_20230426_models.GetReportUnReadCountRequest,
    ) -> aliding_20230426_models.GetReportUnReadCountResponse:
        """
        @summary 获取员工有多少数量的日志（一个月内）是未读状态
        
        @param request: GetReportUnReadCountRequest
        @return: GetReportUnReadCountResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetReportUnReadCountHeaders()
        return await self.get_report_un_read_count_with_options_async(request, headers, runtime)

    def get_running_tasks_with_options(
        self,
        request: aliding_20230426_models.GetRunningTasksRequest,
        tmp_header: aliding_20230426_models.GetRunningTasksHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetRunningTasksResponse:
        """
        @summary 查询流程运行任务（VPC）
        
        @param request: GetRunningTasksRequest
        @param tmp_header: GetRunningTasksHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetRunningTasksResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetRunningTasksShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.process_codes):
            body['ProcessCodes'] = request.process_codes
        if not UtilClient.is_unset(request.process_instance_id):
            body['ProcessInstanceId'] = request.process_instance_id
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetRunningTasks',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/getRunningTasks',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetRunningTasksResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_running_tasks_with_options_async(
        self,
        request: aliding_20230426_models.GetRunningTasksRequest,
        tmp_header: aliding_20230426_models.GetRunningTasksHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetRunningTasksResponse:
        """
        @summary 查询流程运行任务（VPC）
        
        @param request: GetRunningTasksRequest
        @param tmp_header: GetRunningTasksHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetRunningTasksResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetRunningTasksShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.process_codes):
            body['ProcessCodes'] = request.process_codes
        if not UtilClient.is_unset(request.process_instance_id):
            body['ProcessInstanceId'] = request.process_instance_id
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetRunningTasks',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/getRunningTasks',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetRunningTasksResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_running_tasks(
        self,
        request: aliding_20230426_models.GetRunningTasksRequest,
    ) -> aliding_20230426_models.GetRunningTasksResponse:
        """
        @summary 查询流程运行任务（VPC）
        
        @param request: GetRunningTasksRequest
        @return: GetRunningTasksResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetRunningTasksHeaders()
        return self.get_running_tasks_with_options(request, headers, runtime)

    async def get_running_tasks_async(
        self,
        request: aliding_20230426_models.GetRunningTasksRequest,
    ) -> aliding_20230426_models.GetRunningTasksResponse:
        """
        @summary 查询流程运行任务（VPC）
        
        @param request: GetRunningTasksRequest
        @return: GetRunningTasksResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetRunningTasksHeaders()
        return await self.get_running_tasks_with_options_async(request, headers, runtime)

    def get_schedule_with_options(
        self,
        tmp_req: aliding_20230426_models.GetScheduleRequest,
        tmp_header: aliding_20230426_models.GetScheduleHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetScheduleResponse:
        """
        @summary 获取用户忙闲信息
        
        @param tmp_req: GetScheduleRequest
        @param tmp_header: GetScheduleHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetScheduleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetScheduleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetScheduleShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        if not UtilClient.is_unset(tmp_req.user_ids):
            request.user_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.user_ids, 'UserIds', 'json')
        body = {}
        if not UtilClient.is_unset(request.end_time):
            body['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.start_time):
            body['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.user_ids_shrink):
            body['UserIds'] = request.user_ids_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetSchedule',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/getSchedule',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetScheduleResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_schedule_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetScheduleRequest,
        tmp_header: aliding_20230426_models.GetScheduleHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetScheduleResponse:
        """
        @summary 获取用户忙闲信息
        
        @param tmp_req: GetScheduleRequest
        @param tmp_header: GetScheduleHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetScheduleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetScheduleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetScheduleShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        if not UtilClient.is_unset(tmp_req.user_ids):
            request.user_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.user_ids, 'UserIds', 'json')
        body = {}
        if not UtilClient.is_unset(request.end_time):
            body['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.start_time):
            body['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.user_ids_shrink):
            body['UserIds'] = request.user_ids_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetSchedule',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/getSchedule',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetScheduleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_schedule(
        self,
        request: aliding_20230426_models.GetScheduleRequest,
    ) -> aliding_20230426_models.GetScheduleResponse:
        """
        @summary 获取用户忙闲信息
        
        @param request: GetScheduleRequest
        @return: GetScheduleResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetScheduleHeaders()
        return self.get_schedule_with_options(request, headers, runtime)

    async def get_schedule_async(
        self,
        request: aliding_20230426_models.GetScheduleRequest,
    ) -> aliding_20230426_models.GetScheduleResponse:
        """
        @summary 获取用户忙闲信息
        
        @param request: GetScheduleRequest
        @return: GetScheduleResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetScheduleHeaders()
        return await self.get_schedule_with_options_async(request, headers, runtime)

    def get_sheet_with_options(
        self,
        tmp_req: aliding_20230426_models.GetSheetRequest,
        tmp_header: aliding_20230426_models.GetSheetHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetSheetResponse:
        """
        @summary 获取工作表
        
        @param tmp_req: GetSheetRequest
        @param tmp_header: GetSheetHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSheetResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetSheetShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetSheetShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.sheet_id):
            body['SheetId'] = request.sheet_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workbook_id):
            body['WorkbookId'] = request.workbook_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetSheet',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/getSheet',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetSheetResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_sheet_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetSheetRequest,
        tmp_header: aliding_20230426_models.GetSheetHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetSheetResponse:
        """
        @summary 获取工作表
        
        @param tmp_req: GetSheetRequest
        @param tmp_header: GetSheetHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSheetResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetSheetShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetSheetShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.sheet_id):
            body['SheetId'] = request.sheet_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workbook_id):
            body['WorkbookId'] = request.workbook_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetSheet',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/getSheet',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetSheetResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_sheet(
        self,
        request: aliding_20230426_models.GetSheetRequest,
    ) -> aliding_20230426_models.GetSheetResponse:
        """
        @summary 获取工作表
        
        @param request: GetSheetRequest
        @return: GetSheetResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetSheetHeaders()
        return self.get_sheet_with_options(request, headers, runtime)

    async def get_sheet_async(
        self,
        request: aliding_20230426_models.GetSheetRequest,
    ) -> aliding_20230426_models.GetSheetResponse:
        """
        @summary 获取工作表
        
        @param request: GetSheetRequest
        @return: GetSheetResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetSheetHeaders()
        return await self.get_sheet_with_options_async(request, headers, runtime)

    def get_sheet_content_job_id_with_options(
        self,
        tmp_req: aliding_20230426_models.GetSheetContentJobIdRequest,
        tmp_header: aliding_20230426_models.GetSheetContentJobIdHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetSheetContentJobIdResponse:
        """
        @summary 获取表格文档内容jobId
        
        @param tmp_req: GetSheetContentJobIdRequest
        @param tmp_header: GetSheetContentJobIdHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSheetContentJobIdResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetSheetContentJobIdShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetSheetContentJobIdShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.dentry_uuid):
            body['DentryUuid'] = request.dentry_uuid
        if not UtilClient.is_unset(request.export_type):
            body['ExportType'] = request.export_type
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetSheetContentJobId',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v2/documents/getSheetContentJobId',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetSheetContentJobIdResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_sheet_content_job_id_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetSheetContentJobIdRequest,
        tmp_header: aliding_20230426_models.GetSheetContentJobIdHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetSheetContentJobIdResponse:
        """
        @summary 获取表格文档内容jobId
        
        @param tmp_req: GetSheetContentJobIdRequest
        @param tmp_header: GetSheetContentJobIdHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSheetContentJobIdResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetSheetContentJobIdShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetSheetContentJobIdShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.dentry_uuid):
            body['DentryUuid'] = request.dentry_uuid
        if not UtilClient.is_unset(request.export_type):
            body['ExportType'] = request.export_type
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetSheetContentJobId',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v2/documents/getSheetContentJobId',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetSheetContentJobIdResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_sheet_content_job_id(
        self,
        request: aliding_20230426_models.GetSheetContentJobIdRequest,
    ) -> aliding_20230426_models.GetSheetContentJobIdResponse:
        """
        @summary 获取表格文档内容jobId
        
        @param request: GetSheetContentJobIdRequest
        @return: GetSheetContentJobIdResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetSheetContentJobIdHeaders()
        return self.get_sheet_content_job_id_with_options(request, headers, runtime)

    async def get_sheet_content_job_id_async(
        self,
        request: aliding_20230426_models.GetSheetContentJobIdRequest,
    ) -> aliding_20230426_models.GetSheetContentJobIdResponse:
        """
        @summary 获取表格文档内容jobId
        
        @param request: GetSheetContentJobIdRequest
        @return: GetSheetContentJobIdResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetSheetContentJobIdHeaders()
        return await self.get_sheet_content_job_id_with_options_async(request, headers, runtime)

    def get_space_directories_with_options(
        self,
        tmp_req: aliding_20230426_models.GetSpaceDirectoriesRequest,
        tmp_header: aliding_20230426_models.GetSpaceDirectoriesHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetSpaceDirectoriesResponse:
        """
        @summary 查询知识库下的目录结构
        
        @param tmp_req: GetSpaceDirectoriesRequest
        @param tmp_header: GetSpaceDirectoriesHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSpaceDirectoriesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetSpaceDirectoriesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetSpaceDirectoriesShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.dentry_id):
            body['DentryId'] = request.dentry_id
        if not UtilClient.is_unset(request.max_results):
            body['MaxResults'] = request.max_results
        if not UtilClient.is_unset(request.next_token):
            body['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.space_id):
            body['SpaceId'] = request.space_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetSpaceDirectories',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v2/documents/getSpaceDirectories',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetSpaceDirectoriesResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_space_directories_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetSpaceDirectoriesRequest,
        tmp_header: aliding_20230426_models.GetSpaceDirectoriesHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetSpaceDirectoriesResponse:
        """
        @summary 查询知识库下的目录结构
        
        @param tmp_req: GetSpaceDirectoriesRequest
        @param tmp_header: GetSpaceDirectoriesHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSpaceDirectoriesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetSpaceDirectoriesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetSpaceDirectoriesShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.dentry_id):
            body['DentryId'] = request.dentry_id
        if not UtilClient.is_unset(request.max_results):
            body['MaxResults'] = request.max_results
        if not UtilClient.is_unset(request.next_token):
            body['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.space_id):
            body['SpaceId'] = request.space_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetSpaceDirectories',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v2/documents/getSpaceDirectories',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetSpaceDirectoriesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_space_directories(
        self,
        request: aliding_20230426_models.GetSpaceDirectoriesRequest,
    ) -> aliding_20230426_models.GetSpaceDirectoriesResponse:
        """
        @summary 查询知识库下的目录结构
        
        @param request: GetSpaceDirectoriesRequest
        @return: GetSpaceDirectoriesResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetSpaceDirectoriesHeaders()
        return self.get_space_directories_with_options(request, headers, runtime)

    async def get_space_directories_async(
        self,
        request: aliding_20230426_models.GetSpaceDirectoriesRequest,
    ) -> aliding_20230426_models.GetSpaceDirectoriesResponse:
        """
        @summary 查询知识库下的目录结构
        
        @param request: GetSpaceDirectoriesRequest
        @return: GetSpaceDirectoriesResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetSpaceDirectoriesHeaders()
        return await self.get_space_directories_with_options_async(request, headers, runtime)

    def get_subscribed_calendar_with_options(
        self,
        request: aliding_20230426_models.GetSubscribedCalendarRequest,
        tmp_header: aliding_20230426_models.GetSubscribedCalendarHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetSubscribedCalendarResponse:
        """
        @summary 查询单个订阅日历详情
        
        @param request: GetSubscribedCalendarRequest
        @param tmp_header: GetSubscribedCalendarHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSubscribedCalendarResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetSubscribedCalendarShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.calendar_id):
            body['CalendarId'] = request.calendar_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetSubscribedCalendar',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/getSubscribedCalendar',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetSubscribedCalendarResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_subscribed_calendar_with_options_async(
        self,
        request: aliding_20230426_models.GetSubscribedCalendarRequest,
        tmp_header: aliding_20230426_models.GetSubscribedCalendarHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetSubscribedCalendarResponse:
        """
        @summary 查询单个订阅日历详情
        
        @param request: GetSubscribedCalendarRequest
        @param tmp_header: GetSubscribedCalendarHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSubscribedCalendarResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetSubscribedCalendarShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.calendar_id):
            body['CalendarId'] = request.calendar_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetSubscribedCalendar',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/getSubscribedCalendar',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetSubscribedCalendarResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_subscribed_calendar(
        self,
        request: aliding_20230426_models.GetSubscribedCalendarRequest,
    ) -> aliding_20230426_models.GetSubscribedCalendarResponse:
        """
        @summary 查询单个订阅日历详情
        
        @param request: GetSubscribedCalendarRequest
        @return: GetSubscribedCalendarResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetSubscribedCalendarHeaders()
        return self.get_subscribed_calendar_with_options(request, headers, runtime)

    async def get_subscribed_calendar_async(
        self,
        request: aliding_20230426_models.GetSubscribedCalendarRequest,
    ) -> aliding_20230426_models.GetSubscribedCalendarResponse:
        """
        @summary 查询单个订阅日历详情
        
        @param request: GetSubscribedCalendarRequest
        @return: GetSubscribedCalendarResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetSubscribedCalendarHeaders()
        return await self.get_subscribed_calendar_with_options_async(request, headers, runtime)

    def get_task_copies_with_options(
        self,
        request: aliding_20230426_models.GetTaskCopiesRequest,
        tmp_header: aliding_20230426_models.GetTaskCopiesHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetTaskCopiesResponse:
        """
        @summary 查询抄送我的任务列表（应用维度）
        
        @param request: GetTaskCopiesRequest
        @param tmp_header: GetTaskCopiesHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetTaskCopiesResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetTaskCopiesShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.create_from_time_gmt):
            body['CreateFromTimeGMT'] = request.create_from_time_gmt
        if not UtilClient.is_unset(request.create_to_time_gmt):
            body['CreateToTimeGMT'] = request.create_to_time_gmt
        if not UtilClient.is_unset(request.keyword):
            body['Keyword'] = request.keyword
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.process_codes):
            body['ProcessCodes'] = request.process_codes
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetTaskCopies',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/getTaskCopies',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetTaskCopiesResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_task_copies_with_options_async(
        self,
        request: aliding_20230426_models.GetTaskCopiesRequest,
        tmp_header: aliding_20230426_models.GetTaskCopiesHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetTaskCopiesResponse:
        """
        @summary 查询抄送我的任务列表（应用维度）
        
        @param request: GetTaskCopiesRequest
        @param tmp_header: GetTaskCopiesHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetTaskCopiesResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.GetTaskCopiesShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.create_from_time_gmt):
            body['CreateFromTimeGMT'] = request.create_from_time_gmt
        if not UtilClient.is_unset(request.create_to_time_gmt):
            body['CreateToTimeGMT'] = request.create_to_time_gmt
        if not UtilClient.is_unset(request.keyword):
            body['Keyword'] = request.keyword
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.process_codes):
            body['ProcessCodes'] = request.process_codes
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetTaskCopies',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/getTaskCopies',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetTaskCopiesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_task_copies(
        self,
        request: aliding_20230426_models.GetTaskCopiesRequest,
    ) -> aliding_20230426_models.GetTaskCopiesResponse:
        """
        @summary 查询抄送我的任务列表（应用维度）
        
        @param request: GetTaskCopiesRequest
        @return: GetTaskCopiesResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetTaskCopiesHeaders()
        return self.get_task_copies_with_options(request, headers, runtime)

    async def get_task_copies_async(
        self,
        request: aliding_20230426_models.GetTaskCopiesRequest,
    ) -> aliding_20230426_models.GetTaskCopiesResponse:
        """
        @summary 查询抄送我的任务列表（应用维度）
        
        @param request: GetTaskCopiesRequest
        @return: GetTaskCopiesResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetTaskCopiesHeaders()
        return await self.get_task_copies_with_options_async(request, headers, runtime)

    def get_template_list_by_user_id_with_options(
        self,
        tmp_req: aliding_20230426_models.GetTemplateListByUserIdRequest,
        tmp_header: aliding_20230426_models.GetTemplateListByUserIdHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetTemplateListByUserIdResponse:
        """
        @summary 获取用户可见的日志模板
        
        @param tmp_req: GetTemplateListByUserIdRequest
        @param tmp_header: GetTemplateListByUserIdHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetTemplateListByUserIdResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetTemplateListByUserIdShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetTemplateListByUserIdShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.offset):
            body['Offset'] = request.offset
        if not UtilClient.is_unset(request.size):
            body['Size'] = request.size
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetTemplateListByUserId',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/log/getTemplateListByUserId',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetTemplateListByUserIdResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_template_list_by_user_id_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetTemplateListByUserIdRequest,
        tmp_header: aliding_20230426_models.GetTemplateListByUserIdHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetTemplateListByUserIdResponse:
        """
        @summary 获取用户可见的日志模板
        
        @param tmp_req: GetTemplateListByUserIdRequest
        @param tmp_header: GetTemplateListByUserIdHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetTemplateListByUserIdResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetTemplateListByUserIdShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetTemplateListByUserIdShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.offset):
            body['Offset'] = request.offset
        if not UtilClient.is_unset(request.size):
            body['Size'] = request.size
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetTemplateListByUserId',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/log/getTemplateListByUserId',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetTemplateListByUserIdResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_template_list_by_user_id(
        self,
        request: aliding_20230426_models.GetTemplateListByUserIdRequest,
    ) -> aliding_20230426_models.GetTemplateListByUserIdResponse:
        """
        @summary 获取用户可见的日志模板
        
        @param request: GetTemplateListByUserIdRequest
        @return: GetTemplateListByUserIdResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetTemplateListByUserIdHeaders()
        return self.get_template_list_by_user_id_with_options(request, headers, runtime)

    async def get_template_list_by_user_id_async(
        self,
        request: aliding_20230426_models.GetTemplateListByUserIdRequest,
    ) -> aliding_20230426_models.GetTemplateListByUserIdResponse:
        """
        @summary 获取用户可见的日志模板
        
        @param request: GetTemplateListByUserIdRequest
        @return: GetTemplateListByUserIdResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetTemplateListByUserIdHeaders()
        return await self.get_template_list_by_user_id_with_options_async(request, headers, runtime)

    def get_ticket_with_options(
        self,
        tmp_req: aliding_20230426_models.GetTicketRequest,
        tmp_header: aliding_20230426_models.GetTicketHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetTicketResponse:
        """
        @summary 获取指定工单详情
        
        @param tmp_req: GetTicketRequest
        @param tmp_header: GetTicketHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetTicketResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetTicketShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetTicketShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.open_team_id):
            body['OpenTeamId'] = request.open_team_id
        if not UtilClient.is_unset(request.open_ticket_id):
            body['OpenTicketId'] = request.open_ticket_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetTicket',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ticket/getTicket',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetTicketResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_ticket_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetTicketRequest,
        tmp_header: aliding_20230426_models.GetTicketHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetTicketResponse:
        """
        @summary 获取指定工单详情
        
        @param tmp_req: GetTicketRequest
        @param tmp_header: GetTicketHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetTicketResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetTicketShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetTicketShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.open_team_id):
            body['OpenTeamId'] = request.open_team_id
        if not UtilClient.is_unset(request.open_ticket_id):
            body['OpenTicketId'] = request.open_ticket_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetTicket',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ticket/getTicket',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetTicketResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_ticket(
        self,
        request: aliding_20230426_models.GetTicketRequest,
    ) -> aliding_20230426_models.GetTicketResponse:
        """
        @summary 获取指定工单详情
        
        @param request: GetTicketRequest
        @return: GetTicketResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetTicketHeaders()
        return self.get_ticket_with_options(request, headers, runtime)

    async def get_ticket_async(
        self,
        request: aliding_20230426_models.GetTicketRequest,
    ) -> aliding_20230426_models.GetTicketResponse:
        """
        @summary 获取指定工单详情
        
        @param request: GetTicketRequest
        @return: GetTicketResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetTicketHeaders()
        return await self.get_ticket_with_options_async(request, headers, runtime)

    def get_todo_task_with_options(
        self,
        tmp_req: aliding_20230426_models.GetTodoTaskRequest,
        tmp_header: aliding_20230426_models.GetTodoTaskHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetTodoTaskResponse:
        """
        @summary 获取钉钉待办任务详情
        
        @param tmp_req: GetTodoTaskRequest
        @param tmp_header: GetTodoTaskHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetTodoTaskResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetTodoTaskShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetTodoTaskShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.task_id):
            body['TaskId'] = request.task_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetTodoTask',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/task/getTodoTask',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetTodoTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_todo_task_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetTodoTaskRequest,
        tmp_header: aliding_20230426_models.GetTodoTaskHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetTodoTaskResponse:
        """
        @summary 获取钉钉待办任务详情
        
        @param tmp_req: GetTodoTaskRequest
        @param tmp_header: GetTodoTaskHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetTodoTaskResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetTodoTaskShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetTodoTaskShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.task_id):
            body['TaskId'] = request.task_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetTodoTask',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/task/getTodoTask',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetTodoTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_todo_task(
        self,
        request: aliding_20230426_models.GetTodoTaskRequest,
    ) -> aliding_20230426_models.GetTodoTaskResponse:
        """
        @summary 获取钉钉待办任务详情
        
        @param request: GetTodoTaskRequest
        @return: GetTodoTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetTodoTaskHeaders()
        return self.get_todo_task_with_options(request, headers, runtime)

    async def get_todo_task_async(
        self,
        request: aliding_20230426_models.GetTodoTaskRequest,
    ) -> aliding_20230426_models.GetTodoTaskResponse:
        """
        @summary 获取钉钉待办任务详情
        
        @param request: GetTodoTaskRequest
        @return: GetTodoTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetTodoTaskHeaders()
        return await self.get_todo_task_with_options_async(request, headers, runtime)

    def get_user_with_options(
        self,
        tmp_req: aliding_20230426_models.GetUserRequest,
        tmp_header: aliding_20230426_models.GetUserHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetUserResponse:
        """
        @summary 获取专属账号信息
        
        @param tmp_req: GetUserRequest
        @param tmp_header: GetUserHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetUserResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetUserShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetUserShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.language):
            body['language'] = request.language
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetUser',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/im/getUser',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetUserResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_user_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetUserRequest,
        tmp_header: aliding_20230426_models.GetUserHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetUserResponse:
        """
        @summary 获取专属账号信息
        
        @param tmp_req: GetUserRequest
        @param tmp_header: GetUserHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetUserResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetUserShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetUserShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.language):
            body['language'] = request.language
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetUser',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/im/getUser',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetUserResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_user(
        self,
        request: aliding_20230426_models.GetUserRequest,
    ) -> aliding_20230426_models.GetUserResponse:
        """
        @summary 获取专属账号信息
        
        @param request: GetUserRequest
        @return: GetUserResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetUserHeaders()
        return self.get_user_with_options(request, headers, runtime)

    async def get_user_async(
        self,
        request: aliding_20230426_models.GetUserRequest,
    ) -> aliding_20230426_models.GetUserResponse:
        """
        @summary 获取专属账号信息
        
        @param request: GetUserRequest
        @return: GetUserResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetUserHeaders()
        return await self.get_user_with_options_async(request, headers, runtime)

    def get_user_id_with_options(
        self,
        tmp_req: aliding_20230426_models.GetUserIdRequest,
        tmp_header: aliding_20230426_models.GetUserIdHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetUserIdResponse:
        """
        @summary 根据unionId获取用户userId
        
        @param tmp_req: GetUserIdRequest
        @param tmp_header: GetUserIdHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetUserIdResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetUserIdShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetUserIdShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.union_id):
            body['UnionId'] = request.union_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetUserId',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/im/getUserId',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetUserIdResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_user_id_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetUserIdRequest,
        tmp_header: aliding_20230426_models.GetUserIdHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetUserIdResponse:
        """
        @summary 根据unionId获取用户userId
        
        @param tmp_req: GetUserIdRequest
        @param tmp_header: GetUserIdHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetUserIdResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetUserIdShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetUserIdShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.union_id):
            body['UnionId'] = request.union_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetUserId',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/im/getUserId',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetUserIdResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_user_id(
        self,
        request: aliding_20230426_models.GetUserIdRequest,
    ) -> aliding_20230426_models.GetUserIdResponse:
        """
        @summary 根据unionId获取用户userId
        
        @param request: GetUserIdRequest
        @return: GetUserIdResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetUserIdHeaders()
        return self.get_user_id_with_options(request, headers, runtime)

    async def get_user_id_async(
        self,
        request: aliding_20230426_models.GetUserIdRequest,
    ) -> aliding_20230426_models.GetUserIdResponse:
        """
        @summary 根据unionId获取用户userId
        
        @param request: GetUserIdRequest
        @return: GetUserIdResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetUserIdHeaders()
        return await self.get_user_id_with_options_async(request, headers, runtime)

    def get_user_id_by_org_id_and_staff_id_with_options(
        self,
        tmp_req: aliding_20230426_models.GetUserIdByOrgIdAndStaffIdRequest,
        tmp_header: aliding_20230426_models.GetUserIdByOrgIdAndStaffIdHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetUserIdByOrgIdAndStaffIdResponse:
        """
        @summary 根据orgId和staffId获取用户userId
        
        @param tmp_req: GetUserIdByOrgIdAndStaffIdRequest
        @param tmp_header: GetUserIdByOrgIdAndStaffIdHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetUserIdByOrgIdAndStaffIdResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetUserIdByOrgIdAndStaffIdShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetUserIdByOrgIdAndStaffIdShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.org_id):
            body['OrgId'] = request.org_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetUserIdByOrgIdAndStaffId',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/im/getUserIdByOrgIdAndStaffId',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetUserIdByOrgIdAndStaffIdResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_user_id_by_org_id_and_staff_id_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetUserIdByOrgIdAndStaffIdRequest,
        tmp_header: aliding_20230426_models.GetUserIdByOrgIdAndStaffIdHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetUserIdByOrgIdAndStaffIdResponse:
        """
        @summary 根据orgId和staffId获取用户userId
        
        @param tmp_req: GetUserIdByOrgIdAndStaffIdRequest
        @param tmp_header: GetUserIdByOrgIdAndStaffIdHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetUserIdByOrgIdAndStaffIdResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetUserIdByOrgIdAndStaffIdShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetUserIdByOrgIdAndStaffIdShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.org_id):
            body['OrgId'] = request.org_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetUserIdByOrgIdAndStaffId',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/im/getUserIdByOrgIdAndStaffId',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetUserIdByOrgIdAndStaffIdResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_user_id_by_org_id_and_staff_id(
        self,
        request: aliding_20230426_models.GetUserIdByOrgIdAndStaffIdRequest,
    ) -> aliding_20230426_models.GetUserIdByOrgIdAndStaffIdResponse:
        """
        @summary 根据orgId和staffId获取用户userId
        
        @param request: GetUserIdByOrgIdAndStaffIdRequest
        @return: GetUserIdByOrgIdAndStaffIdResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetUserIdByOrgIdAndStaffIdHeaders()
        return self.get_user_id_by_org_id_and_staff_id_with_options(request, headers, runtime)

    async def get_user_id_by_org_id_and_staff_id_async(
        self,
        request: aliding_20230426_models.GetUserIdByOrgIdAndStaffIdRequest,
    ) -> aliding_20230426_models.GetUserIdByOrgIdAndStaffIdResponse:
        """
        @summary 根据orgId和staffId获取用户userId
        
        @param request: GetUserIdByOrgIdAndStaffIdRequest
        @return: GetUserIdByOrgIdAndStaffIdResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetUserIdByOrgIdAndStaffIdHeaders()
        return await self.get_user_id_by_org_id_and_staff_id_with_options_async(request, headers, runtime)

    def get_user_latest_plan_with_options(
        self,
        tmp_req: aliding_20230426_models.GetUserLatestPlanRequest,
        tmp_header: aliding_20230426_models.GetUserLatestPlanHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetUserLatestPlanResponse:
        """
        @summary 获取用户最新的有效的专属账号迁移方案
        
        @param tmp_req: GetUserLatestPlanRequest
        @param tmp_header: GetUserLatestPlanHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetUserLatestPlanResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetUserLatestPlanShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetUserLatestPlanShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetUserLatestPlan',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/aliding/v1/indepding/getUserLatestPlan',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetUserLatestPlanResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_user_latest_plan_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetUserLatestPlanRequest,
        tmp_header: aliding_20230426_models.GetUserLatestPlanHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetUserLatestPlanResponse:
        """
        @summary 获取用户最新的有效的专属账号迁移方案
        
        @param tmp_req: GetUserLatestPlanRequest
        @param tmp_header: GetUserLatestPlanHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetUserLatestPlanResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetUserLatestPlanShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetUserLatestPlanShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetUserLatestPlan',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/aliding/v1/indepding/getUserLatestPlan',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetUserLatestPlanResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_user_latest_plan(
        self,
        request: aliding_20230426_models.GetUserLatestPlanRequest,
    ) -> aliding_20230426_models.GetUserLatestPlanResponse:
        """
        @summary 获取用户最新的有效的专属账号迁移方案
        
        @param request: GetUserLatestPlanRequest
        @return: GetUserLatestPlanResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetUserLatestPlanHeaders()
        return self.get_user_latest_plan_with_options(request, headers, runtime)

    async def get_user_latest_plan_async(
        self,
        request: aliding_20230426_models.GetUserLatestPlanRequest,
    ) -> aliding_20230426_models.GetUserLatestPlanResponse:
        """
        @summary 获取用户最新的有效的专属账号迁移方案
        
        @param request: GetUserLatestPlanRequest
        @return: GetUserLatestPlanResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetUserLatestPlanHeaders()
        return await self.get_user_latest_plan_with_options_async(request, headers, runtime)

    def get_workspace_with_options(
        self,
        tmp_req: aliding_20230426_models.GetWorkspaceRequest,
        tmp_header: aliding_20230426_models.GetWorkspaceHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetWorkspaceResponse:
        """
        @summary 获取知识库
        
        @param tmp_req: GetWorkspaceRequest
        @param tmp_header: GetWorkspaceHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetWorkspaceResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetWorkspaceShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetWorkspaceShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.with_permission_role):
            body['WithPermissionRole'] = request.with_permission_role
        if not UtilClient.is_unset(request.workspace_id):
            body['WorkspaceId'] = request.workspace_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetWorkspace',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v2/documents/getWorkspace',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetWorkspaceResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_workspace_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetWorkspaceRequest,
        tmp_header: aliding_20230426_models.GetWorkspaceHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetWorkspaceResponse:
        """
        @summary 获取知识库
        
        @param tmp_req: GetWorkspaceRequest
        @param tmp_header: GetWorkspaceHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetWorkspaceResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetWorkspaceShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetWorkspaceShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.with_permission_role):
            body['WithPermissionRole'] = request.with_permission_role
        if not UtilClient.is_unset(request.workspace_id):
            body['WorkspaceId'] = request.workspace_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetWorkspace',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v2/documents/getWorkspace',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetWorkspaceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_workspace(
        self,
        request: aliding_20230426_models.GetWorkspaceRequest,
    ) -> aliding_20230426_models.GetWorkspaceResponse:
        """
        @summary 获取知识库
        
        @param request: GetWorkspaceRequest
        @return: GetWorkspaceResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetWorkspaceHeaders()
        return self.get_workspace_with_options(request, headers, runtime)

    async def get_workspace_async(
        self,
        request: aliding_20230426_models.GetWorkspaceRequest,
    ) -> aliding_20230426_models.GetWorkspaceResponse:
        """
        @summary 获取知识库
        
        @param request: GetWorkspaceRequest
        @return: GetWorkspaceResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetWorkspaceHeaders()
        return await self.get_workspace_with_options_async(request, headers, runtime)

    def get_workspaces_with_options(
        self,
        tmp_req: aliding_20230426_models.GetWorkspacesRequest,
        tmp_header: aliding_20230426_models.GetWorkspacesHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetWorkspacesResponse:
        """
        @summary 批量获取知识库
        
        @param tmp_req: GetWorkspacesRequest
        @param tmp_header: GetWorkspacesHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetWorkspacesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetWorkspacesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetWorkspacesShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.option):
            request.option_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.option, 'Option', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        if not UtilClient.is_unset(tmp_req.workspace_ids):
            request.workspace_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.workspace_ids, 'WorkspaceIds', 'json')
        body = {}
        if not UtilClient.is_unset(request.option_shrink):
            body['Option'] = request.option_shrink
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workspace_ids_shrink):
            body['WorkspaceIds'] = request.workspace_ids_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetWorkspaces',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v2/documents/getWorkspaces',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetWorkspacesResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_workspaces_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GetWorkspacesRequest,
        tmp_header: aliding_20230426_models.GetWorkspacesHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GetWorkspacesResponse:
        """
        @summary 批量获取知识库
        
        @param tmp_req: GetWorkspacesRequest
        @param tmp_header: GetWorkspacesHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetWorkspacesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GetWorkspacesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GetWorkspacesShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.option):
            request.option_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.option, 'Option', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        if not UtilClient.is_unset(tmp_req.workspace_ids):
            request.workspace_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.workspace_ids, 'WorkspaceIds', 'json')
        body = {}
        if not UtilClient.is_unset(request.option_shrink):
            body['Option'] = request.option_shrink
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workspace_ids_shrink):
            body['WorkspaceIds'] = request.workspace_ids_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetWorkspaces',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v2/documents/getWorkspaces',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GetWorkspacesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_workspaces(
        self,
        request: aliding_20230426_models.GetWorkspacesRequest,
    ) -> aliding_20230426_models.GetWorkspacesResponse:
        """
        @summary 批量获取知识库
        
        @param request: GetWorkspacesRequest
        @return: GetWorkspacesResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetWorkspacesHeaders()
        return self.get_workspaces_with_options(request, headers, runtime)

    async def get_workspaces_async(
        self,
        request: aliding_20230426_models.GetWorkspacesRequest,
    ) -> aliding_20230426_models.GetWorkspacesResponse:
        """
        @summary 批量获取知识库
        
        @param request: GetWorkspacesRequest
        @return: GetWorkspacesResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GetWorkspacesHeaders()
        return await self.get_workspaces_with_options_async(request, headers, runtime)

    def grant_honor_with_options(
        self,
        tmp_req: aliding_20230426_models.GrantHonorRequest,
        tmp_header: aliding_20230426_models.GrantHonorHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GrantHonorResponse:
        """
        @summary 授予勋章
        
        @param tmp_req: GrantHonorRequest
        @param tmp_header: GrantHonorHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GrantHonorResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GrantHonorShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GrantHonorShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        if not UtilClient.is_unset(tmp_req.open_conversation_ids):
            request.open_conversation_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.open_conversation_ids, 'openConversationIds', 'json')
        if not UtilClient.is_unset(tmp_req.receiver_user_ids):
            request.receiver_user_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.receiver_user_ids, 'receiverUserIds', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.expiration_time):
            body['expirationTime'] = request.expiration_time
        if not UtilClient.is_unset(request.grant_reason):
            body['grantReason'] = request.grant_reason
        if not UtilClient.is_unset(request.granter_name):
            body['granterName'] = request.granter_name
        if not UtilClient.is_unset(request.honor_id):
            body['honorId'] = request.honor_id
        if not UtilClient.is_unset(request.notice_announcer):
            body['noticeAnnouncer'] = request.notice_announcer
        if not UtilClient.is_unset(request.notice_single):
            body['noticeSingle'] = request.notice_single
        if not UtilClient.is_unset(request.open_conversation_ids_shrink):
            body['openConversationIds'] = request.open_conversation_ids_shrink
        if not UtilClient.is_unset(request.org_id):
            body['orgId'] = request.org_id
        if not UtilClient.is_unset(request.receiver_user_ids_shrink):
            body['receiverUserIds'] = request.receiver_user_ids_shrink
        if not UtilClient.is_unset(request.sender_user_id):
            body['senderUserId'] = request.sender_user_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GrantHonor',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/aliding/v1/honor/grantHonor',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GrantHonorResponse(),
            self.call_api(params, req, runtime)
        )

    async def grant_honor_with_options_async(
        self,
        tmp_req: aliding_20230426_models.GrantHonorRequest,
        tmp_header: aliding_20230426_models.GrantHonorHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.GrantHonorResponse:
        """
        @summary 授予勋章
        
        @param tmp_req: GrantHonorRequest
        @param tmp_header: GrantHonorHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: GrantHonorResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.GrantHonorShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.GrantHonorShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        if not UtilClient.is_unset(tmp_req.open_conversation_ids):
            request.open_conversation_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.open_conversation_ids, 'openConversationIds', 'json')
        if not UtilClient.is_unset(tmp_req.receiver_user_ids):
            request.receiver_user_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.receiver_user_ids, 'receiverUserIds', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.expiration_time):
            body['expirationTime'] = request.expiration_time
        if not UtilClient.is_unset(request.grant_reason):
            body['grantReason'] = request.grant_reason
        if not UtilClient.is_unset(request.granter_name):
            body['granterName'] = request.granter_name
        if not UtilClient.is_unset(request.honor_id):
            body['honorId'] = request.honor_id
        if not UtilClient.is_unset(request.notice_announcer):
            body['noticeAnnouncer'] = request.notice_announcer
        if not UtilClient.is_unset(request.notice_single):
            body['noticeSingle'] = request.notice_single
        if not UtilClient.is_unset(request.open_conversation_ids_shrink):
            body['openConversationIds'] = request.open_conversation_ids_shrink
        if not UtilClient.is_unset(request.org_id):
            body['orgId'] = request.org_id
        if not UtilClient.is_unset(request.receiver_user_ids_shrink):
            body['receiverUserIds'] = request.receiver_user_ids_shrink
        if not UtilClient.is_unset(request.sender_user_id):
            body['senderUserId'] = request.sender_user_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GrantHonor',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/aliding/v1/honor/grantHonor',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.GrantHonorResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def grant_honor(
        self,
        request: aliding_20230426_models.GrantHonorRequest,
    ) -> aliding_20230426_models.GrantHonorResponse:
        """
        @summary 授予勋章
        
        @param request: GrantHonorRequest
        @return: GrantHonorResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GrantHonorHeaders()
        return self.grant_honor_with_options(request, headers, runtime)

    async def grant_honor_async(
        self,
        request: aliding_20230426_models.GrantHonorRequest,
    ) -> aliding_20230426_models.GrantHonorResponse:
        """
        @summary 授予勋章
        
        @param request: GrantHonorRequest
        @return: GrantHonorResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.GrantHonorHeaders()
        return await self.grant_honor_with_options_async(request, headers, runtime)

    def init_multipart_file_upload_with_options(
        self,
        tmp_req: aliding_20230426_models.InitMultipartFileUploadRequest,
        tmp_header: aliding_20230426_models.InitMultipartFileUploadHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.InitMultipartFileUploadResponse:
        """
        @summary 初始化文件分片上传
        
        @param tmp_req: InitMultipartFileUploadRequest
        @param tmp_header: InitMultipartFileUploadHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: InitMultipartFileUploadResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.InitMultipartFileUploadShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.InitMultipartFileUploadShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.option):
            request.option_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.option, 'Option', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.option_shrink):
            body['Option'] = request.option_shrink
        if not UtilClient.is_unset(request.parent_dentry_uuid):
            body['ParentDentryUuid'] = request.parent_dentry_uuid
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='InitMultipartFileUpload',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/initMultipartFileUpload',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.InitMultipartFileUploadResponse(),
            self.call_api(params, req, runtime)
        )

    async def init_multipart_file_upload_with_options_async(
        self,
        tmp_req: aliding_20230426_models.InitMultipartFileUploadRequest,
        tmp_header: aliding_20230426_models.InitMultipartFileUploadHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.InitMultipartFileUploadResponse:
        """
        @summary 初始化文件分片上传
        
        @param tmp_req: InitMultipartFileUploadRequest
        @param tmp_header: InitMultipartFileUploadHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: InitMultipartFileUploadResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.InitMultipartFileUploadShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.InitMultipartFileUploadShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.option):
            request.option_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.option, 'Option', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.option_shrink):
            body['Option'] = request.option_shrink
        if not UtilClient.is_unset(request.parent_dentry_uuid):
            body['ParentDentryUuid'] = request.parent_dentry_uuid
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='InitMultipartFileUpload',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/initMultipartFileUpload',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.InitMultipartFileUploadResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def init_multipart_file_upload(
        self,
        request: aliding_20230426_models.InitMultipartFileUploadRequest,
    ) -> aliding_20230426_models.InitMultipartFileUploadResponse:
        """
        @summary 初始化文件分片上传
        
        @param request: InitMultipartFileUploadRequest
        @return: InitMultipartFileUploadResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.InitMultipartFileUploadHeaders()
        return self.init_multipart_file_upload_with_options(request, headers, runtime)

    async def init_multipart_file_upload_async(
        self,
        request: aliding_20230426_models.InitMultipartFileUploadRequest,
    ) -> aliding_20230426_models.InitMultipartFileUploadResponse:
        """
        @summary 初始化文件分片上传
        
        @param request: InitMultipartFileUploadRequest
        @return: InitMultipartFileUploadResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.InitMultipartFileUploadHeaders()
        return await self.init_multipart_file_upload_with_options_async(request, headers, runtime)

    def insert_columns_before_with_options(
        self,
        tmp_req: aliding_20230426_models.InsertColumnsBeforeRequest,
        tmp_header: aliding_20230426_models.InsertColumnsBeforeHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.InsertColumnsBeforeResponse:
        """
        @summary 在指定列左侧插入若干列
        
        @param tmp_req: InsertColumnsBeforeRequest
        @param tmp_header: InsertColumnsBeforeHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: InsertColumnsBeforeResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.InsertColumnsBeforeShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.InsertColumnsBeforeShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.column):
            body['Column'] = request.column
        if not UtilClient.is_unset(request.column_count):
            body['ColumnCount'] = request.column_count
        if not UtilClient.is_unset(request.sheet_id):
            body['SheetId'] = request.sheet_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workbook_id):
            body['WorkbookId'] = request.workbook_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='InsertColumnsBefore',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/insertColumnsBefore',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.InsertColumnsBeforeResponse(),
            self.call_api(params, req, runtime)
        )

    async def insert_columns_before_with_options_async(
        self,
        tmp_req: aliding_20230426_models.InsertColumnsBeforeRequest,
        tmp_header: aliding_20230426_models.InsertColumnsBeforeHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.InsertColumnsBeforeResponse:
        """
        @summary 在指定列左侧插入若干列
        
        @param tmp_req: InsertColumnsBeforeRequest
        @param tmp_header: InsertColumnsBeforeHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: InsertColumnsBeforeResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.InsertColumnsBeforeShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.InsertColumnsBeforeShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.column):
            body['Column'] = request.column
        if not UtilClient.is_unset(request.column_count):
            body['ColumnCount'] = request.column_count
        if not UtilClient.is_unset(request.sheet_id):
            body['SheetId'] = request.sheet_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workbook_id):
            body['WorkbookId'] = request.workbook_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='InsertColumnsBefore',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/insertColumnsBefore',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.InsertColumnsBeforeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def insert_columns_before(
        self,
        request: aliding_20230426_models.InsertColumnsBeforeRequest,
    ) -> aliding_20230426_models.InsertColumnsBeforeResponse:
        """
        @summary 在指定列左侧插入若干列
        
        @param request: InsertColumnsBeforeRequest
        @return: InsertColumnsBeforeResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.InsertColumnsBeforeHeaders()
        return self.insert_columns_before_with_options(request, headers, runtime)

    async def insert_columns_before_async(
        self,
        request: aliding_20230426_models.InsertColumnsBeforeRequest,
    ) -> aliding_20230426_models.InsertColumnsBeforeResponse:
        """
        @summary 在指定列左侧插入若干列
        
        @param request: InsertColumnsBeforeRequest
        @return: InsertColumnsBeforeResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.InsertColumnsBeforeHeaders()
        return await self.insert_columns_before_with_options_async(request, headers, runtime)

    def insert_content_with_options_with_options(
        self,
        tmp_req: aliding_20230426_models.InsertContentWithOptionsRequest,
        tmp_header: aliding_20230426_models.InsertContentWithOptionsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.InsertContentWithOptionsResponse:
        """
        @summary 文档中插入内容
        
        @param tmp_req: InsertContentWithOptionsRequest
        @param tmp_header: InsertContentWithOptionsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: InsertContentWithOptionsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.InsertContentWithOptionsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.InsertContentWithOptionsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.content):
            request.content_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.content, 'Content', 'json')
        if not UtilClient.is_unset(tmp_req.path):
            request.path_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.path, 'Path', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.content_shrink):
            body['Content'] = request.content_shrink
        if not UtilClient.is_unset(request.document_id):
            body['DocumentId'] = request.document_id
        if not UtilClient.is_unset(request.index):
            body['Index'] = request.index
        if not UtilClient.is_unset(request.path_shrink):
            body['Path'] = request.path_shrink
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='InsertContentWithOptions',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/insertContentWithOptions',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.InsertContentWithOptionsResponse(),
            self.call_api(params, req, runtime)
        )

    async def insert_content_with_options_with_options_async(
        self,
        tmp_req: aliding_20230426_models.InsertContentWithOptionsRequest,
        tmp_header: aliding_20230426_models.InsertContentWithOptionsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.InsertContentWithOptionsResponse:
        """
        @summary 文档中插入内容
        
        @param tmp_req: InsertContentWithOptionsRequest
        @param tmp_header: InsertContentWithOptionsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: InsertContentWithOptionsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.InsertContentWithOptionsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.InsertContentWithOptionsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.content):
            request.content_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.content, 'Content', 'json')
        if not UtilClient.is_unset(tmp_req.path):
            request.path_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.path, 'Path', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.content_shrink):
            body['Content'] = request.content_shrink
        if not UtilClient.is_unset(request.document_id):
            body['DocumentId'] = request.document_id
        if not UtilClient.is_unset(request.index):
            body['Index'] = request.index
        if not UtilClient.is_unset(request.path_shrink):
            body['Path'] = request.path_shrink
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='InsertContentWithOptions',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/insertContentWithOptions',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.InsertContentWithOptionsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def insert_content_with_options(
        self,
        request: aliding_20230426_models.InsertContentWithOptionsRequest,
    ) -> aliding_20230426_models.InsertContentWithOptionsResponse:
        """
        @summary 文档中插入内容
        
        @param request: InsertContentWithOptionsRequest
        @return: InsertContentWithOptionsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.InsertContentWithOptionsHeaders()
        return self.insert_content_with_options_with_options(request, headers, runtime)

    async def insert_content_with_options_async(
        self,
        request: aliding_20230426_models.InsertContentWithOptionsRequest,
    ) -> aliding_20230426_models.InsertContentWithOptionsResponse:
        """
        @summary 文档中插入内容
        
        @param request: InsertContentWithOptionsRequest
        @return: InsertContentWithOptionsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.InsertContentWithOptionsHeaders()
        return await self.insert_content_with_options_with_options_async(request, headers, runtime)

    def insert_drop_down_list_with_options(
        self,
        tmp_req: aliding_20230426_models.InsertDropDownListRequest,
        tmp_header: aliding_20230426_models.InsertDropDownListHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.InsertDropDownListResponse:
        """
        @summary 插入下拉列表
        
        @param tmp_req: InsertDropDownListRequest
        @param tmp_header: InsertDropDownListHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: InsertDropDownListResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.InsertDropDownListShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.InsertDropDownListShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.options):
            request.options_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.options, 'Options', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.options_shrink):
            body['Options'] = request.options_shrink
        if not UtilClient.is_unset(request.range_address):
            body['RangeAddress'] = request.range_address
        if not UtilClient.is_unset(request.sheet_id):
            body['SheetId'] = request.sheet_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workbook_id):
            body['WorkbookId'] = request.workbook_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='InsertDropDownList',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/insertDropDownList',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.InsertDropDownListResponse(),
            self.call_api(params, req, runtime)
        )

    async def insert_drop_down_list_with_options_async(
        self,
        tmp_req: aliding_20230426_models.InsertDropDownListRequest,
        tmp_header: aliding_20230426_models.InsertDropDownListHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.InsertDropDownListResponse:
        """
        @summary 插入下拉列表
        
        @param tmp_req: InsertDropDownListRequest
        @param tmp_header: InsertDropDownListHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: InsertDropDownListResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.InsertDropDownListShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.InsertDropDownListShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.options):
            request.options_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.options, 'Options', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.options_shrink):
            body['Options'] = request.options_shrink
        if not UtilClient.is_unset(request.range_address):
            body['RangeAddress'] = request.range_address
        if not UtilClient.is_unset(request.sheet_id):
            body['SheetId'] = request.sheet_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workbook_id):
            body['WorkbookId'] = request.workbook_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='InsertDropDownList',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/insertDropDownList',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.InsertDropDownListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def insert_drop_down_list(
        self,
        request: aliding_20230426_models.InsertDropDownListRequest,
    ) -> aliding_20230426_models.InsertDropDownListResponse:
        """
        @summary 插入下拉列表
        
        @param request: InsertDropDownListRequest
        @return: InsertDropDownListResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.InsertDropDownListHeaders()
        return self.insert_drop_down_list_with_options(request, headers, runtime)

    async def insert_drop_down_list_async(
        self,
        request: aliding_20230426_models.InsertDropDownListRequest,
    ) -> aliding_20230426_models.InsertDropDownListResponse:
        """
        @summary 插入下拉列表
        
        @param request: InsertDropDownListRequest
        @return: InsertDropDownListResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.InsertDropDownListHeaders()
        return await self.insert_drop_down_list_with_options_async(request, headers, runtime)

    def insert_multi_dim_table_record_with_options(
        self,
        tmp_req: aliding_20230426_models.InsertMultiDimTableRecordRequest,
        tmp_header: aliding_20230426_models.InsertMultiDimTableRecordHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.InsertMultiDimTableRecordResponse:
        """
        @summary 新增记录
        
        @param tmp_req: InsertMultiDimTableRecordRequest
        @param tmp_header: InsertMultiDimTableRecordHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: InsertMultiDimTableRecordResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.InsertMultiDimTableRecordShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.InsertMultiDimTableRecordShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.records):
            request.records_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.records, 'Records', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.base_id):
            body['BaseId'] = request.base_id
        if not UtilClient.is_unset(request.records_shrink):
            body['Records'] = request.records_shrink
        if not UtilClient.is_unset(request.sheet_id_or_name):
            body['SheetIdOrName'] = request.sheet_id_or_name
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='InsertMultiDimTableRecord',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/table/insertMultiDimTableRecord',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.InsertMultiDimTableRecordResponse(),
            self.call_api(params, req, runtime)
        )

    async def insert_multi_dim_table_record_with_options_async(
        self,
        tmp_req: aliding_20230426_models.InsertMultiDimTableRecordRequest,
        tmp_header: aliding_20230426_models.InsertMultiDimTableRecordHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.InsertMultiDimTableRecordResponse:
        """
        @summary 新增记录
        
        @param tmp_req: InsertMultiDimTableRecordRequest
        @param tmp_header: InsertMultiDimTableRecordHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: InsertMultiDimTableRecordResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.InsertMultiDimTableRecordShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.InsertMultiDimTableRecordShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.records):
            request.records_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.records, 'Records', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.base_id):
            body['BaseId'] = request.base_id
        if not UtilClient.is_unset(request.records_shrink):
            body['Records'] = request.records_shrink
        if not UtilClient.is_unset(request.sheet_id_or_name):
            body['SheetIdOrName'] = request.sheet_id_or_name
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='InsertMultiDimTableRecord',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/table/insertMultiDimTableRecord',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.InsertMultiDimTableRecordResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def insert_multi_dim_table_record(
        self,
        request: aliding_20230426_models.InsertMultiDimTableRecordRequest,
    ) -> aliding_20230426_models.InsertMultiDimTableRecordResponse:
        """
        @summary 新增记录
        
        @param request: InsertMultiDimTableRecordRequest
        @return: InsertMultiDimTableRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.InsertMultiDimTableRecordHeaders()
        return self.insert_multi_dim_table_record_with_options(request, headers, runtime)

    async def insert_multi_dim_table_record_async(
        self,
        request: aliding_20230426_models.InsertMultiDimTableRecordRequest,
    ) -> aliding_20230426_models.InsertMultiDimTableRecordResponse:
        """
        @summary 新增记录
        
        @param request: InsertMultiDimTableRecordRequest
        @return: InsertMultiDimTableRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.InsertMultiDimTableRecordHeaders()
        return await self.insert_multi_dim_table_record_with_options_async(request, headers, runtime)

    def insert_rows_before_with_options(
        self,
        tmp_req: aliding_20230426_models.InsertRowsBeforeRequest,
        tmp_header: aliding_20230426_models.InsertRowsBeforeHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.InsertRowsBeforeResponse:
        """
        @summary 在指定行上方插入若干行
        
        @param tmp_req: InsertRowsBeforeRequest
        @param tmp_header: InsertRowsBeforeHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: InsertRowsBeforeResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.InsertRowsBeforeShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.InsertRowsBeforeShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.row):
            body['Row'] = request.row
        if not UtilClient.is_unset(request.row_count):
            body['RowCount'] = request.row_count
        if not UtilClient.is_unset(request.sheet_id):
            body['SheetId'] = request.sheet_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workbook_id):
            body['WorkbookId'] = request.workbook_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='InsertRowsBefore',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/insertRowsBefore',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.InsertRowsBeforeResponse(),
            self.call_api(params, req, runtime)
        )

    async def insert_rows_before_with_options_async(
        self,
        tmp_req: aliding_20230426_models.InsertRowsBeforeRequest,
        tmp_header: aliding_20230426_models.InsertRowsBeforeHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.InsertRowsBeforeResponse:
        """
        @summary 在指定行上方插入若干行
        
        @param tmp_req: InsertRowsBeforeRequest
        @param tmp_header: InsertRowsBeforeHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: InsertRowsBeforeResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.InsertRowsBeforeShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.InsertRowsBeforeShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.row):
            body['Row'] = request.row
        if not UtilClient.is_unset(request.row_count):
            body['RowCount'] = request.row_count
        if not UtilClient.is_unset(request.sheet_id):
            body['SheetId'] = request.sheet_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workbook_id):
            body['WorkbookId'] = request.workbook_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='InsertRowsBefore',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/insertRowsBefore',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.InsertRowsBeforeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def insert_rows_before(
        self,
        request: aliding_20230426_models.InsertRowsBeforeRequest,
    ) -> aliding_20230426_models.InsertRowsBeforeResponse:
        """
        @summary 在指定行上方插入若干行
        
        @param request: InsertRowsBeforeRequest
        @return: InsertRowsBeforeResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.InsertRowsBeforeHeaders()
        return self.insert_rows_before_with_options(request, headers, runtime)

    async def insert_rows_before_async(
        self,
        request: aliding_20230426_models.InsertRowsBeforeRequest,
    ) -> aliding_20230426_models.InsertRowsBeforeResponse:
        """
        @summary 在指定行上方插入若干行
        
        @param request: InsertRowsBeforeRequest
        @return: InsertRowsBeforeResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.InsertRowsBeforeHeaders()
        return await self.insert_rows_before_with_options_async(request, headers, runtime)

    def invite_users_with_options(
        self,
        tmp_req: aliding_20230426_models.InviteUsersRequest,
        tmp_header: aliding_20230426_models.InviteUsersHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.InviteUsersResponse:
        """
        @summary 邀请用户入会
        
        @param tmp_req: InviteUsersRequest
        @param tmp_header: InviteUsersHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: InviteUsersResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.InviteUsersShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.InviteUsersShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.invitee_list):
            request.invitee_list_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.invitee_list, 'InviteeList', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        if not UtilClient.is_unset(tmp_req.phone_invitee_list):
            request.phone_invitee_list_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.phone_invitee_list, 'phoneInviteeList', 'json')
        body = {}
        if not UtilClient.is_unset(request.invitee_list_shrink):
            body['InviteeList'] = request.invitee_list_shrink
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.conference_id):
            body['conferenceId'] = request.conference_id
        if not UtilClient.is_unset(request.phone_invitee_list_shrink):
            body['phoneInviteeList'] = request.phone_invitee_list_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='InviteUsers',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/inviteUsers',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.InviteUsersResponse(),
            self.call_api(params, req, runtime)
        )

    async def invite_users_with_options_async(
        self,
        tmp_req: aliding_20230426_models.InviteUsersRequest,
        tmp_header: aliding_20230426_models.InviteUsersHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.InviteUsersResponse:
        """
        @summary 邀请用户入会
        
        @param tmp_req: InviteUsersRequest
        @param tmp_header: InviteUsersHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: InviteUsersResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.InviteUsersShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.InviteUsersShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.invitee_list):
            request.invitee_list_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.invitee_list, 'InviteeList', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        if not UtilClient.is_unset(tmp_req.phone_invitee_list):
            request.phone_invitee_list_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.phone_invitee_list, 'phoneInviteeList', 'json')
        body = {}
        if not UtilClient.is_unset(request.invitee_list_shrink):
            body['InviteeList'] = request.invitee_list_shrink
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.conference_id):
            body['conferenceId'] = request.conference_id
        if not UtilClient.is_unset(request.phone_invitee_list_shrink):
            body['phoneInviteeList'] = request.phone_invitee_list_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='InviteUsers',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/inviteUsers',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.InviteUsersResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def invite_users(
        self,
        request: aliding_20230426_models.InviteUsersRequest,
    ) -> aliding_20230426_models.InviteUsersResponse:
        """
        @summary 邀请用户入会
        
        @param request: InviteUsersRequest
        @return: InviteUsersResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.InviteUsersHeaders()
        return self.invite_users_with_options(request, headers, runtime)

    async def invite_users_async(
        self,
        request: aliding_20230426_models.InviteUsersRequest,
    ) -> aliding_20230426_models.InviteUsersResponse:
        """
        @summary 邀请用户入会
        
        @param request: InviteUsersRequest
        @return: InviteUsersResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.InviteUsersHeaders()
        return await self.invite_users_with_options_async(request, headers, runtime)

    def invoke_assistant_with_options(
        self,
        request: aliding_20230426_models.InvokeAssistantRequest,
        headers: aliding_20230426_models.InvokeAssistantHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.InvokeAssistantResponse:
        """
        @summary 调用助理
        
        @param request: InvokeAssistantRequest
        @param headers: InvokeAssistantHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: InvokeAssistantResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.assistant_id):
            body['assistantId'] = request.assistant_id
        if not UtilClient.is_unset(request.messages):
            body['messages'] = request.messages
        if not UtilClient.is_unset(request.original_assistant_id):
            body['originalAssistantId'] = request.original_assistant_id
        if not UtilClient.is_unset(request.session_id):
            body['sessionId'] = request.session_id
        if not UtilClient.is_unset(request.source_id_of_original_assistant_id):
            body['sourceIdOfOriginalAssistantId'] = request.source_id_of_original_assistant_id
        if not UtilClient.is_unset(request.source_type_of_original_assistant_id):
            body['sourceTypeOfOriginalAssistantId'] = request.source_type_of_original_assistant_id
        if not UtilClient.is_unset(request.stream):
            body['stream'] = request.stream
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_id):
            real_headers['accountId'] = UtilClient.to_jsonstring(headers.account_id)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='InvokeAssistant',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/ai/v1/assistant/invokeAssistant',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='json',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.InvokeAssistantResponse(),
            self.call_api(params, req, runtime)
        )

    async def invoke_assistant_with_options_async(
        self,
        request: aliding_20230426_models.InvokeAssistantRequest,
        headers: aliding_20230426_models.InvokeAssistantHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.InvokeAssistantResponse:
        """
        @summary 调用助理
        
        @param request: InvokeAssistantRequest
        @param headers: InvokeAssistantHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: InvokeAssistantResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.assistant_id):
            body['assistantId'] = request.assistant_id
        if not UtilClient.is_unset(request.messages):
            body['messages'] = request.messages
        if not UtilClient.is_unset(request.original_assistant_id):
            body['originalAssistantId'] = request.original_assistant_id
        if not UtilClient.is_unset(request.session_id):
            body['sessionId'] = request.session_id
        if not UtilClient.is_unset(request.source_id_of_original_assistant_id):
            body['sourceIdOfOriginalAssistantId'] = request.source_id_of_original_assistant_id
        if not UtilClient.is_unset(request.source_type_of_original_assistant_id):
            body['sourceTypeOfOriginalAssistantId'] = request.source_type_of_original_assistant_id
        if not UtilClient.is_unset(request.stream):
            body['stream'] = request.stream
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_id):
            real_headers['accountId'] = UtilClient.to_jsonstring(headers.account_id)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='InvokeAssistant',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/ai/v1/assistant/invokeAssistant',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='json',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.InvokeAssistantResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def invoke_assistant(
        self,
        request: aliding_20230426_models.InvokeAssistantRequest,
    ) -> aliding_20230426_models.InvokeAssistantResponse:
        """
        @summary 调用助理
        
        @param request: InvokeAssistantRequest
        @return: InvokeAssistantResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.InvokeAssistantHeaders()
        return self.invoke_assistant_with_options(request, headers, runtime)

    async def invoke_assistant_async(
        self,
        request: aliding_20230426_models.InvokeAssistantRequest,
    ) -> aliding_20230426_models.InvokeAssistantResponse:
        """
        @summary 调用助理
        
        @param request: InvokeAssistantRequest
        @return: InvokeAssistantResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.InvokeAssistantHeaders()
        return await self.invoke_assistant_with_options_async(request, headers, runtime)

    def invoke_skill_with_options(
        self,
        tmp_req: aliding_20230426_models.InvokeSkillRequest,
        tmp_header: aliding_20230426_models.InvokeSkillHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.InvokeSkillResponse:
        """
        @summary 调用AI技能
        
        @param tmp_req: InvokeSkillRequest
        @param tmp_header: InvokeSkillHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: InvokeSkillResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.InvokeSkillShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.InvokeSkillShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.params):
            request.params_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.params, 'Params', 'json')
        body = {}
        if not UtilClient.is_unset(request.params_shrink):
            body['Params'] = request.params_shrink
        if not UtilClient.is_unset(request.skill_id):
            body['SkillId'] = request.skill_id
        if not UtilClient.is_unset(request.stream):
            body['Stream'] = request.stream
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='InvokeSkill',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/ai/v1/skill/invoke',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.InvokeSkillResponse(),
            self.call_api(params, req, runtime)
        )

    async def invoke_skill_with_options_async(
        self,
        tmp_req: aliding_20230426_models.InvokeSkillRequest,
        tmp_header: aliding_20230426_models.InvokeSkillHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.InvokeSkillResponse:
        """
        @summary 调用AI技能
        
        @param tmp_req: InvokeSkillRequest
        @param tmp_header: InvokeSkillHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: InvokeSkillResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.InvokeSkillShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.InvokeSkillShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.params):
            request.params_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.params, 'Params', 'json')
        body = {}
        if not UtilClient.is_unset(request.params_shrink):
            body['Params'] = request.params_shrink
        if not UtilClient.is_unset(request.skill_id):
            body['SkillId'] = request.skill_id
        if not UtilClient.is_unset(request.stream):
            body['Stream'] = request.stream
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='InvokeSkill',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/ai/v1/skill/invoke',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.InvokeSkillResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def invoke_skill(
        self,
        request: aliding_20230426_models.InvokeSkillRequest,
    ) -> aliding_20230426_models.InvokeSkillResponse:
        """
        @summary 调用AI技能
        
        @param request: InvokeSkillRequest
        @return: InvokeSkillResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.InvokeSkillHeaders()
        return self.invoke_skill_with_options(request, headers, runtime)

    async def invoke_skill_async(
        self,
        request: aliding_20230426_models.InvokeSkillRequest,
    ) -> aliding_20230426_models.InvokeSkillResponse:
        """
        @summary 调用AI技能
        
        @param request: InvokeSkillRequest
        @return: InvokeSkillResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.InvokeSkillHeaders()
        return await self.invoke_skill_with_options_async(request, headers, runtime)

    def list_application_with_options(
        self,
        request: aliding_20230426_models.ListApplicationRequest,
        tmp_header: aliding_20230426_models.ListApplicationHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ListApplicationResponse:
        """
        @summary 查询宜搭应用列表
        
        @param request: ListApplicationRequest
        @param tmp_header: ListApplicationHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListApplicationResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.ListApplicationShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_filter):
            body['AppFilter'] = request.app_filter
        if not UtilClient.is_unset(request.app_name_search_keyword):
            body['AppNameSearchKeyword'] = request.app_name_search_keyword
        if not UtilClient.is_unset(request.corp_id):
            body['CorpId'] = request.corp_id
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.token):
            body['Token'] = request.token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListApplication',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/listApplication',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ListApplicationResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_application_with_options_async(
        self,
        request: aliding_20230426_models.ListApplicationRequest,
        tmp_header: aliding_20230426_models.ListApplicationHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ListApplicationResponse:
        """
        @summary 查询宜搭应用列表
        
        @param request: ListApplicationRequest
        @param tmp_header: ListApplicationHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListApplicationResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.ListApplicationShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_filter):
            body['AppFilter'] = request.app_filter
        if not UtilClient.is_unset(request.app_name_search_keyword):
            body['AppNameSearchKeyword'] = request.app_name_search_keyword
        if not UtilClient.is_unset(request.corp_id):
            body['CorpId'] = request.corp_id
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.token):
            body['Token'] = request.token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListApplication',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/listApplication',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ListApplicationResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_application(
        self,
        request: aliding_20230426_models.ListApplicationRequest,
    ) -> aliding_20230426_models.ListApplicationResponse:
        """
        @summary 查询宜搭应用列表
        
        @param request: ListApplicationRequest
        @return: ListApplicationResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ListApplicationHeaders()
        return self.list_application_with_options(request, headers, runtime)

    async def list_application_async(
        self,
        request: aliding_20230426_models.ListApplicationRequest,
    ) -> aliding_20230426_models.ListApplicationResponse:
        """
        @summary 查询宜搭应用列表
        
        @param request: ListApplicationRequest
        @return: ListApplicationResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ListApplicationHeaders()
        return await self.list_application_with_options_async(request, headers, runtime)

    def list_calendars_with_options(
        self,
        tmp_req: aliding_20230426_models.ListCalendarsRequest,
        tmp_header: aliding_20230426_models.ListCalendarsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ListCalendarsResponse:
        """
        @summary 查询日历
        
        @param tmp_req: ListCalendarsRequest
        @param tmp_header: ListCalendarsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCalendarsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.ListCalendarsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.ListCalendarsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.request):
            request.request_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.request, 'Request', 'json')
        body = {}
        if not UtilClient.is_unset(request.request_shrink):
            body['Request'] = request.request_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListCalendars',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/listCalendars',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ListCalendarsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_calendars_with_options_async(
        self,
        tmp_req: aliding_20230426_models.ListCalendarsRequest,
        tmp_header: aliding_20230426_models.ListCalendarsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ListCalendarsResponse:
        """
        @summary 查询日历
        
        @param tmp_req: ListCalendarsRequest
        @param tmp_header: ListCalendarsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCalendarsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.ListCalendarsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.ListCalendarsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.request):
            request.request_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.request, 'Request', 'json')
        body = {}
        if not UtilClient.is_unset(request.request_shrink):
            body['Request'] = request.request_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListCalendars',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/listCalendars',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ListCalendarsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_calendars(
        self,
        request: aliding_20230426_models.ListCalendarsRequest,
    ) -> aliding_20230426_models.ListCalendarsResponse:
        """
        @summary 查询日历
        
        @param request: ListCalendarsRequest
        @return: ListCalendarsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ListCalendarsHeaders()
        return self.list_calendars_with_options(request, headers, runtime)

    async def list_calendars_async(
        self,
        request: aliding_20230426_models.ListCalendarsRequest,
    ) -> aliding_20230426_models.ListCalendarsResponse:
        """
        @summary 查询日历
        
        @param request: ListCalendarsRequest
        @return: ListCalendarsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ListCalendarsHeaders()
        return await self.list_calendars_with_options_async(request, headers, runtime)

    def list_dentries_with_options(
        self,
        tmp_req: aliding_20230426_models.ListDentriesRequest,
        tmp_header: aliding_20230426_models.ListDentriesHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ListDentriesResponse:
        """
        @summary 获取文件或文件夹列表
        
        @param tmp_req: ListDentriesRequest
        @param tmp_header: ListDentriesHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDentriesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.ListDentriesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.ListDentriesShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.max_results):
            body['MaxResults'] = request.max_results
        if not UtilClient.is_unset(request.next_token):
            body['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.order):
            body['Order'] = request.order
        if not UtilClient.is_unset(request.order_by):
            body['OrderBy'] = request.order_by
        if not UtilClient.is_unset(request.parent_id):
            body['ParentId'] = request.parent_id
        if not UtilClient.is_unset(request.space_id):
            body['SpaceId'] = request.space_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.with_thumbnail):
            body['WithThumbnail'] = request.with_thumbnail
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListDentries',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/listDentries',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ListDentriesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_dentries_with_options_async(
        self,
        tmp_req: aliding_20230426_models.ListDentriesRequest,
        tmp_header: aliding_20230426_models.ListDentriesHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ListDentriesResponse:
        """
        @summary 获取文件或文件夹列表
        
        @param tmp_req: ListDentriesRequest
        @param tmp_header: ListDentriesHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDentriesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.ListDentriesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.ListDentriesShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.max_results):
            body['MaxResults'] = request.max_results
        if not UtilClient.is_unset(request.next_token):
            body['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.order):
            body['Order'] = request.order
        if not UtilClient.is_unset(request.order_by):
            body['OrderBy'] = request.order_by
        if not UtilClient.is_unset(request.parent_id):
            body['ParentId'] = request.parent_id
        if not UtilClient.is_unset(request.space_id):
            body['SpaceId'] = request.space_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.with_thumbnail):
            body['WithThumbnail'] = request.with_thumbnail
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListDentries',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/listDentries',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ListDentriesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_dentries(
        self,
        request: aliding_20230426_models.ListDentriesRequest,
    ) -> aliding_20230426_models.ListDentriesResponse:
        """
        @summary 获取文件或文件夹列表
        
        @param request: ListDentriesRequest
        @return: ListDentriesResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ListDentriesHeaders()
        return self.list_dentries_with_options(request, headers, runtime)

    async def list_dentries_async(
        self,
        request: aliding_20230426_models.ListDentriesRequest,
    ) -> aliding_20230426_models.ListDentriesResponse:
        """
        @summary 获取文件或文件夹列表
        
        @param request: ListDentriesRequest
        @return: ListDentriesResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ListDentriesHeaders()
        return await self.list_dentries_with_options_async(request, headers, runtime)

    def list_drive_spaces_with_options(
        self,
        tmp_req: aliding_20230426_models.ListDriveSpacesRequest,
        tmp_header: aliding_20230426_models.ListDriveSpacesHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ListDriveSpacesResponse:
        """
        @summary 获取钉盘空间列表
        
        @param tmp_req: ListDriveSpacesRequest
        @param tmp_header: ListDriveSpacesHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDriveSpacesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.ListDriveSpacesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.ListDriveSpacesShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.max_results):
            body['MaxResults'] = request.max_results
        if not UtilClient.is_unset(request.next_token):
            body['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.space_type):
            body['SpaceType'] = request.space_type
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListDriveSpaces',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/listDriveSpaces',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ListDriveSpacesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_drive_spaces_with_options_async(
        self,
        tmp_req: aliding_20230426_models.ListDriveSpacesRequest,
        tmp_header: aliding_20230426_models.ListDriveSpacesHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ListDriveSpacesResponse:
        """
        @summary 获取钉盘空间列表
        
        @param tmp_req: ListDriveSpacesRequest
        @param tmp_header: ListDriveSpacesHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDriveSpacesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.ListDriveSpacesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.ListDriveSpacesShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.max_results):
            body['MaxResults'] = request.max_results
        if not UtilClient.is_unset(request.next_token):
            body['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.space_type):
            body['SpaceType'] = request.space_type
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListDriveSpaces',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/listDriveSpaces',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ListDriveSpacesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_drive_spaces(
        self,
        request: aliding_20230426_models.ListDriveSpacesRequest,
    ) -> aliding_20230426_models.ListDriveSpacesResponse:
        """
        @summary 获取钉盘空间列表
        
        @param request: ListDriveSpacesRequest
        @return: ListDriveSpacesResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ListDriveSpacesHeaders()
        return self.list_drive_spaces_with_options(request, headers, runtime)

    async def list_drive_spaces_async(
        self,
        request: aliding_20230426_models.ListDriveSpacesRequest,
    ) -> aliding_20230426_models.ListDriveSpacesResponse:
        """
        @summary 获取钉盘空间列表
        
        @param request: ListDriveSpacesRequest
        @return: ListDriveSpacesResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ListDriveSpacesHeaders()
        return await self.list_drive_spaces_with_options_async(request, headers, runtime)

    def list_events_with_options(
        self,
        request: aliding_20230426_models.ListEventsRequest,
        tmp_header: aliding_20230426_models.ListEventsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ListEventsResponse:
        """
        @summary 查询日程列表
        
        @param request: ListEventsRequest
        @param tmp_header: ListEventsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListEventsResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.ListEventsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.calendar_id):
            body['CalendarId'] = request.calendar_id
        if not UtilClient.is_unset(request.max_attendees):
            body['MaxAttendees'] = request.max_attendees
        if not UtilClient.is_unset(request.max_results):
            body['MaxResults'] = request.max_results
        if not UtilClient.is_unset(request.next_token):
            body['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.series_master_id):
            body['SeriesMasterId'] = request.series_master_id
        if not UtilClient.is_unset(request.show_deleted):
            body['ShowDeleted'] = request.show_deleted
        if not UtilClient.is_unset(request.sync_token):
            body['SyncToken'] = request.sync_token
        if not UtilClient.is_unset(request.time_max):
            body['TimeMax'] = request.time_max
        if not UtilClient.is_unset(request.time_min):
            body['TimeMin'] = request.time_min
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListEvents',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/listEvents',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ListEventsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_events_with_options_async(
        self,
        request: aliding_20230426_models.ListEventsRequest,
        tmp_header: aliding_20230426_models.ListEventsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ListEventsResponse:
        """
        @summary 查询日程列表
        
        @param request: ListEventsRequest
        @param tmp_header: ListEventsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListEventsResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.ListEventsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.calendar_id):
            body['CalendarId'] = request.calendar_id
        if not UtilClient.is_unset(request.max_attendees):
            body['MaxAttendees'] = request.max_attendees
        if not UtilClient.is_unset(request.max_results):
            body['MaxResults'] = request.max_results
        if not UtilClient.is_unset(request.next_token):
            body['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.series_master_id):
            body['SeriesMasterId'] = request.series_master_id
        if not UtilClient.is_unset(request.show_deleted):
            body['ShowDeleted'] = request.show_deleted
        if not UtilClient.is_unset(request.sync_token):
            body['SyncToken'] = request.sync_token
        if not UtilClient.is_unset(request.time_max):
            body['TimeMax'] = request.time_max
        if not UtilClient.is_unset(request.time_min):
            body['TimeMin'] = request.time_min
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListEvents',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/listEvents',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ListEventsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_events(
        self,
        request: aliding_20230426_models.ListEventsRequest,
    ) -> aliding_20230426_models.ListEventsResponse:
        """
        @summary 查询日程列表
        
        @param request: ListEventsRequest
        @return: ListEventsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ListEventsHeaders()
        return self.list_events_with_options(request, headers, runtime)

    async def list_events_async(
        self,
        request: aliding_20230426_models.ListEventsRequest,
    ) -> aliding_20230426_models.ListEventsResponse:
        """
        @summary 查询日程列表
        
        @param request: ListEventsRequest
        @return: ListEventsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ListEventsHeaders()
        return await self.list_events_with_options_async(request, headers, runtime)

    def list_events_view_with_options(
        self,
        request: aliding_20230426_models.ListEventsViewRequest,
        tmp_header: aliding_20230426_models.ListEventsViewHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ListEventsViewResponse:
        """
        @summary 查询日程视图
        
        @param request: ListEventsViewRequest
        @param tmp_header: ListEventsViewHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListEventsViewResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.ListEventsViewShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.calendar_id):
            body['CalendarId'] = request.calendar_id
        if not UtilClient.is_unset(request.max_attendees):
            body['MaxAttendees'] = request.max_attendees
        if not UtilClient.is_unset(request.max_results):
            body['MaxResults'] = request.max_results
        if not UtilClient.is_unset(request.next_token):
            body['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.time_max):
            body['TimeMax'] = request.time_max
        if not UtilClient.is_unset(request.time_min):
            body['TimeMin'] = request.time_min
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListEventsView',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/listEventsView',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ListEventsViewResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_events_view_with_options_async(
        self,
        request: aliding_20230426_models.ListEventsViewRequest,
        tmp_header: aliding_20230426_models.ListEventsViewHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ListEventsViewResponse:
        """
        @summary 查询日程视图
        
        @param request: ListEventsViewRequest
        @param tmp_header: ListEventsViewHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListEventsViewResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.ListEventsViewShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.calendar_id):
            body['CalendarId'] = request.calendar_id
        if not UtilClient.is_unset(request.max_attendees):
            body['MaxAttendees'] = request.max_attendees
        if not UtilClient.is_unset(request.max_results):
            body['MaxResults'] = request.max_results
        if not UtilClient.is_unset(request.next_token):
            body['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.time_max):
            body['TimeMax'] = request.time_max
        if not UtilClient.is_unset(request.time_min):
            body['TimeMin'] = request.time_min
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListEventsView',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/listEventsView',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ListEventsViewResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_events_view(
        self,
        request: aliding_20230426_models.ListEventsViewRequest,
    ) -> aliding_20230426_models.ListEventsViewResponse:
        """
        @summary 查询日程视图
        
        @param request: ListEventsViewRequest
        @return: ListEventsViewResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ListEventsViewHeaders()
        return self.list_events_view_with_options(request, headers, runtime)

    async def list_events_view_async(
        self,
        request: aliding_20230426_models.ListEventsViewRequest,
    ) -> aliding_20230426_models.ListEventsViewResponse:
        """
        @summary 查询日程视图
        
        @param request: ListEventsViewRequest
        @return: ListEventsViewResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ListEventsViewHeaders()
        return await self.list_events_view_with_options_async(request, headers, runtime)

    def list_form_remarks_with_options(
        self,
        tmp_req: aliding_20230426_models.ListFormRemarksRequest,
        tmp_header: aliding_20230426_models.ListFormRemarksHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ListFormRemarksResponse:
        """
        @summary 批量查询宜搭表单实例的评论
        
        @param tmp_req: ListFormRemarksRequest
        @param tmp_header: ListFormRemarksHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListFormRemarksResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.ListFormRemarksShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.ListFormRemarksShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.form_instance_id_list):
            request.form_instance_id_list_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.form_instance_id_list, 'FormInstanceIdList', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.form_instance_id_list_shrink):
            body['FormInstanceIdList'] = request.form_instance_id_list_shrink
        if not UtilClient.is_unset(request.form_uuid):
            body['FormUuid'] = request.form_uuid
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListFormRemarks',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/listFormRemarks',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ListFormRemarksResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_form_remarks_with_options_async(
        self,
        tmp_req: aliding_20230426_models.ListFormRemarksRequest,
        tmp_header: aliding_20230426_models.ListFormRemarksHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ListFormRemarksResponse:
        """
        @summary 批量查询宜搭表单实例的评论
        
        @param tmp_req: ListFormRemarksRequest
        @param tmp_header: ListFormRemarksHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListFormRemarksResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.ListFormRemarksShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.ListFormRemarksShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.form_instance_id_list):
            request.form_instance_id_list_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.form_instance_id_list, 'FormInstanceIdList', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.form_instance_id_list_shrink):
            body['FormInstanceIdList'] = request.form_instance_id_list_shrink
        if not UtilClient.is_unset(request.form_uuid):
            body['FormUuid'] = request.form_uuid
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListFormRemarks',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/listFormRemarks',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ListFormRemarksResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_form_remarks(
        self,
        request: aliding_20230426_models.ListFormRemarksRequest,
    ) -> aliding_20230426_models.ListFormRemarksResponse:
        """
        @summary 批量查询宜搭表单实例的评论
        
        @param request: ListFormRemarksRequest
        @return: ListFormRemarksResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ListFormRemarksHeaders()
        return self.list_form_remarks_with_options(request, headers, runtime)

    async def list_form_remarks_async(
        self,
        request: aliding_20230426_models.ListFormRemarksRequest,
    ) -> aliding_20230426_models.ListFormRemarksResponse:
        """
        @summary 批量查询宜搭表单实例的评论
        
        @param request: ListFormRemarksRequest
        @return: ListFormRemarksResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ListFormRemarksHeaders()
        return await self.list_form_remarks_with_options_async(request, headers, runtime)

    def list_message_with_options(
        self,
        request: aliding_20230426_models.ListMessageRequest,
        headers: aliding_20230426_models.ListMessageHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ListMessageResponse:
        """
        @summary 查询消息
        
        @param request: ListMessageRequest
        @param headers: ListMessageHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListMessageResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.assistant_id):
            body['assistantId'] = request.assistant_id
        if not UtilClient.is_unset(request.limit):
            body['limit'] = request.limit
        if not UtilClient.is_unset(request.order):
            body['order'] = request.order
        if not UtilClient.is_unset(request.original_assistant_id):
            body['originalAssistantId'] = request.original_assistant_id
        if not UtilClient.is_unset(request.run_id):
            body['runId'] = request.run_id
        if not UtilClient.is_unset(request.source_id_of_original_assistant_id):
            body['sourceIdOfOriginalAssistantId'] = request.source_id_of_original_assistant_id
        if not UtilClient.is_unset(request.source_type_of_original_assistant_id):
            body['sourceTypeOfOriginalAssistantId'] = request.source_type_of_original_assistant_id
        if not UtilClient.is_unset(request.thread_id):
            body['threadId'] = request.thread_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_id):
            real_headers['accountId'] = UtilClient.to_jsonstring(headers.account_id)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListMessage',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/ai/v1/assistant/listMessage',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='json',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ListMessageResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_message_with_options_async(
        self,
        request: aliding_20230426_models.ListMessageRequest,
        headers: aliding_20230426_models.ListMessageHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ListMessageResponse:
        """
        @summary 查询消息
        
        @param request: ListMessageRequest
        @param headers: ListMessageHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListMessageResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.assistant_id):
            body['assistantId'] = request.assistant_id
        if not UtilClient.is_unset(request.limit):
            body['limit'] = request.limit
        if not UtilClient.is_unset(request.order):
            body['order'] = request.order
        if not UtilClient.is_unset(request.original_assistant_id):
            body['originalAssistantId'] = request.original_assistant_id
        if not UtilClient.is_unset(request.run_id):
            body['runId'] = request.run_id
        if not UtilClient.is_unset(request.source_id_of_original_assistant_id):
            body['sourceIdOfOriginalAssistantId'] = request.source_id_of_original_assistant_id
        if not UtilClient.is_unset(request.source_type_of_original_assistant_id):
            body['sourceTypeOfOriginalAssistantId'] = request.source_type_of_original_assistant_id
        if not UtilClient.is_unset(request.thread_id):
            body['threadId'] = request.thread_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_id):
            real_headers['accountId'] = UtilClient.to_jsonstring(headers.account_id)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListMessage',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/ai/v1/assistant/listMessage',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='json',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ListMessageResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_message(
        self,
        request: aliding_20230426_models.ListMessageRequest,
    ) -> aliding_20230426_models.ListMessageResponse:
        """
        @summary 查询消息
        
        @param request: ListMessageRequest
        @return: ListMessageResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ListMessageHeaders()
        return self.list_message_with_options(request, headers, runtime)

    async def list_message_async(
        self,
        request: aliding_20230426_models.ListMessageRequest,
    ) -> aliding_20230426_models.ListMessageResponse:
        """
        @summary 查询消息
        
        @param request: ListMessageRequest
        @return: ListMessageResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ListMessageHeaders()
        return await self.list_message_with_options_async(request, headers, runtime)

    def list_multi_dim_table_records_with_options(
        self,
        tmp_req: aliding_20230426_models.ListMultiDimTableRecordsRequest,
        tmp_header: aliding_20230426_models.ListMultiDimTableRecordsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ListMultiDimTableRecordsResponse:
        """
        @summary 列出多行记录
        
        @param tmp_req: ListMultiDimTableRecordsRequest
        @param tmp_header: ListMultiDimTableRecordsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListMultiDimTableRecordsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.ListMultiDimTableRecordsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.ListMultiDimTableRecordsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.filter):
            request.filter_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.filter, 'Filter', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.base_id):
            body['BaseId'] = request.base_id
        if not UtilClient.is_unset(request.filter_shrink):
            body['Filter'] = request.filter_shrink
        if not UtilClient.is_unset(request.max_results):
            body['MaxResults'] = request.max_results
        if not UtilClient.is_unset(request.next_token):
            body['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.sheet_id_or_name):
            body['SheetIdOrName'] = request.sheet_id_or_name
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListMultiDimTableRecords',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/table/listMultiDimTableRecords',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ListMultiDimTableRecordsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_multi_dim_table_records_with_options_async(
        self,
        tmp_req: aliding_20230426_models.ListMultiDimTableRecordsRequest,
        tmp_header: aliding_20230426_models.ListMultiDimTableRecordsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ListMultiDimTableRecordsResponse:
        """
        @summary 列出多行记录
        
        @param tmp_req: ListMultiDimTableRecordsRequest
        @param tmp_header: ListMultiDimTableRecordsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListMultiDimTableRecordsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.ListMultiDimTableRecordsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.ListMultiDimTableRecordsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.filter):
            request.filter_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.filter, 'Filter', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.base_id):
            body['BaseId'] = request.base_id
        if not UtilClient.is_unset(request.filter_shrink):
            body['Filter'] = request.filter_shrink
        if not UtilClient.is_unset(request.max_results):
            body['MaxResults'] = request.max_results
        if not UtilClient.is_unset(request.next_token):
            body['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.sheet_id_or_name):
            body['SheetIdOrName'] = request.sheet_id_or_name
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListMultiDimTableRecords',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/table/listMultiDimTableRecords',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ListMultiDimTableRecordsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_multi_dim_table_records(
        self,
        request: aliding_20230426_models.ListMultiDimTableRecordsRequest,
    ) -> aliding_20230426_models.ListMultiDimTableRecordsResponse:
        """
        @summary 列出多行记录
        
        @param request: ListMultiDimTableRecordsRequest
        @return: ListMultiDimTableRecordsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ListMultiDimTableRecordsHeaders()
        return self.list_multi_dim_table_records_with_options(request, headers, runtime)

    async def list_multi_dim_table_records_async(
        self,
        request: aliding_20230426_models.ListMultiDimTableRecordsRequest,
    ) -> aliding_20230426_models.ListMultiDimTableRecordsResponse:
        """
        @summary 列出多行记录
        
        @param request: ListMultiDimTableRecordsRequest
        @return: ListMultiDimTableRecordsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ListMultiDimTableRecordsHeaders()
        return await self.list_multi_dim_table_records_with_options_async(request, headers, runtime)

    def list_navigation_by_form_type_with_options(
        self,
        request: aliding_20230426_models.ListNavigationByFormTypeRequest,
        tmp_header: aliding_20230426_models.ListNavigationByFormTypeHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ListNavigationByFormTypeResponse:
        """
        @summary 获取应用下的页面列表
        
        @param request: ListNavigationByFormTypeRequest
        @param tmp_header: ListNavigationByFormTypeHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListNavigationByFormTypeResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.ListNavigationByFormTypeShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.form_type):
            body['FormType'] = request.form_type
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListNavigationByFormType',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/listNavigationByFormType',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ListNavigationByFormTypeResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_navigation_by_form_type_with_options_async(
        self,
        request: aliding_20230426_models.ListNavigationByFormTypeRequest,
        tmp_header: aliding_20230426_models.ListNavigationByFormTypeHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ListNavigationByFormTypeResponse:
        """
        @summary 获取应用下的页面列表
        
        @param request: ListNavigationByFormTypeRequest
        @param tmp_header: ListNavigationByFormTypeHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListNavigationByFormTypeResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.ListNavigationByFormTypeShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.form_type):
            body['FormType'] = request.form_type
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListNavigationByFormType',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/listNavigationByFormType',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ListNavigationByFormTypeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_navigation_by_form_type(
        self,
        request: aliding_20230426_models.ListNavigationByFormTypeRequest,
    ) -> aliding_20230426_models.ListNavigationByFormTypeResponse:
        """
        @summary 获取应用下的页面列表
        
        @param request: ListNavigationByFormTypeRequest
        @return: ListNavigationByFormTypeResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ListNavigationByFormTypeHeaders()
        return self.list_navigation_by_form_type_with_options(request, headers, runtime)

    async def list_navigation_by_form_type_async(
        self,
        request: aliding_20230426_models.ListNavigationByFormTypeRequest,
    ) -> aliding_20230426_models.ListNavigationByFormTypeResponse:
        """
        @summary 获取应用下的页面列表
        
        @param request: ListNavigationByFormTypeRequest
        @return: ListNavigationByFormTypeResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ListNavigationByFormTypeHeaders()
        return await self.list_navigation_by_form_type_with_options_async(request, headers, runtime)

    def list_nodes_with_options(
        self,
        tmp_req: aliding_20230426_models.ListNodesRequest,
        tmp_header: aliding_20230426_models.ListNodesHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ListNodesResponse:
        """
        @summary 获取节点列表
        
        @param tmp_req: ListNodesRequest
        @param tmp_header: ListNodesHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListNodesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.ListNodesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.ListNodesShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.max_results):
            body['MaxResults'] = request.max_results
        if not UtilClient.is_unset(request.next_token):
            body['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.parent_node_id):
            body['ParentNodeId'] = request.parent_node_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.with_permission_role):
            body['WithPermissionRole'] = request.with_permission_role
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListNodes',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v2/documents/listNodes',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ListNodesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_nodes_with_options_async(
        self,
        tmp_req: aliding_20230426_models.ListNodesRequest,
        tmp_header: aliding_20230426_models.ListNodesHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ListNodesResponse:
        """
        @summary 获取节点列表
        
        @param tmp_req: ListNodesRequest
        @param tmp_header: ListNodesHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListNodesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.ListNodesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.ListNodesShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.max_results):
            body['MaxResults'] = request.max_results
        if not UtilClient.is_unset(request.next_token):
            body['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.parent_node_id):
            body['ParentNodeId'] = request.parent_node_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.with_permission_role):
            body['WithPermissionRole'] = request.with_permission_role
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListNodes',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v2/documents/listNodes',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ListNodesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_nodes(
        self,
        request: aliding_20230426_models.ListNodesRequest,
    ) -> aliding_20230426_models.ListNodesResponse:
        """
        @summary 获取节点列表
        
        @param request: ListNodesRequest
        @return: ListNodesResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ListNodesHeaders()
        return self.list_nodes_with_options(request, headers, runtime)

    async def list_nodes_async(
        self,
        request: aliding_20230426_models.ListNodesRequest,
    ) -> aliding_20230426_models.ListNodesResponse:
        """
        @summary 获取节点列表
        
        @param request: ListNodesRequest
        @return: ListNodesResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ListNodesHeaders()
        return await self.list_nodes_with_options_async(request, headers, runtime)

    def list_permissions_with_options(
        self,
        tmp_req: aliding_20230426_models.ListPermissionsRequest,
        tmp_header: aliding_20230426_models.ListPermissionsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ListPermissionsResponse:
        """
        @summary 获取文件权限列表
        
        @param tmp_req: ListPermissionsRequest
        @param tmp_header: ListPermissionsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListPermissionsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.ListPermissionsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.ListPermissionsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.option):
            request.option_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.option, 'Option', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.dentry_uuid):
            body['DentryUuid'] = request.dentry_uuid
        if not UtilClient.is_unset(request.option_shrink):
            body['Option'] = request.option_shrink
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListPermissions',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/listPermissions',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ListPermissionsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_permissions_with_options_async(
        self,
        tmp_req: aliding_20230426_models.ListPermissionsRequest,
        tmp_header: aliding_20230426_models.ListPermissionsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ListPermissionsResponse:
        """
        @summary 获取文件权限列表
        
        @param tmp_req: ListPermissionsRequest
        @param tmp_header: ListPermissionsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListPermissionsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.ListPermissionsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.ListPermissionsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.option):
            request.option_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.option, 'Option', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.dentry_uuid):
            body['DentryUuid'] = request.dentry_uuid
        if not UtilClient.is_unset(request.option_shrink):
            body['Option'] = request.option_shrink
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListPermissions',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/listPermissions',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ListPermissionsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_permissions(
        self,
        request: aliding_20230426_models.ListPermissionsRequest,
    ) -> aliding_20230426_models.ListPermissionsResponse:
        """
        @summary 获取文件权限列表
        
        @param request: ListPermissionsRequest
        @return: ListPermissionsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ListPermissionsHeaders()
        return self.list_permissions_with_options(request, headers, runtime)

    async def list_permissions_async(
        self,
        request: aliding_20230426_models.ListPermissionsRequest,
    ) -> aliding_20230426_models.ListPermissionsResponse:
        """
        @summary 获取文件权限列表
        
        @param request: ListPermissionsRequest
        @return: ListPermissionsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ListPermissionsHeaders()
        return await self.list_permissions_with_options_async(request, headers, runtime)

    def list_report_with_options(
        self,
        tmp_req: aliding_20230426_models.ListReportRequest,
        tmp_header: aliding_20230426_models.ListReportHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ListReportResponse:
        """
        @summary 获取用户发出的日志列表
        
        @param tmp_req: ListReportRequest
        @param tmp_header: ListReportHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListReportResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.ListReportShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.ListReportShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.cursor):
            body['Cursor'] = request.cursor
        if not UtilClient.is_unset(request.end_time):
            body['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.modified_end_time):
            body['ModifiedEndTime'] = request.modified_end_time
        if not UtilClient.is_unset(request.modified_start_time):
            body['ModifiedStartTime'] = request.modified_start_time
        if not UtilClient.is_unset(request.size):
            body['Size'] = request.size
        if not UtilClient.is_unset(request.start_time):
            body['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.template_name):
            body['TemplateName'] = request.template_name
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListReport',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/log/listReport',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ListReportResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_report_with_options_async(
        self,
        tmp_req: aliding_20230426_models.ListReportRequest,
        tmp_header: aliding_20230426_models.ListReportHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ListReportResponse:
        """
        @summary 获取用户发出的日志列表
        
        @param tmp_req: ListReportRequest
        @param tmp_header: ListReportHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListReportResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.ListReportShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.ListReportShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.cursor):
            body['Cursor'] = request.cursor
        if not UtilClient.is_unset(request.end_time):
            body['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.modified_end_time):
            body['ModifiedEndTime'] = request.modified_end_time
        if not UtilClient.is_unset(request.modified_start_time):
            body['ModifiedStartTime'] = request.modified_start_time
        if not UtilClient.is_unset(request.size):
            body['Size'] = request.size
        if not UtilClient.is_unset(request.start_time):
            body['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.template_name):
            body['TemplateName'] = request.template_name
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListReport',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/log/listReport',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ListReportResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_report(
        self,
        request: aliding_20230426_models.ListReportRequest,
    ) -> aliding_20230426_models.ListReportResponse:
        """
        @summary 获取用户发出的日志列表
        
        @param request: ListReportRequest
        @return: ListReportResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ListReportHeaders()
        return self.list_report_with_options(request, headers, runtime)

    async def list_report_async(
        self,
        request: aliding_20230426_models.ListReportRequest,
    ) -> aliding_20230426_models.ListReportResponse:
        """
        @summary 获取用户发出的日志列表
        
        @param request: ListReportRequest
        @return: ListReportResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ListReportHeaders()
        return await self.list_report_with_options_async(request, headers, runtime)

    def list_skill_with_options(
        self,
        request: aliding_20230426_models.ListSkillRequest,
        tmp_header: aliding_20230426_models.ListSkillHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ListSkillResponse:
        """
        @summary 列出AI技能
        
        @param request: ListSkillRequest
        @param tmp_header: ListSkillHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListSkillResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.ListSkillShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.group_id):
            body['groupId'] = request.group_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListSkill',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/ai/v1/skill/listSkill',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ListSkillResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_skill_with_options_async(
        self,
        request: aliding_20230426_models.ListSkillRequest,
        tmp_header: aliding_20230426_models.ListSkillHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ListSkillResponse:
        """
        @summary 列出AI技能
        
        @param request: ListSkillRequest
        @param tmp_header: ListSkillHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListSkillResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.ListSkillShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.group_id):
            body['groupId'] = request.group_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListSkill',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/ai/v1/skill/listSkill',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ListSkillResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_skill(
        self,
        request: aliding_20230426_models.ListSkillRequest,
    ) -> aliding_20230426_models.ListSkillResponse:
        """
        @summary 列出AI技能
        
        @param request: ListSkillRequest
        @return: ListSkillResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ListSkillHeaders()
        return self.list_skill_with_options(request, headers, runtime)

    async def list_skill_async(
        self,
        request: aliding_20230426_models.ListSkillRequest,
    ) -> aliding_20230426_models.ListSkillResponse:
        """
        @summary 列出AI技能
        
        @param request: ListSkillRequest
        @return: ListSkillResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ListSkillHeaders()
        return await self.list_skill_with_options_async(request, headers, runtime)

    def list_table_data_by_form_instance_id_table_id_with_options(
        self,
        request: aliding_20230426_models.ListTableDataByFormInstanceIdTableIdRequest,
        tmp_header: aliding_20230426_models.ListTableDataByFormInstanceIdTableIdHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ListTableDataByFormInstanceIdTableIdResponse:
        """
        @summary 获取子表组件数据
        
        @param request: ListTableDataByFormInstanceIdTableIdRequest
        @param tmp_header: ListTableDataByFormInstanceIdTableIdHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListTableDataByFormInstanceIdTableIdResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.ListTableDataByFormInstanceIdTableIdShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.form_instance_id):
            body['FormInstanceId'] = request.form_instance_id
        if not UtilClient.is_unset(request.form_uuid):
            body['FormUuid'] = request.form_uuid
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        if not UtilClient.is_unset(request.table_field_id):
            body['TableFieldId'] = request.table_field_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListTableDataByFormInstanceIdTableId',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/listTableDataByFormInstanceIdTableId',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ListTableDataByFormInstanceIdTableIdResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_table_data_by_form_instance_id_table_id_with_options_async(
        self,
        request: aliding_20230426_models.ListTableDataByFormInstanceIdTableIdRequest,
        tmp_header: aliding_20230426_models.ListTableDataByFormInstanceIdTableIdHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ListTableDataByFormInstanceIdTableIdResponse:
        """
        @summary 获取子表组件数据
        
        @param request: ListTableDataByFormInstanceIdTableIdRequest
        @param tmp_header: ListTableDataByFormInstanceIdTableIdHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListTableDataByFormInstanceIdTableIdResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.ListTableDataByFormInstanceIdTableIdShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.form_instance_id):
            body['FormInstanceId'] = request.form_instance_id
        if not UtilClient.is_unset(request.form_uuid):
            body['FormUuid'] = request.form_uuid
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        if not UtilClient.is_unset(request.table_field_id):
            body['TableFieldId'] = request.table_field_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListTableDataByFormInstanceIdTableId',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/listTableDataByFormInstanceIdTableId',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ListTableDataByFormInstanceIdTableIdResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_table_data_by_form_instance_id_table_id(
        self,
        request: aliding_20230426_models.ListTableDataByFormInstanceIdTableIdRequest,
    ) -> aliding_20230426_models.ListTableDataByFormInstanceIdTableIdResponse:
        """
        @summary 获取子表组件数据
        
        @param request: ListTableDataByFormInstanceIdTableIdRequest
        @return: ListTableDataByFormInstanceIdTableIdResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ListTableDataByFormInstanceIdTableIdHeaders()
        return self.list_table_data_by_form_instance_id_table_id_with_options(request, headers, runtime)

    async def list_table_data_by_form_instance_id_table_id_async(
        self,
        request: aliding_20230426_models.ListTableDataByFormInstanceIdTableIdRequest,
    ) -> aliding_20230426_models.ListTableDataByFormInstanceIdTableIdResponse:
        """
        @summary 获取子表组件数据
        
        @param request: ListTableDataByFormInstanceIdTableIdRequest
        @return: ListTableDataByFormInstanceIdTableIdResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ListTableDataByFormInstanceIdTableIdHeaders()
        return await self.list_table_data_by_form_instance_id_table_id_with_options_async(request, headers, runtime)

    def list_teams_with_options(
        self,
        tmp_req: aliding_20230426_models.ListTeamsRequest,
        tmp_header: aliding_20230426_models.ListTeamsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ListTeamsResponse:
        """
        @summary 获取知识小组列表
        
        @param tmp_req: ListTeamsRequest
        @param tmp_header: ListTeamsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListTeamsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.ListTeamsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.ListTeamsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.max_results):
            body['MaxResults'] = request.max_results
        if not UtilClient.is_unset(request.next_token):
            body['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListTeams',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v2/documents/listTeams',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ListTeamsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_teams_with_options_async(
        self,
        tmp_req: aliding_20230426_models.ListTeamsRequest,
        tmp_header: aliding_20230426_models.ListTeamsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ListTeamsResponse:
        """
        @summary 获取知识小组列表
        
        @param tmp_req: ListTeamsRequest
        @param tmp_header: ListTeamsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListTeamsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.ListTeamsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.ListTeamsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.max_results):
            body['MaxResults'] = request.max_results
        if not UtilClient.is_unset(request.next_token):
            body['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListTeams',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v2/documents/listTeams',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ListTeamsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_teams(
        self,
        request: aliding_20230426_models.ListTeamsRequest,
    ) -> aliding_20230426_models.ListTeamsResponse:
        """
        @summary 获取知识小组列表
        
        @param request: ListTeamsRequest
        @return: ListTeamsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ListTeamsHeaders()
        return self.list_teams_with_options(request, headers, runtime)

    async def list_teams_async(
        self,
        request: aliding_20230426_models.ListTeamsRequest,
    ) -> aliding_20230426_models.ListTeamsResponse:
        """
        @summary 获取知识小组列表
        
        @param request: ListTeamsRequest
        @return: ListTeamsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ListTeamsHeaders()
        return await self.list_teams_with_options_async(request, headers, runtime)

    def list_template_with_options(
        self,
        tmp_req: aliding_20230426_models.ListTemplateRequest,
        tmp_header: aliding_20230426_models.ListTemplateHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ListTemplateResponse:
        """
        @summary 查询文档模板
        
        @param tmp_req: ListTemplateRequest
        @param tmp_header: ListTemplateHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListTemplateResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.ListTemplateShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.ListTemplateShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.max_results):
            body['MaxResults'] = request.max_results
        if not UtilClient.is_unset(request.next_token):
            body['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.template_type):
            body['TemplateType'] = request.template_type
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workspace_id):
            body['WorkspaceId'] = request.workspace_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListTemplate',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/listTemplate',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ListTemplateResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_template_with_options_async(
        self,
        tmp_req: aliding_20230426_models.ListTemplateRequest,
        tmp_header: aliding_20230426_models.ListTemplateHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ListTemplateResponse:
        """
        @summary 查询文档模板
        
        @param tmp_req: ListTemplateRequest
        @param tmp_header: ListTemplateHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListTemplateResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.ListTemplateShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.ListTemplateShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.max_results):
            body['MaxResults'] = request.max_results
        if not UtilClient.is_unset(request.next_token):
            body['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.template_type):
            body['TemplateType'] = request.template_type
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workspace_id):
            body['WorkspaceId'] = request.workspace_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListTemplate',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/listTemplate',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ListTemplateResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_template(
        self,
        request: aliding_20230426_models.ListTemplateRequest,
    ) -> aliding_20230426_models.ListTemplateResponse:
        """
        @summary 查询文档模板
        
        @param request: ListTemplateRequest
        @return: ListTemplateResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ListTemplateHeaders()
        return self.list_template_with_options(request, headers, runtime)

    async def list_template_async(
        self,
        request: aliding_20230426_models.ListTemplateRequest,
    ) -> aliding_20230426_models.ListTemplateResponse:
        """
        @summary 查询文档模板
        
        @param request: ListTemplateRequest
        @return: ListTemplateResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ListTemplateHeaders()
        return await self.list_template_with_options_async(request, headers, runtime)

    def list_ticket_operate_record_with_options(
        self,
        tmp_req: aliding_20230426_models.ListTicketOperateRecordRequest,
        tmp_header: aliding_20230426_models.ListTicketOperateRecordHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ListTicketOperateRecordResponse:
        """
        @summary 查询工单操作记录
        
        @param tmp_req: ListTicketOperateRecordRequest
        @param tmp_header: ListTicketOperateRecordHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListTicketOperateRecordResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.ListTicketOperateRecordShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.ListTicketOperateRecordShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.open_team_id):
            body['OpenTeamId'] = request.open_team_id
        if not UtilClient.is_unset(request.open_ticket_id):
            body['OpenTicketId'] = request.open_ticket_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListTicketOperateRecord',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ticket/listTicketOperateRecord',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ListTicketOperateRecordResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_ticket_operate_record_with_options_async(
        self,
        tmp_req: aliding_20230426_models.ListTicketOperateRecordRequest,
        tmp_header: aliding_20230426_models.ListTicketOperateRecordHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ListTicketOperateRecordResponse:
        """
        @summary 查询工单操作记录
        
        @param tmp_req: ListTicketOperateRecordRequest
        @param tmp_header: ListTicketOperateRecordHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListTicketOperateRecordResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.ListTicketOperateRecordShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.ListTicketOperateRecordShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.open_team_id):
            body['OpenTeamId'] = request.open_team_id
        if not UtilClient.is_unset(request.open_ticket_id):
            body['OpenTicketId'] = request.open_ticket_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListTicketOperateRecord',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ticket/listTicketOperateRecord',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ListTicketOperateRecordResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_ticket_operate_record(
        self,
        request: aliding_20230426_models.ListTicketOperateRecordRequest,
    ) -> aliding_20230426_models.ListTicketOperateRecordResponse:
        """
        @summary 查询工单操作记录
        
        @param request: ListTicketOperateRecordRequest
        @return: ListTicketOperateRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ListTicketOperateRecordHeaders()
        return self.list_ticket_operate_record_with_options(request, headers, runtime)

    async def list_ticket_operate_record_async(
        self,
        request: aliding_20230426_models.ListTicketOperateRecordRequest,
    ) -> aliding_20230426_models.ListTicketOperateRecordResponse:
        """
        @summary 查询工单操作记录
        
        @param request: ListTicketOperateRecordRequest
        @return: ListTicketOperateRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ListTicketOperateRecordHeaders()
        return await self.list_ticket_operate_record_with_options_async(request, headers, runtime)

    def list_workspaces_with_options(
        self,
        tmp_req: aliding_20230426_models.ListWorkspacesRequest,
        tmp_header: aliding_20230426_models.ListWorkspacesHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ListWorkspacesResponse:
        """
        @summary 获取知识库列表
        
        @param tmp_req: ListWorkspacesRequest
        @param tmp_header: ListWorkspacesHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListWorkspacesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.ListWorkspacesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.ListWorkspacesShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.max_results):
            body['MaxResults'] = request.max_results
        if not UtilClient.is_unset(request.next_token):
            body['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.order_by):
            body['OrderBy'] = request.order_by
        if not UtilClient.is_unset(request.team_id):
            body['TeamId'] = request.team_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.with_permission_role):
            body['WithPermissionRole'] = request.with_permission_role
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListWorkspaces',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v2/documents/listWorkspaces',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ListWorkspacesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_workspaces_with_options_async(
        self,
        tmp_req: aliding_20230426_models.ListWorkspacesRequest,
        tmp_header: aliding_20230426_models.ListWorkspacesHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ListWorkspacesResponse:
        """
        @summary 获取知识库列表
        
        @param tmp_req: ListWorkspacesRequest
        @param tmp_header: ListWorkspacesHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListWorkspacesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.ListWorkspacesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.ListWorkspacesShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.max_results):
            body['MaxResults'] = request.max_results
        if not UtilClient.is_unset(request.next_token):
            body['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.order_by):
            body['OrderBy'] = request.order_by
        if not UtilClient.is_unset(request.team_id):
            body['TeamId'] = request.team_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.with_permission_role):
            body['WithPermissionRole'] = request.with_permission_role
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListWorkspaces',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v2/documents/listWorkspaces',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ListWorkspacesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_workspaces(
        self,
        request: aliding_20230426_models.ListWorkspacesRequest,
    ) -> aliding_20230426_models.ListWorkspacesResponse:
        """
        @summary 获取知识库列表
        
        @param request: ListWorkspacesRequest
        @return: ListWorkspacesResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ListWorkspacesHeaders()
        return self.list_workspaces_with_options(request, headers, runtime)

    async def list_workspaces_async(
        self,
        request: aliding_20230426_models.ListWorkspacesRequest,
    ) -> aliding_20230426_models.ListWorkspacesResponse:
        """
        @summary 获取知识库列表
        
        @param request: ListWorkspacesRequest
        @return: ListWorkspacesResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ListWorkspacesHeaders()
        return await self.list_workspaces_with_options_async(request, headers, runtime)

    def patch_event_with_options(
        self,
        tmp_req: aliding_20230426_models.PatchEventRequest,
        tmp_header: aliding_20230426_models.PatchEventHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.PatchEventResponse:
        """
        @summary 修改日程
        
        @param tmp_req: PatchEventRequest
        @param tmp_header: PatchEventHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: PatchEventResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.PatchEventShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.PatchEventShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.attendees):
            request.attendees_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.attendees, 'Attendees', 'json')
        if not UtilClient.is_unset(tmp_req.card_instances):
            request.card_instances_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.card_instances, 'CardInstances', 'json')
        if not UtilClient.is_unset(tmp_req.end):
            request.end_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.end, 'End', 'json')
        if not UtilClient.is_unset(tmp_req.extra):
            request.extra_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.extra, 'Extra', 'json')
        if not UtilClient.is_unset(tmp_req.location):
            request.location_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.location, 'Location', 'json')
        if not UtilClient.is_unset(tmp_req.recurrence):
            request.recurrence_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.recurrence, 'Recurrence', 'json')
        if not UtilClient.is_unset(tmp_req.reminders):
            request.reminders_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.reminders, 'Reminders', 'json')
        if not UtilClient.is_unset(tmp_req.start):
            request.start_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.start, 'Start', 'json')
        body = {}
        if not UtilClient.is_unset(request.attendees_shrink):
            body['Attendees'] = request.attendees_shrink
        if not UtilClient.is_unset(request.calendar_id):
            body['CalendarId'] = request.calendar_id
        if not UtilClient.is_unset(request.card_instances_shrink):
            body['CardInstances'] = request.card_instances_shrink
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.end_shrink):
            body['End'] = request.end_shrink
        if not UtilClient.is_unset(request.event_id):
            body['EventId'] = request.event_id
        if not UtilClient.is_unset(request.extra_shrink):
            body['Extra'] = request.extra_shrink
        if not UtilClient.is_unset(request.is_all_day):
            body['IsAllDay'] = request.is_all_day
        if not UtilClient.is_unset(request.location_shrink):
            body['Location'] = request.location_shrink
        if not UtilClient.is_unset(request.recurrence_shrink):
            body['Recurrence'] = request.recurrence_shrink
        if not UtilClient.is_unset(request.reminders_shrink):
            body['Reminders'] = request.reminders_shrink
        if not UtilClient.is_unset(request.start_shrink):
            body['Start'] = request.start_shrink
        if not UtilClient.is_unset(request.summary):
            body['Summary'] = request.summary
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='PatchEvent',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/patchEvent',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.PatchEventResponse(),
            self.call_api(params, req, runtime)
        )

    async def patch_event_with_options_async(
        self,
        tmp_req: aliding_20230426_models.PatchEventRequest,
        tmp_header: aliding_20230426_models.PatchEventHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.PatchEventResponse:
        """
        @summary 修改日程
        
        @param tmp_req: PatchEventRequest
        @param tmp_header: PatchEventHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: PatchEventResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.PatchEventShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.PatchEventShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.attendees):
            request.attendees_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.attendees, 'Attendees', 'json')
        if not UtilClient.is_unset(tmp_req.card_instances):
            request.card_instances_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.card_instances, 'CardInstances', 'json')
        if not UtilClient.is_unset(tmp_req.end):
            request.end_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.end, 'End', 'json')
        if not UtilClient.is_unset(tmp_req.extra):
            request.extra_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.extra, 'Extra', 'json')
        if not UtilClient.is_unset(tmp_req.location):
            request.location_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.location, 'Location', 'json')
        if not UtilClient.is_unset(tmp_req.recurrence):
            request.recurrence_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.recurrence, 'Recurrence', 'json')
        if not UtilClient.is_unset(tmp_req.reminders):
            request.reminders_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.reminders, 'Reminders', 'json')
        if not UtilClient.is_unset(tmp_req.start):
            request.start_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.start, 'Start', 'json')
        body = {}
        if not UtilClient.is_unset(request.attendees_shrink):
            body['Attendees'] = request.attendees_shrink
        if not UtilClient.is_unset(request.calendar_id):
            body['CalendarId'] = request.calendar_id
        if not UtilClient.is_unset(request.card_instances_shrink):
            body['CardInstances'] = request.card_instances_shrink
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.end_shrink):
            body['End'] = request.end_shrink
        if not UtilClient.is_unset(request.event_id):
            body['EventId'] = request.event_id
        if not UtilClient.is_unset(request.extra_shrink):
            body['Extra'] = request.extra_shrink
        if not UtilClient.is_unset(request.is_all_day):
            body['IsAllDay'] = request.is_all_day
        if not UtilClient.is_unset(request.location_shrink):
            body['Location'] = request.location_shrink
        if not UtilClient.is_unset(request.recurrence_shrink):
            body['Recurrence'] = request.recurrence_shrink
        if not UtilClient.is_unset(request.reminders_shrink):
            body['Reminders'] = request.reminders_shrink
        if not UtilClient.is_unset(request.start_shrink):
            body['Start'] = request.start_shrink
        if not UtilClient.is_unset(request.summary):
            body['Summary'] = request.summary
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='PatchEvent',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/patchEvent',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.PatchEventResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def patch_event(
        self,
        request: aliding_20230426_models.PatchEventRequest,
    ) -> aliding_20230426_models.PatchEventResponse:
        """
        @summary 修改日程
        
        @param request: PatchEventRequest
        @return: PatchEventResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.PatchEventHeaders()
        return self.patch_event_with_options(request, headers, runtime)

    async def patch_event_async(
        self,
        request: aliding_20230426_models.PatchEventRequest,
    ) -> aliding_20230426_models.PatchEventResponse:
        """
        @summary 修改日程
        
        @param request: PatchEventRequest
        @return: PatchEventResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.PatchEventHeaders()
        return await self.patch_event_with_options_async(request, headers, runtime)

    def query_cloud_record_text_with_options(
        self,
        tmp_req: aliding_20230426_models.QueryCloudRecordTextRequest,
        tmp_header: aliding_20230426_models.QueryCloudRecordTextHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryCloudRecordTextResponse:
        """
        @summary 查询会议录制中的文本信息
        
        @param tmp_req: QueryCloudRecordTextRequest
        @param tmp_header: QueryCloudRecordTextHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryCloudRecordTextResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryCloudRecordTextShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryCloudRecordTextShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.direction):
            body['Direction'] = request.direction
        if not UtilClient.is_unset(request.max_results):
            body['MaxResults'] = request.max_results
        if not UtilClient.is_unset(request.next_token):
            body['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.start_time):
            body['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.conference_id):
            body['conferenceId'] = request.conference_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryCloudRecordText',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryCloudRecordText',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryCloudRecordTextResponse(),
            self.call_api(params, req, runtime)
        )

    async def query_cloud_record_text_with_options_async(
        self,
        tmp_req: aliding_20230426_models.QueryCloudRecordTextRequest,
        tmp_header: aliding_20230426_models.QueryCloudRecordTextHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryCloudRecordTextResponse:
        """
        @summary 查询会议录制中的文本信息
        
        @param tmp_req: QueryCloudRecordTextRequest
        @param tmp_header: QueryCloudRecordTextHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryCloudRecordTextResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryCloudRecordTextShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryCloudRecordTextShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.direction):
            body['Direction'] = request.direction
        if not UtilClient.is_unset(request.max_results):
            body['MaxResults'] = request.max_results
        if not UtilClient.is_unset(request.next_token):
            body['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.start_time):
            body['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.conference_id):
            body['conferenceId'] = request.conference_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryCloudRecordText',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryCloudRecordText',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryCloudRecordTextResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def query_cloud_record_text(
        self,
        request: aliding_20230426_models.QueryCloudRecordTextRequest,
    ) -> aliding_20230426_models.QueryCloudRecordTextResponse:
        """
        @summary 查询会议录制中的文本信息
        
        @param request: QueryCloudRecordTextRequest
        @return: QueryCloudRecordTextResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryCloudRecordTextHeaders()
        return self.query_cloud_record_text_with_options(request, headers, runtime)

    async def query_cloud_record_text_async(
        self,
        request: aliding_20230426_models.QueryCloudRecordTextRequest,
    ) -> aliding_20230426_models.QueryCloudRecordTextResponse:
        """
        @summary 查询会议录制中的文本信息
        
        @param request: QueryCloudRecordTextRequest
        @return: QueryCloudRecordTextResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryCloudRecordTextHeaders()
        return await self.query_cloud_record_text_with_options_async(request, headers, runtime)

    def query_cloud_record_video_with_options(
        self,
        tmp_req: aliding_20230426_models.QueryCloudRecordVideoRequest,
        tmp_header: aliding_20230426_models.QueryCloudRecordVideoHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryCloudRecordVideoResponse:
        """
        @summary 查询会议录制的详情信息
        
        @param tmp_req: QueryCloudRecordVideoRequest
        @param tmp_header: QueryCloudRecordVideoHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryCloudRecordVideoResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryCloudRecordVideoShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryCloudRecordVideoShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.conference_id):
            body['conferenceId'] = request.conference_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryCloudRecordVideo',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryCloudRecordVideo',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryCloudRecordVideoResponse(),
            self.call_api(params, req, runtime)
        )

    async def query_cloud_record_video_with_options_async(
        self,
        tmp_req: aliding_20230426_models.QueryCloudRecordVideoRequest,
        tmp_header: aliding_20230426_models.QueryCloudRecordVideoHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryCloudRecordVideoResponse:
        """
        @summary 查询会议录制的详情信息
        
        @param tmp_req: QueryCloudRecordVideoRequest
        @param tmp_header: QueryCloudRecordVideoHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryCloudRecordVideoResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryCloudRecordVideoShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryCloudRecordVideoShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.conference_id):
            body['conferenceId'] = request.conference_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryCloudRecordVideo',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryCloudRecordVideo',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryCloudRecordVideoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def query_cloud_record_video(
        self,
        request: aliding_20230426_models.QueryCloudRecordVideoRequest,
    ) -> aliding_20230426_models.QueryCloudRecordVideoResponse:
        """
        @summary 查询会议录制的详情信息
        
        @param request: QueryCloudRecordVideoRequest
        @return: QueryCloudRecordVideoResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryCloudRecordVideoHeaders()
        return self.query_cloud_record_video_with_options(request, headers, runtime)

    async def query_cloud_record_video_async(
        self,
        request: aliding_20230426_models.QueryCloudRecordVideoRequest,
    ) -> aliding_20230426_models.QueryCloudRecordVideoResponse:
        """
        @summary 查询会议录制的详情信息
        
        @param request: QueryCloudRecordVideoRequest
        @return: QueryCloudRecordVideoResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryCloudRecordVideoHeaders()
        return await self.query_cloud_record_video_with_options_async(request, headers, runtime)

    def query_cloud_record_video_play_info_with_options(
        self,
        tmp_req: aliding_20230426_models.QueryCloudRecordVideoPlayInfoRequest,
        tmp_header: aliding_20230426_models.QueryCloudRecordVideoPlayInfoHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryCloudRecordVideoPlayInfoResponse:
        """
        @summary 查询会议录制中的视频信息
        
        @param tmp_req: QueryCloudRecordVideoPlayInfoRequest
        @param tmp_header: QueryCloudRecordVideoPlayInfoHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryCloudRecordVideoPlayInfoResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryCloudRecordVideoPlayInfoShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryCloudRecordVideoPlayInfoShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.conference_id):
            body['ConferenceId'] = request.conference_id
        if not UtilClient.is_unset(request.media_id):
            body['MediaId'] = request.media_id
        if not UtilClient.is_unset(request.region_id):
            body['RegionId'] = request.region_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryCloudRecordVideoPlayInfo',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryCloudRecordVideoPlayInfo',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryCloudRecordVideoPlayInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def query_cloud_record_video_play_info_with_options_async(
        self,
        tmp_req: aliding_20230426_models.QueryCloudRecordVideoPlayInfoRequest,
        tmp_header: aliding_20230426_models.QueryCloudRecordVideoPlayInfoHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryCloudRecordVideoPlayInfoResponse:
        """
        @summary 查询会议录制中的视频信息
        
        @param tmp_req: QueryCloudRecordVideoPlayInfoRequest
        @param tmp_header: QueryCloudRecordVideoPlayInfoHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryCloudRecordVideoPlayInfoResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryCloudRecordVideoPlayInfoShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryCloudRecordVideoPlayInfoShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.conference_id):
            body['ConferenceId'] = request.conference_id
        if not UtilClient.is_unset(request.media_id):
            body['MediaId'] = request.media_id
        if not UtilClient.is_unset(request.region_id):
            body['RegionId'] = request.region_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryCloudRecordVideoPlayInfo',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryCloudRecordVideoPlayInfo',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryCloudRecordVideoPlayInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def query_cloud_record_video_play_info(
        self,
        request: aliding_20230426_models.QueryCloudRecordVideoPlayInfoRequest,
    ) -> aliding_20230426_models.QueryCloudRecordVideoPlayInfoResponse:
        """
        @summary 查询会议录制中的视频信息
        
        @param request: QueryCloudRecordVideoPlayInfoRequest
        @return: QueryCloudRecordVideoPlayInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryCloudRecordVideoPlayInfoHeaders()
        return self.query_cloud_record_video_play_info_with_options(request, headers, runtime)

    async def query_cloud_record_video_play_info_async(
        self,
        request: aliding_20230426_models.QueryCloudRecordVideoPlayInfoRequest,
    ) -> aliding_20230426_models.QueryCloudRecordVideoPlayInfoResponse:
        """
        @summary 查询会议录制中的视频信息
        
        @param request: QueryCloudRecordVideoPlayInfoRequest
        @return: QueryCloudRecordVideoPlayInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryCloudRecordVideoPlayInfoHeaders()
        return await self.query_cloud_record_video_play_info_with_options_async(request, headers, runtime)

    def query_conference_info_with_options(
        self,
        request: aliding_20230426_models.QueryConferenceInfoRequest,
        tmp_header: aliding_20230426_models.QueryConferenceInfoHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryConferenceInfoResponse:
        """
        @summary 查询视频会议信息
        
        @param request: QueryConferenceInfoRequest
        @param tmp_header: QueryConferenceInfoHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryConferenceInfoResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.QueryConferenceInfoShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.conference_id):
            body['conferenceId'] = request.conference_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryConferenceInfo',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryConferenceInfo',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryConferenceInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def query_conference_info_with_options_async(
        self,
        request: aliding_20230426_models.QueryConferenceInfoRequest,
        tmp_header: aliding_20230426_models.QueryConferenceInfoHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryConferenceInfoResponse:
        """
        @summary 查询视频会议信息
        
        @param request: QueryConferenceInfoRequest
        @param tmp_header: QueryConferenceInfoHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryConferenceInfoResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.QueryConferenceInfoShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.conference_id):
            body['conferenceId'] = request.conference_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryConferenceInfo',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryConferenceInfo',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryConferenceInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def query_conference_info(
        self,
        request: aliding_20230426_models.QueryConferenceInfoRequest,
    ) -> aliding_20230426_models.QueryConferenceInfoResponse:
        """
        @summary 查询视频会议信息
        
        @param request: QueryConferenceInfoRequest
        @return: QueryConferenceInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryConferenceInfoHeaders()
        return self.query_conference_info_with_options(request, headers, runtime)

    async def query_conference_info_async(
        self,
        request: aliding_20230426_models.QueryConferenceInfoRequest,
    ) -> aliding_20230426_models.QueryConferenceInfoResponse:
        """
        @summary 查询视频会议信息
        
        @param request: QueryConferenceInfoRequest
        @return: QueryConferenceInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryConferenceInfoHeaders()
        return await self.query_conference_info_with_options_async(request, headers, runtime)

    def query_conference_info_by_room_code_with_options(
        self,
        tmp_req: aliding_20230426_models.QueryConferenceInfoByRoomCodeRequest,
        tmp_header: aliding_20230426_models.QueryConferenceInfoByRoomCodeHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryConferenceInfoByRoomCodeResponse:
        """
        @summary 根据会议码查询视频会议信息
        
        @param tmp_req: QueryConferenceInfoByRoomCodeRequest
        @param tmp_header: QueryConferenceInfoByRoomCodeHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryConferenceInfoByRoomCodeResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryConferenceInfoByRoomCodeShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryConferenceInfoByRoomCodeShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.max_results):
            body['maxResults'] = request.max_results
        if not UtilClient.is_unset(request.next_token):
            body['nextToken'] = request.next_token
        if not UtilClient.is_unset(request.room_code):
            body['roomCode'] = request.room_code
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryConferenceInfoByRoomCode',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryConferenceInfoByRoomCode',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryConferenceInfoByRoomCodeResponse(),
            self.call_api(params, req, runtime)
        )

    async def query_conference_info_by_room_code_with_options_async(
        self,
        tmp_req: aliding_20230426_models.QueryConferenceInfoByRoomCodeRequest,
        tmp_header: aliding_20230426_models.QueryConferenceInfoByRoomCodeHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryConferenceInfoByRoomCodeResponse:
        """
        @summary 根据会议码查询视频会议信息
        
        @param tmp_req: QueryConferenceInfoByRoomCodeRequest
        @param tmp_header: QueryConferenceInfoByRoomCodeHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryConferenceInfoByRoomCodeResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryConferenceInfoByRoomCodeShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryConferenceInfoByRoomCodeShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.max_results):
            body['maxResults'] = request.max_results
        if not UtilClient.is_unset(request.next_token):
            body['nextToken'] = request.next_token
        if not UtilClient.is_unset(request.room_code):
            body['roomCode'] = request.room_code
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryConferenceInfoByRoomCode',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryConferenceInfoByRoomCode',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryConferenceInfoByRoomCodeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def query_conference_info_by_room_code(
        self,
        request: aliding_20230426_models.QueryConferenceInfoByRoomCodeRequest,
    ) -> aliding_20230426_models.QueryConferenceInfoByRoomCodeResponse:
        """
        @summary 根据会议码查询视频会议信息
        
        @param request: QueryConferenceInfoByRoomCodeRequest
        @return: QueryConferenceInfoByRoomCodeResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryConferenceInfoByRoomCodeHeaders()
        return self.query_conference_info_by_room_code_with_options(request, headers, runtime)

    async def query_conference_info_by_room_code_async(
        self,
        request: aliding_20230426_models.QueryConferenceInfoByRoomCodeRequest,
    ) -> aliding_20230426_models.QueryConferenceInfoByRoomCodeResponse:
        """
        @summary 根据会议码查询视频会议信息
        
        @param request: QueryConferenceInfoByRoomCodeRequest
        @return: QueryConferenceInfoByRoomCodeResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryConferenceInfoByRoomCodeHeaders()
        return await self.query_conference_info_by_room_code_with_options_async(request, headers, runtime)

    def query_conference_members_with_options(
        self,
        tmp_req: aliding_20230426_models.QueryConferenceMembersRequest,
        tmp_header: aliding_20230426_models.QueryConferenceMembersHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryConferenceMembersResponse:
        """
        @summary 查询视频会议成员
        
        @param tmp_req: QueryConferenceMembersRequest
        @param tmp_header: QueryConferenceMembersHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryConferenceMembersResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryConferenceMembersShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryConferenceMembersShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.max_results):
            body['MaxResults'] = request.max_results
        if not UtilClient.is_unset(request.next_token):
            body['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.conference_id):
            body['conferenceId'] = request.conference_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryConferenceMembers',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryConferenceMembers',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryConferenceMembersResponse(),
            self.call_api(params, req, runtime)
        )

    async def query_conference_members_with_options_async(
        self,
        tmp_req: aliding_20230426_models.QueryConferenceMembersRequest,
        tmp_header: aliding_20230426_models.QueryConferenceMembersHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryConferenceMembersResponse:
        """
        @summary 查询视频会议成员
        
        @param tmp_req: QueryConferenceMembersRequest
        @param tmp_header: QueryConferenceMembersHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryConferenceMembersResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryConferenceMembersShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryConferenceMembersShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.max_results):
            body['MaxResults'] = request.max_results
        if not UtilClient.is_unset(request.next_token):
            body['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.conference_id):
            body['conferenceId'] = request.conference_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryConferenceMembers',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryConferenceMembers',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryConferenceMembersResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def query_conference_members(
        self,
        request: aliding_20230426_models.QueryConferenceMembersRequest,
    ) -> aliding_20230426_models.QueryConferenceMembersResponse:
        """
        @summary 查询视频会议成员
        
        @param request: QueryConferenceMembersRequest
        @return: QueryConferenceMembersResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryConferenceMembersHeaders()
        return self.query_conference_members_with_options(request, headers, runtime)

    async def query_conference_members_async(
        self,
        request: aliding_20230426_models.QueryConferenceMembersRequest,
    ) -> aliding_20230426_models.QueryConferenceMembersResponse:
        """
        @summary 查询视频会议成员
        
        @param request: QueryConferenceMembersRequest
        @return: QueryConferenceMembersResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryConferenceMembersHeaders()
        return await self.query_conference_members_with_options_async(request, headers, runtime)

    def query_dentries_info_with_options(
        self,
        tmp_req: aliding_20230426_models.QueryDentriesInfoRequest,
        tmp_header: aliding_20230426_models.QueryDentriesInfoHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryDentriesInfoResponse:
        """
        @summary 获取文件或文件夹信息
        
        @param tmp_req: QueryDentriesInfoRequest
        @param tmp_header: QueryDentriesInfoHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryDentriesInfoResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryDentriesInfoShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryDentriesInfoShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.app_ids_for_app_properties):
            request.app_ids_for_app_properties_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.app_ids_for_app_properties, 'AppIdsForAppProperties', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_ids_for_app_properties_shrink):
            body['AppIdsForAppProperties'] = request.app_ids_for_app_properties_shrink
        if not UtilClient.is_unset(request.dentry_id):
            body['DentryId'] = request.dentry_id
        if not UtilClient.is_unset(request.space_id):
            body['SpaceId'] = request.space_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.union_id):
            body['UnionId'] = request.union_id
        if not UtilClient.is_unset(request.with_thumbnail):
            body['WithThumbnail'] = request.with_thumbnail
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryDentriesInfo',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/queryDentriesInfo',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryDentriesInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def query_dentries_info_with_options_async(
        self,
        tmp_req: aliding_20230426_models.QueryDentriesInfoRequest,
        tmp_header: aliding_20230426_models.QueryDentriesInfoHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryDentriesInfoResponse:
        """
        @summary 获取文件或文件夹信息
        
        @param tmp_req: QueryDentriesInfoRequest
        @param tmp_header: QueryDentriesInfoHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryDentriesInfoResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryDentriesInfoShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryDentriesInfoShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.app_ids_for_app_properties):
            request.app_ids_for_app_properties_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.app_ids_for_app_properties, 'AppIdsForAppProperties', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_ids_for_app_properties_shrink):
            body['AppIdsForAppProperties'] = request.app_ids_for_app_properties_shrink
        if not UtilClient.is_unset(request.dentry_id):
            body['DentryId'] = request.dentry_id
        if not UtilClient.is_unset(request.space_id):
            body['SpaceId'] = request.space_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.union_id):
            body['UnionId'] = request.union_id
        if not UtilClient.is_unset(request.with_thumbnail):
            body['WithThumbnail'] = request.with_thumbnail
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryDentriesInfo',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/queryDentriesInfo',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryDentriesInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def query_dentries_info(
        self,
        request: aliding_20230426_models.QueryDentriesInfoRequest,
    ) -> aliding_20230426_models.QueryDentriesInfoResponse:
        """
        @summary 获取文件或文件夹信息
        
        @param request: QueryDentriesInfoRequest
        @return: QueryDentriesInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryDentriesInfoHeaders()
        return self.query_dentries_info_with_options(request, headers, runtime)

    async def query_dentries_info_async(
        self,
        request: aliding_20230426_models.QueryDentriesInfoRequest,
    ) -> aliding_20230426_models.QueryDentriesInfoResponse:
        """
        @summary 获取文件或文件夹信息
        
        @param request: QueryDentriesInfoRequest
        @return: QueryDentriesInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryDentriesInfoHeaders()
        return await self.query_dentries_info_with_options_async(request, headers, runtime)

    def query_dentry_with_options(
        self,
        tmp_req: aliding_20230426_models.QueryDentryRequest,
        tmp_header: aliding_20230426_models.QueryDentryHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryDentryResponse:
        """
        @summary 查询知识库节点信息
        
        @param tmp_req: QueryDentryRequest
        @param tmp_header: QueryDentryHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryDentryResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryDentryShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryDentryShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.dentry_id):
            body['DentryId'] = request.dentry_id
        if not UtilClient.is_unset(request.include_space):
            body['IncludeSpace'] = request.include_space
        if not UtilClient.is_unset(request.space_id):
            body['SpaceId'] = request.space_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryDentry',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v2/documents/queryDentry',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryDentryResponse(),
            self.call_api(params, req, runtime)
        )

    async def query_dentry_with_options_async(
        self,
        tmp_req: aliding_20230426_models.QueryDentryRequest,
        tmp_header: aliding_20230426_models.QueryDentryHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryDentryResponse:
        """
        @summary 查询知识库节点信息
        
        @param tmp_req: QueryDentryRequest
        @param tmp_header: QueryDentryHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryDentryResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryDentryShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryDentryShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.dentry_id):
            body['DentryId'] = request.dentry_id
        if not UtilClient.is_unset(request.include_space):
            body['IncludeSpace'] = request.include_space
        if not UtilClient.is_unset(request.space_id):
            body['SpaceId'] = request.space_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryDentry',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v2/documents/queryDentry',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryDentryResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def query_dentry(
        self,
        request: aliding_20230426_models.QueryDentryRequest,
    ) -> aliding_20230426_models.QueryDentryResponse:
        """
        @summary 查询知识库节点信息
        
        @param request: QueryDentryRequest
        @return: QueryDentryResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryDentryHeaders()
        return self.query_dentry_with_options(request, headers, runtime)

    async def query_dentry_async(
        self,
        request: aliding_20230426_models.QueryDentryRequest,
    ) -> aliding_20230426_models.QueryDentryResponse:
        """
        @summary 查询知识库节点信息
        
        @param request: QueryDentryRequest
        @return: QueryDentryResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryDentryHeaders()
        return await self.query_dentry_with_options_async(request, headers, runtime)

    def query_group_live_info_with_options(
        self,
        tmp_req: aliding_20230426_models.QueryGroupLiveInfoRequest,
        tmp_header: aliding_20230426_models.QueryGroupLiveInfoHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryGroupLiveInfoResponse:
        """
        @summary 查询群直播详情
        
        @param tmp_req: QueryGroupLiveInfoRequest
        @param tmp_header: QueryGroupLiveInfoHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryGroupLiveInfoResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryGroupLiveInfoShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryGroupLiveInfoShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.anchor_union_id):
            body['AnchorUnionId'] = request.anchor_union_id
        if not UtilClient.is_unset(request.live_uuid):
            body['LiveUuid'] = request.live_uuid
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryGroupLiveInfo',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryGroupLiveInfo',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryGroupLiveInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def query_group_live_info_with_options_async(
        self,
        tmp_req: aliding_20230426_models.QueryGroupLiveInfoRequest,
        tmp_header: aliding_20230426_models.QueryGroupLiveInfoHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryGroupLiveInfoResponse:
        """
        @summary 查询群直播详情
        
        @param tmp_req: QueryGroupLiveInfoRequest
        @param tmp_header: QueryGroupLiveInfoHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryGroupLiveInfoResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryGroupLiveInfoShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryGroupLiveInfoShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.anchor_union_id):
            body['AnchorUnionId'] = request.anchor_union_id
        if not UtilClient.is_unset(request.live_uuid):
            body['LiveUuid'] = request.live_uuid
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryGroupLiveInfo',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryGroupLiveInfo',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryGroupLiveInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def query_group_live_info(
        self,
        request: aliding_20230426_models.QueryGroupLiveInfoRequest,
    ) -> aliding_20230426_models.QueryGroupLiveInfoResponse:
        """
        @summary 查询群直播详情
        
        @param request: QueryGroupLiveInfoRequest
        @return: QueryGroupLiveInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryGroupLiveInfoHeaders()
        return self.query_group_live_info_with_options(request, headers, runtime)

    async def query_group_live_info_async(
        self,
        request: aliding_20230426_models.QueryGroupLiveInfoRequest,
    ) -> aliding_20230426_models.QueryGroupLiveInfoResponse:
        """
        @summary 查询群直播详情
        
        @param request: QueryGroupLiveInfoRequest
        @return: QueryGroupLiveInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryGroupLiveInfoHeaders()
        return await self.query_group_live_info_with_options_async(request, headers, runtime)

    def query_live_info_with_options(
        self,
        tmp_req: aliding_20230426_models.QueryLiveInfoRequest,
        tmp_header: aliding_20230426_models.QueryLiveInfoHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryLiveInfoResponse:
        """
        @summary 查询直播信息
        
        @param tmp_req: QueryLiveInfoRequest
        @param tmp_header: QueryLiveInfoHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryLiveInfoResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryLiveInfoShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryLiveInfoShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.live_id):
            body['LiveId'] = request.live_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryLiveInfo',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryLiveInfo',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryLiveInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def query_live_info_with_options_async(
        self,
        tmp_req: aliding_20230426_models.QueryLiveInfoRequest,
        tmp_header: aliding_20230426_models.QueryLiveInfoHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryLiveInfoResponse:
        """
        @summary 查询直播信息
        
        @param tmp_req: QueryLiveInfoRequest
        @param tmp_header: QueryLiveInfoHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryLiveInfoResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryLiveInfoShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryLiveInfoShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.live_id):
            body['LiveId'] = request.live_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryLiveInfo',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryLiveInfo',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryLiveInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def query_live_info(
        self,
        request: aliding_20230426_models.QueryLiveInfoRequest,
    ) -> aliding_20230426_models.QueryLiveInfoResponse:
        """
        @summary 查询直播信息
        
        @param request: QueryLiveInfoRequest
        @return: QueryLiveInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryLiveInfoHeaders()
        return self.query_live_info_with_options(request, headers, runtime)

    async def query_live_info_async(
        self,
        request: aliding_20230426_models.QueryLiveInfoRequest,
    ) -> aliding_20230426_models.QueryLiveInfoResponse:
        """
        @summary 查询直播信息
        
        @param request: QueryLiveInfoRequest
        @return: QueryLiveInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryLiveInfoHeaders()
        return await self.query_live_info_with_options_async(request, headers, runtime)

    def query_live_watch_detail_with_options(
        self,
        tmp_req: aliding_20230426_models.QueryLiveWatchDetailRequest,
        tmp_header: aliding_20230426_models.QueryLiveWatchDetailHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryLiveWatchDetailResponse:
        """
        @summary 查询直播的观看数据
        
        @param tmp_req: QueryLiveWatchDetailRequest
        @param tmp_header: QueryLiveWatchDetailHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryLiveWatchDetailResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryLiveWatchDetailShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryLiveWatchDetailShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.live_id):
            body['LiveId'] = request.live_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryLiveWatchDetail',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryLiveWatchDetail',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryLiveWatchDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def query_live_watch_detail_with_options_async(
        self,
        tmp_req: aliding_20230426_models.QueryLiveWatchDetailRequest,
        tmp_header: aliding_20230426_models.QueryLiveWatchDetailHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryLiveWatchDetailResponse:
        """
        @summary 查询直播的观看数据
        
        @param tmp_req: QueryLiveWatchDetailRequest
        @param tmp_header: QueryLiveWatchDetailHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryLiveWatchDetailResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryLiveWatchDetailShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryLiveWatchDetailShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.live_id):
            body['LiveId'] = request.live_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryLiveWatchDetail',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryLiveWatchDetail',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryLiveWatchDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def query_live_watch_detail(
        self,
        request: aliding_20230426_models.QueryLiveWatchDetailRequest,
    ) -> aliding_20230426_models.QueryLiveWatchDetailResponse:
        """
        @summary 查询直播的观看数据
        
        @param request: QueryLiveWatchDetailRequest
        @return: QueryLiveWatchDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryLiveWatchDetailHeaders()
        return self.query_live_watch_detail_with_options(request, headers, runtime)

    async def query_live_watch_detail_async(
        self,
        request: aliding_20230426_models.QueryLiveWatchDetailRequest,
    ) -> aliding_20230426_models.QueryLiveWatchDetailResponse:
        """
        @summary 查询直播的观看数据
        
        @param request: QueryLiveWatchDetailRequest
        @return: QueryLiveWatchDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryLiveWatchDetailHeaders()
        return await self.query_live_watch_detail_with_options_async(request, headers, runtime)

    def query_live_watch_user_list_with_options(
        self,
        tmp_req: aliding_20230426_models.QueryLiveWatchUserListRequest,
        tmp_header: aliding_20230426_models.QueryLiveWatchUserListHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryLiveWatchUserListResponse:
        """
        @summary 查询直播观看人员信息
        
        @param tmp_req: QueryLiveWatchUserListRequest
        @param tmp_header: QueryLiveWatchUserListHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryLiveWatchUserListResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryLiveWatchUserListShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryLiveWatchUserListShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.live_id):
            body['LiveId'] = request.live_id
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryLiveWatchUserList',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryLiveWatchUserList',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryLiveWatchUserListResponse(),
            self.call_api(params, req, runtime)
        )

    async def query_live_watch_user_list_with_options_async(
        self,
        tmp_req: aliding_20230426_models.QueryLiveWatchUserListRequest,
        tmp_header: aliding_20230426_models.QueryLiveWatchUserListHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryLiveWatchUserListResponse:
        """
        @summary 查询直播观看人员信息
        
        @param tmp_req: QueryLiveWatchUserListRequest
        @param tmp_header: QueryLiveWatchUserListHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryLiveWatchUserListResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryLiveWatchUserListShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryLiveWatchUserListShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.live_id):
            body['LiveId'] = request.live_id
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryLiveWatchUserList',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryLiveWatchUserList',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryLiveWatchUserListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def query_live_watch_user_list(
        self,
        request: aliding_20230426_models.QueryLiveWatchUserListRequest,
    ) -> aliding_20230426_models.QueryLiveWatchUserListResponse:
        """
        @summary 查询直播观看人员信息
        
        @param request: QueryLiveWatchUserListRequest
        @return: QueryLiveWatchUserListResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryLiveWatchUserListHeaders()
        return self.query_live_watch_user_list_with_options(request, headers, runtime)

    async def query_live_watch_user_list_async(
        self,
        request: aliding_20230426_models.QueryLiveWatchUserListRequest,
    ) -> aliding_20230426_models.QueryLiveWatchUserListResponse:
        """
        @summary 查询直播观看人员信息
        
        @param request: QueryLiveWatchUserListRequest
        @return: QueryLiveWatchUserListResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryLiveWatchUserListHeaders()
        return await self.query_live_watch_user_list_with_options_async(request, headers, runtime)

    def query_meeting_room_with_options(
        self,
        tmp_req: aliding_20230426_models.QueryMeetingRoomRequest,
        tmp_header: aliding_20230426_models.QueryMeetingRoomHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryMeetingRoomResponse:
        """
        @summary 查询会议室详情
        
        @param tmp_req: QueryMeetingRoomRequest
        @param tmp_header: QueryMeetingRoomHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryMeetingRoomResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryMeetingRoomShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryMeetingRoomShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.room_id):
            body['RoomId'] = request.room_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryMeetingRoom',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryMeetingRoom',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryMeetingRoomResponse(),
            self.call_api(params, req, runtime)
        )

    async def query_meeting_room_with_options_async(
        self,
        tmp_req: aliding_20230426_models.QueryMeetingRoomRequest,
        tmp_header: aliding_20230426_models.QueryMeetingRoomHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryMeetingRoomResponse:
        """
        @summary 查询会议室详情
        
        @param tmp_req: QueryMeetingRoomRequest
        @param tmp_header: QueryMeetingRoomHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryMeetingRoomResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryMeetingRoomShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryMeetingRoomShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.room_id):
            body['RoomId'] = request.room_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryMeetingRoom',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryMeetingRoom',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryMeetingRoomResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def query_meeting_room(
        self,
        request: aliding_20230426_models.QueryMeetingRoomRequest,
    ) -> aliding_20230426_models.QueryMeetingRoomResponse:
        """
        @summary 查询会议室详情
        
        @param request: QueryMeetingRoomRequest
        @return: QueryMeetingRoomResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryMeetingRoomHeaders()
        return self.query_meeting_room_with_options(request, headers, runtime)

    async def query_meeting_room_async(
        self,
        request: aliding_20230426_models.QueryMeetingRoomRequest,
    ) -> aliding_20230426_models.QueryMeetingRoomResponse:
        """
        @summary 查询会议室详情
        
        @param request: QueryMeetingRoomRequest
        @return: QueryMeetingRoomResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryMeetingRoomHeaders()
        return await self.query_meeting_room_with_options_async(request, headers, runtime)

    def query_meeting_room_group_with_options(
        self,
        tmp_req: aliding_20230426_models.QueryMeetingRoomGroupRequest,
        tmp_header: aliding_20230426_models.QueryMeetingRoomGroupHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryMeetingRoomGroupResponse:
        """
        @summary 查询会议室分组信息
        
        @param tmp_req: QueryMeetingRoomGroupRequest
        @param tmp_header: QueryMeetingRoomGroupHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryMeetingRoomGroupResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryMeetingRoomGroupShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryMeetingRoomGroupShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.group_id):
            body['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryMeetingRoomGroup',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryMeetingRoomGroup',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryMeetingRoomGroupResponse(),
            self.call_api(params, req, runtime)
        )

    async def query_meeting_room_group_with_options_async(
        self,
        tmp_req: aliding_20230426_models.QueryMeetingRoomGroupRequest,
        tmp_header: aliding_20230426_models.QueryMeetingRoomGroupHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryMeetingRoomGroupResponse:
        """
        @summary 查询会议室分组信息
        
        @param tmp_req: QueryMeetingRoomGroupRequest
        @param tmp_header: QueryMeetingRoomGroupHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryMeetingRoomGroupResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryMeetingRoomGroupShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryMeetingRoomGroupShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.group_id):
            body['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryMeetingRoomGroup',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryMeetingRoomGroup',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryMeetingRoomGroupResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def query_meeting_room_group(
        self,
        request: aliding_20230426_models.QueryMeetingRoomGroupRequest,
    ) -> aliding_20230426_models.QueryMeetingRoomGroupResponse:
        """
        @summary 查询会议室分组信息
        
        @param request: QueryMeetingRoomGroupRequest
        @return: QueryMeetingRoomGroupResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryMeetingRoomGroupHeaders()
        return self.query_meeting_room_group_with_options(request, headers, runtime)

    async def query_meeting_room_group_async(
        self,
        request: aliding_20230426_models.QueryMeetingRoomGroupRequest,
    ) -> aliding_20230426_models.QueryMeetingRoomGroupResponse:
        """
        @summary 查询会议室分组信息
        
        @param request: QueryMeetingRoomGroupRequest
        @return: QueryMeetingRoomGroupResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryMeetingRoomGroupHeaders()
        return await self.query_meeting_room_group_with_options_async(request, headers, runtime)

    def query_meeting_room_group_list_with_options(
        self,
        tmp_req: aliding_20230426_models.QueryMeetingRoomGroupListRequest,
        tmp_header: aliding_20230426_models.QueryMeetingRoomGroupListHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryMeetingRoomGroupListResponse:
        """
        @summary 查询会议室分组列表
        
        @param tmp_req: QueryMeetingRoomGroupListRequest
        @param tmp_header: QueryMeetingRoomGroupListHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryMeetingRoomGroupListResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryMeetingRoomGroupListShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryMeetingRoomGroupListShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.request):
            request.request_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.request, 'Request', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.request_shrink):
            body['Request'] = request.request_shrink
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryMeetingRoomGroupList',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryMeetingRoomGroupList',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryMeetingRoomGroupListResponse(),
            self.call_api(params, req, runtime)
        )

    async def query_meeting_room_group_list_with_options_async(
        self,
        tmp_req: aliding_20230426_models.QueryMeetingRoomGroupListRequest,
        tmp_header: aliding_20230426_models.QueryMeetingRoomGroupListHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryMeetingRoomGroupListResponse:
        """
        @summary 查询会议室分组列表
        
        @param tmp_req: QueryMeetingRoomGroupListRequest
        @param tmp_header: QueryMeetingRoomGroupListHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryMeetingRoomGroupListResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryMeetingRoomGroupListShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryMeetingRoomGroupListShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.request):
            request.request_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.request, 'Request', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.request_shrink):
            body['Request'] = request.request_shrink
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryMeetingRoomGroupList',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryMeetingRoomGroupList',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryMeetingRoomGroupListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def query_meeting_room_group_list(
        self,
        request: aliding_20230426_models.QueryMeetingRoomGroupListRequest,
    ) -> aliding_20230426_models.QueryMeetingRoomGroupListResponse:
        """
        @summary 查询会议室分组列表
        
        @param request: QueryMeetingRoomGroupListRequest
        @return: QueryMeetingRoomGroupListResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryMeetingRoomGroupListHeaders()
        return self.query_meeting_room_group_list_with_options(request, headers, runtime)

    async def query_meeting_room_group_list_async(
        self,
        request: aliding_20230426_models.QueryMeetingRoomGroupListRequest,
    ) -> aliding_20230426_models.QueryMeetingRoomGroupListResponse:
        """
        @summary 查询会议室分组列表
        
        @param request: QueryMeetingRoomGroupListRequest
        @return: QueryMeetingRoomGroupListResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryMeetingRoomGroupListHeaders()
        return await self.query_meeting_room_group_list_with_options_async(request, headers, runtime)

    def query_meeting_room_list_with_options(
        self,
        tmp_req: aliding_20230426_models.QueryMeetingRoomListRequest,
        tmp_header: aliding_20230426_models.QueryMeetingRoomListHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryMeetingRoomListResponse:
        """
        @summary 查询会议室列表
        
        @param tmp_req: QueryMeetingRoomListRequest
        @param tmp_header: QueryMeetingRoomListHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryMeetingRoomListResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryMeetingRoomListShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryMeetingRoomListShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.max_results):
            body['MaxResults'] = request.max_results
        if not UtilClient.is_unset(request.next_token):
            body['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryMeetingRoomList',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryMeetingRoomList',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryMeetingRoomListResponse(),
            self.call_api(params, req, runtime)
        )

    async def query_meeting_room_list_with_options_async(
        self,
        tmp_req: aliding_20230426_models.QueryMeetingRoomListRequest,
        tmp_header: aliding_20230426_models.QueryMeetingRoomListHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryMeetingRoomListResponse:
        """
        @summary 查询会议室列表
        
        @param tmp_req: QueryMeetingRoomListRequest
        @param tmp_header: QueryMeetingRoomListHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryMeetingRoomListResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryMeetingRoomListShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryMeetingRoomListShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.max_results):
            body['MaxResults'] = request.max_results
        if not UtilClient.is_unset(request.next_token):
            body['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryMeetingRoomList',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryMeetingRoomList',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryMeetingRoomListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def query_meeting_room_list(
        self,
        request: aliding_20230426_models.QueryMeetingRoomListRequest,
    ) -> aliding_20230426_models.QueryMeetingRoomListResponse:
        """
        @summary 查询会议室列表
        
        @param request: QueryMeetingRoomListRequest
        @return: QueryMeetingRoomListResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryMeetingRoomListHeaders()
        return self.query_meeting_room_list_with_options(request, headers, runtime)

    async def query_meeting_room_list_async(
        self,
        request: aliding_20230426_models.QueryMeetingRoomListRequest,
    ) -> aliding_20230426_models.QueryMeetingRoomListResponse:
        """
        @summary 查询会议室列表
        
        @param request: QueryMeetingRoomListRequest
        @return: QueryMeetingRoomListResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryMeetingRoomListHeaders()
        return await self.query_meeting_room_list_with_options_async(request, headers, runtime)

    def query_minutes_with_options(
        self,
        tmp_req: aliding_20230426_models.QueryMinutesRequest,
        tmp_header: aliding_20230426_models.QueryMinutesHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryMinutesResponse:
        """
        @summary 查询闪记录音
        
        @param tmp_req: QueryMinutesRequest
        @param tmp_header: QueryMinutesHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryMinutesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryMinutesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryMinutesShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.conference_id):
            body['conferenceId'] = request.conference_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryMinutes',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryMinutes',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryMinutesResponse(),
            self.call_api(params, req, runtime)
        )

    async def query_minutes_with_options_async(
        self,
        tmp_req: aliding_20230426_models.QueryMinutesRequest,
        tmp_header: aliding_20230426_models.QueryMinutesHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryMinutesResponse:
        """
        @summary 查询闪记录音
        
        @param tmp_req: QueryMinutesRequest
        @param tmp_header: QueryMinutesHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryMinutesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryMinutesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryMinutesShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.conference_id):
            body['conferenceId'] = request.conference_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryMinutes',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryMinutes',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryMinutesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def query_minutes(
        self,
        request: aliding_20230426_models.QueryMinutesRequest,
    ) -> aliding_20230426_models.QueryMinutesResponse:
        """
        @summary 查询闪记录音
        
        @param request: QueryMinutesRequest
        @return: QueryMinutesResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryMinutesHeaders()
        return self.query_minutes_with_options(request, headers, runtime)

    async def query_minutes_async(
        self,
        request: aliding_20230426_models.QueryMinutesRequest,
    ) -> aliding_20230426_models.QueryMinutesResponse:
        """
        @summary 查询闪记录音
        
        @param request: QueryMinutesRequest
        @return: QueryMinutesResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryMinutesHeaders()
        return await self.query_minutes_with_options_async(request, headers, runtime)

    def query_minutes_summary_with_options(
        self,
        tmp_req: aliding_20230426_models.QueryMinutesSummaryRequest,
        tmp_header: aliding_20230426_models.QueryMinutesSummaryHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryMinutesSummaryResponse:
        """
        @summary 查询会议闪记智能纪要
        
        @param tmp_req: QueryMinutesSummaryRequest
        @param tmp_header: QueryMinutesSummaryHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryMinutesSummaryResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryMinutesSummaryShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryMinutesSummaryShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        if not UtilClient.is_unset(tmp_req.summary_type_list):
            request.summary_type_list_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.summary_type_list, 'summaryTypeList', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.conference_id):
            body['conferenceId'] = request.conference_id
        if not UtilClient.is_unset(request.summary_type_list_shrink):
            body['summaryTypeList'] = request.summary_type_list_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryMinutesSummary',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryMinutesSummary',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryMinutesSummaryResponse(),
            self.call_api(params, req, runtime)
        )

    async def query_minutes_summary_with_options_async(
        self,
        tmp_req: aliding_20230426_models.QueryMinutesSummaryRequest,
        tmp_header: aliding_20230426_models.QueryMinutesSummaryHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryMinutesSummaryResponse:
        """
        @summary 查询会议闪记智能纪要
        
        @param tmp_req: QueryMinutesSummaryRequest
        @param tmp_header: QueryMinutesSummaryHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryMinutesSummaryResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryMinutesSummaryShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryMinutesSummaryShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        if not UtilClient.is_unset(tmp_req.summary_type_list):
            request.summary_type_list_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.summary_type_list, 'summaryTypeList', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.conference_id):
            body['conferenceId'] = request.conference_id
        if not UtilClient.is_unset(request.summary_type_list_shrink):
            body['summaryTypeList'] = request.summary_type_list_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryMinutesSummary',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryMinutesSummary',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryMinutesSummaryResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def query_minutes_summary(
        self,
        request: aliding_20230426_models.QueryMinutesSummaryRequest,
    ) -> aliding_20230426_models.QueryMinutesSummaryResponse:
        """
        @summary 查询会议闪记智能纪要
        
        @param request: QueryMinutesSummaryRequest
        @return: QueryMinutesSummaryResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryMinutesSummaryHeaders()
        return self.query_minutes_summary_with_options(request, headers, runtime)

    async def query_minutes_summary_async(
        self,
        request: aliding_20230426_models.QueryMinutesSummaryRequest,
    ) -> aliding_20230426_models.QueryMinutesSummaryResponse:
        """
        @summary 查询会议闪记智能纪要
        
        @param request: QueryMinutesSummaryRequest
        @return: QueryMinutesSummaryResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryMinutesSummaryHeaders()
        return await self.query_minutes_summary_with_options_async(request, headers, runtime)

    def query_minutes_text_with_options(
        self,
        tmp_req: aliding_20230426_models.QueryMinutesTextRequest,
        tmp_header: aliding_20230426_models.QueryMinutesTextHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryMinutesTextResponse:
        """
        @summary 查询会议闪记的文本信息
        
        @param tmp_req: QueryMinutesTextRequest
        @param tmp_header: QueryMinutesTextHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryMinutesTextResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryMinutesTextShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryMinutesTextShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.conference_id):
            body['conferenceId'] = request.conference_id
        if not UtilClient.is_unset(request.direction):
            body['direction'] = request.direction
        if not UtilClient.is_unset(request.max_results):
            body['maxResults'] = request.max_results
        if not UtilClient.is_unset(request.next_token):
            body['nextToken'] = request.next_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryMinutesText',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryMinutesText',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryMinutesTextResponse(),
            self.call_api(params, req, runtime)
        )

    async def query_minutes_text_with_options_async(
        self,
        tmp_req: aliding_20230426_models.QueryMinutesTextRequest,
        tmp_header: aliding_20230426_models.QueryMinutesTextHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryMinutesTextResponse:
        """
        @summary 查询会议闪记的文本信息
        
        @param tmp_req: QueryMinutesTextRequest
        @param tmp_header: QueryMinutesTextHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryMinutesTextResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryMinutesTextShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryMinutesTextShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.conference_id):
            body['conferenceId'] = request.conference_id
        if not UtilClient.is_unset(request.direction):
            body['direction'] = request.direction
        if not UtilClient.is_unset(request.max_results):
            body['maxResults'] = request.max_results
        if not UtilClient.is_unset(request.next_token):
            body['nextToken'] = request.next_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryMinutesText',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryMinutesText',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryMinutesTextResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def query_minutes_text(
        self,
        request: aliding_20230426_models.QueryMinutesTextRequest,
    ) -> aliding_20230426_models.QueryMinutesTextResponse:
        """
        @summary 查询会议闪记的文本信息
        
        @param request: QueryMinutesTextRequest
        @return: QueryMinutesTextResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryMinutesTextHeaders()
        return self.query_minutes_text_with_options(request, headers, runtime)

    async def query_minutes_text_async(
        self,
        request: aliding_20230426_models.QueryMinutesTextRequest,
    ) -> aliding_20230426_models.QueryMinutesTextResponse:
        """
        @summary 查询会议闪记的文本信息
        
        @param request: QueryMinutesTextRequest
        @return: QueryMinutesTextResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryMinutesTextHeaders()
        return await self.query_minutes_text_with_options_async(request, headers, runtime)

    def query_org_honors_with_options(
        self,
        tmp_req: aliding_20230426_models.QueryOrgHonorsRequest,
        tmp_header: aliding_20230426_models.QueryOrgHonorsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryOrgHonorsResponse:
        """
        @summary 查询企业荣誉
        
        @param tmp_req: QueryOrgHonorsRequest
        @param tmp_header: QueryOrgHonorsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryOrgHonorsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryOrgHonorsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryOrgHonorsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.max_results):
            body['maxResults'] = request.max_results
        if not UtilClient.is_unset(request.next_token):
            body['nextToken'] = request.next_token
        if not UtilClient.is_unset(request.org_id):
            body['orgId'] = request.org_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryOrgHonors',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/aliding/v1/honor/queryOrgHonors',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryOrgHonorsResponse(),
            self.call_api(params, req, runtime)
        )

    async def query_org_honors_with_options_async(
        self,
        tmp_req: aliding_20230426_models.QueryOrgHonorsRequest,
        tmp_header: aliding_20230426_models.QueryOrgHonorsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryOrgHonorsResponse:
        """
        @summary 查询企业荣誉
        
        @param tmp_req: QueryOrgHonorsRequest
        @param tmp_header: QueryOrgHonorsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryOrgHonorsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryOrgHonorsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryOrgHonorsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.max_results):
            body['maxResults'] = request.max_results
        if not UtilClient.is_unset(request.next_token):
            body['nextToken'] = request.next_token
        if not UtilClient.is_unset(request.org_id):
            body['orgId'] = request.org_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryOrgHonors',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/aliding/v1/honor/queryOrgHonors',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryOrgHonorsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def query_org_honors(
        self,
        request: aliding_20230426_models.QueryOrgHonorsRequest,
    ) -> aliding_20230426_models.QueryOrgHonorsResponse:
        """
        @summary 查询企业荣誉
        
        @param request: QueryOrgHonorsRequest
        @return: QueryOrgHonorsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryOrgHonorsHeaders()
        return self.query_org_honors_with_options(request, headers, runtime)

    async def query_org_honors_async(
        self,
        request: aliding_20230426_models.QueryOrgHonorsRequest,
    ) -> aliding_20230426_models.QueryOrgHonorsResponse:
        """
        @summary 查询企业荣誉
        
        @param request: QueryOrgHonorsRequest
        @return: QueryOrgHonorsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryOrgHonorsHeaders()
        return await self.query_org_honors_with_options_async(request, headers, runtime)

    def query_org_todo_tasks_with_options(
        self,
        tmp_req: aliding_20230426_models.QueryOrgTodoTasksRequest,
        tmp_header: aliding_20230426_models.QueryOrgTodoTasksHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryOrgTodoTasksResponse:
        """
        @summary 查询企业代办
        
        @param tmp_req: QueryOrgTodoTasksRequest
        @param tmp_header: QueryOrgTodoTasksHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryOrgTodoTasksResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryOrgTodoTasksShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryOrgTodoTasksShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.is_done):
            body['isDone'] = request.is_done
        if not UtilClient.is_unset(request.next_token):
            body['nextToken'] = request.next_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryOrgTodoTasks',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/task/queryOrgTodoTasks',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryOrgTodoTasksResponse(),
            self.call_api(params, req, runtime)
        )

    async def query_org_todo_tasks_with_options_async(
        self,
        tmp_req: aliding_20230426_models.QueryOrgTodoTasksRequest,
        tmp_header: aliding_20230426_models.QueryOrgTodoTasksHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryOrgTodoTasksResponse:
        """
        @summary 查询企业代办
        
        @param tmp_req: QueryOrgTodoTasksRequest
        @param tmp_header: QueryOrgTodoTasksHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryOrgTodoTasksResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryOrgTodoTasksShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryOrgTodoTasksShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.is_done):
            body['isDone'] = request.is_done
        if not UtilClient.is_unset(request.next_token):
            body['nextToken'] = request.next_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryOrgTodoTasks',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/task/queryOrgTodoTasks',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryOrgTodoTasksResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def query_org_todo_tasks(
        self,
        request: aliding_20230426_models.QueryOrgTodoTasksRequest,
    ) -> aliding_20230426_models.QueryOrgTodoTasksResponse:
        """
        @summary 查询企业代办
        
        @param request: QueryOrgTodoTasksRequest
        @return: QueryOrgTodoTasksResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryOrgTodoTasksHeaders()
        return self.query_org_todo_tasks_with_options(request, headers, runtime)

    async def query_org_todo_tasks_async(
        self,
        request: aliding_20230426_models.QueryOrgTodoTasksRequest,
    ) -> aliding_20230426_models.QueryOrgTodoTasksResponse:
        """
        @summary 查询企业代办
        
        @param request: QueryOrgTodoTasksRequest
        @return: QueryOrgTodoTasksResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryOrgTodoTasksHeaders()
        return await self.query_org_todo_tasks_with_options_async(request, headers, runtime)

    def query_record_minutes_url_with_options(
        self,
        tmp_req: aliding_20230426_models.QueryRecordMinutesUrlRequest,
        tmp_header: aliding_20230426_models.QueryRecordMinutesUrlHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryRecordMinutesUrlResponse:
        """
        @summary 查询闪记的链接，可通过链接查看闪记内容
        
        @param tmp_req: QueryRecordMinutesUrlRequest
        @param tmp_header: QueryRecordMinutesUrlHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryRecordMinutesUrlResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryRecordMinutesUrlShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryRecordMinutesUrlShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.biz_type):
            body['BizType'] = request.biz_type
        if not UtilClient.is_unset(request.conference_id):
            body['ConferenceId'] = request.conference_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryRecordMinutesUrl',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryRecordMinutesUrl',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryRecordMinutesUrlResponse(),
            self.call_api(params, req, runtime)
        )

    async def query_record_minutes_url_with_options_async(
        self,
        tmp_req: aliding_20230426_models.QueryRecordMinutesUrlRequest,
        tmp_header: aliding_20230426_models.QueryRecordMinutesUrlHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryRecordMinutesUrlResponse:
        """
        @summary 查询闪记的链接，可通过链接查看闪记内容
        
        @param tmp_req: QueryRecordMinutesUrlRequest
        @param tmp_header: QueryRecordMinutesUrlHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryRecordMinutesUrlResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryRecordMinutesUrlShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryRecordMinutesUrlShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.biz_type):
            body['BizType'] = request.biz_type
        if not UtilClient.is_unset(request.conference_id):
            body['ConferenceId'] = request.conference_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryRecordMinutesUrl',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryRecordMinutesUrl',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryRecordMinutesUrlResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def query_record_minutes_url(
        self,
        request: aliding_20230426_models.QueryRecordMinutesUrlRequest,
    ) -> aliding_20230426_models.QueryRecordMinutesUrlResponse:
        """
        @summary 查询闪记的链接，可通过链接查看闪记内容
        
        @param request: QueryRecordMinutesUrlRequest
        @return: QueryRecordMinutesUrlResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryRecordMinutesUrlHeaders()
        return self.query_record_minutes_url_with_options(request, headers, runtime)

    async def query_record_minutes_url_async(
        self,
        request: aliding_20230426_models.QueryRecordMinutesUrlRequest,
    ) -> aliding_20230426_models.QueryRecordMinutesUrlResponse:
        """
        @summary 查询闪记的链接，可通过链接查看闪记内容
        
        @param request: QueryRecordMinutesUrlRequest
        @return: QueryRecordMinutesUrlResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryRecordMinutesUrlHeaders()
        return await self.query_record_minutes_url_with_options_async(request, headers, runtime)

    def query_report_detail_with_options(
        self,
        tmp_req: aliding_20230426_models.QueryReportDetailRequest,
        tmp_header: aliding_20230426_models.QueryReportDetailHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryReportDetailResponse:
        """
        @summary 获取日志详情
        
        @param tmp_req: QueryReportDetailRequest
        @param tmp_header: QueryReportDetailHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryReportDetailResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryReportDetailShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryReportDetailShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.report_id):
            body['ReportId'] = request.report_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryReportDetail',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/log/queryReportDetail',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryReportDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def query_report_detail_with_options_async(
        self,
        tmp_req: aliding_20230426_models.QueryReportDetailRequest,
        tmp_header: aliding_20230426_models.QueryReportDetailHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryReportDetailResponse:
        """
        @summary 获取日志详情
        
        @param tmp_req: QueryReportDetailRequest
        @param tmp_header: QueryReportDetailHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryReportDetailResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryReportDetailShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryReportDetailShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.report_id):
            body['ReportId'] = request.report_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryReportDetail',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/log/queryReportDetail',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryReportDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def query_report_detail(
        self,
        request: aliding_20230426_models.QueryReportDetailRequest,
    ) -> aliding_20230426_models.QueryReportDetailResponse:
        """
        @summary 获取日志详情
        
        @param request: QueryReportDetailRequest
        @return: QueryReportDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryReportDetailHeaders()
        return self.query_report_detail_with_options(request, headers, runtime)

    async def query_report_detail_async(
        self,
        request: aliding_20230426_models.QueryReportDetailRequest,
    ) -> aliding_20230426_models.QueryReportDetailResponse:
        """
        @summary 获取日志详情
        
        @param request: QueryReportDetailRequest
        @return: QueryReportDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryReportDetailHeaders()
        return await self.query_report_detail_with_options_async(request, headers, runtime)

    def query_schedule_conference_with_options(
        self,
        tmp_req: aliding_20230426_models.QueryScheduleConferenceRequest,
        tmp_header: aliding_20230426_models.QueryScheduleConferenceHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryScheduleConferenceResponse:
        """
        @summary 查询预约会议
        
        @param tmp_req: QueryScheduleConferenceRequest
        @param tmp_header: QueryScheduleConferenceHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryScheduleConferenceResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryScheduleConferenceShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryScheduleConferenceShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.schedule_conference_id):
            body['scheduleConferenceId'] = request.schedule_conference_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryScheduleConference',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryScheduleConference',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryScheduleConferenceResponse(),
            self.call_api(params, req, runtime)
        )

    async def query_schedule_conference_with_options_async(
        self,
        tmp_req: aliding_20230426_models.QueryScheduleConferenceRequest,
        tmp_header: aliding_20230426_models.QueryScheduleConferenceHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryScheduleConferenceResponse:
        """
        @summary 查询预约会议
        
        @param tmp_req: QueryScheduleConferenceRequest
        @param tmp_header: QueryScheduleConferenceHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryScheduleConferenceResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryScheduleConferenceShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryScheduleConferenceShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.schedule_conference_id):
            body['scheduleConferenceId'] = request.schedule_conference_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryScheduleConference',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryScheduleConference',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryScheduleConferenceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def query_schedule_conference(
        self,
        request: aliding_20230426_models.QueryScheduleConferenceRequest,
    ) -> aliding_20230426_models.QueryScheduleConferenceResponse:
        """
        @summary 查询预约会议
        
        @param request: QueryScheduleConferenceRequest
        @return: QueryScheduleConferenceResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryScheduleConferenceHeaders()
        return self.query_schedule_conference_with_options(request, headers, runtime)

    async def query_schedule_conference_async(
        self,
        request: aliding_20230426_models.QueryScheduleConferenceRequest,
    ) -> aliding_20230426_models.QueryScheduleConferenceResponse:
        """
        @summary 查询预约会议
        
        @param request: QueryScheduleConferenceRequest
        @return: QueryScheduleConferenceResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryScheduleConferenceHeaders()
        return await self.query_schedule_conference_with_options_async(request, headers, runtime)

    def query_schedule_conference_info_with_options(
        self,
        tmp_req: aliding_20230426_models.QueryScheduleConferenceInfoRequest,
        tmp_header: aliding_20230426_models.QueryScheduleConferenceInfoHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryScheduleConferenceInfoResponse:
        """
        @summary 查询预约会议历史会议信息
        
        @param tmp_req: QueryScheduleConferenceInfoRequest
        @param tmp_header: QueryScheduleConferenceInfoHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryScheduleConferenceInfoResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryScheduleConferenceInfoShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryScheduleConferenceInfoShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.max_results):
            body['MaxResults'] = request.max_results
        if not UtilClient.is_unset(request.next_token):
            body['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.schedule_conference_id):
            body['ScheduleConferenceId'] = request.schedule_conference_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryScheduleConferenceInfo',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryScheduleConferenceInfo',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryScheduleConferenceInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def query_schedule_conference_info_with_options_async(
        self,
        tmp_req: aliding_20230426_models.QueryScheduleConferenceInfoRequest,
        tmp_header: aliding_20230426_models.QueryScheduleConferenceInfoHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryScheduleConferenceInfoResponse:
        """
        @summary 查询预约会议历史会议信息
        
        @param tmp_req: QueryScheduleConferenceInfoRequest
        @param tmp_header: QueryScheduleConferenceInfoHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryScheduleConferenceInfoResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryScheduleConferenceInfoShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryScheduleConferenceInfoShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.max_results):
            body['MaxResults'] = request.max_results
        if not UtilClient.is_unset(request.next_token):
            body['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.schedule_conference_id):
            body['ScheduleConferenceId'] = request.schedule_conference_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryScheduleConferenceInfo',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/queryScheduleConferenceInfo',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryScheduleConferenceInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def query_schedule_conference_info(
        self,
        request: aliding_20230426_models.QueryScheduleConferenceInfoRequest,
    ) -> aliding_20230426_models.QueryScheduleConferenceInfoResponse:
        """
        @summary 查询预约会议历史会议信息
        
        @param request: QueryScheduleConferenceInfoRequest
        @return: QueryScheduleConferenceInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryScheduleConferenceInfoHeaders()
        return self.query_schedule_conference_info_with_options(request, headers, runtime)

    async def query_schedule_conference_info_async(
        self,
        request: aliding_20230426_models.QueryScheduleConferenceInfoRequest,
    ) -> aliding_20230426_models.QueryScheduleConferenceInfoResponse:
        """
        @summary 查询预约会议历史会议信息
        
        @param request: QueryScheduleConferenceInfoRequest
        @return: QueryScheduleConferenceInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryScheduleConferenceInfoHeaders()
        return await self.query_schedule_conference_info_with_options_async(request, headers, runtime)

    def query_user_honors_with_options(
        self,
        tmp_req: aliding_20230426_models.QueryUserHonorsRequest,
        tmp_header: aliding_20230426_models.QueryUserHonorsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryUserHonorsResponse:
        """
        @summary 查询员工勋章列表
        
        @param tmp_req: QueryUserHonorsRequest
        @param tmp_header: QueryUserHonorsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryUserHonorsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryUserHonorsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryUserHonorsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.max_results):
            body['maxResults'] = request.max_results
        if not UtilClient.is_unset(request.next_token):
            body['nextToken'] = request.next_token
        if not UtilClient.is_unset(request.org_id):
            body['orgId'] = request.org_id
        if not UtilClient.is_unset(request.user_id):
            body['userId'] = request.user_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryUserHonors',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/aliding/v1/honor/queryUserHonors',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryUserHonorsResponse(),
            self.call_api(params, req, runtime)
        )

    async def query_user_honors_with_options_async(
        self,
        tmp_req: aliding_20230426_models.QueryUserHonorsRequest,
        tmp_header: aliding_20230426_models.QueryUserHonorsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.QueryUserHonorsResponse:
        """
        @summary 查询员工勋章列表
        
        @param tmp_req: QueryUserHonorsRequest
        @param tmp_header: QueryUserHonorsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryUserHonorsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.QueryUserHonorsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.QueryUserHonorsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.max_results):
            body['maxResults'] = request.max_results
        if not UtilClient.is_unset(request.next_token):
            body['nextToken'] = request.next_token
        if not UtilClient.is_unset(request.org_id):
            body['orgId'] = request.org_id
        if not UtilClient.is_unset(request.user_id):
            body['userId'] = request.user_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryUserHonors',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/aliding/v1/honor/queryUserHonors',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.QueryUserHonorsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def query_user_honors(
        self,
        request: aliding_20230426_models.QueryUserHonorsRequest,
    ) -> aliding_20230426_models.QueryUserHonorsResponse:
        """
        @summary 查询员工勋章列表
        
        @param request: QueryUserHonorsRequest
        @return: QueryUserHonorsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryUserHonorsHeaders()
        return self.query_user_honors_with_options(request, headers, runtime)

    async def query_user_honors_async(
        self,
        request: aliding_20230426_models.QueryUserHonorsRequest,
    ) -> aliding_20230426_models.QueryUserHonorsResponse:
        """
        @summary 查询员工勋章列表
        
        @param request: QueryUserHonorsRequest
        @return: QueryUserHonorsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.QueryUserHonorsHeaders()
        return await self.query_user_honors_with_options_async(request, headers, runtime)

    def recall_honor_with_options(
        self,
        tmp_req: aliding_20230426_models.RecallHonorRequest,
        tmp_header: aliding_20230426_models.RecallHonorHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.RecallHonorResponse:
        """
        @summary 收回勋章
        
        @param tmp_req: RecallHonorRequest
        @param tmp_header: RecallHonorHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: RecallHonorResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.RecallHonorShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.RecallHonorShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.honor_id):
            body['honorId'] = request.honor_id
        if not UtilClient.is_unset(request.org_id):
            body['orgId'] = request.org_id
        if not UtilClient.is_unset(request.user_id):
            body['userId'] = request.user_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='RecallHonor',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/aliding/v1/honor/recallHonor',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.RecallHonorResponse(),
            self.call_api(params, req, runtime)
        )

    async def recall_honor_with_options_async(
        self,
        tmp_req: aliding_20230426_models.RecallHonorRequest,
        tmp_header: aliding_20230426_models.RecallHonorHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.RecallHonorResponse:
        """
        @summary 收回勋章
        
        @param tmp_req: RecallHonorRequest
        @param tmp_header: RecallHonorHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: RecallHonorResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.RecallHonorShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.RecallHonorShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.honor_id):
            body['honorId'] = request.honor_id
        if not UtilClient.is_unset(request.org_id):
            body['orgId'] = request.org_id
        if not UtilClient.is_unset(request.user_id):
            body['userId'] = request.user_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='RecallHonor',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/aliding/v1/honor/recallHonor',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.RecallHonorResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def recall_honor(
        self,
        request: aliding_20230426_models.RecallHonorRequest,
    ) -> aliding_20230426_models.RecallHonorResponse:
        """
        @summary 收回勋章
        
        @param request: RecallHonorRequest
        @return: RecallHonorResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.RecallHonorHeaders()
        return self.recall_honor_with_options(request, headers, runtime)

    async def recall_honor_async(
        self,
        request: aliding_20230426_models.RecallHonorRequest,
    ) -> aliding_20230426_models.RecallHonorResponse:
        """
        @summary 收回勋章
        
        @param request: RecallHonorRequest
        @return: RecallHonorResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.RecallHonorHeaders()
        return await self.recall_honor_with_options_async(request, headers, runtime)

    def receiver_list_report_with_options(
        self,
        tmp_req: aliding_20230426_models.ReceiverListReportRequest,
        tmp_header: aliding_20230426_models.ReceiverListReportHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ReceiverListReportResponse:
        """
        @summary 获取日志接收人员列表
        
        @param tmp_req: ReceiverListReportRequest
        @param tmp_header: ReceiverListReportHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ReceiverListReportResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.ReceiverListReportShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.ReceiverListReportShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.offset):
            body['Offset'] = request.offset
        if not UtilClient.is_unset(request.report_id):
            body['ReportId'] = request.report_id
        if not UtilClient.is_unset(request.size):
            body['Size'] = request.size
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ReceiverListReport',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/log/receiverListReport',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ReceiverListReportResponse(),
            self.call_api(params, req, runtime)
        )

    async def receiver_list_report_with_options_async(
        self,
        tmp_req: aliding_20230426_models.ReceiverListReportRequest,
        tmp_header: aliding_20230426_models.ReceiverListReportHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.ReceiverListReportResponse:
        """
        @summary 获取日志接收人员列表
        
        @param tmp_req: ReceiverListReportRequest
        @param tmp_header: ReceiverListReportHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: ReceiverListReportResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.ReceiverListReportShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.ReceiverListReportShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.offset):
            body['Offset'] = request.offset
        if not UtilClient.is_unset(request.report_id):
            body['ReportId'] = request.report_id
        if not UtilClient.is_unset(request.size):
            body['Size'] = request.size
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ReceiverListReport',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/log/receiverListReport',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.ReceiverListReportResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def receiver_list_report(
        self,
        request: aliding_20230426_models.ReceiverListReportRequest,
    ) -> aliding_20230426_models.ReceiverListReportResponse:
        """
        @summary 获取日志接收人员列表
        
        @param request: ReceiverListReportRequest
        @return: ReceiverListReportResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ReceiverListReportHeaders()
        return self.receiver_list_report_with_options(request, headers, runtime)

    async def receiver_list_report_async(
        self,
        request: aliding_20230426_models.ReceiverListReportRequest,
    ) -> aliding_20230426_models.ReceiverListReportResponse:
        """
        @summary 获取日志接收人员列表
        
        @param request: ReceiverListReportRequest
        @return: ReceiverListReportResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.ReceiverListReportHeaders()
        return await self.receiver_list_report_with_options_async(request, headers, runtime)

    def redirect_task_with_options(
        self,
        request: aliding_20230426_models.RedirectTaskRequest,
        tmp_header: aliding_20230426_models.RedirectTaskHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.RedirectTaskResponse:
        """
        @summary 转交任务
        
        @param request: RedirectTaskRequest
        @param tmp_header: RedirectTaskHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: RedirectTaskResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.RedirectTaskShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.by_manager):
            body['ByManager'] = request.by_manager
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.now_action_executor_id):
            body['NowActionExecutorId'] = request.now_action_executor_id
        if not UtilClient.is_unset(request.process_instance_id):
            body['ProcessInstanceId'] = request.process_instance_id
        if not UtilClient.is_unset(request.remark):
            body['Remark'] = request.remark
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        if not UtilClient.is_unset(request.task_id):
            body['TaskId'] = request.task_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='RedirectTask',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/redirectTask',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.RedirectTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def redirect_task_with_options_async(
        self,
        request: aliding_20230426_models.RedirectTaskRequest,
        tmp_header: aliding_20230426_models.RedirectTaskHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.RedirectTaskResponse:
        """
        @summary 转交任务
        
        @param request: RedirectTaskRequest
        @param tmp_header: RedirectTaskHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: RedirectTaskResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.RedirectTaskShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.by_manager):
            body['ByManager'] = request.by_manager
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.now_action_executor_id):
            body['NowActionExecutorId'] = request.now_action_executor_id
        if not UtilClient.is_unset(request.process_instance_id):
            body['ProcessInstanceId'] = request.process_instance_id
        if not UtilClient.is_unset(request.remark):
            body['Remark'] = request.remark
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        if not UtilClient.is_unset(request.task_id):
            body['TaskId'] = request.task_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='RedirectTask',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/redirectTask',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.RedirectTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def redirect_task(
        self,
        request: aliding_20230426_models.RedirectTaskRequest,
    ) -> aliding_20230426_models.RedirectTaskResponse:
        """
        @summary 转交任务
        
        @param request: RedirectTaskRequest
        @return: RedirectTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.RedirectTaskHeaders()
        return self.redirect_task_with_options(request, headers, runtime)

    async def redirect_task_async(
        self,
        request: aliding_20230426_models.RedirectTaskRequest,
    ) -> aliding_20230426_models.RedirectTaskResponse:
        """
        @summary 转交任务
        
        @param request: RedirectTaskRequest
        @return: RedirectTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.RedirectTaskHeaders()
        return await self.redirect_task_with_options_async(request, headers, runtime)

    def remove_attendee_with_options(
        self,
        tmp_req: aliding_20230426_models.RemoveAttendeeRequest,
        tmp_header: aliding_20230426_models.RemoveAttendeeHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.RemoveAttendeeResponse:
        """
        @summary 删除日程参与者
        
        @param tmp_req: RemoveAttendeeRequest
        @param tmp_header: RemoveAttendeeHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: RemoveAttendeeResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.RemoveAttendeeShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.RemoveAttendeeShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.attendees_to_remove):
            request.attendees_to_remove_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.attendees_to_remove, 'AttendeesToRemove', 'json')
        body = {}
        if not UtilClient.is_unset(request.attendees_to_remove_shrink):
            body['AttendeesToRemove'] = request.attendees_to_remove_shrink
        if not UtilClient.is_unset(request.calendar_id):
            body['CalendarId'] = request.calendar_id
        if not UtilClient.is_unset(request.event_id):
            body['EventId'] = request.event_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='RemoveAttendee',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/removeAttendee',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.RemoveAttendeeResponse(),
            self.call_api(params, req, runtime)
        )

    async def remove_attendee_with_options_async(
        self,
        tmp_req: aliding_20230426_models.RemoveAttendeeRequest,
        tmp_header: aliding_20230426_models.RemoveAttendeeHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.RemoveAttendeeResponse:
        """
        @summary 删除日程参与者
        
        @param tmp_req: RemoveAttendeeRequest
        @param tmp_header: RemoveAttendeeHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: RemoveAttendeeResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.RemoveAttendeeShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.RemoveAttendeeShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.attendees_to_remove):
            request.attendees_to_remove_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.attendees_to_remove, 'AttendeesToRemove', 'json')
        body = {}
        if not UtilClient.is_unset(request.attendees_to_remove_shrink):
            body['AttendeesToRemove'] = request.attendees_to_remove_shrink
        if not UtilClient.is_unset(request.calendar_id):
            body['CalendarId'] = request.calendar_id
        if not UtilClient.is_unset(request.event_id):
            body['EventId'] = request.event_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='RemoveAttendee',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/removeAttendee',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.RemoveAttendeeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def remove_attendee(
        self,
        request: aliding_20230426_models.RemoveAttendeeRequest,
    ) -> aliding_20230426_models.RemoveAttendeeResponse:
        """
        @summary 删除日程参与者
        
        @param request: RemoveAttendeeRequest
        @return: RemoveAttendeeResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.RemoveAttendeeHeaders()
        return self.remove_attendee_with_options(request, headers, runtime)

    async def remove_attendee_async(
        self,
        request: aliding_20230426_models.RemoveAttendeeRequest,
    ) -> aliding_20230426_models.RemoveAttendeeResponse:
        """
        @summary 删除日程参与者
        
        @param request: RemoveAttendeeRequest
        @return: RemoveAttendeeResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.RemoveAttendeeHeaders()
        return await self.remove_attendee_with_options_async(request, headers, runtime)

    def remove_meeting_rooms_with_options(
        self,
        tmp_req: aliding_20230426_models.RemoveMeetingRoomsRequest,
        tmp_header: aliding_20230426_models.RemoveMeetingRoomsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.RemoveMeetingRoomsResponse:
        """
        @summary 取消预定会议室
        
        @param tmp_req: RemoveMeetingRoomsRequest
        @param tmp_header: RemoveMeetingRoomsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: RemoveMeetingRoomsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.RemoveMeetingRoomsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.RemoveMeetingRoomsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.meeting_rooms_to_remove):
            request.meeting_rooms_to_remove_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.meeting_rooms_to_remove, 'MeetingRoomsToRemove', 'json')
        body = {}
        if not UtilClient.is_unset(request.calendar_id):
            body['CalendarId'] = request.calendar_id
        if not UtilClient.is_unset(request.event_id):
            body['EventId'] = request.event_id
        if not UtilClient.is_unset(request.meeting_rooms_to_remove_shrink):
            body['MeetingRoomsToRemove'] = request.meeting_rooms_to_remove_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='RemoveMeetingRooms',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/removeMeetingRooms',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.RemoveMeetingRoomsResponse(),
            self.call_api(params, req, runtime)
        )

    async def remove_meeting_rooms_with_options_async(
        self,
        tmp_req: aliding_20230426_models.RemoveMeetingRoomsRequest,
        tmp_header: aliding_20230426_models.RemoveMeetingRoomsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.RemoveMeetingRoomsResponse:
        """
        @summary 取消预定会议室
        
        @param tmp_req: RemoveMeetingRoomsRequest
        @param tmp_header: RemoveMeetingRoomsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: RemoveMeetingRoomsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.RemoveMeetingRoomsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.RemoveMeetingRoomsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.meeting_rooms_to_remove):
            request.meeting_rooms_to_remove_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.meeting_rooms_to_remove, 'MeetingRoomsToRemove', 'json')
        body = {}
        if not UtilClient.is_unset(request.calendar_id):
            body['CalendarId'] = request.calendar_id
        if not UtilClient.is_unset(request.event_id):
            body['EventId'] = request.event_id
        if not UtilClient.is_unset(request.meeting_rooms_to_remove_shrink):
            body['MeetingRoomsToRemove'] = request.meeting_rooms_to_remove_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='RemoveMeetingRooms',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/removeMeetingRooms',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.RemoveMeetingRoomsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def remove_meeting_rooms(
        self,
        request: aliding_20230426_models.RemoveMeetingRoomsRequest,
    ) -> aliding_20230426_models.RemoveMeetingRoomsResponse:
        """
        @summary 取消预定会议室
        
        @param request: RemoveMeetingRoomsRequest
        @return: RemoveMeetingRoomsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.RemoveMeetingRoomsHeaders()
        return self.remove_meeting_rooms_with_options(request, headers, runtime)

    async def remove_meeting_rooms_async(
        self,
        request: aliding_20230426_models.RemoveMeetingRoomsRequest,
    ) -> aliding_20230426_models.RemoveMeetingRoomsResponse:
        """
        @summary 取消预定会议室
        
        @param request: RemoveMeetingRoomsRequest
        @return: RemoveMeetingRoomsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.RemoveMeetingRoomsHeaders()
        return await self.remove_meeting_rooms_with_options_async(request, headers, runtime)

    def respond_event_with_options(
        self,
        tmp_req: aliding_20230426_models.RespondEventRequest,
        tmp_header: aliding_20230426_models.RespondEventHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.RespondEventResponse:
        """
        @summary 设置日程响应邀请状态
        
        @param tmp_req: RespondEventRequest
        @param tmp_header: RespondEventHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: RespondEventResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.RespondEventShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.RespondEventShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.calendar_id):
            body['CalendarId'] = request.calendar_id
        if not UtilClient.is_unset(request.event_id):
            body['EventId'] = request.event_id
        if not UtilClient.is_unset(request.response_status):
            body['ResponseStatus'] = request.response_status
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='RespondEvent',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/respondEvent',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.RespondEventResponse(),
            self.call_api(params, req, runtime)
        )

    async def respond_event_with_options_async(
        self,
        tmp_req: aliding_20230426_models.RespondEventRequest,
        tmp_header: aliding_20230426_models.RespondEventHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.RespondEventResponse:
        """
        @summary 设置日程响应邀请状态
        
        @param tmp_req: RespondEventRequest
        @param tmp_header: RespondEventHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: RespondEventResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.RespondEventShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.RespondEventShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.calendar_id):
            body['CalendarId'] = request.calendar_id
        if not UtilClient.is_unset(request.event_id):
            body['EventId'] = request.event_id
        if not UtilClient.is_unset(request.response_status):
            body['ResponseStatus'] = request.response_status
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='RespondEvent',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/respondEvent',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.RespondEventResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def respond_event(
        self,
        request: aliding_20230426_models.RespondEventRequest,
    ) -> aliding_20230426_models.RespondEventResponse:
        """
        @summary 设置日程响应邀请状态
        
        @param request: RespondEventRequest
        @return: RespondEventResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.RespondEventHeaders()
        return self.respond_event_with_options(request, headers, runtime)

    async def respond_event_async(
        self,
        request: aliding_20230426_models.RespondEventRequest,
    ) -> aliding_20230426_models.RespondEventResponse:
        """
        @summary 设置日程响应邀请状态
        
        @param request: RespondEventRequest
        @return: RespondEventResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.RespondEventHeaders()
        return await self.respond_event_with_options_async(request, headers, runtime)

    def retrieve_run_with_options(
        self,
        request: aliding_20230426_models.RetrieveRunRequest,
        headers: aliding_20230426_models.RetrieveRunHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.RetrieveRunResponse:
        """
        @summary 查询运行
        
        @param request: RetrieveRunRequest
        @param headers: RetrieveRunHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: RetrieveRunResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.assistant_id):
            body['assistantId'] = request.assistant_id
        if not UtilClient.is_unset(request.original_assistant_id):
            body['originalAssistantId'] = request.original_assistant_id
        if not UtilClient.is_unset(request.run_id):
            body['runId'] = request.run_id
        if not UtilClient.is_unset(request.source_id_of_original_assistant_id):
            body['sourceIdOfOriginalAssistantId'] = request.source_id_of_original_assistant_id
        if not UtilClient.is_unset(request.source_type_of_original_assistant_id):
            body['sourceTypeOfOriginalAssistantId'] = request.source_type_of_original_assistant_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_id):
            real_headers['accountId'] = UtilClient.to_jsonstring(headers.account_id)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='RetrieveRun',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/ai/v1/assistant/retrieveRun',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='json',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.RetrieveRunResponse(),
            self.call_api(params, req, runtime)
        )

    async def retrieve_run_with_options_async(
        self,
        request: aliding_20230426_models.RetrieveRunRequest,
        headers: aliding_20230426_models.RetrieveRunHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.RetrieveRunResponse:
        """
        @summary 查询运行
        
        @param request: RetrieveRunRequest
        @param headers: RetrieveRunHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: RetrieveRunResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.assistant_id):
            body['assistantId'] = request.assistant_id
        if not UtilClient.is_unset(request.original_assistant_id):
            body['originalAssistantId'] = request.original_assistant_id
        if not UtilClient.is_unset(request.run_id):
            body['runId'] = request.run_id
        if not UtilClient.is_unset(request.source_id_of_original_assistant_id):
            body['sourceIdOfOriginalAssistantId'] = request.source_id_of_original_assistant_id
        if not UtilClient.is_unset(request.source_type_of_original_assistant_id):
            body['sourceTypeOfOriginalAssistantId'] = request.source_type_of_original_assistant_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_id):
            real_headers['accountId'] = UtilClient.to_jsonstring(headers.account_id)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='RetrieveRun',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/ai/v1/assistant/retrieveRun',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='json',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.RetrieveRunResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def retrieve_run(
        self,
        request: aliding_20230426_models.RetrieveRunRequest,
    ) -> aliding_20230426_models.RetrieveRunResponse:
        """
        @summary 查询运行
        
        @param request: RetrieveRunRequest
        @return: RetrieveRunResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.RetrieveRunHeaders()
        return self.retrieve_run_with_options(request, headers, runtime)

    async def retrieve_run_async(
        self,
        request: aliding_20230426_models.RetrieveRunRequest,
    ) -> aliding_20230426_models.RetrieveRunResponse:
        """
        @summary 查询运行
        
        @param request: RetrieveRunRequest
        @return: RetrieveRunResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.RetrieveRunHeaders()
        return await self.retrieve_run_with_options_async(request, headers, runtime)

    def save_content_with_options(
        self,
        tmp_req: aliding_20230426_models.SaveContentRequest,
        tmp_header: aliding_20230426_models.SaveContentHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SaveContentResponse:
        """
        @summary 保存日志内容
        
        @param tmp_req: SaveContentRequest
        @param tmp_header: SaveContentHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SaveContentResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.SaveContentShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.SaveContentShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.contents):
            request.contents_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.contents, 'Contents', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.contents_shrink):
            body['Contents'] = request.contents_shrink
        if not UtilClient.is_unset(request.dd_from):
            body['DdFrom'] = request.dd_from
        if not UtilClient.is_unset(request.template_id):
            body['TemplateId'] = request.template_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SaveContent',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/log/saveContent',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SaveContentResponse(),
            self.call_api(params, req, runtime)
        )

    async def save_content_with_options_async(
        self,
        tmp_req: aliding_20230426_models.SaveContentRequest,
        tmp_header: aliding_20230426_models.SaveContentHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SaveContentResponse:
        """
        @summary 保存日志内容
        
        @param tmp_req: SaveContentRequest
        @param tmp_header: SaveContentHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SaveContentResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.SaveContentShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.SaveContentShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.contents):
            request.contents_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.contents, 'Contents', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.contents_shrink):
            body['Contents'] = request.contents_shrink
        if not UtilClient.is_unset(request.dd_from):
            body['DdFrom'] = request.dd_from
        if not UtilClient.is_unset(request.template_id):
            body['TemplateId'] = request.template_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SaveContent',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/log/saveContent',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SaveContentResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def save_content(
        self,
        request: aliding_20230426_models.SaveContentRequest,
    ) -> aliding_20230426_models.SaveContentResponse:
        """
        @summary 保存日志内容
        
        @param request: SaveContentRequest
        @return: SaveContentResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SaveContentHeaders()
        return self.save_content_with_options(request, headers, runtime)

    async def save_content_async(
        self,
        request: aliding_20230426_models.SaveContentRequest,
    ) -> aliding_20230426_models.SaveContentResponse:
        """
        @summary 保存日志内容
        
        @param request: SaveContentRequest
        @return: SaveContentResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SaveContentHeaders()
        return await self.save_content_with_options_async(request, headers, runtime)

    def save_form_data_with_options(
        self,
        request: aliding_20230426_models.SaveFormDataRequest,
        tmp_header: aliding_20230426_models.SaveFormDataHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SaveFormDataResponse:
        """
        @summary 保存表单数据
        
        @param request: SaveFormDataRequest
        @param tmp_header: SaveFormDataHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SaveFormDataResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.SaveFormDataShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.form_data_json):
            body['FormDataJson'] = request.form_data_json
        if not UtilClient.is_unset(request.form_uuid):
            body['FormUuid'] = request.form_uuid
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SaveFormData',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/saveFormData',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SaveFormDataResponse(),
            self.call_api(params, req, runtime)
        )

    async def save_form_data_with_options_async(
        self,
        request: aliding_20230426_models.SaveFormDataRequest,
        tmp_header: aliding_20230426_models.SaveFormDataHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SaveFormDataResponse:
        """
        @summary 保存表单数据
        
        @param request: SaveFormDataRequest
        @param tmp_header: SaveFormDataHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SaveFormDataResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.SaveFormDataShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.form_data_json):
            body['FormDataJson'] = request.form_data_json
        if not UtilClient.is_unset(request.form_uuid):
            body['FormUuid'] = request.form_uuid
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SaveFormData',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/saveFormData',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SaveFormDataResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def save_form_data(
        self,
        request: aliding_20230426_models.SaveFormDataRequest,
    ) -> aliding_20230426_models.SaveFormDataResponse:
        """
        @summary 保存表单数据
        
        @param request: SaveFormDataRequest
        @return: SaveFormDataResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SaveFormDataHeaders()
        return self.save_form_data_with_options(request, headers, runtime)

    async def save_form_data_async(
        self,
        request: aliding_20230426_models.SaveFormDataRequest,
    ) -> aliding_20230426_models.SaveFormDataResponse:
        """
        @summary 保存表单数据
        
        @param request: SaveFormDataRequest
        @return: SaveFormDataResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SaveFormDataHeaders()
        return await self.save_form_data_with_options_async(request, headers, runtime)

    def save_form_remark_with_options(
        self,
        request: aliding_20230426_models.SaveFormRemarkRequest,
        tmp_header: aliding_20230426_models.SaveFormRemarkHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SaveFormRemarkResponse:
        """
        @summary 提交表单或流程实例下的评论
        
        @param request: SaveFormRemarkRequest
        @param tmp_header: SaveFormRemarkHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SaveFormRemarkResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.SaveFormRemarkShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.at_user_id):
            body['AtUserId'] = request.at_user_id
        if not UtilClient.is_unset(request.content):
            body['Content'] = request.content
        if not UtilClient.is_unset(request.form_instance_id):
            body['FormInstanceId'] = request.form_instance_id
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.reply_id):
            body['ReplyId'] = request.reply_id
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SaveFormRemark',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/saveFormRemark',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SaveFormRemarkResponse(),
            self.call_api(params, req, runtime)
        )

    async def save_form_remark_with_options_async(
        self,
        request: aliding_20230426_models.SaveFormRemarkRequest,
        tmp_header: aliding_20230426_models.SaveFormRemarkHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SaveFormRemarkResponse:
        """
        @summary 提交表单或流程实例下的评论
        
        @param request: SaveFormRemarkRequest
        @param tmp_header: SaveFormRemarkHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SaveFormRemarkResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.SaveFormRemarkShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.at_user_id):
            body['AtUserId'] = request.at_user_id
        if not UtilClient.is_unset(request.content):
            body['Content'] = request.content
        if not UtilClient.is_unset(request.form_instance_id):
            body['FormInstanceId'] = request.form_instance_id
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.reply_id):
            body['ReplyId'] = request.reply_id
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SaveFormRemark',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/saveFormRemark',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SaveFormRemarkResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def save_form_remark(
        self,
        request: aliding_20230426_models.SaveFormRemarkRequest,
    ) -> aliding_20230426_models.SaveFormRemarkResponse:
        """
        @summary 提交表单或流程实例下的评论
        
        @param request: SaveFormRemarkRequest
        @return: SaveFormRemarkResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SaveFormRemarkHeaders()
        return self.save_form_remark_with_options(request, headers, runtime)

    async def save_form_remark_async(
        self,
        request: aliding_20230426_models.SaveFormRemarkRequest,
    ) -> aliding_20230426_models.SaveFormRemarkResponse:
        """
        @summary 提交表单或流程实例下的评论
        
        @param request: SaveFormRemarkRequest
        @return: SaveFormRemarkResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SaveFormRemarkHeaders()
        return await self.save_form_remark_with_options_async(request, headers, runtime)

    def search_employee_field_values_with_options(
        self,
        request: aliding_20230426_models.SearchEmployeeFieldValuesRequest,
        tmp_header: aliding_20230426_models.SearchEmployeeFieldValuesHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SearchEmployeeFieldValuesResponse:
        """
        @summary 获取员工组件的值
        
        @param request: SearchEmployeeFieldValuesRequest
        @param tmp_header: SearchEmployeeFieldValuesHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SearchEmployeeFieldValuesResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.SearchEmployeeFieldValuesShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.create_from_time_gmt):
            body['CreateFromTimeGMT'] = request.create_from_time_gmt
        if not UtilClient.is_unset(request.create_to_time_gmt):
            body['CreateToTimeGMT'] = request.create_to_time_gmt
        if not UtilClient.is_unset(request.form_uuid):
            body['FormUuid'] = request.form_uuid
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.modified_from_time_gmt):
            body['ModifiedFromTimeGMT'] = request.modified_from_time_gmt
        if not UtilClient.is_unset(request.modified_to_time_gmt):
            body['ModifiedToTimeGMT'] = request.modified_to_time_gmt
        if not UtilClient.is_unset(request.originator_id):
            body['OriginatorId'] = request.originator_id
        if not UtilClient.is_unset(request.search_field_json):
            body['SearchFieldJson'] = request.search_field_json
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        if not UtilClient.is_unset(request.target_field_json):
            body['TargetFieldJson'] = request.target_field_json
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SearchEmployeeFieldValues',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/searchEmployeeFieldValues',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SearchEmployeeFieldValuesResponse(),
            self.call_api(params, req, runtime)
        )

    async def search_employee_field_values_with_options_async(
        self,
        request: aliding_20230426_models.SearchEmployeeFieldValuesRequest,
        tmp_header: aliding_20230426_models.SearchEmployeeFieldValuesHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SearchEmployeeFieldValuesResponse:
        """
        @summary 获取员工组件的值
        
        @param request: SearchEmployeeFieldValuesRequest
        @param tmp_header: SearchEmployeeFieldValuesHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SearchEmployeeFieldValuesResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.SearchEmployeeFieldValuesShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.create_from_time_gmt):
            body['CreateFromTimeGMT'] = request.create_from_time_gmt
        if not UtilClient.is_unset(request.create_to_time_gmt):
            body['CreateToTimeGMT'] = request.create_to_time_gmt
        if not UtilClient.is_unset(request.form_uuid):
            body['FormUuid'] = request.form_uuid
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.modified_from_time_gmt):
            body['ModifiedFromTimeGMT'] = request.modified_from_time_gmt
        if not UtilClient.is_unset(request.modified_to_time_gmt):
            body['ModifiedToTimeGMT'] = request.modified_to_time_gmt
        if not UtilClient.is_unset(request.originator_id):
            body['OriginatorId'] = request.originator_id
        if not UtilClient.is_unset(request.search_field_json):
            body['SearchFieldJson'] = request.search_field_json
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        if not UtilClient.is_unset(request.target_field_json):
            body['TargetFieldJson'] = request.target_field_json
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SearchEmployeeFieldValues',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/searchEmployeeFieldValues',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SearchEmployeeFieldValuesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def search_employee_field_values(
        self,
        request: aliding_20230426_models.SearchEmployeeFieldValuesRequest,
    ) -> aliding_20230426_models.SearchEmployeeFieldValuesResponse:
        """
        @summary 获取员工组件的值
        
        @param request: SearchEmployeeFieldValuesRequest
        @return: SearchEmployeeFieldValuesResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SearchEmployeeFieldValuesHeaders()
        return self.search_employee_field_values_with_options(request, headers, runtime)

    async def search_employee_field_values_async(
        self,
        request: aliding_20230426_models.SearchEmployeeFieldValuesRequest,
    ) -> aliding_20230426_models.SearchEmployeeFieldValuesResponse:
        """
        @summary 获取员工组件的值
        
        @param request: SearchEmployeeFieldValuesRequest
        @return: SearchEmployeeFieldValuesResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SearchEmployeeFieldValuesHeaders()
        return await self.search_employee_field_values_with_options_async(request, headers, runtime)

    def search_form_data_id_list_with_options(
        self,
        request: aliding_20230426_models.SearchFormDataIdListRequest,
        tmp_header: aliding_20230426_models.SearchFormDataIdListHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SearchFormDataIdListResponse:
        """
        @summary 获取多个表单实例ID
        
        @param request: SearchFormDataIdListRequest
        @param tmp_header: SearchFormDataIdListHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SearchFormDataIdListResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.SearchFormDataIdListShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.create_from_time_gmt):
            body['CreateFromTimeGMT'] = request.create_from_time_gmt
        if not UtilClient.is_unset(request.create_to_time_gmt):
            body['CreateToTimeGMT'] = request.create_to_time_gmt
        if not UtilClient.is_unset(request.form_uuid):
            body['FormUuid'] = request.form_uuid
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.modified_from_time_gmt):
            body['ModifiedFromTimeGMT'] = request.modified_from_time_gmt
        if not UtilClient.is_unset(request.modified_to_time_gmt):
            body['ModifiedToTimeGMT'] = request.modified_to_time_gmt
        if not UtilClient.is_unset(request.originator_id):
            body['OriginatorId'] = request.originator_id
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.search_field_json):
            body['SearchFieldJson'] = request.search_field_json
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SearchFormDataIdList',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/searchFormDataIdList',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SearchFormDataIdListResponse(),
            self.call_api(params, req, runtime)
        )

    async def search_form_data_id_list_with_options_async(
        self,
        request: aliding_20230426_models.SearchFormDataIdListRequest,
        tmp_header: aliding_20230426_models.SearchFormDataIdListHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SearchFormDataIdListResponse:
        """
        @summary 获取多个表单实例ID
        
        @param request: SearchFormDataIdListRequest
        @param tmp_header: SearchFormDataIdListHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SearchFormDataIdListResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.SearchFormDataIdListShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.create_from_time_gmt):
            body['CreateFromTimeGMT'] = request.create_from_time_gmt
        if not UtilClient.is_unset(request.create_to_time_gmt):
            body['CreateToTimeGMT'] = request.create_to_time_gmt
        if not UtilClient.is_unset(request.form_uuid):
            body['FormUuid'] = request.form_uuid
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.modified_from_time_gmt):
            body['ModifiedFromTimeGMT'] = request.modified_from_time_gmt
        if not UtilClient.is_unset(request.modified_to_time_gmt):
            body['ModifiedToTimeGMT'] = request.modified_to_time_gmt
        if not UtilClient.is_unset(request.originator_id):
            body['OriginatorId'] = request.originator_id
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.search_field_json):
            body['SearchFieldJson'] = request.search_field_json
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SearchFormDataIdList',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/searchFormDataIdList',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SearchFormDataIdListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def search_form_data_id_list(
        self,
        request: aliding_20230426_models.SearchFormDataIdListRequest,
    ) -> aliding_20230426_models.SearchFormDataIdListResponse:
        """
        @summary 获取多个表单实例ID
        
        @param request: SearchFormDataIdListRequest
        @return: SearchFormDataIdListResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SearchFormDataIdListHeaders()
        return self.search_form_data_id_list_with_options(request, headers, runtime)

    async def search_form_data_id_list_async(
        self,
        request: aliding_20230426_models.SearchFormDataIdListRequest,
    ) -> aliding_20230426_models.SearchFormDataIdListResponse:
        """
        @summary 获取多个表单实例ID
        
        @param request: SearchFormDataIdListRequest
        @return: SearchFormDataIdListResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SearchFormDataIdListHeaders()
        return await self.search_form_data_id_list_with_options_async(request, headers, runtime)

    def search_form_data_second_generation_with_options(
        self,
        request: aliding_20230426_models.SearchFormDataSecondGenerationRequest,
        tmp_header: aliding_20230426_models.SearchFormDataSecondGenerationHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SearchFormDataSecondGenerationResponse:
        """
        @summary 通过高级查询条件获取表单实例数据（包括子表单组件数据）
        
        @param request: SearchFormDataSecondGenerationRequest
        @param tmp_header: SearchFormDataSecondGenerationHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SearchFormDataSecondGenerationResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.SearchFormDataSecondGenerationShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.create_from_time_gmt):
            body['CreateFromTimeGMT'] = request.create_from_time_gmt
        if not UtilClient.is_unset(request.create_to_time_gmt):
            body['CreateToTimeGMT'] = request.create_to_time_gmt
        if not UtilClient.is_unset(request.form_uuid):
            body['FormUuid'] = request.form_uuid
        if not UtilClient.is_unset(request.modified_from_time_gmt):
            body['ModifiedFromTimeGMT'] = request.modified_from_time_gmt
        if not UtilClient.is_unset(request.modified_to_time_gmt):
            body['ModifiedToTimeGMT'] = request.modified_to_time_gmt
        if not UtilClient.is_unset(request.order_config_json):
            body['OrderConfigJson'] = request.order_config_json
        if not UtilClient.is_unset(request.originator_id):
            body['OriginatorId'] = request.originator_id
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.search_condition):
            body['SearchCondition'] = request.search_condition
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SearchFormDataSecondGeneration',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/searchFormDataSecondGeneration',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SearchFormDataSecondGenerationResponse(),
            self.call_api(params, req, runtime)
        )

    async def search_form_data_second_generation_with_options_async(
        self,
        request: aliding_20230426_models.SearchFormDataSecondGenerationRequest,
        tmp_header: aliding_20230426_models.SearchFormDataSecondGenerationHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SearchFormDataSecondGenerationResponse:
        """
        @summary 通过高级查询条件获取表单实例数据（包括子表单组件数据）
        
        @param request: SearchFormDataSecondGenerationRequest
        @param tmp_header: SearchFormDataSecondGenerationHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SearchFormDataSecondGenerationResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.SearchFormDataSecondGenerationShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.create_from_time_gmt):
            body['CreateFromTimeGMT'] = request.create_from_time_gmt
        if not UtilClient.is_unset(request.create_to_time_gmt):
            body['CreateToTimeGMT'] = request.create_to_time_gmt
        if not UtilClient.is_unset(request.form_uuid):
            body['FormUuid'] = request.form_uuid
        if not UtilClient.is_unset(request.modified_from_time_gmt):
            body['ModifiedFromTimeGMT'] = request.modified_from_time_gmt
        if not UtilClient.is_unset(request.modified_to_time_gmt):
            body['ModifiedToTimeGMT'] = request.modified_to_time_gmt
        if not UtilClient.is_unset(request.order_config_json):
            body['OrderConfigJson'] = request.order_config_json
        if not UtilClient.is_unset(request.originator_id):
            body['OriginatorId'] = request.originator_id
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.search_condition):
            body['SearchCondition'] = request.search_condition
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SearchFormDataSecondGeneration',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/searchFormDataSecondGeneration',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SearchFormDataSecondGenerationResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def search_form_data_second_generation(
        self,
        request: aliding_20230426_models.SearchFormDataSecondGenerationRequest,
    ) -> aliding_20230426_models.SearchFormDataSecondGenerationResponse:
        """
        @summary 通过高级查询条件获取表单实例数据（包括子表单组件数据）
        
        @param request: SearchFormDataSecondGenerationRequest
        @return: SearchFormDataSecondGenerationResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SearchFormDataSecondGenerationHeaders()
        return self.search_form_data_second_generation_with_options(request, headers, runtime)

    async def search_form_data_second_generation_async(
        self,
        request: aliding_20230426_models.SearchFormDataSecondGenerationRequest,
    ) -> aliding_20230426_models.SearchFormDataSecondGenerationResponse:
        """
        @summary 通过高级查询条件获取表单实例数据（包括子表单组件数据）
        
        @param request: SearchFormDataSecondGenerationRequest
        @return: SearchFormDataSecondGenerationResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SearchFormDataSecondGenerationHeaders()
        return await self.search_form_data_second_generation_with_options_async(request, headers, runtime)

    def search_form_data_second_generation_no_table_field_with_options(
        self,
        request: aliding_20230426_models.SearchFormDataSecondGenerationNoTableFieldRequest,
        tmp_header: aliding_20230426_models.SearchFormDataSecondGenerationNoTableFieldHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SearchFormDataSecondGenerationNoTableFieldResponse:
        """
        @summary 通过高级查询条件获取表单实例数据（不包括子表单组件数据）
        
        @param request: SearchFormDataSecondGenerationNoTableFieldRequest
        @param tmp_header: SearchFormDataSecondGenerationNoTableFieldHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SearchFormDataSecondGenerationNoTableFieldResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.SearchFormDataSecondGenerationNoTableFieldShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.create_from_time_gmt):
            body['CreateFromTimeGMT'] = request.create_from_time_gmt
        if not UtilClient.is_unset(request.create_to_time_gmt):
            body['CreateToTimeGMT'] = request.create_to_time_gmt
        if not UtilClient.is_unset(request.form_uuid):
            body['FormUuid'] = request.form_uuid
        if not UtilClient.is_unset(request.modified_from_time_gmt):
            body['ModifiedFromTimeGMT'] = request.modified_from_time_gmt
        if not UtilClient.is_unset(request.modified_to_time_gmt):
            body['ModifiedToTimeGMT'] = request.modified_to_time_gmt
        if not UtilClient.is_unset(request.order_config_json):
            body['OrderConfigJson'] = request.order_config_json
        if not UtilClient.is_unset(request.originator_id):
            body['OriginatorId'] = request.originator_id
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.search_condition):
            body['SearchCondition'] = request.search_condition
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SearchFormDataSecondGenerationNoTableField',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/searchFormDataSecondGenerationNoTableField',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SearchFormDataSecondGenerationNoTableFieldResponse(),
            self.call_api(params, req, runtime)
        )

    async def search_form_data_second_generation_no_table_field_with_options_async(
        self,
        request: aliding_20230426_models.SearchFormDataSecondGenerationNoTableFieldRequest,
        tmp_header: aliding_20230426_models.SearchFormDataSecondGenerationNoTableFieldHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SearchFormDataSecondGenerationNoTableFieldResponse:
        """
        @summary 通过高级查询条件获取表单实例数据（不包括子表单组件数据）
        
        @param request: SearchFormDataSecondGenerationNoTableFieldRequest
        @param tmp_header: SearchFormDataSecondGenerationNoTableFieldHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SearchFormDataSecondGenerationNoTableFieldResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.SearchFormDataSecondGenerationNoTableFieldShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.create_from_time_gmt):
            body['CreateFromTimeGMT'] = request.create_from_time_gmt
        if not UtilClient.is_unset(request.create_to_time_gmt):
            body['CreateToTimeGMT'] = request.create_to_time_gmt
        if not UtilClient.is_unset(request.form_uuid):
            body['FormUuid'] = request.form_uuid
        if not UtilClient.is_unset(request.modified_from_time_gmt):
            body['ModifiedFromTimeGMT'] = request.modified_from_time_gmt
        if not UtilClient.is_unset(request.modified_to_time_gmt):
            body['ModifiedToTimeGMT'] = request.modified_to_time_gmt
        if not UtilClient.is_unset(request.order_config_json):
            body['OrderConfigJson'] = request.order_config_json
        if not UtilClient.is_unset(request.originator_id):
            body['OriginatorId'] = request.originator_id
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.search_condition):
            body['SearchCondition'] = request.search_condition
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SearchFormDataSecondGenerationNoTableField',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/searchFormDataSecondGenerationNoTableField',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SearchFormDataSecondGenerationNoTableFieldResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def search_form_data_second_generation_no_table_field(
        self,
        request: aliding_20230426_models.SearchFormDataSecondGenerationNoTableFieldRequest,
    ) -> aliding_20230426_models.SearchFormDataSecondGenerationNoTableFieldResponse:
        """
        @summary 通过高级查询条件获取表单实例数据（不包括子表单组件数据）
        
        @param request: SearchFormDataSecondGenerationNoTableFieldRequest
        @return: SearchFormDataSecondGenerationNoTableFieldResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SearchFormDataSecondGenerationNoTableFieldHeaders()
        return self.search_form_data_second_generation_no_table_field_with_options(request, headers, runtime)

    async def search_form_data_second_generation_no_table_field_async(
        self,
        request: aliding_20230426_models.SearchFormDataSecondGenerationNoTableFieldRequest,
    ) -> aliding_20230426_models.SearchFormDataSecondGenerationNoTableFieldResponse:
        """
        @summary 通过高级查询条件获取表单实例数据（不包括子表单组件数据）
        
        @param request: SearchFormDataSecondGenerationNoTableFieldRequest
        @return: SearchFormDataSecondGenerationNoTableFieldResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SearchFormDataSecondGenerationNoTableFieldHeaders()
        return await self.search_form_data_second_generation_no_table_field_with_options_async(request, headers, runtime)

    def search_form_datas_with_options(
        self,
        request: aliding_20230426_models.SearchFormDatasRequest,
        tmp_header: aliding_20230426_models.SearchFormDatasHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SearchFormDatasResponse:
        """
        @summary 查询表单实例数据
        
        @param request: SearchFormDatasRequest
        @param tmp_header: SearchFormDatasHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SearchFormDatasResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.SearchFormDatasShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.create_from_time_gmt):
            body['CreateFromTimeGMT'] = request.create_from_time_gmt
        if not UtilClient.is_unset(request.create_to_time_gmt):
            body['CreateToTimeGMT'] = request.create_to_time_gmt
        if not UtilClient.is_unset(request.current_page):
            body['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.dynamic_order):
            body['DynamicOrder'] = request.dynamic_order
        if not UtilClient.is_unset(request.form_uuid):
            body['FormUuid'] = request.form_uuid
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.modified_from_time_gmt):
            body['ModifiedFromTimeGMT'] = request.modified_from_time_gmt
        if not UtilClient.is_unset(request.modified_to_time_gmt):
            body['ModifiedToTimeGMT'] = request.modified_to_time_gmt
        if not UtilClient.is_unset(request.originator_id):
            body['OriginatorId'] = request.originator_id
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.search_field_json):
            body['SearchFieldJson'] = request.search_field_json
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SearchFormDatas',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/searchFormDatas',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SearchFormDatasResponse(),
            self.call_api(params, req, runtime)
        )

    async def search_form_datas_with_options_async(
        self,
        request: aliding_20230426_models.SearchFormDatasRequest,
        tmp_header: aliding_20230426_models.SearchFormDatasHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SearchFormDatasResponse:
        """
        @summary 查询表单实例数据
        
        @param request: SearchFormDatasRequest
        @param tmp_header: SearchFormDatasHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SearchFormDatasResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.SearchFormDatasShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.create_from_time_gmt):
            body['CreateFromTimeGMT'] = request.create_from_time_gmt
        if not UtilClient.is_unset(request.create_to_time_gmt):
            body['CreateToTimeGMT'] = request.create_to_time_gmt
        if not UtilClient.is_unset(request.current_page):
            body['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.dynamic_order):
            body['DynamicOrder'] = request.dynamic_order
        if not UtilClient.is_unset(request.form_uuid):
            body['FormUuid'] = request.form_uuid
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.modified_from_time_gmt):
            body['ModifiedFromTimeGMT'] = request.modified_from_time_gmt
        if not UtilClient.is_unset(request.modified_to_time_gmt):
            body['ModifiedToTimeGMT'] = request.modified_to_time_gmt
        if not UtilClient.is_unset(request.originator_id):
            body['OriginatorId'] = request.originator_id
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.search_field_json):
            body['SearchFieldJson'] = request.search_field_json
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SearchFormDatas',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/searchFormDatas',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SearchFormDatasResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def search_form_datas(
        self,
        request: aliding_20230426_models.SearchFormDatasRequest,
    ) -> aliding_20230426_models.SearchFormDatasResponse:
        """
        @summary 查询表单实例数据
        
        @param request: SearchFormDatasRequest
        @return: SearchFormDatasResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SearchFormDatasHeaders()
        return self.search_form_datas_with_options(request, headers, runtime)

    async def search_form_datas_async(
        self,
        request: aliding_20230426_models.SearchFormDatasRequest,
    ) -> aliding_20230426_models.SearchFormDatasResponse:
        """
        @summary 查询表单实例数据
        
        @param request: SearchFormDatasRequest
        @return: SearchFormDatasResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SearchFormDatasHeaders()
        return await self.search_form_datas_with_options_async(request, headers, runtime)

    def search_inner_groups_with_options(
        self,
        request: aliding_20230426_models.SearchInnerGroupsRequest,
        tmp_header: aliding_20230426_models.SearchInnerGroupsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SearchInnerGroupsResponse:
        """
        @summary 根据关键词搜索企业内部群
        
        @param request: SearchInnerGroupsRequest
        @param tmp_header: SearchInnerGroupsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SearchInnerGroupsResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.SearchInnerGroupsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.max_results):
            body['MaxResults'] = request.max_results
        if not UtilClient.is_unset(request.search_key):
            body['SearchKey'] = request.search_key
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SearchInnerGroups',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/im/searchInnerGroups',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SearchInnerGroupsResponse(),
            self.call_api(params, req, runtime)
        )

    async def search_inner_groups_with_options_async(
        self,
        request: aliding_20230426_models.SearchInnerGroupsRequest,
        tmp_header: aliding_20230426_models.SearchInnerGroupsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SearchInnerGroupsResponse:
        """
        @summary 根据关键词搜索企业内部群
        
        @param request: SearchInnerGroupsRequest
        @param tmp_header: SearchInnerGroupsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SearchInnerGroupsResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.SearchInnerGroupsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.max_results):
            body['MaxResults'] = request.max_results
        if not UtilClient.is_unset(request.search_key):
            body['SearchKey'] = request.search_key
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SearchInnerGroups',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/im/searchInnerGroups',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SearchInnerGroupsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def search_inner_groups(
        self,
        request: aliding_20230426_models.SearchInnerGroupsRequest,
    ) -> aliding_20230426_models.SearchInnerGroupsResponse:
        """
        @summary 根据关键词搜索企业内部群
        
        @param request: SearchInnerGroupsRequest
        @return: SearchInnerGroupsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SearchInnerGroupsHeaders()
        return self.search_inner_groups_with_options(request, headers, runtime)

    async def search_inner_groups_async(
        self,
        request: aliding_20230426_models.SearchInnerGroupsRequest,
    ) -> aliding_20230426_models.SearchInnerGroupsResponse:
        """
        @summary 根据关键词搜索企业内部群
        
        @param request: SearchInnerGroupsRequest
        @return: SearchInnerGroupsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SearchInnerGroupsHeaders()
        return await self.search_inner_groups_with_options_async(request, headers, runtime)

    def send_banner_with_options(
        self,
        tmp_req: aliding_20230426_models.SendBannerRequest,
        tmp_header: aliding_20230426_models.SendBannerHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SendBannerResponse:
        """
        @summary 发送钉钉Banner通知
        
        @param tmp_req: SendBannerRequest
        @param tmp_header: SendBannerHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SendBannerResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.SendBannerShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.SendBannerShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.content):
            request.content_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.content, 'Content', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.content_shrink):
            body['Content'] = request.content_shrink
        if not UtilClient.is_unset(request.end_time):
            body['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.start_time):
            body['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SendBanner',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/watt/sendBanner',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SendBannerResponse(),
            self.call_api(params, req, runtime)
        )

    async def send_banner_with_options_async(
        self,
        tmp_req: aliding_20230426_models.SendBannerRequest,
        tmp_header: aliding_20230426_models.SendBannerHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SendBannerResponse:
        """
        @summary 发送钉钉Banner通知
        
        @param tmp_req: SendBannerRequest
        @param tmp_header: SendBannerHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SendBannerResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.SendBannerShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.SendBannerShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.content):
            request.content_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.content, 'Content', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.content_shrink):
            body['Content'] = request.content_shrink
        if not UtilClient.is_unset(request.end_time):
            body['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.start_time):
            body['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SendBanner',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/watt/sendBanner',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SendBannerResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def send_banner(
        self,
        request: aliding_20230426_models.SendBannerRequest,
    ) -> aliding_20230426_models.SendBannerResponse:
        """
        @summary 发送钉钉Banner通知
        
        @param request: SendBannerRequest
        @return: SendBannerResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SendBannerHeaders()
        return self.send_banner_with_options(request, headers, runtime)

    async def send_banner_async(
        self,
        request: aliding_20230426_models.SendBannerRequest,
    ) -> aliding_20230426_models.SendBannerResponse:
        """
        @summary 发送钉钉Banner通知
        
        @param request: SendBannerRequest
        @return: SendBannerResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SendBannerHeaders()
        return await self.send_banner_with_options_async(request, headers, runtime)

    def send_popup_with_options(
        self,
        tmp_req: aliding_20230426_models.SendPopupRequest,
        tmp_header: aliding_20230426_models.SendPopupHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SendPopupResponse:
        """
        @summary 发送钉钉封屏弹窗
        
        @param tmp_req: SendPopupRequest
        @param tmp_header: SendPopupHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SendPopupResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.SendPopupShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.SendPopupShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.content):
            request.content_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.content, 'Content', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.content_shrink):
            body['Content'] = request.content_shrink
        if not UtilClient.is_unset(request.end_time):
            body['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.start_time):
            body['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SendPopup',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/watt/sendPopup',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SendPopupResponse(),
            self.call_api(params, req, runtime)
        )

    async def send_popup_with_options_async(
        self,
        tmp_req: aliding_20230426_models.SendPopupRequest,
        tmp_header: aliding_20230426_models.SendPopupHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SendPopupResponse:
        """
        @summary 发送钉钉封屏弹窗
        
        @param tmp_req: SendPopupRequest
        @param tmp_header: SendPopupHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SendPopupResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.SendPopupShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.SendPopupShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.content):
            request.content_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.content, 'Content', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.content_shrink):
            body['Content'] = request.content_shrink
        if not UtilClient.is_unset(request.end_time):
            body['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.start_time):
            body['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SendPopup',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/watt/sendPopup',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SendPopupResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def send_popup(
        self,
        request: aliding_20230426_models.SendPopupRequest,
    ) -> aliding_20230426_models.SendPopupResponse:
        """
        @summary 发送钉钉封屏弹窗
        
        @param request: SendPopupRequest
        @return: SendPopupResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SendPopupHeaders()
        return self.send_popup_with_options(request, headers, runtime)

    async def send_popup_async(
        self,
        request: aliding_20230426_models.SendPopupRequest,
    ) -> aliding_20230426_models.SendPopupResponse:
        """
        @summary 发送钉钉封屏弹窗
        
        @param request: SendPopupRequest
        @return: SendPopupResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SendPopupHeaders()
        return await self.send_popup_with_options_async(request, headers, runtime)

    def send_search_shade_with_options(
        self,
        tmp_req: aliding_20230426_models.SendSearchShadeRequest,
        tmp_header: aliding_20230426_models.SendSearchShadeHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SendSearchShadeResponse:
        """
        @summary 发送钉钉搜索底纹
        
        @param tmp_req: SendSearchShadeRequest
        @param tmp_header: SendSearchShadeHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SendSearchShadeResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.SendSearchShadeShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.SendSearchShadeShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.content):
            request.content_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.content, 'Content', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.content_shrink):
            body['Content'] = request.content_shrink
        if not UtilClient.is_unset(request.end_time):
            body['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.start_time):
            body['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SendSearchShade',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/watt/sendSearchShade',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SendSearchShadeResponse(),
            self.call_api(params, req, runtime)
        )

    async def send_search_shade_with_options_async(
        self,
        tmp_req: aliding_20230426_models.SendSearchShadeRequest,
        tmp_header: aliding_20230426_models.SendSearchShadeHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SendSearchShadeResponse:
        """
        @summary 发送钉钉搜索底纹
        
        @param tmp_req: SendSearchShadeRequest
        @param tmp_header: SendSearchShadeHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SendSearchShadeResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.SendSearchShadeShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.SendSearchShadeShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.content):
            request.content_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.content, 'Content', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.content_shrink):
            body['Content'] = request.content_shrink
        if not UtilClient.is_unset(request.end_time):
            body['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.start_time):
            body['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SendSearchShade',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/watt/sendSearchShade',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SendSearchShadeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def send_search_shade(
        self,
        request: aliding_20230426_models.SendSearchShadeRequest,
    ) -> aliding_20230426_models.SendSearchShadeResponse:
        """
        @summary 发送钉钉搜索底纹
        
        @param request: SendSearchShadeRequest
        @return: SendSearchShadeResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SendSearchShadeHeaders()
        return self.send_search_shade_with_options(request, headers, runtime)

    async def send_search_shade_async(
        self,
        request: aliding_20230426_models.SendSearchShadeRequest,
    ) -> aliding_20230426_models.SendSearchShadeResponse:
        """
        @summary 发送钉钉搜索底纹
        
        @param request: SendSearchShadeRequest
        @return: SendSearchShadeResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SendSearchShadeHeaders()
        return await self.send_search_shade_with_options_async(request, headers, runtime)

    def set_columns_visibility_with_options(
        self,
        tmp_req: aliding_20230426_models.SetColumnsVisibilityRequest,
        tmp_header: aliding_20230426_models.SetColumnsVisibilityHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SetColumnsVisibilityResponse:
        """
        @summary 指定列隐藏
        
        @param tmp_req: SetColumnsVisibilityRequest
        @param tmp_header: SetColumnsVisibilityHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SetColumnsVisibilityResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.SetColumnsVisibilityShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.SetColumnsVisibilityShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.column):
            body['Column'] = request.column
        if not UtilClient.is_unset(request.column_count):
            body['ColumnCount'] = request.column_count
        if not UtilClient.is_unset(request.sheet_id):
            body['SheetId'] = request.sheet_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.visibility):
            body['Visibility'] = request.visibility
        if not UtilClient.is_unset(request.workbook_id):
            body['WorkbookId'] = request.workbook_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SetColumnsVisibility',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/setColumnsVisibility',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SetColumnsVisibilityResponse(),
            self.call_api(params, req, runtime)
        )

    async def set_columns_visibility_with_options_async(
        self,
        tmp_req: aliding_20230426_models.SetColumnsVisibilityRequest,
        tmp_header: aliding_20230426_models.SetColumnsVisibilityHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SetColumnsVisibilityResponse:
        """
        @summary 指定列隐藏
        
        @param tmp_req: SetColumnsVisibilityRequest
        @param tmp_header: SetColumnsVisibilityHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SetColumnsVisibilityResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.SetColumnsVisibilityShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.SetColumnsVisibilityShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.column):
            body['Column'] = request.column
        if not UtilClient.is_unset(request.column_count):
            body['ColumnCount'] = request.column_count
        if not UtilClient.is_unset(request.sheet_id):
            body['SheetId'] = request.sheet_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.visibility):
            body['Visibility'] = request.visibility
        if not UtilClient.is_unset(request.workbook_id):
            body['WorkbookId'] = request.workbook_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SetColumnsVisibility',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/setColumnsVisibility',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SetColumnsVisibilityResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def set_columns_visibility(
        self,
        request: aliding_20230426_models.SetColumnsVisibilityRequest,
    ) -> aliding_20230426_models.SetColumnsVisibilityResponse:
        """
        @summary 指定列隐藏
        
        @param request: SetColumnsVisibilityRequest
        @return: SetColumnsVisibilityResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SetColumnsVisibilityHeaders()
        return self.set_columns_visibility_with_options(request, headers, runtime)

    async def set_columns_visibility_async(
        self,
        request: aliding_20230426_models.SetColumnsVisibilityRequest,
    ) -> aliding_20230426_models.SetColumnsVisibilityResponse:
        """
        @summary 指定列隐藏
        
        @param request: SetColumnsVisibilityRequest
        @return: SetColumnsVisibilityResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SetColumnsVisibilityHeaders()
        return await self.set_columns_visibility_with_options_async(request, headers, runtime)

    def set_conference_hosts_with_options(
        self,
        tmp_req: aliding_20230426_models.SetConferenceHostsRequest,
        tmp_header: aliding_20230426_models.SetConferenceHostsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SetConferenceHostsResponse:
        """
        @summary 设置联席主持人
        
        @param tmp_req: SetConferenceHostsRequest
        @param tmp_header: SetConferenceHostsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SetConferenceHostsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.SetConferenceHostsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.SetConferenceHostsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        if not UtilClient.is_unset(tmp_req.user_ids):
            request.user_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.user_ids, 'UserIds', 'json')
        body = {}
        if not UtilClient.is_unset(request.operation_type):
            body['OperationType'] = request.operation_type
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.user_ids_shrink):
            body['UserIds'] = request.user_ids_shrink
        if not UtilClient.is_unset(request.conference_id):
            body['conferenceId'] = request.conference_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SetConferenceHosts',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/setConferenceHosts',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SetConferenceHostsResponse(),
            self.call_api(params, req, runtime)
        )

    async def set_conference_hosts_with_options_async(
        self,
        tmp_req: aliding_20230426_models.SetConferenceHostsRequest,
        tmp_header: aliding_20230426_models.SetConferenceHostsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SetConferenceHostsResponse:
        """
        @summary 设置联席主持人
        
        @param tmp_req: SetConferenceHostsRequest
        @param tmp_header: SetConferenceHostsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SetConferenceHostsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.SetConferenceHostsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.SetConferenceHostsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        if not UtilClient.is_unset(tmp_req.user_ids):
            request.user_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.user_ids, 'UserIds', 'json')
        body = {}
        if not UtilClient.is_unset(request.operation_type):
            body['OperationType'] = request.operation_type
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.user_ids_shrink):
            body['UserIds'] = request.user_ids_shrink
        if not UtilClient.is_unset(request.conference_id):
            body['conferenceId'] = request.conference_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SetConferenceHosts',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/setConferenceHosts',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SetConferenceHostsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def set_conference_hosts(
        self,
        request: aliding_20230426_models.SetConferenceHostsRequest,
    ) -> aliding_20230426_models.SetConferenceHostsResponse:
        """
        @summary 设置联席主持人
        
        @param request: SetConferenceHostsRequest
        @return: SetConferenceHostsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SetConferenceHostsHeaders()
        return self.set_conference_hosts_with_options(request, headers, runtime)

    async def set_conference_hosts_async(
        self,
        request: aliding_20230426_models.SetConferenceHostsRequest,
    ) -> aliding_20230426_models.SetConferenceHostsResponse:
        """
        @summary 设置联席主持人
        
        @param request: SetConferenceHostsRequest
        @return: SetConferenceHostsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SetConferenceHostsHeaders()
        return await self.set_conference_hosts_with_options_async(request, headers, runtime)

    def set_rows_visibility_with_options(
        self,
        tmp_req: aliding_20230426_models.SetRowsVisibilityRequest,
        tmp_header: aliding_20230426_models.SetRowsVisibilityHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SetRowsVisibilityResponse:
        """
        @summary 指定行隐藏
        
        @param tmp_req: SetRowsVisibilityRequest
        @param tmp_header: SetRowsVisibilityHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SetRowsVisibilityResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.SetRowsVisibilityShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.SetRowsVisibilityShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.row):
            body['Row'] = request.row
        if not UtilClient.is_unset(request.row_count):
            body['RowCount'] = request.row_count
        if not UtilClient.is_unset(request.sheet_id):
            body['SheetId'] = request.sheet_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.visibility):
            body['Visibility'] = request.visibility
        if not UtilClient.is_unset(request.workbook_id):
            body['WorkbookId'] = request.workbook_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SetRowsVisibility',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/setRowsVisibility',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SetRowsVisibilityResponse(),
            self.call_api(params, req, runtime)
        )

    async def set_rows_visibility_with_options_async(
        self,
        tmp_req: aliding_20230426_models.SetRowsVisibilityRequest,
        tmp_header: aliding_20230426_models.SetRowsVisibilityHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SetRowsVisibilityResponse:
        """
        @summary 指定行隐藏
        
        @param tmp_req: SetRowsVisibilityRequest
        @param tmp_header: SetRowsVisibilityHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SetRowsVisibilityResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.SetRowsVisibilityShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.SetRowsVisibilityShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.row):
            body['Row'] = request.row
        if not UtilClient.is_unset(request.row_count):
            body['RowCount'] = request.row_count
        if not UtilClient.is_unset(request.sheet_id):
            body['SheetId'] = request.sheet_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.visibility):
            body['Visibility'] = request.visibility
        if not UtilClient.is_unset(request.workbook_id):
            body['WorkbookId'] = request.workbook_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SetRowsVisibility',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/setRowsVisibility',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SetRowsVisibilityResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def set_rows_visibility(
        self,
        request: aliding_20230426_models.SetRowsVisibilityRequest,
    ) -> aliding_20230426_models.SetRowsVisibilityResponse:
        """
        @summary 指定行隐藏
        
        @param request: SetRowsVisibilityRequest
        @return: SetRowsVisibilityResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SetRowsVisibilityHeaders()
        return self.set_rows_visibility_with_options(request, headers, runtime)

    async def set_rows_visibility_async(
        self,
        request: aliding_20230426_models.SetRowsVisibilityRequest,
    ) -> aliding_20230426_models.SetRowsVisibilityResponse:
        """
        @summary 指定行隐藏
        
        @param request: SetRowsVisibilityRequest
        @return: SetRowsVisibilityResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SetRowsVisibilityHeaders()
        return await self.set_rows_visibility_with_options_async(request, headers, runtime)

    def simple_list_report_with_options(
        self,
        tmp_req: aliding_20230426_models.SimpleListReportRequest,
        tmp_header: aliding_20230426_models.SimpleListReportHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SimpleListReportResponse:
        """
        @summary 获取用户发送日志的概要信息
        
        @param tmp_req: SimpleListReportRequest
        @param tmp_header: SimpleListReportHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SimpleListReportResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.SimpleListReportShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.SimpleListReportShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.cursor):
            body['Cursor'] = request.cursor
        if not UtilClient.is_unset(request.end_time):
            body['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.size):
            body['Size'] = request.size
        if not UtilClient.is_unset(request.start_time):
            body['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.template_name):
            body['TemplateName'] = request.template_name
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SimpleListReport',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/log/simpleListReport',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SimpleListReportResponse(),
            self.call_api(params, req, runtime)
        )

    async def simple_list_report_with_options_async(
        self,
        tmp_req: aliding_20230426_models.SimpleListReportRequest,
        tmp_header: aliding_20230426_models.SimpleListReportHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SimpleListReportResponse:
        """
        @summary 获取用户发送日志的概要信息
        
        @param tmp_req: SimpleListReportRequest
        @param tmp_header: SimpleListReportHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SimpleListReportResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.SimpleListReportShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.SimpleListReportShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.cursor):
            body['Cursor'] = request.cursor
        if not UtilClient.is_unset(request.end_time):
            body['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.size):
            body['Size'] = request.size
        if not UtilClient.is_unset(request.start_time):
            body['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.template_name):
            body['TemplateName'] = request.template_name
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SimpleListReport',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/log/simpleListReport',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SimpleListReportResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def simple_list_report(
        self,
        request: aliding_20230426_models.SimpleListReportRequest,
    ) -> aliding_20230426_models.SimpleListReportResponse:
        """
        @summary 获取用户发送日志的概要信息
        
        @param request: SimpleListReportRequest
        @return: SimpleListReportResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SimpleListReportHeaders()
        return self.simple_list_report_with_options(request, headers, runtime)

    async def simple_list_report_async(
        self,
        request: aliding_20230426_models.SimpleListReportRequest,
    ) -> aliding_20230426_models.SimpleListReportResponse:
        """
        @summary 获取用户发送日志的概要信息
        
        @param request: SimpleListReportRequest
        @return: SimpleListReportResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SimpleListReportHeaders()
        return await self.simple_list_report_with_options_async(request, headers, runtime)

    def start_cloud_record_with_options(
        self,
        tmp_req: aliding_20230426_models.StartCloudRecordRequest,
        tmp_header: aliding_20230426_models.StartCloudRecordHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.StartCloudRecordResponse:
        """
        @summary 开启视频会议云录制
        
        @param tmp_req: StartCloudRecordRequest
        @param tmp_header: StartCloudRecordHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: StartCloudRecordResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.StartCloudRecordShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.StartCloudRecordShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.mode):
            body['Mode'] = request.mode
        if not UtilClient.is_unset(request.small_window_position):
            body['SmallWindowPosition'] = request.small_window_position
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.conference_id):
            body['conferenceId'] = request.conference_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='StartCloudRecord',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/startCloudRecord',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.StartCloudRecordResponse(),
            self.call_api(params, req, runtime)
        )

    async def start_cloud_record_with_options_async(
        self,
        tmp_req: aliding_20230426_models.StartCloudRecordRequest,
        tmp_header: aliding_20230426_models.StartCloudRecordHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.StartCloudRecordResponse:
        """
        @summary 开启视频会议云录制
        
        @param tmp_req: StartCloudRecordRequest
        @param tmp_header: StartCloudRecordHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: StartCloudRecordResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.StartCloudRecordShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.StartCloudRecordShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.mode):
            body['Mode'] = request.mode
        if not UtilClient.is_unset(request.small_window_position):
            body['SmallWindowPosition'] = request.small_window_position
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.conference_id):
            body['conferenceId'] = request.conference_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='StartCloudRecord',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/startCloudRecord',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.StartCloudRecordResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def start_cloud_record(
        self,
        request: aliding_20230426_models.StartCloudRecordRequest,
    ) -> aliding_20230426_models.StartCloudRecordResponse:
        """
        @summary 开启视频会议云录制
        
        @param request: StartCloudRecordRequest
        @return: StartCloudRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.StartCloudRecordHeaders()
        return self.start_cloud_record_with_options(request, headers, runtime)

    async def start_cloud_record_async(
        self,
        request: aliding_20230426_models.StartCloudRecordRequest,
    ) -> aliding_20230426_models.StartCloudRecordResponse:
        """
        @summary 开启视频会议云录制
        
        @param request: StartCloudRecordRequest
        @return: StartCloudRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.StartCloudRecordHeaders()
        return await self.start_cloud_record_with_options_async(request, headers, runtime)

    def start_instance_with_options(
        self,
        request: aliding_20230426_models.StartInstanceRequest,
        tmp_header: aliding_20230426_models.StartInstanceHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.StartInstanceResponse:
        """
        @summary 发起宜搭审批流程
        
        @param request: StartInstanceRequest
        @param tmp_header: StartInstanceHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: StartInstanceResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.StartInstanceShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.department_id):
            body['DepartmentId'] = request.department_id
        if not UtilClient.is_unset(request.form_data_json):
            body['FormDataJson'] = request.form_data_json
        if not UtilClient.is_unset(request.form_uuid):
            body['FormUuid'] = request.form_uuid
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.process_code):
            body['ProcessCode'] = request.process_code
        if not UtilClient.is_unset(request.process_data):
            body['ProcessData'] = request.process_data
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='StartInstance',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/startInstance',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.StartInstanceResponse(),
            self.call_api(params, req, runtime)
        )

    async def start_instance_with_options_async(
        self,
        request: aliding_20230426_models.StartInstanceRequest,
        tmp_header: aliding_20230426_models.StartInstanceHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.StartInstanceResponse:
        """
        @summary 发起宜搭审批流程
        
        @param request: StartInstanceRequest
        @param tmp_header: StartInstanceHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: StartInstanceResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.StartInstanceShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.department_id):
            body['DepartmentId'] = request.department_id
        if not UtilClient.is_unset(request.form_data_json):
            body['FormDataJson'] = request.form_data_json
        if not UtilClient.is_unset(request.form_uuid):
            body['FormUuid'] = request.form_uuid
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.process_code):
            body['ProcessCode'] = request.process_code
        if not UtilClient.is_unset(request.process_data):
            body['ProcessData'] = request.process_data
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='StartInstance',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/startInstance',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.StartInstanceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def start_instance(
        self,
        request: aliding_20230426_models.StartInstanceRequest,
    ) -> aliding_20230426_models.StartInstanceResponse:
        """
        @summary 发起宜搭审批流程
        
        @param request: StartInstanceRequest
        @return: StartInstanceResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.StartInstanceHeaders()
        return self.start_instance_with_options(request, headers, runtime)

    async def start_instance_async(
        self,
        request: aliding_20230426_models.StartInstanceRequest,
    ) -> aliding_20230426_models.StartInstanceResponse:
        """
        @summary 发起宜搭审批流程
        
        @param request: StartInstanceRequest
        @return: StartInstanceResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.StartInstanceHeaders()
        return await self.start_instance_with_options_async(request, headers, runtime)

    def start_minutes_with_options(
        self,
        tmp_req: aliding_20230426_models.StartMinutesRequest,
        tmp_header: aliding_20230426_models.StartMinutesHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.StartMinutesResponse:
        """
        @summary 开启闪记
        
        @param tmp_req: StartMinutesRequest
        @param tmp_header: StartMinutesHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: StartMinutesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.StartMinutesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.StartMinutesShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.conference_id):
            body['conferenceId'] = request.conference_id
        if not UtilClient.is_unset(request.owner_user_id):
            body['ownerUserId'] = request.owner_user_id
        if not UtilClient.is_unset(request.record_audio):
            body['recordAudio'] = request.record_audio
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='StartMinutes',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/startMinutes',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.StartMinutesResponse(),
            self.call_api(params, req, runtime)
        )

    async def start_minutes_with_options_async(
        self,
        tmp_req: aliding_20230426_models.StartMinutesRequest,
        tmp_header: aliding_20230426_models.StartMinutesHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.StartMinutesResponse:
        """
        @summary 开启闪记
        
        @param tmp_req: StartMinutesRequest
        @param tmp_header: StartMinutesHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: StartMinutesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.StartMinutesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.StartMinutesShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.conference_id):
            body['conferenceId'] = request.conference_id
        if not UtilClient.is_unset(request.owner_user_id):
            body['ownerUserId'] = request.owner_user_id
        if not UtilClient.is_unset(request.record_audio):
            body['recordAudio'] = request.record_audio
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='StartMinutes',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/startMinutes',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.StartMinutesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def start_minutes(
        self,
        request: aliding_20230426_models.StartMinutesRequest,
    ) -> aliding_20230426_models.StartMinutesResponse:
        """
        @summary 开启闪记
        
        @param request: StartMinutesRequest
        @return: StartMinutesResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.StartMinutesHeaders()
        return self.start_minutes_with_options(request, headers, runtime)

    async def start_minutes_async(
        self,
        request: aliding_20230426_models.StartMinutesRequest,
    ) -> aliding_20230426_models.StartMinutesResponse:
        """
        @summary 开启闪记
        
        @param request: StartMinutesRequest
        @return: StartMinutesResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.StartMinutesHeaders()
        return await self.start_minutes_with_options_async(request, headers, runtime)

    def statistics_list_by_type_report_with_options(
        self,
        tmp_req: aliding_20230426_models.StatisticsListByTypeReportRequest,
        tmp_header: aliding_20230426_models.StatisticsListByTypeReportHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.StatisticsListByTypeReportResponse:
        """
        @summary 获取日志相关人员列表
        
        @param tmp_req: StatisticsListByTypeReportRequest
        @param tmp_header: StatisticsListByTypeReportHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: StatisticsListByTypeReportResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.StatisticsListByTypeReportShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.StatisticsListByTypeReportShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.offset):
            body['Offset'] = request.offset
        if not UtilClient.is_unset(request.report_id):
            body['ReportId'] = request.report_id
        if not UtilClient.is_unset(request.size):
            body['Size'] = request.size
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.type):
            body['Type'] = request.type
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='StatisticsListByTypeReport',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/log/statisticsListByTypeReport',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.StatisticsListByTypeReportResponse(),
            self.call_api(params, req, runtime)
        )

    async def statistics_list_by_type_report_with_options_async(
        self,
        tmp_req: aliding_20230426_models.StatisticsListByTypeReportRequest,
        tmp_header: aliding_20230426_models.StatisticsListByTypeReportHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.StatisticsListByTypeReportResponse:
        """
        @summary 获取日志相关人员列表
        
        @param tmp_req: StatisticsListByTypeReportRequest
        @param tmp_header: StatisticsListByTypeReportHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: StatisticsListByTypeReportResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.StatisticsListByTypeReportShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.StatisticsListByTypeReportShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.offset):
            body['Offset'] = request.offset
        if not UtilClient.is_unset(request.report_id):
            body['ReportId'] = request.report_id
        if not UtilClient.is_unset(request.size):
            body['Size'] = request.size
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.type):
            body['Type'] = request.type
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='StatisticsListByTypeReport',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/log/statisticsListByTypeReport',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.StatisticsListByTypeReportResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def statistics_list_by_type_report(
        self,
        request: aliding_20230426_models.StatisticsListByTypeReportRequest,
    ) -> aliding_20230426_models.StatisticsListByTypeReportResponse:
        """
        @summary 获取日志相关人员列表
        
        @param request: StatisticsListByTypeReportRequest
        @return: StatisticsListByTypeReportResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.StatisticsListByTypeReportHeaders()
        return self.statistics_list_by_type_report_with_options(request, headers, runtime)

    async def statistics_list_by_type_report_async(
        self,
        request: aliding_20230426_models.StatisticsListByTypeReportRequest,
    ) -> aliding_20230426_models.StatisticsListByTypeReportResponse:
        """
        @summary 获取日志相关人员列表
        
        @param request: StatisticsListByTypeReportRequest
        @return: StatisticsListByTypeReportResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.StatisticsListByTypeReportHeaders()
        return await self.statistics_list_by_type_report_with_options_async(request, headers, runtime)

    def statistics_report_with_options(
        self,
        tmp_req: aliding_20230426_models.StatisticsReportRequest,
        tmp_header: aliding_20230426_models.StatisticsReportHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.StatisticsReportResponse:
        """
        @summary 获取日志统计数据
        
        @param tmp_req: StatisticsReportRequest
        @param tmp_header: StatisticsReportHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: StatisticsReportResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.StatisticsReportShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.StatisticsReportShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.report_id):
            body['ReportId'] = request.report_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='StatisticsReport',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/log/statisticsReport',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.StatisticsReportResponse(),
            self.call_api(params, req, runtime)
        )

    async def statistics_report_with_options_async(
        self,
        tmp_req: aliding_20230426_models.StatisticsReportRequest,
        tmp_header: aliding_20230426_models.StatisticsReportHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.StatisticsReportResponse:
        """
        @summary 获取日志统计数据
        
        @param tmp_req: StatisticsReportRequest
        @param tmp_header: StatisticsReportHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: StatisticsReportResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.StatisticsReportShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.StatisticsReportShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.report_id):
            body['ReportId'] = request.report_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='StatisticsReport',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/log/statisticsReport',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.StatisticsReportResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def statistics_report(
        self,
        request: aliding_20230426_models.StatisticsReportRequest,
    ) -> aliding_20230426_models.StatisticsReportResponse:
        """
        @summary 获取日志统计数据
        
        @param request: StatisticsReportRequest
        @return: StatisticsReportResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.StatisticsReportHeaders()
        return self.statistics_report_with_options(request, headers, runtime)

    async def statistics_report_async(
        self,
        request: aliding_20230426_models.StatisticsReportRequest,
    ) -> aliding_20230426_models.StatisticsReportResponse:
        """
        @summary 获取日志统计数据
        
        @param request: StatisticsReportRequest
        @return: StatisticsReportResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.StatisticsReportHeaders()
        return await self.statistics_report_with_options_async(request, headers, runtime)

    def stop_cloud_record_with_options(
        self,
        tmp_req: aliding_20230426_models.StopCloudRecordRequest,
        tmp_header: aliding_20230426_models.StopCloudRecordHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.StopCloudRecordResponse:
        """
        @summary 停止视频会议云录制
        
        @param tmp_req: StopCloudRecordRequest
        @param tmp_header: StopCloudRecordHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: StopCloudRecordResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.StopCloudRecordShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.StopCloudRecordShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.conference_id):
            body['conferenceId'] = request.conference_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='StopCloudRecord',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/stopCloudRecord',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.StopCloudRecordResponse(),
            self.call_api(params, req, runtime)
        )

    async def stop_cloud_record_with_options_async(
        self,
        tmp_req: aliding_20230426_models.StopCloudRecordRequest,
        tmp_header: aliding_20230426_models.StopCloudRecordHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.StopCloudRecordResponse:
        """
        @summary 停止视频会议云录制
        
        @param tmp_req: StopCloudRecordRequest
        @param tmp_header: StopCloudRecordHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: StopCloudRecordResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.StopCloudRecordShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.StopCloudRecordShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.conference_id):
            body['conferenceId'] = request.conference_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='StopCloudRecord',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/stopCloudRecord',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.StopCloudRecordResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def stop_cloud_record(
        self,
        request: aliding_20230426_models.StopCloudRecordRequest,
    ) -> aliding_20230426_models.StopCloudRecordResponse:
        """
        @summary 停止视频会议云录制
        
        @param request: StopCloudRecordRequest
        @return: StopCloudRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.StopCloudRecordHeaders()
        return self.stop_cloud_record_with_options(request, headers, runtime)

    async def stop_cloud_record_async(
        self,
        request: aliding_20230426_models.StopCloudRecordRequest,
    ) -> aliding_20230426_models.StopCloudRecordResponse:
        """
        @summary 停止视频会议云录制
        
        @param request: StopCloudRecordRequest
        @return: StopCloudRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.StopCloudRecordHeaders()
        return await self.stop_cloud_record_with_options_async(request, headers, runtime)

    def stop_minutes_with_options(
        self,
        tmp_req: aliding_20230426_models.StopMinutesRequest,
        tmp_header: aliding_20230426_models.StopMinutesHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.StopMinutesResponse:
        """
        @summary 暂停闪记
        
        @param tmp_req: StopMinutesRequest
        @param tmp_header: StopMinutesHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: StopMinutesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.StopMinutesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.StopMinutesShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.conference_id):
            body['conferenceId'] = request.conference_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='StopMinutes',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/stopMinutes',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.StopMinutesResponse(),
            self.call_api(params, req, runtime)
        )

    async def stop_minutes_with_options_async(
        self,
        tmp_req: aliding_20230426_models.StopMinutesRequest,
        tmp_header: aliding_20230426_models.StopMinutesHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.StopMinutesResponse:
        """
        @summary 暂停闪记
        
        @param tmp_req: StopMinutesRequest
        @param tmp_header: StopMinutesHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: StopMinutesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.StopMinutesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.StopMinutesShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.conference_id):
            body['conferenceId'] = request.conference_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='StopMinutes',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/stopMinutes',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.StopMinutesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def stop_minutes(
        self,
        request: aliding_20230426_models.StopMinutesRequest,
    ) -> aliding_20230426_models.StopMinutesResponse:
        """
        @summary 暂停闪记
        
        @param request: StopMinutesRequest
        @return: StopMinutesResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.StopMinutesHeaders()
        return self.stop_minutes_with_options(request, headers, runtime)

    async def stop_minutes_async(
        self,
        request: aliding_20230426_models.StopMinutesRequest,
    ) -> aliding_20230426_models.StopMinutesResponse:
        """
        @summary 暂停闪记
        
        @param request: StopMinutesRequest
        @return: StopMinutesResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.StopMinutesHeaders()
        return await self.stop_minutes_with_options_async(request, headers, runtime)

    def subscribe_calendar_with_options(
        self,
        request: aliding_20230426_models.SubscribeCalendarRequest,
        tmp_header: aliding_20230426_models.SubscribeCalendarHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SubscribeCalendarResponse:
        """
        @summary 订阅公共日历
        
        @param request: SubscribeCalendarRequest
        @param tmp_header: SubscribeCalendarHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SubscribeCalendarResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.SubscribeCalendarShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.calendar_id):
            body['CalendarId'] = request.calendar_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SubscribeCalendar',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/subscribeCalendar',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SubscribeCalendarResponse(),
            self.call_api(params, req, runtime)
        )

    async def subscribe_calendar_with_options_async(
        self,
        request: aliding_20230426_models.SubscribeCalendarRequest,
        tmp_header: aliding_20230426_models.SubscribeCalendarHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SubscribeCalendarResponse:
        """
        @summary 订阅公共日历
        
        @param request: SubscribeCalendarRequest
        @param tmp_header: SubscribeCalendarHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SubscribeCalendarResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.SubscribeCalendarShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.calendar_id):
            body['CalendarId'] = request.calendar_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SubscribeCalendar',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/subscribeCalendar',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SubscribeCalendarResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def subscribe_calendar(
        self,
        request: aliding_20230426_models.SubscribeCalendarRequest,
    ) -> aliding_20230426_models.SubscribeCalendarResponse:
        """
        @summary 订阅公共日历
        
        @param request: SubscribeCalendarRequest
        @return: SubscribeCalendarResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SubscribeCalendarHeaders()
        return self.subscribe_calendar_with_options(request, headers, runtime)

    async def subscribe_calendar_async(
        self,
        request: aliding_20230426_models.SubscribeCalendarRequest,
    ) -> aliding_20230426_models.SubscribeCalendarResponse:
        """
        @summary 订阅公共日历
        
        @param request: SubscribeCalendarRequest
        @return: SubscribeCalendarResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SubscribeCalendarHeaders()
        return await self.subscribe_calendar_with_options_async(request, headers, runtime)

    def subscribe_event_with_options(
        self,
        tmp_req: aliding_20230426_models.SubscribeEventRequest,
        tmp_header: aliding_20230426_models.SubscribeEventHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SubscribeEventResponse:
        """
        @summary 订阅文件变更事件
        
        @param tmp_req: SubscribeEventRequest
        @param tmp_header: SubscribeEventHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SubscribeEventResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.SubscribeEventShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.SubscribeEventShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.scope):
            body['Scope'] = request.scope
        if not UtilClient.is_unset(request.scope_id):
            body['ScopeId'] = request.scope_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SubscribeEvent',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/subscribeEvent',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SubscribeEventResponse(),
            self.call_api(params, req, runtime)
        )

    async def subscribe_event_with_options_async(
        self,
        tmp_req: aliding_20230426_models.SubscribeEventRequest,
        tmp_header: aliding_20230426_models.SubscribeEventHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SubscribeEventResponse:
        """
        @summary 订阅文件变更事件
        
        @param tmp_req: SubscribeEventRequest
        @param tmp_header: SubscribeEventHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SubscribeEventResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.SubscribeEventShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.SubscribeEventShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.scope):
            body['Scope'] = request.scope
        if not UtilClient.is_unset(request.scope_id):
            body['ScopeId'] = request.scope_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SubscribeEvent',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/subscribeEvent',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SubscribeEventResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def subscribe_event(
        self,
        request: aliding_20230426_models.SubscribeEventRequest,
    ) -> aliding_20230426_models.SubscribeEventResponse:
        """
        @summary 订阅文件变更事件
        
        @param request: SubscribeEventRequest
        @return: SubscribeEventResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SubscribeEventHeaders()
        return self.subscribe_event_with_options(request, headers, runtime)

    async def subscribe_event_async(
        self,
        request: aliding_20230426_models.SubscribeEventRequest,
    ) -> aliding_20230426_models.SubscribeEventResponse:
        """
        @summary 订阅文件变更事件
        
        @param request: SubscribeEventRequest
        @return: SubscribeEventResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SubscribeEventHeaders()
        return await self.subscribe_event_with_options_async(request, headers, runtime)

    def switch_main_org_with_options(
        self,
        tmp_req: aliding_20230426_models.SwitchMainOrgRequest,
        tmp_header: aliding_20230426_models.SwitchMainOrgHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SwitchMainOrgResponse:
        """
        @param tmp_req: SwitchMainOrgRequest
        @param tmp_header: SwitchMainOrgHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SwitchMainOrgResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.SwitchMainOrgShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.SwitchMainOrgShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.target_org_id):
            body['TargetOrgId'] = request.target_org_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SwitchMainOrg',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/aliding/v1/user/switchMainOrg',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SwitchMainOrgResponse(),
            self.call_api(params, req, runtime)
        )

    async def switch_main_org_with_options_async(
        self,
        tmp_req: aliding_20230426_models.SwitchMainOrgRequest,
        tmp_header: aliding_20230426_models.SwitchMainOrgHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SwitchMainOrgResponse:
        """
        @param tmp_req: SwitchMainOrgRequest
        @param tmp_header: SwitchMainOrgHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SwitchMainOrgResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.SwitchMainOrgShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.SwitchMainOrgShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.target_org_id):
            body['TargetOrgId'] = request.target_org_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SwitchMainOrg',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/aliding/v1/user/switchMainOrg',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SwitchMainOrgResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def switch_main_org(
        self,
        request: aliding_20230426_models.SwitchMainOrgRequest,
    ) -> aliding_20230426_models.SwitchMainOrgResponse:
        """
        @param request: SwitchMainOrgRequest
        @return: SwitchMainOrgResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SwitchMainOrgHeaders()
        return self.switch_main_org_with_options(request, headers, runtime)

    async def switch_main_org_async(
        self,
        request: aliding_20230426_models.SwitchMainOrgRequest,
    ) -> aliding_20230426_models.SwitchMainOrgResponse:
        """
        @param request: SwitchMainOrgRequest
        @return: SwitchMainOrgResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SwitchMainOrgHeaders()
        return await self.switch_main_org_with_options_async(request, headers, runtime)

    def sync_ding_type_with_options(
        self,
        tmp_req: aliding_20230426_models.SyncDingTypeRequest,
        tmp_header: aliding_20230426_models.SyncDingTypeHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SyncDingTypeResponse:
        """
        @summary 同步钉钉账号类型
        
        @param tmp_req: SyncDingTypeRequest
        @param tmp_header: SyncDingTypeHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SyncDingTypeResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.SyncDingTypeShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.SyncDingTypeShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.ding_type):
            body['DingType'] = request.ding_type
        if not UtilClient.is_unset(request.is_dimission):
            body['IsDimission'] = request.is_dimission
        if not UtilClient.is_unset(request.source):
            body['Source'] = request.source
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.work_no):
            body['WorkNo'] = request.work_no
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SyncDingType',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/aliding/v1/indepding/syncDingType',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SyncDingTypeResponse(),
            self.call_api(params, req, runtime)
        )

    async def sync_ding_type_with_options_async(
        self,
        tmp_req: aliding_20230426_models.SyncDingTypeRequest,
        tmp_header: aliding_20230426_models.SyncDingTypeHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.SyncDingTypeResponse:
        """
        @summary 同步钉钉账号类型
        
        @param tmp_req: SyncDingTypeRequest
        @param tmp_header: SyncDingTypeHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: SyncDingTypeResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.SyncDingTypeShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.SyncDingTypeShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.ding_type):
            body['DingType'] = request.ding_type
        if not UtilClient.is_unset(request.is_dimission):
            body['IsDimission'] = request.is_dimission
        if not UtilClient.is_unset(request.source):
            body['Source'] = request.source
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.work_no):
            body['WorkNo'] = request.work_no
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SyncDingType',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/aliding/v1/indepding/syncDingType',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.SyncDingTypeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def sync_ding_type(
        self,
        request: aliding_20230426_models.SyncDingTypeRequest,
    ) -> aliding_20230426_models.SyncDingTypeResponse:
        """
        @summary 同步钉钉账号类型
        
        @param request: SyncDingTypeRequest
        @return: SyncDingTypeResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SyncDingTypeHeaders()
        return self.sync_ding_type_with_options(request, headers, runtime)

    async def sync_ding_type_async(
        self,
        request: aliding_20230426_models.SyncDingTypeRequest,
    ) -> aliding_20230426_models.SyncDingTypeResponse:
        """
        @summary 同步钉钉账号类型
        
        @param request: SyncDingTypeRequest
        @return: SyncDingTypeResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.SyncDingTypeHeaders()
        return await self.sync_ding_type_with_options_async(request, headers, runtime)

    def terminate_instance_with_options(
        self,
        request: aliding_20230426_models.TerminateInstanceRequest,
        tmp_header: aliding_20230426_models.TerminateInstanceHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.TerminateInstanceResponse:
        """
        @summary 终止流程实例
        
        @param request: TerminateInstanceRequest
        @param tmp_header: TerminateInstanceHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: TerminateInstanceResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.TerminateInstanceShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.process_instance_id):
            body['ProcessInstanceId'] = request.process_instance_id
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='TerminateInstance',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/terminateInstance',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.TerminateInstanceResponse(),
            self.call_api(params, req, runtime)
        )

    async def terminate_instance_with_options_async(
        self,
        request: aliding_20230426_models.TerminateInstanceRequest,
        tmp_header: aliding_20230426_models.TerminateInstanceHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.TerminateInstanceResponse:
        """
        @summary 终止流程实例
        
        @param request: TerminateInstanceRequest
        @param tmp_header: TerminateInstanceHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: TerminateInstanceResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.TerminateInstanceShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.process_instance_id):
            body['ProcessInstanceId'] = request.process_instance_id
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='TerminateInstance',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/terminateInstance',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.TerminateInstanceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def terminate_instance(
        self,
        request: aliding_20230426_models.TerminateInstanceRequest,
    ) -> aliding_20230426_models.TerminateInstanceResponse:
        """
        @summary 终止流程实例
        
        @param request: TerminateInstanceRequest
        @return: TerminateInstanceResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.TerminateInstanceHeaders()
        return self.terminate_instance_with_options(request, headers, runtime)

    async def terminate_instance_async(
        self,
        request: aliding_20230426_models.TerminateInstanceRequest,
    ) -> aliding_20230426_models.TerminateInstanceResponse:
        """
        @summary 终止流程实例
        
        @param request: TerminateInstanceRequest
        @return: TerminateInstanceResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.TerminateInstanceHeaders()
        return await self.terminate_instance_with_options_async(request, headers, runtime)

    def transfer_ticket_with_options(
        self,
        tmp_req: aliding_20230426_models.TransferTicketRequest,
        tmp_header: aliding_20230426_models.TransferTicketHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.TransferTicketResponse:
        """
        @summary 转交工单
        
        @param tmp_req: TransferTicketRequest
        @param tmp_header: TransferTicketHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: TransferTicketResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.TransferTicketShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.TransferTicketShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.notify):
            request.notify_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.notify, 'Notify', 'json')
        if not UtilClient.is_unset(tmp_req.processor_user_ids):
            request.processor_user_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.processor_user_ids, 'ProcessorUserIds', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        if not UtilClient.is_unset(tmp_req.ticket_memo):
            request.ticket_memo_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ticket_memo, 'TicketMemo', 'json')
        body = {}
        if not UtilClient.is_unset(request.notify_shrink):
            body['Notify'] = request.notify_shrink
        if not UtilClient.is_unset(request.open_team_id):
            body['OpenTeamId'] = request.open_team_id
        if not UtilClient.is_unset(request.open_ticket_id):
            body['OpenTicketId'] = request.open_ticket_id
        if not UtilClient.is_unset(request.processor_user_ids_shrink):
            body['ProcessorUserIds'] = request.processor_user_ids_shrink
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.ticket_memo_shrink):
            body['TicketMemo'] = request.ticket_memo_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='TransferTicket',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ticket/transferTicket',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.TransferTicketResponse(),
            self.call_api(params, req, runtime)
        )

    async def transfer_ticket_with_options_async(
        self,
        tmp_req: aliding_20230426_models.TransferTicketRequest,
        tmp_header: aliding_20230426_models.TransferTicketHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.TransferTicketResponse:
        """
        @summary 转交工单
        
        @param tmp_req: TransferTicketRequest
        @param tmp_header: TransferTicketHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: TransferTicketResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.TransferTicketShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.TransferTicketShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.notify):
            request.notify_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.notify, 'Notify', 'json')
        if not UtilClient.is_unset(tmp_req.processor_user_ids):
            request.processor_user_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.processor_user_ids, 'ProcessorUserIds', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        if not UtilClient.is_unset(tmp_req.ticket_memo):
            request.ticket_memo_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ticket_memo, 'TicketMemo', 'json')
        body = {}
        if not UtilClient.is_unset(request.notify_shrink):
            body['Notify'] = request.notify_shrink
        if not UtilClient.is_unset(request.open_team_id):
            body['OpenTeamId'] = request.open_team_id
        if not UtilClient.is_unset(request.open_ticket_id):
            body['OpenTicketId'] = request.open_ticket_id
        if not UtilClient.is_unset(request.processor_user_ids_shrink):
            body['ProcessorUserIds'] = request.processor_user_ids_shrink
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.ticket_memo_shrink):
            body['TicketMemo'] = request.ticket_memo_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='TransferTicket',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ticket/transferTicket',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.TransferTicketResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def transfer_ticket(
        self,
        request: aliding_20230426_models.TransferTicketRequest,
    ) -> aliding_20230426_models.TransferTicketResponse:
        """
        @summary 转交工单
        
        @param request: TransferTicketRequest
        @return: TransferTicketResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.TransferTicketHeaders()
        return self.transfer_ticket_with_options(request, headers, runtime)

    async def transfer_ticket_async(
        self,
        request: aliding_20230426_models.TransferTicketRequest,
    ) -> aliding_20230426_models.TransferTicketResponse:
        """
        @summary 转交工单
        
        @param request: TransferTicketRequest
        @return: TransferTicketResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.TransferTicketHeaders()
        return await self.transfer_ticket_with_options_async(request, headers, runtime)

    def unsubscribe_calendar_with_options(
        self,
        request: aliding_20230426_models.UnsubscribeCalendarRequest,
        tmp_header: aliding_20230426_models.UnsubscribeCalendarHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UnsubscribeCalendarResponse:
        """
        @summary 取消订阅公共日历
        
        @param request: UnsubscribeCalendarRequest
        @param tmp_header: UnsubscribeCalendarHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UnsubscribeCalendarResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.UnsubscribeCalendarShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.calendar_id):
            body['CalendarId'] = request.calendar_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UnsubscribeCalendar',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/unsubscribeCalendar',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UnsubscribeCalendarResponse(),
            self.call_api(params, req, runtime)
        )

    async def unsubscribe_calendar_with_options_async(
        self,
        request: aliding_20230426_models.UnsubscribeCalendarRequest,
        tmp_header: aliding_20230426_models.UnsubscribeCalendarHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UnsubscribeCalendarResponse:
        """
        @summary 取消订阅公共日历
        
        @param request: UnsubscribeCalendarRequest
        @param tmp_header: UnsubscribeCalendarHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UnsubscribeCalendarResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.UnsubscribeCalendarShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.calendar_id):
            body['CalendarId'] = request.calendar_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UnsubscribeCalendar',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/unsubscribeCalendar',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UnsubscribeCalendarResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def unsubscribe_calendar(
        self,
        request: aliding_20230426_models.UnsubscribeCalendarRequest,
    ) -> aliding_20230426_models.UnsubscribeCalendarResponse:
        """
        @summary 取消订阅公共日历
        
        @param request: UnsubscribeCalendarRequest
        @return: UnsubscribeCalendarResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UnsubscribeCalendarHeaders()
        return self.unsubscribe_calendar_with_options(request, headers, runtime)

    async def unsubscribe_calendar_async(
        self,
        request: aliding_20230426_models.UnsubscribeCalendarRequest,
    ) -> aliding_20230426_models.UnsubscribeCalendarResponse:
        """
        @summary 取消订阅公共日历
        
        @param request: UnsubscribeCalendarRequest
        @return: UnsubscribeCalendarResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UnsubscribeCalendarHeaders()
        return await self.unsubscribe_calendar_with_options_async(request, headers, runtime)

    def unsubscribe_event_with_options(
        self,
        tmp_req: aliding_20230426_models.UnsubscribeEventRequest,
        tmp_header: aliding_20230426_models.UnsubscribeEventHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UnsubscribeEventResponse:
        """
        @summary 取消订阅文件变更事件
        
        @param tmp_req: UnsubscribeEventRequest
        @param tmp_header: UnsubscribeEventHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UnsubscribeEventResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UnsubscribeEventShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UnsubscribeEventShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.scope):
            body['Scope'] = request.scope
        if not UtilClient.is_unset(request.scope_id):
            body['ScopeId'] = request.scope_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UnsubscribeEvent',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/unsubscribeEvent',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UnsubscribeEventResponse(),
            self.call_api(params, req, runtime)
        )

    async def unsubscribe_event_with_options_async(
        self,
        tmp_req: aliding_20230426_models.UnsubscribeEventRequest,
        tmp_header: aliding_20230426_models.UnsubscribeEventHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UnsubscribeEventResponse:
        """
        @summary 取消订阅文件变更事件
        
        @param tmp_req: UnsubscribeEventRequest
        @param tmp_header: UnsubscribeEventHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UnsubscribeEventResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UnsubscribeEventShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UnsubscribeEventShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.scope):
            body['Scope'] = request.scope
        if not UtilClient.is_unset(request.scope_id):
            body['ScopeId'] = request.scope_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UnsubscribeEvent',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/unsubscribeEvent',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UnsubscribeEventResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def unsubscribe_event(
        self,
        request: aliding_20230426_models.UnsubscribeEventRequest,
    ) -> aliding_20230426_models.UnsubscribeEventResponse:
        """
        @summary 取消订阅文件变更事件
        
        @param request: UnsubscribeEventRequest
        @return: UnsubscribeEventResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UnsubscribeEventHeaders()
        return self.unsubscribe_event_with_options(request, headers, runtime)

    async def unsubscribe_event_async(
        self,
        request: aliding_20230426_models.UnsubscribeEventRequest,
    ) -> aliding_20230426_models.UnsubscribeEventResponse:
        """
        @summary 取消订阅文件变更事件
        
        @param request: UnsubscribeEventRequest
        @return: UnsubscribeEventResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UnsubscribeEventHeaders()
        return await self.unsubscribe_event_with_options_async(request, headers, runtime)

    def update_aliding_assistant_with_options(
        self,
        tmp_req: aliding_20230426_models.UpdateAlidingAssistantRequest,
        tmp_header: aliding_20230426_models.UpdateAlidingAssistantHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateAlidingAssistantResponse:
        """
        @param tmp_req: UpdateAlidingAssistantRequest
        @param tmp_header: UpdateAlidingAssistantHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateAlidingAssistantResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UpdateAlidingAssistantShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UpdateAlidingAssistantShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.ext):
            request.ext_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ext, 'Ext', 'json')
        if not UtilClient.is_unset(tmp_req.feature):
            request.feature_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.feature, 'Feature', 'json')
        if not UtilClient.is_unset(tmp_req.recommend_prompts):
            request.recommend_prompts_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.recommend_prompts, 'RecommendPrompts', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.assistant_id):
            body['AssistantId'] = request.assistant_id
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.ext_shrink):
            body['Ext'] = request.ext_shrink
        if not UtilClient.is_unset(request.fallback_content):
            body['FallbackContent'] = request.fallback_content
        if not UtilClient.is_unset(request.feature_shrink):
            body['Feature'] = request.feature_shrink
        if not UtilClient.is_unset(request.icon):
            body['Icon'] = request.icon
        if not UtilClient.is_unset(request.instructions):
            body['Instructions'] = request.instructions
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.recommend_prompts_shrink):
            body['RecommendPrompts'] = request.recommend_prompts_shrink
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.welcome_content):
            body['WelcomeContent'] = request.welcome_content
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateAlidingAssistant',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/aiagent/updateAlidingAssistant',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateAlidingAssistantResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_aliding_assistant_with_options_async(
        self,
        tmp_req: aliding_20230426_models.UpdateAlidingAssistantRequest,
        tmp_header: aliding_20230426_models.UpdateAlidingAssistantHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateAlidingAssistantResponse:
        """
        @param tmp_req: UpdateAlidingAssistantRequest
        @param tmp_header: UpdateAlidingAssistantHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateAlidingAssistantResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UpdateAlidingAssistantShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UpdateAlidingAssistantShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.ext):
            request.ext_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ext, 'Ext', 'json')
        if not UtilClient.is_unset(tmp_req.feature):
            request.feature_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.feature, 'Feature', 'json')
        if not UtilClient.is_unset(tmp_req.recommend_prompts):
            request.recommend_prompts_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.recommend_prompts, 'RecommendPrompts', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.assistant_id):
            body['AssistantId'] = request.assistant_id
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.ext_shrink):
            body['Ext'] = request.ext_shrink
        if not UtilClient.is_unset(request.fallback_content):
            body['FallbackContent'] = request.fallback_content
        if not UtilClient.is_unset(request.feature_shrink):
            body['Feature'] = request.feature_shrink
        if not UtilClient.is_unset(request.icon):
            body['Icon'] = request.icon
        if not UtilClient.is_unset(request.instructions):
            body['Instructions'] = request.instructions
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.recommend_prompts_shrink):
            body['RecommendPrompts'] = request.recommend_prompts_shrink
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.welcome_content):
            body['WelcomeContent'] = request.welcome_content
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateAlidingAssistant',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/aiagent/updateAlidingAssistant',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateAlidingAssistantResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_aliding_assistant(
        self,
        request: aliding_20230426_models.UpdateAlidingAssistantRequest,
    ) -> aliding_20230426_models.UpdateAlidingAssistantResponse:
        """
        @param request: UpdateAlidingAssistantRequest
        @return: UpdateAlidingAssistantResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateAlidingAssistantHeaders()
        return self.update_aliding_assistant_with_options(request, headers, runtime)

    async def update_aliding_assistant_async(
        self,
        request: aliding_20230426_models.UpdateAlidingAssistantRequest,
    ) -> aliding_20230426_models.UpdateAlidingAssistantResponse:
        """
        @param request: UpdateAlidingAssistantRequest
        @return: UpdateAlidingAssistantResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateAlidingAssistantHeaders()
        return await self.update_aliding_assistant_with_options_async(request, headers, runtime)

    def update_conv_extension_with_options(
        self,
        tmp_req: aliding_20230426_models.UpdateConvExtensionRequest,
        tmp_header: aliding_20230426_models.UpdateConvExtensionHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateConvExtensionResponse:
        """
        @param tmp_req: UpdateConvExtensionRequest
        @param tmp_header: UpdateConvExtensionHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateConvExtensionResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UpdateConvExtensionShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UpdateConvExtensionShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.staff_id_list):
            request.staff_id_list_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.staff_id_list, 'StaffIdList', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.mobile_url):
            body['MobileUrl'] = request.mobile_url
        if not UtilClient.is_unset(request.pc_url):
            body['PcUrl'] = request.pc_url
        if not UtilClient.is_unset(request.staff_id_list_shrink):
            body['StaffIdList'] = request.staff_id_list_shrink
        if not UtilClient.is_unset(request.system_uid):
            body['SystemUid'] = request.system_uid
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateConvExtension',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/conversation/updateConvExtension',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateConvExtensionResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_conv_extension_with_options_async(
        self,
        tmp_req: aliding_20230426_models.UpdateConvExtensionRequest,
        tmp_header: aliding_20230426_models.UpdateConvExtensionHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateConvExtensionResponse:
        """
        @param tmp_req: UpdateConvExtensionRequest
        @param tmp_header: UpdateConvExtensionHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateConvExtensionResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UpdateConvExtensionShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UpdateConvExtensionShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.staff_id_list):
            request.staff_id_list_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.staff_id_list, 'StaffIdList', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.mobile_url):
            body['MobileUrl'] = request.mobile_url
        if not UtilClient.is_unset(request.pc_url):
            body['PcUrl'] = request.pc_url
        if not UtilClient.is_unset(request.staff_id_list_shrink):
            body['StaffIdList'] = request.staff_id_list_shrink
        if not UtilClient.is_unset(request.system_uid):
            body['SystemUid'] = request.system_uid
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateConvExtension',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/conversation/updateConvExtension',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateConvExtensionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_conv_extension(
        self,
        request: aliding_20230426_models.UpdateConvExtensionRequest,
    ) -> aliding_20230426_models.UpdateConvExtensionResponse:
        """
        @param request: UpdateConvExtensionRequest
        @return: UpdateConvExtensionResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateConvExtensionHeaders()
        return self.update_conv_extension_with_options(request, headers, runtime)

    async def update_conv_extension_async(
        self,
        request: aliding_20230426_models.UpdateConvExtensionRequest,
    ) -> aliding_20230426_models.UpdateConvExtensionResponse:
        """
        @param request: UpdateConvExtensionRequest
        @return: UpdateConvExtensionResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateConvExtensionHeaders()
        return await self.update_conv_extension_with_options_async(request, headers, runtime)

    def update_form_data_with_options(
        self,
        request: aliding_20230426_models.UpdateFormDataRequest,
        tmp_header: aliding_20230426_models.UpdateFormDataHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateFormDataResponse:
        """
        @summary 更新表单数据
        
        @param request: UpdateFormDataRequest
        @param tmp_header: UpdateFormDataHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateFormDataResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.UpdateFormDataShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.form_instance_id):
            body['FormInstanceId'] = request.form_instance_id
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        if not UtilClient.is_unset(request.update_form_data_json):
            body['UpdateFormDataJson'] = request.update_form_data_json
        if not UtilClient.is_unset(request.use_latest_version):
            body['UseLatestVersion'] = request.use_latest_version
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateFormData',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/updateFormData',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateFormDataResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_form_data_with_options_async(
        self,
        request: aliding_20230426_models.UpdateFormDataRequest,
        tmp_header: aliding_20230426_models.UpdateFormDataHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateFormDataResponse:
        """
        @summary 更新表单数据
        
        @param request: UpdateFormDataRequest
        @param tmp_header: UpdateFormDataHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateFormDataResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.UpdateFormDataShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.form_instance_id):
            body['FormInstanceId'] = request.form_instance_id
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        if not UtilClient.is_unset(request.update_form_data_json):
            body['UpdateFormDataJson'] = request.update_form_data_json
        if not UtilClient.is_unset(request.use_latest_version):
            body['UseLatestVersion'] = request.use_latest_version
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateFormData',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/updateFormData',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateFormDataResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_form_data(
        self,
        request: aliding_20230426_models.UpdateFormDataRequest,
    ) -> aliding_20230426_models.UpdateFormDataResponse:
        """
        @summary 更新表单数据
        
        @param request: UpdateFormDataRequest
        @return: UpdateFormDataResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateFormDataHeaders()
        return self.update_form_data_with_options(request, headers, runtime)

    async def update_form_data_async(
        self,
        request: aliding_20230426_models.UpdateFormDataRequest,
    ) -> aliding_20230426_models.UpdateFormDataResponse:
        """
        @summary 更新表单数据
        
        @param request: UpdateFormDataRequest
        @return: UpdateFormDataResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateFormDataHeaders()
        return await self.update_form_data_with_options_async(request, headers, runtime)

    def update_instance_with_options(
        self,
        request: aliding_20230426_models.UpdateInstanceRequest,
        tmp_header: aliding_20230426_models.UpdateInstanceHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateInstanceResponse:
        """
        @summary 更新流程实例
        
        @param request: UpdateInstanceRequest
        @param tmp_header: UpdateInstanceHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateInstanceResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.UpdateInstanceShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.process_instance_id):
            body['ProcessInstanceId'] = request.process_instance_id
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        if not UtilClient.is_unset(request.update_form_data_json):
            body['UpdateFormDataJson'] = request.update_form_data_json
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateInstance',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/updateInstance',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateInstanceResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_instance_with_options_async(
        self,
        request: aliding_20230426_models.UpdateInstanceRequest,
        tmp_header: aliding_20230426_models.UpdateInstanceHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateInstanceResponse:
        """
        @summary 更新流程实例
        
        @param request: UpdateInstanceRequest
        @param tmp_header: UpdateInstanceHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateInstanceResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.UpdateInstanceShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.process_instance_id):
            body['ProcessInstanceId'] = request.process_instance_id
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        if not UtilClient.is_unset(request.update_form_data_json):
            body['UpdateFormDataJson'] = request.update_form_data_json
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateInstance',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/updateInstance',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateInstanceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_instance(
        self,
        request: aliding_20230426_models.UpdateInstanceRequest,
    ) -> aliding_20230426_models.UpdateInstanceResponse:
        """
        @summary 更新流程实例
        
        @param request: UpdateInstanceRequest
        @return: UpdateInstanceResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateInstanceHeaders()
        return self.update_instance_with_options(request, headers, runtime)

    async def update_instance_async(
        self,
        request: aliding_20230426_models.UpdateInstanceRequest,
    ) -> aliding_20230426_models.UpdateInstanceResponse:
        """
        @summary 更新流程实例
        
        @param request: UpdateInstanceRequest
        @return: UpdateInstanceResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateInstanceHeaders()
        return await self.update_instance_with_options_async(request, headers, runtime)

    def update_live_with_options(
        self,
        tmp_req: aliding_20230426_models.UpdateLiveRequest,
        tmp_header: aliding_20230426_models.UpdateLiveHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateLiveResponse:
        """
        @summary 修改直播属性信息
        
        @param tmp_req: UpdateLiveRequest
        @param tmp_header: UpdateLiveHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateLiveResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UpdateLiveShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UpdateLiveShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.cover_url):
            body['CoverUrl'] = request.cover_url
        if not UtilClient.is_unset(request.introduction):
            body['Introduction'] = request.introduction
        if not UtilClient.is_unset(request.live_id):
            body['LiveId'] = request.live_id
        if not UtilClient.is_unset(request.pre_end_time):
            body['PreEndTime'] = request.pre_end_time
        if not UtilClient.is_unset(request.pre_start_time):
            body['PreStartTime'] = request.pre_start_time
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.title):
            body['Title'] = request.title
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateLive',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/updateLive',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateLiveResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_live_with_options_async(
        self,
        tmp_req: aliding_20230426_models.UpdateLiveRequest,
        tmp_header: aliding_20230426_models.UpdateLiveHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateLiveResponse:
        """
        @summary 修改直播属性信息
        
        @param tmp_req: UpdateLiveRequest
        @param tmp_header: UpdateLiveHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateLiveResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UpdateLiveShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UpdateLiveShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.cover_url):
            body['CoverUrl'] = request.cover_url
        if not UtilClient.is_unset(request.introduction):
            body['Introduction'] = request.introduction
        if not UtilClient.is_unset(request.live_id):
            body['LiveId'] = request.live_id
        if not UtilClient.is_unset(request.pre_end_time):
            body['PreEndTime'] = request.pre_end_time
        if not UtilClient.is_unset(request.pre_start_time):
            body['PreStartTime'] = request.pre_start_time
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.title):
            body['Title'] = request.title
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateLive',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/updateLive',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateLiveResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_live(
        self,
        request: aliding_20230426_models.UpdateLiveRequest,
    ) -> aliding_20230426_models.UpdateLiveResponse:
        """
        @summary 修改直播属性信息
        
        @param request: UpdateLiveRequest
        @return: UpdateLiveResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateLiveHeaders()
        return self.update_live_with_options(request, headers, runtime)

    async def update_live_async(
        self,
        request: aliding_20230426_models.UpdateLiveRequest,
    ) -> aliding_20230426_models.UpdateLiveResponse:
        """
        @summary 修改直播属性信息
        
        @param request: UpdateLiveRequest
        @return: UpdateLiveResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateLiveHeaders()
        return await self.update_live_with_options_async(request, headers, runtime)

    def update_meeting_room_with_options(
        self,
        tmp_req: aliding_20230426_models.UpdateMeetingRoomRequest,
        tmp_header: aliding_20230426_models.UpdateMeetingRoomHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateMeetingRoomResponse:
        """
        @summary 更新会议室信息
        
        @param tmp_req: UpdateMeetingRoomRequest
        @param tmp_header: UpdateMeetingRoomHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateMeetingRoomResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UpdateMeetingRoomShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UpdateMeetingRoomShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.reservation_authority):
            request.reservation_authority_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.reservation_authority, 'ReservationAuthority', 'json')
        if not UtilClient.is_unset(tmp_req.room_label_ids):
            request.room_label_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.room_label_ids, 'RoomLabelIds', 'json')
        if not UtilClient.is_unset(tmp_req.room_location):
            request.room_location_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.room_location, 'RoomLocation', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.enable_cycle_reservation):
            body['EnableCycleReservation'] = request.enable_cycle_reservation
        if not UtilClient.is_unset(request.group_id):
            body['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.isv_room_id):
            body['IsvRoomId'] = request.isv_room_id
        if not UtilClient.is_unset(request.reservation_authority_shrink):
            body['ReservationAuthority'] = request.reservation_authority_shrink
        if not UtilClient.is_unset(request.room_capacity):
            body['RoomCapacity'] = request.room_capacity
        if not UtilClient.is_unset(request.room_id):
            body['RoomId'] = request.room_id
        if not UtilClient.is_unset(request.room_label_ids_shrink):
            body['RoomLabelIds'] = request.room_label_ids_shrink
        if not UtilClient.is_unset(request.room_location_shrink):
            body['RoomLocation'] = request.room_location_shrink
        if not UtilClient.is_unset(request.room_name):
            body['RoomName'] = request.room_name
        if not UtilClient.is_unset(request.room_picture):
            body['RoomPicture'] = request.room_picture
        if not UtilClient.is_unset(request.room_status):
            body['RoomStatus'] = request.room_status
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateMeetingRoom',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/updateMeetingRoom',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateMeetingRoomResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_meeting_room_with_options_async(
        self,
        tmp_req: aliding_20230426_models.UpdateMeetingRoomRequest,
        tmp_header: aliding_20230426_models.UpdateMeetingRoomHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateMeetingRoomResponse:
        """
        @summary 更新会议室信息
        
        @param tmp_req: UpdateMeetingRoomRequest
        @param tmp_header: UpdateMeetingRoomHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateMeetingRoomResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UpdateMeetingRoomShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UpdateMeetingRoomShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.reservation_authority):
            request.reservation_authority_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.reservation_authority, 'ReservationAuthority', 'json')
        if not UtilClient.is_unset(tmp_req.room_label_ids):
            request.room_label_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.room_label_ids, 'RoomLabelIds', 'json')
        if not UtilClient.is_unset(tmp_req.room_location):
            request.room_location_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.room_location, 'RoomLocation', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.enable_cycle_reservation):
            body['EnableCycleReservation'] = request.enable_cycle_reservation
        if not UtilClient.is_unset(request.group_id):
            body['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.isv_room_id):
            body['IsvRoomId'] = request.isv_room_id
        if not UtilClient.is_unset(request.reservation_authority_shrink):
            body['ReservationAuthority'] = request.reservation_authority_shrink
        if not UtilClient.is_unset(request.room_capacity):
            body['RoomCapacity'] = request.room_capacity
        if not UtilClient.is_unset(request.room_id):
            body['RoomId'] = request.room_id
        if not UtilClient.is_unset(request.room_label_ids_shrink):
            body['RoomLabelIds'] = request.room_label_ids_shrink
        if not UtilClient.is_unset(request.room_location_shrink):
            body['RoomLocation'] = request.room_location_shrink
        if not UtilClient.is_unset(request.room_name):
            body['RoomName'] = request.room_name
        if not UtilClient.is_unset(request.room_picture):
            body['RoomPicture'] = request.room_picture
        if not UtilClient.is_unset(request.room_status):
            body['RoomStatus'] = request.room_status
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateMeetingRoom',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/updateMeetingRoom',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateMeetingRoomResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_meeting_room(
        self,
        request: aliding_20230426_models.UpdateMeetingRoomRequest,
    ) -> aliding_20230426_models.UpdateMeetingRoomResponse:
        """
        @summary 更新会议室信息
        
        @param request: UpdateMeetingRoomRequest
        @return: UpdateMeetingRoomResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateMeetingRoomHeaders()
        return self.update_meeting_room_with_options(request, headers, runtime)

    async def update_meeting_room_async(
        self,
        request: aliding_20230426_models.UpdateMeetingRoomRequest,
    ) -> aliding_20230426_models.UpdateMeetingRoomResponse:
        """
        @summary 更新会议室信息
        
        @param request: UpdateMeetingRoomRequest
        @return: UpdateMeetingRoomResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateMeetingRoomHeaders()
        return await self.update_meeting_room_with_options_async(request, headers, runtime)

    def update_meeting_room_group_with_options(
        self,
        tmp_req: aliding_20230426_models.UpdateMeetingRoomGroupRequest,
        tmp_header: aliding_20230426_models.UpdateMeetingRoomGroupHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateMeetingRoomGroupResponse:
        """
        @summary 更新会议室分组信息
        
        @param tmp_req: UpdateMeetingRoomGroupRequest
        @param tmp_header: UpdateMeetingRoomGroupHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateMeetingRoomGroupResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UpdateMeetingRoomGroupShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UpdateMeetingRoomGroupShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.group_id):
            body['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.group_name):
            body['GroupName'] = request.group_name
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateMeetingRoomGroup',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/updateMeetingRoomGroup',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateMeetingRoomGroupResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_meeting_room_group_with_options_async(
        self,
        tmp_req: aliding_20230426_models.UpdateMeetingRoomGroupRequest,
        tmp_header: aliding_20230426_models.UpdateMeetingRoomGroupHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateMeetingRoomGroupResponse:
        """
        @summary 更新会议室分组信息
        
        @param tmp_req: UpdateMeetingRoomGroupRequest
        @param tmp_header: UpdateMeetingRoomGroupHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateMeetingRoomGroupResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UpdateMeetingRoomGroupShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UpdateMeetingRoomGroupShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.group_id):
            body['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.group_name):
            body['GroupName'] = request.group_name
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateMeetingRoomGroup',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/updateMeetingRoomGroup',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateMeetingRoomGroupResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_meeting_room_group(
        self,
        request: aliding_20230426_models.UpdateMeetingRoomGroupRequest,
    ) -> aliding_20230426_models.UpdateMeetingRoomGroupResponse:
        """
        @summary 更新会议室分组信息
        
        @param request: UpdateMeetingRoomGroupRequest
        @return: UpdateMeetingRoomGroupResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateMeetingRoomGroupHeaders()
        return self.update_meeting_room_group_with_options(request, headers, runtime)

    async def update_meeting_room_group_async(
        self,
        request: aliding_20230426_models.UpdateMeetingRoomGroupRequest,
    ) -> aliding_20230426_models.UpdateMeetingRoomGroupResponse:
        """
        @summary 更新会议室分组信息
        
        @param request: UpdateMeetingRoomGroupRequest
        @return: UpdateMeetingRoomGroupResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateMeetingRoomGroupHeaders()
        return await self.update_meeting_room_group_with_options_async(request, headers, runtime)

    def update_multi_dim_table_with_options(
        self,
        tmp_req: aliding_20230426_models.UpdateMultiDimTableRequest,
        tmp_header: aliding_20230426_models.UpdateMultiDimTableHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateMultiDimTableResponse:
        """
        @summary 更新数据表
        
        @param tmp_req: UpdateMultiDimTableRequest
        @param tmp_header: UpdateMultiDimTableHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateMultiDimTableResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UpdateMultiDimTableShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UpdateMultiDimTableShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.base_id):
            body['BaseId'] = request.base_id
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.sheet_id_or_name):
            body['SheetIdOrName'] = request.sheet_id_or_name
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateMultiDimTable',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/table/updateMultiDimTable',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateMultiDimTableResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_multi_dim_table_with_options_async(
        self,
        tmp_req: aliding_20230426_models.UpdateMultiDimTableRequest,
        tmp_header: aliding_20230426_models.UpdateMultiDimTableHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateMultiDimTableResponse:
        """
        @summary 更新数据表
        
        @param tmp_req: UpdateMultiDimTableRequest
        @param tmp_header: UpdateMultiDimTableHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateMultiDimTableResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UpdateMultiDimTableShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UpdateMultiDimTableShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.base_id):
            body['BaseId'] = request.base_id
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.sheet_id_or_name):
            body['SheetIdOrName'] = request.sheet_id_or_name
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateMultiDimTable',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/table/updateMultiDimTable',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateMultiDimTableResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_multi_dim_table(
        self,
        request: aliding_20230426_models.UpdateMultiDimTableRequest,
    ) -> aliding_20230426_models.UpdateMultiDimTableResponse:
        """
        @summary 更新数据表
        
        @param request: UpdateMultiDimTableRequest
        @return: UpdateMultiDimTableResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateMultiDimTableHeaders()
        return self.update_multi_dim_table_with_options(request, headers, runtime)

    async def update_multi_dim_table_async(
        self,
        request: aliding_20230426_models.UpdateMultiDimTableRequest,
    ) -> aliding_20230426_models.UpdateMultiDimTableResponse:
        """
        @summary 更新数据表
        
        @param request: UpdateMultiDimTableRequest
        @return: UpdateMultiDimTableResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateMultiDimTableHeaders()
        return await self.update_multi_dim_table_with_options_async(request, headers, runtime)

    def update_multi_dim_table_field_with_options(
        self,
        tmp_req: aliding_20230426_models.UpdateMultiDimTableFieldRequest,
        tmp_header: aliding_20230426_models.UpdateMultiDimTableFieldHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateMultiDimTableFieldResponse:
        """
        @summary 更新字段
        
        @param tmp_req: UpdateMultiDimTableFieldRequest
        @param tmp_header: UpdateMultiDimTableFieldHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateMultiDimTableFieldResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UpdateMultiDimTableFieldShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UpdateMultiDimTableFieldShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.property):
            request.property_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.property, 'Property', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.base_id):
            body['BaseId'] = request.base_id
        if not UtilClient.is_unset(request.field_id_or_name):
            body['FieldIdOrName'] = request.field_id_or_name
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.property_shrink):
            body['Property'] = request.property_shrink
        if not UtilClient.is_unset(request.sheet_id_or_name):
            body['SheetIdOrName'] = request.sheet_id_or_name
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateMultiDimTableField',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/table/updateMultiDimTableField',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateMultiDimTableFieldResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_multi_dim_table_field_with_options_async(
        self,
        tmp_req: aliding_20230426_models.UpdateMultiDimTableFieldRequest,
        tmp_header: aliding_20230426_models.UpdateMultiDimTableFieldHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateMultiDimTableFieldResponse:
        """
        @summary 更新字段
        
        @param tmp_req: UpdateMultiDimTableFieldRequest
        @param tmp_header: UpdateMultiDimTableFieldHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateMultiDimTableFieldResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UpdateMultiDimTableFieldShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UpdateMultiDimTableFieldShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.property):
            request.property_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.property, 'Property', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.base_id):
            body['BaseId'] = request.base_id
        if not UtilClient.is_unset(request.field_id_or_name):
            body['FieldIdOrName'] = request.field_id_or_name
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.property_shrink):
            body['Property'] = request.property_shrink
        if not UtilClient.is_unset(request.sheet_id_or_name):
            body['SheetIdOrName'] = request.sheet_id_or_name
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateMultiDimTableField',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/table/updateMultiDimTableField',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateMultiDimTableFieldResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_multi_dim_table_field(
        self,
        request: aliding_20230426_models.UpdateMultiDimTableFieldRequest,
    ) -> aliding_20230426_models.UpdateMultiDimTableFieldResponse:
        """
        @summary 更新字段
        
        @param request: UpdateMultiDimTableFieldRequest
        @return: UpdateMultiDimTableFieldResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateMultiDimTableFieldHeaders()
        return self.update_multi_dim_table_field_with_options(request, headers, runtime)

    async def update_multi_dim_table_field_async(
        self,
        request: aliding_20230426_models.UpdateMultiDimTableFieldRequest,
    ) -> aliding_20230426_models.UpdateMultiDimTableFieldResponse:
        """
        @summary 更新字段
        
        @param request: UpdateMultiDimTableFieldRequest
        @return: UpdateMultiDimTableFieldResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateMultiDimTableFieldHeaders()
        return await self.update_multi_dim_table_field_with_options_async(request, headers, runtime)

    def update_multi_dim_table_records_with_options(
        self,
        tmp_req: aliding_20230426_models.UpdateMultiDimTableRecordsRequest,
        tmp_header: aliding_20230426_models.UpdateMultiDimTableRecordsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateMultiDimTableRecordsResponse:
        """
        @summary 更新多行记录
        
        @param tmp_req: UpdateMultiDimTableRecordsRequest
        @param tmp_header: UpdateMultiDimTableRecordsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateMultiDimTableRecordsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UpdateMultiDimTableRecordsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UpdateMultiDimTableRecordsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.record_ids):
            request.record_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.record_ids, 'RecordIds', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.base_id):
            body['BaseId'] = request.base_id
        if not UtilClient.is_unset(request.record_ids_shrink):
            body['RecordIds'] = request.record_ids_shrink
        if not UtilClient.is_unset(request.sheet_id_or_name):
            body['SheetIdOrName'] = request.sheet_id_or_name
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateMultiDimTableRecords',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/table/updateMultiDimTableRecords',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateMultiDimTableRecordsResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_multi_dim_table_records_with_options_async(
        self,
        tmp_req: aliding_20230426_models.UpdateMultiDimTableRecordsRequest,
        tmp_header: aliding_20230426_models.UpdateMultiDimTableRecordsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateMultiDimTableRecordsResponse:
        """
        @summary 更新多行记录
        
        @param tmp_req: UpdateMultiDimTableRecordsRequest
        @param tmp_header: UpdateMultiDimTableRecordsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateMultiDimTableRecordsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UpdateMultiDimTableRecordsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UpdateMultiDimTableRecordsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.record_ids):
            request.record_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.record_ids, 'RecordIds', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.base_id):
            body['BaseId'] = request.base_id
        if not UtilClient.is_unset(request.record_ids_shrink):
            body['RecordIds'] = request.record_ids_shrink
        if not UtilClient.is_unset(request.sheet_id_or_name):
            body['SheetIdOrName'] = request.sheet_id_or_name
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateMultiDimTableRecords',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/table/updateMultiDimTableRecords',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateMultiDimTableRecordsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_multi_dim_table_records(
        self,
        request: aliding_20230426_models.UpdateMultiDimTableRecordsRequest,
    ) -> aliding_20230426_models.UpdateMultiDimTableRecordsResponse:
        """
        @summary 更新多行记录
        
        @param request: UpdateMultiDimTableRecordsRequest
        @return: UpdateMultiDimTableRecordsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateMultiDimTableRecordsHeaders()
        return self.update_multi_dim_table_records_with_options(request, headers, runtime)

    async def update_multi_dim_table_records_async(
        self,
        request: aliding_20230426_models.UpdateMultiDimTableRecordsRequest,
    ) -> aliding_20230426_models.UpdateMultiDimTableRecordsResponse:
        """
        @summary 更新多行记录
        
        @param request: UpdateMultiDimTableRecordsRequest
        @return: UpdateMultiDimTableRecordsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateMultiDimTableRecordsHeaders()
        return await self.update_multi_dim_table_records_with_options_async(request, headers, runtime)

    def update_permission_with_options(
        self,
        tmp_req: aliding_20230426_models.UpdatePermissionRequest,
        tmp_header: aliding_20230426_models.UpdatePermissionHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdatePermissionResponse:
        """
        @summary 更新文件权限
        
        @param tmp_req: UpdatePermissionRequest
        @param tmp_header: UpdatePermissionHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdatePermissionResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UpdatePermissionShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UpdatePermissionShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.members):
            request.members_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.members, 'Members', 'json')
        if not UtilClient.is_unset(tmp_req.option):
            request.option_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.option, 'Option', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.dentry_uuid):
            body['DentryUuid'] = request.dentry_uuid
        if not UtilClient.is_unset(request.members_shrink):
            body['Members'] = request.members_shrink
        if not UtilClient.is_unset(request.option_shrink):
            body['Option'] = request.option_shrink
        if not UtilClient.is_unset(request.role_id):
            body['RoleId'] = request.role_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdatePermission',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/updatePermission',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdatePermissionResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_permission_with_options_async(
        self,
        tmp_req: aliding_20230426_models.UpdatePermissionRequest,
        tmp_header: aliding_20230426_models.UpdatePermissionHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdatePermissionResponse:
        """
        @summary 更新文件权限
        
        @param tmp_req: UpdatePermissionRequest
        @param tmp_header: UpdatePermissionHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdatePermissionResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UpdatePermissionShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UpdatePermissionShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.members):
            request.members_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.members, 'Members', 'json')
        if not UtilClient.is_unset(tmp_req.option):
            request.option_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.option, 'Option', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.dentry_uuid):
            body['DentryUuid'] = request.dentry_uuid
        if not UtilClient.is_unset(request.members_shrink):
            body['Members'] = request.members_shrink
        if not UtilClient.is_unset(request.option_shrink):
            body['Option'] = request.option_shrink
        if not UtilClient.is_unset(request.role_id):
            body['RoleId'] = request.role_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdatePermission',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/updatePermission',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdatePermissionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_permission(
        self,
        request: aliding_20230426_models.UpdatePermissionRequest,
    ) -> aliding_20230426_models.UpdatePermissionResponse:
        """
        @summary 更新文件权限
        
        @param request: UpdatePermissionRequest
        @return: UpdatePermissionResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdatePermissionHeaders()
        return self.update_permission_with_options(request, headers, runtime)

    async def update_permission_async(
        self,
        request: aliding_20230426_models.UpdatePermissionRequest,
    ) -> aliding_20230426_models.UpdatePermissionResponse:
        """
        @summary 更新文件权限
        
        @param request: UpdatePermissionRequest
        @return: UpdatePermissionResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdatePermissionHeaders()
        return await self.update_permission_with_options_async(request, headers, runtime)

    def update_range_with_options(
        self,
        tmp_req: aliding_20230426_models.UpdateRangeRequest,
        tmp_header: aliding_20230426_models.UpdateRangeHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateRangeResponse:
        """
        @summary 更新单元格区域
        
        @param tmp_req: UpdateRangeRequest
        @param tmp_header: UpdateRangeHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateRangeResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UpdateRangeShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UpdateRangeShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.background_colors):
            request.background_colors_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.background_colors, 'BackgroundColors', 'json')
        if not UtilClient.is_unset(tmp_req.hyperlinks):
            request.hyperlinks_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.hyperlinks, 'Hyperlinks', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        if not UtilClient.is_unset(tmp_req.values):
            request.values_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.values, 'Values', 'json')
        body = {}
        if not UtilClient.is_unset(request.background_colors_shrink):
            body['BackgroundColors'] = request.background_colors_shrink
        if not UtilClient.is_unset(request.hyperlinks_shrink):
            body['Hyperlinks'] = request.hyperlinks_shrink
        if not UtilClient.is_unset(request.number_format):
            body['NumberFormat'] = request.number_format
        if not UtilClient.is_unset(request.range_address):
            body['RangeAddress'] = request.range_address
        if not UtilClient.is_unset(request.sheet_id):
            body['SheetId'] = request.sheet_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.values_shrink):
            body['Values'] = request.values_shrink
        if not UtilClient.is_unset(request.workbook_id):
            body['WorkbookId'] = request.workbook_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateRange',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/updateRange',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateRangeResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_range_with_options_async(
        self,
        tmp_req: aliding_20230426_models.UpdateRangeRequest,
        tmp_header: aliding_20230426_models.UpdateRangeHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateRangeResponse:
        """
        @summary 更新单元格区域
        
        @param tmp_req: UpdateRangeRequest
        @param tmp_header: UpdateRangeHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateRangeResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UpdateRangeShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UpdateRangeShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.background_colors):
            request.background_colors_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.background_colors, 'BackgroundColors', 'json')
        if not UtilClient.is_unset(tmp_req.hyperlinks):
            request.hyperlinks_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.hyperlinks, 'Hyperlinks', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        if not UtilClient.is_unset(tmp_req.values):
            request.values_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.values, 'Values', 'json')
        body = {}
        if not UtilClient.is_unset(request.background_colors_shrink):
            body['BackgroundColors'] = request.background_colors_shrink
        if not UtilClient.is_unset(request.hyperlinks_shrink):
            body['Hyperlinks'] = request.hyperlinks_shrink
        if not UtilClient.is_unset(request.number_format):
            body['NumberFormat'] = request.number_format
        if not UtilClient.is_unset(request.range_address):
            body['RangeAddress'] = request.range_address
        if not UtilClient.is_unset(request.sheet_id):
            body['SheetId'] = request.sheet_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.values_shrink):
            body['Values'] = request.values_shrink
        if not UtilClient.is_unset(request.workbook_id):
            body['WorkbookId'] = request.workbook_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateRange',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/updateRange',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateRangeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_range(
        self,
        request: aliding_20230426_models.UpdateRangeRequest,
    ) -> aliding_20230426_models.UpdateRangeResponse:
        """
        @summary 更新单元格区域
        
        @param request: UpdateRangeRequest
        @return: UpdateRangeResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateRangeHeaders()
        return self.update_range_with_options(request, headers, runtime)

    async def update_range_async(
        self,
        request: aliding_20230426_models.UpdateRangeRequest,
    ) -> aliding_20230426_models.UpdateRangeResponse:
        """
        @summary 更新单元格区域
        
        @param request: UpdateRangeRequest
        @return: UpdateRangeResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateRangeHeaders()
        return await self.update_range_with_options_async(request, headers, runtime)

    def update_schedule_conf_settings_with_options(
        self,
        tmp_req: aliding_20230426_models.UpdateScheduleConfSettingsRequest,
        tmp_header: aliding_20230426_models.UpdateScheduleConfSettingsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateScheduleConfSettingsResponse:
        """
        @summary 更新预约会议设置
        
        @param tmp_req: UpdateScheduleConfSettingsRequest
        @param tmp_header: UpdateScheduleConfSettingsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateScheduleConfSettingsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UpdateScheduleConfSettingsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UpdateScheduleConfSettingsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.schedule_conf_setting_model):
            request.schedule_conf_setting_model_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.schedule_conf_setting_model, 'ScheduleConfSettingModel', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.schedule_conf_setting_model_shrink):
            body['ScheduleConfSettingModel'] = request.schedule_conf_setting_model_shrink
        if not UtilClient.is_unset(request.schedule_conference_id):
            body['ScheduleConferenceId'] = request.schedule_conference_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateScheduleConfSettings',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/updateScheduleConfSettings',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateScheduleConfSettingsResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_schedule_conf_settings_with_options_async(
        self,
        tmp_req: aliding_20230426_models.UpdateScheduleConfSettingsRequest,
        tmp_header: aliding_20230426_models.UpdateScheduleConfSettingsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateScheduleConfSettingsResponse:
        """
        @summary 更新预约会议设置
        
        @param tmp_req: UpdateScheduleConfSettingsRequest
        @param tmp_header: UpdateScheduleConfSettingsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateScheduleConfSettingsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UpdateScheduleConfSettingsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UpdateScheduleConfSettingsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.schedule_conf_setting_model):
            request.schedule_conf_setting_model_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.schedule_conf_setting_model, 'ScheduleConfSettingModel', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.schedule_conf_setting_model_shrink):
            body['ScheduleConfSettingModel'] = request.schedule_conf_setting_model_shrink
        if not UtilClient.is_unset(request.schedule_conference_id):
            body['ScheduleConferenceId'] = request.schedule_conference_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateScheduleConfSettings',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/updateScheduleConfSettings',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateScheduleConfSettingsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_schedule_conf_settings(
        self,
        request: aliding_20230426_models.UpdateScheduleConfSettingsRequest,
    ) -> aliding_20230426_models.UpdateScheduleConfSettingsResponse:
        """
        @summary 更新预约会议设置
        
        @param request: UpdateScheduleConfSettingsRequest
        @return: UpdateScheduleConfSettingsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateScheduleConfSettingsHeaders()
        return self.update_schedule_conf_settings_with_options(request, headers, runtime)

    async def update_schedule_conf_settings_async(
        self,
        request: aliding_20230426_models.UpdateScheduleConfSettingsRequest,
    ) -> aliding_20230426_models.UpdateScheduleConfSettingsResponse:
        """
        @summary 更新预约会议设置
        
        @param request: UpdateScheduleConfSettingsRequest
        @return: UpdateScheduleConfSettingsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateScheduleConfSettingsHeaders()
        return await self.update_schedule_conf_settings_with_options_async(request, headers, runtime)

    def update_schedule_conference_with_options(
        self,
        tmp_req: aliding_20230426_models.UpdateScheduleConferenceRequest,
        tmp_header: aliding_20230426_models.UpdateScheduleConferenceHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateScheduleConferenceResponse:
        """
        @summary 更新预约会议
        
        @param tmp_req: UpdateScheduleConferenceRequest
        @param tmp_header: UpdateScheduleConferenceHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateScheduleConferenceResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UpdateScheduleConferenceShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UpdateScheduleConferenceShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.end_time):
            body['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.schedule_conference_id):
            body['ScheduleConferenceId'] = request.schedule_conference_id
        if not UtilClient.is_unset(request.start_time):
            body['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.title):
            body['Title'] = request.title
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateScheduleConference',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/updateScheduleConference',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateScheduleConferenceResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_schedule_conference_with_options_async(
        self,
        tmp_req: aliding_20230426_models.UpdateScheduleConferenceRequest,
        tmp_header: aliding_20230426_models.UpdateScheduleConferenceHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateScheduleConferenceResponse:
        """
        @summary 更新预约会议
        
        @param tmp_req: UpdateScheduleConferenceRequest
        @param tmp_header: UpdateScheduleConferenceHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateScheduleConferenceResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UpdateScheduleConferenceShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UpdateScheduleConferenceShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.end_time):
            body['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.schedule_conference_id):
            body['ScheduleConferenceId'] = request.schedule_conference_id
        if not UtilClient.is_unset(request.start_time):
            body['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.title):
            body['Title'] = request.title
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateScheduleConference',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/updateScheduleConference',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateScheduleConferenceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_schedule_conference(
        self,
        request: aliding_20230426_models.UpdateScheduleConferenceRequest,
    ) -> aliding_20230426_models.UpdateScheduleConferenceResponse:
        """
        @summary 更新预约会议
        
        @param request: UpdateScheduleConferenceRequest
        @return: UpdateScheduleConferenceResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateScheduleConferenceHeaders()
        return self.update_schedule_conference_with_options(request, headers, runtime)

    async def update_schedule_conference_async(
        self,
        request: aliding_20230426_models.UpdateScheduleConferenceRequest,
    ) -> aliding_20230426_models.UpdateScheduleConferenceResponse:
        """
        @summary 更新预约会议
        
        @param request: UpdateScheduleConferenceRequest
        @return: UpdateScheduleConferenceResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateScheduleConferenceHeaders()
        return await self.update_schedule_conference_with_options_async(request, headers, runtime)

    def update_status_with_options(
        self,
        tmp_req: aliding_20230426_models.UpdateStatusRequest,
        tmp_header: aliding_20230426_models.UpdateStatusHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateStatusResponse:
        """
        @summary 更新状态
        
        @param tmp_req: UpdateStatusRequest
        @param tmp_header: UpdateStatusHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateStatusResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UpdateStatusShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UpdateStatusShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.error_lines):
            request.error_lines_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.error_lines, 'ErrorLines', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.error_lines_shrink):
            body['ErrorLines'] = request.error_lines_shrink
        if not UtilClient.is_unset(request.import_sequence):
            body['ImportSequence'] = request.import_sequence
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.status):
            body['Status'] = request.status
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateStatus',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/updateStatus',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_status_with_options_async(
        self,
        tmp_req: aliding_20230426_models.UpdateStatusRequest,
        tmp_header: aliding_20230426_models.UpdateStatusHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateStatusResponse:
        """
        @summary 更新状态
        
        @param tmp_req: UpdateStatusRequest
        @param tmp_header: UpdateStatusHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateStatusResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UpdateStatusShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UpdateStatusShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.error_lines):
            request.error_lines_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.error_lines, 'ErrorLines', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_type):
            body['AppType'] = request.app_type
        if not UtilClient.is_unset(request.error_lines_shrink):
            body['ErrorLines'] = request.error_lines_shrink
        if not UtilClient.is_unset(request.import_sequence):
            body['ImportSequence'] = request.import_sequence
        if not UtilClient.is_unset(request.language):
            body['Language'] = request.language
        if not UtilClient.is_unset(request.status):
            body['Status'] = request.status
        if not UtilClient.is_unset(request.system_token):
            body['SystemToken'] = request.system_token
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateStatus',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/yida/updateStatus',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_status(
        self,
        request: aliding_20230426_models.UpdateStatusRequest,
    ) -> aliding_20230426_models.UpdateStatusResponse:
        """
        @summary 更新状态
        
        @param request: UpdateStatusRequest
        @return: UpdateStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateStatusHeaders()
        return self.update_status_with_options(request, headers, runtime)

    async def update_status_async(
        self,
        request: aliding_20230426_models.UpdateStatusRequest,
    ) -> aliding_20230426_models.UpdateStatusResponse:
        """
        @summary 更新状态
        
        @param request: UpdateStatusRequest
        @return: UpdateStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateStatusHeaders()
        return await self.update_status_with_options_async(request, headers, runtime)

    def update_subscribed_calendars_with_options(
        self,
        tmp_req: aliding_20230426_models.UpdateSubscribedCalendarsRequest,
        tmp_header: aliding_20230426_models.UpdateSubscribedCalendarsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateSubscribedCalendarsResponse:
        """
        @summary 更新订阅日历
        
        @param tmp_req: UpdateSubscribedCalendarsRequest
        @param tmp_header: UpdateSubscribedCalendarsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateSubscribedCalendarsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UpdateSubscribedCalendarsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UpdateSubscribedCalendarsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.managers):
            request.managers_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.managers, 'Managers', 'json')
        if not UtilClient.is_unset(tmp_req.subscribe_scope):
            request.subscribe_scope_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.subscribe_scope, 'SubscribeScope', 'json')
        body = {}
        if not UtilClient.is_unset(request.calendar_id):
            body['CalendarId'] = request.calendar_id
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.managers_shrink):
            body['Managers'] = request.managers_shrink
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.subscribe_scope_shrink):
            body['SubscribeScope'] = request.subscribe_scope_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateSubscribedCalendars',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/updateSubscribedCalendars',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateSubscribedCalendarsResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_subscribed_calendars_with_options_async(
        self,
        tmp_req: aliding_20230426_models.UpdateSubscribedCalendarsRequest,
        tmp_header: aliding_20230426_models.UpdateSubscribedCalendarsHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateSubscribedCalendarsResponse:
        """
        @summary 更新订阅日历
        
        @param tmp_req: UpdateSubscribedCalendarsRequest
        @param tmp_header: UpdateSubscribedCalendarsHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateSubscribedCalendarsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UpdateSubscribedCalendarsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UpdateSubscribedCalendarsShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.managers):
            request.managers_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.managers, 'Managers', 'json')
        if not UtilClient.is_unset(tmp_req.subscribe_scope):
            request.subscribe_scope_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.subscribe_scope, 'SubscribeScope', 'json')
        body = {}
        if not UtilClient.is_unset(request.calendar_id):
            body['CalendarId'] = request.calendar_id
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.managers_shrink):
            body['Managers'] = request.managers_shrink
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.subscribe_scope_shrink):
            body['SubscribeScope'] = request.subscribe_scope_shrink
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateSubscribedCalendars',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/calendar/updateSubscribedCalendars',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateSubscribedCalendarsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_subscribed_calendars(
        self,
        request: aliding_20230426_models.UpdateSubscribedCalendarsRequest,
    ) -> aliding_20230426_models.UpdateSubscribedCalendarsResponse:
        """
        @summary 更新订阅日历
        
        @param request: UpdateSubscribedCalendarsRequest
        @return: UpdateSubscribedCalendarsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateSubscribedCalendarsHeaders()
        return self.update_subscribed_calendars_with_options(request, headers, runtime)

    async def update_subscribed_calendars_async(
        self,
        request: aliding_20230426_models.UpdateSubscribedCalendarsRequest,
    ) -> aliding_20230426_models.UpdateSubscribedCalendarsResponse:
        """
        @summary 更新订阅日历
        
        @param request: UpdateSubscribedCalendarsRequest
        @return: UpdateSubscribedCalendarsResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateSubscribedCalendarsHeaders()
        return await self.update_subscribed_calendars_with_options_async(request, headers, runtime)

    def update_todo_task_with_options(
        self,
        tmp_req: aliding_20230426_models.UpdateTodoTaskRequest,
        tmp_header: aliding_20230426_models.UpdateTodoTaskHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateTodoTaskResponse:
        """
        @summary 更新代办
        
        @param tmp_req: UpdateTodoTaskRequest
        @param tmp_header: UpdateTodoTaskHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateTodoTaskResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UpdateTodoTaskShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UpdateTodoTaskShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        if not UtilClient.is_unset(tmp_req.executor_ids):
            request.executor_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.executor_ids, 'executorIds', 'json')
        if not UtilClient.is_unset(tmp_req.participant_ids):
            request.participant_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.participant_ids, 'participantIds', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.description):
            body['description'] = request.description
        if not UtilClient.is_unset(request.done):
            body['done'] = request.done
        if not UtilClient.is_unset(request.due_time):
            body['dueTime'] = request.due_time
        if not UtilClient.is_unset(request.executor_ids_shrink):
            body['executorIds'] = request.executor_ids_shrink
        if not UtilClient.is_unset(request.participant_ids_shrink):
            body['participantIds'] = request.participant_ids_shrink
        if not UtilClient.is_unset(request.subject):
            body['subject'] = request.subject
        if not UtilClient.is_unset(request.task_id):
            body['taskId'] = request.task_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateTodoTask',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/task/updateTodoTask',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateTodoTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_todo_task_with_options_async(
        self,
        tmp_req: aliding_20230426_models.UpdateTodoTaskRequest,
        tmp_header: aliding_20230426_models.UpdateTodoTaskHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateTodoTaskResponse:
        """
        @summary 更新代办
        
        @param tmp_req: UpdateTodoTaskRequest
        @param tmp_header: UpdateTodoTaskHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateTodoTaskResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UpdateTodoTaskShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UpdateTodoTaskShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        if not UtilClient.is_unset(tmp_req.executor_ids):
            request.executor_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.executor_ids, 'executorIds', 'json')
        if not UtilClient.is_unset(tmp_req.participant_ids):
            request.participant_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.participant_ids, 'participantIds', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.description):
            body['description'] = request.description
        if not UtilClient.is_unset(request.done):
            body['done'] = request.done
        if not UtilClient.is_unset(request.due_time):
            body['dueTime'] = request.due_time
        if not UtilClient.is_unset(request.executor_ids_shrink):
            body['executorIds'] = request.executor_ids_shrink
        if not UtilClient.is_unset(request.participant_ids_shrink):
            body['participantIds'] = request.participant_ids_shrink
        if not UtilClient.is_unset(request.subject):
            body['subject'] = request.subject
        if not UtilClient.is_unset(request.task_id):
            body['taskId'] = request.task_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateTodoTask',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/task/updateTodoTask',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateTodoTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_todo_task(
        self,
        request: aliding_20230426_models.UpdateTodoTaskRequest,
    ) -> aliding_20230426_models.UpdateTodoTaskResponse:
        """
        @summary 更新代办
        
        @param request: UpdateTodoTaskRequest
        @return: UpdateTodoTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateTodoTaskHeaders()
        return self.update_todo_task_with_options(request, headers, runtime)

    async def update_todo_task_async(
        self,
        request: aliding_20230426_models.UpdateTodoTaskRequest,
    ) -> aliding_20230426_models.UpdateTodoTaskResponse:
        """
        @summary 更新代办
        
        @param request: UpdateTodoTaskRequest
        @return: UpdateTodoTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateTodoTaskHeaders()
        return await self.update_todo_task_with_options_async(request, headers, runtime)

    def update_todo_task_executor_status_with_options(
        self,
        tmp_req: aliding_20230426_models.UpdateTodoTaskExecutorStatusRequest,
        tmp_header: aliding_20230426_models.UpdateTodoTaskExecutorStatusHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateTodoTaskExecutorStatusResponse:
        """
        @summary 更新代办执行者状态
        
        @param tmp_req: UpdateTodoTaskExecutorStatusRequest
        @param tmp_header: UpdateTodoTaskExecutorStatusHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateTodoTaskExecutorStatusResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UpdateTodoTaskExecutorStatusShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UpdateTodoTaskExecutorStatusShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        if not UtilClient.is_unset(tmp_req.executor_status_list):
            request.executor_status_list_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.executor_status_list, 'executorStatusList', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.executor_status_list_shrink):
            body['executorStatusList'] = request.executor_status_list_shrink
        if not UtilClient.is_unset(request.operator_id):
            body['operatorId'] = request.operator_id
        if not UtilClient.is_unset(request.task_id):
            body['taskId'] = request.task_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateTodoTaskExecutorStatus',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/task/updateTodoTaskExecutorStatus',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateTodoTaskExecutorStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_todo_task_executor_status_with_options_async(
        self,
        tmp_req: aliding_20230426_models.UpdateTodoTaskExecutorStatusRequest,
        tmp_header: aliding_20230426_models.UpdateTodoTaskExecutorStatusHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateTodoTaskExecutorStatusResponse:
        """
        @summary 更新代办执行者状态
        
        @param tmp_req: UpdateTodoTaskExecutorStatusRequest
        @param tmp_header: UpdateTodoTaskExecutorStatusHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateTodoTaskExecutorStatusResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UpdateTodoTaskExecutorStatusShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UpdateTodoTaskExecutorStatusShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        if not UtilClient.is_unset(tmp_req.executor_status_list):
            request.executor_status_list_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.executor_status_list, 'executorStatusList', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.executor_status_list_shrink):
            body['executorStatusList'] = request.executor_status_list_shrink
        if not UtilClient.is_unset(request.operator_id):
            body['operatorId'] = request.operator_id
        if not UtilClient.is_unset(request.task_id):
            body['taskId'] = request.task_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateTodoTaskExecutorStatus',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/task/updateTodoTaskExecutorStatus',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateTodoTaskExecutorStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_todo_task_executor_status(
        self,
        request: aliding_20230426_models.UpdateTodoTaskExecutorStatusRequest,
    ) -> aliding_20230426_models.UpdateTodoTaskExecutorStatusResponse:
        """
        @summary 更新代办执行者状态
        
        @param request: UpdateTodoTaskExecutorStatusRequest
        @return: UpdateTodoTaskExecutorStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateTodoTaskExecutorStatusHeaders()
        return self.update_todo_task_executor_status_with_options(request, headers, runtime)

    async def update_todo_task_executor_status_async(
        self,
        request: aliding_20230426_models.UpdateTodoTaskExecutorStatusRequest,
    ) -> aliding_20230426_models.UpdateTodoTaskExecutorStatusResponse:
        """
        @summary 更新代办执行者状态
        
        @param request: UpdateTodoTaskExecutorStatusRequest
        @return: UpdateTodoTaskExecutorStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateTodoTaskExecutorStatusHeaders()
        return await self.update_todo_task_executor_status_with_options_async(request, headers, runtime)

    def update_user_avatar_with_options(
        self,
        request: aliding_20230426_models.UpdateUserAvatarRequest,
        tmp_header: aliding_20230426_models.UpdateUserAvatarHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateUserAvatarResponse:
        """
        @summary 更新企业账号用户头像
        
        @param request: UpdateUserAvatarRequest
        @param tmp_header: UpdateUserAvatarHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateUserAvatarResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.UpdateUserAvatarShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.avatar_media_id):
            body['AvatarMediaId'] = request.avatar_media_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateUserAvatar',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/contact/updateUserAvatar',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateUserAvatarResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_user_avatar_with_options_async(
        self,
        request: aliding_20230426_models.UpdateUserAvatarRequest,
        tmp_header: aliding_20230426_models.UpdateUserAvatarHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateUserAvatarResponse:
        """
        @summary 更新企业账号用户头像
        
        @param request: UpdateUserAvatarRequest
        @param tmp_header: UpdateUserAvatarHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateUserAvatarResponse
        """
        UtilClient.validate_model(request)
        headers = aliding_20230426_models.UpdateUserAvatarShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.avatar_media_id):
            body['AvatarMediaId'] = request.avatar_media_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateUserAvatar',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/contact/updateUserAvatar',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateUserAvatarResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_user_avatar(
        self,
        request: aliding_20230426_models.UpdateUserAvatarRequest,
    ) -> aliding_20230426_models.UpdateUserAvatarResponse:
        """
        @summary 更新企业账号用户头像
        
        @param request: UpdateUserAvatarRequest
        @return: UpdateUserAvatarResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateUserAvatarHeaders()
        return self.update_user_avatar_with_options(request, headers, runtime)

    async def update_user_avatar_async(
        self,
        request: aliding_20230426_models.UpdateUserAvatarRequest,
    ) -> aliding_20230426_models.UpdateUserAvatarResponse:
        """
        @summary 更新企业账号用户头像
        
        @param request: UpdateUserAvatarRequest
        @return: UpdateUserAvatarResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateUserAvatarHeaders()
        return await self.update_user_avatar_with_options_async(request, headers, runtime)

    def update_video_conference_setting_with_options(
        self,
        tmp_req: aliding_20230426_models.UpdateVideoConferenceSettingRequest,
        tmp_header: aliding_20230426_models.UpdateVideoConferenceSettingHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateVideoConferenceSettingResponse:
        """
        @summary 设置正在进行中的视频会议属性
        
        @param tmp_req: UpdateVideoConferenceSettingRequest
        @param tmp_header: UpdateVideoConferenceSettingHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateVideoConferenceSettingResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UpdateVideoConferenceSettingShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UpdateVideoConferenceSettingShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.allow_unmute_self):
            body['AllowUnmuteSelf'] = request.allow_unmute_self
        if not UtilClient.is_unset(request.auto_transfer_host):
            body['AutoTransferHost'] = request.auto_transfer_host
        if not UtilClient.is_unset(request.forbidden_share_screen):
            body['ForbiddenShareScreen'] = request.forbidden_share_screen
        if not UtilClient.is_unset(request.lock_conference):
            body['LockConference'] = request.lock_conference
        if not UtilClient.is_unset(request.mute_all):
            body['MuteAll'] = request.mute_all
        if not UtilClient.is_unset(request.only_internal_employees_join):
            body['OnlyInternalEmployeesJoin'] = request.only_internal_employees_join
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.conference_id):
            body['conferenceId'] = request.conference_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateVideoConferenceSetting',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/updateVideoConferenceSetting',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateVideoConferenceSettingResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_video_conference_setting_with_options_async(
        self,
        tmp_req: aliding_20230426_models.UpdateVideoConferenceSettingRequest,
        tmp_header: aliding_20230426_models.UpdateVideoConferenceSettingHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateVideoConferenceSettingResponse:
        """
        @summary 设置正在进行中的视频会议属性
        
        @param tmp_req: UpdateVideoConferenceSettingRequest
        @param tmp_header: UpdateVideoConferenceSettingHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateVideoConferenceSettingResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UpdateVideoConferenceSettingShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UpdateVideoConferenceSettingShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.allow_unmute_self):
            body['AllowUnmuteSelf'] = request.allow_unmute_self
        if not UtilClient.is_unset(request.auto_transfer_host):
            body['AutoTransferHost'] = request.auto_transfer_host
        if not UtilClient.is_unset(request.forbidden_share_screen):
            body['ForbiddenShareScreen'] = request.forbidden_share_screen
        if not UtilClient.is_unset(request.lock_conference):
            body['LockConference'] = request.lock_conference
        if not UtilClient.is_unset(request.mute_all):
            body['MuteAll'] = request.mute_all
        if not UtilClient.is_unset(request.only_internal_employees_join):
            body['OnlyInternalEmployeesJoin'] = request.only_internal_employees_join
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.conference_id):
            body['conferenceId'] = request.conference_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateVideoConferenceSetting',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/ysp/updateVideoConferenceSetting',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateVideoConferenceSettingResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_video_conference_setting(
        self,
        request: aliding_20230426_models.UpdateVideoConferenceSettingRequest,
    ) -> aliding_20230426_models.UpdateVideoConferenceSettingResponse:
        """
        @summary 设置正在进行中的视频会议属性
        
        @param request: UpdateVideoConferenceSettingRequest
        @return: UpdateVideoConferenceSettingResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateVideoConferenceSettingHeaders()
        return self.update_video_conference_setting_with_options(request, headers, runtime)

    async def update_video_conference_setting_async(
        self,
        request: aliding_20230426_models.UpdateVideoConferenceSettingRequest,
    ) -> aliding_20230426_models.UpdateVideoConferenceSettingResponse:
        """
        @summary 设置正在进行中的视频会议属性
        
        @param request: UpdateVideoConferenceSettingRequest
        @return: UpdateVideoConferenceSettingResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateVideoConferenceSettingHeaders()
        return await self.update_video_conference_setting_with_options_async(request, headers, runtime)

    def update_workspace_doc_members_with_options(
        self,
        tmp_req: aliding_20230426_models.UpdateWorkspaceDocMembersRequest,
        tmp_header: aliding_20230426_models.UpdateWorkspaceDocMembersHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateWorkspaceDocMembersResponse:
        """
        @summary 修改知识库文档成员权限
        
        @param tmp_req: UpdateWorkspaceDocMembersRequest
        @param tmp_header: UpdateWorkspaceDocMembersHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateWorkspaceDocMembersResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UpdateWorkspaceDocMembersShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UpdateWorkspaceDocMembersShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.members):
            request.members_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.members, 'Members', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.members_shrink):
            body['Members'] = request.members_shrink
        if not UtilClient.is_unset(request.node_id):
            body['NodeId'] = request.node_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workspace_id):
            body['WorkspaceId'] = request.workspace_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateWorkspaceDocMembers',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/updateWorkspaceDocMembers',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateWorkspaceDocMembersResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_workspace_doc_members_with_options_async(
        self,
        tmp_req: aliding_20230426_models.UpdateWorkspaceDocMembersRequest,
        tmp_header: aliding_20230426_models.UpdateWorkspaceDocMembersHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateWorkspaceDocMembersResponse:
        """
        @summary 修改知识库文档成员权限
        
        @param tmp_req: UpdateWorkspaceDocMembersRequest
        @param tmp_header: UpdateWorkspaceDocMembersHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateWorkspaceDocMembersResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UpdateWorkspaceDocMembersShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UpdateWorkspaceDocMembersShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.members):
            request.members_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.members, 'Members', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.members_shrink):
            body['Members'] = request.members_shrink
        if not UtilClient.is_unset(request.node_id):
            body['NodeId'] = request.node_id
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workspace_id):
            body['WorkspaceId'] = request.workspace_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateWorkspaceDocMembers',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/updateWorkspaceDocMembers',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateWorkspaceDocMembersResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_workspace_doc_members(
        self,
        request: aliding_20230426_models.UpdateWorkspaceDocMembersRequest,
    ) -> aliding_20230426_models.UpdateWorkspaceDocMembersResponse:
        """
        @summary 修改知识库文档成员权限
        
        @param request: UpdateWorkspaceDocMembersRequest
        @return: UpdateWorkspaceDocMembersResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateWorkspaceDocMembersHeaders()
        return self.update_workspace_doc_members_with_options(request, headers, runtime)

    async def update_workspace_doc_members_async(
        self,
        request: aliding_20230426_models.UpdateWorkspaceDocMembersRequest,
    ) -> aliding_20230426_models.UpdateWorkspaceDocMembersResponse:
        """
        @summary 修改知识库文档成员权限
        
        @param request: UpdateWorkspaceDocMembersRequest
        @return: UpdateWorkspaceDocMembersResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateWorkspaceDocMembersHeaders()
        return await self.update_workspace_doc_members_with_options_async(request, headers, runtime)

    def update_workspace_members_with_options(
        self,
        tmp_req: aliding_20230426_models.UpdateWorkspaceMembersRequest,
        tmp_header: aliding_20230426_models.UpdateWorkspaceMembersHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateWorkspaceMembersResponse:
        """
        @summary 更新知识库成员权限
        
        @param tmp_req: UpdateWorkspaceMembersRequest
        @param tmp_header: UpdateWorkspaceMembersHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateWorkspaceMembersResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UpdateWorkspaceMembersShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UpdateWorkspaceMembersShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.members):
            request.members_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.members, 'Members', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.members_shrink):
            body['Members'] = request.members_shrink
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workspace_id):
            body['WorkspaceId'] = request.workspace_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateWorkspaceMembers',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/updateWorkspaceMembers',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateWorkspaceMembersResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_workspace_members_with_options_async(
        self,
        tmp_req: aliding_20230426_models.UpdateWorkspaceMembersRequest,
        tmp_header: aliding_20230426_models.UpdateWorkspaceMembersHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UpdateWorkspaceMembersResponse:
        """
        @summary 更新知识库成员权限
        
        @param tmp_req: UpdateWorkspaceMembersRequest
        @param tmp_header: UpdateWorkspaceMembersHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateWorkspaceMembersResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UpdateWorkspaceMembersShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UpdateWorkspaceMembersShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.members):
            request.members_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.members, 'Members', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.members_shrink):
            body['Members'] = request.members_shrink
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.workspace_id):
            body['WorkspaceId'] = request.workspace_id
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateWorkspaceMembers',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/dingtalk/v1/documents/updateWorkspaceMembers',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UpdateWorkspaceMembersResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_workspace_members(
        self,
        request: aliding_20230426_models.UpdateWorkspaceMembersRequest,
    ) -> aliding_20230426_models.UpdateWorkspaceMembersResponse:
        """
        @summary 更新知识库成员权限
        
        @param request: UpdateWorkspaceMembersRequest
        @return: UpdateWorkspaceMembersResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateWorkspaceMembersHeaders()
        return self.update_workspace_members_with_options(request, headers, runtime)

    async def update_workspace_members_async(
        self,
        request: aliding_20230426_models.UpdateWorkspaceMembersRequest,
    ) -> aliding_20230426_models.UpdateWorkspaceMembersResponse:
        """
        @summary 更新知识库成员权限
        
        @param request: UpdateWorkspaceMembersRequest
        @return: UpdateWorkspaceMembersResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UpdateWorkspaceMembersHeaders()
        return await self.update_workspace_members_with_options_async(request, headers, runtime)

    def upload_media_with_options(
        self,
        tmp_req: aliding_20230426_models.UploadMediaRequest,
        tmp_header: aliding_20230426_models.UploadMediaHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UploadMediaResponse:
        """
        @summary 上传媒体<br/>
        
        @param tmp_req: UploadMediaRequest
        @param tmp_header: UploadMediaHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UploadMediaResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UploadMediaShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UploadMediaShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.media_name):
            body['mediaName'] = request.media_name
        if not UtilClient.is_unset(request.media_type):
            body['mediaType'] = request.media_type
        if not UtilClient.is_unset(request.org_id):
            body['orgId'] = request.org_id
        if not UtilClient.is_unset(request.url):
            body['url'] = request.url
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UploadMedia',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/aliding/v1/documents/uploadMedia',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UploadMediaResponse(),
            self.call_api(params, req, runtime)
        )

    async def upload_media_with_options_async(
        self,
        tmp_req: aliding_20230426_models.UploadMediaRequest,
        tmp_header: aliding_20230426_models.UploadMediaHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.UploadMediaResponse:
        """
        @summary 上传媒体<br/>
        
        @param tmp_req: UploadMediaRequest
        @param tmp_header: UploadMediaHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: UploadMediaResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.UploadMediaShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.UploadMediaShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.media_name):
            body['mediaName'] = request.media_name
        if not UtilClient.is_unset(request.media_type):
            body['mediaType'] = request.media_type
        if not UtilClient.is_unset(request.org_id):
            body['orgId'] = request.org_id
        if not UtilClient.is_unset(request.url):
            body['url'] = request.url
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UploadMedia',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/aliding/v1/documents/uploadMedia',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.UploadMediaResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def upload_media(
        self,
        request: aliding_20230426_models.UploadMediaRequest,
    ) -> aliding_20230426_models.UploadMediaResponse:
        """
        @summary 上传媒体<br/>
        
        @param request: UploadMediaRequest
        @return: UploadMediaResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UploadMediaHeaders()
        return self.upload_media_with_options(request, headers, runtime)

    async def upload_media_async(
        self,
        request: aliding_20230426_models.UploadMediaRequest,
    ) -> aliding_20230426_models.UploadMediaResponse:
        """
        @summary 上传媒体<br/>
        
        @param request: UploadMediaRequest
        @return: UploadMediaResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.UploadMediaHeaders()
        return await self.upload_media_with_options_async(request, headers, runtime)

    def wear_org_honor_with_options(
        self,
        tmp_req: aliding_20230426_models.WearOrgHonorRequest,
        tmp_header: aliding_20230426_models.WearOrgHonorHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.WearOrgHonorResponse:
        """
        @summary 穿戴勋章
        
        @param tmp_req: WearOrgHonorRequest
        @param tmp_header: WearOrgHonorHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: WearOrgHonorResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.WearOrgHonorShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.WearOrgHonorShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.honor_id):
            body['honorId'] = request.honor_id
        if not UtilClient.is_unset(request.org_id):
            body['orgId'] = request.org_id
        if not UtilClient.is_unset(request.user_id):
            body['userId'] = request.user_id
        if not UtilClient.is_unset(request.wear):
            body['wear'] = request.wear
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='WearOrgHonor',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/aliding/v1/honor/wearOrgHonor',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.WearOrgHonorResponse(),
            self.call_api(params, req, runtime)
        )

    async def wear_org_honor_with_options_async(
        self,
        tmp_req: aliding_20230426_models.WearOrgHonorRequest,
        tmp_header: aliding_20230426_models.WearOrgHonorHeaders,
        runtime: util_models.RuntimeOptions,
    ) -> aliding_20230426_models.WearOrgHonorResponse:
        """
        @summary 穿戴勋章
        
        @param tmp_req: WearOrgHonorRequest
        @param tmp_header: WearOrgHonorHeaders
        @param runtime: runtime options for this request RuntimeOptions
        @return: WearOrgHonorResponse
        """
        UtilClient.validate_model(tmp_req)
        request = aliding_20230426_models.WearOrgHonorShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        headers = aliding_20230426_models.WearOrgHonorShrinkHeaders()
        OpenApiUtilClient.convert(tmp_header, headers)
        if not UtilClient.is_unset(tmp_header.account_context):
            headers.account_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_header.account_context, 'AccountContext', 'json')
        if not UtilClient.is_unset(tmp_req.tenant_context):
            request.tenant_context_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tenant_context, 'TenantContext', 'json')
        body = {}
        if not UtilClient.is_unset(request.tenant_context_shrink):
            body['TenantContext'] = request.tenant_context_shrink
        if not UtilClient.is_unset(request.honor_id):
            body['honorId'] = request.honor_id
        if not UtilClient.is_unset(request.org_id):
            body['orgId'] = request.org_id
        if not UtilClient.is_unset(request.user_id):
            body['userId'] = request.user_id
        if not UtilClient.is_unset(request.wear):
            body['wear'] = request.wear
        real_headers = {}
        if not UtilClient.is_unset(headers.common_headers):
            real_headers = headers.common_headers
        if not UtilClient.is_unset(headers.account_context_shrink):
            real_headers['AccountContext'] = UtilClient.to_jsonstring(headers.account_context_shrink)
        req = open_api_models.OpenApiRequest(
            headers=real_headers,
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='WearOrgHonor',
            version='2023-04-26',
            protocol='HTTPS',
            pathname=f'/aliding/v1/honor/wearOrgHonor',
            method='POST',
            auth_type='AK',
            style='ROA',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            aliding_20230426_models.WearOrgHonorResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def wear_org_honor(
        self,
        request: aliding_20230426_models.WearOrgHonorRequest,
    ) -> aliding_20230426_models.WearOrgHonorResponse:
        """
        @summary 穿戴勋章
        
        @param request: WearOrgHonorRequest
        @return: WearOrgHonorResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.WearOrgHonorHeaders()
        return self.wear_org_honor_with_options(request, headers, runtime)

    async def wear_org_honor_async(
        self,
        request: aliding_20230426_models.WearOrgHonorRequest,
    ) -> aliding_20230426_models.WearOrgHonorResponse:
        """
        @summary 穿戴勋章
        
        @param request: WearOrgHonorRequest
        @return: WearOrgHonorResponse
        """
        runtime = util_models.RuntimeOptions()
        headers = aliding_20230426_models.WearOrgHonorHeaders()
        return await self.wear_org_honor_with_options_async(request, headers, runtime)
