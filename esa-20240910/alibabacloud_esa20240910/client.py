# -*- coding: utf-8 -*-
# This file is auto-generated, don't edit it. Thanks.
from Tea.request import TeaRequest
from Tea.exceptions import TeaException
from Tea.core import TeaCore
from typing import Dict

from alibabacloud_tea_openapi.client import Client as OpenApiClient
from alibabacloud_tea_openapi import models as open_api_models
from alibabacloud_tea_util.client import Client as UtilClient
from alibabacloud_tea_fileform.client import Client as FileFormClient
from alibabacloud_tea_xml.client import Client as XMLClient
from alibabacloud_endpoint_util.client import Client as EndpointUtilClient
from alibabacloud_esa20240910 import models as esa20240910_models
from alibabacloud_tea_util import models as util_models
from alibabacloud_openapi_util.client import Client as OpenApiUtilClient
from alibabacloud_tea_fileform import models as file_form_models


class Client(OpenApiClient):
    """
    *\
    """
    def __init__(
        self, 
        config: open_api_models.Config,
    ):
        super().__init__(config)
        self._endpoint_rule = ''
        self.check_config(config)
        self._endpoint = self.get_endpoint('esa', self._region_id, self._endpoint_rule, self._network, self._suffix, self._endpoint_map, self._endpoint)

    def _post_ossobject(
        self,
        bucket_name: str,
        data: dict,
    ) -> dict:
        _request = TeaRequest()
        form = UtilClient.assert_as_map(data)
        boundary = FileFormClient.get_boundary()
        host = UtilClient.assert_as_string(form.get('host'))
        _request.protocol = 'HTTPS'
        _request.method = 'POST'
        _request.pathname = f'/'
        _request.headers = {
            'host': host,
            'date': UtilClient.get_date_utcstring(),
            'user-agent': UtilClient.get_user_agent('')
        }
        _request.headers['content-type'] = f'multipart/form-data; boundary={boundary}'
        _request.body = FileFormClient.to_file_form(form, boundary)
        _last_request = _request
        _response = TeaCore.do_action(_request)
        resp_map = None
        body_str = UtilClient.read_as_string(_response.body)
        if UtilClient.is_4xx(_response.status_code) or UtilClient.is_5xx(_response.status_code):
            resp_map = XMLClient.parse_xml(body_str, None)
            err = UtilClient.assert_as_map(resp_map.get('Error'))
            raise TeaException({
                'code': err.get('Code'),
                'message': err.get('Message'),
                'data': {
                    'httpCode': _response.status_code,
                    'requestId': err.get('RequestId'),
                    'hostId': err.get('HostId')
                }
            })
        resp_map = XMLClient.parse_xml(body_str, None)
        return TeaCore.merge(resp_map)

    async def _post_ossobject_async(
        self,
        bucket_name: str,
        data: dict,
    ) -> dict:
        _request = TeaRequest()
        form = UtilClient.assert_as_map(data)
        boundary = FileFormClient.get_boundary()
        host = UtilClient.assert_as_string(form.get('host'))
        _request.protocol = 'HTTPS'
        _request.method = 'POST'
        _request.pathname = f'/'
        _request.headers = {
            'host': host,
            'date': UtilClient.get_date_utcstring(),
            'user-agent': UtilClient.get_user_agent('')
        }
        _request.headers['content-type'] = f'multipart/form-data; boundary={boundary}'
        _request.body = FileFormClient.to_file_form(form, boundary)
        _last_request = _request
        _response = await TeaCore.async_do_action(_request)
        resp_map = None
        body_str = await UtilClient.read_as_string_async(_response.body)
        if UtilClient.is_4xx(_response.status_code) or UtilClient.is_5xx(_response.status_code):
            resp_map = XMLClient.parse_xml(body_str, None)
            err = UtilClient.assert_as_map(resp_map.get('Error'))
            raise TeaException({
                'code': err.get('Code'),
                'message': err.get('Message'),
                'data': {
                    'httpCode': _response.status_code,
                    'requestId': err.get('RequestId'),
                    'hostId': err.get('HostId')
                }
            })
        resp_map = XMLClient.parse_xml(body_str, None)
        return TeaCore.merge(resp_map)

    def get_endpoint(
        self,
        product_id: str,
        region_id: str,
        endpoint_rule: str,
        network: str,
        suffix: str,
        endpoint_map: Dict[str, str],
        endpoint: str,
    ) -> str:
        if not UtilClient.empty(endpoint):
            return endpoint
        if not UtilClient.is_unset(endpoint_map) and not UtilClient.empty(endpoint_map.get(region_id)):
            return endpoint_map.get(region_id)
        return EndpointUtilClient.get_endpoint_rules(product_id, region_id, endpoint_rule, network, suffix)

    def activate_client_certificate_with_options(
        self,
        request: esa20240910_models.ActivateClientCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ActivateClientCertificateResponse:
        """
        @summary Activates the client based on the certificate ID.
        
        @param request: ActivateClientCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ActivateClientCertificateResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ActivateClientCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ActivateClientCertificateResponse(),
            self.call_api(params, req, runtime)
        )

    async def activate_client_certificate_with_options_async(
        self,
        request: esa20240910_models.ActivateClientCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ActivateClientCertificateResponse:
        """
        @summary Activates the client based on the certificate ID.
        
        @param request: ActivateClientCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ActivateClientCertificateResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ActivateClientCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ActivateClientCertificateResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def activate_client_certificate(
        self,
        request: esa20240910_models.ActivateClientCertificateRequest,
    ) -> esa20240910_models.ActivateClientCertificateResponse:
        """
        @summary Activates the client based on the certificate ID.
        
        @param request: ActivateClientCertificateRequest
        @return: ActivateClientCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.activate_client_certificate_with_options(request, runtime)

    async def activate_client_certificate_async(
        self,
        request: esa20240910_models.ActivateClientCertificateRequest,
    ) -> esa20240910_models.ActivateClientCertificateResponse:
        """
        @summary Activates the client based on the certificate ID.
        
        @param request: ActivateClientCertificateRequest
        @return: ActivateClientCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.activate_client_certificate_with_options_async(request, runtime)

    def activate_version_management_with_options(
        self,
        request: esa20240910_models.ActivateVersionManagementRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ActivateVersionManagementResponse:
        """
        @summary Enable Version Management
        
        @param request: ActivateVersionManagementRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ActivateVersionManagementResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ActivateVersionManagement',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ActivateVersionManagementResponse(),
            self.call_api(params, req, runtime)
        )

    async def activate_version_management_with_options_async(
        self,
        request: esa20240910_models.ActivateVersionManagementRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ActivateVersionManagementResponse:
        """
        @summary Enable Version Management
        
        @param request: ActivateVersionManagementRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ActivateVersionManagementResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ActivateVersionManagement',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ActivateVersionManagementResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def activate_version_management(
        self,
        request: esa20240910_models.ActivateVersionManagementRequest,
    ) -> esa20240910_models.ActivateVersionManagementResponse:
        """
        @summary Enable Version Management
        
        @param request: ActivateVersionManagementRequest
        @return: ActivateVersionManagementResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.activate_version_management_with_options(request, runtime)

    async def activate_version_management_async(
        self,
        request: esa20240910_models.ActivateVersionManagementRequest,
    ) -> esa20240910_models.ActivateVersionManagementResponse:
        """
        @summary Enable Version Management
        
        @param request: ActivateVersionManagementRequest
        @return: ActivateVersionManagementResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.activate_version_management_with_options_async(request, runtime)

    def apply_certificate_with_options(
        self,
        request: esa20240910_models.ApplyCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ApplyCertificateResponse:
        """
        @summary Applies for a free SSL certificate.
        
        @param request: ApplyCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ApplyCertificateResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ApplyCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ApplyCertificateResponse(),
            self.call_api(params, req, runtime)
        )

    async def apply_certificate_with_options_async(
        self,
        request: esa20240910_models.ApplyCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ApplyCertificateResponse:
        """
        @summary Applies for a free SSL certificate.
        
        @param request: ApplyCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ApplyCertificateResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ApplyCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ApplyCertificateResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def apply_certificate(
        self,
        request: esa20240910_models.ApplyCertificateRequest,
    ) -> esa20240910_models.ApplyCertificateResponse:
        """
        @summary Applies for a free SSL certificate.
        
        @param request: ApplyCertificateRequest
        @return: ApplyCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.apply_certificate_with_options(request, runtime)

    async def apply_certificate_async(
        self,
        request: esa20240910_models.ApplyCertificateRequest,
    ) -> esa20240910_models.ApplyCertificateResponse:
        """
        @summary Applies for a free SSL certificate.
        
        @param request: ApplyCertificateRequest
        @return: ApplyCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.apply_certificate_with_options_async(request, runtime)

    def batch_create_records_with_options(
        self,
        tmp_req: esa20240910_models.BatchCreateRecordsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.BatchCreateRecordsResponse:
        """
        @summary Adds DNS records of different record types at a time..
        
        @description This operation allows you to create or update multiple DNS records at a time. It is suitable for managing a large number of DNS configurations. Supported record types include but are not limited to A/AAAA, CNAME, NS, MX, TXT, CAA, SRV, and URI. The operation allows you to configure the priority, flag, tag, and weight for DNS records. In addition, for specific types of records, such as CERT, SSHFP, SMIMEA, and TLSA, advanced settings such as certificate information and encryption algorithms are also supported.
        Successful and failed records along with error messages are listed in the response.
        
        @param tmp_req: BatchCreateRecordsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: BatchCreateRecordsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.BatchCreateRecordsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.record_list):
            request.record_list_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.record_list, 'RecordList', 'json')
        query = {}
        if not UtilClient.is_unset(request.record_list_shrink):
            query['RecordList'] = request.record_list_shrink
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='BatchCreateRecords',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.BatchCreateRecordsResponse(),
            self.call_api(params, req, runtime)
        )

    async def batch_create_records_with_options_async(
        self,
        tmp_req: esa20240910_models.BatchCreateRecordsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.BatchCreateRecordsResponse:
        """
        @summary Adds DNS records of different record types at a time..
        
        @description This operation allows you to create or update multiple DNS records at a time. It is suitable for managing a large number of DNS configurations. Supported record types include but are not limited to A/AAAA, CNAME, NS, MX, TXT, CAA, SRV, and URI. The operation allows you to configure the priority, flag, tag, and weight for DNS records. In addition, for specific types of records, such as CERT, SSHFP, SMIMEA, and TLSA, advanced settings such as certificate information and encryption algorithms are also supported.
        Successful and failed records along with error messages are listed in the response.
        
        @param tmp_req: BatchCreateRecordsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: BatchCreateRecordsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.BatchCreateRecordsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.record_list):
            request.record_list_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.record_list, 'RecordList', 'json')
        query = {}
        if not UtilClient.is_unset(request.record_list_shrink):
            query['RecordList'] = request.record_list_shrink
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='BatchCreateRecords',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.BatchCreateRecordsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def batch_create_records(
        self,
        request: esa20240910_models.BatchCreateRecordsRequest,
    ) -> esa20240910_models.BatchCreateRecordsResponse:
        """
        @summary Adds DNS records of different record types at a time..
        
        @description This operation allows you to create or update multiple DNS records at a time. It is suitable for managing a large number of DNS configurations. Supported record types include but are not limited to A/AAAA, CNAME, NS, MX, TXT, CAA, SRV, and URI. The operation allows you to configure the priority, flag, tag, and weight for DNS records. In addition, for specific types of records, such as CERT, SSHFP, SMIMEA, and TLSA, advanced settings such as certificate information and encryption algorithms are also supported.
        Successful and failed records along with error messages are listed in the response.
        
        @param request: BatchCreateRecordsRequest
        @return: BatchCreateRecordsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.batch_create_records_with_options(request, runtime)

    async def batch_create_records_async(
        self,
        request: esa20240910_models.BatchCreateRecordsRequest,
    ) -> esa20240910_models.BatchCreateRecordsResponse:
        """
        @summary Adds DNS records of different record types at a time..
        
        @description This operation allows you to create or update multiple DNS records at a time. It is suitable for managing a large number of DNS configurations. Supported record types include but are not limited to A/AAAA, CNAME, NS, MX, TXT, CAA, SRV, and URI. The operation allows you to configure the priority, flag, tag, and weight for DNS records. In addition, for specific types of records, such as CERT, SSHFP, SMIMEA, and TLSA, advanced settings such as certificate information and encryption algorithms are also supported.
        Successful and failed records along with error messages are listed in the response.
        
        @param request: BatchCreateRecordsRequest
        @return: BatchCreateRecordsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.batch_create_records_with_options_async(request, runtime)

    def batch_create_waf_rules_with_options(
        self,
        tmp_req: esa20240910_models.BatchCreateWafRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.BatchCreateWafRulesResponse:
        """
        @summary Batch Create WAF Rules
        
        @param tmp_req: BatchCreateWafRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: BatchCreateWafRulesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.BatchCreateWafRulesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.configs):
            request.configs_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.configs, 'Configs', 'json')
        if not UtilClient.is_unset(tmp_req.shared):
            request.shared_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.shared, 'Shared', 'json')
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        body = {}
        if not UtilClient.is_unset(request.configs_shrink):
            body['Configs'] = request.configs_shrink
        if not UtilClient.is_unset(request.phase):
            body['Phase'] = request.phase
        if not UtilClient.is_unset(request.ruleset_id):
            body['RulesetId'] = request.ruleset_id
        if not UtilClient.is_unset(request.shared_shrink):
            body['Shared'] = request.shared_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='BatchCreateWafRules',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.BatchCreateWafRulesResponse(),
            self.call_api(params, req, runtime)
        )

    async def batch_create_waf_rules_with_options_async(
        self,
        tmp_req: esa20240910_models.BatchCreateWafRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.BatchCreateWafRulesResponse:
        """
        @summary Batch Create WAF Rules
        
        @param tmp_req: BatchCreateWafRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: BatchCreateWafRulesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.BatchCreateWafRulesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.configs):
            request.configs_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.configs, 'Configs', 'json')
        if not UtilClient.is_unset(tmp_req.shared):
            request.shared_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.shared, 'Shared', 'json')
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        body = {}
        if not UtilClient.is_unset(request.configs_shrink):
            body['Configs'] = request.configs_shrink
        if not UtilClient.is_unset(request.phase):
            body['Phase'] = request.phase
        if not UtilClient.is_unset(request.ruleset_id):
            body['RulesetId'] = request.ruleset_id
        if not UtilClient.is_unset(request.shared_shrink):
            body['Shared'] = request.shared_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='BatchCreateWafRules',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.BatchCreateWafRulesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def batch_create_waf_rules(
        self,
        request: esa20240910_models.BatchCreateWafRulesRequest,
    ) -> esa20240910_models.BatchCreateWafRulesResponse:
        """
        @summary Batch Create WAF Rules
        
        @param request: BatchCreateWafRulesRequest
        @return: BatchCreateWafRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.batch_create_waf_rules_with_options(request, runtime)

    async def batch_create_waf_rules_async(
        self,
        request: esa20240910_models.BatchCreateWafRulesRequest,
    ) -> esa20240910_models.BatchCreateWafRulesResponse:
        """
        @summary Batch Create WAF Rules
        
        @param request: BatchCreateWafRulesRequest
        @return: BatchCreateWafRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.batch_create_waf_rules_with_options_async(request, runtime)

    def batch_delete_kv_with_options(
        self,
        tmp_req: esa20240910_models.BatchDeleteKvRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.BatchDeleteKvResponse:
        """
        @summary Deletes key-value pairs from a namespace at a time based on keys.
        
        @param tmp_req: BatchDeleteKvRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: BatchDeleteKvResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.BatchDeleteKvShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.keys):
            request.keys_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.keys, 'Keys', 'json')
        query = {}
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        body = {}
        if not UtilClient.is_unset(request.keys_shrink):
            body['Keys'] = request.keys_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='BatchDeleteKv',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.BatchDeleteKvResponse(),
            self.call_api(params, req, runtime)
        )

    async def batch_delete_kv_with_options_async(
        self,
        tmp_req: esa20240910_models.BatchDeleteKvRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.BatchDeleteKvResponse:
        """
        @summary Deletes key-value pairs from a namespace at a time based on keys.
        
        @param tmp_req: BatchDeleteKvRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: BatchDeleteKvResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.BatchDeleteKvShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.keys):
            request.keys_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.keys, 'Keys', 'json')
        query = {}
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        body = {}
        if not UtilClient.is_unset(request.keys_shrink):
            body['Keys'] = request.keys_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='BatchDeleteKv',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.BatchDeleteKvResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def batch_delete_kv(
        self,
        request: esa20240910_models.BatchDeleteKvRequest,
    ) -> esa20240910_models.BatchDeleteKvResponse:
        """
        @summary Deletes key-value pairs from a namespace at a time based on keys.
        
        @param request: BatchDeleteKvRequest
        @return: BatchDeleteKvResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.batch_delete_kv_with_options(request, runtime)

    async def batch_delete_kv_async(
        self,
        request: esa20240910_models.BatchDeleteKvRequest,
    ) -> esa20240910_models.BatchDeleteKvResponse:
        """
        @summary Deletes key-value pairs from a namespace at a time based on keys.
        
        @param request: BatchDeleteKvRequest
        @return: BatchDeleteKvResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.batch_delete_kv_with_options_async(request, runtime)

    def batch_delete_kv_with_high_capacity_with_options(
        self,
        request: esa20240910_models.BatchDeleteKvWithHighCapacityRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.BatchDeleteKvWithHighCapacityResponse:
        """
        @summary Deletes multiple key-value pairs from a namespace at a time based on specified keys. The request body can be up to 100 MB.
        
        @description This operation allows you to upload a larger request body than by using [BatchDeleteKv](https://help.aliyun.com/document_detail/2850204.html). For small request bodies, we recommend that you use [BatchDeleteKv](https://help.aliyun.com/document_detail/2850204.html) to minimize the server processing time. This operation must be called by using SDKs. The following sample code uses the Golang SDK and BatchDeleteKvWithHighCapacityAdvance to call the operation.
        func TestBatchDeleteWithHighCapacity() error {
        // Initialize the configurations.
        cfg := new(openapi.Config)
        cfg.SetAccessKeyId("xxxxxxxxx")
        cfg.SetAccessKeySecret("xxxxxxxxxx")
        cli, err := NewClient(cfg)
        if err != nil {
        return err
        }
        runtime := &util.RuntimeOptions{}
        // Construct a request for deleting key-value pairs at a time.
        namespace := "test_batch_put"
        rawReq := BatchDeleteKvRequest{
        Namespace: &namespace,
        }
        for i := 0; i < 10000; i++ {
        key := fmt.Sprintf("test_key_%d", i)
        rawReq.Keys = append(rawReq.Keys, &key)
        }
        payload, err := json.Marshal(rawReq)
        if err != nil {
        return err
        }
        // If the payload is greater than 2 MB, call the BatchDeleteKvWithHighCapacity operation for deletion.
        reqHighCapacity := BatchDeleteKvWithHighCapacityAdvanceRequest{
        Namespace: &namespace,
        UrlObject: bytes.NewReader(payload),
        }
        resp, err := cli.BatchDeleteKvWithHighCapacityAdvance(&reqHighCapacity, runtime)
        if err != nil {
        return err
        }
        return nil
        }
        
        @param request: BatchDeleteKvWithHighCapacityRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: BatchDeleteKvWithHighCapacityResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        if not UtilClient.is_unset(request.url):
            query['Url'] = request.url
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='BatchDeleteKvWithHighCapacity',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.BatchDeleteKvWithHighCapacityResponse(),
            self.call_api(params, req, runtime)
        )

    async def batch_delete_kv_with_high_capacity_with_options_async(
        self,
        request: esa20240910_models.BatchDeleteKvWithHighCapacityRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.BatchDeleteKvWithHighCapacityResponse:
        """
        @summary Deletes multiple key-value pairs from a namespace at a time based on specified keys. The request body can be up to 100 MB.
        
        @description This operation allows you to upload a larger request body than by using [BatchDeleteKv](https://help.aliyun.com/document_detail/2850204.html). For small request bodies, we recommend that you use [BatchDeleteKv](https://help.aliyun.com/document_detail/2850204.html) to minimize the server processing time. This operation must be called by using SDKs. The following sample code uses the Golang SDK and BatchDeleteKvWithHighCapacityAdvance to call the operation.
        func TestBatchDeleteWithHighCapacity() error {
        // Initialize the configurations.
        cfg := new(openapi.Config)
        cfg.SetAccessKeyId("xxxxxxxxx")
        cfg.SetAccessKeySecret("xxxxxxxxxx")
        cli, err := NewClient(cfg)
        if err != nil {
        return err
        }
        runtime := &util.RuntimeOptions{}
        // Construct a request for deleting key-value pairs at a time.
        namespace := "test_batch_put"
        rawReq := BatchDeleteKvRequest{
        Namespace: &namespace,
        }
        for i := 0; i < 10000; i++ {
        key := fmt.Sprintf("test_key_%d", i)
        rawReq.Keys = append(rawReq.Keys, &key)
        }
        payload, err := json.Marshal(rawReq)
        if err != nil {
        return err
        }
        // If the payload is greater than 2 MB, call the BatchDeleteKvWithHighCapacity operation for deletion.
        reqHighCapacity := BatchDeleteKvWithHighCapacityAdvanceRequest{
        Namespace: &namespace,
        UrlObject: bytes.NewReader(payload),
        }
        resp, err := cli.BatchDeleteKvWithHighCapacityAdvance(&reqHighCapacity, runtime)
        if err != nil {
        return err
        }
        return nil
        }
        
        @param request: BatchDeleteKvWithHighCapacityRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: BatchDeleteKvWithHighCapacityResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        if not UtilClient.is_unset(request.url):
            query['Url'] = request.url
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='BatchDeleteKvWithHighCapacity',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.BatchDeleteKvWithHighCapacityResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def batch_delete_kv_with_high_capacity(
        self,
        request: esa20240910_models.BatchDeleteKvWithHighCapacityRequest,
    ) -> esa20240910_models.BatchDeleteKvWithHighCapacityResponse:
        """
        @summary Deletes multiple key-value pairs from a namespace at a time based on specified keys. The request body can be up to 100 MB.
        
        @description This operation allows you to upload a larger request body than by using [BatchDeleteKv](https://help.aliyun.com/document_detail/2850204.html). For small request bodies, we recommend that you use [BatchDeleteKv](https://help.aliyun.com/document_detail/2850204.html) to minimize the server processing time. This operation must be called by using SDKs. The following sample code uses the Golang SDK and BatchDeleteKvWithHighCapacityAdvance to call the operation.
        func TestBatchDeleteWithHighCapacity() error {
        // Initialize the configurations.
        cfg := new(openapi.Config)
        cfg.SetAccessKeyId("xxxxxxxxx")
        cfg.SetAccessKeySecret("xxxxxxxxxx")
        cli, err := NewClient(cfg)
        if err != nil {
        return err
        }
        runtime := &util.RuntimeOptions{}
        // Construct a request for deleting key-value pairs at a time.
        namespace := "test_batch_put"
        rawReq := BatchDeleteKvRequest{
        Namespace: &namespace,
        }
        for i := 0; i < 10000; i++ {
        key := fmt.Sprintf("test_key_%d", i)
        rawReq.Keys = append(rawReq.Keys, &key)
        }
        payload, err := json.Marshal(rawReq)
        if err != nil {
        return err
        }
        // If the payload is greater than 2 MB, call the BatchDeleteKvWithHighCapacity operation for deletion.
        reqHighCapacity := BatchDeleteKvWithHighCapacityAdvanceRequest{
        Namespace: &namespace,
        UrlObject: bytes.NewReader(payload),
        }
        resp, err := cli.BatchDeleteKvWithHighCapacityAdvance(&reqHighCapacity, runtime)
        if err != nil {
        return err
        }
        return nil
        }
        
        @param request: BatchDeleteKvWithHighCapacityRequest
        @return: BatchDeleteKvWithHighCapacityResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.batch_delete_kv_with_high_capacity_with_options(request, runtime)

    async def batch_delete_kv_with_high_capacity_async(
        self,
        request: esa20240910_models.BatchDeleteKvWithHighCapacityRequest,
    ) -> esa20240910_models.BatchDeleteKvWithHighCapacityResponse:
        """
        @summary Deletes multiple key-value pairs from a namespace at a time based on specified keys. The request body can be up to 100 MB.
        
        @description This operation allows you to upload a larger request body than by using [BatchDeleteKv](https://help.aliyun.com/document_detail/2850204.html). For small request bodies, we recommend that you use [BatchDeleteKv](https://help.aliyun.com/document_detail/2850204.html) to minimize the server processing time. This operation must be called by using SDKs. The following sample code uses the Golang SDK and BatchDeleteKvWithHighCapacityAdvance to call the operation.
        func TestBatchDeleteWithHighCapacity() error {
        // Initialize the configurations.
        cfg := new(openapi.Config)
        cfg.SetAccessKeyId("xxxxxxxxx")
        cfg.SetAccessKeySecret("xxxxxxxxxx")
        cli, err := NewClient(cfg)
        if err != nil {
        return err
        }
        runtime := &util.RuntimeOptions{}
        // Construct a request for deleting key-value pairs at a time.
        namespace := "test_batch_put"
        rawReq := BatchDeleteKvRequest{
        Namespace: &namespace,
        }
        for i := 0; i < 10000; i++ {
        key := fmt.Sprintf("test_key_%d", i)
        rawReq.Keys = append(rawReq.Keys, &key)
        }
        payload, err := json.Marshal(rawReq)
        if err != nil {
        return err
        }
        // If the payload is greater than 2 MB, call the BatchDeleteKvWithHighCapacity operation for deletion.
        reqHighCapacity := BatchDeleteKvWithHighCapacityAdvanceRequest{
        Namespace: &namespace,
        UrlObject: bytes.NewReader(payload),
        }
        resp, err := cli.BatchDeleteKvWithHighCapacityAdvance(&reqHighCapacity, runtime)
        if err != nil {
        return err
        }
        return nil
        }
        
        @param request: BatchDeleteKvWithHighCapacityRequest
        @return: BatchDeleteKvWithHighCapacityResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.batch_delete_kv_with_high_capacity_with_options_async(request, runtime)

    def batch_delete_kv_with_high_capacity_advance(
        self,
        request: esa20240910_models.BatchDeleteKvWithHighCapacityAdvanceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.BatchDeleteKvWithHighCapacityResponse:
        # Step 0: init client
        credential_model = None
        if UtilClient.is_unset(self._credential):
            raise TeaException({
                'code': 'InvalidCredentials',
                'message': 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
            })
        credential_model = self._credential.get_credential()
        access_key_id = credential_model.access_key_id
        access_key_secret = credential_model.access_key_secret
        security_token = credential_model.security_token
        credential_type = credential_model.type
        open_platform_endpoint = self._open_platform_endpoint
        if UtilClient.empty(open_platform_endpoint):
            open_platform_endpoint = 'openplatform.aliyuncs.com'
        if UtilClient.is_unset(credential_type):
            credential_type = 'access_key'
        auth_config = open_api_models.Config(
            access_key_id=access_key_id,
            access_key_secret=access_key_secret,
            security_token=security_token,
            type=credential_type,
            endpoint=open_platform_endpoint,
            protocol=self._protocol,
            region_id=self._region_id
        )
        auth_client = OpenApiClient(auth_config)
        auth_request = {
            'Product': 'ESA',
            'RegionId': self._region_id
        }
        auth_req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(auth_request)
        )
        auth_params = open_api_models.Params(
            action='AuthorizeFileUpload',
            version='2019-12-19',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        auth_response = {}
        file_obj = file_form_models.FileField()
        oss_header = {}
        tmp_body = {}
        use_accelerate = False
        auth_response_body = {}
        batch_delete_kv_with_high_capacity_req = esa20240910_models.BatchDeleteKvWithHighCapacityRequest()
        OpenApiUtilClient.convert(request, batch_delete_kv_with_high_capacity_req)
        if not UtilClient.is_unset(request.url_object):
            tmp_resp_0 = auth_client.call_api(auth_params, auth_req, runtime)
            auth_response = UtilClient.assert_as_map(tmp_resp_0)
            tmp_body = UtilClient.assert_as_map(auth_response.get('body'))
            use_accelerate = UtilClient.assert_as_boolean(tmp_body.get('UseAccelerate'))
            auth_response_body = UtilClient.stringify_map_value(tmp_body)
            file_obj = file_form_models.FileField(
                filename=auth_response_body.get('ObjectKey'),
                content=request.url_object,
                content_type=''
            )
            oss_header = {
                'host': f"{auth_response_body.get('Bucket')}.{OpenApiUtilClient.get_endpoint(auth_response_body.get('Endpoint'), use_accelerate, self._endpoint_type)}",
                'OSSAccessKeyId': auth_response_body.get('AccessKeyId'),
                'policy': auth_response_body.get('EncodedPolicy'),
                'Signature': auth_response_body.get('Signature'),
                'key': auth_response_body.get('ObjectKey'),
                'file': file_obj,
                'success_action_status': '201'
            }
            self._post_ossobject(auth_response_body.get('Bucket'), oss_header)
            batch_delete_kv_with_high_capacity_req.url = f"http://{auth_response_body.get('Bucket')}.{auth_response_body.get('Endpoint')}/{auth_response_body.get('ObjectKey')}"
        batch_delete_kv_with_high_capacity_resp = self.batch_delete_kv_with_high_capacity_with_options(batch_delete_kv_with_high_capacity_req, runtime)
        return batch_delete_kv_with_high_capacity_resp

    async def batch_delete_kv_with_high_capacity_advance_async(
        self,
        request: esa20240910_models.BatchDeleteKvWithHighCapacityAdvanceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.BatchDeleteKvWithHighCapacityResponse:
        # Step 0: init client
        credential_model = None
        if UtilClient.is_unset(self._credential):
            raise TeaException({
                'code': 'InvalidCredentials',
                'message': 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
            })
        credential_model = await self._credential.get_credential_async()
        access_key_id = credential_model.access_key_id
        access_key_secret = credential_model.access_key_secret
        security_token = credential_model.security_token
        credential_type = credential_model.type
        open_platform_endpoint = self._open_platform_endpoint
        if UtilClient.empty(open_platform_endpoint):
            open_platform_endpoint = 'openplatform.aliyuncs.com'
        if UtilClient.is_unset(credential_type):
            credential_type = 'access_key'
        auth_config = open_api_models.Config(
            access_key_id=access_key_id,
            access_key_secret=access_key_secret,
            security_token=security_token,
            type=credential_type,
            endpoint=open_platform_endpoint,
            protocol=self._protocol,
            region_id=self._region_id
        )
        auth_client = OpenApiClient(auth_config)
        auth_request = {
            'Product': 'ESA',
            'RegionId': self._region_id
        }
        auth_req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(auth_request)
        )
        auth_params = open_api_models.Params(
            action='AuthorizeFileUpload',
            version='2019-12-19',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        auth_response = {}
        file_obj = file_form_models.FileField()
        oss_header = {}
        tmp_body = {}
        use_accelerate = False
        auth_response_body = {}
        batch_delete_kv_with_high_capacity_req = esa20240910_models.BatchDeleteKvWithHighCapacityRequest()
        OpenApiUtilClient.convert(request, batch_delete_kv_with_high_capacity_req)
        if not UtilClient.is_unset(request.url_object):
            tmp_resp_0 = await auth_client.call_api_async(auth_params, auth_req, runtime)
            auth_response = UtilClient.assert_as_map(tmp_resp_0)
            tmp_body = UtilClient.assert_as_map(auth_response.get('body'))
            use_accelerate = UtilClient.assert_as_boolean(tmp_body.get('UseAccelerate'))
            auth_response_body = UtilClient.stringify_map_value(tmp_body)
            file_obj = file_form_models.FileField(
                filename=auth_response_body.get('ObjectKey'),
                content=request.url_object,
                content_type=''
            )
            oss_header = {
                'host': f"{auth_response_body.get('Bucket')}.{OpenApiUtilClient.get_endpoint(auth_response_body.get('Endpoint'), use_accelerate, self._endpoint_type)}",
                'OSSAccessKeyId': auth_response_body.get('AccessKeyId'),
                'policy': auth_response_body.get('EncodedPolicy'),
                'Signature': auth_response_body.get('Signature'),
                'key': auth_response_body.get('ObjectKey'),
                'file': file_obj,
                'success_action_status': '201'
            }
            await self._post_ossobject_async(auth_response_body.get('Bucket'), oss_header)
            batch_delete_kv_with_high_capacity_req.url = f"http://{auth_response_body.get('Bucket')}.{auth_response_body.get('Endpoint')}/{auth_response_body.get('ObjectKey')}"
        batch_delete_kv_with_high_capacity_resp = await self.batch_delete_kv_with_high_capacity_with_options_async(batch_delete_kv_with_high_capacity_req, runtime)
        return batch_delete_kv_with_high_capacity_resp

    def batch_get_expression_fields_with_options(
        self,
        tmp_req: esa20240910_models.BatchGetExpressionFieldsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.BatchGetExpressionFieldsResponse:
        """
        @summary Batch Get Expression Matches
        
        @param tmp_req: BatchGetExpressionFieldsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: BatchGetExpressionFieldsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.BatchGetExpressionFieldsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.expressions):
            request.expressions_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.expressions, 'Expressions', 'json')
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        body = {}
        if not UtilClient.is_unset(request.expressions_shrink):
            body['Expressions'] = request.expressions_shrink
        if not UtilClient.is_unset(request.phase):
            body['Phase'] = request.phase
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='BatchGetExpressionFields',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.BatchGetExpressionFieldsResponse(),
            self.call_api(params, req, runtime)
        )

    async def batch_get_expression_fields_with_options_async(
        self,
        tmp_req: esa20240910_models.BatchGetExpressionFieldsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.BatchGetExpressionFieldsResponse:
        """
        @summary Batch Get Expression Matches
        
        @param tmp_req: BatchGetExpressionFieldsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: BatchGetExpressionFieldsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.BatchGetExpressionFieldsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.expressions):
            request.expressions_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.expressions, 'Expressions', 'json')
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        body = {}
        if not UtilClient.is_unset(request.expressions_shrink):
            body['Expressions'] = request.expressions_shrink
        if not UtilClient.is_unset(request.phase):
            body['Phase'] = request.phase
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='BatchGetExpressionFields',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.BatchGetExpressionFieldsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def batch_get_expression_fields(
        self,
        request: esa20240910_models.BatchGetExpressionFieldsRequest,
    ) -> esa20240910_models.BatchGetExpressionFieldsResponse:
        """
        @summary Batch Get Expression Matches
        
        @param request: BatchGetExpressionFieldsRequest
        @return: BatchGetExpressionFieldsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.batch_get_expression_fields_with_options(request, runtime)

    async def batch_get_expression_fields_async(
        self,
        request: esa20240910_models.BatchGetExpressionFieldsRequest,
    ) -> esa20240910_models.BatchGetExpressionFieldsResponse:
        """
        @summary Batch Get Expression Matches
        
        @param request: BatchGetExpressionFieldsRequest
        @return: BatchGetExpressionFieldsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.batch_get_expression_fields_with_options_async(request, runtime)

    def batch_put_kv_with_options(
        self,
        tmp_req: esa20240910_models.BatchPutKvRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.BatchPutKvResponse:
        """
        @summary Configures key-value pairs for a namespace at a time based on specified keys.
        
        @param tmp_req: BatchPutKvRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: BatchPutKvResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.BatchPutKvShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.kv_list):
            request.kv_list_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.kv_list, 'KvList', 'json')
        query = {}
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        body = {}
        if not UtilClient.is_unset(request.kv_list_shrink):
            body['KvList'] = request.kv_list_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='BatchPutKv',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.BatchPutKvResponse(),
            self.call_api(params, req, runtime)
        )

    async def batch_put_kv_with_options_async(
        self,
        tmp_req: esa20240910_models.BatchPutKvRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.BatchPutKvResponse:
        """
        @summary Configures key-value pairs for a namespace at a time based on specified keys.
        
        @param tmp_req: BatchPutKvRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: BatchPutKvResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.BatchPutKvShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.kv_list):
            request.kv_list_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.kv_list, 'KvList', 'json')
        query = {}
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        body = {}
        if not UtilClient.is_unset(request.kv_list_shrink):
            body['KvList'] = request.kv_list_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='BatchPutKv',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.BatchPutKvResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def batch_put_kv(
        self,
        request: esa20240910_models.BatchPutKvRequest,
    ) -> esa20240910_models.BatchPutKvResponse:
        """
        @summary Configures key-value pairs for a namespace at a time based on specified keys.
        
        @param request: BatchPutKvRequest
        @return: BatchPutKvResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.batch_put_kv_with_options(request, runtime)

    async def batch_put_kv_async(
        self,
        request: esa20240910_models.BatchPutKvRequest,
    ) -> esa20240910_models.BatchPutKvResponse:
        """
        @summary Configures key-value pairs for a namespace at a time based on specified keys.
        
        @param request: BatchPutKvRequest
        @return: BatchPutKvResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.batch_put_kv_with_options_async(request, runtime)

    def batch_put_kv_with_high_capacity_with_options(
        self,
        request: esa20240910_models.BatchPutKvWithHighCapacityRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.BatchPutKvWithHighCapacityResponse:
        """
        @summary Configures key-value pairs for a namespace at a time based on specified keys. The request body can be up to 100 MB.
        
        @description This operation allows you to upload a larger request body than by using [BatchPutKv](https://help.aliyun.com/document_detail/2850203.html). For small request bodies, we recommend that you use [BatchPutKv](https://help.aliyun.com/document_detail/2850203.html) to minimize the server processing time. This operation must be called by using SDKs. The following sample code uses the Golang SDK and BatchPutKvWithHighCapacityAdvance to call the operation.
        func TestBatchPutKvWithHighCapacity() error {
        // Initialize the configurations.
        cfg := new(openapi.Config)
        cfg.SetAccessKeyId("xxxxxxxxx")
        cfg.SetAccessKeySecret("xxxxxxxxxx")
        cli, err := NewClient(cfg)
        if err != nil {
        return err
        }
        runtime := &util.RuntimeOptions{}
        // Construct a request for uploading key-value pairs at a time.
        namespace := "test_batch_put"
        numKv := 10000
        kvList := make([]BatchPutKvRequestKvList, numKv)
        test_value := strings.Repeat("a", 101024)
        for i := 0; i < numKv; i++ {
        key := fmt.Sprintf("test_key_%d", i)
        value := test_value
        kvList[i] = &BatchPutKvRequestKvList{
        Key:   &key,
        Value: &value,
        }
        }
        rawReq := BatchPutKvRequest{
        Namespace: &namespace,
        KvList:    kvList,
        }
        payload, err := json.Marshal(rawReq)
        if err != nil {
        return err
        }
        // If the payload is greater than 2 MB, call the BatchPutKvWithHighCapacity operation for upload.
        reqHighCapacity := BatchPutKvWithHighCapacityAdvanceRequest{
        Namespace: &namespace,
        UrlObject: bytes.NewReader(payload),
        }
        resp, err := cli.BatchPutKvWithHighCapacityAdvance(&reqHighCapacity, runtime)
        if err != nil {
        return err
        }
        return nil
        }
        
        @param request: BatchPutKvWithHighCapacityRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: BatchPutKvWithHighCapacityResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        if not UtilClient.is_unset(request.url):
            query['Url'] = request.url
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='BatchPutKvWithHighCapacity',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.BatchPutKvWithHighCapacityResponse(),
            self.call_api(params, req, runtime)
        )

    async def batch_put_kv_with_high_capacity_with_options_async(
        self,
        request: esa20240910_models.BatchPutKvWithHighCapacityRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.BatchPutKvWithHighCapacityResponse:
        """
        @summary Configures key-value pairs for a namespace at a time based on specified keys. The request body can be up to 100 MB.
        
        @description This operation allows you to upload a larger request body than by using [BatchPutKv](https://help.aliyun.com/document_detail/2850203.html). For small request bodies, we recommend that you use [BatchPutKv](https://help.aliyun.com/document_detail/2850203.html) to minimize the server processing time. This operation must be called by using SDKs. The following sample code uses the Golang SDK and BatchPutKvWithHighCapacityAdvance to call the operation.
        func TestBatchPutKvWithHighCapacity() error {
        // Initialize the configurations.
        cfg := new(openapi.Config)
        cfg.SetAccessKeyId("xxxxxxxxx")
        cfg.SetAccessKeySecret("xxxxxxxxxx")
        cli, err := NewClient(cfg)
        if err != nil {
        return err
        }
        runtime := &util.RuntimeOptions{}
        // Construct a request for uploading key-value pairs at a time.
        namespace := "test_batch_put"
        numKv := 10000
        kvList := make([]BatchPutKvRequestKvList, numKv)
        test_value := strings.Repeat("a", 101024)
        for i := 0; i < numKv; i++ {
        key := fmt.Sprintf("test_key_%d", i)
        value := test_value
        kvList[i] = &BatchPutKvRequestKvList{
        Key:   &key,
        Value: &value,
        }
        }
        rawReq := BatchPutKvRequest{
        Namespace: &namespace,
        KvList:    kvList,
        }
        payload, err := json.Marshal(rawReq)
        if err != nil {
        return err
        }
        // If the payload is greater than 2 MB, call the BatchPutKvWithHighCapacity operation for upload.
        reqHighCapacity := BatchPutKvWithHighCapacityAdvanceRequest{
        Namespace: &namespace,
        UrlObject: bytes.NewReader(payload),
        }
        resp, err := cli.BatchPutKvWithHighCapacityAdvance(&reqHighCapacity, runtime)
        if err != nil {
        return err
        }
        return nil
        }
        
        @param request: BatchPutKvWithHighCapacityRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: BatchPutKvWithHighCapacityResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        if not UtilClient.is_unset(request.url):
            query['Url'] = request.url
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='BatchPutKvWithHighCapacity',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.BatchPutKvWithHighCapacityResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def batch_put_kv_with_high_capacity(
        self,
        request: esa20240910_models.BatchPutKvWithHighCapacityRequest,
    ) -> esa20240910_models.BatchPutKvWithHighCapacityResponse:
        """
        @summary Configures key-value pairs for a namespace at a time based on specified keys. The request body can be up to 100 MB.
        
        @description This operation allows you to upload a larger request body than by using [BatchPutKv](https://help.aliyun.com/document_detail/2850203.html). For small request bodies, we recommend that you use [BatchPutKv](https://help.aliyun.com/document_detail/2850203.html) to minimize the server processing time. This operation must be called by using SDKs. The following sample code uses the Golang SDK and BatchPutKvWithHighCapacityAdvance to call the operation.
        func TestBatchPutKvWithHighCapacity() error {
        // Initialize the configurations.
        cfg := new(openapi.Config)
        cfg.SetAccessKeyId("xxxxxxxxx")
        cfg.SetAccessKeySecret("xxxxxxxxxx")
        cli, err := NewClient(cfg)
        if err != nil {
        return err
        }
        runtime := &util.RuntimeOptions{}
        // Construct a request for uploading key-value pairs at a time.
        namespace := "test_batch_put"
        numKv := 10000
        kvList := make([]BatchPutKvRequestKvList, numKv)
        test_value := strings.Repeat("a", 101024)
        for i := 0; i < numKv; i++ {
        key := fmt.Sprintf("test_key_%d", i)
        value := test_value
        kvList[i] = &BatchPutKvRequestKvList{
        Key:   &key,
        Value: &value,
        }
        }
        rawReq := BatchPutKvRequest{
        Namespace: &namespace,
        KvList:    kvList,
        }
        payload, err := json.Marshal(rawReq)
        if err != nil {
        return err
        }
        // If the payload is greater than 2 MB, call the BatchPutKvWithHighCapacity operation for upload.
        reqHighCapacity := BatchPutKvWithHighCapacityAdvanceRequest{
        Namespace: &namespace,
        UrlObject: bytes.NewReader(payload),
        }
        resp, err := cli.BatchPutKvWithHighCapacityAdvance(&reqHighCapacity, runtime)
        if err != nil {
        return err
        }
        return nil
        }
        
        @param request: BatchPutKvWithHighCapacityRequest
        @return: BatchPutKvWithHighCapacityResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.batch_put_kv_with_high_capacity_with_options(request, runtime)

    async def batch_put_kv_with_high_capacity_async(
        self,
        request: esa20240910_models.BatchPutKvWithHighCapacityRequest,
    ) -> esa20240910_models.BatchPutKvWithHighCapacityResponse:
        """
        @summary Configures key-value pairs for a namespace at a time based on specified keys. The request body can be up to 100 MB.
        
        @description This operation allows you to upload a larger request body than by using [BatchPutKv](https://help.aliyun.com/document_detail/2850203.html). For small request bodies, we recommend that you use [BatchPutKv](https://help.aliyun.com/document_detail/2850203.html) to minimize the server processing time. This operation must be called by using SDKs. The following sample code uses the Golang SDK and BatchPutKvWithHighCapacityAdvance to call the operation.
        func TestBatchPutKvWithHighCapacity() error {
        // Initialize the configurations.
        cfg := new(openapi.Config)
        cfg.SetAccessKeyId("xxxxxxxxx")
        cfg.SetAccessKeySecret("xxxxxxxxxx")
        cli, err := NewClient(cfg)
        if err != nil {
        return err
        }
        runtime := &util.RuntimeOptions{}
        // Construct a request for uploading key-value pairs at a time.
        namespace := "test_batch_put"
        numKv := 10000
        kvList := make([]BatchPutKvRequestKvList, numKv)
        test_value := strings.Repeat("a", 101024)
        for i := 0; i < numKv; i++ {
        key := fmt.Sprintf("test_key_%d", i)
        value := test_value
        kvList[i] = &BatchPutKvRequestKvList{
        Key:   &key,
        Value: &value,
        }
        }
        rawReq := BatchPutKvRequest{
        Namespace: &namespace,
        KvList:    kvList,
        }
        payload, err := json.Marshal(rawReq)
        if err != nil {
        return err
        }
        // If the payload is greater than 2 MB, call the BatchPutKvWithHighCapacity operation for upload.
        reqHighCapacity := BatchPutKvWithHighCapacityAdvanceRequest{
        Namespace: &namespace,
        UrlObject: bytes.NewReader(payload),
        }
        resp, err := cli.BatchPutKvWithHighCapacityAdvance(&reqHighCapacity, runtime)
        if err != nil {
        return err
        }
        return nil
        }
        
        @param request: BatchPutKvWithHighCapacityRequest
        @return: BatchPutKvWithHighCapacityResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.batch_put_kv_with_high_capacity_with_options_async(request, runtime)

    def batch_put_kv_with_high_capacity_advance(
        self,
        request: esa20240910_models.BatchPutKvWithHighCapacityAdvanceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.BatchPutKvWithHighCapacityResponse:
        # Step 0: init client
        credential_model = None
        if UtilClient.is_unset(self._credential):
            raise TeaException({
                'code': 'InvalidCredentials',
                'message': 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
            })
        credential_model = self._credential.get_credential()
        access_key_id = credential_model.access_key_id
        access_key_secret = credential_model.access_key_secret
        security_token = credential_model.security_token
        credential_type = credential_model.type
        open_platform_endpoint = self._open_platform_endpoint
        if UtilClient.empty(open_platform_endpoint):
            open_platform_endpoint = 'openplatform.aliyuncs.com'
        if UtilClient.is_unset(credential_type):
            credential_type = 'access_key'
        auth_config = open_api_models.Config(
            access_key_id=access_key_id,
            access_key_secret=access_key_secret,
            security_token=security_token,
            type=credential_type,
            endpoint=open_platform_endpoint,
            protocol=self._protocol,
            region_id=self._region_id
        )
        auth_client = OpenApiClient(auth_config)
        auth_request = {
            'Product': 'ESA',
            'RegionId': self._region_id
        }
        auth_req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(auth_request)
        )
        auth_params = open_api_models.Params(
            action='AuthorizeFileUpload',
            version='2019-12-19',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        auth_response = {}
        file_obj = file_form_models.FileField()
        oss_header = {}
        tmp_body = {}
        use_accelerate = False
        auth_response_body = {}
        batch_put_kv_with_high_capacity_req = esa20240910_models.BatchPutKvWithHighCapacityRequest()
        OpenApiUtilClient.convert(request, batch_put_kv_with_high_capacity_req)
        if not UtilClient.is_unset(request.url_object):
            tmp_resp_0 = auth_client.call_api(auth_params, auth_req, runtime)
            auth_response = UtilClient.assert_as_map(tmp_resp_0)
            tmp_body = UtilClient.assert_as_map(auth_response.get('body'))
            use_accelerate = UtilClient.assert_as_boolean(tmp_body.get('UseAccelerate'))
            auth_response_body = UtilClient.stringify_map_value(tmp_body)
            file_obj = file_form_models.FileField(
                filename=auth_response_body.get('ObjectKey'),
                content=request.url_object,
                content_type=''
            )
            oss_header = {
                'host': f"{auth_response_body.get('Bucket')}.{OpenApiUtilClient.get_endpoint(auth_response_body.get('Endpoint'), use_accelerate, self._endpoint_type)}",
                'OSSAccessKeyId': auth_response_body.get('AccessKeyId'),
                'policy': auth_response_body.get('EncodedPolicy'),
                'Signature': auth_response_body.get('Signature'),
                'key': auth_response_body.get('ObjectKey'),
                'file': file_obj,
                'success_action_status': '201'
            }
            self._post_ossobject(auth_response_body.get('Bucket'), oss_header)
            batch_put_kv_with_high_capacity_req.url = f"http://{auth_response_body.get('Bucket')}.{auth_response_body.get('Endpoint')}/{auth_response_body.get('ObjectKey')}"
        batch_put_kv_with_high_capacity_resp = self.batch_put_kv_with_high_capacity_with_options(batch_put_kv_with_high_capacity_req, runtime)
        return batch_put_kv_with_high_capacity_resp

    async def batch_put_kv_with_high_capacity_advance_async(
        self,
        request: esa20240910_models.BatchPutKvWithHighCapacityAdvanceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.BatchPutKvWithHighCapacityResponse:
        # Step 0: init client
        credential_model = None
        if UtilClient.is_unset(self._credential):
            raise TeaException({
                'code': 'InvalidCredentials',
                'message': 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
            })
        credential_model = await self._credential.get_credential_async()
        access_key_id = credential_model.access_key_id
        access_key_secret = credential_model.access_key_secret
        security_token = credential_model.security_token
        credential_type = credential_model.type
        open_platform_endpoint = self._open_platform_endpoint
        if UtilClient.empty(open_platform_endpoint):
            open_platform_endpoint = 'openplatform.aliyuncs.com'
        if UtilClient.is_unset(credential_type):
            credential_type = 'access_key'
        auth_config = open_api_models.Config(
            access_key_id=access_key_id,
            access_key_secret=access_key_secret,
            security_token=security_token,
            type=credential_type,
            endpoint=open_platform_endpoint,
            protocol=self._protocol,
            region_id=self._region_id
        )
        auth_client = OpenApiClient(auth_config)
        auth_request = {
            'Product': 'ESA',
            'RegionId': self._region_id
        }
        auth_req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(auth_request)
        )
        auth_params = open_api_models.Params(
            action='AuthorizeFileUpload',
            version='2019-12-19',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        auth_response = {}
        file_obj = file_form_models.FileField()
        oss_header = {}
        tmp_body = {}
        use_accelerate = False
        auth_response_body = {}
        batch_put_kv_with_high_capacity_req = esa20240910_models.BatchPutKvWithHighCapacityRequest()
        OpenApiUtilClient.convert(request, batch_put_kv_with_high_capacity_req)
        if not UtilClient.is_unset(request.url_object):
            tmp_resp_0 = await auth_client.call_api_async(auth_params, auth_req, runtime)
            auth_response = UtilClient.assert_as_map(tmp_resp_0)
            tmp_body = UtilClient.assert_as_map(auth_response.get('body'))
            use_accelerate = UtilClient.assert_as_boolean(tmp_body.get('UseAccelerate'))
            auth_response_body = UtilClient.stringify_map_value(tmp_body)
            file_obj = file_form_models.FileField(
                filename=auth_response_body.get('ObjectKey'),
                content=request.url_object,
                content_type=''
            )
            oss_header = {
                'host': f"{auth_response_body.get('Bucket')}.{OpenApiUtilClient.get_endpoint(auth_response_body.get('Endpoint'), use_accelerate, self._endpoint_type)}",
                'OSSAccessKeyId': auth_response_body.get('AccessKeyId'),
                'policy': auth_response_body.get('EncodedPolicy'),
                'Signature': auth_response_body.get('Signature'),
                'key': auth_response_body.get('ObjectKey'),
                'file': file_obj,
                'success_action_status': '201'
            }
            await self._post_ossobject_async(auth_response_body.get('Bucket'), oss_header)
            batch_put_kv_with_high_capacity_req.url = f"http://{auth_response_body.get('Bucket')}.{auth_response_body.get('Endpoint')}/{auth_response_body.get('ObjectKey')}"
        batch_put_kv_with_high_capacity_resp = await self.batch_put_kv_with_high_capacity_with_options_async(batch_put_kv_with_high_capacity_req, runtime)
        return batch_put_kv_with_high_capacity_resp

    def batch_update_waf_rules_with_options(
        self,
        tmp_req: esa20240910_models.BatchUpdateWafRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.BatchUpdateWafRulesResponse:
        """
        @summary Modifies multiple rules in a specific Web Application Firewall (WAF) ruleset at a time.
        
        @param tmp_req: BatchUpdateWafRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: BatchUpdateWafRulesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.BatchUpdateWafRulesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.configs):
            request.configs_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.configs, 'Configs', 'json')
        if not UtilClient.is_unset(tmp_req.shared):
            request.shared_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.shared, 'Shared', 'json')
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        body = {}
        if not UtilClient.is_unset(request.configs_shrink):
            body['Configs'] = request.configs_shrink
        if not UtilClient.is_unset(request.phase):
            body['Phase'] = request.phase
        if not UtilClient.is_unset(request.ruleset_id):
            body['RulesetId'] = request.ruleset_id
        if not UtilClient.is_unset(request.shared_shrink):
            body['Shared'] = request.shared_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='BatchUpdateWafRules',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.BatchUpdateWafRulesResponse(),
            self.call_api(params, req, runtime)
        )

    async def batch_update_waf_rules_with_options_async(
        self,
        tmp_req: esa20240910_models.BatchUpdateWafRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.BatchUpdateWafRulesResponse:
        """
        @summary Modifies multiple rules in a specific Web Application Firewall (WAF) ruleset at a time.
        
        @param tmp_req: BatchUpdateWafRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: BatchUpdateWafRulesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.BatchUpdateWafRulesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.configs):
            request.configs_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.configs, 'Configs', 'json')
        if not UtilClient.is_unset(tmp_req.shared):
            request.shared_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.shared, 'Shared', 'json')
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        body = {}
        if not UtilClient.is_unset(request.configs_shrink):
            body['Configs'] = request.configs_shrink
        if not UtilClient.is_unset(request.phase):
            body['Phase'] = request.phase
        if not UtilClient.is_unset(request.ruleset_id):
            body['RulesetId'] = request.ruleset_id
        if not UtilClient.is_unset(request.shared_shrink):
            body['Shared'] = request.shared_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='BatchUpdateWafRules',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.BatchUpdateWafRulesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def batch_update_waf_rules(
        self,
        request: esa20240910_models.BatchUpdateWafRulesRequest,
    ) -> esa20240910_models.BatchUpdateWafRulesResponse:
        """
        @summary Modifies multiple rules in a specific Web Application Firewall (WAF) ruleset at a time.
        
        @param request: BatchUpdateWafRulesRequest
        @return: BatchUpdateWafRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.batch_update_waf_rules_with_options(request, runtime)

    async def batch_update_waf_rules_async(
        self,
        request: esa20240910_models.BatchUpdateWafRulesRequest,
    ) -> esa20240910_models.BatchUpdateWafRulesResponse:
        """
        @summary Modifies multiple rules in a specific Web Application Firewall (WAF) ruleset at a time.
        
        @param request: BatchUpdateWafRulesRequest
        @return: BatchUpdateWafRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.batch_update_waf_rules_with_options_async(request, runtime)

    def block_object_with_options(
        self,
        tmp_req: esa20240910_models.BlockObjectRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.BlockObjectResponse:
        """
        @summary Blocks URLs.
        
        @param tmp_req: BlockObjectRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: BlockObjectResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.BlockObjectShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.content):
            request.content_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.content, 'Content', 'json')
        query = {}
        if not UtilClient.is_unset(request.content_shrink):
            query['Content'] = request.content_shrink
        if not UtilClient.is_unset(request.extension):
            query['Extension'] = request.extension
        if not UtilClient.is_unset(request.maxage):
            query['Maxage'] = request.maxage
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='BlockObject',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.BlockObjectResponse(),
            self.call_api(params, req, runtime)
        )

    async def block_object_with_options_async(
        self,
        tmp_req: esa20240910_models.BlockObjectRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.BlockObjectResponse:
        """
        @summary Blocks URLs.
        
        @param tmp_req: BlockObjectRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: BlockObjectResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.BlockObjectShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.content):
            request.content_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.content, 'Content', 'json')
        query = {}
        if not UtilClient.is_unset(request.content_shrink):
            query['Content'] = request.content_shrink
        if not UtilClient.is_unset(request.extension):
            query['Extension'] = request.extension
        if not UtilClient.is_unset(request.maxage):
            query['Maxage'] = request.maxage
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='BlockObject',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.BlockObjectResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def block_object(
        self,
        request: esa20240910_models.BlockObjectRequest,
    ) -> esa20240910_models.BlockObjectResponse:
        """
        @summary Blocks URLs.
        
        @param request: BlockObjectRequest
        @return: BlockObjectResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.block_object_with_options(request, runtime)

    async def block_object_async(
        self,
        request: esa20240910_models.BlockObjectRequest,
    ) -> esa20240910_models.BlockObjectResponse:
        """
        @summary Blocks URLs.
        
        @param request: BlockObjectRequest
        @return: BlockObjectResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.block_object_with_options_async(request, runtime)

    def check_assume_slr_role_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CheckAssumeSlrRoleResponse:
        """
        @summary 检查实时日志slr角色是否已创建
        
        @param request: CheckAssumeSlrRoleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CheckAssumeSlrRoleResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='CheckAssumeSlrRole',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CheckAssumeSlrRoleResponse(),
            self.call_api(params, req, runtime)
        )

    async def check_assume_slr_role_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CheckAssumeSlrRoleResponse:
        """
        @summary 检查实时日志slr角色是否已创建
        
        @param request: CheckAssumeSlrRoleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CheckAssumeSlrRoleResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='CheckAssumeSlrRole',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CheckAssumeSlrRoleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def check_assume_slr_role(self) -> esa20240910_models.CheckAssumeSlrRoleResponse:
        """
        @summary 检查实时日志slr角色是否已创建
        
        @return: CheckAssumeSlrRoleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.check_assume_slr_role_with_options(runtime)

    async def check_assume_slr_role_async(self) -> esa20240910_models.CheckAssumeSlrRoleResponse:
        """
        @summary 检查实时日志slr角色是否已创建
        
        @return: CheckAssumeSlrRoleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.check_assume_slr_role_with_options_async(runtime)

    def check_site_name_with_options(
        self,
        request: esa20240910_models.CheckSiteNameRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CheckSiteNameResponse:
        """
        @summary Checks whether a specified website name is available.
        
        @param request: CheckSiteNameRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CheckSiteNameResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_name):
            query['SiteName'] = request.site_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CheckSiteName',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CheckSiteNameResponse(),
            self.call_api(params, req, runtime)
        )

    async def check_site_name_with_options_async(
        self,
        request: esa20240910_models.CheckSiteNameRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CheckSiteNameResponse:
        """
        @summary Checks whether a specified website name is available.
        
        @param request: CheckSiteNameRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CheckSiteNameResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_name):
            query['SiteName'] = request.site_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CheckSiteName',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CheckSiteNameResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def check_site_name(
        self,
        request: esa20240910_models.CheckSiteNameRequest,
    ) -> esa20240910_models.CheckSiteNameResponse:
        """
        @summary Checks whether a specified website name is available.
        
        @param request: CheckSiteNameRequest
        @return: CheckSiteNameResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.check_site_name_with_options(request, runtime)

    async def check_site_name_async(
        self,
        request: esa20240910_models.CheckSiteNameRequest,
    ) -> esa20240910_models.CheckSiteNameResponse:
        """
        @summary Checks whether a specified website name is available.
        
        @param request: CheckSiteNameRequest
        @return: CheckSiteNameResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.check_site_name_with_options_async(request, runtime)

    def check_site_project_name_with_options(
        self,
        request: esa20240910_models.CheckSiteProjectNameRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CheckSiteProjectNameResponse:
        """
        @summary Checks the name of a real-time log delivery task.
        
        @param request: CheckSiteProjectNameRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CheckSiteProjectNameResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CheckSiteProjectName',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CheckSiteProjectNameResponse(),
            self.call_api(params, req, runtime)
        )

    async def check_site_project_name_with_options_async(
        self,
        request: esa20240910_models.CheckSiteProjectNameRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CheckSiteProjectNameResponse:
        """
        @summary Checks the name of a real-time log delivery task.
        
        @param request: CheckSiteProjectNameRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CheckSiteProjectNameResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CheckSiteProjectName',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CheckSiteProjectNameResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def check_site_project_name(
        self,
        request: esa20240910_models.CheckSiteProjectNameRequest,
    ) -> esa20240910_models.CheckSiteProjectNameResponse:
        """
        @summary Checks the name of a real-time log delivery task.
        
        @param request: CheckSiteProjectNameRequest
        @return: CheckSiteProjectNameResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.check_site_project_name_with_options(request, runtime)

    async def check_site_project_name_async(
        self,
        request: esa20240910_models.CheckSiteProjectNameRequest,
    ) -> esa20240910_models.CheckSiteProjectNameResponse:
        """
        @summary Checks the name of a real-time log delivery task.
        
        @param request: CheckSiteProjectNameRequest
        @return: CheckSiteProjectNameResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.check_site_project_name_with_options_async(request, runtime)

    def check_user_project_name_with_options(
        self,
        request: esa20240910_models.CheckUserProjectNameRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CheckUserProjectNameResponse:
        """
        @summary Checks the name of a real-time log delivery task by account.
        
        @param request: CheckUserProjectNameRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CheckUserProjectNameResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CheckUserProjectName',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CheckUserProjectNameResponse(),
            self.call_api(params, req, runtime)
        )

    async def check_user_project_name_with_options_async(
        self,
        request: esa20240910_models.CheckUserProjectNameRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CheckUserProjectNameResponse:
        """
        @summary Checks the name of a real-time log delivery task by account.
        
        @param request: CheckUserProjectNameRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CheckUserProjectNameResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CheckUserProjectName',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CheckUserProjectNameResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def check_user_project_name(
        self,
        request: esa20240910_models.CheckUserProjectNameRequest,
    ) -> esa20240910_models.CheckUserProjectNameResponse:
        """
        @summary Checks the name of a real-time log delivery task by account.
        
        @param request: CheckUserProjectNameRequest
        @return: CheckUserProjectNameResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.check_user_project_name_with_options(request, runtime)

    async def check_user_project_name_async(
        self,
        request: esa20240910_models.CheckUserProjectNameRequest,
    ) -> esa20240910_models.CheckUserProjectNameResponse:
        """
        @summary Checks the name of a real-time log delivery task by account.
        
        @param request: CheckUserProjectNameRequest
        @return: CheckUserProjectNameResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.check_user_project_name_with_options_async(request, runtime)

    def commit_routine_staging_code_with_options(
        self,
        request: esa20240910_models.CommitRoutineStagingCodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CommitRoutineStagingCodeResponse:
        """
        @summary Commits the unstable code in the staging environment to generate an official code version.
        
        @param request: CommitRoutineStagingCodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CommitRoutineStagingCodeResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.code_description):
            body['CodeDescription'] = request.code_description
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CommitRoutineStagingCode',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CommitRoutineStagingCodeResponse(),
            self.call_api(params, req, runtime)
        )

    async def commit_routine_staging_code_with_options_async(
        self,
        request: esa20240910_models.CommitRoutineStagingCodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CommitRoutineStagingCodeResponse:
        """
        @summary Commits the unstable code in the staging environment to generate an official code version.
        
        @param request: CommitRoutineStagingCodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CommitRoutineStagingCodeResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.code_description):
            body['CodeDescription'] = request.code_description
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CommitRoutineStagingCode',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CommitRoutineStagingCodeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def commit_routine_staging_code(
        self,
        request: esa20240910_models.CommitRoutineStagingCodeRequest,
    ) -> esa20240910_models.CommitRoutineStagingCodeResponse:
        """
        @summary Commits the unstable code in the staging environment to generate an official code version.
        
        @param request: CommitRoutineStagingCodeRequest
        @return: CommitRoutineStagingCodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.commit_routine_staging_code_with_options(request, runtime)

    async def commit_routine_staging_code_async(
        self,
        request: esa20240910_models.CommitRoutineStagingCodeRequest,
    ) -> esa20240910_models.CommitRoutineStagingCodeResponse:
        """
        @summary Commits the unstable code in the staging environment to generate an official code version.
        
        @param request: CommitRoutineStagingCodeRequest
        @return: CommitRoutineStagingCodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.commit_routine_staging_code_with_options_async(request, runtime)

    def create_cache_rule_with_options(
        self,
        request: esa20240910_models.CreateCacheRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateCacheRuleResponse:
        """
        @summary Create a new site cache configuration
        
        @param request: CreateCacheRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateCacheRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.additional_cacheable_ports):
            query['AdditionalCacheablePorts'] = request.additional_cacheable_ports
        if not UtilClient.is_unset(request.browser_cache_mode):
            query['BrowserCacheMode'] = request.browser_cache_mode
        if not UtilClient.is_unset(request.browser_cache_ttl):
            query['BrowserCacheTtl'] = request.browser_cache_ttl
        if not UtilClient.is_unset(request.bypass_cache):
            query['BypassCache'] = request.bypass_cache
        if not UtilClient.is_unset(request.cache_deception_armor):
            query['CacheDeceptionArmor'] = request.cache_deception_armor
        if not UtilClient.is_unset(request.cache_reserve_eligibility):
            query['CacheReserveEligibility'] = request.cache_reserve_eligibility
        if not UtilClient.is_unset(request.check_presence_cookie):
            query['CheckPresenceCookie'] = request.check_presence_cookie
        if not UtilClient.is_unset(request.check_presence_header):
            query['CheckPresenceHeader'] = request.check_presence_header
        if not UtilClient.is_unset(request.edge_cache_mode):
            query['EdgeCacheMode'] = request.edge_cache_mode
        if not UtilClient.is_unset(request.edge_cache_ttl):
            query['EdgeCacheTtl'] = request.edge_cache_ttl
        if not UtilClient.is_unset(request.edge_status_code_cache_ttl):
            query['EdgeStatusCodeCacheTtl'] = request.edge_status_code_cache_ttl
        if not UtilClient.is_unset(request.include_cookie):
            query['IncludeCookie'] = request.include_cookie
        if not UtilClient.is_unset(request.include_header):
            query['IncludeHeader'] = request.include_header
        if not UtilClient.is_unset(request.query_string):
            query['QueryString'] = request.query_string
        if not UtilClient.is_unset(request.query_string_mode):
            query['QueryStringMode'] = request.query_string_mode
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.serve_stale):
            query['ServeStale'] = request.serve_stale
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        if not UtilClient.is_unset(request.sort_query_string_for_cache):
            query['SortQueryStringForCache'] = request.sort_query_string_for_cache
        if not UtilClient.is_unset(request.user_device_type):
            query['UserDeviceType'] = request.user_device_type
        if not UtilClient.is_unset(request.user_geo):
            query['UserGeo'] = request.user_geo
        if not UtilClient.is_unset(request.user_language):
            query['UserLanguage'] = request.user_language
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateCacheRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateCacheRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_cache_rule_with_options_async(
        self,
        request: esa20240910_models.CreateCacheRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateCacheRuleResponse:
        """
        @summary Create a new site cache configuration
        
        @param request: CreateCacheRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateCacheRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.additional_cacheable_ports):
            query['AdditionalCacheablePorts'] = request.additional_cacheable_ports
        if not UtilClient.is_unset(request.browser_cache_mode):
            query['BrowserCacheMode'] = request.browser_cache_mode
        if not UtilClient.is_unset(request.browser_cache_ttl):
            query['BrowserCacheTtl'] = request.browser_cache_ttl
        if not UtilClient.is_unset(request.bypass_cache):
            query['BypassCache'] = request.bypass_cache
        if not UtilClient.is_unset(request.cache_deception_armor):
            query['CacheDeceptionArmor'] = request.cache_deception_armor
        if not UtilClient.is_unset(request.cache_reserve_eligibility):
            query['CacheReserveEligibility'] = request.cache_reserve_eligibility
        if not UtilClient.is_unset(request.check_presence_cookie):
            query['CheckPresenceCookie'] = request.check_presence_cookie
        if not UtilClient.is_unset(request.check_presence_header):
            query['CheckPresenceHeader'] = request.check_presence_header
        if not UtilClient.is_unset(request.edge_cache_mode):
            query['EdgeCacheMode'] = request.edge_cache_mode
        if not UtilClient.is_unset(request.edge_cache_ttl):
            query['EdgeCacheTtl'] = request.edge_cache_ttl
        if not UtilClient.is_unset(request.edge_status_code_cache_ttl):
            query['EdgeStatusCodeCacheTtl'] = request.edge_status_code_cache_ttl
        if not UtilClient.is_unset(request.include_cookie):
            query['IncludeCookie'] = request.include_cookie
        if not UtilClient.is_unset(request.include_header):
            query['IncludeHeader'] = request.include_header
        if not UtilClient.is_unset(request.query_string):
            query['QueryString'] = request.query_string
        if not UtilClient.is_unset(request.query_string_mode):
            query['QueryStringMode'] = request.query_string_mode
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.serve_stale):
            query['ServeStale'] = request.serve_stale
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        if not UtilClient.is_unset(request.sort_query_string_for_cache):
            query['SortQueryStringForCache'] = request.sort_query_string_for_cache
        if not UtilClient.is_unset(request.user_device_type):
            query['UserDeviceType'] = request.user_device_type
        if not UtilClient.is_unset(request.user_geo):
            query['UserGeo'] = request.user_geo
        if not UtilClient.is_unset(request.user_language):
            query['UserLanguage'] = request.user_language
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateCacheRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateCacheRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_cache_rule(
        self,
        request: esa20240910_models.CreateCacheRuleRequest,
    ) -> esa20240910_models.CreateCacheRuleResponse:
        """
        @summary Create a new site cache configuration
        
        @param request: CreateCacheRuleRequest
        @return: CreateCacheRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_cache_rule_with_options(request, runtime)

    async def create_cache_rule_async(
        self,
        request: esa20240910_models.CreateCacheRuleRequest,
    ) -> esa20240910_models.CreateCacheRuleResponse:
        """
        @summary Create a new site cache configuration
        
        @param request: CreateCacheRuleRequest
        @return: CreateCacheRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_cache_rule_with_options_async(request, runtime)

    def create_client_certificate_with_options(
        self,
        request: esa20240910_models.CreateClientCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateClientCertificateResponse:
        """
        @summary Uses the ESA-managed certificate authority (CA) to issue client certificates.
        
        @param request: CreateClientCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateClientCertificateResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        body = {}
        if not UtilClient.is_unset(request.csr):
            body['CSR'] = request.csr
        if not UtilClient.is_unset(request.pkey_type):
            body['PkeyType'] = request.pkey_type
        if not UtilClient.is_unset(request.validity_days):
            body['ValidityDays'] = request.validity_days
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateClientCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateClientCertificateResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_client_certificate_with_options_async(
        self,
        request: esa20240910_models.CreateClientCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateClientCertificateResponse:
        """
        @summary Uses the ESA-managed certificate authority (CA) to issue client certificates.
        
        @param request: CreateClientCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateClientCertificateResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        body = {}
        if not UtilClient.is_unset(request.csr):
            body['CSR'] = request.csr
        if not UtilClient.is_unset(request.pkey_type):
            body['PkeyType'] = request.pkey_type
        if not UtilClient.is_unset(request.validity_days):
            body['ValidityDays'] = request.validity_days
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateClientCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateClientCertificateResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_client_certificate(
        self,
        request: esa20240910_models.CreateClientCertificateRequest,
    ) -> esa20240910_models.CreateClientCertificateResponse:
        """
        @summary Uses the ESA-managed certificate authority (CA) to issue client certificates.
        
        @param request: CreateClientCertificateRequest
        @return: CreateClientCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_client_certificate_with_options(request, runtime)

    async def create_client_certificate_async(
        self,
        request: esa20240910_models.CreateClientCertificateRequest,
    ) -> esa20240910_models.CreateClientCertificateResponse:
        """
        @summary Uses the ESA-managed certificate authority (CA) to issue client certificates.
        
        @param request: CreateClientCertificateRequest
        @return: CreateClientCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_client_certificate_with_options_async(request, runtime)

    def create_compression_rule_with_options(
        self,
        request: esa20240910_models.CreateCompressionRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateCompressionRuleResponse:
        """
        @summary Add a compression rule
        
        @param request: CreateCompressionRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateCompressionRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.brotli):
            query['Brotli'] = request.brotli
        if not UtilClient.is_unset(request.gzip):
            query['Gzip'] = request.gzip
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        if not UtilClient.is_unset(request.zstd):
            query['Zstd'] = request.zstd
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateCompressionRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateCompressionRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_compression_rule_with_options_async(
        self,
        request: esa20240910_models.CreateCompressionRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateCompressionRuleResponse:
        """
        @summary Add a compression rule
        
        @param request: CreateCompressionRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateCompressionRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.brotli):
            query['Brotli'] = request.brotli
        if not UtilClient.is_unset(request.gzip):
            query['Gzip'] = request.gzip
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        if not UtilClient.is_unset(request.zstd):
            query['Zstd'] = request.zstd
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateCompressionRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateCompressionRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_compression_rule(
        self,
        request: esa20240910_models.CreateCompressionRuleRequest,
    ) -> esa20240910_models.CreateCompressionRuleResponse:
        """
        @summary Add a compression rule
        
        @param request: CreateCompressionRuleRequest
        @return: CreateCompressionRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_compression_rule_with_options(request, runtime)

    async def create_compression_rule_async(
        self,
        request: esa20240910_models.CreateCompressionRuleRequest,
    ) -> esa20240910_models.CreateCompressionRuleResponse:
        """
        @summary Add a compression rule
        
        @param request: CreateCompressionRuleRequest
        @return: CreateCompressionRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_compression_rule_with_options_async(request, runtime)

    def create_custom_scene_policy_with_options(
        self,
        request: esa20240910_models.CreateCustomScenePolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateCustomScenePolicyResponse:
        """
        @summary Creates an account-level custom scenario policy. You can execute a policy after you associate the policy with a website.
        
        @param request: CreateCustomScenePolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateCustomScenePolicyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.objects):
            query['Objects'] = request.objects
        if not UtilClient.is_unset(request.site_ids):
            query['SiteIds'] = request.site_ids
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.template):
            query['Template'] = request.template
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateCustomScenePolicy',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateCustomScenePolicyResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_custom_scene_policy_with_options_async(
        self,
        request: esa20240910_models.CreateCustomScenePolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateCustomScenePolicyResponse:
        """
        @summary Creates an account-level custom scenario policy. You can execute a policy after you associate the policy with a website.
        
        @param request: CreateCustomScenePolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateCustomScenePolicyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.objects):
            query['Objects'] = request.objects
        if not UtilClient.is_unset(request.site_ids):
            query['SiteIds'] = request.site_ids
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.template):
            query['Template'] = request.template
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateCustomScenePolicy',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateCustomScenePolicyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_custom_scene_policy(
        self,
        request: esa20240910_models.CreateCustomScenePolicyRequest,
    ) -> esa20240910_models.CreateCustomScenePolicyResponse:
        """
        @summary Creates an account-level custom scenario policy. You can execute a policy after you associate the policy with a website.
        
        @param request: CreateCustomScenePolicyRequest
        @return: CreateCustomScenePolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_custom_scene_policy_with_options(request, runtime)

    async def create_custom_scene_policy_async(
        self,
        request: esa20240910_models.CreateCustomScenePolicyRequest,
    ) -> esa20240910_models.CreateCustomScenePolicyResponse:
        """
        @summary Creates an account-level custom scenario policy. You can execute a policy after you associate the policy with a website.
        
        @param request: CreateCustomScenePolicyRequest
        @return: CreateCustomScenePolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_custom_scene_policy_with_options_async(request, runtime)

    def create_edge_container_app_with_options(
        self,
        request: esa20240910_models.CreateEdgeContainerAppRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateEdgeContainerAppResponse:
        """
        @summary Creates a containerized application. You can deploy and release a version of the application across points of presence (POPs).
        
        @param request: CreateEdgeContainerAppRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateEdgeContainerAppResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.health_check_fail_times):
            body['HealthCheckFailTimes'] = request.health_check_fail_times
        if not UtilClient.is_unset(request.health_check_host):
            body['HealthCheckHost'] = request.health_check_host
        if not UtilClient.is_unset(request.health_check_http_code):
            body['HealthCheckHttpCode'] = request.health_check_http_code
        if not UtilClient.is_unset(request.health_check_interval):
            body['HealthCheckInterval'] = request.health_check_interval
        if not UtilClient.is_unset(request.health_check_method):
            body['HealthCheckMethod'] = request.health_check_method
        if not UtilClient.is_unset(request.health_check_port):
            body['HealthCheckPort'] = request.health_check_port
        if not UtilClient.is_unset(request.health_check_succ_times):
            body['HealthCheckSuccTimes'] = request.health_check_succ_times
        if not UtilClient.is_unset(request.health_check_timeout):
            body['HealthCheckTimeout'] = request.health_check_timeout
        if not UtilClient.is_unset(request.health_check_type):
            body['HealthCheckType'] = request.health_check_type
        if not UtilClient.is_unset(request.health_check_uri):
            body['HealthCheckURI'] = request.health_check_uri
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.remarks):
            body['Remarks'] = request.remarks
        if not UtilClient.is_unset(request.service_port):
            body['ServicePort'] = request.service_port
        if not UtilClient.is_unset(request.target_port):
            body['TargetPort'] = request.target_port
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateEdgeContainerApp',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateEdgeContainerAppResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_edge_container_app_with_options_async(
        self,
        request: esa20240910_models.CreateEdgeContainerAppRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateEdgeContainerAppResponse:
        """
        @summary Creates a containerized application. You can deploy and release a version of the application across points of presence (POPs).
        
        @param request: CreateEdgeContainerAppRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateEdgeContainerAppResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.health_check_fail_times):
            body['HealthCheckFailTimes'] = request.health_check_fail_times
        if not UtilClient.is_unset(request.health_check_host):
            body['HealthCheckHost'] = request.health_check_host
        if not UtilClient.is_unset(request.health_check_http_code):
            body['HealthCheckHttpCode'] = request.health_check_http_code
        if not UtilClient.is_unset(request.health_check_interval):
            body['HealthCheckInterval'] = request.health_check_interval
        if not UtilClient.is_unset(request.health_check_method):
            body['HealthCheckMethod'] = request.health_check_method
        if not UtilClient.is_unset(request.health_check_port):
            body['HealthCheckPort'] = request.health_check_port
        if not UtilClient.is_unset(request.health_check_succ_times):
            body['HealthCheckSuccTimes'] = request.health_check_succ_times
        if not UtilClient.is_unset(request.health_check_timeout):
            body['HealthCheckTimeout'] = request.health_check_timeout
        if not UtilClient.is_unset(request.health_check_type):
            body['HealthCheckType'] = request.health_check_type
        if not UtilClient.is_unset(request.health_check_uri):
            body['HealthCheckURI'] = request.health_check_uri
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.remarks):
            body['Remarks'] = request.remarks
        if not UtilClient.is_unset(request.service_port):
            body['ServicePort'] = request.service_port
        if not UtilClient.is_unset(request.target_port):
            body['TargetPort'] = request.target_port
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateEdgeContainerApp',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateEdgeContainerAppResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_edge_container_app(
        self,
        request: esa20240910_models.CreateEdgeContainerAppRequest,
    ) -> esa20240910_models.CreateEdgeContainerAppResponse:
        """
        @summary Creates a containerized application. You can deploy and release a version of the application across points of presence (POPs).
        
        @param request: CreateEdgeContainerAppRequest
        @return: CreateEdgeContainerAppResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_edge_container_app_with_options(request, runtime)

    async def create_edge_container_app_async(
        self,
        request: esa20240910_models.CreateEdgeContainerAppRequest,
    ) -> esa20240910_models.CreateEdgeContainerAppResponse:
        """
        @summary Creates a containerized application. You can deploy and release a version of the application across points of presence (POPs).
        
        @param request: CreateEdgeContainerAppRequest
        @return: CreateEdgeContainerAppResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_edge_container_app_with_options_async(request, runtime)

    def create_edge_container_app_record_with_options(
        self,
        request: esa20240910_models.CreateEdgeContainerAppRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateEdgeContainerAppRecordResponse:
        """
        @summary Associates a domain name with a containerized application. This way, requests destined for the associated domain name are forwarded to the application.
        
        @param request: CreateEdgeContainerAppRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateEdgeContainerAppRecordResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.app_id):
            body['AppId'] = request.app_id
        if not UtilClient.is_unset(request.record_name):
            body['RecordName'] = request.record_name
        if not UtilClient.is_unset(request.site_id):
            body['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateEdgeContainerAppRecord',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateEdgeContainerAppRecordResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_edge_container_app_record_with_options_async(
        self,
        request: esa20240910_models.CreateEdgeContainerAppRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateEdgeContainerAppRecordResponse:
        """
        @summary Associates a domain name with a containerized application. This way, requests destined for the associated domain name are forwarded to the application.
        
        @param request: CreateEdgeContainerAppRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateEdgeContainerAppRecordResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.app_id):
            body['AppId'] = request.app_id
        if not UtilClient.is_unset(request.record_name):
            body['RecordName'] = request.record_name
        if not UtilClient.is_unset(request.site_id):
            body['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateEdgeContainerAppRecord',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateEdgeContainerAppRecordResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_edge_container_app_record(
        self,
        request: esa20240910_models.CreateEdgeContainerAppRecordRequest,
    ) -> esa20240910_models.CreateEdgeContainerAppRecordResponse:
        """
        @summary Associates a domain name with a containerized application. This way, requests destined for the associated domain name are forwarded to the application.
        
        @param request: CreateEdgeContainerAppRecordRequest
        @return: CreateEdgeContainerAppRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_edge_container_app_record_with_options(request, runtime)

    async def create_edge_container_app_record_async(
        self,
        request: esa20240910_models.CreateEdgeContainerAppRecordRequest,
    ) -> esa20240910_models.CreateEdgeContainerAppRecordResponse:
        """
        @summary Associates a domain name with a containerized application. This way, requests destined for the associated domain name are forwarded to the application.
        
        @param request: CreateEdgeContainerAppRecordRequest
        @return: CreateEdgeContainerAppRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_edge_container_app_record_with_options_async(request, runtime)

    def create_edge_container_app_version_with_options(
        self,
        tmp_req: esa20240910_models.CreateEdgeContainerAppVersionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateEdgeContainerAppVersionResponse:
        """
        @summary Creates a version for a containerized application. You can iterate the application based on the version.
        
        @param tmp_req: CreateEdgeContainerAppVersionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateEdgeContainerAppVersionResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.CreateEdgeContainerAppVersionShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.containers):
            request.containers_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.containers, 'Containers', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_id):
            body['AppId'] = request.app_id
        if not UtilClient.is_unset(request.containers_shrink):
            body['Containers'] = request.containers_shrink
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.remarks):
            body['Remarks'] = request.remarks
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateEdgeContainerAppVersion',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateEdgeContainerAppVersionResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_edge_container_app_version_with_options_async(
        self,
        tmp_req: esa20240910_models.CreateEdgeContainerAppVersionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateEdgeContainerAppVersionResponse:
        """
        @summary Creates a version for a containerized application. You can iterate the application based on the version.
        
        @param tmp_req: CreateEdgeContainerAppVersionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateEdgeContainerAppVersionResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.CreateEdgeContainerAppVersionShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.containers):
            request.containers_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.containers, 'Containers', 'json')
        body = {}
        if not UtilClient.is_unset(request.app_id):
            body['AppId'] = request.app_id
        if not UtilClient.is_unset(request.containers_shrink):
            body['Containers'] = request.containers_shrink
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.remarks):
            body['Remarks'] = request.remarks
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateEdgeContainerAppVersion',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateEdgeContainerAppVersionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_edge_container_app_version(
        self,
        request: esa20240910_models.CreateEdgeContainerAppVersionRequest,
    ) -> esa20240910_models.CreateEdgeContainerAppVersionResponse:
        """
        @summary Creates a version for a containerized application. You can iterate the application based on the version.
        
        @param request: CreateEdgeContainerAppVersionRequest
        @return: CreateEdgeContainerAppVersionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_edge_container_app_version_with_options(request, runtime)

    async def create_edge_container_app_version_async(
        self,
        request: esa20240910_models.CreateEdgeContainerAppVersionRequest,
    ) -> esa20240910_models.CreateEdgeContainerAppVersionResponse:
        """
        @summary Creates a version for a containerized application. You can iterate the application based on the version.
        
        @param request: CreateEdgeContainerAppVersionRequest
        @return: CreateEdgeContainerAppVersionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_edge_container_app_version_with_options_async(request, runtime)

    def create_http_incoming_request_header_modification_rule_with_options(
        self,
        tmp_req: esa20240910_models.CreateHttpIncomingRequestHeaderModificationRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateHttpIncomingRequestHeaderModificationRuleResponse:
        """
        @summary 新增HTTP入站请求头规则
        
        @param tmp_req: CreateHttpIncomingRequestHeaderModificationRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateHttpIncomingRequestHeaderModificationRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.CreateHttpIncomingRequestHeaderModificationRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.request_header_modification):
            request.request_header_modification_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.request_header_modification, 'RequestHeaderModification', 'json')
        query = {}
        if not UtilClient.is_unset(request.request_header_modification_shrink):
            query['RequestHeaderModification'] = request.request_header_modification_shrink
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateHttpIncomingRequestHeaderModificationRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateHttpIncomingRequestHeaderModificationRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_http_incoming_request_header_modification_rule_with_options_async(
        self,
        tmp_req: esa20240910_models.CreateHttpIncomingRequestHeaderModificationRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateHttpIncomingRequestHeaderModificationRuleResponse:
        """
        @summary 新增HTTP入站请求头规则
        
        @param tmp_req: CreateHttpIncomingRequestHeaderModificationRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateHttpIncomingRequestHeaderModificationRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.CreateHttpIncomingRequestHeaderModificationRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.request_header_modification):
            request.request_header_modification_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.request_header_modification, 'RequestHeaderModification', 'json')
        query = {}
        if not UtilClient.is_unset(request.request_header_modification_shrink):
            query['RequestHeaderModification'] = request.request_header_modification_shrink
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateHttpIncomingRequestHeaderModificationRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateHttpIncomingRequestHeaderModificationRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_http_incoming_request_header_modification_rule(
        self,
        request: esa20240910_models.CreateHttpIncomingRequestHeaderModificationRuleRequest,
    ) -> esa20240910_models.CreateHttpIncomingRequestHeaderModificationRuleResponse:
        """
        @summary 新增HTTP入站请求头规则
        
        @param request: CreateHttpIncomingRequestHeaderModificationRuleRequest
        @return: CreateHttpIncomingRequestHeaderModificationRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_http_incoming_request_header_modification_rule_with_options(request, runtime)

    async def create_http_incoming_request_header_modification_rule_async(
        self,
        request: esa20240910_models.CreateHttpIncomingRequestHeaderModificationRuleRequest,
    ) -> esa20240910_models.CreateHttpIncomingRequestHeaderModificationRuleResponse:
        """
        @summary 新增HTTP入站请求头规则
        
        @param request: CreateHttpIncomingRequestHeaderModificationRuleRequest
        @return: CreateHttpIncomingRequestHeaderModificationRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_http_incoming_request_header_modification_rule_with_options_async(request, runtime)

    def create_http_incoming_response_header_modification_rule_with_options(
        self,
        tmp_req: esa20240910_models.CreateHttpIncomingResponseHeaderModificationRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateHttpIncomingResponseHeaderModificationRuleResponse:
        """
        @summary 新增HTTP入站响应头规则
        
        @param tmp_req: CreateHttpIncomingResponseHeaderModificationRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateHttpIncomingResponseHeaderModificationRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.CreateHttpIncomingResponseHeaderModificationRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.response_header_modification):
            request.response_header_modification_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.response_header_modification, 'ResponseHeaderModification', 'json')
        query = {}
        if not UtilClient.is_unset(request.response_header_modification_shrink):
            query['ResponseHeaderModification'] = request.response_header_modification_shrink
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateHttpIncomingResponseHeaderModificationRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateHttpIncomingResponseHeaderModificationRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_http_incoming_response_header_modification_rule_with_options_async(
        self,
        tmp_req: esa20240910_models.CreateHttpIncomingResponseHeaderModificationRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateHttpIncomingResponseHeaderModificationRuleResponse:
        """
        @summary 新增HTTP入站响应头规则
        
        @param tmp_req: CreateHttpIncomingResponseHeaderModificationRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateHttpIncomingResponseHeaderModificationRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.CreateHttpIncomingResponseHeaderModificationRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.response_header_modification):
            request.response_header_modification_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.response_header_modification, 'ResponseHeaderModification', 'json')
        query = {}
        if not UtilClient.is_unset(request.response_header_modification_shrink):
            query['ResponseHeaderModification'] = request.response_header_modification_shrink
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateHttpIncomingResponseHeaderModificationRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateHttpIncomingResponseHeaderModificationRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_http_incoming_response_header_modification_rule(
        self,
        request: esa20240910_models.CreateHttpIncomingResponseHeaderModificationRuleRequest,
    ) -> esa20240910_models.CreateHttpIncomingResponseHeaderModificationRuleResponse:
        """
        @summary 新增HTTP入站响应头规则
        
        @param request: CreateHttpIncomingResponseHeaderModificationRuleRequest
        @return: CreateHttpIncomingResponseHeaderModificationRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_http_incoming_response_header_modification_rule_with_options(request, runtime)

    async def create_http_incoming_response_header_modification_rule_async(
        self,
        request: esa20240910_models.CreateHttpIncomingResponseHeaderModificationRuleRequest,
    ) -> esa20240910_models.CreateHttpIncomingResponseHeaderModificationRuleResponse:
        """
        @summary 新增HTTP入站响应头规则
        
        @param request: CreateHttpIncomingResponseHeaderModificationRuleRequest
        @return: CreateHttpIncomingResponseHeaderModificationRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_http_incoming_response_header_modification_rule_with_options_async(request, runtime)

    def create_http_request_header_modification_rule_with_options(
        self,
        tmp_req: esa20240910_models.CreateHttpRequestHeaderModificationRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateHttpRequestHeaderModificationRuleResponse:
        """
        @summary Add HTTP Request Header Rule
        
        @param tmp_req: CreateHttpRequestHeaderModificationRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateHttpRequestHeaderModificationRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.CreateHttpRequestHeaderModificationRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.request_header_modification):
            request.request_header_modification_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.request_header_modification, 'RequestHeaderModification', 'json')
        query = {}
        if not UtilClient.is_unset(request.request_header_modification_shrink):
            query['RequestHeaderModification'] = request.request_header_modification_shrink
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateHttpRequestHeaderModificationRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateHttpRequestHeaderModificationRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_http_request_header_modification_rule_with_options_async(
        self,
        tmp_req: esa20240910_models.CreateHttpRequestHeaderModificationRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateHttpRequestHeaderModificationRuleResponse:
        """
        @summary Add HTTP Request Header Rule
        
        @param tmp_req: CreateHttpRequestHeaderModificationRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateHttpRequestHeaderModificationRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.CreateHttpRequestHeaderModificationRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.request_header_modification):
            request.request_header_modification_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.request_header_modification, 'RequestHeaderModification', 'json')
        query = {}
        if not UtilClient.is_unset(request.request_header_modification_shrink):
            query['RequestHeaderModification'] = request.request_header_modification_shrink
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateHttpRequestHeaderModificationRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateHttpRequestHeaderModificationRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_http_request_header_modification_rule(
        self,
        request: esa20240910_models.CreateHttpRequestHeaderModificationRuleRequest,
    ) -> esa20240910_models.CreateHttpRequestHeaderModificationRuleResponse:
        """
        @summary Add HTTP Request Header Rule
        
        @param request: CreateHttpRequestHeaderModificationRuleRequest
        @return: CreateHttpRequestHeaderModificationRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_http_request_header_modification_rule_with_options(request, runtime)

    async def create_http_request_header_modification_rule_async(
        self,
        request: esa20240910_models.CreateHttpRequestHeaderModificationRuleRequest,
    ) -> esa20240910_models.CreateHttpRequestHeaderModificationRuleResponse:
        """
        @summary Add HTTP Request Header Rule
        
        @param request: CreateHttpRequestHeaderModificationRuleRequest
        @return: CreateHttpRequestHeaderModificationRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_http_request_header_modification_rule_with_options_async(request, runtime)

    def create_http_response_header_modification_rule_with_options(
        self,
        tmp_req: esa20240910_models.CreateHttpResponseHeaderModificationRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateHttpResponseHeaderModificationRuleResponse:
        """
        @summary Add HTTP Response Header Rule
        
        @param tmp_req: CreateHttpResponseHeaderModificationRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateHttpResponseHeaderModificationRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.CreateHttpResponseHeaderModificationRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.response_header_modification):
            request.response_header_modification_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.response_header_modification, 'ResponseHeaderModification', 'json')
        query = {}
        if not UtilClient.is_unset(request.response_header_modification_shrink):
            query['ResponseHeaderModification'] = request.response_header_modification_shrink
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateHttpResponseHeaderModificationRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateHttpResponseHeaderModificationRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_http_response_header_modification_rule_with_options_async(
        self,
        tmp_req: esa20240910_models.CreateHttpResponseHeaderModificationRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateHttpResponseHeaderModificationRuleResponse:
        """
        @summary Add HTTP Response Header Rule
        
        @param tmp_req: CreateHttpResponseHeaderModificationRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateHttpResponseHeaderModificationRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.CreateHttpResponseHeaderModificationRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.response_header_modification):
            request.response_header_modification_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.response_header_modification, 'ResponseHeaderModification', 'json')
        query = {}
        if not UtilClient.is_unset(request.response_header_modification_shrink):
            query['ResponseHeaderModification'] = request.response_header_modification_shrink
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateHttpResponseHeaderModificationRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateHttpResponseHeaderModificationRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_http_response_header_modification_rule(
        self,
        request: esa20240910_models.CreateHttpResponseHeaderModificationRuleRequest,
    ) -> esa20240910_models.CreateHttpResponseHeaderModificationRuleResponse:
        """
        @summary Add HTTP Response Header Rule
        
        @param request: CreateHttpResponseHeaderModificationRuleRequest
        @return: CreateHttpResponseHeaderModificationRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_http_response_header_modification_rule_with_options(request, runtime)

    async def create_http_response_header_modification_rule_async(
        self,
        request: esa20240910_models.CreateHttpResponseHeaderModificationRuleRequest,
    ) -> esa20240910_models.CreateHttpResponseHeaderModificationRuleResponse:
        """
        @summary Add HTTP Response Header Rule
        
        @param request: CreateHttpResponseHeaderModificationRuleRequest
        @return: CreateHttpResponseHeaderModificationRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_http_response_header_modification_rule_with_options_async(request, runtime)

    def create_https_application_configuration_with_options(
        self,
        request: esa20240910_models.CreateHttpsApplicationConfigurationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateHttpsApplicationConfigurationResponse:
        """
        @summary Create a new site HTTPS application configuration
        
        @param request: CreateHttpsApplicationConfigurationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateHttpsApplicationConfigurationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.alt_svc):
            query['AltSvc'] = request.alt_svc
        if not UtilClient.is_unset(request.alt_svc_clear):
            query['AltSvcClear'] = request.alt_svc_clear
        if not UtilClient.is_unset(request.alt_svc_ma):
            query['AltSvcMa'] = request.alt_svc_ma
        if not UtilClient.is_unset(request.alt_svc_persist):
            query['AltSvcPersist'] = request.alt_svc_persist
        if not UtilClient.is_unset(request.hsts):
            query['Hsts'] = request.hsts
        if not UtilClient.is_unset(request.hsts_include_subdomains):
            query['HstsIncludeSubdomains'] = request.hsts_include_subdomains
        if not UtilClient.is_unset(request.hsts_max_age):
            query['HstsMaxAge'] = request.hsts_max_age
        if not UtilClient.is_unset(request.hsts_preload):
            query['HstsPreload'] = request.hsts_preload
        if not UtilClient.is_unset(request.https_force):
            query['HttpsForce'] = request.https_force
        if not UtilClient.is_unset(request.https_force_code):
            query['HttpsForceCode'] = request.https_force_code
        if not UtilClient.is_unset(request.https_no_sni_deny):
            query['HttpsNoSniDeny'] = request.https_no_sni_deny
        if not UtilClient.is_unset(request.https_sni_verify):
            query['HttpsSniVerify'] = request.https_sni_verify
        if not UtilClient.is_unset(request.https_sni_whitelist):
            query['HttpsSniWhitelist'] = request.https_sni_whitelist
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateHttpsApplicationConfiguration',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateHttpsApplicationConfigurationResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_https_application_configuration_with_options_async(
        self,
        request: esa20240910_models.CreateHttpsApplicationConfigurationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateHttpsApplicationConfigurationResponse:
        """
        @summary Create a new site HTTPS application configuration
        
        @param request: CreateHttpsApplicationConfigurationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateHttpsApplicationConfigurationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.alt_svc):
            query['AltSvc'] = request.alt_svc
        if not UtilClient.is_unset(request.alt_svc_clear):
            query['AltSvcClear'] = request.alt_svc_clear
        if not UtilClient.is_unset(request.alt_svc_ma):
            query['AltSvcMa'] = request.alt_svc_ma
        if not UtilClient.is_unset(request.alt_svc_persist):
            query['AltSvcPersist'] = request.alt_svc_persist
        if not UtilClient.is_unset(request.hsts):
            query['Hsts'] = request.hsts
        if not UtilClient.is_unset(request.hsts_include_subdomains):
            query['HstsIncludeSubdomains'] = request.hsts_include_subdomains
        if not UtilClient.is_unset(request.hsts_max_age):
            query['HstsMaxAge'] = request.hsts_max_age
        if not UtilClient.is_unset(request.hsts_preload):
            query['HstsPreload'] = request.hsts_preload
        if not UtilClient.is_unset(request.https_force):
            query['HttpsForce'] = request.https_force
        if not UtilClient.is_unset(request.https_force_code):
            query['HttpsForceCode'] = request.https_force_code
        if not UtilClient.is_unset(request.https_no_sni_deny):
            query['HttpsNoSniDeny'] = request.https_no_sni_deny
        if not UtilClient.is_unset(request.https_sni_verify):
            query['HttpsSniVerify'] = request.https_sni_verify
        if not UtilClient.is_unset(request.https_sni_whitelist):
            query['HttpsSniWhitelist'] = request.https_sni_whitelist
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateHttpsApplicationConfiguration',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateHttpsApplicationConfigurationResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_https_application_configuration(
        self,
        request: esa20240910_models.CreateHttpsApplicationConfigurationRequest,
    ) -> esa20240910_models.CreateHttpsApplicationConfigurationResponse:
        """
        @summary Create a new site HTTPS application configuration
        
        @param request: CreateHttpsApplicationConfigurationRequest
        @return: CreateHttpsApplicationConfigurationResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_https_application_configuration_with_options(request, runtime)

    async def create_https_application_configuration_async(
        self,
        request: esa20240910_models.CreateHttpsApplicationConfigurationRequest,
    ) -> esa20240910_models.CreateHttpsApplicationConfigurationResponse:
        """
        @summary Create a new site HTTPS application configuration
        
        @param request: CreateHttpsApplicationConfigurationRequest
        @return: CreateHttpsApplicationConfigurationResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_https_application_configuration_with_options_async(request, runtime)

    def create_https_basic_configuration_with_options(
        self,
        request: esa20240910_models.CreateHttpsBasicConfigurationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateHttpsBasicConfigurationResponse:
        """
        @summary Create a new site HTTPS basic configuration
        
        @param request: CreateHttpsBasicConfigurationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateHttpsBasicConfigurationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.ciphersuite):
            query['Ciphersuite'] = request.ciphersuite
        if not UtilClient.is_unset(request.ciphersuite_group):
            query['CiphersuiteGroup'] = request.ciphersuite_group
        if not UtilClient.is_unset(request.http_2):
            query['Http2'] = request.http_2
        if not UtilClient.is_unset(request.http_3):
            query['Http3'] = request.http_3
        if not UtilClient.is_unset(request.https):
            query['Https'] = request.https
        if not UtilClient.is_unset(request.ocsp_stapling):
            query['OcspStapling'] = request.ocsp_stapling
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.tls_10):
            query['Tls10'] = request.tls_10
        if not UtilClient.is_unset(request.tls_11):
            query['Tls11'] = request.tls_11
        if not UtilClient.is_unset(request.tls_12):
            query['Tls12'] = request.tls_12
        if not UtilClient.is_unset(request.tls_13):
            query['Tls13'] = request.tls_13
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateHttpsBasicConfiguration',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateHttpsBasicConfigurationResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_https_basic_configuration_with_options_async(
        self,
        request: esa20240910_models.CreateHttpsBasicConfigurationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateHttpsBasicConfigurationResponse:
        """
        @summary Create a new site HTTPS basic configuration
        
        @param request: CreateHttpsBasicConfigurationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateHttpsBasicConfigurationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.ciphersuite):
            query['Ciphersuite'] = request.ciphersuite
        if not UtilClient.is_unset(request.ciphersuite_group):
            query['CiphersuiteGroup'] = request.ciphersuite_group
        if not UtilClient.is_unset(request.http_2):
            query['Http2'] = request.http_2
        if not UtilClient.is_unset(request.http_3):
            query['Http3'] = request.http_3
        if not UtilClient.is_unset(request.https):
            query['Https'] = request.https
        if not UtilClient.is_unset(request.ocsp_stapling):
            query['OcspStapling'] = request.ocsp_stapling
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.tls_10):
            query['Tls10'] = request.tls_10
        if not UtilClient.is_unset(request.tls_11):
            query['Tls11'] = request.tls_11
        if not UtilClient.is_unset(request.tls_12):
            query['Tls12'] = request.tls_12
        if not UtilClient.is_unset(request.tls_13):
            query['Tls13'] = request.tls_13
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateHttpsBasicConfiguration',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateHttpsBasicConfigurationResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_https_basic_configuration(
        self,
        request: esa20240910_models.CreateHttpsBasicConfigurationRequest,
    ) -> esa20240910_models.CreateHttpsBasicConfigurationResponse:
        """
        @summary Create a new site HTTPS basic configuration
        
        @param request: CreateHttpsBasicConfigurationRequest
        @return: CreateHttpsBasicConfigurationResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_https_basic_configuration_with_options(request, runtime)

    async def create_https_basic_configuration_async(
        self,
        request: esa20240910_models.CreateHttpsBasicConfigurationRequest,
    ) -> esa20240910_models.CreateHttpsBasicConfigurationResponse:
        """
        @summary Create a new site HTTPS basic configuration
        
        @param request: CreateHttpsBasicConfigurationRequest
        @return: CreateHttpsBasicConfigurationResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_https_basic_configuration_with_options_async(request, runtime)

    def create_image_transform_with_options(
        self,
        request: esa20240910_models.CreateImageTransformRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateImageTransformResponse:
        """
        @summary Add Site Image Transformation Configuration
        
        @param request: CreateImageTransformRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateImageTransformResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.enable):
            query['Enable'] = request.enable
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateImageTransform',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateImageTransformResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_image_transform_with_options_async(
        self,
        request: esa20240910_models.CreateImageTransformRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateImageTransformResponse:
        """
        @summary Add Site Image Transformation Configuration
        
        @param request: CreateImageTransformRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateImageTransformResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.enable):
            query['Enable'] = request.enable
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateImageTransform',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateImageTransformResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_image_transform(
        self,
        request: esa20240910_models.CreateImageTransformRequest,
    ) -> esa20240910_models.CreateImageTransformResponse:
        """
        @summary Add Site Image Transformation Configuration
        
        @param request: CreateImageTransformRequest
        @return: CreateImageTransformResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_image_transform_with_options(request, runtime)

    async def create_image_transform_async(
        self,
        request: esa20240910_models.CreateImageTransformRequest,
    ) -> esa20240910_models.CreateImageTransformResponse:
        """
        @summary Add Site Image Transformation Configuration
        
        @param request: CreateImageTransformRequest
        @return: CreateImageTransformResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_image_transform_with_options_async(request, runtime)

    def create_kv_namespace_with_options(
        self,
        request: esa20240910_models.CreateKvNamespaceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateKvNamespaceResponse:
        """
        @summary Create a namespace in your Alibaba Cloud account.
        
        @param request: CreateKvNamespaceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateKvNamespaceResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.namespace):
            body['Namespace'] = request.namespace
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateKvNamespace',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateKvNamespaceResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_kv_namespace_with_options_async(
        self,
        request: esa20240910_models.CreateKvNamespaceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateKvNamespaceResponse:
        """
        @summary Create a namespace in your Alibaba Cloud account.
        
        @param request: CreateKvNamespaceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateKvNamespaceResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.namespace):
            body['Namespace'] = request.namespace
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateKvNamespace',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateKvNamespaceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_kv_namespace(
        self,
        request: esa20240910_models.CreateKvNamespaceRequest,
    ) -> esa20240910_models.CreateKvNamespaceResponse:
        """
        @summary Create a namespace in your Alibaba Cloud account.
        
        @param request: CreateKvNamespaceRequest
        @return: CreateKvNamespaceResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_kv_namespace_with_options(request, runtime)

    async def create_kv_namespace_async(
        self,
        request: esa20240910_models.CreateKvNamespaceRequest,
    ) -> esa20240910_models.CreateKvNamespaceResponse:
        """
        @summary Create a namespace in your Alibaba Cloud account.
        
        @param request: CreateKvNamespaceRequest
        @return: CreateKvNamespaceResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_kv_namespace_with_options_async(request, runtime)

    def create_list_with_options(
        self,
        tmp_req: esa20240910_models.CreateListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateListResponse:
        """
        @summary Creates a list. Lists are used for the referencing of values in the rules engine to implement complex logic and control in security policies.
        
        @param tmp_req: CreateListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateListResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.CreateListShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.items):
            request.items_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.items, 'Items', 'json')
        body = {}
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.items_shrink):
            body['Items'] = request.items_shrink
        if not UtilClient.is_unset(request.kind):
            body['Kind'] = request.kind
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateList',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateListResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_list_with_options_async(
        self,
        tmp_req: esa20240910_models.CreateListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateListResponse:
        """
        @summary Creates a list. Lists are used for the referencing of values in the rules engine to implement complex logic and control in security policies.
        
        @param tmp_req: CreateListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateListResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.CreateListShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.items):
            request.items_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.items, 'Items', 'json')
        body = {}
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.items_shrink):
            body['Items'] = request.items_shrink
        if not UtilClient.is_unset(request.kind):
            body['Kind'] = request.kind
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateList',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_list(
        self,
        request: esa20240910_models.CreateListRequest,
    ) -> esa20240910_models.CreateListResponse:
        """
        @summary Creates a list. Lists are used for the referencing of values in the rules engine to implement complex logic and control in security policies.
        
        @param request: CreateListRequest
        @return: CreateListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_list_with_options(request, runtime)

    async def create_list_async(
        self,
        request: esa20240910_models.CreateListRequest,
    ) -> esa20240910_models.CreateListResponse:
        """
        @summary Creates a list. Lists are used for the referencing of values in the rules engine to implement complex logic and control in security policies.
        
        @param request: CreateListRequest
        @return: CreateListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_list_with_options_async(request, runtime)

    def create_load_balancer_with_options(
        self,
        tmp_req: esa20240910_models.CreateLoadBalancerRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateLoadBalancerResponse:
        """
        @summary Add a New Load Balancer
        
        @description Through this API, users can configure load balancing services according to their business needs, including but not limited to adaptive routing, weighted round-robin, rule matching, health checks, and more, to achieve effective traffic management and optimization.
        
        @param tmp_req: CreateLoadBalancerRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateLoadBalancerResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.CreateLoadBalancerShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.adaptive_routing):
            request.adaptive_routing_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.adaptive_routing, 'AdaptiveRouting', 'json')
        if not UtilClient.is_unset(tmp_req.default_pools):
            request.default_pools_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.default_pools, 'DefaultPools', 'json')
        if not UtilClient.is_unset(tmp_req.monitor):
            request.monitor_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.monitor, 'Monitor', 'json')
        if not UtilClient.is_unset(tmp_req.random_steering):
            request.random_steering_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.random_steering, 'RandomSteering', 'json')
        if not UtilClient.is_unset(tmp_req.rules):
            request.rules_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.rules, 'Rules', 'json')
        query = {}
        if not UtilClient.is_unset(request.adaptive_routing_shrink):
            query['AdaptiveRouting'] = request.adaptive_routing_shrink
        if not UtilClient.is_unset(request.default_pools_shrink):
            query['DefaultPools'] = request.default_pools_shrink
        if not UtilClient.is_unset(request.description):
            query['Description'] = request.description
        if not UtilClient.is_unset(request.enabled):
            query['Enabled'] = request.enabled
        if not UtilClient.is_unset(request.fallback_pool):
            query['FallbackPool'] = request.fallback_pool
        if not UtilClient.is_unset(request.monitor_shrink):
            query['Monitor'] = request.monitor_shrink
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.random_steering_shrink):
            query['RandomSteering'] = request.random_steering_shrink
        if not UtilClient.is_unset(request.region_pools):
            query['RegionPools'] = request.region_pools
        if not UtilClient.is_unset(request.rules_shrink):
            query['Rules'] = request.rules_shrink
        if not UtilClient.is_unset(request.session_affinity):
            query['SessionAffinity'] = request.session_affinity
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.steering_policy):
            query['SteeringPolicy'] = request.steering_policy
        if not UtilClient.is_unset(request.sub_region_pools):
            query['SubRegionPools'] = request.sub_region_pools
        if not UtilClient.is_unset(request.ttl):
            query['Ttl'] = request.ttl
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateLoadBalancer',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateLoadBalancerResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_load_balancer_with_options_async(
        self,
        tmp_req: esa20240910_models.CreateLoadBalancerRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateLoadBalancerResponse:
        """
        @summary Add a New Load Balancer
        
        @description Through this API, users can configure load balancing services according to their business needs, including but not limited to adaptive routing, weighted round-robin, rule matching, health checks, and more, to achieve effective traffic management and optimization.
        
        @param tmp_req: CreateLoadBalancerRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateLoadBalancerResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.CreateLoadBalancerShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.adaptive_routing):
            request.adaptive_routing_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.adaptive_routing, 'AdaptiveRouting', 'json')
        if not UtilClient.is_unset(tmp_req.default_pools):
            request.default_pools_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.default_pools, 'DefaultPools', 'json')
        if not UtilClient.is_unset(tmp_req.monitor):
            request.monitor_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.monitor, 'Monitor', 'json')
        if not UtilClient.is_unset(tmp_req.random_steering):
            request.random_steering_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.random_steering, 'RandomSteering', 'json')
        if not UtilClient.is_unset(tmp_req.rules):
            request.rules_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.rules, 'Rules', 'json')
        query = {}
        if not UtilClient.is_unset(request.adaptive_routing_shrink):
            query['AdaptiveRouting'] = request.adaptive_routing_shrink
        if not UtilClient.is_unset(request.default_pools_shrink):
            query['DefaultPools'] = request.default_pools_shrink
        if not UtilClient.is_unset(request.description):
            query['Description'] = request.description
        if not UtilClient.is_unset(request.enabled):
            query['Enabled'] = request.enabled
        if not UtilClient.is_unset(request.fallback_pool):
            query['FallbackPool'] = request.fallback_pool
        if not UtilClient.is_unset(request.monitor_shrink):
            query['Monitor'] = request.monitor_shrink
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.random_steering_shrink):
            query['RandomSteering'] = request.random_steering_shrink
        if not UtilClient.is_unset(request.region_pools):
            query['RegionPools'] = request.region_pools
        if not UtilClient.is_unset(request.rules_shrink):
            query['Rules'] = request.rules_shrink
        if not UtilClient.is_unset(request.session_affinity):
            query['SessionAffinity'] = request.session_affinity
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.steering_policy):
            query['SteeringPolicy'] = request.steering_policy
        if not UtilClient.is_unset(request.sub_region_pools):
            query['SubRegionPools'] = request.sub_region_pools
        if not UtilClient.is_unset(request.ttl):
            query['Ttl'] = request.ttl
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateLoadBalancer',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateLoadBalancerResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_load_balancer(
        self,
        request: esa20240910_models.CreateLoadBalancerRequest,
    ) -> esa20240910_models.CreateLoadBalancerResponse:
        """
        @summary Add a New Load Balancer
        
        @description Through this API, users can configure load balancing services according to their business needs, including but not limited to adaptive routing, weighted round-robin, rule matching, health checks, and more, to achieve effective traffic management and optimization.
        
        @param request: CreateLoadBalancerRequest
        @return: CreateLoadBalancerResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_load_balancer_with_options(request, runtime)

    async def create_load_balancer_async(
        self,
        request: esa20240910_models.CreateLoadBalancerRequest,
    ) -> esa20240910_models.CreateLoadBalancerResponse:
        """
        @summary Add a New Load Balancer
        
        @description Through this API, users can configure load balancing services according to their business needs, including but not limited to adaptive routing, weighted round-robin, rule matching, health checks, and more, to achieve effective traffic management and optimization.
        
        @param request: CreateLoadBalancerRequest
        @return: CreateLoadBalancerResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_load_balancer_with_options_async(request, runtime)

    def create_network_optimization_with_options(
        self,
        request: esa20240910_models.CreateNetworkOptimizationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateNetworkOptimizationResponse:
        """
        @summary Create a new site network optimization configuration
        
        @param request: CreateNetworkOptimizationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateNetworkOptimizationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.grpc):
            query['Grpc'] = request.grpc
        if not UtilClient.is_unset(request.http_2origin):
            query['Http2Origin'] = request.http_2origin
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        if not UtilClient.is_unset(request.smart_routing):
            query['SmartRouting'] = request.smart_routing
        if not UtilClient.is_unset(request.upload_max_filesize):
            query['UploadMaxFilesize'] = request.upload_max_filesize
        if not UtilClient.is_unset(request.websocket):
            query['Websocket'] = request.websocket
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateNetworkOptimization',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateNetworkOptimizationResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_network_optimization_with_options_async(
        self,
        request: esa20240910_models.CreateNetworkOptimizationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateNetworkOptimizationResponse:
        """
        @summary Create a new site network optimization configuration
        
        @param request: CreateNetworkOptimizationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateNetworkOptimizationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.grpc):
            query['Grpc'] = request.grpc
        if not UtilClient.is_unset(request.http_2origin):
            query['Http2Origin'] = request.http_2origin
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        if not UtilClient.is_unset(request.smart_routing):
            query['SmartRouting'] = request.smart_routing
        if not UtilClient.is_unset(request.upload_max_filesize):
            query['UploadMaxFilesize'] = request.upload_max_filesize
        if not UtilClient.is_unset(request.websocket):
            query['Websocket'] = request.websocket
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateNetworkOptimization',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateNetworkOptimizationResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_network_optimization(
        self,
        request: esa20240910_models.CreateNetworkOptimizationRequest,
    ) -> esa20240910_models.CreateNetworkOptimizationResponse:
        """
        @summary Create a new site network optimization configuration
        
        @param request: CreateNetworkOptimizationRequest
        @return: CreateNetworkOptimizationResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_network_optimization_with_options(request, runtime)

    async def create_network_optimization_async(
        self,
        request: esa20240910_models.CreateNetworkOptimizationRequest,
    ) -> esa20240910_models.CreateNetworkOptimizationResponse:
        """
        @summary Create a new site network optimization configuration
        
        @param request: CreateNetworkOptimizationRequest
        @return: CreateNetworkOptimizationResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_network_optimization_with_options_async(request, runtime)

    def create_origin_pool_with_options(
        self,
        tmp_req: esa20240910_models.CreateOriginPoolRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateOriginPoolResponse:
        """
        @summary Add a new origin address pool
        
        @description Multiple origins can be added under the origin address, supporting domain names, IPs, OSS, S3, and other types of origins. It supports authentication for OSS and S3 type origins.
        
        @param tmp_req: CreateOriginPoolRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateOriginPoolResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.CreateOriginPoolShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.origins):
            request.origins_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.origins, 'Origins', 'json')
        query = {}
        if not UtilClient.is_unset(request.enabled):
            query['Enabled'] = request.enabled
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.origins_shrink):
            query['Origins'] = request.origins_shrink
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateOriginPool',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateOriginPoolResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_origin_pool_with_options_async(
        self,
        tmp_req: esa20240910_models.CreateOriginPoolRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateOriginPoolResponse:
        """
        @summary Add a new origin address pool
        
        @description Multiple origins can be added under the origin address, supporting domain names, IPs, OSS, S3, and other types of origins. It supports authentication for OSS and S3 type origins.
        
        @param tmp_req: CreateOriginPoolRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateOriginPoolResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.CreateOriginPoolShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.origins):
            request.origins_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.origins, 'Origins', 'json')
        query = {}
        if not UtilClient.is_unset(request.enabled):
            query['Enabled'] = request.enabled
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.origins_shrink):
            query['Origins'] = request.origins_shrink
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateOriginPool',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateOriginPoolResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_origin_pool(
        self,
        request: esa20240910_models.CreateOriginPoolRequest,
    ) -> esa20240910_models.CreateOriginPoolResponse:
        """
        @summary Add a new origin address pool
        
        @description Multiple origins can be added under the origin address, supporting domain names, IPs, OSS, S3, and other types of origins. It supports authentication for OSS and S3 type origins.
        
        @param request: CreateOriginPoolRequest
        @return: CreateOriginPoolResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_origin_pool_with_options(request, runtime)

    async def create_origin_pool_async(
        self,
        request: esa20240910_models.CreateOriginPoolRequest,
    ) -> esa20240910_models.CreateOriginPoolResponse:
        """
        @summary Add a new origin address pool
        
        @description Multiple origins can be added under the origin address, supporting domain names, IPs, OSS, S3, and other types of origins. It supports authentication for OSS and S3 type origins.
        
        @param request: CreateOriginPoolRequest
        @return: CreateOriginPoolResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_origin_pool_with_options_async(request, runtime)

    def create_origin_protection_with_options(
        self,
        request: esa20240910_models.CreateOriginProtectionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateOriginProtectionResponse:
        """
        @summary Enables origin protection.
        
        @param request: CreateOriginProtectionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateOriginProtectionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateOriginProtection',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateOriginProtectionResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_origin_protection_with_options_async(
        self,
        request: esa20240910_models.CreateOriginProtectionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateOriginProtectionResponse:
        """
        @summary Enables origin protection.
        
        @param request: CreateOriginProtectionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateOriginProtectionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateOriginProtection',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateOriginProtectionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_origin_protection(
        self,
        request: esa20240910_models.CreateOriginProtectionRequest,
    ) -> esa20240910_models.CreateOriginProtectionResponse:
        """
        @summary Enables origin protection.
        
        @param request: CreateOriginProtectionRequest
        @return: CreateOriginProtectionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_origin_protection_with_options(request, runtime)

    async def create_origin_protection_async(
        self,
        request: esa20240910_models.CreateOriginProtectionRequest,
    ) -> esa20240910_models.CreateOriginProtectionResponse:
        """
        @summary Enables origin protection.
        
        @param request: CreateOriginProtectionRequest
        @return: CreateOriginProtectionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_origin_protection_with_options_async(request, runtime)

    def create_origin_rule_with_options(
        self,
        request: esa20240910_models.CreateOriginRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateOriginRuleResponse:
        """
        @summary Create a new origin rule configuration for the site
        
        @param request: CreateOriginRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateOriginRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.dns_record):
            query['DnsRecord'] = request.dns_record
        if not UtilClient.is_unset(request.follow_302enable):
            query['Follow302Enable'] = request.follow_302enable
        if not UtilClient.is_unset(request.follow_302max_tries):
            query['Follow302MaxTries'] = request.follow_302max_tries
        if not UtilClient.is_unset(request.follow_302retain_args):
            query['Follow302RetainArgs'] = request.follow_302retain_args
        if not UtilClient.is_unset(request.follow_302retain_header):
            query['Follow302RetainHeader'] = request.follow_302retain_header
        if not UtilClient.is_unset(request.follow_302target_host):
            query['Follow302TargetHost'] = request.follow_302target_host
        if not UtilClient.is_unset(request.origin_host):
            query['OriginHost'] = request.origin_host
        if not UtilClient.is_unset(request.origin_http_port):
            query['OriginHttpPort'] = request.origin_http_port
        if not UtilClient.is_unset(request.origin_https_port):
            query['OriginHttpsPort'] = request.origin_https_port
        if not UtilClient.is_unset(request.origin_mtls):
            query['OriginMtls'] = request.origin_mtls
        if not UtilClient.is_unset(request.origin_read_timeout):
            query['OriginReadTimeout'] = request.origin_read_timeout
        if not UtilClient.is_unset(request.origin_scheme):
            query['OriginScheme'] = request.origin_scheme
        if not UtilClient.is_unset(request.origin_sni):
            query['OriginSni'] = request.origin_sni
        if not UtilClient.is_unset(request.origin_verify):
            query['OriginVerify'] = request.origin_verify
        if not UtilClient.is_unset(request.range):
            query['Range'] = request.range
        if not UtilClient.is_unset(request.range_chunk_size):
            query['RangeChunkSize'] = request.range_chunk_size
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateOriginRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateOriginRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_origin_rule_with_options_async(
        self,
        request: esa20240910_models.CreateOriginRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateOriginRuleResponse:
        """
        @summary Create a new origin rule configuration for the site
        
        @param request: CreateOriginRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateOriginRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.dns_record):
            query['DnsRecord'] = request.dns_record
        if not UtilClient.is_unset(request.follow_302enable):
            query['Follow302Enable'] = request.follow_302enable
        if not UtilClient.is_unset(request.follow_302max_tries):
            query['Follow302MaxTries'] = request.follow_302max_tries
        if not UtilClient.is_unset(request.follow_302retain_args):
            query['Follow302RetainArgs'] = request.follow_302retain_args
        if not UtilClient.is_unset(request.follow_302retain_header):
            query['Follow302RetainHeader'] = request.follow_302retain_header
        if not UtilClient.is_unset(request.follow_302target_host):
            query['Follow302TargetHost'] = request.follow_302target_host
        if not UtilClient.is_unset(request.origin_host):
            query['OriginHost'] = request.origin_host
        if not UtilClient.is_unset(request.origin_http_port):
            query['OriginHttpPort'] = request.origin_http_port
        if not UtilClient.is_unset(request.origin_https_port):
            query['OriginHttpsPort'] = request.origin_https_port
        if not UtilClient.is_unset(request.origin_mtls):
            query['OriginMtls'] = request.origin_mtls
        if not UtilClient.is_unset(request.origin_read_timeout):
            query['OriginReadTimeout'] = request.origin_read_timeout
        if not UtilClient.is_unset(request.origin_scheme):
            query['OriginScheme'] = request.origin_scheme
        if not UtilClient.is_unset(request.origin_sni):
            query['OriginSni'] = request.origin_sni
        if not UtilClient.is_unset(request.origin_verify):
            query['OriginVerify'] = request.origin_verify
        if not UtilClient.is_unset(request.range):
            query['Range'] = request.range
        if not UtilClient.is_unset(request.range_chunk_size):
            query['RangeChunkSize'] = request.range_chunk_size
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateOriginRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateOriginRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_origin_rule(
        self,
        request: esa20240910_models.CreateOriginRuleRequest,
    ) -> esa20240910_models.CreateOriginRuleResponse:
        """
        @summary Create a new origin rule configuration for the site
        
        @param request: CreateOriginRuleRequest
        @return: CreateOriginRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_origin_rule_with_options(request, runtime)

    async def create_origin_rule_async(
        self,
        request: esa20240910_models.CreateOriginRuleRequest,
    ) -> esa20240910_models.CreateOriginRuleResponse:
        """
        @summary Create a new origin rule configuration for the site
        
        @param request: CreateOriginRuleRequest
        @return: CreateOriginRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_origin_rule_with_options_async(request, runtime)

    def create_page_with_options(
        self,
        request: esa20240910_models.CreatePageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreatePageResponse:
        """
        @summary Creates a custom error page, which is displayed when a request is blocked by Web Application Firewall (WAF). You can configure the HTML content, page type, and description, and submit the Base64-encoded page content.
        
        @param request: CreatePageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreatePageResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.content):
            body['Content'] = request.content
        if not UtilClient.is_unset(request.content_type):
            body['ContentType'] = request.content_type
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreatePage',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreatePageResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_page_with_options_async(
        self,
        request: esa20240910_models.CreatePageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreatePageResponse:
        """
        @summary Creates a custom error page, which is displayed when a request is blocked by Web Application Firewall (WAF). You can configure the HTML content, page type, and description, and submit the Base64-encoded page content.
        
        @param request: CreatePageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreatePageResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.content):
            body['Content'] = request.content
        if not UtilClient.is_unset(request.content_type):
            body['ContentType'] = request.content_type
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreatePage',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreatePageResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_page(
        self,
        request: esa20240910_models.CreatePageRequest,
    ) -> esa20240910_models.CreatePageResponse:
        """
        @summary Creates a custom error page, which is displayed when a request is blocked by Web Application Firewall (WAF). You can configure the HTML content, page type, and description, and submit the Base64-encoded page content.
        
        @param request: CreatePageRequest
        @return: CreatePageResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_page_with_options(request, runtime)

    async def create_page_async(
        self,
        request: esa20240910_models.CreatePageRequest,
    ) -> esa20240910_models.CreatePageResponse:
        """
        @summary Creates a custom error page, which is displayed when a request is blocked by Web Application Firewall (WAF). You can configure the HTML content, page type, and description, and submit the Base64-encoded page content.
        
        @param request: CreatePageRequest
        @return: CreatePageResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_page_with_options_async(request, runtime)

    def create_record_with_options(
        self,
        tmp_req: esa20240910_models.CreateRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateRecordResponse:
        """
        @summary Creates a DNS record for a specific website.
        
        @param tmp_req: CreateRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateRecordResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.CreateRecordShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.auth_conf):
            request.auth_conf_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.auth_conf, 'AuthConf', 'json')
        if not UtilClient.is_unset(tmp_req.data):
            request.data_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.data, 'Data', 'json')
        query = {}
        if not UtilClient.is_unset(request.auth_conf_shrink):
            query['AuthConf'] = request.auth_conf_shrink
        if not UtilClient.is_unset(request.biz_name):
            query['BizName'] = request.biz_name
        if not UtilClient.is_unset(request.comment):
            query['Comment'] = request.comment
        if not UtilClient.is_unset(request.data_shrink):
            query['Data'] = request.data_shrink
        if not UtilClient.is_unset(request.host_policy):
            query['HostPolicy'] = request.host_policy
        if not UtilClient.is_unset(request.proxied):
            query['Proxied'] = request.proxied
        if not UtilClient.is_unset(request.record_name):
            query['RecordName'] = request.record_name
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.source_type):
            query['SourceType'] = request.source_type
        if not UtilClient.is_unset(request.ttl):
            query['Ttl'] = request.ttl
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateRecord',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateRecordResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_record_with_options_async(
        self,
        tmp_req: esa20240910_models.CreateRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateRecordResponse:
        """
        @summary Creates a DNS record for a specific website.
        
        @param tmp_req: CreateRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateRecordResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.CreateRecordShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.auth_conf):
            request.auth_conf_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.auth_conf, 'AuthConf', 'json')
        if not UtilClient.is_unset(tmp_req.data):
            request.data_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.data, 'Data', 'json')
        query = {}
        if not UtilClient.is_unset(request.auth_conf_shrink):
            query['AuthConf'] = request.auth_conf_shrink
        if not UtilClient.is_unset(request.biz_name):
            query['BizName'] = request.biz_name
        if not UtilClient.is_unset(request.comment):
            query['Comment'] = request.comment
        if not UtilClient.is_unset(request.data_shrink):
            query['Data'] = request.data_shrink
        if not UtilClient.is_unset(request.host_policy):
            query['HostPolicy'] = request.host_policy
        if not UtilClient.is_unset(request.proxied):
            query['Proxied'] = request.proxied
        if not UtilClient.is_unset(request.record_name):
            query['RecordName'] = request.record_name
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.source_type):
            query['SourceType'] = request.source_type
        if not UtilClient.is_unset(request.ttl):
            query['Ttl'] = request.ttl
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateRecord',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateRecordResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_record(
        self,
        request: esa20240910_models.CreateRecordRequest,
    ) -> esa20240910_models.CreateRecordResponse:
        """
        @summary Creates a DNS record for a specific website.
        
        @param request: CreateRecordRequest
        @return: CreateRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_record_with_options(request, runtime)

    async def create_record_async(
        self,
        request: esa20240910_models.CreateRecordRequest,
    ) -> esa20240910_models.CreateRecordResponse:
        """
        @summary Creates a DNS record for a specific website.
        
        @param request: CreateRecordRequest
        @return: CreateRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_record_with_options_async(request, runtime)

    def create_redirect_rule_with_options(
        self,
        request: esa20240910_models.CreateRedirectRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateRedirectRuleResponse:
        """
        @summary Add a Redirect Rule
        
        @param request: CreateRedirectRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateRedirectRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.reserve_query_string):
            query['ReserveQueryString'] = request.reserve_query_string
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        if not UtilClient.is_unset(request.status_code):
            query['StatusCode'] = request.status_code
        if not UtilClient.is_unset(request.target_url):
            query['TargetUrl'] = request.target_url
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateRedirectRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateRedirectRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_redirect_rule_with_options_async(
        self,
        request: esa20240910_models.CreateRedirectRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateRedirectRuleResponse:
        """
        @summary Add a Redirect Rule
        
        @param request: CreateRedirectRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateRedirectRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.reserve_query_string):
            query['ReserveQueryString'] = request.reserve_query_string
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        if not UtilClient.is_unset(request.status_code):
            query['StatusCode'] = request.status_code
        if not UtilClient.is_unset(request.target_url):
            query['TargetUrl'] = request.target_url
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateRedirectRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateRedirectRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_redirect_rule(
        self,
        request: esa20240910_models.CreateRedirectRuleRequest,
    ) -> esa20240910_models.CreateRedirectRuleResponse:
        """
        @summary Add a Redirect Rule
        
        @param request: CreateRedirectRuleRequest
        @return: CreateRedirectRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_redirect_rule_with_options(request, runtime)

    async def create_redirect_rule_async(
        self,
        request: esa20240910_models.CreateRedirectRuleRequest,
    ) -> esa20240910_models.CreateRedirectRuleResponse:
        """
        @summary Add a Redirect Rule
        
        @param request: CreateRedirectRuleRequest
        @return: CreateRedirectRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_redirect_rule_with_options_async(request, runtime)

    def create_rewrite_url_rule_with_options(
        self,
        request: esa20240910_models.CreateRewriteUrlRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateRewriteUrlRuleResponse:
        """
        @summary Add Rewrite URL Rule
        
        @param request: CreateRewriteUrlRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateRewriteUrlRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.query_string):
            query['QueryString'] = request.query_string
        if not UtilClient.is_unset(request.rewrite_query_string_type):
            query['RewriteQueryStringType'] = request.rewrite_query_string_type
        if not UtilClient.is_unset(request.rewrite_uri_type):
            query['RewriteUriType'] = request.rewrite_uri_type
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        if not UtilClient.is_unset(request.uri):
            query['Uri'] = request.uri
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateRewriteUrlRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateRewriteUrlRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_rewrite_url_rule_with_options_async(
        self,
        request: esa20240910_models.CreateRewriteUrlRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateRewriteUrlRuleResponse:
        """
        @summary Add Rewrite URL Rule
        
        @param request: CreateRewriteUrlRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateRewriteUrlRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.query_string):
            query['QueryString'] = request.query_string
        if not UtilClient.is_unset(request.rewrite_query_string_type):
            query['RewriteQueryStringType'] = request.rewrite_query_string_type
        if not UtilClient.is_unset(request.rewrite_uri_type):
            query['RewriteUriType'] = request.rewrite_uri_type
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        if not UtilClient.is_unset(request.uri):
            query['Uri'] = request.uri
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateRewriteUrlRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateRewriteUrlRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_rewrite_url_rule(
        self,
        request: esa20240910_models.CreateRewriteUrlRuleRequest,
    ) -> esa20240910_models.CreateRewriteUrlRuleResponse:
        """
        @summary Add Rewrite URL Rule
        
        @param request: CreateRewriteUrlRuleRequest
        @return: CreateRewriteUrlRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_rewrite_url_rule_with_options(request, runtime)

    async def create_rewrite_url_rule_async(
        self,
        request: esa20240910_models.CreateRewriteUrlRuleRequest,
    ) -> esa20240910_models.CreateRewriteUrlRuleResponse:
        """
        @summary Add Rewrite URL Rule
        
        @param request: CreateRewriteUrlRuleRequest
        @return: CreateRewriteUrlRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_rewrite_url_rule_with_options_async(request, runtime)

    def create_routine_with_options(
        self,
        request: esa20240910_models.CreateRoutineRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateRoutineResponse:
        """
        @summary Creates a routine.
        
        @param request: CreateRoutineRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateRoutineResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.has_assets):
            body['HasAssets'] = request.has_assets
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateRoutine',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateRoutineResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_routine_with_options_async(
        self,
        request: esa20240910_models.CreateRoutineRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateRoutineResponse:
        """
        @summary Creates a routine.
        
        @param request: CreateRoutineRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateRoutineResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.has_assets):
            body['HasAssets'] = request.has_assets
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateRoutine',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateRoutineResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_routine(
        self,
        request: esa20240910_models.CreateRoutineRequest,
    ) -> esa20240910_models.CreateRoutineResponse:
        """
        @summary Creates a routine.
        
        @param request: CreateRoutineRequest
        @return: CreateRoutineResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_routine_with_options(request, runtime)

    async def create_routine_async(
        self,
        request: esa20240910_models.CreateRoutineRequest,
    ) -> esa20240910_models.CreateRoutineResponse:
        """
        @summary Creates a routine.
        
        @param request: CreateRoutineRequest
        @return: CreateRoutineResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_routine_with_options_async(request, runtime)

    def create_routine_code_deployment_with_options(
        self,
        tmp_req: esa20240910_models.CreateRoutineCodeDeploymentRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateRoutineCodeDeploymentResponse:
        """
        @summary 发布Routine某版本代码
        
        @param tmp_req: CreateRoutineCodeDeploymentRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateRoutineCodeDeploymentResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.CreateRoutineCodeDeploymentShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.code_versions):
            request.code_versions_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.code_versions, 'CodeVersions', 'json')
        body = {}
        if not UtilClient.is_unset(request.code_versions_shrink):
            body['CodeVersions'] = request.code_versions_shrink
        if not UtilClient.is_unset(request.env):
            body['Env'] = request.env
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.strategy):
            body['Strategy'] = request.strategy
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateRoutineCodeDeployment',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateRoutineCodeDeploymentResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_routine_code_deployment_with_options_async(
        self,
        tmp_req: esa20240910_models.CreateRoutineCodeDeploymentRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateRoutineCodeDeploymentResponse:
        """
        @summary 发布Routine某版本代码
        
        @param tmp_req: CreateRoutineCodeDeploymentRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateRoutineCodeDeploymentResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.CreateRoutineCodeDeploymentShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.code_versions):
            request.code_versions_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.code_versions, 'CodeVersions', 'json')
        body = {}
        if not UtilClient.is_unset(request.code_versions_shrink):
            body['CodeVersions'] = request.code_versions_shrink
        if not UtilClient.is_unset(request.env):
            body['Env'] = request.env
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.strategy):
            body['Strategy'] = request.strategy
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateRoutineCodeDeployment',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateRoutineCodeDeploymentResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_routine_code_deployment(
        self,
        request: esa20240910_models.CreateRoutineCodeDeploymentRequest,
    ) -> esa20240910_models.CreateRoutineCodeDeploymentResponse:
        """
        @summary 发布Routine某版本代码
        
        @param request: CreateRoutineCodeDeploymentRequest
        @return: CreateRoutineCodeDeploymentResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_routine_code_deployment_with_options(request, runtime)

    async def create_routine_code_deployment_async(
        self,
        request: esa20240910_models.CreateRoutineCodeDeploymentRequest,
    ) -> esa20240910_models.CreateRoutineCodeDeploymentResponse:
        """
        @summary 发布Routine某版本代码
        
        @param request: CreateRoutineCodeDeploymentRequest
        @return: CreateRoutineCodeDeploymentResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_routine_code_deployment_with_options_async(request, runtime)

    def create_routine_related_record_with_options(
        self,
        request: esa20240910_models.CreateRoutineRelatedRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateRoutineRelatedRecordResponse:
        """
        @summary Adds a record to map a domain that is associated with a routine. This record is used to trigger the associated routine code.
        
        @param request: CreateRoutineRelatedRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateRoutineRelatedRecordResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.record_name):
            body['RecordName'] = request.record_name
        if not UtilClient.is_unset(request.site_id):
            body['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateRoutineRelatedRecord',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateRoutineRelatedRecordResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_routine_related_record_with_options_async(
        self,
        request: esa20240910_models.CreateRoutineRelatedRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateRoutineRelatedRecordResponse:
        """
        @summary Adds a record to map a domain that is associated with a routine. This record is used to trigger the associated routine code.
        
        @param request: CreateRoutineRelatedRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateRoutineRelatedRecordResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.record_name):
            body['RecordName'] = request.record_name
        if not UtilClient.is_unset(request.site_id):
            body['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateRoutineRelatedRecord',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateRoutineRelatedRecordResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_routine_related_record(
        self,
        request: esa20240910_models.CreateRoutineRelatedRecordRequest,
    ) -> esa20240910_models.CreateRoutineRelatedRecordResponse:
        """
        @summary Adds a record to map a domain that is associated with a routine. This record is used to trigger the associated routine code.
        
        @param request: CreateRoutineRelatedRecordRequest
        @return: CreateRoutineRelatedRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_routine_related_record_with_options(request, runtime)

    async def create_routine_related_record_async(
        self,
        request: esa20240910_models.CreateRoutineRelatedRecordRequest,
    ) -> esa20240910_models.CreateRoutineRelatedRecordResponse:
        """
        @summary Adds a record to map a domain that is associated with a routine. This record is used to trigger the associated routine code.
        
        @param request: CreateRoutineRelatedRecordRequest
        @return: CreateRoutineRelatedRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_routine_related_record_with_options_async(request, runtime)

    def create_routine_route_with_options(
        self,
        request: esa20240910_models.CreateRoutineRouteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateRoutineRouteResponse:
        """
        @summary 新增边缘函数路由配置
        
        @param request: CreateRoutineRouteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateRoutineRouteResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.bypass):
            query['Bypass'] = request.bypass
        if not UtilClient.is_unset(request.fallback):
            query['Fallback'] = request.fallback
        if not UtilClient.is_unset(request.route_enable):
            query['RouteEnable'] = request.route_enable
        if not UtilClient.is_unset(request.route_name):
            query['RouteName'] = request.route_name
        if not UtilClient.is_unset(request.routine_name):
            query['RoutineName'] = request.routine_name
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateRoutineRoute',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateRoutineRouteResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_routine_route_with_options_async(
        self,
        request: esa20240910_models.CreateRoutineRouteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateRoutineRouteResponse:
        """
        @summary 新增边缘函数路由配置
        
        @param request: CreateRoutineRouteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateRoutineRouteResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.bypass):
            query['Bypass'] = request.bypass
        if not UtilClient.is_unset(request.fallback):
            query['Fallback'] = request.fallback
        if not UtilClient.is_unset(request.route_enable):
            query['RouteEnable'] = request.route_enable
        if not UtilClient.is_unset(request.route_name):
            query['RouteName'] = request.route_name
        if not UtilClient.is_unset(request.routine_name):
            query['RoutineName'] = request.routine_name
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateRoutineRoute',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateRoutineRouteResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_routine_route(
        self,
        request: esa20240910_models.CreateRoutineRouteRequest,
    ) -> esa20240910_models.CreateRoutineRouteResponse:
        """
        @summary 新增边缘函数路由配置
        
        @param request: CreateRoutineRouteRequest
        @return: CreateRoutineRouteResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_routine_route_with_options(request, runtime)

    async def create_routine_route_async(
        self,
        request: esa20240910_models.CreateRoutineRouteRequest,
    ) -> esa20240910_models.CreateRoutineRouteResponse:
        """
        @summary 新增边缘函数路由配置
        
        @param request: CreateRoutineRouteRequest
        @return: CreateRoutineRouteResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_routine_route_with_options_async(request, runtime)

    def create_routine_with_assets_code_version_with_options(
        self,
        tmp_req: esa20240910_models.CreateRoutineWithAssetsCodeVersionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateRoutineWithAssetsCodeVersionResponse:
        """
        @summary 创建带Assets资源的Routine代码版本
        
        @param tmp_req: CreateRoutineWithAssetsCodeVersionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateRoutineWithAssetsCodeVersionResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.CreateRoutineWithAssetsCodeVersionShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.conf_options):
            request.conf_options_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.conf_options, 'ConfOptions', 'json')
        body = {}
        if not UtilClient.is_unset(request.build_id):
            body['BuildId'] = request.build_id
        if not UtilClient.is_unset(request.code_description):
            body['CodeDescription'] = request.code_description
        if not UtilClient.is_unset(request.conf_options_shrink):
            body['ConfOptions'] = request.conf_options_shrink
        if not UtilClient.is_unset(request.extra_info):
            body['ExtraInfo'] = request.extra_info
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateRoutineWithAssetsCodeVersion',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateRoutineWithAssetsCodeVersionResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_routine_with_assets_code_version_with_options_async(
        self,
        tmp_req: esa20240910_models.CreateRoutineWithAssetsCodeVersionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateRoutineWithAssetsCodeVersionResponse:
        """
        @summary 创建带Assets资源的Routine代码版本
        
        @param tmp_req: CreateRoutineWithAssetsCodeVersionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateRoutineWithAssetsCodeVersionResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.CreateRoutineWithAssetsCodeVersionShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.conf_options):
            request.conf_options_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.conf_options, 'ConfOptions', 'json')
        body = {}
        if not UtilClient.is_unset(request.build_id):
            body['BuildId'] = request.build_id
        if not UtilClient.is_unset(request.code_description):
            body['CodeDescription'] = request.code_description
        if not UtilClient.is_unset(request.conf_options_shrink):
            body['ConfOptions'] = request.conf_options_shrink
        if not UtilClient.is_unset(request.extra_info):
            body['ExtraInfo'] = request.extra_info
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateRoutineWithAssetsCodeVersion',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateRoutineWithAssetsCodeVersionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_routine_with_assets_code_version(
        self,
        request: esa20240910_models.CreateRoutineWithAssetsCodeVersionRequest,
    ) -> esa20240910_models.CreateRoutineWithAssetsCodeVersionResponse:
        """
        @summary 创建带Assets资源的Routine代码版本
        
        @param request: CreateRoutineWithAssetsCodeVersionRequest
        @return: CreateRoutineWithAssetsCodeVersionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_routine_with_assets_code_version_with_options(request, runtime)

    async def create_routine_with_assets_code_version_async(
        self,
        request: esa20240910_models.CreateRoutineWithAssetsCodeVersionRequest,
    ) -> esa20240910_models.CreateRoutineWithAssetsCodeVersionResponse:
        """
        @summary 创建带Assets资源的Routine代码版本
        
        @param request: CreateRoutineWithAssetsCodeVersionRequest
        @return: CreateRoutineWithAssetsCodeVersionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_routine_with_assets_code_version_with_options_async(request, runtime)

    def create_scheduled_preload_executions_with_options(
        self,
        tmp_req: esa20240910_models.CreateScheduledPreloadExecutionsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateScheduledPreloadExecutionsResponse:
        """
        @summary Creates scheduled prefetch plans.
        
        @param tmp_req: CreateScheduledPreloadExecutionsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateScheduledPreloadExecutionsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.CreateScheduledPreloadExecutionsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.executions):
            request.executions_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.executions, 'Executions', 'json')
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        body = {}
        if not UtilClient.is_unset(request.executions_shrink):
            body['Executions'] = request.executions_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateScheduledPreloadExecutions',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateScheduledPreloadExecutionsResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_scheduled_preload_executions_with_options_async(
        self,
        tmp_req: esa20240910_models.CreateScheduledPreloadExecutionsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateScheduledPreloadExecutionsResponse:
        """
        @summary Creates scheduled prefetch plans.
        
        @param tmp_req: CreateScheduledPreloadExecutionsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateScheduledPreloadExecutionsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.CreateScheduledPreloadExecutionsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.executions):
            request.executions_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.executions, 'Executions', 'json')
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        body = {}
        if not UtilClient.is_unset(request.executions_shrink):
            body['Executions'] = request.executions_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateScheduledPreloadExecutions',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateScheduledPreloadExecutionsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_scheduled_preload_executions(
        self,
        request: esa20240910_models.CreateScheduledPreloadExecutionsRequest,
    ) -> esa20240910_models.CreateScheduledPreloadExecutionsResponse:
        """
        @summary Creates scheduled prefetch plans.
        
        @param request: CreateScheduledPreloadExecutionsRequest
        @return: CreateScheduledPreloadExecutionsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_scheduled_preload_executions_with_options(request, runtime)

    async def create_scheduled_preload_executions_async(
        self,
        request: esa20240910_models.CreateScheduledPreloadExecutionsRequest,
    ) -> esa20240910_models.CreateScheduledPreloadExecutionsResponse:
        """
        @summary Creates scheduled prefetch plans.
        
        @param request: CreateScheduledPreloadExecutionsRequest
        @return: CreateScheduledPreloadExecutionsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_scheduled_preload_executions_with_options_async(request, runtime)

    def create_scheduled_preload_job_with_options(
        self,
        request: esa20240910_models.CreateScheduledPreloadJobRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateScheduledPreloadJobResponse:
        """
        @summary Adds a scheduled prefetch task.
        
        @param request: CreateScheduledPreloadJobRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateScheduledPreloadJobResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.insert_way):
            body['InsertWay'] = request.insert_way
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.oss_url):
            body['OssUrl'] = request.oss_url
        if not UtilClient.is_unset(request.site_id):
            body['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.url_list):
            body['UrlList'] = request.url_list
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateScheduledPreloadJob',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateScheduledPreloadJobResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_scheduled_preload_job_with_options_async(
        self,
        request: esa20240910_models.CreateScheduledPreloadJobRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateScheduledPreloadJobResponse:
        """
        @summary Adds a scheduled prefetch task.
        
        @param request: CreateScheduledPreloadJobRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateScheduledPreloadJobResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.insert_way):
            body['InsertWay'] = request.insert_way
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.oss_url):
            body['OssUrl'] = request.oss_url
        if not UtilClient.is_unset(request.site_id):
            body['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.url_list):
            body['UrlList'] = request.url_list
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateScheduledPreloadJob',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateScheduledPreloadJobResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_scheduled_preload_job(
        self,
        request: esa20240910_models.CreateScheduledPreloadJobRequest,
    ) -> esa20240910_models.CreateScheduledPreloadJobResponse:
        """
        @summary Adds a scheduled prefetch task.
        
        @param request: CreateScheduledPreloadJobRequest
        @return: CreateScheduledPreloadJobResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_scheduled_preload_job_with_options(request, runtime)

    async def create_scheduled_preload_job_async(
        self,
        request: esa20240910_models.CreateScheduledPreloadJobRequest,
    ) -> esa20240910_models.CreateScheduledPreloadJobResponse:
        """
        @summary Adds a scheduled prefetch task.
        
        @param request: CreateScheduledPreloadJobRequest
        @return: CreateScheduledPreloadJobResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_scheduled_preload_job_with_options_async(request, runtime)

    def create_site_with_options(
        self,
        request: esa20240910_models.CreateSiteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateSiteResponse:
        """
        @summary Adds a website.
        
        @description    Make sure that you have an available plan before you add a website.
        Make sure that your website domain name has an ICP filing if the location you want to specify covers the Chinese mainland.
        
        @param request: CreateSiteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateSiteResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.access_type):
            query['AccessType'] = request.access_type
        if not UtilClient.is_unset(request.coverage):
            query['Coverage'] = request.coverage
        if not UtilClient.is_unset(request.instance_id):
            query['InstanceId'] = request.instance_id
        if not UtilClient.is_unset(request.resource_group_id):
            query['ResourceGroupId'] = request.resource_group_id
        if not UtilClient.is_unset(request.site_name):
            query['SiteName'] = request.site_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateSite',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateSiteResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_site_with_options_async(
        self,
        request: esa20240910_models.CreateSiteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateSiteResponse:
        """
        @summary Adds a website.
        
        @description    Make sure that you have an available plan before you add a website.
        Make sure that your website domain name has an ICP filing if the location you want to specify covers the Chinese mainland.
        
        @param request: CreateSiteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateSiteResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.access_type):
            query['AccessType'] = request.access_type
        if not UtilClient.is_unset(request.coverage):
            query['Coverage'] = request.coverage
        if not UtilClient.is_unset(request.instance_id):
            query['InstanceId'] = request.instance_id
        if not UtilClient.is_unset(request.resource_group_id):
            query['ResourceGroupId'] = request.resource_group_id
        if not UtilClient.is_unset(request.site_name):
            query['SiteName'] = request.site_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateSite',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateSiteResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_site(
        self,
        request: esa20240910_models.CreateSiteRequest,
    ) -> esa20240910_models.CreateSiteResponse:
        """
        @summary Adds a website.
        
        @description    Make sure that you have an available plan before you add a website.
        Make sure that your website domain name has an ICP filing if the location you want to specify covers the Chinese mainland.
        
        @param request: CreateSiteRequest
        @return: CreateSiteResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_site_with_options(request, runtime)

    async def create_site_async(
        self,
        request: esa20240910_models.CreateSiteRequest,
    ) -> esa20240910_models.CreateSiteResponse:
        """
        @summary Adds a website.
        
        @description    Make sure that you have an available plan before you add a website.
        Make sure that your website domain name has an ICP filing if the location you want to specify covers the Chinese mainland.
        
        @param request: CreateSiteRequest
        @return: CreateSiteResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_site_with_options_async(request, runtime)

    def create_site_custom_log_with_options(
        self,
        tmp_req: esa20240910_models.CreateSiteCustomLogRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateSiteCustomLogResponse:
        """
        @summary Adds the configuration of custom request header, response header, and cookie fields that are used to capture logs of a website.
        
        @description    **Custom field limits**: The key name of a custom field can contain only letters, digits, underscores (_), and spaces. The key name cannot contain other characters. Otherwise, errors may occur.
        **Parameter passing**: Submit `SiteId`, `RequestHeaders`, `ResponseHeaders`, and `Cookies` by using `formData`. Each array element matches a custom field name.
        **(Required) SiteId**: Although `SiteId` is not marked as required in the Required column, you must specify a website ID by using this parameter when you can call this API operation.
        
        @param tmp_req: CreateSiteCustomLogRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateSiteCustomLogResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.CreateSiteCustomLogShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.cookies):
            request.cookies_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.cookies, 'Cookies', 'json')
        if not UtilClient.is_unset(tmp_req.request_headers):
            request.request_headers_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.request_headers, 'RequestHeaders', 'json')
        if not UtilClient.is_unset(tmp_req.response_headers):
            request.response_headers_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.response_headers, 'ResponseHeaders', 'json')
        body = {}
        if not UtilClient.is_unset(request.cookies_shrink):
            body['Cookies'] = request.cookies_shrink
        if not UtilClient.is_unset(request.request_headers_shrink):
            body['RequestHeaders'] = request.request_headers_shrink
        if not UtilClient.is_unset(request.response_headers_shrink):
            body['ResponseHeaders'] = request.response_headers_shrink
        if not UtilClient.is_unset(request.site_id):
            body['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateSiteCustomLog',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateSiteCustomLogResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_site_custom_log_with_options_async(
        self,
        tmp_req: esa20240910_models.CreateSiteCustomLogRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateSiteCustomLogResponse:
        """
        @summary Adds the configuration of custom request header, response header, and cookie fields that are used to capture logs of a website.
        
        @description    **Custom field limits**: The key name of a custom field can contain only letters, digits, underscores (_), and spaces. The key name cannot contain other characters. Otherwise, errors may occur.
        **Parameter passing**: Submit `SiteId`, `RequestHeaders`, `ResponseHeaders`, and `Cookies` by using `formData`. Each array element matches a custom field name.
        **(Required) SiteId**: Although `SiteId` is not marked as required in the Required column, you must specify a website ID by using this parameter when you can call this API operation.
        
        @param tmp_req: CreateSiteCustomLogRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateSiteCustomLogResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.CreateSiteCustomLogShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.cookies):
            request.cookies_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.cookies, 'Cookies', 'json')
        if not UtilClient.is_unset(tmp_req.request_headers):
            request.request_headers_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.request_headers, 'RequestHeaders', 'json')
        if not UtilClient.is_unset(tmp_req.response_headers):
            request.response_headers_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.response_headers, 'ResponseHeaders', 'json')
        body = {}
        if not UtilClient.is_unset(request.cookies_shrink):
            body['Cookies'] = request.cookies_shrink
        if not UtilClient.is_unset(request.request_headers_shrink):
            body['RequestHeaders'] = request.request_headers_shrink
        if not UtilClient.is_unset(request.response_headers_shrink):
            body['ResponseHeaders'] = request.response_headers_shrink
        if not UtilClient.is_unset(request.site_id):
            body['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateSiteCustomLog',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateSiteCustomLogResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_site_custom_log(
        self,
        request: esa20240910_models.CreateSiteCustomLogRequest,
    ) -> esa20240910_models.CreateSiteCustomLogResponse:
        """
        @summary Adds the configuration of custom request header, response header, and cookie fields that are used to capture logs of a website.
        
        @description    **Custom field limits**: The key name of a custom field can contain only letters, digits, underscores (_), and spaces. The key name cannot contain other characters. Otherwise, errors may occur.
        **Parameter passing**: Submit `SiteId`, `RequestHeaders`, `ResponseHeaders`, and `Cookies` by using `formData`. Each array element matches a custom field name.
        **(Required) SiteId**: Although `SiteId` is not marked as required in the Required column, you must specify a website ID by using this parameter when you can call this API operation.
        
        @param request: CreateSiteCustomLogRequest
        @return: CreateSiteCustomLogResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_site_custom_log_with_options(request, runtime)

    async def create_site_custom_log_async(
        self,
        request: esa20240910_models.CreateSiteCustomLogRequest,
    ) -> esa20240910_models.CreateSiteCustomLogResponse:
        """
        @summary Adds the configuration of custom request header, response header, and cookie fields that are used to capture logs of a website.
        
        @description    **Custom field limits**: The key name of a custom field can contain only letters, digits, underscores (_), and spaces. The key name cannot contain other characters. Otherwise, errors may occur.
        **Parameter passing**: Submit `SiteId`, `RequestHeaders`, `ResponseHeaders`, and `Cookies` by using `formData`. Each array element matches a custom field name.
        **(Required) SiteId**: Although `SiteId` is not marked as required in the Required column, you must specify a website ID by using this parameter when you can call this API operation.
        
        @param request: CreateSiteCustomLogRequest
        @return: CreateSiteCustomLogResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_site_custom_log_with_options_async(request, runtime)

    def create_site_delivery_task_with_options(
        self,
        tmp_req: esa20240910_models.CreateSiteDeliveryTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateSiteDeliveryTaskResponse:
        """
        @summary Creates a real-time log delivery task.
        
        @param tmp_req: CreateSiteDeliveryTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateSiteDeliveryTaskResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.CreateSiteDeliveryTaskShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.http_delivery):
            request.http_delivery_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.http_delivery, 'HttpDelivery', 'json')
        if not UtilClient.is_unset(tmp_req.kafka_delivery):
            request.kafka_delivery_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.kafka_delivery, 'KafkaDelivery', 'json')
        if not UtilClient.is_unset(tmp_req.oss_delivery):
            request.oss_delivery_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.oss_delivery, 'OssDelivery', 'json')
        if not UtilClient.is_unset(tmp_req.s_3delivery):
            request.s_3delivery_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.s_3delivery, 'S3Delivery', 'json')
        if not UtilClient.is_unset(tmp_req.sls_delivery):
            request.sls_delivery_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.sls_delivery, 'SlsDelivery', 'json')
        body = {}
        if not UtilClient.is_unset(request.business_type):
            body['BusinessType'] = request.business_type
        if not UtilClient.is_unset(request.data_center):
            body['DataCenter'] = request.data_center
        if not UtilClient.is_unset(request.delivery_type):
            body['DeliveryType'] = request.delivery_type
        if not UtilClient.is_unset(request.discard_rate):
            body['DiscardRate'] = request.discard_rate
        if not UtilClient.is_unset(request.field_name):
            body['FieldName'] = request.field_name
        if not UtilClient.is_unset(request.filter_ver):
            body['FilterVer'] = request.filter_ver
        if not UtilClient.is_unset(request.http_delivery_shrink):
            body['HttpDelivery'] = request.http_delivery_shrink
        if not UtilClient.is_unset(request.kafka_delivery_shrink):
            body['KafkaDelivery'] = request.kafka_delivery_shrink
        if not UtilClient.is_unset(request.oss_delivery_shrink):
            body['OssDelivery'] = request.oss_delivery_shrink
        if not UtilClient.is_unset(request.s_3delivery_shrink):
            body['S3Delivery'] = request.s_3delivery_shrink
        if not UtilClient.is_unset(request.site_id):
            body['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.sls_delivery_shrink):
            body['SlsDelivery'] = request.sls_delivery_shrink
        if not UtilClient.is_unset(request.task_name):
            body['TaskName'] = request.task_name
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateSiteDeliveryTask',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateSiteDeliveryTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_site_delivery_task_with_options_async(
        self,
        tmp_req: esa20240910_models.CreateSiteDeliveryTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateSiteDeliveryTaskResponse:
        """
        @summary Creates a real-time log delivery task.
        
        @param tmp_req: CreateSiteDeliveryTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateSiteDeliveryTaskResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.CreateSiteDeliveryTaskShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.http_delivery):
            request.http_delivery_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.http_delivery, 'HttpDelivery', 'json')
        if not UtilClient.is_unset(tmp_req.kafka_delivery):
            request.kafka_delivery_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.kafka_delivery, 'KafkaDelivery', 'json')
        if not UtilClient.is_unset(tmp_req.oss_delivery):
            request.oss_delivery_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.oss_delivery, 'OssDelivery', 'json')
        if not UtilClient.is_unset(tmp_req.s_3delivery):
            request.s_3delivery_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.s_3delivery, 'S3Delivery', 'json')
        if not UtilClient.is_unset(tmp_req.sls_delivery):
            request.sls_delivery_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.sls_delivery, 'SlsDelivery', 'json')
        body = {}
        if not UtilClient.is_unset(request.business_type):
            body['BusinessType'] = request.business_type
        if not UtilClient.is_unset(request.data_center):
            body['DataCenter'] = request.data_center
        if not UtilClient.is_unset(request.delivery_type):
            body['DeliveryType'] = request.delivery_type
        if not UtilClient.is_unset(request.discard_rate):
            body['DiscardRate'] = request.discard_rate
        if not UtilClient.is_unset(request.field_name):
            body['FieldName'] = request.field_name
        if not UtilClient.is_unset(request.filter_ver):
            body['FilterVer'] = request.filter_ver
        if not UtilClient.is_unset(request.http_delivery_shrink):
            body['HttpDelivery'] = request.http_delivery_shrink
        if not UtilClient.is_unset(request.kafka_delivery_shrink):
            body['KafkaDelivery'] = request.kafka_delivery_shrink
        if not UtilClient.is_unset(request.oss_delivery_shrink):
            body['OssDelivery'] = request.oss_delivery_shrink
        if not UtilClient.is_unset(request.s_3delivery_shrink):
            body['S3Delivery'] = request.s_3delivery_shrink
        if not UtilClient.is_unset(request.site_id):
            body['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.sls_delivery_shrink):
            body['SlsDelivery'] = request.sls_delivery_shrink
        if not UtilClient.is_unset(request.task_name):
            body['TaskName'] = request.task_name
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateSiteDeliveryTask',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateSiteDeliveryTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_site_delivery_task(
        self,
        request: esa20240910_models.CreateSiteDeliveryTaskRequest,
    ) -> esa20240910_models.CreateSiteDeliveryTaskResponse:
        """
        @summary Creates a real-time log delivery task.
        
        @param request: CreateSiteDeliveryTaskRequest
        @return: CreateSiteDeliveryTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_site_delivery_task_with_options(request, runtime)

    async def create_site_delivery_task_async(
        self,
        request: esa20240910_models.CreateSiteDeliveryTaskRequest,
    ) -> esa20240910_models.CreateSiteDeliveryTaskResponse:
        """
        @summary Creates a real-time log delivery task.
        
        @param request: CreateSiteDeliveryTaskRequest
        @return: CreateSiteDeliveryTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_site_delivery_task_with_options_async(request, runtime)

    def create_slr_role_for_realtime_log_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateSlrRoleForRealtimeLogResponse:
        """
        @summary 创建一个实时日志slr角色
        
        @param request: CreateSlrRoleForRealtimeLogRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateSlrRoleForRealtimeLogResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='CreateSlrRoleForRealtimeLog',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateSlrRoleForRealtimeLogResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_slr_role_for_realtime_log_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateSlrRoleForRealtimeLogResponse:
        """
        @summary 创建一个实时日志slr角色
        
        @param request: CreateSlrRoleForRealtimeLogRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateSlrRoleForRealtimeLogResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='CreateSlrRoleForRealtimeLog',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateSlrRoleForRealtimeLogResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_slr_role_for_realtime_log(self) -> esa20240910_models.CreateSlrRoleForRealtimeLogResponse:
        """
        @summary 创建一个实时日志slr角色
        
        @return: CreateSlrRoleForRealtimeLogResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_slr_role_for_realtime_log_with_options(runtime)

    async def create_slr_role_for_realtime_log_async(self) -> esa20240910_models.CreateSlrRoleForRealtimeLogResponse:
        """
        @summary 创建一个实时日志slr角色
        
        @return: CreateSlrRoleForRealtimeLogResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_slr_role_for_realtime_log_with_options_async(runtime)

    def create_transport_layer_application_with_options(
        self,
        tmp_req: esa20240910_models.CreateTransportLayerApplicationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateTransportLayerApplicationResponse:
        """
        @summary Create Transport Layer Application
        
        @param tmp_req: CreateTransportLayerApplicationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateTransportLayerApplicationResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.CreateTransportLayerApplicationShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.rules):
            request.rules_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.rules, 'Rules', 'json')
        query = {}
        if not UtilClient.is_unset(request.cross_border_optimization):
            query['CrossBorderOptimization'] = request.cross_border_optimization
        if not UtilClient.is_unset(request.ip_access_rule):
            query['IpAccessRule'] = request.ip_access_rule
        if not UtilClient.is_unset(request.ipv_6):
            query['Ipv6'] = request.ipv_6
        if not UtilClient.is_unset(request.record_name):
            query['RecordName'] = request.record_name
        if not UtilClient.is_unset(request.rules_shrink):
            query['Rules'] = request.rules_shrink
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.static_ip):
            query['StaticIp'] = request.static_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateTransportLayerApplication',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateTransportLayerApplicationResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_transport_layer_application_with_options_async(
        self,
        tmp_req: esa20240910_models.CreateTransportLayerApplicationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateTransportLayerApplicationResponse:
        """
        @summary Create Transport Layer Application
        
        @param tmp_req: CreateTransportLayerApplicationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateTransportLayerApplicationResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.CreateTransportLayerApplicationShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.rules):
            request.rules_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.rules, 'Rules', 'json')
        query = {}
        if not UtilClient.is_unset(request.cross_border_optimization):
            query['CrossBorderOptimization'] = request.cross_border_optimization
        if not UtilClient.is_unset(request.ip_access_rule):
            query['IpAccessRule'] = request.ip_access_rule
        if not UtilClient.is_unset(request.ipv_6):
            query['Ipv6'] = request.ipv_6
        if not UtilClient.is_unset(request.record_name):
            query['RecordName'] = request.record_name
        if not UtilClient.is_unset(request.rules_shrink):
            query['Rules'] = request.rules_shrink
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.static_ip):
            query['StaticIp'] = request.static_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateTransportLayerApplication',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateTransportLayerApplicationResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_transport_layer_application(
        self,
        request: esa20240910_models.CreateTransportLayerApplicationRequest,
    ) -> esa20240910_models.CreateTransportLayerApplicationResponse:
        """
        @summary Create Transport Layer Application
        
        @param request: CreateTransportLayerApplicationRequest
        @return: CreateTransportLayerApplicationResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_transport_layer_application_with_options(request, runtime)

    async def create_transport_layer_application_async(
        self,
        request: esa20240910_models.CreateTransportLayerApplicationRequest,
    ) -> esa20240910_models.CreateTransportLayerApplicationResponse:
        """
        @summary Create Transport Layer Application
        
        @param request: CreateTransportLayerApplicationRequest
        @return: CreateTransportLayerApplicationResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_transport_layer_application_with_options_async(request, runtime)

    def create_url_observation_with_options(
        self,
        request: esa20240910_models.CreateUrlObservationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateUrlObservationResponse:
        """
        @summary 创建网页监测配置
        
        @param request: CreateUrlObservationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateUrlObservationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.sdk_type):
            query['SdkType'] = request.sdk_type
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.url):
            query['Url'] = request.url
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateUrlObservation',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateUrlObservationResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_url_observation_with_options_async(
        self,
        request: esa20240910_models.CreateUrlObservationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateUrlObservationResponse:
        """
        @summary 创建网页监测配置
        
        @param request: CreateUrlObservationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateUrlObservationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.sdk_type):
            query['SdkType'] = request.sdk_type
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.url):
            query['Url'] = request.url
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateUrlObservation',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateUrlObservationResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_url_observation(
        self,
        request: esa20240910_models.CreateUrlObservationRequest,
    ) -> esa20240910_models.CreateUrlObservationResponse:
        """
        @summary 创建网页监测配置
        
        @param request: CreateUrlObservationRequest
        @return: CreateUrlObservationResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_url_observation_with_options(request, runtime)

    async def create_url_observation_async(
        self,
        request: esa20240910_models.CreateUrlObservationRequest,
    ) -> esa20240910_models.CreateUrlObservationResponse:
        """
        @summary 创建网页监测配置
        
        @param request: CreateUrlObservationRequest
        @return: CreateUrlObservationResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_url_observation_with_options_async(request, runtime)

    def create_user_delivery_task_with_options(
        self,
        tmp_req: esa20240910_models.CreateUserDeliveryTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateUserDeliveryTaskResponse:
        """
        @summary Creates a log delivery task to ship logs to the specified destination.
        
        @description This API operation allows you to deliver logs to destinations such as Simple Log Service (SLS), HTTP servers, Object Storage Service (OSS), Amazon Simple Storage Service (S3), and Kafka. You can specify the task name, log fields to deliver, data center, discard rate, delivery type, and delivery details.
        **Field filtering**: Use the `FieldName` parameter to specify log fields to deliver.
        **Filtering rules**: Use the `FilterRules` parameter to pre-process and filter log data.
        **Diverse delivery destinations**: Logs can be delivered to different destinations. Configuration parameters vary with delivery destinations.
        ## [](#)Precautions
        Make sure that you have sufficient permissions to perform delivery tasks.
        If you enable encryption or authentication, properly configure corresponding parameters.
        Verify the syntax of `FilterRules` to make sure that filtering logic works as expected.
        Specify advanced settings such as the number of retries and timeout period based on your needs to have optimal delivery efficiency and stability.
        
        @param tmp_req: CreateUserDeliveryTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateUserDeliveryTaskResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.CreateUserDeliveryTaskShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.http_delivery):
            request.http_delivery_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.http_delivery, 'HttpDelivery', 'json')
        if not UtilClient.is_unset(tmp_req.kafka_delivery):
            request.kafka_delivery_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.kafka_delivery, 'KafkaDelivery', 'json')
        if not UtilClient.is_unset(tmp_req.oss_delivery):
            request.oss_delivery_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.oss_delivery, 'OssDelivery', 'json')
        if not UtilClient.is_unset(tmp_req.s_3delivery):
            request.s_3delivery_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.s_3delivery, 'S3Delivery', 'json')
        if not UtilClient.is_unset(tmp_req.sls_delivery):
            request.sls_delivery_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.sls_delivery, 'SlsDelivery', 'json')
        body = {}
        if not UtilClient.is_unset(request.business_type):
            body['BusinessType'] = request.business_type
        if not UtilClient.is_unset(request.data_center):
            body['DataCenter'] = request.data_center
        if not UtilClient.is_unset(request.delivery_type):
            body['DeliveryType'] = request.delivery_type
        if not UtilClient.is_unset(request.details):
            body['Details'] = request.details
        if not UtilClient.is_unset(request.discard_rate):
            body['DiscardRate'] = request.discard_rate
        if not UtilClient.is_unset(request.field_name):
            body['FieldName'] = request.field_name
        if not UtilClient.is_unset(request.filter_ver):
            body['FilterVer'] = request.filter_ver
        if not UtilClient.is_unset(request.http_delivery_shrink):
            body['HttpDelivery'] = request.http_delivery_shrink
        if not UtilClient.is_unset(request.kafka_delivery_shrink):
            body['KafkaDelivery'] = request.kafka_delivery_shrink
        if not UtilClient.is_unset(request.oss_delivery_shrink):
            body['OssDelivery'] = request.oss_delivery_shrink
        if not UtilClient.is_unset(request.s_3delivery_shrink):
            body['S3Delivery'] = request.s_3delivery_shrink
        if not UtilClient.is_unset(request.sls_delivery_shrink):
            body['SlsDelivery'] = request.sls_delivery_shrink
        if not UtilClient.is_unset(request.task_name):
            body['TaskName'] = request.task_name
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateUserDeliveryTask',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateUserDeliveryTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_user_delivery_task_with_options_async(
        self,
        tmp_req: esa20240910_models.CreateUserDeliveryTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateUserDeliveryTaskResponse:
        """
        @summary Creates a log delivery task to ship logs to the specified destination.
        
        @description This API operation allows you to deliver logs to destinations such as Simple Log Service (SLS), HTTP servers, Object Storage Service (OSS), Amazon Simple Storage Service (S3), and Kafka. You can specify the task name, log fields to deliver, data center, discard rate, delivery type, and delivery details.
        **Field filtering**: Use the `FieldName` parameter to specify log fields to deliver.
        **Filtering rules**: Use the `FilterRules` parameter to pre-process and filter log data.
        **Diverse delivery destinations**: Logs can be delivered to different destinations. Configuration parameters vary with delivery destinations.
        ## [](#)Precautions
        Make sure that you have sufficient permissions to perform delivery tasks.
        If you enable encryption or authentication, properly configure corresponding parameters.
        Verify the syntax of `FilterRules` to make sure that filtering logic works as expected.
        Specify advanced settings such as the number of retries and timeout period based on your needs to have optimal delivery efficiency and stability.
        
        @param tmp_req: CreateUserDeliveryTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateUserDeliveryTaskResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.CreateUserDeliveryTaskShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.http_delivery):
            request.http_delivery_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.http_delivery, 'HttpDelivery', 'json')
        if not UtilClient.is_unset(tmp_req.kafka_delivery):
            request.kafka_delivery_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.kafka_delivery, 'KafkaDelivery', 'json')
        if not UtilClient.is_unset(tmp_req.oss_delivery):
            request.oss_delivery_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.oss_delivery, 'OssDelivery', 'json')
        if not UtilClient.is_unset(tmp_req.s_3delivery):
            request.s_3delivery_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.s_3delivery, 'S3Delivery', 'json')
        if not UtilClient.is_unset(tmp_req.sls_delivery):
            request.sls_delivery_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.sls_delivery, 'SlsDelivery', 'json')
        body = {}
        if not UtilClient.is_unset(request.business_type):
            body['BusinessType'] = request.business_type
        if not UtilClient.is_unset(request.data_center):
            body['DataCenter'] = request.data_center
        if not UtilClient.is_unset(request.delivery_type):
            body['DeliveryType'] = request.delivery_type
        if not UtilClient.is_unset(request.details):
            body['Details'] = request.details
        if not UtilClient.is_unset(request.discard_rate):
            body['DiscardRate'] = request.discard_rate
        if not UtilClient.is_unset(request.field_name):
            body['FieldName'] = request.field_name
        if not UtilClient.is_unset(request.filter_ver):
            body['FilterVer'] = request.filter_ver
        if not UtilClient.is_unset(request.http_delivery_shrink):
            body['HttpDelivery'] = request.http_delivery_shrink
        if not UtilClient.is_unset(request.kafka_delivery_shrink):
            body['KafkaDelivery'] = request.kafka_delivery_shrink
        if not UtilClient.is_unset(request.oss_delivery_shrink):
            body['OssDelivery'] = request.oss_delivery_shrink
        if not UtilClient.is_unset(request.s_3delivery_shrink):
            body['S3Delivery'] = request.s_3delivery_shrink
        if not UtilClient.is_unset(request.sls_delivery_shrink):
            body['SlsDelivery'] = request.sls_delivery_shrink
        if not UtilClient.is_unset(request.task_name):
            body['TaskName'] = request.task_name
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateUserDeliveryTask',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateUserDeliveryTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_user_delivery_task(
        self,
        request: esa20240910_models.CreateUserDeliveryTaskRequest,
    ) -> esa20240910_models.CreateUserDeliveryTaskResponse:
        """
        @summary Creates a log delivery task to ship logs to the specified destination.
        
        @description This API operation allows you to deliver logs to destinations such as Simple Log Service (SLS), HTTP servers, Object Storage Service (OSS), Amazon Simple Storage Service (S3), and Kafka. You can specify the task name, log fields to deliver, data center, discard rate, delivery type, and delivery details.
        **Field filtering**: Use the `FieldName` parameter to specify log fields to deliver.
        **Filtering rules**: Use the `FilterRules` parameter to pre-process and filter log data.
        **Diverse delivery destinations**: Logs can be delivered to different destinations. Configuration parameters vary with delivery destinations.
        ## [](#)Precautions
        Make sure that you have sufficient permissions to perform delivery tasks.
        If you enable encryption or authentication, properly configure corresponding parameters.
        Verify the syntax of `FilterRules` to make sure that filtering logic works as expected.
        Specify advanced settings such as the number of retries and timeout period based on your needs to have optimal delivery efficiency and stability.
        
        @param request: CreateUserDeliveryTaskRequest
        @return: CreateUserDeliveryTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_user_delivery_task_with_options(request, runtime)

    async def create_user_delivery_task_async(
        self,
        request: esa20240910_models.CreateUserDeliveryTaskRequest,
    ) -> esa20240910_models.CreateUserDeliveryTaskResponse:
        """
        @summary Creates a log delivery task to ship logs to the specified destination.
        
        @description This API operation allows you to deliver logs to destinations such as Simple Log Service (SLS), HTTP servers, Object Storage Service (OSS), Amazon Simple Storage Service (S3), and Kafka. You can specify the task name, log fields to deliver, data center, discard rate, delivery type, and delivery details.
        **Field filtering**: Use the `FieldName` parameter to specify log fields to deliver.
        **Filtering rules**: Use the `FilterRules` parameter to pre-process and filter log data.
        **Diverse delivery destinations**: Logs can be delivered to different destinations. Configuration parameters vary with delivery destinations.
        ## [](#)Precautions
        Make sure that you have sufficient permissions to perform delivery tasks.
        If you enable encryption or authentication, properly configure corresponding parameters.
        Verify the syntax of `FilterRules` to make sure that filtering logic works as expected.
        Specify advanced settings such as the number of retries and timeout period based on your needs to have optimal delivery efficiency and stability.
        
        @param request: CreateUserDeliveryTaskRequest
        @return: CreateUserDeliveryTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_user_delivery_task_with_options_async(request, runtime)

    def create_video_processing_with_options(
        self,
        request: esa20240910_models.CreateVideoProcessingRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateVideoProcessingResponse:
        """
        @summary 新增站点视频处理配置
        
        @param request: CreateVideoProcessingRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateVideoProcessingResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.flv_seek_end):
            query['FlvSeekEnd'] = request.flv_seek_end
        if not UtilClient.is_unset(request.flv_seek_start):
            query['FlvSeekStart'] = request.flv_seek_start
        if not UtilClient.is_unset(request.flv_video_seek_mode):
            query['FlvVideoSeekMode'] = request.flv_video_seek_mode
        if not UtilClient.is_unset(request.mp_4seek_end):
            query['Mp4SeekEnd'] = request.mp_4seek_end
        if not UtilClient.is_unset(request.mp_4seek_start):
            query['Mp4SeekStart'] = request.mp_4seek_start
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        if not UtilClient.is_unset(request.video_seek_enable):
            query['VideoSeekEnable'] = request.video_seek_enable
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateVideoProcessing',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateVideoProcessingResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_video_processing_with_options_async(
        self,
        request: esa20240910_models.CreateVideoProcessingRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateVideoProcessingResponse:
        """
        @summary 新增站点视频处理配置
        
        @param request: CreateVideoProcessingRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateVideoProcessingResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.flv_seek_end):
            query['FlvSeekEnd'] = request.flv_seek_end
        if not UtilClient.is_unset(request.flv_seek_start):
            query['FlvSeekStart'] = request.flv_seek_start
        if not UtilClient.is_unset(request.flv_video_seek_mode):
            query['FlvVideoSeekMode'] = request.flv_video_seek_mode
        if not UtilClient.is_unset(request.mp_4seek_end):
            query['Mp4SeekEnd'] = request.mp_4seek_end
        if not UtilClient.is_unset(request.mp_4seek_start):
            query['Mp4SeekStart'] = request.mp_4seek_start
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        if not UtilClient.is_unset(request.video_seek_enable):
            query['VideoSeekEnable'] = request.video_seek_enable
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateVideoProcessing',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateVideoProcessingResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_video_processing(
        self,
        request: esa20240910_models.CreateVideoProcessingRequest,
    ) -> esa20240910_models.CreateVideoProcessingResponse:
        """
        @summary 新增站点视频处理配置
        
        @param request: CreateVideoProcessingRequest
        @return: CreateVideoProcessingResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_video_processing_with_options(request, runtime)

    async def create_video_processing_async(
        self,
        request: esa20240910_models.CreateVideoProcessingRequest,
    ) -> esa20240910_models.CreateVideoProcessingResponse:
        """
        @summary 新增站点视频处理配置
        
        @param request: CreateVideoProcessingRequest
        @return: CreateVideoProcessingResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_video_processing_with_options_async(request, runtime)

    def create_waf_rule_with_options(
        self,
        tmp_req: esa20240910_models.CreateWafRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateWafRuleResponse:
        """
        @summary Create WAF Rule
        
        @param tmp_req: CreateWafRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateWafRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.CreateWafRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.config):
            request.config_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.config, 'Config', 'json')
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        body = {}
        if not UtilClient.is_unset(request.config_shrink):
            body['Config'] = request.config_shrink
        if not UtilClient.is_unset(request.phase):
            body['Phase'] = request.phase
        if not UtilClient.is_unset(request.ruleset_id):
            body['RulesetId'] = request.ruleset_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateWafRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateWafRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_waf_rule_with_options_async(
        self,
        tmp_req: esa20240910_models.CreateWafRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateWafRuleResponse:
        """
        @summary Create WAF Rule
        
        @param tmp_req: CreateWafRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateWafRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.CreateWafRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.config):
            request.config_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.config, 'Config', 'json')
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        body = {}
        if not UtilClient.is_unset(request.config_shrink):
            body['Config'] = request.config_shrink
        if not UtilClient.is_unset(request.phase):
            body['Phase'] = request.phase
        if not UtilClient.is_unset(request.ruleset_id):
            body['RulesetId'] = request.ruleset_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateWafRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateWafRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_waf_rule(
        self,
        request: esa20240910_models.CreateWafRuleRequest,
    ) -> esa20240910_models.CreateWafRuleResponse:
        """
        @summary Create WAF Rule
        
        @param request: CreateWafRuleRequest
        @return: CreateWafRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_waf_rule_with_options(request, runtime)

    async def create_waf_rule_async(
        self,
        request: esa20240910_models.CreateWafRuleRequest,
    ) -> esa20240910_models.CreateWafRuleResponse:
        """
        @summary Create WAF Rule
        
        @param request: CreateWafRuleRequest
        @return: CreateWafRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_waf_rule_with_options_async(request, runtime)

    def create_waf_ruleset_with_options(
        self,
        request: esa20240910_models.CreateWafRulesetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateWafRulesetResponse:
        """
        @summary Create WAF Ruleset
        
        @param request: CreateWafRulesetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateWafRulesetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        body = {}
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.phase):
            body['Phase'] = request.phase
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateWafRuleset',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateWafRulesetResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_waf_ruleset_with_options_async(
        self,
        request: esa20240910_models.CreateWafRulesetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateWafRulesetResponse:
        """
        @summary Create WAF Ruleset
        
        @param request: CreateWafRulesetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateWafRulesetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        body = {}
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.phase):
            body['Phase'] = request.phase
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateWafRuleset',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateWafRulesetResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_waf_ruleset(
        self,
        request: esa20240910_models.CreateWafRulesetRequest,
    ) -> esa20240910_models.CreateWafRulesetResponse:
        """
        @summary Create WAF Ruleset
        
        @param request: CreateWafRulesetRequest
        @return: CreateWafRulesetResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_waf_ruleset_with_options(request, runtime)

    async def create_waf_ruleset_async(
        self,
        request: esa20240910_models.CreateWafRulesetRequest,
    ) -> esa20240910_models.CreateWafRulesetResponse:
        """
        @summary Create WAF Ruleset
        
        @param request: CreateWafRulesetRequest
        @return: CreateWafRulesetResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_waf_ruleset_with_options_async(request, runtime)

    def create_waiting_room_with_options(
        self,
        tmp_req: esa20240910_models.CreateWaitingRoomRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateWaitingRoomResponse:
        """
        @summary Creates a waiting room for a website.
        
        @param tmp_req: CreateWaitingRoomRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateWaitingRoomResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.CreateWaitingRoomShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.host_name_and_path):
            request.host_name_and_path_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.host_name_and_path, 'HostNameAndPath', 'json')
        query = {}
        if not UtilClient.is_unset(request.cookie_name):
            query['CookieName'] = request.cookie_name
        if not UtilClient.is_unset(request.custom_page_html):
            query['CustomPageHtml'] = request.custom_page_html
        if not UtilClient.is_unset(request.description):
            query['Description'] = request.description
        if not UtilClient.is_unset(request.disable_session_renewal_enable):
            query['DisableSessionRenewalEnable'] = request.disable_session_renewal_enable
        if not UtilClient.is_unset(request.enable):
            query['Enable'] = request.enable
        if not UtilClient.is_unset(request.host_name_and_path_shrink):
            query['HostNameAndPath'] = request.host_name_and_path_shrink
        if not UtilClient.is_unset(request.json_response_enable):
            query['JsonResponseEnable'] = request.json_response_enable
        if not UtilClient.is_unset(request.language):
            query['Language'] = request.language
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.new_users_per_minute):
            query['NewUsersPerMinute'] = request.new_users_per_minute
        if not UtilClient.is_unset(request.queue_all_enable):
            query['QueueAllEnable'] = request.queue_all_enable
        if not UtilClient.is_unset(request.queuing_method):
            query['QueuingMethod'] = request.queuing_method
        if not UtilClient.is_unset(request.queuing_status_code):
            query['QueuingStatusCode'] = request.queuing_status_code
        if not UtilClient.is_unset(request.session_duration):
            query['SessionDuration'] = request.session_duration
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.total_active_users):
            query['TotalActiveUsers'] = request.total_active_users
        if not UtilClient.is_unset(request.waiting_room_type):
            query['WaitingRoomType'] = request.waiting_room_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateWaitingRoom',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateWaitingRoomResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_waiting_room_with_options_async(
        self,
        tmp_req: esa20240910_models.CreateWaitingRoomRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateWaitingRoomResponse:
        """
        @summary Creates a waiting room for a website.
        
        @param tmp_req: CreateWaitingRoomRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateWaitingRoomResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.CreateWaitingRoomShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.host_name_and_path):
            request.host_name_and_path_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.host_name_and_path, 'HostNameAndPath', 'json')
        query = {}
        if not UtilClient.is_unset(request.cookie_name):
            query['CookieName'] = request.cookie_name
        if not UtilClient.is_unset(request.custom_page_html):
            query['CustomPageHtml'] = request.custom_page_html
        if not UtilClient.is_unset(request.description):
            query['Description'] = request.description
        if not UtilClient.is_unset(request.disable_session_renewal_enable):
            query['DisableSessionRenewalEnable'] = request.disable_session_renewal_enable
        if not UtilClient.is_unset(request.enable):
            query['Enable'] = request.enable
        if not UtilClient.is_unset(request.host_name_and_path_shrink):
            query['HostNameAndPath'] = request.host_name_and_path_shrink
        if not UtilClient.is_unset(request.json_response_enable):
            query['JsonResponseEnable'] = request.json_response_enable
        if not UtilClient.is_unset(request.language):
            query['Language'] = request.language
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.new_users_per_minute):
            query['NewUsersPerMinute'] = request.new_users_per_minute
        if not UtilClient.is_unset(request.queue_all_enable):
            query['QueueAllEnable'] = request.queue_all_enable
        if not UtilClient.is_unset(request.queuing_method):
            query['QueuingMethod'] = request.queuing_method
        if not UtilClient.is_unset(request.queuing_status_code):
            query['QueuingStatusCode'] = request.queuing_status_code
        if not UtilClient.is_unset(request.session_duration):
            query['SessionDuration'] = request.session_duration
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.total_active_users):
            query['TotalActiveUsers'] = request.total_active_users
        if not UtilClient.is_unset(request.waiting_room_type):
            query['WaitingRoomType'] = request.waiting_room_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateWaitingRoom',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateWaitingRoomResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_waiting_room(
        self,
        request: esa20240910_models.CreateWaitingRoomRequest,
    ) -> esa20240910_models.CreateWaitingRoomResponse:
        """
        @summary Creates a waiting room for a website.
        
        @param request: CreateWaitingRoomRequest
        @return: CreateWaitingRoomResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_waiting_room_with_options(request, runtime)

    async def create_waiting_room_async(
        self,
        request: esa20240910_models.CreateWaitingRoomRequest,
    ) -> esa20240910_models.CreateWaitingRoomResponse:
        """
        @summary Creates a waiting room for a website.
        
        @param request: CreateWaitingRoomRequest
        @return: CreateWaitingRoomResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_waiting_room_with_options_async(request, runtime)

    def create_waiting_room_event_with_options(
        self,
        request: esa20240910_models.CreateWaitingRoomEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateWaitingRoomEventResponse:
        """
        @summary Creates a waiting room event.
        
        @param request: CreateWaitingRoomEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateWaitingRoomEventResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.custom_page_html):
            query['CustomPageHtml'] = request.custom_page_html
        if not UtilClient.is_unset(request.description):
            query['Description'] = request.description
        if not UtilClient.is_unset(request.disable_session_renewal_enable):
            query['DisableSessionRenewalEnable'] = request.disable_session_renewal_enable
        if not UtilClient.is_unset(request.enable):
            query['Enable'] = request.enable
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.json_response_enable):
            query['JsonResponseEnable'] = request.json_response_enable
        if not UtilClient.is_unset(request.language):
            query['Language'] = request.language
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.new_users_per_minute):
            query['NewUsersPerMinute'] = request.new_users_per_minute
        if not UtilClient.is_unset(request.pre_queue_enable):
            query['PreQueueEnable'] = request.pre_queue_enable
        if not UtilClient.is_unset(request.pre_queue_start_time):
            query['PreQueueStartTime'] = request.pre_queue_start_time
        if not UtilClient.is_unset(request.queuing_method):
            query['QueuingMethod'] = request.queuing_method
        if not UtilClient.is_unset(request.queuing_status_code):
            query['QueuingStatusCode'] = request.queuing_status_code
        if not UtilClient.is_unset(request.random_pre_queue_enable):
            query['RandomPreQueueEnable'] = request.random_pre_queue_enable
        if not UtilClient.is_unset(request.session_duration):
            query['SessionDuration'] = request.session_duration
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.total_active_users):
            query['TotalActiveUsers'] = request.total_active_users
        if not UtilClient.is_unset(request.waiting_room_id):
            query['WaitingRoomId'] = request.waiting_room_id
        if not UtilClient.is_unset(request.waiting_room_type):
            query['WaitingRoomType'] = request.waiting_room_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateWaitingRoomEvent',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateWaitingRoomEventResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_waiting_room_event_with_options_async(
        self,
        request: esa20240910_models.CreateWaitingRoomEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateWaitingRoomEventResponse:
        """
        @summary Creates a waiting room event.
        
        @param request: CreateWaitingRoomEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateWaitingRoomEventResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.custom_page_html):
            query['CustomPageHtml'] = request.custom_page_html
        if not UtilClient.is_unset(request.description):
            query['Description'] = request.description
        if not UtilClient.is_unset(request.disable_session_renewal_enable):
            query['DisableSessionRenewalEnable'] = request.disable_session_renewal_enable
        if not UtilClient.is_unset(request.enable):
            query['Enable'] = request.enable
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.json_response_enable):
            query['JsonResponseEnable'] = request.json_response_enable
        if not UtilClient.is_unset(request.language):
            query['Language'] = request.language
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.new_users_per_minute):
            query['NewUsersPerMinute'] = request.new_users_per_minute
        if not UtilClient.is_unset(request.pre_queue_enable):
            query['PreQueueEnable'] = request.pre_queue_enable
        if not UtilClient.is_unset(request.pre_queue_start_time):
            query['PreQueueStartTime'] = request.pre_queue_start_time
        if not UtilClient.is_unset(request.queuing_method):
            query['QueuingMethod'] = request.queuing_method
        if not UtilClient.is_unset(request.queuing_status_code):
            query['QueuingStatusCode'] = request.queuing_status_code
        if not UtilClient.is_unset(request.random_pre_queue_enable):
            query['RandomPreQueueEnable'] = request.random_pre_queue_enable
        if not UtilClient.is_unset(request.session_duration):
            query['SessionDuration'] = request.session_duration
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.total_active_users):
            query['TotalActiveUsers'] = request.total_active_users
        if not UtilClient.is_unset(request.waiting_room_id):
            query['WaitingRoomId'] = request.waiting_room_id
        if not UtilClient.is_unset(request.waiting_room_type):
            query['WaitingRoomType'] = request.waiting_room_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateWaitingRoomEvent',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateWaitingRoomEventResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_waiting_room_event(
        self,
        request: esa20240910_models.CreateWaitingRoomEventRequest,
    ) -> esa20240910_models.CreateWaitingRoomEventResponse:
        """
        @summary Creates a waiting room event.
        
        @param request: CreateWaitingRoomEventRequest
        @return: CreateWaitingRoomEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_waiting_room_event_with_options(request, runtime)

    async def create_waiting_room_event_async(
        self,
        request: esa20240910_models.CreateWaitingRoomEventRequest,
    ) -> esa20240910_models.CreateWaitingRoomEventResponse:
        """
        @summary Creates a waiting room event.
        
        @param request: CreateWaitingRoomEventRequest
        @return: CreateWaitingRoomEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_waiting_room_event_with_options_async(request, runtime)

    def create_waiting_room_rule_with_options(
        self,
        request: esa20240910_models.CreateWaitingRoomRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateWaitingRoomRuleResponse:
        """
        @summary Create Waiting Room Rule
        
        @param request: CreateWaitingRoomRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateWaitingRoomRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.waiting_room_id):
            query['WaitingRoomId'] = request.waiting_room_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateWaitingRoomRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateWaitingRoomRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_waiting_room_rule_with_options_async(
        self,
        request: esa20240910_models.CreateWaitingRoomRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.CreateWaitingRoomRuleResponse:
        """
        @summary Create Waiting Room Rule
        
        @param request: CreateWaitingRoomRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateWaitingRoomRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.waiting_room_id):
            query['WaitingRoomId'] = request.waiting_room_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateWaitingRoomRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.CreateWaitingRoomRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_waiting_room_rule(
        self,
        request: esa20240910_models.CreateWaitingRoomRuleRequest,
    ) -> esa20240910_models.CreateWaitingRoomRuleResponse:
        """
        @summary Create Waiting Room Rule
        
        @param request: CreateWaitingRoomRuleRequest
        @return: CreateWaitingRoomRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_waiting_room_rule_with_options(request, runtime)

    async def create_waiting_room_rule_async(
        self,
        request: esa20240910_models.CreateWaitingRoomRuleRequest,
    ) -> esa20240910_models.CreateWaitingRoomRuleResponse:
        """
        @summary Create Waiting Room Rule
        
        @param request: CreateWaitingRoomRuleRequest
        @return: CreateWaitingRoomRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_waiting_room_rule_with_options_async(request, runtime)

    def deactivate_version_management_with_options(
        self,
        request: esa20240910_models.DeactivateVersionManagementRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeactivateVersionManagementResponse:
        """
        @summary Disables version management for a website.
        
        @description You can disable version management only when the default environment and version 0 exist.
        
        @param request: DeactivateVersionManagementRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeactivateVersionManagementResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeactivateVersionManagement',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeactivateVersionManagementResponse(),
            self.call_api(params, req, runtime)
        )

    async def deactivate_version_management_with_options_async(
        self,
        request: esa20240910_models.DeactivateVersionManagementRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeactivateVersionManagementResponse:
        """
        @summary Disables version management for a website.
        
        @description You can disable version management only when the default environment and version 0 exist.
        
        @param request: DeactivateVersionManagementRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeactivateVersionManagementResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeactivateVersionManagement',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeactivateVersionManagementResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def deactivate_version_management(
        self,
        request: esa20240910_models.DeactivateVersionManagementRequest,
    ) -> esa20240910_models.DeactivateVersionManagementResponse:
        """
        @summary Disables version management for a website.
        
        @description You can disable version management only when the default environment and version 0 exist.
        
        @param request: DeactivateVersionManagementRequest
        @return: DeactivateVersionManagementResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.deactivate_version_management_with_options(request, runtime)

    async def deactivate_version_management_async(
        self,
        request: esa20240910_models.DeactivateVersionManagementRequest,
    ) -> esa20240910_models.DeactivateVersionManagementResponse:
        """
        @summary Disables version management for a website.
        
        @description You can disable version management only when the default environment and version 0 exist.
        
        @param request: DeactivateVersionManagementRequest
        @return: DeactivateVersionManagementResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.deactivate_version_management_with_options_async(request, runtime)

    def delete_cache_rule_with_options(
        self,
        request: esa20240910_models.DeleteCacheRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteCacheRuleResponse:
        """
        @summary Delete Cache Configuration
        
        @param request: DeleteCacheRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteCacheRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteCacheRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteCacheRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_cache_rule_with_options_async(
        self,
        request: esa20240910_models.DeleteCacheRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteCacheRuleResponse:
        """
        @summary Delete Cache Configuration
        
        @param request: DeleteCacheRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteCacheRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteCacheRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteCacheRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_cache_rule(
        self,
        request: esa20240910_models.DeleteCacheRuleRequest,
    ) -> esa20240910_models.DeleteCacheRuleResponse:
        """
        @summary Delete Cache Configuration
        
        @param request: DeleteCacheRuleRequest
        @return: DeleteCacheRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_cache_rule_with_options(request, runtime)

    async def delete_cache_rule_async(
        self,
        request: esa20240910_models.DeleteCacheRuleRequest,
    ) -> esa20240910_models.DeleteCacheRuleResponse:
        """
        @summary Delete Cache Configuration
        
        @param request: DeleteCacheRuleRequest
        @return: DeleteCacheRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_cache_rule_with_options_async(request, runtime)

    def delete_certificate_with_options(
        self,
        request: esa20240910_models.DeleteCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteCertificateResponse:
        """
        @summary Deletes a certificate for a website.
        
        @param request: DeleteCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteCertificateResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteCertificateResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_certificate_with_options_async(
        self,
        request: esa20240910_models.DeleteCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteCertificateResponse:
        """
        @summary Deletes a certificate for a website.
        
        @param request: DeleteCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteCertificateResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteCertificateResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_certificate(
        self,
        request: esa20240910_models.DeleteCertificateRequest,
    ) -> esa20240910_models.DeleteCertificateResponse:
        """
        @summary Deletes a certificate for a website.
        
        @param request: DeleteCertificateRequest
        @return: DeleteCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_certificate_with_options(request, runtime)

    async def delete_certificate_async(
        self,
        request: esa20240910_models.DeleteCertificateRequest,
    ) -> esa20240910_models.DeleteCertificateResponse:
        """
        @summary Deletes a certificate for a website.
        
        @param request: DeleteCertificateRequest
        @return: DeleteCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_certificate_with_options_async(request, runtime)

    def delete_client_ca_certificate_with_options(
        self,
        request: esa20240910_models.DeleteClientCaCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteClientCaCertificateResponse:
        """
        @summary Deletes a client CA certificate.
        
        @param request: DeleteClientCaCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteClientCaCertificateResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteClientCaCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteClientCaCertificateResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_client_ca_certificate_with_options_async(
        self,
        request: esa20240910_models.DeleteClientCaCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteClientCaCertificateResponse:
        """
        @summary Deletes a client CA certificate.
        
        @param request: DeleteClientCaCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteClientCaCertificateResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteClientCaCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteClientCaCertificateResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_client_ca_certificate(
        self,
        request: esa20240910_models.DeleteClientCaCertificateRequest,
    ) -> esa20240910_models.DeleteClientCaCertificateResponse:
        """
        @summary Deletes a client CA certificate.
        
        @param request: DeleteClientCaCertificateRequest
        @return: DeleteClientCaCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_client_ca_certificate_with_options(request, runtime)

    async def delete_client_ca_certificate_async(
        self,
        request: esa20240910_models.DeleteClientCaCertificateRequest,
    ) -> esa20240910_models.DeleteClientCaCertificateResponse:
        """
        @summary Deletes a client CA certificate.
        
        @param request: DeleteClientCaCertificateRequest
        @return: DeleteClientCaCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_client_ca_certificate_with_options_async(request, runtime)

    def delete_client_certificate_with_options(
        self,
        request: esa20240910_models.DeleteClientCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteClientCertificateResponse:
        """
        @summary Deletes a revoked client certificate.
        
        @param request: DeleteClientCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteClientCertificateResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteClientCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteClientCertificateResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_client_certificate_with_options_async(
        self,
        request: esa20240910_models.DeleteClientCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteClientCertificateResponse:
        """
        @summary Deletes a revoked client certificate.
        
        @param request: DeleteClientCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteClientCertificateResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteClientCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteClientCertificateResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_client_certificate(
        self,
        request: esa20240910_models.DeleteClientCertificateRequest,
    ) -> esa20240910_models.DeleteClientCertificateResponse:
        """
        @summary Deletes a revoked client certificate.
        
        @param request: DeleteClientCertificateRequest
        @return: DeleteClientCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_client_certificate_with_options(request, runtime)

    async def delete_client_certificate_async(
        self,
        request: esa20240910_models.DeleteClientCertificateRequest,
    ) -> esa20240910_models.DeleteClientCertificateResponse:
        """
        @summary Deletes a revoked client certificate.
        
        @param request: DeleteClientCertificateRequest
        @return: DeleteClientCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_client_certificate_with_options_async(request, runtime)

    def delete_compression_rule_with_options(
        self,
        request: esa20240910_models.DeleteCompressionRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteCompressionRuleResponse:
        """
        @summary Delete compression rule
        
        @param request: DeleteCompressionRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteCompressionRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteCompressionRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteCompressionRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_compression_rule_with_options_async(
        self,
        request: esa20240910_models.DeleteCompressionRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteCompressionRuleResponse:
        """
        @summary Delete compression rule
        
        @param request: DeleteCompressionRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteCompressionRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteCompressionRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteCompressionRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_compression_rule(
        self,
        request: esa20240910_models.DeleteCompressionRuleRequest,
    ) -> esa20240910_models.DeleteCompressionRuleResponse:
        """
        @summary Delete compression rule
        
        @param request: DeleteCompressionRuleRequest
        @return: DeleteCompressionRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_compression_rule_with_options(request, runtime)

    async def delete_compression_rule_async(
        self,
        request: esa20240910_models.DeleteCompressionRuleRequest,
    ) -> esa20240910_models.DeleteCompressionRuleResponse:
        """
        @summary Delete compression rule
        
        @param request: DeleteCompressionRuleRequest
        @return: DeleteCompressionRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_compression_rule_with_options_async(request, runtime)

    def delete_custom_scene_policy_with_options(
        self,
        request: esa20240910_models.DeleteCustomScenePolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteCustomScenePolicyResponse:
        """
        @summary Deletes a scenario-specific custom policy.
        
        @param request: DeleteCustomScenePolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteCustomScenePolicyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.policy_id):
            query['PolicyId'] = request.policy_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteCustomScenePolicy',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteCustomScenePolicyResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_custom_scene_policy_with_options_async(
        self,
        request: esa20240910_models.DeleteCustomScenePolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteCustomScenePolicyResponse:
        """
        @summary Deletes a scenario-specific custom policy.
        
        @param request: DeleteCustomScenePolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteCustomScenePolicyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.policy_id):
            query['PolicyId'] = request.policy_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteCustomScenePolicy',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteCustomScenePolicyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_custom_scene_policy(
        self,
        request: esa20240910_models.DeleteCustomScenePolicyRequest,
    ) -> esa20240910_models.DeleteCustomScenePolicyResponse:
        """
        @summary Deletes a scenario-specific custom policy.
        
        @param request: DeleteCustomScenePolicyRequest
        @return: DeleteCustomScenePolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_custom_scene_policy_with_options(request, runtime)

    async def delete_custom_scene_policy_async(
        self,
        request: esa20240910_models.DeleteCustomScenePolicyRequest,
    ) -> esa20240910_models.DeleteCustomScenePolicyResponse:
        """
        @summary Deletes a scenario-specific custom policy.
        
        @param request: DeleteCustomScenePolicyRequest
        @return: DeleteCustomScenePolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_custom_scene_policy_with_options_async(request, runtime)

    def delete_edge_container_app_with_options(
        self,
        request: esa20240910_models.DeleteEdgeContainerAppRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteEdgeContainerAppResponse:
        """
        @summary Deletes a containerized application.
        
        @param request: DeleteEdgeContainerAppRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteEdgeContainerAppResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_id):
            query['AppId'] = request.app_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteEdgeContainerApp',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteEdgeContainerAppResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_edge_container_app_with_options_async(
        self,
        request: esa20240910_models.DeleteEdgeContainerAppRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteEdgeContainerAppResponse:
        """
        @summary Deletes a containerized application.
        
        @param request: DeleteEdgeContainerAppRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteEdgeContainerAppResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_id):
            query['AppId'] = request.app_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteEdgeContainerApp',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteEdgeContainerAppResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_edge_container_app(
        self,
        request: esa20240910_models.DeleteEdgeContainerAppRequest,
    ) -> esa20240910_models.DeleteEdgeContainerAppResponse:
        """
        @summary Deletes a containerized application.
        
        @param request: DeleteEdgeContainerAppRequest
        @return: DeleteEdgeContainerAppResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_edge_container_app_with_options(request, runtime)

    async def delete_edge_container_app_async(
        self,
        request: esa20240910_models.DeleteEdgeContainerAppRequest,
    ) -> esa20240910_models.DeleteEdgeContainerAppResponse:
        """
        @summary Deletes a containerized application.
        
        @param request: DeleteEdgeContainerAppRequest
        @return: DeleteEdgeContainerAppResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_edge_container_app_with_options_async(request, runtime)

    def delete_edge_container_app_record_with_options(
        self,
        request: esa20240910_models.DeleteEdgeContainerAppRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteEdgeContainerAppRecordResponse:
        """
        @summary Disassociates a domain name from a containerized application. After the dissociation, you can no longer use the domain name to access the containerized application.
        
        @param request: DeleteEdgeContainerAppRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteEdgeContainerAppRecordResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.app_id):
            body['AppId'] = request.app_id
        if not UtilClient.is_unset(request.record_name):
            body['RecordName'] = request.record_name
        if not UtilClient.is_unset(request.site_id):
            body['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteEdgeContainerAppRecord',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteEdgeContainerAppRecordResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_edge_container_app_record_with_options_async(
        self,
        request: esa20240910_models.DeleteEdgeContainerAppRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteEdgeContainerAppRecordResponse:
        """
        @summary Disassociates a domain name from a containerized application. After the dissociation, you can no longer use the domain name to access the containerized application.
        
        @param request: DeleteEdgeContainerAppRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteEdgeContainerAppRecordResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.app_id):
            body['AppId'] = request.app_id
        if not UtilClient.is_unset(request.record_name):
            body['RecordName'] = request.record_name
        if not UtilClient.is_unset(request.site_id):
            body['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteEdgeContainerAppRecord',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteEdgeContainerAppRecordResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_edge_container_app_record(
        self,
        request: esa20240910_models.DeleteEdgeContainerAppRecordRequest,
    ) -> esa20240910_models.DeleteEdgeContainerAppRecordResponse:
        """
        @summary Disassociates a domain name from a containerized application. After the dissociation, you can no longer use the domain name to access the containerized application.
        
        @param request: DeleteEdgeContainerAppRecordRequest
        @return: DeleteEdgeContainerAppRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_edge_container_app_record_with_options(request, runtime)

    async def delete_edge_container_app_record_async(
        self,
        request: esa20240910_models.DeleteEdgeContainerAppRecordRequest,
    ) -> esa20240910_models.DeleteEdgeContainerAppRecordResponse:
        """
        @summary Disassociates a domain name from a containerized application. After the dissociation, you can no longer use the domain name to access the containerized application.
        
        @param request: DeleteEdgeContainerAppRecordRequest
        @return: DeleteEdgeContainerAppRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_edge_container_app_record_with_options_async(request, runtime)

    def delete_edge_container_app_version_with_options(
        self,
        request: esa20240910_models.DeleteEdgeContainerAppVersionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteEdgeContainerAppVersionResponse:
        """
        @summary Deletes a version of a containerized application.
        
        @param request: DeleteEdgeContainerAppVersionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteEdgeContainerAppVersionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_id):
            query['AppId'] = request.app_id
        if not UtilClient.is_unset(request.version_id):
            query['VersionId'] = request.version_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteEdgeContainerAppVersion',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteEdgeContainerAppVersionResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_edge_container_app_version_with_options_async(
        self,
        request: esa20240910_models.DeleteEdgeContainerAppVersionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteEdgeContainerAppVersionResponse:
        """
        @summary Deletes a version of a containerized application.
        
        @param request: DeleteEdgeContainerAppVersionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteEdgeContainerAppVersionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_id):
            query['AppId'] = request.app_id
        if not UtilClient.is_unset(request.version_id):
            query['VersionId'] = request.version_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteEdgeContainerAppVersion',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteEdgeContainerAppVersionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_edge_container_app_version(
        self,
        request: esa20240910_models.DeleteEdgeContainerAppVersionRequest,
    ) -> esa20240910_models.DeleteEdgeContainerAppVersionResponse:
        """
        @summary Deletes a version of a containerized application.
        
        @param request: DeleteEdgeContainerAppVersionRequest
        @return: DeleteEdgeContainerAppVersionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_edge_container_app_version_with_options(request, runtime)

    async def delete_edge_container_app_version_async(
        self,
        request: esa20240910_models.DeleteEdgeContainerAppVersionRequest,
    ) -> esa20240910_models.DeleteEdgeContainerAppVersionResponse:
        """
        @summary Deletes a version of a containerized application.
        
        @param request: DeleteEdgeContainerAppVersionRequest
        @return: DeleteEdgeContainerAppVersionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_edge_container_app_version_with_options_async(request, runtime)

    def delete_http_incoming_request_header_modification_rule_with_options(
        self,
        request: esa20240910_models.DeleteHttpIncomingRequestHeaderModificationRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteHttpIncomingRequestHeaderModificationRuleResponse:
        """
        @summary 删除HTTP入站请求头规则
        
        @param request: DeleteHttpIncomingRequestHeaderModificationRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteHttpIncomingRequestHeaderModificationRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteHttpIncomingRequestHeaderModificationRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteHttpIncomingRequestHeaderModificationRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_http_incoming_request_header_modification_rule_with_options_async(
        self,
        request: esa20240910_models.DeleteHttpIncomingRequestHeaderModificationRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteHttpIncomingRequestHeaderModificationRuleResponse:
        """
        @summary 删除HTTP入站请求头规则
        
        @param request: DeleteHttpIncomingRequestHeaderModificationRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteHttpIncomingRequestHeaderModificationRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteHttpIncomingRequestHeaderModificationRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteHttpIncomingRequestHeaderModificationRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_http_incoming_request_header_modification_rule(
        self,
        request: esa20240910_models.DeleteHttpIncomingRequestHeaderModificationRuleRequest,
    ) -> esa20240910_models.DeleteHttpIncomingRequestHeaderModificationRuleResponse:
        """
        @summary 删除HTTP入站请求头规则
        
        @param request: DeleteHttpIncomingRequestHeaderModificationRuleRequest
        @return: DeleteHttpIncomingRequestHeaderModificationRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_http_incoming_request_header_modification_rule_with_options(request, runtime)

    async def delete_http_incoming_request_header_modification_rule_async(
        self,
        request: esa20240910_models.DeleteHttpIncomingRequestHeaderModificationRuleRequest,
    ) -> esa20240910_models.DeleteHttpIncomingRequestHeaderModificationRuleResponse:
        """
        @summary 删除HTTP入站请求头规则
        
        @param request: DeleteHttpIncomingRequestHeaderModificationRuleRequest
        @return: DeleteHttpIncomingRequestHeaderModificationRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_http_incoming_request_header_modification_rule_with_options_async(request, runtime)

    def delete_http_incoming_response_header_modification_rule_with_options(
        self,
        request: esa20240910_models.DeleteHttpIncomingResponseHeaderModificationRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteHttpIncomingResponseHeaderModificationRuleResponse:
        """
        @summary 删除HTTP入站响应头规则
        
        @param request: DeleteHttpIncomingResponseHeaderModificationRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteHttpIncomingResponseHeaderModificationRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteHttpIncomingResponseHeaderModificationRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteHttpIncomingResponseHeaderModificationRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_http_incoming_response_header_modification_rule_with_options_async(
        self,
        request: esa20240910_models.DeleteHttpIncomingResponseHeaderModificationRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteHttpIncomingResponseHeaderModificationRuleResponse:
        """
        @summary 删除HTTP入站响应头规则
        
        @param request: DeleteHttpIncomingResponseHeaderModificationRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteHttpIncomingResponseHeaderModificationRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteHttpIncomingResponseHeaderModificationRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteHttpIncomingResponseHeaderModificationRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_http_incoming_response_header_modification_rule(
        self,
        request: esa20240910_models.DeleteHttpIncomingResponseHeaderModificationRuleRequest,
    ) -> esa20240910_models.DeleteHttpIncomingResponseHeaderModificationRuleResponse:
        """
        @summary 删除HTTP入站响应头规则
        
        @param request: DeleteHttpIncomingResponseHeaderModificationRuleRequest
        @return: DeleteHttpIncomingResponseHeaderModificationRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_http_incoming_response_header_modification_rule_with_options(request, runtime)

    async def delete_http_incoming_response_header_modification_rule_async(
        self,
        request: esa20240910_models.DeleteHttpIncomingResponseHeaderModificationRuleRequest,
    ) -> esa20240910_models.DeleteHttpIncomingResponseHeaderModificationRuleResponse:
        """
        @summary 删除HTTP入站响应头规则
        
        @param request: DeleteHttpIncomingResponseHeaderModificationRuleRequest
        @return: DeleteHttpIncomingResponseHeaderModificationRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_http_incoming_response_header_modification_rule_with_options_async(request, runtime)

    def delete_http_request_header_modification_rule_with_options(
        self,
        request: esa20240910_models.DeleteHttpRequestHeaderModificationRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteHttpRequestHeaderModificationRuleResponse:
        """
        @summary Deletes the configuration of modifying HTTP request headers for a website.
        
        @param request: DeleteHttpRequestHeaderModificationRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteHttpRequestHeaderModificationRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteHttpRequestHeaderModificationRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteHttpRequestHeaderModificationRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_http_request_header_modification_rule_with_options_async(
        self,
        request: esa20240910_models.DeleteHttpRequestHeaderModificationRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteHttpRequestHeaderModificationRuleResponse:
        """
        @summary Deletes the configuration of modifying HTTP request headers for a website.
        
        @param request: DeleteHttpRequestHeaderModificationRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteHttpRequestHeaderModificationRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteHttpRequestHeaderModificationRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteHttpRequestHeaderModificationRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_http_request_header_modification_rule(
        self,
        request: esa20240910_models.DeleteHttpRequestHeaderModificationRuleRequest,
    ) -> esa20240910_models.DeleteHttpRequestHeaderModificationRuleResponse:
        """
        @summary Deletes the configuration of modifying HTTP request headers for a website.
        
        @param request: DeleteHttpRequestHeaderModificationRuleRequest
        @return: DeleteHttpRequestHeaderModificationRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_http_request_header_modification_rule_with_options(request, runtime)

    async def delete_http_request_header_modification_rule_async(
        self,
        request: esa20240910_models.DeleteHttpRequestHeaderModificationRuleRequest,
    ) -> esa20240910_models.DeleteHttpRequestHeaderModificationRuleResponse:
        """
        @summary Deletes the configuration of modifying HTTP request headers for a website.
        
        @param request: DeleteHttpRequestHeaderModificationRuleRequest
        @return: DeleteHttpRequestHeaderModificationRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_http_request_header_modification_rule_with_options_async(request, runtime)

    def delete_http_response_header_modification_rule_with_options(
        self,
        request: esa20240910_models.DeleteHttpResponseHeaderModificationRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteHttpResponseHeaderModificationRuleResponse:
        """
        @summary Deletes the configuration of modifying HTTP response headers for a website.
        
        @param request: DeleteHttpResponseHeaderModificationRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteHttpResponseHeaderModificationRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteHttpResponseHeaderModificationRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteHttpResponseHeaderModificationRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_http_response_header_modification_rule_with_options_async(
        self,
        request: esa20240910_models.DeleteHttpResponseHeaderModificationRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteHttpResponseHeaderModificationRuleResponse:
        """
        @summary Deletes the configuration of modifying HTTP response headers for a website.
        
        @param request: DeleteHttpResponseHeaderModificationRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteHttpResponseHeaderModificationRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteHttpResponseHeaderModificationRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteHttpResponseHeaderModificationRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_http_response_header_modification_rule(
        self,
        request: esa20240910_models.DeleteHttpResponseHeaderModificationRuleRequest,
    ) -> esa20240910_models.DeleteHttpResponseHeaderModificationRuleResponse:
        """
        @summary Deletes the configuration of modifying HTTP response headers for a website.
        
        @param request: DeleteHttpResponseHeaderModificationRuleRequest
        @return: DeleteHttpResponseHeaderModificationRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_http_response_header_modification_rule_with_options(request, runtime)

    async def delete_http_response_header_modification_rule_async(
        self,
        request: esa20240910_models.DeleteHttpResponseHeaderModificationRuleRequest,
    ) -> esa20240910_models.DeleteHttpResponseHeaderModificationRuleResponse:
        """
        @summary Deletes the configuration of modifying HTTP response headers for a website.
        
        @param request: DeleteHttpResponseHeaderModificationRuleRequest
        @return: DeleteHttpResponseHeaderModificationRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_http_response_header_modification_rule_with_options_async(request, runtime)

    def delete_https_application_configuration_with_options(
        self,
        request: esa20240910_models.DeleteHttpsApplicationConfigurationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteHttpsApplicationConfigurationResponse:
        """
        @summary Delete HTTPS Application Configuration
        
        @param request: DeleteHttpsApplicationConfigurationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteHttpsApplicationConfigurationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteHttpsApplicationConfiguration',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteHttpsApplicationConfigurationResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_https_application_configuration_with_options_async(
        self,
        request: esa20240910_models.DeleteHttpsApplicationConfigurationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteHttpsApplicationConfigurationResponse:
        """
        @summary Delete HTTPS Application Configuration
        
        @param request: DeleteHttpsApplicationConfigurationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteHttpsApplicationConfigurationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteHttpsApplicationConfiguration',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteHttpsApplicationConfigurationResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_https_application_configuration(
        self,
        request: esa20240910_models.DeleteHttpsApplicationConfigurationRequest,
    ) -> esa20240910_models.DeleteHttpsApplicationConfigurationResponse:
        """
        @summary Delete HTTPS Application Configuration
        
        @param request: DeleteHttpsApplicationConfigurationRequest
        @return: DeleteHttpsApplicationConfigurationResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_https_application_configuration_with_options(request, runtime)

    async def delete_https_application_configuration_async(
        self,
        request: esa20240910_models.DeleteHttpsApplicationConfigurationRequest,
    ) -> esa20240910_models.DeleteHttpsApplicationConfigurationResponse:
        """
        @summary Delete HTTPS Application Configuration
        
        @param request: DeleteHttpsApplicationConfigurationRequest
        @return: DeleteHttpsApplicationConfigurationResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_https_application_configuration_with_options_async(request, runtime)

    def delete_https_basic_configuration_with_options(
        self,
        request: esa20240910_models.DeleteHttpsBasicConfigurationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteHttpsBasicConfigurationResponse:
        """
        @summary Delete HTTPS Basic Configuration
        
        @param request: DeleteHttpsBasicConfigurationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteHttpsBasicConfigurationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteHttpsBasicConfiguration',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteHttpsBasicConfigurationResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_https_basic_configuration_with_options_async(
        self,
        request: esa20240910_models.DeleteHttpsBasicConfigurationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteHttpsBasicConfigurationResponse:
        """
        @summary Delete HTTPS Basic Configuration
        
        @param request: DeleteHttpsBasicConfigurationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteHttpsBasicConfigurationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteHttpsBasicConfiguration',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteHttpsBasicConfigurationResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_https_basic_configuration(
        self,
        request: esa20240910_models.DeleteHttpsBasicConfigurationRequest,
    ) -> esa20240910_models.DeleteHttpsBasicConfigurationResponse:
        """
        @summary Delete HTTPS Basic Configuration
        
        @param request: DeleteHttpsBasicConfigurationRequest
        @return: DeleteHttpsBasicConfigurationResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_https_basic_configuration_with_options(request, runtime)

    async def delete_https_basic_configuration_async(
        self,
        request: esa20240910_models.DeleteHttpsBasicConfigurationRequest,
    ) -> esa20240910_models.DeleteHttpsBasicConfigurationResponse:
        """
        @summary Delete HTTPS Basic Configuration
        
        @param request: DeleteHttpsBasicConfigurationRequest
        @return: DeleteHttpsBasicConfigurationResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_https_basic_configuration_with_options_async(request, runtime)

    def delete_image_transform_with_options(
        self,
        request: esa20240910_models.DeleteImageTransformRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteImageTransformResponse:
        """
        @summary Delete Site Image Transformation Configuration
        
        @param request: DeleteImageTransformRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteImageTransformResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteImageTransform',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteImageTransformResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_image_transform_with_options_async(
        self,
        request: esa20240910_models.DeleteImageTransformRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteImageTransformResponse:
        """
        @summary Delete Site Image Transformation Configuration
        
        @param request: DeleteImageTransformRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteImageTransformResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteImageTransform',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteImageTransformResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_image_transform(
        self,
        request: esa20240910_models.DeleteImageTransformRequest,
    ) -> esa20240910_models.DeleteImageTransformResponse:
        """
        @summary Delete Site Image Transformation Configuration
        
        @param request: DeleteImageTransformRequest
        @return: DeleteImageTransformResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_image_transform_with_options(request, runtime)

    async def delete_image_transform_async(
        self,
        request: esa20240910_models.DeleteImageTransformRequest,
    ) -> esa20240910_models.DeleteImageTransformResponse:
        """
        @summary Delete Site Image Transformation Configuration
        
        @param request: DeleteImageTransformRequest
        @return: DeleteImageTransformResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_image_transform_with_options_async(request, runtime)

    def delete_kv_with_options(
        self,
        request: esa20240910_models.DeleteKvRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteKvResponse:
        """
        @summary Deletes a key-value pair from a namespace.
        
        @param request: DeleteKvRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteKvResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteKv',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteKvResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_kv_with_options_async(
        self,
        request: esa20240910_models.DeleteKvRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteKvResponse:
        """
        @summary Deletes a key-value pair from a namespace.
        
        @param request: DeleteKvRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteKvResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteKv',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteKvResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_kv(
        self,
        request: esa20240910_models.DeleteKvRequest,
    ) -> esa20240910_models.DeleteKvResponse:
        """
        @summary Deletes a key-value pair from a namespace.
        
        @param request: DeleteKvRequest
        @return: DeleteKvResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_kv_with_options(request, runtime)

    async def delete_kv_async(
        self,
        request: esa20240910_models.DeleteKvRequest,
    ) -> esa20240910_models.DeleteKvResponse:
        """
        @summary Deletes a key-value pair from a namespace.
        
        @param request: DeleteKvRequest
        @return: DeleteKvResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_kv_with_options_async(request, runtime)

    def delete_kv_namespace_with_options(
        self,
        request: esa20240910_models.DeleteKvNamespaceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteKvNamespaceResponse:
        """
        @summary Deletes a namespace from an Alibaba Cloud account.
        
        @param request: DeleteKvNamespaceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteKvNamespaceResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteKvNamespace',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteKvNamespaceResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_kv_namespace_with_options_async(
        self,
        request: esa20240910_models.DeleteKvNamespaceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteKvNamespaceResponse:
        """
        @summary Deletes a namespace from an Alibaba Cloud account.
        
        @param request: DeleteKvNamespaceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteKvNamespaceResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteKvNamespace',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteKvNamespaceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_kv_namespace(
        self,
        request: esa20240910_models.DeleteKvNamespaceRequest,
    ) -> esa20240910_models.DeleteKvNamespaceResponse:
        """
        @summary Deletes a namespace from an Alibaba Cloud account.
        
        @param request: DeleteKvNamespaceRequest
        @return: DeleteKvNamespaceResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_kv_namespace_with_options(request, runtime)

    async def delete_kv_namespace_async(
        self,
        request: esa20240910_models.DeleteKvNamespaceRequest,
    ) -> esa20240910_models.DeleteKvNamespaceResponse:
        """
        @summary Deletes a namespace from an Alibaba Cloud account.
        
        @param request: DeleteKvNamespaceRequest
        @return: DeleteKvNamespaceResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_kv_namespace_with_options_async(request, runtime)

    def delete_list_with_options(
        self,
        request: esa20240910_models.DeleteListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteListResponse:
        """
        @summary Deletes a custom list that is no longer needed.
        
        @param request: DeleteListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteListResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteList',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteListResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_list_with_options_async(
        self,
        request: esa20240910_models.DeleteListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteListResponse:
        """
        @summary Deletes a custom list that is no longer needed.
        
        @param request: DeleteListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteListResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteList',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_list(
        self,
        request: esa20240910_models.DeleteListRequest,
    ) -> esa20240910_models.DeleteListResponse:
        """
        @summary Deletes a custom list that is no longer needed.
        
        @param request: DeleteListRequest
        @return: DeleteListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_list_with_options(request, runtime)

    async def delete_list_async(
        self,
        request: esa20240910_models.DeleteListRequest,
    ) -> esa20240910_models.DeleteListResponse:
        """
        @summary Deletes a custom list that is no longer needed.
        
        @param request: DeleteListRequest
        @return: DeleteListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_list_with_options_async(request, runtime)

    def delete_load_balancer_with_options(
        self,
        request: esa20240910_models.DeleteLoadBalancerRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteLoadBalancerResponse:
        """
        @summary Delete Load Balancer
        
        @description Delete a load balancer by its ID, only one can be deleted at a time.
        
        @param request: DeleteLoadBalancerRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteLoadBalancerResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteLoadBalancer',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteLoadBalancerResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_load_balancer_with_options_async(
        self,
        request: esa20240910_models.DeleteLoadBalancerRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteLoadBalancerResponse:
        """
        @summary Delete Load Balancer
        
        @description Delete a load balancer by its ID, only one can be deleted at a time.
        
        @param request: DeleteLoadBalancerRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteLoadBalancerResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteLoadBalancer',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteLoadBalancerResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_load_balancer(
        self,
        request: esa20240910_models.DeleteLoadBalancerRequest,
    ) -> esa20240910_models.DeleteLoadBalancerResponse:
        """
        @summary Delete Load Balancer
        
        @description Delete a load balancer by its ID, only one can be deleted at a time.
        
        @param request: DeleteLoadBalancerRequest
        @return: DeleteLoadBalancerResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_load_balancer_with_options(request, runtime)

    async def delete_load_balancer_async(
        self,
        request: esa20240910_models.DeleteLoadBalancerRequest,
    ) -> esa20240910_models.DeleteLoadBalancerResponse:
        """
        @summary Delete Load Balancer
        
        @description Delete a load balancer by its ID, only one can be deleted at a time.
        
        @param request: DeleteLoadBalancerRequest
        @return: DeleteLoadBalancerResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_load_balancer_with_options_async(request, runtime)

    def delete_network_optimization_with_options(
        self,
        request: esa20240910_models.DeleteNetworkOptimizationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteNetworkOptimizationResponse:
        """
        @summary Delete Network Optimization Configuration
        
        @param request: DeleteNetworkOptimizationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteNetworkOptimizationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteNetworkOptimization',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteNetworkOptimizationResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_network_optimization_with_options_async(
        self,
        request: esa20240910_models.DeleteNetworkOptimizationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteNetworkOptimizationResponse:
        """
        @summary Delete Network Optimization Configuration
        
        @param request: DeleteNetworkOptimizationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteNetworkOptimizationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteNetworkOptimization',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteNetworkOptimizationResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_network_optimization(
        self,
        request: esa20240910_models.DeleteNetworkOptimizationRequest,
    ) -> esa20240910_models.DeleteNetworkOptimizationResponse:
        """
        @summary Delete Network Optimization Configuration
        
        @param request: DeleteNetworkOptimizationRequest
        @return: DeleteNetworkOptimizationResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_network_optimization_with_options(request, runtime)

    async def delete_network_optimization_async(
        self,
        request: esa20240910_models.DeleteNetworkOptimizationRequest,
    ) -> esa20240910_models.DeleteNetworkOptimizationResponse:
        """
        @summary Delete Network Optimization Configuration
        
        @param request: DeleteNetworkOptimizationRequest
        @return: DeleteNetworkOptimizationResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_network_optimization_with_options_async(request, runtime)

    def delete_origin_ca_certificate_with_options(
        self,
        request: esa20240910_models.DeleteOriginCaCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteOriginCaCertificateResponse:
        """
        @summary 删除源服务器CA证书
        
        @param request: DeleteOriginCaCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteOriginCaCertificateResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteOriginCaCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteOriginCaCertificateResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_origin_ca_certificate_with_options_async(
        self,
        request: esa20240910_models.DeleteOriginCaCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteOriginCaCertificateResponse:
        """
        @summary 删除源服务器CA证书
        
        @param request: DeleteOriginCaCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteOriginCaCertificateResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteOriginCaCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteOriginCaCertificateResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_origin_ca_certificate(
        self,
        request: esa20240910_models.DeleteOriginCaCertificateRequest,
    ) -> esa20240910_models.DeleteOriginCaCertificateResponse:
        """
        @summary 删除源服务器CA证书
        
        @param request: DeleteOriginCaCertificateRequest
        @return: DeleteOriginCaCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_origin_ca_certificate_with_options(request, runtime)

    async def delete_origin_ca_certificate_async(
        self,
        request: esa20240910_models.DeleteOriginCaCertificateRequest,
    ) -> esa20240910_models.DeleteOriginCaCertificateResponse:
        """
        @summary 删除源服务器CA证书
        
        @param request: DeleteOriginCaCertificateRequest
        @return: DeleteOriginCaCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_origin_ca_certificate_with_options_async(request, runtime)

    def delete_origin_client_certificate_with_options(
        self,
        request: esa20240910_models.DeleteOriginClientCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteOriginClientCertificateResponse:
        """
        @summary 删除域名回源客户端证书
        
        @param request: DeleteOriginClientCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteOriginClientCertificateResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteOriginClientCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteOriginClientCertificateResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_origin_client_certificate_with_options_async(
        self,
        request: esa20240910_models.DeleteOriginClientCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteOriginClientCertificateResponse:
        """
        @summary 删除域名回源客户端证书
        
        @param request: DeleteOriginClientCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteOriginClientCertificateResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteOriginClientCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteOriginClientCertificateResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_origin_client_certificate(
        self,
        request: esa20240910_models.DeleteOriginClientCertificateRequest,
    ) -> esa20240910_models.DeleteOriginClientCertificateResponse:
        """
        @summary 删除域名回源客户端证书
        
        @param request: DeleteOriginClientCertificateRequest
        @return: DeleteOriginClientCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_origin_client_certificate_with_options(request, runtime)

    async def delete_origin_client_certificate_async(
        self,
        request: esa20240910_models.DeleteOriginClientCertificateRequest,
    ) -> esa20240910_models.DeleteOriginClientCertificateResponse:
        """
        @summary 删除域名回源客户端证书
        
        @param request: DeleteOriginClientCertificateRequest
        @return: DeleteOriginClientCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_origin_client_certificate_with_options_async(request, runtime)

    def delete_origin_pool_with_options(
        self,
        request: esa20240910_models.DeleteOriginPoolRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteOriginPoolResponse:
        """
        @summary Delete Origin Address Pool
        
        @param request: DeleteOriginPoolRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteOriginPoolResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteOriginPool',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteOriginPoolResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_origin_pool_with_options_async(
        self,
        request: esa20240910_models.DeleteOriginPoolRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteOriginPoolResponse:
        """
        @summary Delete Origin Address Pool
        
        @param request: DeleteOriginPoolRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteOriginPoolResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteOriginPool',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteOriginPoolResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_origin_pool(
        self,
        request: esa20240910_models.DeleteOriginPoolRequest,
    ) -> esa20240910_models.DeleteOriginPoolResponse:
        """
        @summary Delete Origin Address Pool
        
        @param request: DeleteOriginPoolRequest
        @return: DeleteOriginPoolResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_origin_pool_with_options(request, runtime)

    async def delete_origin_pool_async(
        self,
        request: esa20240910_models.DeleteOriginPoolRequest,
    ) -> esa20240910_models.DeleteOriginPoolResponse:
        """
        @summary Delete Origin Address Pool
        
        @param request: DeleteOriginPoolRequest
        @return: DeleteOriginPoolResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_origin_pool_with_options_async(request, runtime)

    def delete_origin_protection_with_options(
        self,
        request: esa20240910_models.DeleteOriginProtectionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteOriginProtectionResponse:
        """
        @summary Disables origin protection.
        
        @param request: DeleteOriginProtectionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteOriginProtectionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteOriginProtection',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteOriginProtectionResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_origin_protection_with_options_async(
        self,
        request: esa20240910_models.DeleteOriginProtectionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteOriginProtectionResponse:
        """
        @summary Disables origin protection.
        
        @param request: DeleteOriginProtectionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteOriginProtectionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteOriginProtection',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteOriginProtectionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_origin_protection(
        self,
        request: esa20240910_models.DeleteOriginProtectionRequest,
    ) -> esa20240910_models.DeleteOriginProtectionResponse:
        """
        @summary Disables origin protection.
        
        @param request: DeleteOriginProtectionRequest
        @return: DeleteOriginProtectionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_origin_protection_with_options(request, runtime)

    async def delete_origin_protection_async(
        self,
        request: esa20240910_models.DeleteOriginProtectionRequest,
    ) -> esa20240910_models.DeleteOriginProtectionResponse:
        """
        @summary Disables origin protection.
        
        @param request: DeleteOriginProtectionRequest
        @return: DeleteOriginProtectionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_origin_protection_with_options_async(request, runtime)

    def delete_origin_rule_with_options(
        self,
        request: esa20240910_models.DeleteOriginRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteOriginRuleResponse:
        """
        @summary Delete Origin Rule Configuration
        
        @param request: DeleteOriginRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteOriginRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteOriginRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteOriginRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_origin_rule_with_options_async(
        self,
        request: esa20240910_models.DeleteOriginRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteOriginRuleResponse:
        """
        @summary Delete Origin Rule Configuration
        
        @param request: DeleteOriginRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteOriginRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteOriginRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteOriginRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_origin_rule(
        self,
        request: esa20240910_models.DeleteOriginRuleRequest,
    ) -> esa20240910_models.DeleteOriginRuleResponse:
        """
        @summary Delete Origin Rule Configuration
        
        @param request: DeleteOriginRuleRequest
        @return: DeleteOriginRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_origin_rule_with_options(request, runtime)

    async def delete_origin_rule_async(
        self,
        request: esa20240910_models.DeleteOriginRuleRequest,
    ) -> esa20240910_models.DeleteOriginRuleResponse:
        """
        @summary Delete Origin Rule Configuration
        
        @param request: DeleteOriginRuleRequest
        @return: DeleteOriginRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_origin_rule_with_options_async(request, runtime)

    def delete_page_with_options(
        self,
        request: esa20240910_models.DeletePageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeletePageResponse:
        """
        @summary Deletes a custom error page that is no longer needed.
        
        @param request: DeletePageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeletePageResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeletePage',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeletePageResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_page_with_options_async(
        self,
        request: esa20240910_models.DeletePageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeletePageResponse:
        """
        @summary Deletes a custom error page that is no longer needed.
        
        @param request: DeletePageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeletePageResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeletePage',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeletePageResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_page(
        self,
        request: esa20240910_models.DeletePageRequest,
    ) -> esa20240910_models.DeletePageResponse:
        """
        @summary Deletes a custom error page that is no longer needed.
        
        @param request: DeletePageRequest
        @return: DeletePageResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_page_with_options(request, runtime)

    async def delete_page_async(
        self,
        request: esa20240910_models.DeletePageRequest,
    ) -> esa20240910_models.DeletePageResponse:
        """
        @summary Deletes a custom error page that is no longer needed.
        
        @param request: DeletePageRequest
        @return: DeletePageResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_page_with_options_async(request, runtime)

    def delete_record_with_options(
        self,
        request: esa20240910_models.DeleteRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteRecordResponse:
        """
        @summary Deletes a DNS record of a website based on the specified RecordId.
        
        @param request: DeleteRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteRecordResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.record_id):
            query['RecordId'] = request.record_id
        if not UtilClient.is_unset(request.security_token):
            query['SecurityToken'] = request.security_token
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteRecord',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteRecordResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_record_with_options_async(
        self,
        request: esa20240910_models.DeleteRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteRecordResponse:
        """
        @summary Deletes a DNS record of a website based on the specified RecordId.
        
        @param request: DeleteRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteRecordResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.record_id):
            query['RecordId'] = request.record_id
        if not UtilClient.is_unset(request.security_token):
            query['SecurityToken'] = request.security_token
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteRecord',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteRecordResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_record(
        self,
        request: esa20240910_models.DeleteRecordRequest,
    ) -> esa20240910_models.DeleteRecordResponse:
        """
        @summary Deletes a DNS record of a website based on the specified RecordId.
        
        @param request: DeleteRecordRequest
        @return: DeleteRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_record_with_options(request, runtime)

    async def delete_record_async(
        self,
        request: esa20240910_models.DeleteRecordRequest,
    ) -> esa20240910_models.DeleteRecordResponse:
        """
        @summary Deletes a DNS record of a website based on the specified RecordId.
        
        @param request: DeleteRecordRequest
        @return: DeleteRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_record_with_options_async(request, runtime)

    def delete_redirect_rule_with_options(
        self,
        request: esa20240910_models.DeleteRedirectRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteRedirectRuleResponse:
        """
        @summary Deletes a URL redirect rule for a website.
        
        @param request: DeleteRedirectRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteRedirectRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteRedirectRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteRedirectRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_redirect_rule_with_options_async(
        self,
        request: esa20240910_models.DeleteRedirectRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteRedirectRuleResponse:
        """
        @summary Deletes a URL redirect rule for a website.
        
        @param request: DeleteRedirectRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteRedirectRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteRedirectRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteRedirectRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_redirect_rule(
        self,
        request: esa20240910_models.DeleteRedirectRuleRequest,
    ) -> esa20240910_models.DeleteRedirectRuleResponse:
        """
        @summary Deletes a URL redirect rule for a website.
        
        @param request: DeleteRedirectRuleRequest
        @return: DeleteRedirectRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_redirect_rule_with_options(request, runtime)

    async def delete_redirect_rule_async(
        self,
        request: esa20240910_models.DeleteRedirectRuleRequest,
    ) -> esa20240910_models.DeleteRedirectRuleResponse:
        """
        @summary Deletes a URL redirect rule for a website.
        
        @param request: DeleteRedirectRuleRequest
        @return: DeleteRedirectRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_redirect_rule_with_options_async(request, runtime)

    def delete_rewrite_url_rule_with_options(
        self,
        request: esa20240910_models.DeleteRewriteUrlRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteRewriteUrlRuleResponse:
        """
        @summary Deletes a URL rewrite rule for a website.
        
        @param request: DeleteRewriteUrlRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteRewriteUrlRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteRewriteUrlRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteRewriteUrlRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_rewrite_url_rule_with_options_async(
        self,
        request: esa20240910_models.DeleteRewriteUrlRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteRewriteUrlRuleResponse:
        """
        @summary Deletes a URL rewrite rule for a website.
        
        @param request: DeleteRewriteUrlRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteRewriteUrlRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteRewriteUrlRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteRewriteUrlRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_rewrite_url_rule(
        self,
        request: esa20240910_models.DeleteRewriteUrlRuleRequest,
    ) -> esa20240910_models.DeleteRewriteUrlRuleResponse:
        """
        @summary Deletes a URL rewrite rule for a website.
        
        @param request: DeleteRewriteUrlRuleRequest
        @return: DeleteRewriteUrlRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_rewrite_url_rule_with_options(request, runtime)

    async def delete_rewrite_url_rule_async(
        self,
        request: esa20240910_models.DeleteRewriteUrlRuleRequest,
    ) -> esa20240910_models.DeleteRewriteUrlRuleResponse:
        """
        @summary Deletes a URL rewrite rule for a website.
        
        @param request: DeleteRewriteUrlRuleRequest
        @return: DeleteRewriteUrlRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_rewrite_url_rule_with_options_async(request, runtime)

    def delete_routine_with_options(
        self,
        request: esa20240910_models.DeleteRoutineRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteRoutineResponse:
        """
        @summary Deletes a routine in Edge Routine.
        
        @param request: DeleteRoutineRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteRoutineResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteRoutine',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteRoutineResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_routine_with_options_async(
        self,
        request: esa20240910_models.DeleteRoutineRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteRoutineResponse:
        """
        @summary Deletes a routine in Edge Routine.
        
        @param request: DeleteRoutineRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteRoutineResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteRoutine',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteRoutineResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_routine(
        self,
        request: esa20240910_models.DeleteRoutineRequest,
    ) -> esa20240910_models.DeleteRoutineResponse:
        """
        @summary Deletes a routine in Edge Routine.
        
        @param request: DeleteRoutineRequest
        @return: DeleteRoutineResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_routine_with_options(request, runtime)

    async def delete_routine_async(
        self,
        request: esa20240910_models.DeleteRoutineRequest,
    ) -> esa20240910_models.DeleteRoutineResponse:
        """
        @summary Deletes a routine in Edge Routine.
        
        @param request: DeleteRoutineRequest
        @return: DeleteRoutineResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_routine_with_options_async(request, runtime)

    def delete_routine_code_version_with_options(
        self,
        request: esa20240910_models.DeleteRoutineCodeVersionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteRoutineCodeVersionResponse:
        """
        @summary Deletes a code version of a routine.
        
        @param request: DeleteRoutineCodeVersionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteRoutineCodeVersionResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.code_version):
            body['CodeVersion'] = request.code_version
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteRoutineCodeVersion',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteRoutineCodeVersionResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_routine_code_version_with_options_async(
        self,
        request: esa20240910_models.DeleteRoutineCodeVersionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteRoutineCodeVersionResponse:
        """
        @summary Deletes a code version of a routine.
        
        @param request: DeleteRoutineCodeVersionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteRoutineCodeVersionResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.code_version):
            body['CodeVersion'] = request.code_version
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteRoutineCodeVersion',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteRoutineCodeVersionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_routine_code_version(
        self,
        request: esa20240910_models.DeleteRoutineCodeVersionRequest,
    ) -> esa20240910_models.DeleteRoutineCodeVersionResponse:
        """
        @summary Deletes a code version of a routine.
        
        @param request: DeleteRoutineCodeVersionRequest
        @return: DeleteRoutineCodeVersionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_routine_code_version_with_options(request, runtime)

    async def delete_routine_code_version_async(
        self,
        request: esa20240910_models.DeleteRoutineCodeVersionRequest,
    ) -> esa20240910_models.DeleteRoutineCodeVersionResponse:
        """
        @summary Deletes a code version of a routine.
        
        @param request: DeleteRoutineCodeVersionRequest
        @return: DeleteRoutineCodeVersionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_routine_code_version_with_options_async(request, runtime)

    def delete_routine_related_record_with_options(
        self,
        request: esa20240910_models.DeleteRoutineRelatedRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteRoutineRelatedRecordResponse:
        """
        @summary Deletes a record that is associated with a routine.
        
        @param request: DeleteRoutineRelatedRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteRoutineRelatedRecordResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        body = {}
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.record_id):
            body['RecordId'] = request.record_id
        if not UtilClient.is_unset(request.record_name):
            body['RecordName'] = request.record_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteRoutineRelatedRecord',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteRoutineRelatedRecordResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_routine_related_record_with_options_async(
        self,
        request: esa20240910_models.DeleteRoutineRelatedRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteRoutineRelatedRecordResponse:
        """
        @summary Deletes a record that is associated with a routine.
        
        @param request: DeleteRoutineRelatedRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteRoutineRelatedRecordResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        body = {}
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.record_id):
            body['RecordId'] = request.record_id
        if not UtilClient.is_unset(request.record_name):
            body['RecordName'] = request.record_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteRoutineRelatedRecord',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteRoutineRelatedRecordResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_routine_related_record(
        self,
        request: esa20240910_models.DeleteRoutineRelatedRecordRequest,
    ) -> esa20240910_models.DeleteRoutineRelatedRecordResponse:
        """
        @summary Deletes a record that is associated with a routine.
        
        @param request: DeleteRoutineRelatedRecordRequest
        @return: DeleteRoutineRelatedRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_routine_related_record_with_options(request, runtime)

    async def delete_routine_related_record_async(
        self,
        request: esa20240910_models.DeleteRoutineRelatedRecordRequest,
    ) -> esa20240910_models.DeleteRoutineRelatedRecordResponse:
        """
        @summary Deletes a record that is associated with a routine.
        
        @param request: DeleteRoutineRelatedRecordRequest
        @return: DeleteRoutineRelatedRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_routine_related_record_with_options_async(request, runtime)

    def delete_routine_route_with_options(
        self,
        request: esa20240910_models.DeleteRoutineRouteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteRoutineRouteResponse:
        """
        @summary 删除边缘函数路由配置
        
        @param request: DeleteRoutineRouteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteRoutineRouteResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteRoutineRoute',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteRoutineRouteResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_routine_route_with_options_async(
        self,
        request: esa20240910_models.DeleteRoutineRouteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteRoutineRouteResponse:
        """
        @summary 删除边缘函数路由配置
        
        @param request: DeleteRoutineRouteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteRoutineRouteResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteRoutineRoute',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteRoutineRouteResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_routine_route(
        self,
        request: esa20240910_models.DeleteRoutineRouteRequest,
    ) -> esa20240910_models.DeleteRoutineRouteResponse:
        """
        @summary 删除边缘函数路由配置
        
        @param request: DeleteRoutineRouteRequest
        @return: DeleteRoutineRouteResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_routine_route_with_options(request, runtime)

    async def delete_routine_route_async(
        self,
        request: esa20240910_models.DeleteRoutineRouteRequest,
    ) -> esa20240910_models.DeleteRoutineRouteResponse:
        """
        @summary 删除边缘函数路由配置
        
        @param request: DeleteRoutineRouteRequest
        @return: DeleteRoutineRouteResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_routine_route_with_options_async(request, runtime)

    def delete_scheduled_preload_execution_with_options(
        self,
        request: esa20240910_models.DeleteScheduledPreloadExecutionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteScheduledPreloadExecutionResponse:
        """
        @summary Deletes a scheduled prefetch plan based on the plan ID.
        
        @param request: DeleteScheduledPreloadExecutionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteScheduledPreloadExecutionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteScheduledPreloadExecution',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteScheduledPreloadExecutionResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_scheduled_preload_execution_with_options_async(
        self,
        request: esa20240910_models.DeleteScheduledPreloadExecutionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteScheduledPreloadExecutionResponse:
        """
        @summary Deletes a scheduled prefetch plan based on the plan ID.
        
        @param request: DeleteScheduledPreloadExecutionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteScheduledPreloadExecutionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteScheduledPreloadExecution',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteScheduledPreloadExecutionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_scheduled_preload_execution(
        self,
        request: esa20240910_models.DeleteScheduledPreloadExecutionRequest,
    ) -> esa20240910_models.DeleteScheduledPreloadExecutionResponse:
        """
        @summary Deletes a scheduled prefetch plan based on the plan ID.
        
        @param request: DeleteScheduledPreloadExecutionRequest
        @return: DeleteScheduledPreloadExecutionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_scheduled_preload_execution_with_options(request, runtime)

    async def delete_scheduled_preload_execution_async(
        self,
        request: esa20240910_models.DeleteScheduledPreloadExecutionRequest,
    ) -> esa20240910_models.DeleteScheduledPreloadExecutionResponse:
        """
        @summary Deletes a scheduled prefetch plan based on the plan ID.
        
        @param request: DeleteScheduledPreloadExecutionRequest
        @return: DeleteScheduledPreloadExecutionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_scheduled_preload_execution_with_options_async(request, runtime)

    def delete_scheduled_preload_job_with_options(
        self,
        request: esa20240910_models.DeleteScheduledPreloadJobRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteScheduledPreloadJobResponse:
        """
        @summary Deletes a specified scheduled prefetch task based on the task ID.
        
        @param request: DeleteScheduledPreloadJobRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteScheduledPreloadJobResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteScheduledPreloadJob',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteScheduledPreloadJobResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_scheduled_preload_job_with_options_async(
        self,
        request: esa20240910_models.DeleteScheduledPreloadJobRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteScheduledPreloadJobResponse:
        """
        @summary Deletes a specified scheduled prefetch task based on the task ID.
        
        @param request: DeleteScheduledPreloadJobRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteScheduledPreloadJobResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteScheduledPreloadJob',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteScheduledPreloadJobResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_scheduled_preload_job(
        self,
        request: esa20240910_models.DeleteScheduledPreloadJobRequest,
    ) -> esa20240910_models.DeleteScheduledPreloadJobResponse:
        """
        @summary Deletes a specified scheduled prefetch task based on the task ID.
        
        @param request: DeleteScheduledPreloadJobRequest
        @return: DeleteScheduledPreloadJobResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_scheduled_preload_job_with_options(request, runtime)

    async def delete_scheduled_preload_job_async(
        self,
        request: esa20240910_models.DeleteScheduledPreloadJobRequest,
    ) -> esa20240910_models.DeleteScheduledPreloadJobResponse:
        """
        @summary Deletes a specified scheduled prefetch task based on the task ID.
        
        @param request: DeleteScheduledPreloadJobRequest
        @return: DeleteScheduledPreloadJobResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_scheduled_preload_job_with_options_async(request, runtime)

    def delete_site_with_options(
        self,
        request: esa20240910_models.DeleteSiteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteSiteResponse:
        """
        @summary Deletes a website based on the specified website ID.
        
        @param request: DeleteSiteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteSiteResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.owner_id):
            query['OwnerId'] = request.owner_id
        if not UtilClient.is_unset(request.security_token):
            query['SecurityToken'] = request.security_token
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteSite',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteSiteResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_site_with_options_async(
        self,
        request: esa20240910_models.DeleteSiteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteSiteResponse:
        """
        @summary Deletes a website based on the specified website ID.
        
        @param request: DeleteSiteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteSiteResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.owner_id):
            query['OwnerId'] = request.owner_id
        if not UtilClient.is_unset(request.security_token):
            query['SecurityToken'] = request.security_token
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteSite',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteSiteResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_site(
        self,
        request: esa20240910_models.DeleteSiteRequest,
    ) -> esa20240910_models.DeleteSiteResponse:
        """
        @summary Deletes a website based on the specified website ID.
        
        @param request: DeleteSiteRequest
        @return: DeleteSiteResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_site_with_options(request, runtime)

    async def delete_site_async(
        self,
        request: esa20240910_models.DeleteSiteRequest,
    ) -> esa20240910_models.DeleteSiteResponse:
        """
        @summary Deletes a website based on the specified website ID.
        
        @param request: DeleteSiteRequest
        @return: DeleteSiteResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_site_with_options_async(request, runtime)

    def delete_site_delivery_task_with_options(
        self,
        request: esa20240910_models.DeleteSiteDeliveryTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteSiteDeliveryTaskResponse:
        """
        @summary Deletes a real-time log delivery task.
        
        @param request: DeleteSiteDeliveryTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteSiteDeliveryTaskResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.site_id):
            body['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.task_name):
            body['TaskName'] = request.task_name
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteSiteDeliveryTask',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteSiteDeliveryTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_site_delivery_task_with_options_async(
        self,
        request: esa20240910_models.DeleteSiteDeliveryTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteSiteDeliveryTaskResponse:
        """
        @summary Deletes a real-time log delivery task.
        
        @param request: DeleteSiteDeliveryTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteSiteDeliveryTaskResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.site_id):
            body['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.task_name):
            body['TaskName'] = request.task_name
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteSiteDeliveryTask',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteSiteDeliveryTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_site_delivery_task(
        self,
        request: esa20240910_models.DeleteSiteDeliveryTaskRequest,
    ) -> esa20240910_models.DeleteSiteDeliveryTaskResponse:
        """
        @summary Deletes a real-time log delivery task.
        
        @param request: DeleteSiteDeliveryTaskRequest
        @return: DeleteSiteDeliveryTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_site_delivery_task_with_options(request, runtime)

    async def delete_site_delivery_task_async(
        self,
        request: esa20240910_models.DeleteSiteDeliveryTaskRequest,
    ) -> esa20240910_models.DeleteSiteDeliveryTaskResponse:
        """
        @summary Deletes a real-time log delivery task.
        
        @param request: DeleteSiteDeliveryTaskRequest
        @return: DeleteSiteDeliveryTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_site_delivery_task_with_options_async(request, runtime)

    def delete_site_origin_client_certificate_with_options(
        self,
        request: esa20240910_models.DeleteSiteOriginClientCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteSiteOriginClientCertificateResponse:
        """
        @summary 删除站点回源客户端证书
        
        @param request: DeleteSiteOriginClientCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteSiteOriginClientCertificateResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteSiteOriginClientCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteSiteOriginClientCertificateResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_site_origin_client_certificate_with_options_async(
        self,
        request: esa20240910_models.DeleteSiteOriginClientCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteSiteOriginClientCertificateResponse:
        """
        @summary 删除站点回源客户端证书
        
        @param request: DeleteSiteOriginClientCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteSiteOriginClientCertificateResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteSiteOriginClientCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteSiteOriginClientCertificateResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_site_origin_client_certificate(
        self,
        request: esa20240910_models.DeleteSiteOriginClientCertificateRequest,
    ) -> esa20240910_models.DeleteSiteOriginClientCertificateResponse:
        """
        @summary 删除站点回源客户端证书
        
        @param request: DeleteSiteOriginClientCertificateRequest
        @return: DeleteSiteOriginClientCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_site_origin_client_certificate_with_options(request, runtime)

    async def delete_site_origin_client_certificate_async(
        self,
        request: esa20240910_models.DeleteSiteOriginClientCertificateRequest,
    ) -> esa20240910_models.DeleteSiteOriginClientCertificateResponse:
        """
        @summary 删除站点回源客户端证书
        
        @param request: DeleteSiteOriginClientCertificateRequest
        @return: DeleteSiteOriginClientCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_site_origin_client_certificate_with_options_async(request, runtime)

    def delete_transport_layer_application_with_options(
        self,
        request: esa20240910_models.DeleteTransportLayerApplicationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteTransportLayerApplicationResponse:
        """
        @summary Delete Transport Layer Application
        
        @param request: DeleteTransportLayerApplicationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteTransportLayerApplicationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.application_id):
            query['ApplicationId'] = request.application_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteTransportLayerApplication',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteTransportLayerApplicationResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_transport_layer_application_with_options_async(
        self,
        request: esa20240910_models.DeleteTransportLayerApplicationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteTransportLayerApplicationResponse:
        """
        @summary Delete Transport Layer Application
        
        @param request: DeleteTransportLayerApplicationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteTransportLayerApplicationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.application_id):
            query['ApplicationId'] = request.application_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteTransportLayerApplication',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteTransportLayerApplicationResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_transport_layer_application(
        self,
        request: esa20240910_models.DeleteTransportLayerApplicationRequest,
    ) -> esa20240910_models.DeleteTransportLayerApplicationResponse:
        """
        @summary Delete Transport Layer Application
        
        @param request: DeleteTransportLayerApplicationRequest
        @return: DeleteTransportLayerApplicationResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_transport_layer_application_with_options(request, runtime)

    async def delete_transport_layer_application_async(
        self,
        request: esa20240910_models.DeleteTransportLayerApplicationRequest,
    ) -> esa20240910_models.DeleteTransportLayerApplicationResponse:
        """
        @summary Delete Transport Layer Application
        
        @param request: DeleteTransportLayerApplicationRequest
        @return: DeleteTransportLayerApplicationResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_transport_layer_application_with_options_async(request, runtime)

    def delete_url_observation_with_options(
        self,
        request: esa20240910_models.DeleteUrlObservationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteUrlObservationResponse:
        """
        @summary 删除网页监测配置
        
        @param request: DeleteUrlObservationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteUrlObservationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteUrlObservation',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteUrlObservationResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_url_observation_with_options_async(
        self,
        request: esa20240910_models.DeleteUrlObservationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteUrlObservationResponse:
        """
        @summary 删除网页监测配置
        
        @param request: DeleteUrlObservationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteUrlObservationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteUrlObservation',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteUrlObservationResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_url_observation(
        self,
        request: esa20240910_models.DeleteUrlObservationRequest,
    ) -> esa20240910_models.DeleteUrlObservationResponse:
        """
        @summary 删除网页监测配置
        
        @param request: DeleteUrlObservationRequest
        @return: DeleteUrlObservationResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_url_observation_with_options(request, runtime)

    async def delete_url_observation_async(
        self,
        request: esa20240910_models.DeleteUrlObservationRequest,
    ) -> esa20240910_models.DeleteUrlObservationResponse:
        """
        @summary 删除网页监测配置
        
        @param request: DeleteUrlObservationRequest
        @return: DeleteUrlObservationResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_url_observation_with_options_async(request, runtime)

    def delete_user_delivery_task_with_options(
        self,
        request: esa20240910_models.DeleteUserDeliveryTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteUserDeliveryTaskResponse:
        """
        @summary Deletes a log delivery task from your Alibaba Cloud account.
        
        @description *****>
        Deleted tasks cannot be restored. Proceed with caution.
        To call this operation, you must have an account that has the required permissions.
        The returned `RequestId` value can be used to track the request processing progress and troubleshoot issues.
        
        @param request: DeleteUserDeliveryTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteUserDeliveryTaskResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.task_name):
            body['TaskName'] = request.task_name
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteUserDeliveryTask',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteUserDeliveryTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_user_delivery_task_with_options_async(
        self,
        request: esa20240910_models.DeleteUserDeliveryTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteUserDeliveryTaskResponse:
        """
        @summary Deletes a log delivery task from your Alibaba Cloud account.
        
        @description *****>
        Deleted tasks cannot be restored. Proceed with caution.
        To call this operation, you must have an account that has the required permissions.
        The returned `RequestId` value can be used to track the request processing progress and troubleshoot issues.
        
        @param request: DeleteUserDeliveryTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteUserDeliveryTaskResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.task_name):
            body['TaskName'] = request.task_name
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteUserDeliveryTask',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteUserDeliveryTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_user_delivery_task(
        self,
        request: esa20240910_models.DeleteUserDeliveryTaskRequest,
    ) -> esa20240910_models.DeleteUserDeliveryTaskResponse:
        """
        @summary Deletes a log delivery task from your Alibaba Cloud account.
        
        @description *****>
        Deleted tasks cannot be restored. Proceed with caution.
        To call this operation, you must have an account that has the required permissions.
        The returned `RequestId` value can be used to track the request processing progress and troubleshoot issues.
        
        @param request: DeleteUserDeliveryTaskRequest
        @return: DeleteUserDeliveryTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_user_delivery_task_with_options(request, runtime)

    async def delete_user_delivery_task_async(
        self,
        request: esa20240910_models.DeleteUserDeliveryTaskRequest,
    ) -> esa20240910_models.DeleteUserDeliveryTaskResponse:
        """
        @summary Deletes a log delivery task from your Alibaba Cloud account.
        
        @description *****>
        Deleted tasks cannot be restored. Proceed with caution.
        To call this operation, you must have an account that has the required permissions.
        The returned `RequestId` value can be used to track the request processing progress and troubleshoot issues.
        
        @param request: DeleteUserDeliveryTaskRequest
        @return: DeleteUserDeliveryTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_user_delivery_task_with_options_async(request, runtime)

    def delete_video_processing_with_options(
        self,
        request: esa20240910_models.DeleteVideoProcessingRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteVideoProcessingResponse:
        """
        @summary 删除站点视频处理配置
        
        @param request: DeleteVideoProcessingRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteVideoProcessingResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteVideoProcessing',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteVideoProcessingResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_video_processing_with_options_async(
        self,
        request: esa20240910_models.DeleteVideoProcessingRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteVideoProcessingResponse:
        """
        @summary 删除站点视频处理配置
        
        @param request: DeleteVideoProcessingRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteVideoProcessingResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteVideoProcessing',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteVideoProcessingResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_video_processing(
        self,
        request: esa20240910_models.DeleteVideoProcessingRequest,
    ) -> esa20240910_models.DeleteVideoProcessingResponse:
        """
        @summary 删除站点视频处理配置
        
        @param request: DeleteVideoProcessingRequest
        @return: DeleteVideoProcessingResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_video_processing_with_options(request, runtime)

    async def delete_video_processing_async(
        self,
        request: esa20240910_models.DeleteVideoProcessingRequest,
    ) -> esa20240910_models.DeleteVideoProcessingResponse:
        """
        @summary 删除站点视频处理配置
        
        @param request: DeleteVideoProcessingRequest
        @return: DeleteVideoProcessingResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_video_processing_with_options_async(request, runtime)

    def delete_waf_rule_with_options(
        self,
        request: esa20240910_models.DeleteWafRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteWafRuleResponse:
        """
        @summary Delete WAF Rule
        
        @param request: DeleteWafRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteWafRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteWafRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteWafRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_waf_rule_with_options_async(
        self,
        request: esa20240910_models.DeleteWafRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteWafRuleResponse:
        """
        @summary Delete WAF Rule
        
        @param request: DeleteWafRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteWafRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteWafRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteWafRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_waf_rule(
        self,
        request: esa20240910_models.DeleteWafRuleRequest,
    ) -> esa20240910_models.DeleteWafRuleResponse:
        """
        @summary Delete WAF Rule
        
        @param request: DeleteWafRuleRequest
        @return: DeleteWafRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_waf_rule_with_options(request, runtime)

    async def delete_waf_rule_async(
        self,
        request: esa20240910_models.DeleteWafRuleRequest,
    ) -> esa20240910_models.DeleteWafRuleResponse:
        """
        @summary Delete WAF Rule
        
        @param request: DeleteWafRuleRequest
        @return: DeleteWafRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_waf_rule_with_options_async(request, runtime)

    def delete_waf_ruleset_with_options(
        self,
        request: esa20240910_models.DeleteWafRulesetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteWafRulesetResponse:
        """
        @summary Delete WAF Ruleset
        
        @param request: DeleteWafRulesetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteWafRulesetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteWafRuleset',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteWafRulesetResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_waf_ruleset_with_options_async(
        self,
        request: esa20240910_models.DeleteWafRulesetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteWafRulesetResponse:
        """
        @summary Delete WAF Ruleset
        
        @param request: DeleteWafRulesetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteWafRulesetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteWafRuleset',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteWafRulesetResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_waf_ruleset(
        self,
        request: esa20240910_models.DeleteWafRulesetRequest,
    ) -> esa20240910_models.DeleteWafRulesetResponse:
        """
        @summary Delete WAF Ruleset
        
        @param request: DeleteWafRulesetRequest
        @return: DeleteWafRulesetResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_waf_ruleset_with_options(request, runtime)

    async def delete_waf_ruleset_async(
        self,
        request: esa20240910_models.DeleteWafRulesetRequest,
    ) -> esa20240910_models.DeleteWafRulesetResponse:
        """
        @summary Delete WAF Ruleset
        
        @param request: DeleteWafRulesetRequest
        @return: DeleteWafRulesetResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_waf_ruleset_with_options_async(request, runtime)

    def delete_waiting_room_with_options(
        self,
        request: esa20240910_models.DeleteWaitingRoomRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteWaitingRoomResponse:
        """
        @summary Deletes a waiting room.
        
        @param request: DeleteWaitingRoomRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteWaitingRoomResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.waiting_room_id):
            query['WaitingRoomId'] = request.waiting_room_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteWaitingRoom',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteWaitingRoomResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_waiting_room_with_options_async(
        self,
        request: esa20240910_models.DeleteWaitingRoomRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteWaitingRoomResponse:
        """
        @summary Deletes a waiting room.
        
        @param request: DeleteWaitingRoomRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteWaitingRoomResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.waiting_room_id):
            query['WaitingRoomId'] = request.waiting_room_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteWaitingRoom',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteWaitingRoomResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_waiting_room(
        self,
        request: esa20240910_models.DeleteWaitingRoomRequest,
    ) -> esa20240910_models.DeleteWaitingRoomResponse:
        """
        @summary Deletes a waiting room.
        
        @param request: DeleteWaitingRoomRequest
        @return: DeleteWaitingRoomResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_waiting_room_with_options(request, runtime)

    async def delete_waiting_room_async(
        self,
        request: esa20240910_models.DeleteWaitingRoomRequest,
    ) -> esa20240910_models.DeleteWaitingRoomResponse:
        """
        @summary Deletes a waiting room.
        
        @param request: DeleteWaitingRoomRequest
        @return: DeleteWaitingRoomResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_waiting_room_with_options_async(request, runtime)

    def delete_waiting_room_event_with_options(
        self,
        request: esa20240910_models.DeleteWaitingRoomEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteWaitingRoomEventResponse:
        """
        @summary Deletes a waiting room event.
        
        @param request: DeleteWaitingRoomEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteWaitingRoomEventResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.waiting_room_event_id):
            query['WaitingRoomEventId'] = request.waiting_room_event_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteWaitingRoomEvent',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteWaitingRoomEventResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_waiting_room_event_with_options_async(
        self,
        request: esa20240910_models.DeleteWaitingRoomEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteWaitingRoomEventResponse:
        """
        @summary Deletes a waiting room event.
        
        @param request: DeleteWaitingRoomEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteWaitingRoomEventResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.waiting_room_event_id):
            query['WaitingRoomEventId'] = request.waiting_room_event_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteWaitingRoomEvent',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteWaitingRoomEventResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_waiting_room_event(
        self,
        request: esa20240910_models.DeleteWaitingRoomEventRequest,
    ) -> esa20240910_models.DeleteWaitingRoomEventResponse:
        """
        @summary Deletes a waiting room event.
        
        @param request: DeleteWaitingRoomEventRequest
        @return: DeleteWaitingRoomEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_waiting_room_event_with_options(request, runtime)

    async def delete_waiting_room_event_async(
        self,
        request: esa20240910_models.DeleteWaitingRoomEventRequest,
    ) -> esa20240910_models.DeleteWaitingRoomEventResponse:
        """
        @summary Deletes a waiting room event.
        
        @param request: DeleteWaitingRoomEventRequest
        @return: DeleteWaitingRoomEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_waiting_room_event_with_options_async(request, runtime)

    def delete_waiting_room_rule_with_options(
        self,
        request: esa20240910_models.DeleteWaitingRoomRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteWaitingRoomRuleResponse:
        """
        @summary Deletes a waiting room bypass rule.
        
        @param request: DeleteWaitingRoomRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteWaitingRoomRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.waiting_room_rule_id):
            query['WaitingRoomRuleId'] = request.waiting_room_rule_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteWaitingRoomRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteWaitingRoomRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_waiting_room_rule_with_options_async(
        self,
        request: esa20240910_models.DeleteWaitingRoomRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DeleteWaitingRoomRuleResponse:
        """
        @summary Deletes a waiting room bypass rule.
        
        @param request: DeleteWaitingRoomRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteWaitingRoomRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.waiting_room_rule_id):
            query['WaitingRoomRuleId'] = request.waiting_room_rule_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteWaitingRoomRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DeleteWaitingRoomRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_waiting_room_rule(
        self,
        request: esa20240910_models.DeleteWaitingRoomRuleRequest,
    ) -> esa20240910_models.DeleteWaitingRoomRuleResponse:
        """
        @summary Deletes a waiting room bypass rule.
        
        @param request: DeleteWaitingRoomRuleRequest
        @return: DeleteWaitingRoomRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_waiting_room_rule_with_options(request, runtime)

    async def delete_waiting_room_rule_async(
        self,
        request: esa20240910_models.DeleteWaitingRoomRuleRequest,
    ) -> esa20240910_models.DeleteWaitingRoomRuleResponse:
        """
        @summary Deletes a waiting room bypass rule.
        
        @param request: DeleteWaitingRoomRuleRequest
        @return: DeleteWaitingRoomRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_waiting_room_rule_with_options_async(request, runtime)

    def describe_custom_scene_policies_with_options(
        self,
        request: esa20240910_models.DescribeCustomScenePoliciesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DescribeCustomScenePoliciesResponse:
        """
        @summary Queries the configurations of a scenario-specific policy.
        
        @param request: DescribeCustomScenePoliciesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCustomScenePoliciesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.policy_id):
            query['PolicyId'] = request.policy_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCustomScenePolicies',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DescribeCustomScenePoliciesResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_custom_scene_policies_with_options_async(
        self,
        request: esa20240910_models.DescribeCustomScenePoliciesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DescribeCustomScenePoliciesResponse:
        """
        @summary Queries the configurations of a scenario-specific policy.
        
        @param request: DescribeCustomScenePoliciesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCustomScenePoliciesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.policy_id):
            query['PolicyId'] = request.policy_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCustomScenePolicies',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DescribeCustomScenePoliciesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_custom_scene_policies(
        self,
        request: esa20240910_models.DescribeCustomScenePoliciesRequest,
    ) -> esa20240910_models.DescribeCustomScenePoliciesResponse:
        """
        @summary Queries the configurations of a scenario-specific policy.
        
        @param request: DescribeCustomScenePoliciesRequest
        @return: DescribeCustomScenePoliciesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_custom_scene_policies_with_options(request, runtime)

    async def describe_custom_scene_policies_async(
        self,
        request: esa20240910_models.DescribeCustomScenePoliciesRequest,
    ) -> esa20240910_models.DescribeCustomScenePoliciesResponse:
        """
        @summary Queries the configurations of a scenario-specific policy.
        
        @param request: DescribeCustomScenePoliciesRequest
        @return: DescribeCustomScenePoliciesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_custom_scene_policies_with_options_async(request, runtime)

    def describe_ddo_sall_event_list_with_options(
        self,
        request: esa20240910_models.DescribeDDoSAllEventListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DescribeDDoSAllEventListResponse:
        """
        @summary Queries DDoS attack events.
        
        @param request: DescribeDDoSAllEventListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDDoSAllEventListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.event_type):
            query['EventType'] = request.event_type
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDDoSAllEventList',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DescribeDDoSAllEventListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_ddo_sall_event_list_with_options_async(
        self,
        request: esa20240910_models.DescribeDDoSAllEventListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DescribeDDoSAllEventListResponse:
        """
        @summary Queries DDoS attack events.
        
        @param request: DescribeDDoSAllEventListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDDoSAllEventListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.event_type):
            query['EventType'] = request.event_type
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDDoSAllEventList',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DescribeDDoSAllEventListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_ddo_sall_event_list(
        self,
        request: esa20240910_models.DescribeDDoSAllEventListRequest,
    ) -> esa20240910_models.DescribeDDoSAllEventListResponse:
        """
        @summary Queries DDoS attack events.
        
        @param request: DescribeDDoSAllEventListRequest
        @return: DescribeDDoSAllEventListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_ddo_sall_event_list_with_options(request, runtime)

    async def describe_ddo_sall_event_list_async(
        self,
        request: esa20240910_models.DescribeDDoSAllEventListRequest,
    ) -> esa20240910_models.DescribeDDoSAllEventListResponse:
        """
        @summary Queries DDoS attack events.
        
        @param request: DescribeDDoSAllEventListRequest
        @return: DescribeDDoSAllEventListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_ddo_sall_event_list_with_options_async(request, runtime)

    def describe_ddo_sbps_list_with_options(
        self,
        request: esa20240910_models.DescribeDDoSBpsListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DescribeDDoSBpsListResponse:
        """
        @summary Query DCDN DDoS user bps and pps data
        
        @param request: DescribeDDoSBpsListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDDoSBpsListResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDDoSBpsList',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DescribeDDoSBpsListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_ddo_sbps_list_with_options_async(
        self,
        request: esa20240910_models.DescribeDDoSBpsListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DescribeDDoSBpsListResponse:
        """
        @summary Query DCDN DDoS user bps and pps data
        
        @param request: DescribeDDoSBpsListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDDoSBpsListResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDDoSBpsList',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DescribeDDoSBpsListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_ddo_sbps_list(
        self,
        request: esa20240910_models.DescribeDDoSBpsListRequest,
    ) -> esa20240910_models.DescribeDDoSBpsListResponse:
        """
        @summary Query DCDN DDoS user bps and pps data
        
        @param request: DescribeDDoSBpsListRequest
        @return: DescribeDDoSBpsListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_ddo_sbps_list_with_options(request, runtime)

    async def describe_ddo_sbps_list_async(
        self,
        request: esa20240910_models.DescribeDDoSBpsListRequest,
    ) -> esa20240910_models.DescribeDDoSBpsListResponse:
        """
        @summary Query DCDN DDoS user bps and pps data
        
        @param request: DescribeDDoSBpsListRequest
        @return: DescribeDDoSBpsListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_ddo_sbps_list_with_options_async(request, runtime)

    def describe_ddo_sl7qps_list_with_options(
        self,
        request: esa20240910_models.DescribeDDoSL7QpsListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DescribeDDoSL7QpsListResponse:
        """
        @summary DDoS Analysis Layer 7 QPS Trend Chart API
        
        @param request: DescribeDDoSL7QpsListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDDoSL7QpsListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.interval):
            query['Interval'] = request.interval
        if not UtilClient.is_unset(request.record_id):
            query['RecordId'] = request.record_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDDoSL7QpsList',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DescribeDDoSL7QpsListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_ddo_sl7qps_list_with_options_async(
        self,
        request: esa20240910_models.DescribeDDoSL7QpsListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DescribeDDoSL7QpsListResponse:
        """
        @summary DDoS Analysis Layer 7 QPS Trend Chart API
        
        @param request: DescribeDDoSL7QpsListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDDoSL7QpsListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.interval):
            query['Interval'] = request.interval
        if not UtilClient.is_unset(request.record_id):
            query['RecordId'] = request.record_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDDoSL7QpsList',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DescribeDDoSL7QpsListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_ddo_sl7qps_list(
        self,
        request: esa20240910_models.DescribeDDoSL7QpsListRequest,
    ) -> esa20240910_models.DescribeDDoSL7QpsListResponse:
        """
        @summary DDoS Analysis Layer 7 QPS Trend Chart API
        
        @param request: DescribeDDoSL7QpsListRequest
        @return: DescribeDDoSL7QpsListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_ddo_sl7qps_list_with_options(request, runtime)

    async def describe_ddo_sl7qps_list_async(
        self,
        request: esa20240910_models.DescribeDDoSL7QpsListRequest,
    ) -> esa20240910_models.DescribeDDoSL7QpsListResponse:
        """
        @summary DDoS Analysis Layer 7 QPS Trend Chart API
        
        @param request: DescribeDDoSL7QpsListRequest
        @return: DescribeDDoSL7QpsListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_ddo_sl7qps_list_with_options_async(request, runtime)

    def describe_edge_container_app_stats_with_options(
        self,
        request: esa20240910_models.DescribeEdgeContainerAppStatsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DescribeEdgeContainerAppStatsResponse:
        """
        @summary 将天眼提供给XCDN边缘容器的监控OpenAPI适配成青蓝的OpenAPI
        
        @param request: DescribeEdgeContainerAppStatsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEdgeContainerAppStatsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeEdgeContainerAppStats',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DescribeEdgeContainerAppStatsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_edge_container_app_stats_with_options_async(
        self,
        request: esa20240910_models.DescribeEdgeContainerAppStatsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DescribeEdgeContainerAppStatsResponse:
        """
        @summary 将天眼提供给XCDN边缘容器的监控OpenAPI适配成青蓝的OpenAPI
        
        @param request: DescribeEdgeContainerAppStatsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEdgeContainerAppStatsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeEdgeContainerAppStats',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DescribeEdgeContainerAppStatsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_edge_container_app_stats(
        self,
        request: esa20240910_models.DescribeEdgeContainerAppStatsRequest,
    ) -> esa20240910_models.DescribeEdgeContainerAppStatsResponse:
        """
        @summary 将天眼提供给XCDN边缘容器的监控OpenAPI适配成青蓝的OpenAPI
        
        @param request: DescribeEdgeContainerAppStatsRequest
        @return: DescribeEdgeContainerAppStatsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_edge_container_app_stats_with_options(request, runtime)

    async def describe_edge_container_app_stats_async(
        self,
        request: esa20240910_models.DescribeEdgeContainerAppStatsRequest,
    ) -> esa20240910_models.DescribeEdgeContainerAppStatsResponse:
        """
        @summary 将天眼提供给XCDN边缘容器的监控OpenAPI适配成青蓝的OpenAPI
        
        @param request: DescribeEdgeContainerAppStatsRequest
        @return: DescribeEdgeContainerAppStatsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_edge_container_app_stats_with_options_async(request, runtime)

    def describe_http_ddo_sattack_intelligent_protection_with_options(
        self,
        request: esa20240910_models.DescribeHttpDDoSAttackIntelligentProtectionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DescribeHttpDDoSAttackIntelligentProtectionResponse:
        """
        @summary Queries the configuration of smart HTTP DDoS protection for a website.
        
        @param request: DescribeHttpDDoSAttackIntelligentProtectionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeHttpDDoSAttackIntelligentProtectionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeHttpDDoSAttackIntelligentProtection',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DescribeHttpDDoSAttackIntelligentProtectionResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_http_ddo_sattack_intelligent_protection_with_options_async(
        self,
        request: esa20240910_models.DescribeHttpDDoSAttackIntelligentProtectionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DescribeHttpDDoSAttackIntelligentProtectionResponse:
        """
        @summary Queries the configuration of smart HTTP DDoS protection for a website.
        
        @param request: DescribeHttpDDoSAttackIntelligentProtectionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeHttpDDoSAttackIntelligentProtectionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeHttpDDoSAttackIntelligentProtection',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DescribeHttpDDoSAttackIntelligentProtectionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_http_ddo_sattack_intelligent_protection(
        self,
        request: esa20240910_models.DescribeHttpDDoSAttackIntelligentProtectionRequest,
    ) -> esa20240910_models.DescribeHttpDDoSAttackIntelligentProtectionResponse:
        """
        @summary Queries the configuration of smart HTTP DDoS protection for a website.
        
        @param request: DescribeHttpDDoSAttackIntelligentProtectionRequest
        @return: DescribeHttpDDoSAttackIntelligentProtectionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_http_ddo_sattack_intelligent_protection_with_options(request, runtime)

    async def describe_http_ddo_sattack_intelligent_protection_async(
        self,
        request: esa20240910_models.DescribeHttpDDoSAttackIntelligentProtectionRequest,
    ) -> esa20240910_models.DescribeHttpDDoSAttackIntelligentProtectionResponse:
        """
        @summary Queries the configuration of smart HTTP DDoS protection for a website.
        
        @param request: DescribeHttpDDoSAttackIntelligentProtectionRequest
        @return: DescribeHttpDDoSAttackIntelligentProtectionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_http_ddo_sattack_intelligent_protection_with_options_async(request, runtime)

    def describe_http_ddo_sattack_protection_with_options(
        self,
        request: esa20240910_models.DescribeHttpDDoSAttackProtectionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DescribeHttpDDoSAttackProtectionResponse:
        """
        @summary Queries the configurations of HTTP DDoS attack protection.
        
        @param request: DescribeHttpDDoSAttackProtectionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeHttpDDoSAttackProtectionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeHttpDDoSAttackProtection',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DescribeHttpDDoSAttackProtectionResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_http_ddo_sattack_protection_with_options_async(
        self,
        request: esa20240910_models.DescribeHttpDDoSAttackProtectionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DescribeHttpDDoSAttackProtectionResponse:
        """
        @summary Queries the configurations of HTTP DDoS attack protection.
        
        @param request: DescribeHttpDDoSAttackProtectionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeHttpDDoSAttackProtectionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeHttpDDoSAttackProtection',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DescribeHttpDDoSAttackProtectionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_http_ddo_sattack_protection(
        self,
        request: esa20240910_models.DescribeHttpDDoSAttackProtectionRequest,
    ) -> esa20240910_models.DescribeHttpDDoSAttackProtectionResponse:
        """
        @summary Queries the configurations of HTTP DDoS attack protection.
        
        @param request: DescribeHttpDDoSAttackProtectionRequest
        @return: DescribeHttpDDoSAttackProtectionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_http_ddo_sattack_protection_with_options(request, runtime)

    async def describe_http_ddo_sattack_protection_async(
        self,
        request: esa20240910_models.DescribeHttpDDoSAttackProtectionRequest,
    ) -> esa20240910_models.DescribeHttpDDoSAttackProtectionResponse:
        """
        @summary Queries the configurations of HTTP DDoS attack protection.
        
        @param request: DescribeHttpDDoSAttackProtectionRequest
        @return: DescribeHttpDDoSAttackProtectionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_http_ddo_sattack_protection_with_options_async(request, runtime)

    def describe_kv_account_status_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DescribeKvAccountStatusResponse:
        """
        @summary Queries whether Edge KV is activated in your Alibaba Cloud account.
        
        @param request: DescribeKvAccountStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeKvAccountStatusResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeKvAccountStatus',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DescribeKvAccountStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_kv_account_status_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DescribeKvAccountStatusResponse:
        """
        @summary Queries whether Edge KV is activated in your Alibaba Cloud account.
        
        @param request: DescribeKvAccountStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeKvAccountStatusResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeKvAccountStatus',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DescribeKvAccountStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_kv_account_status(self) -> esa20240910_models.DescribeKvAccountStatusResponse:
        """
        @summary Queries whether Edge KV is activated in your Alibaba Cloud account.
        
        @return: DescribeKvAccountStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_kv_account_status_with_options(runtime)

    async def describe_kv_account_status_async(self) -> esa20240910_models.DescribeKvAccountStatusResponse:
        """
        @summary Queries whether Edge KV is activated in your Alibaba Cloud account.
        
        @return: DescribeKvAccountStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_kv_account_status_with_options_async(runtime)

    def describe_preload_tasks_with_options(
        self,
        request: esa20240910_models.DescribePreloadTasksRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DescribePreloadTasksResponse:
        """
        @summary Queries the details of prefetch tasks by time, task status, or prefetch URL.
        
        @param request: DescribePreloadTasksRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePreloadTasksResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePreloadTasks',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DescribePreloadTasksResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_preload_tasks_with_options_async(
        self,
        request: esa20240910_models.DescribePreloadTasksRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DescribePreloadTasksResponse:
        """
        @summary Queries the details of prefetch tasks by time, task status, or prefetch URL.
        
        @param request: DescribePreloadTasksRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePreloadTasksResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePreloadTasks',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DescribePreloadTasksResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_preload_tasks(
        self,
        request: esa20240910_models.DescribePreloadTasksRequest,
    ) -> esa20240910_models.DescribePreloadTasksResponse:
        """
        @summary Queries the details of prefetch tasks by time, task status, or prefetch URL.
        
        @param request: DescribePreloadTasksRequest
        @return: DescribePreloadTasksResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_preload_tasks_with_options(request, runtime)

    async def describe_preload_tasks_async(
        self,
        request: esa20240910_models.DescribePreloadTasksRequest,
    ) -> esa20240910_models.DescribePreloadTasksResponse:
        """
        @summary Queries the details of prefetch tasks by time, task status, or prefetch URL.
        
        @param request: DescribePreloadTasksRequest
        @return: DescribePreloadTasksResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_preload_tasks_with_options_async(request, runtime)

    def describe_purge_tasks_with_options(
        self,
        request: esa20240910_models.DescribePurgeTasksRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DescribePurgeTasksResponse:
        """
        @summary Queries the details of purge tasks.
        
        @param request: DescribePurgeTasksRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePurgeTasksResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePurgeTasks',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DescribePurgeTasksResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_purge_tasks_with_options_async(
        self,
        request: esa20240910_models.DescribePurgeTasksRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DescribePurgeTasksResponse:
        """
        @summary Queries the details of purge tasks.
        
        @param request: DescribePurgeTasksRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePurgeTasksResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePurgeTasks',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DescribePurgeTasksResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_purge_tasks(
        self,
        request: esa20240910_models.DescribePurgeTasksRequest,
    ) -> esa20240910_models.DescribePurgeTasksResponse:
        """
        @summary Queries the details of purge tasks.
        
        @param request: DescribePurgeTasksRequest
        @return: DescribePurgeTasksResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_purge_tasks_with_options(request, runtime)

    async def describe_purge_tasks_async(
        self,
        request: esa20240910_models.DescribePurgeTasksRequest,
    ) -> esa20240910_models.DescribePurgeTasksResponse:
        """
        @summary Queries the details of purge tasks.
        
        @param request: DescribePurgeTasksRequest
        @return: DescribePurgeTasksResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_purge_tasks_with_options_async(request, runtime)

    def describe_rate_plan_instance_status_with_options(
        self,
        request: esa20240910_models.DescribeRatePlanInstanceStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DescribeRatePlanInstanceStatusResponse:
        """
        @summary Queries the status of an instance that uses a plan.
        
        @description You can query the status of an instance after you purchase a plan for the instance.
        
        @param request: DescribeRatePlanInstanceStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRatePlanInstanceStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.instance_id):
            query['InstanceId'] = request.instance_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRatePlanInstanceStatus',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DescribeRatePlanInstanceStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_rate_plan_instance_status_with_options_async(
        self,
        request: esa20240910_models.DescribeRatePlanInstanceStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DescribeRatePlanInstanceStatusResponse:
        """
        @summary Queries the status of an instance that uses a plan.
        
        @description You can query the status of an instance after you purchase a plan for the instance.
        
        @param request: DescribeRatePlanInstanceStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRatePlanInstanceStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.instance_id):
            query['InstanceId'] = request.instance_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRatePlanInstanceStatus',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DescribeRatePlanInstanceStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_rate_plan_instance_status(
        self,
        request: esa20240910_models.DescribeRatePlanInstanceStatusRequest,
    ) -> esa20240910_models.DescribeRatePlanInstanceStatusResponse:
        """
        @summary Queries the status of an instance that uses a plan.
        
        @description You can query the status of an instance after you purchase a plan for the instance.
        
        @param request: DescribeRatePlanInstanceStatusRequest
        @return: DescribeRatePlanInstanceStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_rate_plan_instance_status_with_options(request, runtime)

    async def describe_rate_plan_instance_status_async(
        self,
        request: esa20240910_models.DescribeRatePlanInstanceStatusRequest,
    ) -> esa20240910_models.DescribeRatePlanInstanceStatusResponse:
        """
        @summary Queries the status of an instance that uses a plan.
        
        @description You can query the status of an instance after you purchase a plan for the instance.
        
        @param request: DescribeRatePlanInstanceStatusRequest
        @return: DescribeRatePlanInstanceStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_rate_plan_instance_status_with_options_async(request, runtime)

    def describe_site_logs_with_options(
        self,
        request: esa20240910_models.DescribeSiteLogsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DescribeSiteLogsResponse:
        """
        @summary 查询站点离线日志
        
        @param request: DescribeSiteLogsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSiteLogsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSiteLogs',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DescribeSiteLogsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_site_logs_with_options_async(
        self,
        request: esa20240910_models.DescribeSiteLogsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DescribeSiteLogsResponse:
        """
        @summary 查询站点离线日志
        
        @param request: DescribeSiteLogsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSiteLogsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSiteLogs',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DescribeSiteLogsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_site_logs(
        self,
        request: esa20240910_models.DescribeSiteLogsRequest,
    ) -> esa20240910_models.DescribeSiteLogsResponse:
        """
        @summary 查询站点离线日志
        
        @param request: DescribeSiteLogsRequest
        @return: DescribeSiteLogsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_site_logs_with_options(request, runtime)

    async def describe_site_logs_async(
        self,
        request: esa20240910_models.DescribeSiteLogsRequest,
    ) -> esa20240910_models.DescribeSiteLogsResponse:
        """
        @summary 查询站点离线日志
        
        @param request: DescribeSiteLogsRequest
        @return: DescribeSiteLogsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_site_logs_with_options_async(request, runtime)

    def describe_site_time_series_data_with_options(
        self,
        tmp_req: esa20240910_models.DescribeSiteTimeSeriesDataRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DescribeSiteTimeSeriesDataResponse:
        """
        @summary 获取时序数据
        
        @param tmp_req: DescribeSiteTimeSeriesDataRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSiteTimeSeriesDataResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.DescribeSiteTimeSeriesDataShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.fields):
            request.fields_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.fields, 'Fields', 'json')
        query = {}
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.fields_shrink):
            query['Fields'] = request.fields_shrink
        if not UtilClient.is_unset(request.interval):
            query['Interval'] = request.interval
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSiteTimeSeriesData',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DescribeSiteTimeSeriesDataResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_site_time_series_data_with_options_async(
        self,
        tmp_req: esa20240910_models.DescribeSiteTimeSeriesDataRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DescribeSiteTimeSeriesDataResponse:
        """
        @summary 获取时序数据
        
        @param tmp_req: DescribeSiteTimeSeriesDataRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSiteTimeSeriesDataResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.DescribeSiteTimeSeriesDataShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.fields):
            request.fields_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.fields, 'Fields', 'json')
        query = {}
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.fields_shrink):
            query['Fields'] = request.fields_shrink
        if not UtilClient.is_unset(request.interval):
            query['Interval'] = request.interval
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSiteTimeSeriesData',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DescribeSiteTimeSeriesDataResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_site_time_series_data(
        self,
        request: esa20240910_models.DescribeSiteTimeSeriesDataRequest,
    ) -> esa20240910_models.DescribeSiteTimeSeriesDataResponse:
        """
        @summary 获取时序数据
        
        @param request: DescribeSiteTimeSeriesDataRequest
        @return: DescribeSiteTimeSeriesDataResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_site_time_series_data_with_options(request, runtime)

    async def describe_site_time_series_data_async(
        self,
        request: esa20240910_models.DescribeSiteTimeSeriesDataRequest,
    ) -> esa20240910_models.DescribeSiteTimeSeriesDataResponse:
        """
        @summary 获取时序数据
        
        @param request: DescribeSiteTimeSeriesDataRequest
        @return: DescribeSiteTimeSeriesDataResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_site_time_series_data_with_options_async(request, runtime)

    def describe_site_top_data_with_options(
        self,
        tmp_req: esa20240910_models.DescribeSiteTopDataRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DescribeSiteTopDataResponse:
        """
        @summary 获取Top数据
        
        @param tmp_req: DescribeSiteTopDataRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSiteTopDataResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.DescribeSiteTopDataShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.fields):
            request.fields_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.fields, 'Fields', 'json')
        query = {}
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.fields_shrink):
            query['Fields'] = request.fields_shrink
        if not UtilClient.is_unset(request.interval):
            query['Interval'] = request.interval
        if not UtilClient.is_unset(request.limit):
            query['Limit'] = request.limit
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSiteTopData',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DescribeSiteTopDataResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_site_top_data_with_options_async(
        self,
        tmp_req: esa20240910_models.DescribeSiteTopDataRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DescribeSiteTopDataResponse:
        """
        @summary 获取Top数据
        
        @param tmp_req: DescribeSiteTopDataRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSiteTopDataResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.DescribeSiteTopDataShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.fields):
            request.fields_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.fields, 'Fields', 'json')
        query = {}
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.fields_shrink):
            query['Fields'] = request.fields_shrink
        if not UtilClient.is_unset(request.interval):
            query['Interval'] = request.interval
        if not UtilClient.is_unset(request.limit):
            query['Limit'] = request.limit
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSiteTopData',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DescribeSiteTopDataResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_site_top_data(
        self,
        request: esa20240910_models.DescribeSiteTopDataRequest,
    ) -> esa20240910_models.DescribeSiteTopDataResponse:
        """
        @summary 获取Top数据
        
        @param request: DescribeSiteTopDataRequest
        @return: DescribeSiteTopDataResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_site_top_data_with_options(request, runtime)

    async def describe_site_top_data_async(
        self,
        request: esa20240910_models.DescribeSiteTopDataRequest,
    ) -> esa20240910_models.DescribeSiteTopDataResponse:
        """
        @summary 获取Top数据
        
        @param request: DescribeSiteTopDataRequest
        @return: DescribeSiteTopDataResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_site_top_data_with_options_async(request, runtime)

    def describe_url_observation_data_with_options(
        self,
        request: esa20240910_models.DescribeUrlObservationDataRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DescribeUrlObservationDataResponse:
        """
        @summary 查询网页观测质量数据
        
        @param request: DescribeUrlObservationDataRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeUrlObservationDataResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.client_platform):
            query['ClientPlatform'] = request.client_platform
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.metric):
            query['Metric'] = request.metric
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.url):
            query['Url'] = request.url
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeUrlObservationData',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DescribeUrlObservationDataResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_url_observation_data_with_options_async(
        self,
        request: esa20240910_models.DescribeUrlObservationDataRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DescribeUrlObservationDataResponse:
        """
        @summary 查询网页观测质量数据
        
        @param request: DescribeUrlObservationDataRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeUrlObservationDataResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.client_platform):
            query['ClientPlatform'] = request.client_platform
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.metric):
            query['Metric'] = request.metric
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.url):
            query['Url'] = request.url
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeUrlObservationData',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DescribeUrlObservationDataResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_url_observation_data(
        self,
        request: esa20240910_models.DescribeUrlObservationDataRequest,
    ) -> esa20240910_models.DescribeUrlObservationDataResponse:
        """
        @summary 查询网页观测质量数据
        
        @param request: DescribeUrlObservationDataRequest
        @return: DescribeUrlObservationDataResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_url_observation_data_with_options(request, runtime)

    async def describe_url_observation_data_async(
        self,
        request: esa20240910_models.DescribeUrlObservationDataRequest,
    ) -> esa20240910_models.DescribeUrlObservationDataResponse:
        """
        @summary 查询网页观测质量数据
        
        @param request: DescribeUrlObservationDataRequest
        @return: DescribeUrlObservationDataResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_url_observation_data_with_options_async(request, runtime)

    def disable_custom_scene_policy_with_options(
        self,
        request: esa20240910_models.DisableCustomScenePolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DisableCustomScenePolicyResponse:
        """
        @summary Disables a scenario-specific policy.
        
        @param request: DisableCustomScenePolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DisableCustomScenePolicyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.policy_id):
            query['PolicyId'] = request.policy_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DisableCustomScenePolicy',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DisableCustomScenePolicyResponse(),
            self.call_api(params, req, runtime)
        )

    async def disable_custom_scene_policy_with_options_async(
        self,
        request: esa20240910_models.DisableCustomScenePolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.DisableCustomScenePolicyResponse:
        """
        @summary Disables a scenario-specific policy.
        
        @param request: DisableCustomScenePolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DisableCustomScenePolicyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.policy_id):
            query['PolicyId'] = request.policy_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DisableCustomScenePolicy',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.DisableCustomScenePolicyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def disable_custom_scene_policy(
        self,
        request: esa20240910_models.DisableCustomScenePolicyRequest,
    ) -> esa20240910_models.DisableCustomScenePolicyResponse:
        """
        @summary Disables a scenario-specific policy.
        
        @param request: DisableCustomScenePolicyRequest
        @return: DisableCustomScenePolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.disable_custom_scene_policy_with_options(request, runtime)

    async def disable_custom_scene_policy_async(
        self,
        request: esa20240910_models.DisableCustomScenePolicyRequest,
    ) -> esa20240910_models.DisableCustomScenePolicyResponse:
        """
        @summary Disables a scenario-specific policy.
        
        @param request: DisableCustomScenePolicyRequest
        @return: DisableCustomScenePolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.disable_custom_scene_policy_with_options_async(request, runtime)

    def edit_site_waf_settings_with_options(
        self,
        tmp_req: esa20240910_models.EditSiteWafSettingsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.EditSiteWafSettingsResponse:
        """
        @summary Edit WAF Configuration for a Site
        
        @param tmp_req: EditSiteWafSettingsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: EditSiteWafSettingsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.EditSiteWafSettingsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.settings):
            request.settings_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.settings, 'Settings', 'json')
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        body = {}
        if not UtilClient.is_unset(request.settings_shrink):
            body['Settings'] = request.settings_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='EditSiteWafSettings',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.EditSiteWafSettingsResponse(),
            self.call_api(params, req, runtime)
        )

    async def edit_site_waf_settings_with_options_async(
        self,
        tmp_req: esa20240910_models.EditSiteWafSettingsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.EditSiteWafSettingsResponse:
        """
        @summary Edit WAF Configuration for a Site
        
        @param tmp_req: EditSiteWafSettingsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: EditSiteWafSettingsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.EditSiteWafSettingsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.settings):
            request.settings_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.settings, 'Settings', 'json')
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        body = {}
        if not UtilClient.is_unset(request.settings_shrink):
            body['Settings'] = request.settings_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='EditSiteWafSettings',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.EditSiteWafSettingsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def edit_site_waf_settings(
        self,
        request: esa20240910_models.EditSiteWafSettingsRequest,
    ) -> esa20240910_models.EditSiteWafSettingsResponse:
        """
        @summary Edit WAF Configuration for a Site
        
        @param request: EditSiteWafSettingsRequest
        @return: EditSiteWafSettingsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.edit_site_waf_settings_with_options(request, runtime)

    async def edit_site_waf_settings_async(
        self,
        request: esa20240910_models.EditSiteWafSettingsRequest,
    ) -> esa20240910_models.EditSiteWafSettingsResponse:
        """
        @summary Edit WAF Configuration for a Site
        
        @param request: EditSiteWafSettingsRequest
        @return: EditSiteWafSettingsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.edit_site_waf_settings_with_options_async(request, runtime)

    def enable_custom_scene_policy_with_options(
        self,
        request: esa20240910_models.EnableCustomScenePolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.EnableCustomScenePolicyResponse:
        """
        @summary Enables a scenario-specific policy.
        
        @param request: EnableCustomScenePolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: EnableCustomScenePolicyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.policy_id):
            query['PolicyId'] = request.policy_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='EnableCustomScenePolicy',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.EnableCustomScenePolicyResponse(),
            self.call_api(params, req, runtime)
        )

    async def enable_custom_scene_policy_with_options_async(
        self,
        request: esa20240910_models.EnableCustomScenePolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.EnableCustomScenePolicyResponse:
        """
        @summary Enables a scenario-specific policy.
        
        @param request: EnableCustomScenePolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: EnableCustomScenePolicyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.policy_id):
            query['PolicyId'] = request.policy_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='EnableCustomScenePolicy',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.EnableCustomScenePolicyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def enable_custom_scene_policy(
        self,
        request: esa20240910_models.EnableCustomScenePolicyRequest,
    ) -> esa20240910_models.EnableCustomScenePolicyResponse:
        """
        @summary Enables a scenario-specific policy.
        
        @param request: EnableCustomScenePolicyRequest
        @return: EnableCustomScenePolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.enable_custom_scene_policy_with_options(request, runtime)

    async def enable_custom_scene_policy_async(
        self,
        request: esa20240910_models.EnableCustomScenePolicyRequest,
    ) -> esa20240910_models.EnableCustomScenePolicyResponse:
        """
        @summary Enables a scenario-specific policy.
        
        @param request: EnableCustomScenePolicyRequest
        @return: EnableCustomScenePolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.enable_custom_scene_policy_with_options_async(request, runtime)

    def export_records_with_options(
        self,
        request: esa20240910_models.ExportRecordsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ExportRecordsResponse:
        """
        @summary Exports all DNS records of a website domain as a TXT file.
        
        @param request: ExportRecordsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ExportRecordsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ExportRecords',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ExportRecordsResponse(),
            self.call_api(params, req, runtime)
        )

    async def export_records_with_options_async(
        self,
        request: esa20240910_models.ExportRecordsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ExportRecordsResponse:
        """
        @summary Exports all DNS records of a website domain as a TXT file.
        
        @param request: ExportRecordsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ExportRecordsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ExportRecords',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ExportRecordsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def export_records(
        self,
        request: esa20240910_models.ExportRecordsRequest,
    ) -> esa20240910_models.ExportRecordsResponse:
        """
        @summary Exports all DNS records of a website domain as a TXT file.
        
        @param request: ExportRecordsRequest
        @return: ExportRecordsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.export_records_with_options(request, runtime)

    async def export_records_async(
        self,
        request: esa20240910_models.ExportRecordsRequest,
    ) -> esa20240910_models.ExportRecordsResponse:
        """
        @summary Exports all DNS records of a website domain as a TXT file.
        
        @param request: ExportRecordsRequest
        @return: ExportRecordsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.export_records_with_options_async(request, runtime)

    def get_cache_reserve_specification_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetCacheReserveSpecificationResponse:
        """
        @summary Queries the available specifications of cache reserve instances.
        
        @param request: GetCacheReserveSpecificationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCacheReserveSpecificationResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetCacheReserveSpecification',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetCacheReserveSpecificationResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_cache_reserve_specification_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetCacheReserveSpecificationResponse:
        """
        @summary Queries the available specifications of cache reserve instances.
        
        @param request: GetCacheReserveSpecificationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCacheReserveSpecificationResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetCacheReserveSpecification',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetCacheReserveSpecificationResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_cache_reserve_specification(self) -> esa20240910_models.GetCacheReserveSpecificationResponse:
        """
        @summary Queries the available specifications of cache reserve instances.
        
        @return: GetCacheReserveSpecificationResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_cache_reserve_specification_with_options(runtime)

    async def get_cache_reserve_specification_async(self) -> esa20240910_models.GetCacheReserveSpecificationResponse:
        """
        @summary Queries the available specifications of cache reserve instances.
        
        @return: GetCacheReserveSpecificationResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_cache_reserve_specification_with_options_async(runtime)

    def get_cache_rule_with_options(
        self,
        request: esa20240910_models.GetCacheRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetCacheRuleResponse:
        """
        @summary Query a single cache configuration
        
        @param request: GetCacheRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCacheRuleResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCacheRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetCacheRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_cache_rule_with_options_async(
        self,
        request: esa20240910_models.GetCacheRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetCacheRuleResponse:
        """
        @summary Query a single cache configuration
        
        @param request: GetCacheRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCacheRuleResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCacheRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetCacheRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_cache_rule(
        self,
        request: esa20240910_models.GetCacheRuleRequest,
    ) -> esa20240910_models.GetCacheRuleResponse:
        """
        @summary Query a single cache configuration
        
        @param request: GetCacheRuleRequest
        @return: GetCacheRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_cache_rule_with_options(request, runtime)

    async def get_cache_rule_async(
        self,
        request: esa20240910_models.GetCacheRuleRequest,
    ) -> esa20240910_models.GetCacheRuleResponse:
        """
        @summary Query a single cache configuration
        
        @param request: GetCacheRuleRequest
        @return: GetCacheRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_cache_rule_with_options_async(request, runtime)

    def get_cache_tag_with_options(
        self,
        request: esa20240910_models.GetCacheTagRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetCacheTagResponse:
        """
        @summary Query Site Cache Tag Configuration
        
        @param request: GetCacheTagRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCacheTagResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCacheTag',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetCacheTagResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_cache_tag_with_options_async(
        self,
        request: esa20240910_models.GetCacheTagRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetCacheTagResponse:
        """
        @summary Query Site Cache Tag Configuration
        
        @param request: GetCacheTagRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCacheTagResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCacheTag',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetCacheTagResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_cache_tag(
        self,
        request: esa20240910_models.GetCacheTagRequest,
    ) -> esa20240910_models.GetCacheTagResponse:
        """
        @summary Query Site Cache Tag Configuration
        
        @param request: GetCacheTagRequest
        @return: GetCacheTagResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_cache_tag_with_options(request, runtime)

    async def get_cache_tag_async(
        self,
        request: esa20240910_models.GetCacheTagRequest,
    ) -> esa20240910_models.GetCacheTagResponse:
        """
        @summary Query Site Cache Tag Configuration
        
        @param request: GetCacheTagRequest
        @return: GetCacheTagResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_cache_tag_with_options_async(request, runtime)

    def get_certificate_with_options(
        self,
        request: esa20240910_models.GetCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetCertificateResponse:
        """
        @summary Retrieve the certificate, private key, and certificate information
        
        @param request: GetCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCertificateResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetCertificateResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_certificate_with_options_async(
        self,
        request: esa20240910_models.GetCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetCertificateResponse:
        """
        @summary Retrieve the certificate, private key, and certificate information
        
        @param request: GetCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCertificateResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetCertificateResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_certificate(
        self,
        request: esa20240910_models.GetCertificateRequest,
    ) -> esa20240910_models.GetCertificateResponse:
        """
        @summary Retrieve the certificate, private key, and certificate information
        
        @param request: GetCertificateRequest
        @return: GetCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_certificate_with_options(request, runtime)

    async def get_certificate_async(
        self,
        request: esa20240910_models.GetCertificateRequest,
    ) -> esa20240910_models.GetCertificateResponse:
        """
        @summary Retrieve the certificate, private key, and certificate information
        
        @param request: GetCertificateRequest
        @return: GetCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_certificate_with_options_async(request, runtime)

    def get_certificate_quota_with_options(
        self,
        request: esa20240910_models.GetCertificateQuotaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetCertificateQuotaResponse:
        """
        @summary Query certificate quota and usage
        
        @param request: GetCertificateQuotaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCertificateQuotaResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCertificateQuota',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetCertificateQuotaResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_certificate_quota_with_options_async(
        self,
        request: esa20240910_models.GetCertificateQuotaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetCertificateQuotaResponse:
        """
        @summary Query certificate quota and usage
        
        @param request: GetCertificateQuotaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCertificateQuotaResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCertificateQuota',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetCertificateQuotaResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_certificate_quota(
        self,
        request: esa20240910_models.GetCertificateQuotaRequest,
    ) -> esa20240910_models.GetCertificateQuotaResponse:
        """
        @summary Query certificate quota and usage
        
        @param request: GetCertificateQuotaRequest
        @return: GetCertificateQuotaResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_certificate_quota_with_options(request, runtime)

    async def get_certificate_quota_async(
        self,
        request: esa20240910_models.GetCertificateQuotaRequest,
    ) -> esa20240910_models.GetCertificateQuotaResponse:
        """
        @summary Query certificate quota and usage
        
        @param request: GetCertificateQuotaRequest
        @return: GetCertificateQuotaResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_certificate_quota_with_options_async(request, runtime)

    def get_client_ca_certificate_with_options(
        self,
        request: esa20240910_models.GetClientCaCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetClientCaCertificateResponse:
        """
        @summary Queries a client CA certificate.
        
        @param request: GetClientCaCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetClientCaCertificateResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetClientCaCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetClientCaCertificateResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_client_ca_certificate_with_options_async(
        self,
        request: esa20240910_models.GetClientCaCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetClientCaCertificateResponse:
        """
        @summary Queries a client CA certificate.
        
        @param request: GetClientCaCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetClientCaCertificateResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetClientCaCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetClientCaCertificateResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_client_ca_certificate(
        self,
        request: esa20240910_models.GetClientCaCertificateRequest,
    ) -> esa20240910_models.GetClientCaCertificateResponse:
        """
        @summary Queries a client CA certificate.
        
        @param request: GetClientCaCertificateRequest
        @return: GetClientCaCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_client_ca_certificate_with_options(request, runtime)

    async def get_client_ca_certificate_async(
        self,
        request: esa20240910_models.GetClientCaCertificateRequest,
    ) -> esa20240910_models.GetClientCaCertificateResponse:
        """
        @summary Queries a client CA certificate.
        
        @param request: GetClientCaCertificateRequest
        @return: GetClientCaCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_client_ca_certificate_with_options_async(request, runtime)

    def get_client_certificate_with_options(
        self,
        request: esa20240910_models.GetClientCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetClientCertificateResponse:
        """
        @summary Queries information about a client certificate.
        
        @param request: GetClientCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetClientCertificateResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetClientCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetClientCertificateResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_client_certificate_with_options_async(
        self,
        request: esa20240910_models.GetClientCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetClientCertificateResponse:
        """
        @summary Queries information about a client certificate.
        
        @param request: GetClientCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetClientCertificateResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetClientCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetClientCertificateResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_client_certificate(
        self,
        request: esa20240910_models.GetClientCertificateRequest,
    ) -> esa20240910_models.GetClientCertificateResponse:
        """
        @summary Queries information about a client certificate.
        
        @param request: GetClientCertificateRequest
        @return: GetClientCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_client_certificate_with_options(request, runtime)

    async def get_client_certificate_async(
        self,
        request: esa20240910_models.GetClientCertificateRequest,
    ) -> esa20240910_models.GetClientCertificateResponse:
        """
        @summary Queries information about a client certificate.
        
        @param request: GetClientCertificateRequest
        @return: GetClientCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_client_certificate_with_options_async(request, runtime)

    def get_client_certificate_hostnames_with_options(
        self,
        request: esa20240910_models.GetClientCertificateHostnamesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetClientCertificateHostnamesResponse:
        """
        @summary Queries domain names associated with a client CA certificate. If no certificate is specified, domain names associated with an Edge Security Acceleration(ESA)-managed CA certificate are returned.
        
        @param request: GetClientCertificateHostnamesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetClientCertificateHostnamesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetClientCertificateHostnames',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetClientCertificateHostnamesResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_client_certificate_hostnames_with_options_async(
        self,
        request: esa20240910_models.GetClientCertificateHostnamesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetClientCertificateHostnamesResponse:
        """
        @summary Queries domain names associated with a client CA certificate. If no certificate is specified, domain names associated with an Edge Security Acceleration(ESA)-managed CA certificate are returned.
        
        @param request: GetClientCertificateHostnamesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetClientCertificateHostnamesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetClientCertificateHostnames',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetClientCertificateHostnamesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_client_certificate_hostnames(
        self,
        request: esa20240910_models.GetClientCertificateHostnamesRequest,
    ) -> esa20240910_models.GetClientCertificateHostnamesResponse:
        """
        @summary Queries domain names associated with a client CA certificate. If no certificate is specified, domain names associated with an Edge Security Acceleration(ESA)-managed CA certificate are returned.
        
        @param request: GetClientCertificateHostnamesRequest
        @return: GetClientCertificateHostnamesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_client_certificate_hostnames_with_options(request, runtime)

    async def get_client_certificate_hostnames_async(
        self,
        request: esa20240910_models.GetClientCertificateHostnamesRequest,
    ) -> esa20240910_models.GetClientCertificateHostnamesResponse:
        """
        @summary Queries domain names associated with a client CA certificate. If no certificate is specified, domain names associated with an Edge Security Acceleration(ESA)-managed CA certificate are returned.
        
        @param request: GetClientCertificateHostnamesRequest
        @return: GetClientCertificateHostnamesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_client_certificate_hostnames_with_options_async(request, runtime)

    def get_cname_flattening_with_options(
        self,
        request: esa20240910_models.GetCnameFlatteningRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetCnameFlatteningResponse:
        """
        @summary Queries the CNAME flattening configuration of a website
        
        @param request: GetCnameFlatteningRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCnameFlatteningResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCnameFlattening',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetCnameFlatteningResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_cname_flattening_with_options_async(
        self,
        request: esa20240910_models.GetCnameFlatteningRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetCnameFlatteningResponse:
        """
        @summary Queries the CNAME flattening configuration of a website
        
        @param request: GetCnameFlatteningRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCnameFlatteningResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCnameFlattening',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetCnameFlatteningResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_cname_flattening(
        self,
        request: esa20240910_models.GetCnameFlatteningRequest,
    ) -> esa20240910_models.GetCnameFlatteningResponse:
        """
        @summary Queries the CNAME flattening configuration of a website
        
        @param request: GetCnameFlatteningRequest
        @return: GetCnameFlatteningResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_cname_flattening_with_options(request, runtime)

    async def get_cname_flattening_async(
        self,
        request: esa20240910_models.GetCnameFlatteningRequest,
    ) -> esa20240910_models.GetCnameFlatteningResponse:
        """
        @summary Queries the CNAME flattening configuration of a website
        
        @param request: GetCnameFlatteningRequest
        @return: GetCnameFlatteningResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_cname_flattening_with_options_async(request, runtime)

    def get_compression_rule_with_options(
        self,
        request: esa20240910_models.GetCompressionRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetCompressionRuleResponse:
        """
        @summary Query Compression Rule Details
        
        @param request: GetCompressionRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCompressionRuleResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCompressionRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetCompressionRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_compression_rule_with_options_async(
        self,
        request: esa20240910_models.GetCompressionRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetCompressionRuleResponse:
        """
        @summary Query Compression Rule Details
        
        @param request: GetCompressionRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCompressionRuleResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCompressionRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetCompressionRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_compression_rule(
        self,
        request: esa20240910_models.GetCompressionRuleRequest,
    ) -> esa20240910_models.GetCompressionRuleResponse:
        """
        @summary Query Compression Rule Details
        
        @param request: GetCompressionRuleRequest
        @return: GetCompressionRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_compression_rule_with_options(request, runtime)

    async def get_compression_rule_async(
        self,
        request: esa20240910_models.GetCompressionRuleRequest,
    ) -> esa20240910_models.GetCompressionRuleResponse:
        """
        @summary Query Compression Rule Details
        
        @param request: GetCompressionRuleRequest
        @return: GetCompressionRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_compression_rule_with_options_async(request, runtime)

    def get_cross_border_optimization_with_options(
        self,
        request: esa20240910_models.GetCrossBorderOptimizationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetCrossBorderOptimizationResponse:
        """
        @summary 查询站点中国大陆网络接入优化配置
        
        @param request: GetCrossBorderOptimizationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCrossBorderOptimizationResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCrossBorderOptimization',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetCrossBorderOptimizationResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_cross_border_optimization_with_options_async(
        self,
        request: esa20240910_models.GetCrossBorderOptimizationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetCrossBorderOptimizationResponse:
        """
        @summary 查询站点中国大陆网络接入优化配置
        
        @param request: GetCrossBorderOptimizationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCrossBorderOptimizationResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCrossBorderOptimization',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetCrossBorderOptimizationResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_cross_border_optimization(
        self,
        request: esa20240910_models.GetCrossBorderOptimizationRequest,
    ) -> esa20240910_models.GetCrossBorderOptimizationResponse:
        """
        @summary 查询站点中国大陆网络接入优化配置
        
        @param request: GetCrossBorderOptimizationRequest
        @return: GetCrossBorderOptimizationResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_cross_border_optimization_with_options(request, runtime)

    async def get_cross_border_optimization_async(
        self,
        request: esa20240910_models.GetCrossBorderOptimizationRequest,
    ) -> esa20240910_models.GetCrossBorderOptimizationResponse:
        """
        @summary 查询站点中国大陆网络接入优化配置
        
        @param request: GetCrossBorderOptimizationRequest
        @return: GetCrossBorderOptimizationResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_cross_border_optimization_with_options_async(request, runtime)

    def get_development_mode_with_options(
        self,
        request: esa20240910_models.GetDevelopmentModeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetDevelopmentModeResponse:
        """
        @summary Query Site Developer Mode Configuration
        
        @param request: GetDevelopmentModeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDevelopmentModeResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetDevelopmentMode',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetDevelopmentModeResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_development_mode_with_options_async(
        self,
        request: esa20240910_models.GetDevelopmentModeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetDevelopmentModeResponse:
        """
        @summary Query Site Developer Mode Configuration
        
        @param request: GetDevelopmentModeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDevelopmentModeResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetDevelopmentMode',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetDevelopmentModeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_development_mode(
        self,
        request: esa20240910_models.GetDevelopmentModeRequest,
    ) -> esa20240910_models.GetDevelopmentModeResponse:
        """
        @summary Query Site Developer Mode Configuration
        
        @param request: GetDevelopmentModeRequest
        @return: GetDevelopmentModeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_development_mode_with_options(request, runtime)

    async def get_development_mode_async(
        self,
        request: esa20240910_models.GetDevelopmentModeRequest,
    ) -> esa20240910_models.GetDevelopmentModeResponse:
        """
        @summary Query Site Developer Mode Configuration
        
        @param request: GetDevelopmentModeRequest
        @return: GetDevelopmentModeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_development_mode_with_options_async(request, runtime)

    def get_edge_container_app_with_options(
        self,
        request: esa20240910_models.GetEdgeContainerAppRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetEdgeContainerAppResponse:
        """
        @summary Queries the information about a containerized application, including basic application configurations and health check configurations.
        
        @param request: GetEdgeContainerAppRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetEdgeContainerAppResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_id):
            query['AppId'] = request.app_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetEdgeContainerApp',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetEdgeContainerAppResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_edge_container_app_with_options_async(
        self,
        request: esa20240910_models.GetEdgeContainerAppRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetEdgeContainerAppResponse:
        """
        @summary Queries the information about a containerized application, including basic application configurations and health check configurations.
        
        @param request: GetEdgeContainerAppRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetEdgeContainerAppResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_id):
            query['AppId'] = request.app_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetEdgeContainerApp',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetEdgeContainerAppResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_edge_container_app(
        self,
        request: esa20240910_models.GetEdgeContainerAppRequest,
    ) -> esa20240910_models.GetEdgeContainerAppResponse:
        """
        @summary Queries the information about a containerized application, including basic application configurations and health check configurations.
        
        @param request: GetEdgeContainerAppRequest
        @return: GetEdgeContainerAppResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_edge_container_app_with_options(request, runtime)

    async def get_edge_container_app_async(
        self,
        request: esa20240910_models.GetEdgeContainerAppRequest,
    ) -> esa20240910_models.GetEdgeContainerAppResponse:
        """
        @summary Queries the information about a containerized application, including basic application configurations and health check configurations.
        
        @param request: GetEdgeContainerAppRequest
        @return: GetEdgeContainerAppResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_edge_container_app_with_options_async(request, runtime)

    def get_edge_container_app_log_river_with_options(
        self,
        request: esa20240910_models.GetEdgeContainerAppLogRiverRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetEdgeContainerAppLogRiverResponse:
        """
        @summary Queries the log collection configuration of a containerized application.
        
        @param request: GetEdgeContainerAppLogRiverRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetEdgeContainerAppLogRiverResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetEdgeContainerAppLogRiver',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetEdgeContainerAppLogRiverResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_edge_container_app_log_river_with_options_async(
        self,
        request: esa20240910_models.GetEdgeContainerAppLogRiverRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetEdgeContainerAppLogRiverResponse:
        """
        @summary Queries the log collection configuration of a containerized application.
        
        @param request: GetEdgeContainerAppLogRiverRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetEdgeContainerAppLogRiverResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetEdgeContainerAppLogRiver',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetEdgeContainerAppLogRiverResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_edge_container_app_log_river(
        self,
        request: esa20240910_models.GetEdgeContainerAppLogRiverRequest,
    ) -> esa20240910_models.GetEdgeContainerAppLogRiverResponse:
        """
        @summary Queries the log collection configuration of a containerized application.
        
        @param request: GetEdgeContainerAppLogRiverRequest
        @return: GetEdgeContainerAppLogRiverResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_edge_container_app_log_river_with_options(request, runtime)

    async def get_edge_container_app_log_river_async(
        self,
        request: esa20240910_models.GetEdgeContainerAppLogRiverRequest,
    ) -> esa20240910_models.GetEdgeContainerAppLogRiverResponse:
        """
        @summary Queries the log collection configuration of a containerized application.
        
        @param request: GetEdgeContainerAppLogRiverRequest
        @return: GetEdgeContainerAppLogRiverResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_edge_container_app_log_river_with_options_async(request, runtime)

    def get_edge_container_app_resource_reserve_with_options(
        self,
        request: esa20240910_models.GetEdgeContainerAppResourceReserveRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetEdgeContainerAppResourceReserveResponse:
        """
        @summary 获取边缘容器资源预留配置
        
        @param request: GetEdgeContainerAppResourceReserveRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetEdgeContainerAppResourceReserveResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_id):
            query['AppId'] = request.app_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetEdgeContainerAppResourceReserve',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetEdgeContainerAppResourceReserveResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_edge_container_app_resource_reserve_with_options_async(
        self,
        request: esa20240910_models.GetEdgeContainerAppResourceReserveRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetEdgeContainerAppResourceReserveResponse:
        """
        @summary 获取边缘容器资源预留配置
        
        @param request: GetEdgeContainerAppResourceReserveRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetEdgeContainerAppResourceReserveResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_id):
            query['AppId'] = request.app_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetEdgeContainerAppResourceReserve',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetEdgeContainerAppResourceReserveResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_edge_container_app_resource_reserve(
        self,
        request: esa20240910_models.GetEdgeContainerAppResourceReserveRequest,
    ) -> esa20240910_models.GetEdgeContainerAppResourceReserveResponse:
        """
        @summary 获取边缘容器资源预留配置
        
        @param request: GetEdgeContainerAppResourceReserveRequest
        @return: GetEdgeContainerAppResourceReserveResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_edge_container_app_resource_reserve_with_options(request, runtime)

    async def get_edge_container_app_resource_reserve_async(
        self,
        request: esa20240910_models.GetEdgeContainerAppResourceReserveRequest,
    ) -> esa20240910_models.GetEdgeContainerAppResourceReserveResponse:
        """
        @summary 获取边缘容器资源预留配置
        
        @param request: GetEdgeContainerAppResourceReserveRequest
        @return: GetEdgeContainerAppResourceReserveResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_edge_container_app_resource_reserve_with_options_async(request, runtime)

    def get_edge_container_app_resource_status_with_options(
        self,
        request: esa20240910_models.GetEdgeContainerAppResourceStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetEdgeContainerAppResourceStatusResponse:
        """
        @summary 获取边缘容器应用资源分布
        
        @param request: GetEdgeContainerAppResourceStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetEdgeContainerAppResourceStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_id):
            query['AppId'] = request.app_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetEdgeContainerAppResourceStatus',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetEdgeContainerAppResourceStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_edge_container_app_resource_status_with_options_async(
        self,
        request: esa20240910_models.GetEdgeContainerAppResourceStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetEdgeContainerAppResourceStatusResponse:
        """
        @summary 获取边缘容器应用资源分布
        
        @param request: GetEdgeContainerAppResourceStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetEdgeContainerAppResourceStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_id):
            query['AppId'] = request.app_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetEdgeContainerAppResourceStatus',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetEdgeContainerAppResourceStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_edge_container_app_resource_status(
        self,
        request: esa20240910_models.GetEdgeContainerAppResourceStatusRequest,
    ) -> esa20240910_models.GetEdgeContainerAppResourceStatusResponse:
        """
        @summary 获取边缘容器应用资源分布
        
        @param request: GetEdgeContainerAppResourceStatusRequest
        @return: GetEdgeContainerAppResourceStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_edge_container_app_resource_status_with_options(request, runtime)

    async def get_edge_container_app_resource_status_async(
        self,
        request: esa20240910_models.GetEdgeContainerAppResourceStatusRequest,
    ) -> esa20240910_models.GetEdgeContainerAppResourceStatusResponse:
        """
        @summary 获取边缘容器应用资源分布
        
        @param request: GetEdgeContainerAppResourceStatusRequest
        @return: GetEdgeContainerAppResourceStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_edge_container_app_resource_status_with_options_async(request, runtime)

    def get_edge_container_app_status_with_options(
        self,
        request: esa20240910_models.GetEdgeContainerAppStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetEdgeContainerAppStatusResponse:
        """
        @summary Queries the status information about a containerized application, including the deployment, release, and rollback of the application.
        
        @param request: GetEdgeContainerAppStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetEdgeContainerAppStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_id):
            query['AppId'] = request.app_id
        if not UtilClient.is_unset(request.publish_env):
            query['PublishEnv'] = request.publish_env
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetEdgeContainerAppStatus',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetEdgeContainerAppStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_edge_container_app_status_with_options_async(
        self,
        request: esa20240910_models.GetEdgeContainerAppStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetEdgeContainerAppStatusResponse:
        """
        @summary Queries the status information about a containerized application, including the deployment, release, and rollback of the application.
        
        @param request: GetEdgeContainerAppStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetEdgeContainerAppStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_id):
            query['AppId'] = request.app_id
        if not UtilClient.is_unset(request.publish_env):
            query['PublishEnv'] = request.publish_env
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetEdgeContainerAppStatus',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetEdgeContainerAppStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_edge_container_app_status(
        self,
        request: esa20240910_models.GetEdgeContainerAppStatusRequest,
    ) -> esa20240910_models.GetEdgeContainerAppStatusResponse:
        """
        @summary Queries the status information about a containerized application, including the deployment, release, and rollback of the application.
        
        @param request: GetEdgeContainerAppStatusRequest
        @return: GetEdgeContainerAppStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_edge_container_app_status_with_options(request, runtime)

    async def get_edge_container_app_status_async(
        self,
        request: esa20240910_models.GetEdgeContainerAppStatusRequest,
    ) -> esa20240910_models.GetEdgeContainerAppStatusResponse:
        """
        @summary Queries the status information about a containerized application, including the deployment, release, and rollback of the application.
        
        @param request: GetEdgeContainerAppStatusRequest
        @return: GetEdgeContainerAppStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_edge_container_app_status_with_options_async(request, runtime)

    def get_edge_container_app_version_with_options(
        self,
        request: esa20240910_models.GetEdgeContainerAppVersionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetEdgeContainerAppVersionResponse:
        """
        @summary Queries the information about a version of a containerized application. You can select an application version to release based on the version information.
        
        @param request: GetEdgeContainerAppVersionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetEdgeContainerAppVersionResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetEdgeContainerAppVersion',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetEdgeContainerAppVersionResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_edge_container_app_version_with_options_async(
        self,
        request: esa20240910_models.GetEdgeContainerAppVersionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetEdgeContainerAppVersionResponse:
        """
        @summary Queries the information about a version of a containerized application. You can select an application version to release based on the version information.
        
        @param request: GetEdgeContainerAppVersionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetEdgeContainerAppVersionResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetEdgeContainerAppVersion',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetEdgeContainerAppVersionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_edge_container_app_version(
        self,
        request: esa20240910_models.GetEdgeContainerAppVersionRequest,
    ) -> esa20240910_models.GetEdgeContainerAppVersionResponse:
        """
        @summary Queries the information about a version of a containerized application. You can select an application version to release based on the version information.
        
        @param request: GetEdgeContainerAppVersionRequest
        @return: GetEdgeContainerAppVersionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_edge_container_app_version_with_options(request, runtime)

    async def get_edge_container_app_version_async(
        self,
        request: esa20240910_models.GetEdgeContainerAppVersionRequest,
    ) -> esa20240910_models.GetEdgeContainerAppVersionResponse:
        """
        @summary Queries the information about a version of a containerized application. You can select an application version to release based on the version information.
        
        @param request: GetEdgeContainerAppVersionRequest
        @return: GetEdgeContainerAppVersionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_edge_container_app_version_with_options_async(request, runtime)

    def get_edge_container_deploy_regions_with_options(
        self,
        request: esa20240910_models.GetEdgeContainerDeployRegionsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetEdgeContainerDeployRegionsResponse:
        """
        @summary Queries regions where a containerized application is deployed based on the application ID.
        
        @param request: GetEdgeContainerDeployRegionsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetEdgeContainerDeployRegionsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetEdgeContainerDeployRegions',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetEdgeContainerDeployRegionsResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_edge_container_deploy_regions_with_options_async(
        self,
        request: esa20240910_models.GetEdgeContainerDeployRegionsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetEdgeContainerDeployRegionsResponse:
        """
        @summary Queries regions where a containerized application is deployed based on the application ID.
        
        @param request: GetEdgeContainerDeployRegionsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetEdgeContainerDeployRegionsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetEdgeContainerDeployRegions',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetEdgeContainerDeployRegionsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_edge_container_deploy_regions(
        self,
        request: esa20240910_models.GetEdgeContainerDeployRegionsRequest,
    ) -> esa20240910_models.GetEdgeContainerDeployRegionsResponse:
        """
        @summary Queries regions where a containerized application is deployed based on the application ID.
        
        @param request: GetEdgeContainerDeployRegionsRequest
        @return: GetEdgeContainerDeployRegionsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_edge_container_deploy_regions_with_options(request, runtime)

    async def get_edge_container_deploy_regions_async(
        self,
        request: esa20240910_models.GetEdgeContainerDeployRegionsRequest,
    ) -> esa20240910_models.GetEdgeContainerDeployRegionsResponse:
        """
        @summary Queries regions where a containerized application is deployed based on the application ID.
        
        @param request: GetEdgeContainerDeployRegionsRequest
        @return: GetEdgeContainerDeployRegionsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_edge_container_deploy_regions_with_options_async(request, runtime)

    def get_edge_container_logs_with_options(
        self,
        request: esa20240910_models.GetEdgeContainerLogsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetEdgeContainerLogsResponse:
        """
        @summary Queries Edge Container logs.
        
        @param request: GetEdgeContainerLogsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetEdgeContainerLogsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetEdgeContainerLogs',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetEdgeContainerLogsResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_edge_container_logs_with_options_async(
        self,
        request: esa20240910_models.GetEdgeContainerLogsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetEdgeContainerLogsResponse:
        """
        @summary Queries Edge Container logs.
        
        @param request: GetEdgeContainerLogsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetEdgeContainerLogsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetEdgeContainerLogs',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetEdgeContainerLogsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_edge_container_logs(
        self,
        request: esa20240910_models.GetEdgeContainerLogsRequest,
    ) -> esa20240910_models.GetEdgeContainerLogsResponse:
        """
        @summary Queries Edge Container logs.
        
        @param request: GetEdgeContainerLogsRequest
        @return: GetEdgeContainerLogsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_edge_container_logs_with_options(request, runtime)

    async def get_edge_container_logs_async(
        self,
        request: esa20240910_models.GetEdgeContainerLogsRequest,
    ) -> esa20240910_models.GetEdgeContainerLogsResponse:
        """
        @summary Queries Edge Container logs.
        
        @param request: GetEdgeContainerLogsRequest
        @return: GetEdgeContainerLogsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_edge_container_logs_with_options_async(request, runtime)

    def get_edge_container_staging_deploy_status_with_options(
        self,
        request: esa20240910_models.GetEdgeContainerStagingDeployStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetEdgeContainerStagingDeployStatusResponse:
        """
        @summary Queries the deployment status of an application in the staging environment by using the application ID.
        
        @param request: GetEdgeContainerStagingDeployStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetEdgeContainerStagingDeployStatusResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetEdgeContainerStagingDeployStatus',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetEdgeContainerStagingDeployStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_edge_container_staging_deploy_status_with_options_async(
        self,
        request: esa20240910_models.GetEdgeContainerStagingDeployStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetEdgeContainerStagingDeployStatusResponse:
        """
        @summary Queries the deployment status of an application in the staging environment by using the application ID.
        
        @param request: GetEdgeContainerStagingDeployStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetEdgeContainerStagingDeployStatusResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetEdgeContainerStagingDeployStatus',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetEdgeContainerStagingDeployStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_edge_container_staging_deploy_status(
        self,
        request: esa20240910_models.GetEdgeContainerStagingDeployStatusRequest,
    ) -> esa20240910_models.GetEdgeContainerStagingDeployStatusResponse:
        """
        @summary Queries the deployment status of an application in the staging environment by using the application ID.
        
        @param request: GetEdgeContainerStagingDeployStatusRequest
        @return: GetEdgeContainerStagingDeployStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_edge_container_staging_deploy_status_with_options(request, runtime)

    async def get_edge_container_staging_deploy_status_async(
        self,
        request: esa20240910_models.GetEdgeContainerStagingDeployStatusRequest,
    ) -> esa20240910_models.GetEdgeContainerStagingDeployStatusResponse:
        """
        @summary Queries the deployment status of an application in the staging environment by using the application ID.
        
        @param request: GetEdgeContainerStagingDeployStatusRequest
        @return: GetEdgeContainerStagingDeployStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_edge_container_staging_deploy_status_with_options_async(request, runtime)

    def get_edge_container_terminal_with_options(
        self,
        request: esa20240910_models.GetEdgeContainerTerminalRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetEdgeContainerTerminalResponse:
        """
        @summary Queries the terminal information of a containerized application.
        
        @param request: GetEdgeContainerTerminalRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetEdgeContainerTerminalResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_id):
            query['AppId'] = request.app_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetEdgeContainerTerminal',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetEdgeContainerTerminalResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_edge_container_terminal_with_options_async(
        self,
        request: esa20240910_models.GetEdgeContainerTerminalRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetEdgeContainerTerminalResponse:
        """
        @summary Queries the terminal information of a containerized application.
        
        @param request: GetEdgeContainerTerminalRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetEdgeContainerTerminalResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_id):
            query['AppId'] = request.app_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetEdgeContainerTerminal',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetEdgeContainerTerminalResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_edge_container_terminal(
        self,
        request: esa20240910_models.GetEdgeContainerTerminalRequest,
    ) -> esa20240910_models.GetEdgeContainerTerminalResponse:
        """
        @summary Queries the terminal information of a containerized application.
        
        @param request: GetEdgeContainerTerminalRequest
        @return: GetEdgeContainerTerminalResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_edge_container_terminal_with_options(request, runtime)

    async def get_edge_container_terminal_async(
        self,
        request: esa20240910_models.GetEdgeContainerTerminalRequest,
    ) -> esa20240910_models.GetEdgeContainerTerminalResponse:
        """
        @summary Queries the terminal information of a containerized application.
        
        @param request: GetEdgeContainerTerminalRequest
        @return: GetEdgeContainerTerminalResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_edge_container_terminal_with_options_async(request, runtime)

    def get_er_service_with_options(
        self,
        request: esa20240910_models.GetErServiceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetErServiceResponse:
        """
        @summary Checks the status of Edge Routine.
        
        @param request: GetErServiceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetErServiceResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetErService',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetErServiceResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_er_service_with_options_async(
        self,
        request: esa20240910_models.GetErServiceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetErServiceResponse:
        """
        @summary Checks the status of Edge Routine.
        
        @param request: GetErServiceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetErServiceResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetErService',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetErServiceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_er_service(
        self,
        request: esa20240910_models.GetErServiceRequest,
    ) -> esa20240910_models.GetErServiceResponse:
        """
        @summary Checks the status of Edge Routine.
        
        @param request: GetErServiceRequest
        @return: GetErServiceResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_er_service_with_options(request, runtime)

    async def get_er_service_async(
        self,
        request: esa20240910_models.GetErServiceRequest,
    ) -> esa20240910_models.GetErServiceResponse:
        """
        @summary Checks the status of Edge Routine.
        
        @param request: GetErServiceRequest
        @return: GetErServiceResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_er_service_with_options_async(request, runtime)

    def get_http_incoming_request_header_modification_rule_with_options(
        self,
        request: esa20240910_models.GetHttpIncomingRequestHeaderModificationRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetHttpIncomingRequestHeaderModificationRuleResponse:
        """
        @summary 查询HTTP入站请求头规则详情
        
        @param request: GetHttpIncomingRequestHeaderModificationRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetHttpIncomingRequestHeaderModificationRuleResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetHttpIncomingRequestHeaderModificationRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetHttpIncomingRequestHeaderModificationRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_http_incoming_request_header_modification_rule_with_options_async(
        self,
        request: esa20240910_models.GetHttpIncomingRequestHeaderModificationRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetHttpIncomingRequestHeaderModificationRuleResponse:
        """
        @summary 查询HTTP入站请求头规则详情
        
        @param request: GetHttpIncomingRequestHeaderModificationRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetHttpIncomingRequestHeaderModificationRuleResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetHttpIncomingRequestHeaderModificationRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetHttpIncomingRequestHeaderModificationRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_http_incoming_request_header_modification_rule(
        self,
        request: esa20240910_models.GetHttpIncomingRequestHeaderModificationRuleRequest,
    ) -> esa20240910_models.GetHttpIncomingRequestHeaderModificationRuleResponse:
        """
        @summary 查询HTTP入站请求头规则详情
        
        @param request: GetHttpIncomingRequestHeaderModificationRuleRequest
        @return: GetHttpIncomingRequestHeaderModificationRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_http_incoming_request_header_modification_rule_with_options(request, runtime)

    async def get_http_incoming_request_header_modification_rule_async(
        self,
        request: esa20240910_models.GetHttpIncomingRequestHeaderModificationRuleRequest,
    ) -> esa20240910_models.GetHttpIncomingRequestHeaderModificationRuleResponse:
        """
        @summary 查询HTTP入站请求头规则详情
        
        @param request: GetHttpIncomingRequestHeaderModificationRuleRequest
        @return: GetHttpIncomingRequestHeaderModificationRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_http_incoming_request_header_modification_rule_with_options_async(request, runtime)

    def get_http_incoming_response_header_modification_rule_with_options(
        self,
        request: esa20240910_models.GetHttpIncomingResponseHeaderModificationRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetHttpIncomingResponseHeaderModificationRuleResponse:
        """
        @summary 查询HTTP入站响应头规则
        
        @param request: GetHttpIncomingResponseHeaderModificationRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetHttpIncomingResponseHeaderModificationRuleResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetHttpIncomingResponseHeaderModificationRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetHttpIncomingResponseHeaderModificationRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_http_incoming_response_header_modification_rule_with_options_async(
        self,
        request: esa20240910_models.GetHttpIncomingResponseHeaderModificationRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetHttpIncomingResponseHeaderModificationRuleResponse:
        """
        @summary 查询HTTP入站响应头规则
        
        @param request: GetHttpIncomingResponseHeaderModificationRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetHttpIncomingResponseHeaderModificationRuleResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetHttpIncomingResponseHeaderModificationRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetHttpIncomingResponseHeaderModificationRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_http_incoming_response_header_modification_rule(
        self,
        request: esa20240910_models.GetHttpIncomingResponseHeaderModificationRuleRequest,
    ) -> esa20240910_models.GetHttpIncomingResponseHeaderModificationRuleResponse:
        """
        @summary 查询HTTP入站响应头规则
        
        @param request: GetHttpIncomingResponseHeaderModificationRuleRequest
        @return: GetHttpIncomingResponseHeaderModificationRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_http_incoming_response_header_modification_rule_with_options(request, runtime)

    async def get_http_incoming_response_header_modification_rule_async(
        self,
        request: esa20240910_models.GetHttpIncomingResponseHeaderModificationRuleRequest,
    ) -> esa20240910_models.GetHttpIncomingResponseHeaderModificationRuleResponse:
        """
        @summary 查询HTTP入站响应头规则
        
        @param request: GetHttpIncomingResponseHeaderModificationRuleRequest
        @return: GetHttpIncomingResponseHeaderModificationRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_http_incoming_response_header_modification_rule_with_options_async(request, runtime)

    def get_http_request_header_modification_rule_with_options(
        self,
        request: esa20240910_models.GetHttpRequestHeaderModificationRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetHttpRequestHeaderModificationRuleResponse:
        """
        @summary Query HTTP Request Header Rule Details
        
        @param request: GetHttpRequestHeaderModificationRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetHttpRequestHeaderModificationRuleResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetHttpRequestHeaderModificationRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetHttpRequestHeaderModificationRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_http_request_header_modification_rule_with_options_async(
        self,
        request: esa20240910_models.GetHttpRequestHeaderModificationRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetHttpRequestHeaderModificationRuleResponse:
        """
        @summary Query HTTP Request Header Rule Details
        
        @param request: GetHttpRequestHeaderModificationRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetHttpRequestHeaderModificationRuleResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetHttpRequestHeaderModificationRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetHttpRequestHeaderModificationRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_http_request_header_modification_rule(
        self,
        request: esa20240910_models.GetHttpRequestHeaderModificationRuleRequest,
    ) -> esa20240910_models.GetHttpRequestHeaderModificationRuleResponse:
        """
        @summary Query HTTP Request Header Rule Details
        
        @param request: GetHttpRequestHeaderModificationRuleRequest
        @return: GetHttpRequestHeaderModificationRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_http_request_header_modification_rule_with_options(request, runtime)

    async def get_http_request_header_modification_rule_async(
        self,
        request: esa20240910_models.GetHttpRequestHeaderModificationRuleRequest,
    ) -> esa20240910_models.GetHttpRequestHeaderModificationRuleResponse:
        """
        @summary Query HTTP Request Header Rule Details
        
        @param request: GetHttpRequestHeaderModificationRuleRequest
        @return: GetHttpRequestHeaderModificationRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_http_request_header_modification_rule_with_options_async(request, runtime)

    def get_http_response_header_modification_rule_with_options(
        self,
        request: esa20240910_models.GetHttpResponseHeaderModificationRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetHttpResponseHeaderModificationRuleResponse:
        """
        @summary Query HTTP Response Header Rules
        
        @param request: GetHttpResponseHeaderModificationRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetHttpResponseHeaderModificationRuleResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetHttpResponseHeaderModificationRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetHttpResponseHeaderModificationRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_http_response_header_modification_rule_with_options_async(
        self,
        request: esa20240910_models.GetHttpResponseHeaderModificationRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetHttpResponseHeaderModificationRuleResponse:
        """
        @summary Query HTTP Response Header Rules
        
        @param request: GetHttpResponseHeaderModificationRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetHttpResponseHeaderModificationRuleResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetHttpResponseHeaderModificationRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetHttpResponseHeaderModificationRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_http_response_header_modification_rule(
        self,
        request: esa20240910_models.GetHttpResponseHeaderModificationRuleRequest,
    ) -> esa20240910_models.GetHttpResponseHeaderModificationRuleResponse:
        """
        @summary Query HTTP Response Header Rules
        
        @param request: GetHttpResponseHeaderModificationRuleRequest
        @return: GetHttpResponseHeaderModificationRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_http_response_header_modification_rule_with_options(request, runtime)

    async def get_http_response_header_modification_rule_async(
        self,
        request: esa20240910_models.GetHttpResponseHeaderModificationRuleRequest,
    ) -> esa20240910_models.GetHttpResponseHeaderModificationRuleResponse:
        """
        @summary Query HTTP Response Header Rules
        
        @param request: GetHttpResponseHeaderModificationRuleRequest
        @return: GetHttpResponseHeaderModificationRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_http_response_header_modification_rule_with_options_async(request, runtime)

    def get_https_application_configuration_with_options(
        self,
        request: esa20240910_models.GetHttpsApplicationConfigurationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetHttpsApplicationConfigurationResponse:
        """
        @summary Query a Single HTTPS Application Configuration
        
        @param request: GetHttpsApplicationConfigurationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetHttpsApplicationConfigurationResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetHttpsApplicationConfiguration',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetHttpsApplicationConfigurationResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_https_application_configuration_with_options_async(
        self,
        request: esa20240910_models.GetHttpsApplicationConfigurationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetHttpsApplicationConfigurationResponse:
        """
        @summary Query a Single HTTPS Application Configuration
        
        @param request: GetHttpsApplicationConfigurationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetHttpsApplicationConfigurationResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetHttpsApplicationConfiguration',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetHttpsApplicationConfigurationResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_https_application_configuration(
        self,
        request: esa20240910_models.GetHttpsApplicationConfigurationRequest,
    ) -> esa20240910_models.GetHttpsApplicationConfigurationResponse:
        """
        @summary Query a Single HTTPS Application Configuration
        
        @param request: GetHttpsApplicationConfigurationRequest
        @return: GetHttpsApplicationConfigurationResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_https_application_configuration_with_options(request, runtime)

    async def get_https_application_configuration_async(
        self,
        request: esa20240910_models.GetHttpsApplicationConfigurationRequest,
    ) -> esa20240910_models.GetHttpsApplicationConfigurationResponse:
        """
        @summary Query a Single HTTPS Application Configuration
        
        @param request: GetHttpsApplicationConfigurationRequest
        @return: GetHttpsApplicationConfigurationResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_https_application_configuration_with_options_async(request, runtime)

    def get_https_basic_configuration_with_options(
        self,
        request: esa20240910_models.GetHttpsBasicConfigurationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetHttpsBasicConfigurationResponse:
        """
        @summary Query a Single HTTPS Basic Configuration
        
        @param request: GetHttpsBasicConfigurationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetHttpsBasicConfigurationResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetHttpsBasicConfiguration',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetHttpsBasicConfigurationResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_https_basic_configuration_with_options_async(
        self,
        request: esa20240910_models.GetHttpsBasicConfigurationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetHttpsBasicConfigurationResponse:
        """
        @summary Query a Single HTTPS Basic Configuration
        
        @param request: GetHttpsBasicConfigurationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetHttpsBasicConfigurationResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetHttpsBasicConfiguration',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetHttpsBasicConfigurationResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_https_basic_configuration(
        self,
        request: esa20240910_models.GetHttpsBasicConfigurationRequest,
    ) -> esa20240910_models.GetHttpsBasicConfigurationResponse:
        """
        @summary Query a Single HTTPS Basic Configuration
        
        @param request: GetHttpsBasicConfigurationRequest
        @return: GetHttpsBasicConfigurationResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_https_basic_configuration_with_options(request, runtime)

    async def get_https_basic_configuration_async(
        self,
        request: esa20240910_models.GetHttpsBasicConfigurationRequest,
    ) -> esa20240910_models.GetHttpsBasicConfigurationResponse:
        """
        @summary Query a Single HTTPS Basic Configuration
        
        @param request: GetHttpsBasicConfigurationRequest
        @return: GetHttpsBasicConfigurationResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_https_basic_configuration_with_options_async(request, runtime)

    def get_ipv_6with_options(
        self,
        request: esa20240910_models.GetIPv6Request,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetIPv6Response:
        """
        @summary Queries the IPv6 configuration of a website.
        
        @param request: GetIPv6Request
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetIPv6Response
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetIPv6',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetIPv6Response(),
            self.call_api(params, req, runtime)
        )

    async def get_ipv_6with_options_async(
        self,
        request: esa20240910_models.GetIPv6Request,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetIPv6Response:
        """
        @summary Queries the IPv6 configuration of a website.
        
        @param request: GetIPv6Request
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetIPv6Response
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetIPv6',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetIPv6Response(),
            await self.call_api_async(params, req, runtime)
        )

    def get_ipv_6(
        self,
        request: esa20240910_models.GetIPv6Request,
    ) -> esa20240910_models.GetIPv6Response:
        """
        @summary Queries the IPv6 configuration of a website.
        
        @param request: GetIPv6Request
        @return: GetIPv6Response
        """
        runtime = util_models.RuntimeOptions()
        return self.get_ipv_6with_options(request, runtime)

    async def get_ipv_6_async(
        self,
        request: esa20240910_models.GetIPv6Request,
    ) -> esa20240910_models.GetIPv6Response:
        """
        @summary Queries the IPv6 configuration of a website.
        
        @param request: GetIPv6Request
        @return: GetIPv6Response
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_ipv_6with_options_async(request, runtime)

    def get_image_transform_with_options(
        self,
        request: esa20240910_models.GetImageTransformRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetImageTransformResponse:
        """
        @summary Query Single Site Image Transformation Configuration
        
        @param request: GetImageTransformRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetImageTransformResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetImageTransform',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetImageTransformResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_image_transform_with_options_async(
        self,
        request: esa20240910_models.GetImageTransformRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetImageTransformResponse:
        """
        @summary Query Single Site Image Transformation Configuration
        
        @param request: GetImageTransformRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetImageTransformResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetImageTransform',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetImageTransformResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_image_transform(
        self,
        request: esa20240910_models.GetImageTransformRequest,
    ) -> esa20240910_models.GetImageTransformResponse:
        """
        @summary Query Single Site Image Transformation Configuration
        
        @param request: GetImageTransformRequest
        @return: GetImageTransformResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_image_transform_with_options(request, runtime)

    async def get_image_transform_async(
        self,
        request: esa20240910_models.GetImageTransformRequest,
    ) -> esa20240910_models.GetImageTransformResponse:
        """
        @summary Query Single Site Image Transformation Configuration
        
        @param request: GetImageTransformRequest
        @return: GetImageTransformResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_image_transform_with_options_async(request, runtime)

    def get_kv_with_options(
        self,
        request: esa20240910_models.GetKvRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetKvResponse:
        """
        @summary Queries the value of a key in a key-value pair.
        
        @param request: GetKvRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetKvResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetKv',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetKvResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_kv_with_options_async(
        self,
        request: esa20240910_models.GetKvRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetKvResponse:
        """
        @summary Queries the value of a key in a key-value pair.
        
        @param request: GetKvRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetKvResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetKv',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetKvResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_kv(
        self,
        request: esa20240910_models.GetKvRequest,
    ) -> esa20240910_models.GetKvResponse:
        """
        @summary Queries the value of a key in a key-value pair.
        
        @param request: GetKvRequest
        @return: GetKvResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_kv_with_options(request, runtime)

    async def get_kv_async(
        self,
        request: esa20240910_models.GetKvRequest,
    ) -> esa20240910_models.GetKvResponse:
        """
        @summary Queries the value of a key in a key-value pair.
        
        @param request: GetKvRequest
        @return: GetKvResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_kv_with_options_async(request, runtime)

    def get_kv_account_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetKvAccountResponse:
        """
        @summary Queries the Edge KV usage in your Alibaba Cloud account, including the information about all namespaces.
        
        @param request: GetKvAccountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetKvAccountResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetKvAccount',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetKvAccountResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_kv_account_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetKvAccountResponse:
        """
        @summary Queries the Edge KV usage in your Alibaba Cloud account, including the information about all namespaces.
        
        @param request: GetKvAccountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetKvAccountResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetKvAccount',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetKvAccountResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_kv_account(self) -> esa20240910_models.GetKvAccountResponse:
        """
        @summary Queries the Edge KV usage in your Alibaba Cloud account, including the information about all namespaces.
        
        @return: GetKvAccountResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_kv_account_with_options(runtime)

    async def get_kv_account_async(self) -> esa20240910_models.GetKvAccountResponse:
        """
        @summary Queries the Edge KV usage in your Alibaba Cloud account, including the information about all namespaces.
        
        @return: GetKvAccountResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_kv_account_with_options_async(runtime)

    def get_kv_namespace_with_options(
        self,
        request: esa20240910_models.GetKvNamespaceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetKvNamespaceResponse:
        """
        @summary Queries the information about a namespace in your Alibaba Cloud account.
        
        @param request: GetKvNamespaceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetKvNamespaceResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetKvNamespace',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetKvNamespaceResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_kv_namespace_with_options_async(
        self,
        request: esa20240910_models.GetKvNamespaceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetKvNamespaceResponse:
        """
        @summary Queries the information about a namespace in your Alibaba Cloud account.
        
        @param request: GetKvNamespaceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetKvNamespaceResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetKvNamespace',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetKvNamespaceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_kv_namespace(
        self,
        request: esa20240910_models.GetKvNamespaceRequest,
    ) -> esa20240910_models.GetKvNamespaceResponse:
        """
        @summary Queries the information about a namespace in your Alibaba Cloud account.
        
        @param request: GetKvNamespaceRequest
        @return: GetKvNamespaceResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_kv_namespace_with_options(request, runtime)

    async def get_kv_namespace_async(
        self,
        request: esa20240910_models.GetKvNamespaceRequest,
    ) -> esa20240910_models.GetKvNamespaceResponse:
        """
        @summary Queries the information about a namespace in your Alibaba Cloud account.
        
        @param request: GetKvNamespaceRequest
        @return: GetKvNamespaceResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_kv_namespace_with_options_async(request, runtime)

    def get_list_with_options(
        self,
        request: esa20240910_models.GetListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetListResponse:
        """
        @summary Queries the details of a custom list, such as the name, description, type, and content.
        
        @param request: GetListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetList',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetListResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_list_with_options_async(
        self,
        request: esa20240910_models.GetListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetListResponse:
        """
        @summary Queries the details of a custom list, such as the name, description, type, and content.
        
        @param request: GetListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetList',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_list(
        self,
        request: esa20240910_models.GetListRequest,
    ) -> esa20240910_models.GetListResponse:
        """
        @summary Queries the details of a custom list, such as the name, description, type, and content.
        
        @param request: GetListRequest
        @return: GetListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_list_with_options(request, runtime)

    async def get_list_async(
        self,
        request: esa20240910_models.GetListRequest,
    ) -> esa20240910_models.GetListResponse:
        """
        @summary Queries the details of a custom list, such as the name, description, type, and content.
        
        @param request: GetListRequest
        @return: GetListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_list_with_options_async(request, runtime)

    def get_load_balancer_with_options(
        self,
        request: esa20240910_models.GetLoadBalancerRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetLoadBalancerResponse:
        """
        @summary Query a Specific Load Balancer
        
        @description This API allows users to query the configuration details of a specific load balancer by providing necessary authentication information and resource identifiers, including but not limited to name, session persistence strategy, routing policy, etc.
        
        @param request: GetLoadBalancerRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetLoadBalancerResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetLoadBalancer',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetLoadBalancerResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_load_balancer_with_options_async(
        self,
        request: esa20240910_models.GetLoadBalancerRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetLoadBalancerResponse:
        """
        @summary Query a Specific Load Balancer
        
        @description This API allows users to query the configuration details of a specific load balancer by providing necessary authentication information and resource identifiers, including but not limited to name, session persistence strategy, routing policy, etc.
        
        @param request: GetLoadBalancerRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetLoadBalancerResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetLoadBalancer',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetLoadBalancerResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_load_balancer(
        self,
        request: esa20240910_models.GetLoadBalancerRequest,
    ) -> esa20240910_models.GetLoadBalancerResponse:
        """
        @summary Query a Specific Load Balancer
        
        @description This API allows users to query the configuration details of a specific load balancer by providing necessary authentication information and resource identifiers, including but not limited to name, session persistence strategy, routing policy, etc.
        
        @param request: GetLoadBalancerRequest
        @return: GetLoadBalancerResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_load_balancer_with_options(request, runtime)

    async def get_load_balancer_async(
        self,
        request: esa20240910_models.GetLoadBalancerRequest,
    ) -> esa20240910_models.GetLoadBalancerResponse:
        """
        @summary Query a Specific Load Balancer
        
        @description This API allows users to query the configuration details of a specific load balancer by providing necessary authentication information and resource identifiers, including but not limited to name, session persistence strategy, routing policy, etc.
        
        @param request: GetLoadBalancerRequest
        @return: GetLoadBalancerResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_load_balancer_with_options_async(request, runtime)

    def get_managed_transform_with_options(
        self,
        request: esa20240910_models.GetManagedTransformRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetManagedTransformResponse:
        """
        @summary Query Managed Transform Configuration
        
        @param request: GetManagedTransformRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetManagedTransformResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetManagedTransform',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetManagedTransformResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_managed_transform_with_options_async(
        self,
        request: esa20240910_models.GetManagedTransformRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetManagedTransformResponse:
        """
        @summary Query Managed Transform Configuration
        
        @param request: GetManagedTransformRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetManagedTransformResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetManagedTransform',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetManagedTransformResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_managed_transform(
        self,
        request: esa20240910_models.GetManagedTransformRequest,
    ) -> esa20240910_models.GetManagedTransformResponse:
        """
        @summary Query Managed Transform Configuration
        
        @param request: GetManagedTransformRequest
        @return: GetManagedTransformResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_managed_transform_with_options(request, runtime)

    async def get_managed_transform_async(
        self,
        request: esa20240910_models.GetManagedTransformRequest,
    ) -> esa20240910_models.GetManagedTransformResponse:
        """
        @summary Query Managed Transform Configuration
        
        @param request: GetManagedTransformRequest
        @return: GetManagedTransformResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_managed_transform_with_options_async(request, runtime)

    def get_network_optimization_with_options(
        self,
        request: esa20240910_models.GetNetworkOptimizationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetNetworkOptimizationResponse:
        """
        @summary Query a single network optimization configuration
        
        @param request: GetNetworkOptimizationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetNetworkOptimizationResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetNetworkOptimization',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetNetworkOptimizationResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_network_optimization_with_options_async(
        self,
        request: esa20240910_models.GetNetworkOptimizationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetNetworkOptimizationResponse:
        """
        @summary Query a single network optimization configuration
        
        @param request: GetNetworkOptimizationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetNetworkOptimizationResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetNetworkOptimization',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetNetworkOptimizationResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_network_optimization(
        self,
        request: esa20240910_models.GetNetworkOptimizationRequest,
    ) -> esa20240910_models.GetNetworkOptimizationResponse:
        """
        @summary Query a single network optimization configuration
        
        @param request: GetNetworkOptimizationRequest
        @return: GetNetworkOptimizationResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_network_optimization_with_options(request, runtime)

    async def get_network_optimization_async(
        self,
        request: esa20240910_models.GetNetworkOptimizationRequest,
    ) -> esa20240910_models.GetNetworkOptimizationResponse:
        """
        @summary Query a single network optimization configuration
        
        @param request: GetNetworkOptimizationRequest
        @return: GetNetworkOptimizationResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_network_optimization_with_options_async(request, runtime)

    def get_origin_ca_certificate_with_options(
        self,
        request: esa20240910_models.GetOriginCaCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetOriginCaCertificateResponse:
        """
        @summary 获取源服务器CA证书信息
        
        @param request: GetOriginCaCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOriginCaCertificateResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetOriginCaCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetOriginCaCertificateResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_origin_ca_certificate_with_options_async(
        self,
        request: esa20240910_models.GetOriginCaCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetOriginCaCertificateResponse:
        """
        @summary 获取源服务器CA证书信息
        
        @param request: GetOriginCaCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOriginCaCertificateResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetOriginCaCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetOriginCaCertificateResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_origin_ca_certificate(
        self,
        request: esa20240910_models.GetOriginCaCertificateRequest,
    ) -> esa20240910_models.GetOriginCaCertificateResponse:
        """
        @summary 获取源服务器CA证书信息
        
        @param request: GetOriginCaCertificateRequest
        @return: GetOriginCaCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_origin_ca_certificate_with_options(request, runtime)

    async def get_origin_ca_certificate_async(
        self,
        request: esa20240910_models.GetOriginCaCertificateRequest,
    ) -> esa20240910_models.GetOriginCaCertificateResponse:
        """
        @summary 获取源服务器CA证书信息
        
        @param request: GetOriginCaCertificateRequest
        @return: GetOriginCaCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_origin_ca_certificate_with_options_async(request, runtime)

    def get_origin_client_certificate_with_options(
        self,
        request: esa20240910_models.GetOriginClientCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetOriginClientCertificateResponse:
        """
        @summary 获取域名回源客户端证书信息
        
        @param request: GetOriginClientCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOriginClientCertificateResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetOriginClientCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetOriginClientCertificateResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_origin_client_certificate_with_options_async(
        self,
        request: esa20240910_models.GetOriginClientCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetOriginClientCertificateResponse:
        """
        @summary 获取域名回源客户端证书信息
        
        @param request: GetOriginClientCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOriginClientCertificateResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetOriginClientCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetOriginClientCertificateResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_origin_client_certificate(
        self,
        request: esa20240910_models.GetOriginClientCertificateRequest,
    ) -> esa20240910_models.GetOriginClientCertificateResponse:
        """
        @summary 获取域名回源客户端证书信息
        
        @param request: GetOriginClientCertificateRequest
        @return: GetOriginClientCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_origin_client_certificate_with_options(request, runtime)

    async def get_origin_client_certificate_async(
        self,
        request: esa20240910_models.GetOriginClientCertificateRequest,
    ) -> esa20240910_models.GetOriginClientCertificateResponse:
        """
        @summary 获取域名回源客户端证书信息
        
        @param request: GetOriginClientCertificateRequest
        @return: GetOriginClientCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_origin_client_certificate_with_options_async(request, runtime)

    def get_origin_client_certificate_hostnames_with_options(
        self,
        request: esa20240910_models.GetOriginClientCertificateHostnamesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetOriginClientCertificateHostnamesResponse:
        """
        @summary 获取域名回源客户端证书绑定的域名列表
        
        @param request: GetOriginClientCertificateHostnamesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOriginClientCertificateHostnamesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetOriginClientCertificateHostnames',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetOriginClientCertificateHostnamesResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_origin_client_certificate_hostnames_with_options_async(
        self,
        request: esa20240910_models.GetOriginClientCertificateHostnamesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetOriginClientCertificateHostnamesResponse:
        """
        @summary 获取域名回源客户端证书绑定的域名列表
        
        @param request: GetOriginClientCertificateHostnamesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOriginClientCertificateHostnamesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetOriginClientCertificateHostnames',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetOriginClientCertificateHostnamesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_origin_client_certificate_hostnames(
        self,
        request: esa20240910_models.GetOriginClientCertificateHostnamesRequest,
    ) -> esa20240910_models.GetOriginClientCertificateHostnamesResponse:
        """
        @summary 获取域名回源客户端证书绑定的域名列表
        
        @param request: GetOriginClientCertificateHostnamesRequest
        @return: GetOriginClientCertificateHostnamesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_origin_client_certificate_hostnames_with_options(request, runtime)

    async def get_origin_client_certificate_hostnames_async(
        self,
        request: esa20240910_models.GetOriginClientCertificateHostnamesRequest,
    ) -> esa20240910_models.GetOriginClientCertificateHostnamesResponse:
        """
        @summary 获取域名回源客户端证书绑定的域名列表
        
        @param request: GetOriginClientCertificateHostnamesRequest
        @return: GetOriginClientCertificateHostnamesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_origin_client_certificate_hostnames_with_options_async(request, runtime)

    def get_origin_pool_with_options(
        self,
        request: esa20240910_models.GetOriginPoolRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetOriginPoolResponse:
        """
        @summary Query a specific origin pool
        
        @param request: GetOriginPoolRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOriginPoolResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetOriginPool',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetOriginPoolResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_origin_pool_with_options_async(
        self,
        request: esa20240910_models.GetOriginPoolRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetOriginPoolResponse:
        """
        @summary Query a specific origin pool
        
        @param request: GetOriginPoolRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOriginPoolResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetOriginPool',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetOriginPoolResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_origin_pool(
        self,
        request: esa20240910_models.GetOriginPoolRequest,
    ) -> esa20240910_models.GetOriginPoolResponse:
        """
        @summary Query a specific origin pool
        
        @param request: GetOriginPoolRequest
        @return: GetOriginPoolResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_origin_pool_with_options(request, runtime)

    async def get_origin_pool_async(
        self,
        request: esa20240910_models.GetOriginPoolRequest,
    ) -> esa20240910_models.GetOriginPoolResponse:
        """
        @summary Query a specific origin pool
        
        @param request: GetOriginPoolRequest
        @return: GetOriginPoolResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_origin_pool_with_options_async(request, runtime)

    def get_origin_protection_with_options(
        self,
        request: esa20240910_models.GetOriginProtectionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetOriginProtectionResponse:
        """
        @summary Queries the origin protection configurations of a website, including the origin protection, IP convergence, and the status and details of the IP whitelist for origin protection. The details includes the IP whitelist used by the website, the latest IP whitelist, and the differences between them.
        
        @param request: GetOriginProtectionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOriginProtectionResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetOriginProtection',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetOriginProtectionResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_origin_protection_with_options_async(
        self,
        request: esa20240910_models.GetOriginProtectionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetOriginProtectionResponse:
        """
        @summary Queries the origin protection configurations of a website, including the origin protection, IP convergence, and the status and details of the IP whitelist for origin protection. The details includes the IP whitelist used by the website, the latest IP whitelist, and the differences between them.
        
        @param request: GetOriginProtectionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOriginProtectionResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetOriginProtection',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetOriginProtectionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_origin_protection(
        self,
        request: esa20240910_models.GetOriginProtectionRequest,
    ) -> esa20240910_models.GetOriginProtectionResponse:
        """
        @summary Queries the origin protection configurations of a website, including the origin protection, IP convergence, and the status and details of the IP whitelist for origin protection. The details includes the IP whitelist used by the website, the latest IP whitelist, and the differences between them.
        
        @param request: GetOriginProtectionRequest
        @return: GetOriginProtectionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_origin_protection_with_options(request, runtime)

    async def get_origin_protection_async(
        self,
        request: esa20240910_models.GetOriginProtectionRequest,
    ) -> esa20240910_models.GetOriginProtectionResponse:
        """
        @summary Queries the origin protection configurations of a website, including the origin protection, IP convergence, and the status and details of the IP whitelist for origin protection. The details includes the IP whitelist used by the website, the latest IP whitelist, and the differences between them.
        
        @param request: GetOriginProtectionRequest
        @return: GetOriginProtectionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_origin_protection_with_options_async(request, runtime)

    def get_origin_rule_with_options(
        self,
        request: esa20240910_models.GetOriginRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetOriginRuleResponse:
        """
        @summary Query a Single Origin Rule Configuration
        
        @param request: GetOriginRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOriginRuleResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetOriginRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetOriginRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_origin_rule_with_options_async(
        self,
        request: esa20240910_models.GetOriginRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetOriginRuleResponse:
        """
        @summary Query a Single Origin Rule Configuration
        
        @param request: GetOriginRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOriginRuleResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetOriginRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetOriginRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_origin_rule(
        self,
        request: esa20240910_models.GetOriginRuleRequest,
    ) -> esa20240910_models.GetOriginRuleResponse:
        """
        @summary Query a Single Origin Rule Configuration
        
        @param request: GetOriginRuleRequest
        @return: GetOriginRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_origin_rule_with_options(request, runtime)

    async def get_origin_rule_async(
        self,
        request: esa20240910_models.GetOriginRuleRequest,
    ) -> esa20240910_models.GetOriginRuleResponse:
        """
        @summary Query a Single Origin Rule Configuration
        
        @param request: GetOriginRuleRequest
        @return: GetOriginRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_origin_rule_with_options_async(request, runtime)

    def get_page_with_options(
        self,
        request: esa20240910_models.GetPageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetPageResponse:
        """
        @summary Queries the details of a custom error page based on the error page ID.
        
        @param request: GetPageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetPageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetPage',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetPageResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_page_with_options_async(
        self,
        request: esa20240910_models.GetPageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetPageResponse:
        """
        @summary Queries the details of a custom error page based on the error page ID.
        
        @param request: GetPageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetPageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetPage',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetPageResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_page(
        self,
        request: esa20240910_models.GetPageRequest,
    ) -> esa20240910_models.GetPageResponse:
        """
        @summary Queries the details of a custom error page based on the error page ID.
        
        @param request: GetPageRequest
        @return: GetPageResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_page_with_options(request, runtime)

    async def get_page_async(
        self,
        request: esa20240910_models.GetPageRequest,
    ) -> esa20240910_models.GetPageResponse:
        """
        @summary Queries the details of a custom error page based on the error page ID.
        
        @param request: GetPageRequest
        @return: GetPageResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_page_with_options_async(request, runtime)

    def get_purge_quota_with_options(
        self,
        request: esa20240910_models.GetPurgeQuotaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetPurgeQuotaResponse:
        """
        @summary Queries the quotas and quota usage for different cache purge options.
        
        @param request: GetPurgeQuotaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetPurgeQuotaResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetPurgeQuota',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetPurgeQuotaResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_purge_quota_with_options_async(
        self,
        request: esa20240910_models.GetPurgeQuotaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetPurgeQuotaResponse:
        """
        @summary Queries the quotas and quota usage for different cache purge options.
        
        @param request: GetPurgeQuotaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetPurgeQuotaResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetPurgeQuota',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetPurgeQuotaResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_purge_quota(
        self,
        request: esa20240910_models.GetPurgeQuotaRequest,
    ) -> esa20240910_models.GetPurgeQuotaResponse:
        """
        @summary Queries the quotas and quota usage for different cache purge options.
        
        @param request: GetPurgeQuotaRequest
        @return: GetPurgeQuotaResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_purge_quota_with_options(request, runtime)

    async def get_purge_quota_async(
        self,
        request: esa20240910_models.GetPurgeQuotaRequest,
    ) -> esa20240910_models.GetPurgeQuotaResponse:
        """
        @summary Queries the quotas and quota usage for different cache purge options.
        
        @param request: GetPurgeQuotaRequest
        @return: GetPurgeQuotaResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_purge_quota_with_options_async(request, runtime)

    def get_realtime_delivery_field_with_options(
        self,
        request: esa20240910_models.GetRealtimeDeliveryFieldRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetRealtimeDeliveryFieldResponse:
        """
        @summary Queries the fields in real-time logs based on the log category.
        
        @param request: GetRealtimeDeliveryFieldRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetRealtimeDeliveryFieldResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetRealtimeDeliveryField',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetRealtimeDeliveryFieldResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_realtime_delivery_field_with_options_async(
        self,
        request: esa20240910_models.GetRealtimeDeliveryFieldRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetRealtimeDeliveryFieldResponse:
        """
        @summary Queries the fields in real-time logs based on the log category.
        
        @param request: GetRealtimeDeliveryFieldRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetRealtimeDeliveryFieldResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetRealtimeDeliveryField',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetRealtimeDeliveryFieldResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_realtime_delivery_field(
        self,
        request: esa20240910_models.GetRealtimeDeliveryFieldRequest,
    ) -> esa20240910_models.GetRealtimeDeliveryFieldResponse:
        """
        @summary Queries the fields in real-time logs based on the log category.
        
        @param request: GetRealtimeDeliveryFieldRequest
        @return: GetRealtimeDeliveryFieldResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_realtime_delivery_field_with_options(request, runtime)

    async def get_realtime_delivery_field_async(
        self,
        request: esa20240910_models.GetRealtimeDeliveryFieldRequest,
    ) -> esa20240910_models.GetRealtimeDeliveryFieldResponse:
        """
        @summary Queries the fields in real-time logs based on the log category.
        
        @param request: GetRealtimeDeliveryFieldRequest
        @return: GetRealtimeDeliveryFieldResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_realtime_delivery_field_with_options_async(request, runtime)

    def get_record_with_options(
        self,
        request: esa20240910_models.GetRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetRecordResponse:
        """
        @summary Queries the configuration of a single DNS record, such as the record value, priority, and origin authentication setting (exclusive to CNAME records).
        
        @param request: GetRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetRecordResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetRecord',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetRecordResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_record_with_options_async(
        self,
        request: esa20240910_models.GetRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetRecordResponse:
        """
        @summary Queries the configuration of a single DNS record, such as the record value, priority, and origin authentication setting (exclusive to CNAME records).
        
        @param request: GetRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetRecordResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetRecord',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetRecordResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_record(
        self,
        request: esa20240910_models.GetRecordRequest,
    ) -> esa20240910_models.GetRecordResponse:
        """
        @summary Queries the configuration of a single DNS record, such as the record value, priority, and origin authentication setting (exclusive to CNAME records).
        
        @param request: GetRecordRequest
        @return: GetRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_record_with_options(request, runtime)

    async def get_record_async(
        self,
        request: esa20240910_models.GetRecordRequest,
    ) -> esa20240910_models.GetRecordResponse:
        """
        @summary Queries the configuration of a single DNS record, such as the record value, priority, and origin authentication setting (exclusive to CNAME records).
        
        @param request: GetRecordRequest
        @return: GetRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_record_with_options_async(request, runtime)

    def get_redirect_rule_with_options(
        self,
        request: esa20240910_models.GetRedirectRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetRedirectRuleResponse:
        """
        @summary Query Redirect Rule Details
        
        @param request: GetRedirectRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetRedirectRuleResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetRedirectRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetRedirectRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_redirect_rule_with_options_async(
        self,
        request: esa20240910_models.GetRedirectRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetRedirectRuleResponse:
        """
        @summary Query Redirect Rule Details
        
        @param request: GetRedirectRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetRedirectRuleResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetRedirectRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetRedirectRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_redirect_rule(
        self,
        request: esa20240910_models.GetRedirectRuleRequest,
    ) -> esa20240910_models.GetRedirectRuleResponse:
        """
        @summary Query Redirect Rule Details
        
        @param request: GetRedirectRuleRequest
        @return: GetRedirectRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_redirect_rule_with_options(request, runtime)

    async def get_redirect_rule_async(
        self,
        request: esa20240910_models.GetRedirectRuleRequest,
    ) -> esa20240910_models.GetRedirectRuleResponse:
        """
        @summary Query Redirect Rule Details
        
        @param request: GetRedirectRuleRequest
        @return: GetRedirectRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_redirect_rule_with_options_async(request, runtime)

    def get_rewrite_url_rule_with_options(
        self,
        request: esa20240910_models.GetRewriteUrlRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetRewriteUrlRuleResponse:
        """
        @summary Query details of the rewrite URL rule
        
        @param request: GetRewriteUrlRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetRewriteUrlRuleResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetRewriteUrlRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetRewriteUrlRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_rewrite_url_rule_with_options_async(
        self,
        request: esa20240910_models.GetRewriteUrlRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetRewriteUrlRuleResponse:
        """
        @summary Query details of the rewrite URL rule
        
        @param request: GetRewriteUrlRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetRewriteUrlRuleResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetRewriteUrlRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetRewriteUrlRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_rewrite_url_rule(
        self,
        request: esa20240910_models.GetRewriteUrlRuleRequest,
    ) -> esa20240910_models.GetRewriteUrlRuleResponse:
        """
        @summary Query details of the rewrite URL rule
        
        @param request: GetRewriteUrlRuleRequest
        @return: GetRewriteUrlRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_rewrite_url_rule_with_options(request, runtime)

    async def get_rewrite_url_rule_async(
        self,
        request: esa20240910_models.GetRewriteUrlRuleRequest,
    ) -> esa20240910_models.GetRewriteUrlRuleResponse:
        """
        @summary Query details of the rewrite URL rule
        
        @param request: GetRewriteUrlRuleRequest
        @return: GetRewriteUrlRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_rewrite_url_rule_with_options_async(request, runtime)

    def get_routine_with_options(
        self,
        request: esa20240910_models.GetRoutineRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetRoutineResponse:
        """
        @summary Queries the configurations of a routine, including the code versions and the configurations of the environments, associated domain names, and associated routes.
        
        @param request: GetRoutineRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetRoutineResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetRoutine',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetRoutineResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_routine_with_options_async(
        self,
        request: esa20240910_models.GetRoutineRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetRoutineResponse:
        """
        @summary Queries the configurations of a routine, including the code versions and the configurations of the environments, associated domain names, and associated routes.
        
        @param request: GetRoutineRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetRoutineResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetRoutine',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetRoutineResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_routine(
        self,
        request: esa20240910_models.GetRoutineRequest,
    ) -> esa20240910_models.GetRoutineResponse:
        """
        @summary Queries the configurations of a routine, including the code versions and the configurations of the environments, associated domain names, and associated routes.
        
        @param request: GetRoutineRequest
        @return: GetRoutineResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_routine_with_options(request, runtime)

    async def get_routine_async(
        self,
        request: esa20240910_models.GetRoutineRequest,
    ) -> esa20240910_models.GetRoutineResponse:
        """
        @summary Queries the configurations of a routine, including the code versions and the configurations of the environments, associated domain names, and associated routes.
        
        @param request: GetRoutineRequest
        @return: GetRoutineResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_routine_with_options_async(request, runtime)

    def get_routine_route_with_options(
        self,
        request: esa20240910_models.GetRoutineRouteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetRoutineRouteResponse:
        """
        @summary 查询单条边缘函数路由配置
        
        @param request: GetRoutineRouteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetRoutineRouteResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetRoutineRoute',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetRoutineRouteResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_routine_route_with_options_async(
        self,
        request: esa20240910_models.GetRoutineRouteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetRoutineRouteResponse:
        """
        @summary 查询单条边缘函数路由配置
        
        @param request: GetRoutineRouteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetRoutineRouteResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetRoutineRoute',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetRoutineRouteResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_routine_route(
        self,
        request: esa20240910_models.GetRoutineRouteRequest,
    ) -> esa20240910_models.GetRoutineRouteResponse:
        """
        @summary 查询单条边缘函数路由配置
        
        @param request: GetRoutineRouteRequest
        @return: GetRoutineRouteResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_routine_route_with_options(request, runtime)

    async def get_routine_route_async(
        self,
        request: esa20240910_models.GetRoutineRouteRequest,
    ) -> esa20240910_models.GetRoutineRouteResponse:
        """
        @summary 查询单条边缘函数路由配置
        
        @param request: GetRoutineRouteRequest
        @return: GetRoutineRouteResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_routine_route_with_options_async(request, runtime)

    def get_routine_staging_code_upload_info_with_options(
        self,
        request: esa20240910_models.GetRoutineStagingCodeUploadInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetRoutineStagingCodeUploadInfoResponse:
        """
        @summary Obtains the release information about the routine code that is released to the staging environment. This information can be used to upload the test code to Object Storage Service (OSS).
        
        @description    Every time the code of a routine is released to the staging environment, a version number is generated. Such code is for tests only.
        A routine can retain a maximum of 10 code versions. If the number of versions reaches the limit, you must call the DeleteRoutineCodeRevision operation to delete unwanted versions.
        
        @param request: GetRoutineStagingCodeUploadInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetRoutineStagingCodeUploadInfoResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.code_description):
            body['CodeDescription'] = request.code_description
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetRoutineStagingCodeUploadInfo',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetRoutineStagingCodeUploadInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_routine_staging_code_upload_info_with_options_async(
        self,
        request: esa20240910_models.GetRoutineStagingCodeUploadInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetRoutineStagingCodeUploadInfoResponse:
        """
        @summary Obtains the release information about the routine code that is released to the staging environment. This information can be used to upload the test code to Object Storage Service (OSS).
        
        @description    Every time the code of a routine is released to the staging environment, a version number is generated. Such code is for tests only.
        A routine can retain a maximum of 10 code versions. If the number of versions reaches the limit, you must call the DeleteRoutineCodeRevision operation to delete unwanted versions.
        
        @param request: GetRoutineStagingCodeUploadInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetRoutineStagingCodeUploadInfoResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.code_description):
            body['CodeDescription'] = request.code_description
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetRoutineStagingCodeUploadInfo',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetRoutineStagingCodeUploadInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_routine_staging_code_upload_info(
        self,
        request: esa20240910_models.GetRoutineStagingCodeUploadInfoRequest,
    ) -> esa20240910_models.GetRoutineStagingCodeUploadInfoResponse:
        """
        @summary Obtains the release information about the routine code that is released to the staging environment. This information can be used to upload the test code to Object Storage Service (OSS).
        
        @description    Every time the code of a routine is released to the staging environment, a version number is generated. Such code is for tests only.
        A routine can retain a maximum of 10 code versions. If the number of versions reaches the limit, you must call the DeleteRoutineCodeRevision operation to delete unwanted versions.
        
        @param request: GetRoutineStagingCodeUploadInfoRequest
        @return: GetRoutineStagingCodeUploadInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_routine_staging_code_upload_info_with_options(request, runtime)

    async def get_routine_staging_code_upload_info_async(
        self,
        request: esa20240910_models.GetRoutineStagingCodeUploadInfoRequest,
    ) -> esa20240910_models.GetRoutineStagingCodeUploadInfoResponse:
        """
        @summary Obtains the release information about the routine code that is released to the staging environment. This information can be used to upload the test code to Object Storage Service (OSS).
        
        @description    Every time the code of a routine is released to the staging environment, a version number is generated. Such code is for tests only.
        A routine can retain a maximum of 10 code versions. If the number of versions reaches the limit, you must call the DeleteRoutineCodeRevision operation to delete unwanted versions.
        
        @param request: GetRoutineStagingCodeUploadInfoRequest
        @return: GetRoutineStagingCodeUploadInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_routine_staging_code_upload_info_with_options_async(request, runtime)

    def get_routine_staging_env_ip_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetRoutineStagingEnvIpResponse:
        """
        @summary Queries the IP addresses of staging environments for Edge Routine.
        
        @param request: GetRoutineStagingEnvIpRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetRoutineStagingEnvIpResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetRoutineStagingEnvIp',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetRoutineStagingEnvIpResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_routine_staging_env_ip_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetRoutineStagingEnvIpResponse:
        """
        @summary Queries the IP addresses of staging environments for Edge Routine.
        
        @param request: GetRoutineStagingEnvIpRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetRoutineStagingEnvIpResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetRoutineStagingEnvIp',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetRoutineStagingEnvIpResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_routine_staging_env_ip(self) -> esa20240910_models.GetRoutineStagingEnvIpResponse:
        """
        @summary Queries the IP addresses of staging environments for Edge Routine.
        
        @return: GetRoutineStagingEnvIpResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_routine_staging_env_ip_with_options(runtime)

    async def get_routine_staging_env_ip_async(self) -> esa20240910_models.GetRoutineStagingEnvIpResponse:
        """
        @summary Queries the IP addresses of staging environments for Edge Routine.
        
        @return: GetRoutineStagingEnvIpResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_routine_staging_env_ip_with_options_async(runtime)

    def get_routine_user_info_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetRoutineUserInfoResponse:
        """
        @summary Queries the Edge Routine information in your Alibaba Cloud account, including the associated subdomain and created routines.
        
        @param request: GetRoutineUserInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetRoutineUserInfoResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetRoutineUserInfo',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetRoutineUserInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_routine_user_info_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetRoutineUserInfoResponse:
        """
        @summary Queries the Edge Routine information in your Alibaba Cloud account, including the associated subdomain and created routines.
        
        @param request: GetRoutineUserInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetRoutineUserInfoResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetRoutineUserInfo',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetRoutineUserInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_routine_user_info(self) -> esa20240910_models.GetRoutineUserInfoResponse:
        """
        @summary Queries the Edge Routine information in your Alibaba Cloud account, including the associated subdomain and created routines.
        
        @return: GetRoutineUserInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_routine_user_info_with_options(runtime)

    async def get_routine_user_info_async(self) -> esa20240910_models.GetRoutineUserInfoResponse:
        """
        @summary Queries the Edge Routine information in your Alibaba Cloud account, including the associated subdomain and created routines.
        
        @return: GetRoutineUserInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_routine_user_info_with_options_async(runtime)

    def get_scheduled_preload_job_with_options(
        self,
        request: esa20240910_models.GetScheduledPreloadJobRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetScheduledPreloadJobResponse:
        """
        @summary Queries a specified scheduled prefetch task based on the task ID.
        
        @param request: GetScheduledPreloadJobRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetScheduledPreloadJobResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetScheduledPreloadJob',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetScheduledPreloadJobResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_scheduled_preload_job_with_options_async(
        self,
        request: esa20240910_models.GetScheduledPreloadJobRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetScheduledPreloadJobResponse:
        """
        @summary Queries a specified scheduled prefetch task based on the task ID.
        
        @param request: GetScheduledPreloadJobRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetScheduledPreloadJobResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetScheduledPreloadJob',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetScheduledPreloadJobResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_scheduled_preload_job(
        self,
        request: esa20240910_models.GetScheduledPreloadJobRequest,
    ) -> esa20240910_models.GetScheduledPreloadJobResponse:
        """
        @summary Queries a specified scheduled prefetch task based on the task ID.
        
        @param request: GetScheduledPreloadJobRequest
        @return: GetScheduledPreloadJobResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_scheduled_preload_job_with_options(request, runtime)

    async def get_scheduled_preload_job_async(
        self,
        request: esa20240910_models.GetScheduledPreloadJobRequest,
    ) -> esa20240910_models.GetScheduledPreloadJobResponse:
        """
        @summary Queries a specified scheduled prefetch task based on the task ID.
        
        @param request: GetScheduledPreloadJobRequest
        @return: GetScheduledPreloadJobResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_scheduled_preload_job_with_options_async(request, runtime)

    def get_seo_bypass_with_options(
        self,
        request: esa20240910_models.GetSeoBypassRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetSeoBypassResponse:
        """
        @summary Queries the configuration for search engine crawler of a website.
        
        @param request: GetSeoBypassRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSeoBypassResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetSeoBypass',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetSeoBypassResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_seo_bypass_with_options_async(
        self,
        request: esa20240910_models.GetSeoBypassRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetSeoBypassResponse:
        """
        @summary Queries the configuration for search engine crawler of a website.
        
        @param request: GetSeoBypassRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSeoBypassResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetSeoBypass',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetSeoBypassResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_seo_bypass(
        self,
        request: esa20240910_models.GetSeoBypassRequest,
    ) -> esa20240910_models.GetSeoBypassResponse:
        """
        @summary Queries the configuration for search engine crawler of a website.
        
        @param request: GetSeoBypassRequest
        @return: GetSeoBypassResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_seo_bypass_with_options(request, runtime)

    async def get_seo_bypass_async(
        self,
        request: esa20240910_models.GetSeoBypassRequest,
    ) -> esa20240910_models.GetSeoBypassResponse:
        """
        @summary Queries the configuration for search engine crawler of a website.
        
        @param request: GetSeoBypassRequest
        @return: GetSeoBypassResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_seo_bypass_with_options_async(request, runtime)

    def get_site_with_options(
        self,
        request: esa20240910_models.GetSiteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetSiteResponse:
        """
        @summary Queries information about a website based on the website ID.
        
        @param request: GetSiteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSiteResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetSite',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetSiteResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_site_with_options_async(
        self,
        request: esa20240910_models.GetSiteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetSiteResponse:
        """
        @summary Queries information about a website based on the website ID.
        
        @param request: GetSiteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSiteResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetSite',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetSiteResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_site(
        self,
        request: esa20240910_models.GetSiteRequest,
    ) -> esa20240910_models.GetSiteResponse:
        """
        @summary Queries information about a website based on the website ID.
        
        @param request: GetSiteRequest
        @return: GetSiteResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_site_with_options(request, runtime)

    async def get_site_async(
        self,
        request: esa20240910_models.GetSiteRequest,
    ) -> esa20240910_models.GetSiteResponse:
        """
        @summary Queries information about a website based on the website ID.
        
        @param request: GetSiteRequest
        @return: GetSiteResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_site_with_options_async(request, runtime)

    def get_site_current_nswith_options(
        self,
        request: esa20240910_models.GetSiteCurrentNSRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetSiteCurrentNSResponse:
        """
        @summary Queries the nameservers configured for a website.
        
        @param request: GetSiteCurrentNSRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSiteCurrentNSResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetSiteCurrentNS',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetSiteCurrentNSResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_site_current_nswith_options_async(
        self,
        request: esa20240910_models.GetSiteCurrentNSRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetSiteCurrentNSResponse:
        """
        @summary Queries the nameservers configured for a website.
        
        @param request: GetSiteCurrentNSRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSiteCurrentNSResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetSiteCurrentNS',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetSiteCurrentNSResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_site_current_ns(
        self,
        request: esa20240910_models.GetSiteCurrentNSRequest,
    ) -> esa20240910_models.GetSiteCurrentNSResponse:
        """
        @summary Queries the nameservers configured for a website.
        
        @param request: GetSiteCurrentNSRequest
        @return: GetSiteCurrentNSResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_site_current_nswith_options(request, runtime)

    async def get_site_current_ns_async(
        self,
        request: esa20240910_models.GetSiteCurrentNSRequest,
    ) -> esa20240910_models.GetSiteCurrentNSResponse:
        """
        @summary Queries the nameservers configured for a website.
        
        @param request: GetSiteCurrentNSRequest
        @return: GetSiteCurrentNSResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_site_current_nswith_options_async(request, runtime)

    def get_site_custom_log_with_options(
        self,
        request: esa20240910_models.GetSiteCustomLogRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetSiteCustomLogResponse:
        """
        @summary Queries the configuration of custom log fields for a website.
        
        @description    **Description**: You can call this operation to query the configuration of custom log fields for a website, including custom fields in request headers, response headers, and cookies.
        **Scenarios**: You can call this operation in scenarios where you need to obtain specific HTTP headers or cookie information for log analysis.
        ****\
        
        @param request: GetSiteCustomLogRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSiteCustomLogResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetSiteCustomLog',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetSiteCustomLogResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_site_custom_log_with_options_async(
        self,
        request: esa20240910_models.GetSiteCustomLogRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetSiteCustomLogResponse:
        """
        @summary Queries the configuration of custom log fields for a website.
        
        @description    **Description**: You can call this operation to query the configuration of custom log fields for a website, including custom fields in request headers, response headers, and cookies.
        **Scenarios**: You can call this operation in scenarios where you need to obtain specific HTTP headers or cookie information for log analysis.
        ****\
        
        @param request: GetSiteCustomLogRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSiteCustomLogResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetSiteCustomLog',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetSiteCustomLogResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_site_custom_log(
        self,
        request: esa20240910_models.GetSiteCustomLogRequest,
    ) -> esa20240910_models.GetSiteCustomLogResponse:
        """
        @summary Queries the configuration of custom log fields for a website.
        
        @description    **Description**: You can call this operation to query the configuration of custom log fields for a website, including custom fields in request headers, response headers, and cookies.
        **Scenarios**: You can call this operation in scenarios where you need to obtain specific HTTP headers or cookie information for log analysis.
        ****\
        
        @param request: GetSiteCustomLogRequest
        @return: GetSiteCustomLogResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_site_custom_log_with_options(request, runtime)

    async def get_site_custom_log_async(
        self,
        request: esa20240910_models.GetSiteCustomLogRequest,
    ) -> esa20240910_models.GetSiteCustomLogResponse:
        """
        @summary Queries the configuration of custom log fields for a website.
        
        @description    **Description**: You can call this operation to query the configuration of custom log fields for a website, including custom fields in request headers, response headers, and cookies.
        **Scenarios**: You can call this operation in scenarios where you need to obtain specific HTTP headers or cookie information for log analysis.
        ****\
        
        @param request: GetSiteCustomLogRequest
        @return: GetSiteCustomLogResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_site_custom_log_with_options_async(request, runtime)

    def get_site_delivery_task_with_options(
        self,
        request: esa20240910_models.GetSiteDeliveryTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetSiteDeliveryTaskResponse:
        """
        @summary Queries a real-time log delivery task.
        
        @param request: GetSiteDeliveryTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSiteDeliveryTaskResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetSiteDeliveryTask',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetSiteDeliveryTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_site_delivery_task_with_options_async(
        self,
        request: esa20240910_models.GetSiteDeliveryTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetSiteDeliveryTaskResponse:
        """
        @summary Queries a real-time log delivery task.
        
        @param request: GetSiteDeliveryTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSiteDeliveryTaskResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetSiteDeliveryTask',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetSiteDeliveryTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_site_delivery_task(
        self,
        request: esa20240910_models.GetSiteDeliveryTaskRequest,
    ) -> esa20240910_models.GetSiteDeliveryTaskResponse:
        """
        @summary Queries a real-time log delivery task.
        
        @param request: GetSiteDeliveryTaskRequest
        @return: GetSiteDeliveryTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_site_delivery_task_with_options(request, runtime)

    async def get_site_delivery_task_async(
        self,
        request: esa20240910_models.GetSiteDeliveryTaskRequest,
    ) -> esa20240910_models.GetSiteDeliveryTaskResponse:
        """
        @summary Queries a real-time log delivery task.
        
        @param request: GetSiteDeliveryTaskRequest
        @return: GetSiteDeliveryTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_site_delivery_task_with_options_async(request, runtime)

    def get_site_log_delivery_quota_with_options(
        self,
        request: esa20240910_models.GetSiteLogDeliveryQuotaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetSiteLogDeliveryQuotaResponse:
        """
        @summary Queries the remaining quota for delivering a specific category of real-time logs in a website.
        
        @description You can call this operation to query the remaining quota for delivering a specific category of real-time logs in a website within an Alibaba Cloud account. This is essential for monitoring and managing your log delivery capacity to ensure that logs can be delivered to the destination and prevent data loss or latency caused by insufficient quota.
        *Take note of the following parameters:**\
        ``
        `BusinessType` is required. You must specify a log category to obtain the corresponding quota information.
        `SiteId` specifies the ID of a website, which must be a valid integer that corresponds to a website that you configured on Alibaba Cloud.
        *Response:**\
        If a request is successful, the system returns the remaining log delivery quota (`FreeQuota`), request ID (`RequestId`), website ID (`SiteId`), and log category (`BusinessType`). You can confirm and record the returned data.
        
        @param request: GetSiteLogDeliveryQuotaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSiteLogDeliveryQuotaResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetSiteLogDeliveryQuota',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetSiteLogDeliveryQuotaResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_site_log_delivery_quota_with_options_async(
        self,
        request: esa20240910_models.GetSiteLogDeliveryQuotaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetSiteLogDeliveryQuotaResponse:
        """
        @summary Queries the remaining quota for delivering a specific category of real-time logs in a website.
        
        @description You can call this operation to query the remaining quota for delivering a specific category of real-time logs in a website within an Alibaba Cloud account. This is essential for monitoring and managing your log delivery capacity to ensure that logs can be delivered to the destination and prevent data loss or latency caused by insufficient quota.
        *Take note of the following parameters:**\
        ``
        `BusinessType` is required. You must specify a log category to obtain the corresponding quota information.
        `SiteId` specifies the ID of a website, which must be a valid integer that corresponds to a website that you configured on Alibaba Cloud.
        *Response:**\
        If a request is successful, the system returns the remaining log delivery quota (`FreeQuota`), request ID (`RequestId`), website ID (`SiteId`), and log category (`BusinessType`). You can confirm and record the returned data.
        
        @param request: GetSiteLogDeliveryQuotaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSiteLogDeliveryQuotaResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetSiteLogDeliveryQuota',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetSiteLogDeliveryQuotaResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_site_log_delivery_quota(
        self,
        request: esa20240910_models.GetSiteLogDeliveryQuotaRequest,
    ) -> esa20240910_models.GetSiteLogDeliveryQuotaResponse:
        """
        @summary Queries the remaining quota for delivering a specific category of real-time logs in a website.
        
        @description You can call this operation to query the remaining quota for delivering a specific category of real-time logs in a website within an Alibaba Cloud account. This is essential for monitoring and managing your log delivery capacity to ensure that logs can be delivered to the destination and prevent data loss or latency caused by insufficient quota.
        *Take note of the following parameters:**\
        ``
        `BusinessType` is required. You must specify a log category to obtain the corresponding quota information.
        `SiteId` specifies the ID of a website, which must be a valid integer that corresponds to a website that you configured on Alibaba Cloud.
        *Response:**\
        If a request is successful, the system returns the remaining log delivery quota (`FreeQuota`), request ID (`RequestId`), website ID (`SiteId`), and log category (`BusinessType`). You can confirm and record the returned data.
        
        @param request: GetSiteLogDeliveryQuotaRequest
        @return: GetSiteLogDeliveryQuotaResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_site_log_delivery_quota_with_options(request, runtime)

    async def get_site_log_delivery_quota_async(
        self,
        request: esa20240910_models.GetSiteLogDeliveryQuotaRequest,
    ) -> esa20240910_models.GetSiteLogDeliveryQuotaResponse:
        """
        @summary Queries the remaining quota for delivering a specific category of real-time logs in a website.
        
        @description You can call this operation to query the remaining quota for delivering a specific category of real-time logs in a website within an Alibaba Cloud account. This is essential for monitoring and managing your log delivery capacity to ensure that logs can be delivered to the destination and prevent data loss or latency caused by insufficient quota.
        *Take note of the following parameters:**\
        ``
        `BusinessType` is required. You must specify a log category to obtain the corresponding quota information.
        `SiteId` specifies the ID of a website, which must be a valid integer that corresponds to a website that you configured on Alibaba Cloud.
        *Response:**\
        If a request is successful, the system returns the remaining log delivery quota (`FreeQuota`), request ID (`RequestId`), website ID (`SiteId`), and log category (`BusinessType`). You can confirm and record the returned data.
        
        @param request: GetSiteLogDeliveryQuotaRequest
        @return: GetSiteLogDeliveryQuotaResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_site_log_delivery_quota_with_options_async(request, runtime)

    def get_site_name_exclusive_with_options(
        self,
        request: esa20240910_models.GetSiteNameExclusiveRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetSiteNameExclusiveResponse:
        """
        @summary Queries the site hold configuration of a website. After you enable site hold, other accounts cannot add your website domain or its subdomains to ESA.
        
        @param request: GetSiteNameExclusiveRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSiteNameExclusiveResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetSiteNameExclusive',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetSiteNameExclusiveResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_site_name_exclusive_with_options_async(
        self,
        request: esa20240910_models.GetSiteNameExclusiveRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetSiteNameExclusiveResponse:
        """
        @summary Queries the site hold configuration of a website. After you enable site hold, other accounts cannot add your website domain or its subdomains to ESA.
        
        @param request: GetSiteNameExclusiveRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSiteNameExclusiveResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetSiteNameExclusive',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetSiteNameExclusiveResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_site_name_exclusive(
        self,
        request: esa20240910_models.GetSiteNameExclusiveRequest,
    ) -> esa20240910_models.GetSiteNameExclusiveResponse:
        """
        @summary Queries the site hold configuration of a website. After you enable site hold, other accounts cannot add your website domain or its subdomains to ESA.
        
        @param request: GetSiteNameExclusiveRequest
        @return: GetSiteNameExclusiveResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_site_name_exclusive_with_options(request, runtime)

    async def get_site_name_exclusive_async(
        self,
        request: esa20240910_models.GetSiteNameExclusiveRequest,
    ) -> esa20240910_models.GetSiteNameExclusiveResponse:
        """
        @summary Queries the site hold configuration of a website. After you enable site hold, other accounts cannot add your website domain or its subdomains to ESA.
        
        @param request: GetSiteNameExclusiveRequest
        @return: GetSiteNameExclusiveResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_site_name_exclusive_with_options_async(request, runtime)

    def get_site_origin_client_certificate_with_options(
        self,
        request: esa20240910_models.GetSiteOriginClientCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetSiteOriginClientCertificateResponse:
        """
        @summary 获取站点回源客户端证书信息
        
        @param request: GetSiteOriginClientCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSiteOriginClientCertificateResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetSiteOriginClientCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetSiteOriginClientCertificateResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_site_origin_client_certificate_with_options_async(
        self,
        request: esa20240910_models.GetSiteOriginClientCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetSiteOriginClientCertificateResponse:
        """
        @summary 获取站点回源客户端证书信息
        
        @param request: GetSiteOriginClientCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSiteOriginClientCertificateResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetSiteOriginClientCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetSiteOriginClientCertificateResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_site_origin_client_certificate(
        self,
        request: esa20240910_models.GetSiteOriginClientCertificateRequest,
    ) -> esa20240910_models.GetSiteOriginClientCertificateResponse:
        """
        @summary 获取站点回源客户端证书信息
        
        @param request: GetSiteOriginClientCertificateRequest
        @return: GetSiteOriginClientCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_site_origin_client_certificate_with_options(request, runtime)

    async def get_site_origin_client_certificate_async(
        self,
        request: esa20240910_models.GetSiteOriginClientCertificateRequest,
    ) -> esa20240910_models.GetSiteOriginClientCertificateResponse:
        """
        @summary 获取站点回源客户端证书信息
        
        @param request: GetSiteOriginClientCertificateRequest
        @return: GetSiteOriginClientCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_site_origin_client_certificate_with_options_async(request, runtime)

    def get_site_pause_with_options(
        self,
        request: esa20240910_models.GetSitePauseRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetSitePauseResponse:
        """
        @summary Queries the ESA proxy configuration of a website.
        
        @param request: GetSitePauseRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSitePauseResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetSitePause',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetSitePauseResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_site_pause_with_options_async(
        self,
        request: esa20240910_models.GetSitePauseRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetSitePauseResponse:
        """
        @summary Queries the ESA proxy configuration of a website.
        
        @param request: GetSitePauseRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSitePauseResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetSitePause',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetSitePauseResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_site_pause(
        self,
        request: esa20240910_models.GetSitePauseRequest,
    ) -> esa20240910_models.GetSitePauseResponse:
        """
        @summary Queries the ESA proxy configuration of a website.
        
        @param request: GetSitePauseRequest
        @return: GetSitePauseResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_site_pause_with_options(request, runtime)

    async def get_site_pause_async(
        self,
        request: esa20240910_models.GetSitePauseRequest,
    ) -> esa20240910_models.GetSitePauseResponse:
        """
        @summary Queries the ESA proxy configuration of a website.
        
        @param request: GetSitePauseRequest
        @return: GetSitePauseResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_site_pause_with_options_async(request, runtime)

    def get_site_waf_settings_with_options(
        self,
        request: esa20240910_models.GetSiteWafSettingsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetSiteWafSettingsResponse:
        """
        @summary Get WAF Configuration for a Site
        
        @param request: GetSiteWafSettingsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSiteWafSettingsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.path):
            query['Path'] = request.path
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetSiteWafSettings',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetSiteWafSettingsResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_site_waf_settings_with_options_async(
        self,
        request: esa20240910_models.GetSiteWafSettingsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetSiteWafSettingsResponse:
        """
        @summary Get WAF Configuration for a Site
        
        @param request: GetSiteWafSettingsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSiteWafSettingsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.path):
            query['Path'] = request.path
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetSiteWafSettings',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetSiteWafSettingsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_site_waf_settings(
        self,
        request: esa20240910_models.GetSiteWafSettingsRequest,
    ) -> esa20240910_models.GetSiteWafSettingsResponse:
        """
        @summary Get WAF Configuration for a Site
        
        @param request: GetSiteWafSettingsRequest
        @return: GetSiteWafSettingsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_site_waf_settings_with_options(request, runtime)

    async def get_site_waf_settings_async(
        self,
        request: esa20240910_models.GetSiteWafSettingsRequest,
    ) -> esa20240910_models.GetSiteWafSettingsResponse:
        """
        @summary Get WAF Configuration for a Site
        
        @param request: GetSiteWafSettingsRequest
        @return: GetSiteWafSettingsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_site_waf_settings_with_options_async(request, runtime)

    def get_tiered_cache_with_options(
        self,
        request: esa20240910_models.GetTieredCacheRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetTieredCacheResponse:
        """
        @summary Query Multi-level Cache Configuration for Site
        
        @param request: GetTieredCacheRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetTieredCacheResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetTieredCache',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetTieredCacheResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_tiered_cache_with_options_async(
        self,
        request: esa20240910_models.GetTieredCacheRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetTieredCacheResponse:
        """
        @summary Query Multi-level Cache Configuration for Site
        
        @param request: GetTieredCacheRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetTieredCacheResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetTieredCache',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetTieredCacheResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_tiered_cache(
        self,
        request: esa20240910_models.GetTieredCacheRequest,
    ) -> esa20240910_models.GetTieredCacheResponse:
        """
        @summary Query Multi-level Cache Configuration for Site
        
        @param request: GetTieredCacheRequest
        @return: GetTieredCacheResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_tiered_cache_with_options(request, runtime)

    async def get_tiered_cache_async(
        self,
        request: esa20240910_models.GetTieredCacheRequest,
    ) -> esa20240910_models.GetTieredCacheResponse:
        """
        @summary Query Multi-level Cache Configuration for Site
        
        @param request: GetTieredCacheRequest
        @return: GetTieredCacheResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_tiered_cache_with_options_async(request, runtime)

    def get_transport_layer_application_with_options(
        self,
        request: esa20240910_models.GetTransportLayerApplicationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetTransportLayerApplicationResponse:
        """
        @summary Query details of the transport layer application
        
        @param request: GetTransportLayerApplicationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetTransportLayerApplicationResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetTransportLayerApplication',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetTransportLayerApplicationResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_transport_layer_application_with_options_async(
        self,
        request: esa20240910_models.GetTransportLayerApplicationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetTransportLayerApplicationResponse:
        """
        @summary Query details of the transport layer application
        
        @param request: GetTransportLayerApplicationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetTransportLayerApplicationResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetTransportLayerApplication',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetTransportLayerApplicationResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_transport_layer_application(
        self,
        request: esa20240910_models.GetTransportLayerApplicationRequest,
    ) -> esa20240910_models.GetTransportLayerApplicationResponse:
        """
        @summary Query details of the transport layer application
        
        @param request: GetTransportLayerApplicationRequest
        @return: GetTransportLayerApplicationResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_transport_layer_application_with_options(request, runtime)

    async def get_transport_layer_application_async(
        self,
        request: esa20240910_models.GetTransportLayerApplicationRequest,
    ) -> esa20240910_models.GetTransportLayerApplicationResponse:
        """
        @summary Query details of the transport layer application
        
        @param request: GetTransportLayerApplicationRequest
        @return: GetTransportLayerApplicationResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_transport_layer_application_with_options_async(request, runtime)

    def get_upload_task_with_options(
        self,
        request: esa20240910_models.GetUploadTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetUploadTaskResponse:
        """
        @summary Queries the execution status and running information of a file upload task based on the task ID.
        
        @param request: GetUploadTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetUploadTaskResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetUploadTask',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetUploadTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_upload_task_with_options_async(
        self,
        request: esa20240910_models.GetUploadTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetUploadTaskResponse:
        """
        @summary Queries the execution status and running information of a file upload task based on the task ID.
        
        @param request: GetUploadTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetUploadTaskResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetUploadTask',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetUploadTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_upload_task(
        self,
        request: esa20240910_models.GetUploadTaskRequest,
    ) -> esa20240910_models.GetUploadTaskResponse:
        """
        @summary Queries the execution status and running information of a file upload task based on the task ID.
        
        @param request: GetUploadTaskRequest
        @return: GetUploadTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_upload_task_with_options(request, runtime)

    async def get_upload_task_async(
        self,
        request: esa20240910_models.GetUploadTaskRequest,
    ) -> esa20240910_models.GetUploadTaskResponse:
        """
        @summary Queries the execution status and running information of a file upload task based on the task ID.
        
        @param request: GetUploadTaskRequest
        @return: GetUploadTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_upload_task_with_options_async(request, runtime)

    def get_user_delivery_task_with_options(
        self,
        request: esa20240910_models.GetUserDeliveryTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetUserDeliveryTaskResponse:
        """
        @summary Queries the information about a log delivery task by account.
        
        @description    This API operation queries the details of a delivery task, including the task name, discard rate, region, log category, status, delivery destination, configuration, and filtering rules.****\
        You can call this operation to query detailed information about a log delivery task to analyze log processing efficiency or troubleshoot delivery problems.****\
        ****````
        
        @param request: GetUserDeliveryTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetUserDeliveryTaskResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetUserDeliveryTask',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetUserDeliveryTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_user_delivery_task_with_options_async(
        self,
        request: esa20240910_models.GetUserDeliveryTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetUserDeliveryTaskResponse:
        """
        @summary Queries the information about a log delivery task by account.
        
        @description    This API operation queries the details of a delivery task, including the task name, discard rate, region, log category, status, delivery destination, configuration, and filtering rules.****\
        You can call this operation to query detailed information about a log delivery task to analyze log processing efficiency or troubleshoot delivery problems.****\
        ****````
        
        @param request: GetUserDeliveryTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetUserDeliveryTaskResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetUserDeliveryTask',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetUserDeliveryTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_user_delivery_task(
        self,
        request: esa20240910_models.GetUserDeliveryTaskRequest,
    ) -> esa20240910_models.GetUserDeliveryTaskResponse:
        """
        @summary Queries the information about a log delivery task by account.
        
        @description    This API operation queries the details of a delivery task, including the task name, discard rate, region, log category, status, delivery destination, configuration, and filtering rules.****\
        You can call this operation to query detailed information about a log delivery task to analyze log processing efficiency or troubleshoot delivery problems.****\
        ****````
        
        @param request: GetUserDeliveryTaskRequest
        @return: GetUserDeliveryTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_user_delivery_task_with_options(request, runtime)

    async def get_user_delivery_task_async(
        self,
        request: esa20240910_models.GetUserDeliveryTaskRequest,
    ) -> esa20240910_models.GetUserDeliveryTaskResponse:
        """
        @summary Queries the information about a log delivery task by account.
        
        @description    This API operation queries the details of a delivery task, including the task name, discard rate, region, log category, status, delivery destination, configuration, and filtering rules.****\
        You can call this operation to query detailed information about a log delivery task to analyze log processing efficiency or troubleshoot delivery problems.****\
        ****````
        
        @param request: GetUserDeliveryTaskRequest
        @return: GetUserDeliveryTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_user_delivery_task_with_options_async(request, runtime)

    def get_user_log_delivery_quota_with_options(
        self,
        request: esa20240910_models.GetUserLogDeliveryQuotaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetUserLogDeliveryQuotaResponse:
        """
        @summary Queries the remaining log delivery quota of each log category in your account.
        
        @description This operation allows you to query the remaining real-time log delivery quota of each log category in your Alibaba Cloud account. You must provide your Alibaba Cloud account ID (aliUid) and log category (BusinessType). The system then returns the remaining quota of the log category to help you track the usage.
        
        @param request: GetUserLogDeliveryQuotaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetUserLogDeliveryQuotaResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetUserLogDeliveryQuota',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetUserLogDeliveryQuotaResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_user_log_delivery_quota_with_options_async(
        self,
        request: esa20240910_models.GetUserLogDeliveryQuotaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetUserLogDeliveryQuotaResponse:
        """
        @summary Queries the remaining log delivery quota of each log category in your account.
        
        @description This operation allows you to query the remaining real-time log delivery quota of each log category in your Alibaba Cloud account. You must provide your Alibaba Cloud account ID (aliUid) and log category (BusinessType). The system then returns the remaining quota of the log category to help you track the usage.
        
        @param request: GetUserLogDeliveryQuotaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetUserLogDeliveryQuotaResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetUserLogDeliveryQuota',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetUserLogDeliveryQuotaResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_user_log_delivery_quota(
        self,
        request: esa20240910_models.GetUserLogDeliveryQuotaRequest,
    ) -> esa20240910_models.GetUserLogDeliveryQuotaResponse:
        """
        @summary Queries the remaining log delivery quota of each log category in your account.
        
        @description This operation allows you to query the remaining real-time log delivery quota of each log category in your Alibaba Cloud account. You must provide your Alibaba Cloud account ID (aliUid) and log category (BusinessType). The system then returns the remaining quota of the log category to help you track the usage.
        
        @param request: GetUserLogDeliveryQuotaRequest
        @return: GetUserLogDeliveryQuotaResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_user_log_delivery_quota_with_options(request, runtime)

    async def get_user_log_delivery_quota_async(
        self,
        request: esa20240910_models.GetUserLogDeliveryQuotaRequest,
    ) -> esa20240910_models.GetUserLogDeliveryQuotaResponse:
        """
        @summary Queries the remaining log delivery quota of each log category in your account.
        
        @description This operation allows you to query the remaining real-time log delivery quota of each log category in your Alibaba Cloud account. You must provide your Alibaba Cloud account ID (aliUid) and log category (BusinessType). The system then returns the remaining quota of the log category to help you track the usage.
        
        @param request: GetUserLogDeliveryQuotaRequest
        @return: GetUserLogDeliveryQuotaResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_user_log_delivery_quota_with_options_async(request, runtime)

    def get_video_processing_with_options(
        self,
        request: esa20240910_models.GetVideoProcessingRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetVideoProcessingResponse:
        """
        @summary 查询站点视频处理配置详情
        
        @param request: GetVideoProcessingRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetVideoProcessingResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetVideoProcessing',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetVideoProcessingResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_video_processing_with_options_async(
        self,
        request: esa20240910_models.GetVideoProcessingRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetVideoProcessingResponse:
        """
        @summary 查询站点视频处理配置详情
        
        @param request: GetVideoProcessingRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetVideoProcessingResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetVideoProcessing',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetVideoProcessingResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_video_processing(
        self,
        request: esa20240910_models.GetVideoProcessingRequest,
    ) -> esa20240910_models.GetVideoProcessingResponse:
        """
        @summary 查询站点视频处理配置详情
        
        @param request: GetVideoProcessingRequest
        @return: GetVideoProcessingResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_video_processing_with_options(request, runtime)

    async def get_video_processing_async(
        self,
        request: esa20240910_models.GetVideoProcessingRequest,
    ) -> esa20240910_models.GetVideoProcessingResponse:
        """
        @summary 查询站点视频处理配置详情
        
        @param request: GetVideoProcessingRequest
        @return: GetVideoProcessingResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_video_processing_with_options_async(request, runtime)

    def get_waf_bot_app_key_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetWafBotAppKeyResponse:
        """
        @summary This interface is used to obtain the application key (AppKey) for the BOT behavior detection feature in the site\\"s Web Application Firewall (WAF). The key is typically used for authentication and data exchange with the WAF service.
        
        @param request: GetWafBotAppKeyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetWafBotAppKeyResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetWafBotAppKey',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetWafBotAppKeyResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_waf_bot_app_key_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetWafBotAppKeyResponse:
        """
        @summary This interface is used to obtain the application key (AppKey) for the BOT behavior detection feature in the site\\"s Web Application Firewall (WAF). The key is typically used for authentication and data exchange with the WAF service.
        
        @param request: GetWafBotAppKeyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetWafBotAppKeyResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetWafBotAppKey',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetWafBotAppKeyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_waf_bot_app_key(self) -> esa20240910_models.GetWafBotAppKeyResponse:
        """
        @summary This interface is used to obtain the application key (AppKey) for the BOT behavior detection feature in the site\\"s Web Application Firewall (WAF). The key is typically used for authentication and data exchange with the WAF service.
        
        @return: GetWafBotAppKeyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_waf_bot_app_key_with_options(runtime)

    async def get_waf_bot_app_key_async(self) -> esa20240910_models.GetWafBotAppKeyResponse:
        """
        @summary This interface is used to obtain the application key (AppKey) for the BOT behavior detection feature in the site\\"s Web Application Firewall (WAF). The key is typically used for authentication and data exchange with the WAF service.
        
        @return: GetWafBotAppKeyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_waf_bot_app_key_with_options_async(runtime)

    def get_waf_filter_with_options(
        self,
        request: esa20240910_models.GetWafFilterRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetWafFilterResponse:
        """
        @summary Queries the conditions for matching incoming requests that are configured in a WAF rule category for a website. These conditions define how WAF detects and processes different types of requests.
        
        @param request: GetWafFilterRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetWafFilterResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.phase):
            query['Phase'] = request.phase
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.target):
            query['Target'] = request.target
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetWafFilter',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetWafFilterResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_waf_filter_with_options_async(
        self,
        request: esa20240910_models.GetWafFilterRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetWafFilterResponse:
        """
        @summary Queries the conditions for matching incoming requests that are configured in a WAF rule category for a website. These conditions define how WAF detects and processes different types of requests.
        
        @param request: GetWafFilterRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetWafFilterResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.phase):
            query['Phase'] = request.phase
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.target):
            query['Target'] = request.target
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetWafFilter',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetWafFilterResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_waf_filter(
        self,
        request: esa20240910_models.GetWafFilterRequest,
    ) -> esa20240910_models.GetWafFilterResponse:
        """
        @summary Queries the conditions for matching incoming requests that are configured in a WAF rule category for a website. These conditions define how WAF detects and processes different types of requests.
        
        @param request: GetWafFilterRequest
        @return: GetWafFilterResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_waf_filter_with_options(request, runtime)

    async def get_waf_filter_async(
        self,
        request: esa20240910_models.GetWafFilterRequest,
    ) -> esa20240910_models.GetWafFilterResponse:
        """
        @summary Queries the conditions for matching incoming requests that are configured in a WAF rule category for a website. These conditions define how WAF detects and processes different types of requests.
        
        @param request: GetWafFilterRequest
        @return: GetWafFilterResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_waf_filter_with_options_async(request, runtime)

    def get_waf_quota_with_options(
        self,
        request: esa20240910_models.GetWafQuotaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetWafQuotaResponse:
        """
        @summary Get WAF Quota Details
        
        @param request: GetWafQuotaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetWafQuotaResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.paths):
            query['Paths'] = request.paths
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetWafQuota',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetWafQuotaResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_waf_quota_with_options_async(
        self,
        request: esa20240910_models.GetWafQuotaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetWafQuotaResponse:
        """
        @summary Get WAF Quota Details
        
        @param request: GetWafQuotaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetWafQuotaResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.paths):
            query['Paths'] = request.paths
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetWafQuota',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetWafQuotaResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_waf_quota(
        self,
        request: esa20240910_models.GetWafQuotaRequest,
    ) -> esa20240910_models.GetWafQuotaResponse:
        """
        @summary Get WAF Quota Details
        
        @param request: GetWafQuotaRequest
        @return: GetWafQuotaResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_waf_quota_with_options(request, runtime)

    async def get_waf_quota_async(
        self,
        request: esa20240910_models.GetWafQuotaRequest,
    ) -> esa20240910_models.GetWafQuotaResponse:
        """
        @summary Get WAF Quota Details
        
        @param request: GetWafQuotaRequest
        @return: GetWafQuotaResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_waf_quota_with_options_async(request, runtime)

    def get_waf_rule_with_options(
        self,
        request: esa20240910_models.GetWafRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetWafRuleResponse:
        """
        @summary Get Details of a Single WAF Rule
        
        @param request: GetWafRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetWafRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetWafRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetWafRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_waf_rule_with_options_async(
        self,
        request: esa20240910_models.GetWafRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetWafRuleResponse:
        """
        @summary Get Details of a Single WAF Rule
        
        @param request: GetWafRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetWafRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetWafRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetWafRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_waf_rule(
        self,
        request: esa20240910_models.GetWafRuleRequest,
    ) -> esa20240910_models.GetWafRuleResponse:
        """
        @summary Get Details of a Single WAF Rule
        
        @param request: GetWafRuleRequest
        @return: GetWafRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_waf_rule_with_options(request, runtime)

    async def get_waf_rule_async(
        self,
        request: esa20240910_models.GetWafRuleRequest,
    ) -> esa20240910_models.GetWafRuleResponse:
        """
        @summary Get Details of a Single WAF Rule
        
        @param request: GetWafRuleRequest
        @return: GetWafRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_waf_rule_with_options_async(request, runtime)

    def get_waf_ruleset_with_options(
        self,
        request: esa20240910_models.GetWafRulesetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetWafRulesetResponse:
        """
        @summary Get WAF Ruleset Details
        
        @param request: GetWafRulesetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetWafRulesetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.phase):
            query['Phase'] = request.phase
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetWafRuleset',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetWafRulesetResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_waf_ruleset_with_options_async(
        self,
        request: esa20240910_models.GetWafRulesetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.GetWafRulesetResponse:
        """
        @summary Get WAF Ruleset Details
        
        @param request: GetWafRulesetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetWafRulesetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.phase):
            query['Phase'] = request.phase
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetWafRuleset',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.GetWafRulesetResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_waf_ruleset(
        self,
        request: esa20240910_models.GetWafRulesetRequest,
    ) -> esa20240910_models.GetWafRulesetResponse:
        """
        @summary Get WAF Ruleset Details
        
        @param request: GetWafRulesetRequest
        @return: GetWafRulesetResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_waf_ruleset_with_options(request, runtime)

    async def get_waf_ruleset_async(
        self,
        request: esa20240910_models.GetWafRulesetRequest,
    ) -> esa20240910_models.GetWafRulesetResponse:
        """
        @summary Get WAF Ruleset Details
        
        @param request: GetWafRulesetRequest
        @return: GetWafRulesetResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_waf_ruleset_with_options_async(request, runtime)

    def list_cache_reserve_instances_with_options(
        self,
        request: esa20240910_models.ListCacheReserveInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListCacheReserveInstancesResponse:
        """
        @summary Query Cache Reserve Instance List
        
        @param request: ListCacheReserveInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCacheReserveInstancesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCacheReserveInstances',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListCacheReserveInstancesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_cache_reserve_instances_with_options_async(
        self,
        request: esa20240910_models.ListCacheReserveInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListCacheReserveInstancesResponse:
        """
        @summary Query Cache Reserve Instance List
        
        @param request: ListCacheReserveInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCacheReserveInstancesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCacheReserveInstances',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListCacheReserveInstancesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_cache_reserve_instances(
        self,
        request: esa20240910_models.ListCacheReserveInstancesRequest,
    ) -> esa20240910_models.ListCacheReserveInstancesResponse:
        """
        @summary Query Cache Reserve Instance List
        
        @param request: ListCacheReserveInstancesRequest
        @return: ListCacheReserveInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_cache_reserve_instances_with_options(request, runtime)

    async def list_cache_reserve_instances_async(
        self,
        request: esa20240910_models.ListCacheReserveInstancesRequest,
    ) -> esa20240910_models.ListCacheReserveInstancesResponse:
        """
        @summary Query Cache Reserve Instance List
        
        @param request: ListCacheReserveInstancesRequest
        @return: ListCacheReserveInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_cache_reserve_instances_with_options_async(request, runtime)

    def list_cache_rules_with_options(
        self,
        request: esa20240910_models.ListCacheRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListCacheRulesResponse:
        """
        @summary Query multiple cache configurations
        
        @param request: ListCacheRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCacheRulesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCacheRules',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListCacheRulesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_cache_rules_with_options_async(
        self,
        request: esa20240910_models.ListCacheRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListCacheRulesResponse:
        """
        @summary Query multiple cache configurations
        
        @param request: ListCacheRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCacheRulesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCacheRules',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListCacheRulesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_cache_rules(
        self,
        request: esa20240910_models.ListCacheRulesRequest,
    ) -> esa20240910_models.ListCacheRulesResponse:
        """
        @summary Query multiple cache configurations
        
        @param request: ListCacheRulesRequest
        @return: ListCacheRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_cache_rules_with_options(request, runtime)

    async def list_cache_rules_async(
        self,
        request: esa20240910_models.ListCacheRulesRequest,
    ) -> esa20240910_models.ListCacheRulesResponse:
        """
        @summary Query multiple cache configurations
        
        @param request: ListCacheRulesRequest
        @return: ListCacheRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_cache_rules_with_options_async(request, runtime)

    def list_certificates_with_options(
        self,
        request: esa20240910_models.ListCertificatesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListCertificatesResponse:
        """
        @summary Lists certificates of a website.
        
        @param request: ListCertificatesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCertificatesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCertificates',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListCertificatesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_certificates_with_options_async(
        self,
        request: esa20240910_models.ListCertificatesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListCertificatesResponse:
        """
        @summary Lists certificates of a website.
        
        @param request: ListCertificatesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCertificatesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCertificates',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListCertificatesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_certificates(
        self,
        request: esa20240910_models.ListCertificatesRequest,
    ) -> esa20240910_models.ListCertificatesResponse:
        """
        @summary Lists certificates of a website.
        
        @param request: ListCertificatesRequest
        @return: ListCertificatesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_certificates_with_options(request, runtime)

    async def list_certificates_async(
        self,
        request: esa20240910_models.ListCertificatesRequest,
    ) -> esa20240910_models.ListCertificatesResponse:
        """
        @summary Lists certificates of a website.
        
        @param request: ListCertificatesRequest
        @return: ListCertificatesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_certificates_with_options_async(request, runtime)

    def list_certificates_by_record_with_options(
        self,
        request: esa20240910_models.ListCertificatesByRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListCertificatesByRecordResponse:
        """
        @summary 查询匹配记录名的站点证书列表
        
        @param request: ListCertificatesByRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCertificatesByRecordResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCertificatesByRecord',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListCertificatesByRecordResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_certificates_by_record_with_options_async(
        self,
        request: esa20240910_models.ListCertificatesByRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListCertificatesByRecordResponse:
        """
        @summary 查询匹配记录名的站点证书列表
        
        @param request: ListCertificatesByRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCertificatesByRecordResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCertificatesByRecord',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListCertificatesByRecordResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_certificates_by_record(
        self,
        request: esa20240910_models.ListCertificatesByRecordRequest,
    ) -> esa20240910_models.ListCertificatesByRecordResponse:
        """
        @summary 查询匹配记录名的站点证书列表
        
        @param request: ListCertificatesByRecordRequest
        @return: ListCertificatesByRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_certificates_by_record_with_options(request, runtime)

    async def list_certificates_by_record_async(
        self,
        request: esa20240910_models.ListCertificatesByRecordRequest,
    ) -> esa20240910_models.ListCertificatesByRecordResponse:
        """
        @summary 查询匹配记录名的站点证书列表
        
        @param request: ListCertificatesByRecordRequest
        @return: ListCertificatesByRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_certificates_by_record_with_options_async(request, runtime)

    def list_ciphers_with_options(
        self,
        request: esa20240910_models.ListCiphersRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListCiphersResponse:
        """
        @summary Query TLS Cipher Suite List
        
        @param request: ListCiphersRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCiphersResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCiphers',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListCiphersResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_ciphers_with_options_async(
        self,
        request: esa20240910_models.ListCiphersRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListCiphersResponse:
        """
        @summary Query TLS Cipher Suite List
        
        @param request: ListCiphersRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCiphersResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCiphers',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListCiphersResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_ciphers(
        self,
        request: esa20240910_models.ListCiphersRequest,
    ) -> esa20240910_models.ListCiphersResponse:
        """
        @summary Query TLS Cipher Suite List
        
        @param request: ListCiphersRequest
        @return: ListCiphersResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_ciphers_with_options(request, runtime)

    async def list_ciphers_async(
        self,
        request: esa20240910_models.ListCiphersRequest,
    ) -> esa20240910_models.ListCiphersResponse:
        """
        @summary Query TLS Cipher Suite List
        
        @param request: ListCiphersRequest
        @return: ListCiphersResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_ciphers_with_options_async(request, runtime)

    def list_client_ca_certificates_with_options(
        self,
        request: esa20240910_models.ListClientCaCertificatesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListClientCaCertificatesResponse:
        """
        @summary Queries a list of client certificate authority (CA) certificates for a website.
        
        @param request: ListClientCaCertificatesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListClientCaCertificatesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListClientCaCertificates',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListClientCaCertificatesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_client_ca_certificates_with_options_async(
        self,
        request: esa20240910_models.ListClientCaCertificatesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListClientCaCertificatesResponse:
        """
        @summary Queries a list of client certificate authority (CA) certificates for a website.
        
        @param request: ListClientCaCertificatesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListClientCaCertificatesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListClientCaCertificates',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListClientCaCertificatesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_client_ca_certificates(
        self,
        request: esa20240910_models.ListClientCaCertificatesRequest,
    ) -> esa20240910_models.ListClientCaCertificatesResponse:
        """
        @summary Queries a list of client certificate authority (CA) certificates for a website.
        
        @param request: ListClientCaCertificatesRequest
        @return: ListClientCaCertificatesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_client_ca_certificates_with_options(request, runtime)

    async def list_client_ca_certificates_async(
        self,
        request: esa20240910_models.ListClientCaCertificatesRequest,
    ) -> esa20240910_models.ListClientCaCertificatesResponse:
        """
        @summary Queries a list of client certificate authority (CA) certificates for a website.
        
        @param request: ListClientCaCertificatesRequest
        @return: ListClientCaCertificatesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_client_ca_certificates_with_options_async(request, runtime)

    def list_client_certificates_with_options(
        self,
        request: esa20240910_models.ListClientCertificatesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListClientCertificatesResponse:
        """
        @summary Queries client certificates configured for a website.
        
        @param request: ListClientCertificatesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListClientCertificatesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListClientCertificates',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListClientCertificatesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_client_certificates_with_options_async(
        self,
        request: esa20240910_models.ListClientCertificatesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListClientCertificatesResponse:
        """
        @summary Queries client certificates configured for a website.
        
        @param request: ListClientCertificatesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListClientCertificatesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListClientCertificates',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListClientCertificatesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_client_certificates(
        self,
        request: esa20240910_models.ListClientCertificatesRequest,
    ) -> esa20240910_models.ListClientCertificatesResponse:
        """
        @summary Queries client certificates configured for a website.
        
        @param request: ListClientCertificatesRequest
        @return: ListClientCertificatesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_client_certificates_with_options(request, runtime)

    async def list_client_certificates_async(
        self,
        request: esa20240910_models.ListClientCertificatesRequest,
    ) -> esa20240910_models.ListClientCertificatesResponse:
        """
        @summary Queries client certificates configured for a website.
        
        @param request: ListClientCertificatesRequest
        @return: ListClientCertificatesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_client_certificates_with_options_async(request, runtime)

    def list_compression_rules_with_options(
        self,
        request: esa20240910_models.ListCompressionRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListCompressionRulesResponse:
        """
        @summary Query the list of compression rules
        
        @param request: ListCompressionRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCompressionRulesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCompressionRules',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListCompressionRulesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_compression_rules_with_options_async(
        self,
        request: esa20240910_models.ListCompressionRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListCompressionRulesResponse:
        """
        @summary Query the list of compression rules
        
        @param request: ListCompressionRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCompressionRulesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCompressionRules',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListCompressionRulesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_compression_rules(
        self,
        request: esa20240910_models.ListCompressionRulesRequest,
    ) -> esa20240910_models.ListCompressionRulesResponse:
        """
        @summary Query the list of compression rules
        
        @param request: ListCompressionRulesRequest
        @return: ListCompressionRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_compression_rules_with_options(request, runtime)

    async def list_compression_rules_async(
        self,
        request: esa20240910_models.ListCompressionRulesRequest,
    ) -> esa20240910_models.ListCompressionRulesResponse:
        """
        @summary Query the list of compression rules
        
        @param request: ListCompressionRulesRequest
        @return: ListCompressionRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_compression_rules_with_options_async(request, runtime)

    def list_esaipinfo_with_options(
        self,
        request: esa20240910_models.ListESAIPInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListESAIPInfoResponse:
        """
        @summary 批量查询IP是否为VIP
        
        @param request: ListESAIPInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListESAIPInfoResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListESAIPInfo',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListESAIPInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_esaipinfo_with_options_async(
        self,
        request: esa20240910_models.ListESAIPInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListESAIPInfoResponse:
        """
        @summary 批量查询IP是否为VIP
        
        @param request: ListESAIPInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListESAIPInfoResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListESAIPInfo',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListESAIPInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_esaipinfo(
        self,
        request: esa20240910_models.ListESAIPInfoRequest,
    ) -> esa20240910_models.ListESAIPInfoResponse:
        """
        @summary 批量查询IP是否为VIP
        
        @param request: ListESAIPInfoRequest
        @return: ListESAIPInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_esaipinfo_with_options(request, runtime)

    async def list_esaipinfo_async(
        self,
        request: esa20240910_models.ListESAIPInfoRequest,
    ) -> esa20240910_models.ListESAIPInfoResponse:
        """
        @summary 批量查询IP是否为VIP
        
        @param request: ListESAIPInfoRequest
        @return: ListESAIPInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_esaipinfo_with_options_async(request, runtime)

    def list_edge_container_app_records_with_options(
        self,
        request: esa20240910_models.ListEdgeContainerAppRecordsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListEdgeContainerAppRecordsResponse:
        """
        @summary Lists domain names that are associated with a containerized application.
        
        @param request: ListEdgeContainerAppRecordsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListEdgeContainerAppRecordsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListEdgeContainerAppRecords',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListEdgeContainerAppRecordsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_edge_container_app_records_with_options_async(
        self,
        request: esa20240910_models.ListEdgeContainerAppRecordsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListEdgeContainerAppRecordsResponse:
        """
        @summary Lists domain names that are associated with a containerized application.
        
        @param request: ListEdgeContainerAppRecordsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListEdgeContainerAppRecordsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListEdgeContainerAppRecords',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListEdgeContainerAppRecordsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_edge_container_app_records(
        self,
        request: esa20240910_models.ListEdgeContainerAppRecordsRequest,
    ) -> esa20240910_models.ListEdgeContainerAppRecordsResponse:
        """
        @summary Lists domain names that are associated with a containerized application.
        
        @param request: ListEdgeContainerAppRecordsRequest
        @return: ListEdgeContainerAppRecordsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_edge_container_app_records_with_options(request, runtime)

    async def list_edge_container_app_records_async(
        self,
        request: esa20240910_models.ListEdgeContainerAppRecordsRequest,
    ) -> esa20240910_models.ListEdgeContainerAppRecordsResponse:
        """
        @summary Lists domain names that are associated with a containerized application.
        
        @param request: ListEdgeContainerAppRecordsRequest
        @return: ListEdgeContainerAppRecordsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_edge_container_app_records_with_options_async(request, runtime)

    def list_edge_container_app_versions_with_options(
        self,
        request: esa20240910_models.ListEdgeContainerAppVersionsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListEdgeContainerAppVersionsResponse:
        """
        @summary Lists versions of all containerized applications.
        
        @param request: ListEdgeContainerAppVersionsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListEdgeContainerAppVersionsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListEdgeContainerAppVersions',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListEdgeContainerAppVersionsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_edge_container_app_versions_with_options_async(
        self,
        request: esa20240910_models.ListEdgeContainerAppVersionsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListEdgeContainerAppVersionsResponse:
        """
        @summary Lists versions of all containerized applications.
        
        @param request: ListEdgeContainerAppVersionsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListEdgeContainerAppVersionsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListEdgeContainerAppVersions',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListEdgeContainerAppVersionsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_edge_container_app_versions(
        self,
        request: esa20240910_models.ListEdgeContainerAppVersionsRequest,
    ) -> esa20240910_models.ListEdgeContainerAppVersionsResponse:
        """
        @summary Lists versions of all containerized applications.
        
        @param request: ListEdgeContainerAppVersionsRequest
        @return: ListEdgeContainerAppVersionsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_edge_container_app_versions_with_options(request, runtime)

    async def list_edge_container_app_versions_async(
        self,
        request: esa20240910_models.ListEdgeContainerAppVersionsRequest,
    ) -> esa20240910_models.ListEdgeContainerAppVersionsResponse:
        """
        @summary Lists versions of all containerized applications.
        
        @param request: ListEdgeContainerAppVersionsRequest
        @return: ListEdgeContainerAppVersionsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_edge_container_app_versions_with_options_async(request, runtime)

    def list_edge_container_apps_with_options(
        self,
        request: esa20240910_models.ListEdgeContainerAppsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListEdgeContainerAppsResponse:
        """
        @summary Queries all containerized applications in your Alibaba Cloud account.
        
        @param request: ListEdgeContainerAppsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListEdgeContainerAppsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.order_key):
            query['OrderKey'] = request.order_key
        if not UtilClient.is_unset(request.order_type):
            query['OrderType'] = request.order_type
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.search_key):
            query['SearchKey'] = request.search_key
        if not UtilClient.is_unset(request.search_type):
            query['SearchType'] = request.search_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListEdgeContainerApps',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListEdgeContainerAppsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_edge_container_apps_with_options_async(
        self,
        request: esa20240910_models.ListEdgeContainerAppsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListEdgeContainerAppsResponse:
        """
        @summary Queries all containerized applications in your Alibaba Cloud account.
        
        @param request: ListEdgeContainerAppsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListEdgeContainerAppsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.order_key):
            query['OrderKey'] = request.order_key
        if not UtilClient.is_unset(request.order_type):
            query['OrderType'] = request.order_type
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.search_key):
            query['SearchKey'] = request.search_key
        if not UtilClient.is_unset(request.search_type):
            query['SearchType'] = request.search_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListEdgeContainerApps',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListEdgeContainerAppsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_edge_container_apps(
        self,
        request: esa20240910_models.ListEdgeContainerAppsRequest,
    ) -> esa20240910_models.ListEdgeContainerAppsResponse:
        """
        @summary Queries all containerized applications in your Alibaba Cloud account.
        
        @param request: ListEdgeContainerAppsRequest
        @return: ListEdgeContainerAppsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_edge_container_apps_with_options(request, runtime)

    async def list_edge_container_apps_async(
        self,
        request: esa20240910_models.ListEdgeContainerAppsRequest,
    ) -> esa20240910_models.ListEdgeContainerAppsResponse:
        """
        @summary Queries all containerized applications in your Alibaba Cloud account.
        
        @param request: ListEdgeContainerAppsRequest
        @return: ListEdgeContainerAppsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_edge_container_apps_with_options_async(request, runtime)

    def list_edge_container_records_with_options(
        self,
        request: esa20240910_models.ListEdgeContainerRecordsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListEdgeContainerRecordsResponse:
        """
        @summary Queries the records that are associated with Edge Container for a website.
        
        @param request: ListEdgeContainerRecordsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListEdgeContainerRecordsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListEdgeContainerRecords',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListEdgeContainerRecordsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_edge_container_records_with_options_async(
        self,
        request: esa20240910_models.ListEdgeContainerRecordsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListEdgeContainerRecordsResponse:
        """
        @summary Queries the records that are associated with Edge Container for a website.
        
        @param request: ListEdgeContainerRecordsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListEdgeContainerRecordsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListEdgeContainerRecords',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListEdgeContainerRecordsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_edge_container_records(
        self,
        request: esa20240910_models.ListEdgeContainerRecordsRequest,
    ) -> esa20240910_models.ListEdgeContainerRecordsResponse:
        """
        @summary Queries the records that are associated with Edge Container for a website.
        
        @param request: ListEdgeContainerRecordsRequest
        @return: ListEdgeContainerRecordsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_edge_container_records_with_options(request, runtime)

    async def list_edge_container_records_async(
        self,
        request: esa20240910_models.ListEdgeContainerRecordsRequest,
    ) -> esa20240910_models.ListEdgeContainerRecordsResponse:
        """
        @summary Queries the records that are associated with Edge Container for a website.
        
        @param request: ListEdgeContainerRecordsRequest
        @return: ListEdgeContainerRecordsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_edge_container_records_with_options_async(request, runtime)

    def list_edge_routine_plans_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListEdgeRoutinePlansResponse:
        """
        @summary Queries Edge Routine plans.
        
        @param request: ListEdgeRoutinePlansRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListEdgeRoutinePlansResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='ListEdgeRoutinePlans',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListEdgeRoutinePlansResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_edge_routine_plans_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListEdgeRoutinePlansResponse:
        """
        @summary Queries Edge Routine plans.
        
        @param request: ListEdgeRoutinePlansRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListEdgeRoutinePlansResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='ListEdgeRoutinePlans',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListEdgeRoutinePlansResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_edge_routine_plans(self) -> esa20240910_models.ListEdgeRoutinePlansResponse:
        """
        @summary Queries Edge Routine plans.
        
        @return: ListEdgeRoutinePlansResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_edge_routine_plans_with_options(runtime)

    async def list_edge_routine_plans_async(self) -> esa20240910_models.ListEdgeRoutinePlansResponse:
        """
        @summary Queries Edge Routine plans.
        
        @return: ListEdgeRoutinePlansResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_edge_routine_plans_with_options_async(runtime)

    def list_edge_routine_records_with_options(
        self,
        request: esa20240910_models.ListEdgeRoutineRecordsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListEdgeRoutineRecordsResponse:
        """
        @summary Queries the records that are associated with Edge Routine routes for a website.
        
        @description >  You can call this operation 100 times per second.
        
        @param request: ListEdgeRoutineRecordsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListEdgeRoutineRecordsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListEdgeRoutineRecords',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListEdgeRoutineRecordsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_edge_routine_records_with_options_async(
        self,
        request: esa20240910_models.ListEdgeRoutineRecordsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListEdgeRoutineRecordsResponse:
        """
        @summary Queries the records that are associated with Edge Routine routes for a website.
        
        @description >  You can call this operation 100 times per second.
        
        @param request: ListEdgeRoutineRecordsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListEdgeRoutineRecordsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListEdgeRoutineRecords',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListEdgeRoutineRecordsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_edge_routine_records(
        self,
        request: esa20240910_models.ListEdgeRoutineRecordsRequest,
    ) -> esa20240910_models.ListEdgeRoutineRecordsResponse:
        """
        @summary Queries the records that are associated with Edge Routine routes for a website.
        
        @description >  You can call this operation 100 times per second.
        
        @param request: ListEdgeRoutineRecordsRequest
        @return: ListEdgeRoutineRecordsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_edge_routine_records_with_options(request, runtime)

    async def list_edge_routine_records_async(
        self,
        request: esa20240910_models.ListEdgeRoutineRecordsRequest,
    ) -> esa20240910_models.ListEdgeRoutineRecordsResponse:
        """
        @summary Queries the records that are associated with Edge Routine routes for a website.
        
        @description >  You can call this operation 100 times per second.
        
        @param request: ListEdgeRoutineRecordsRequest
        @return: ListEdgeRoutineRecordsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_edge_routine_records_with_options_async(request, runtime)

    def list_http_incoming_request_header_modification_rules_with_options(
        self,
        request: esa20240910_models.ListHttpIncomingRequestHeaderModificationRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListHttpIncomingRequestHeaderModificationRulesResponse:
        """
        @summary 查询HTTP入站请求头规则列表
        
        @param request: ListHttpIncomingRequestHeaderModificationRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListHttpIncomingRequestHeaderModificationRulesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListHttpIncomingRequestHeaderModificationRules',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListHttpIncomingRequestHeaderModificationRulesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_http_incoming_request_header_modification_rules_with_options_async(
        self,
        request: esa20240910_models.ListHttpIncomingRequestHeaderModificationRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListHttpIncomingRequestHeaderModificationRulesResponse:
        """
        @summary 查询HTTP入站请求头规则列表
        
        @param request: ListHttpIncomingRequestHeaderModificationRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListHttpIncomingRequestHeaderModificationRulesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListHttpIncomingRequestHeaderModificationRules',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListHttpIncomingRequestHeaderModificationRulesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_http_incoming_request_header_modification_rules(
        self,
        request: esa20240910_models.ListHttpIncomingRequestHeaderModificationRulesRequest,
    ) -> esa20240910_models.ListHttpIncomingRequestHeaderModificationRulesResponse:
        """
        @summary 查询HTTP入站请求头规则列表
        
        @param request: ListHttpIncomingRequestHeaderModificationRulesRequest
        @return: ListHttpIncomingRequestHeaderModificationRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_http_incoming_request_header_modification_rules_with_options(request, runtime)

    async def list_http_incoming_request_header_modification_rules_async(
        self,
        request: esa20240910_models.ListHttpIncomingRequestHeaderModificationRulesRequest,
    ) -> esa20240910_models.ListHttpIncomingRequestHeaderModificationRulesResponse:
        """
        @summary 查询HTTP入站请求头规则列表
        
        @param request: ListHttpIncomingRequestHeaderModificationRulesRequest
        @return: ListHttpIncomingRequestHeaderModificationRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_http_incoming_request_header_modification_rules_with_options_async(request, runtime)

    def list_http_incoming_response_header_modification_rules_with_options(
        self,
        request: esa20240910_models.ListHttpIncomingResponseHeaderModificationRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListHttpIncomingResponseHeaderModificationRulesResponse:
        """
        @summary 查询HTTP入站响应头规则列表
        
        @param request: ListHttpIncomingResponseHeaderModificationRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListHttpIncomingResponseHeaderModificationRulesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListHttpIncomingResponseHeaderModificationRules',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListHttpIncomingResponseHeaderModificationRulesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_http_incoming_response_header_modification_rules_with_options_async(
        self,
        request: esa20240910_models.ListHttpIncomingResponseHeaderModificationRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListHttpIncomingResponseHeaderModificationRulesResponse:
        """
        @summary 查询HTTP入站响应头规则列表
        
        @param request: ListHttpIncomingResponseHeaderModificationRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListHttpIncomingResponseHeaderModificationRulesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListHttpIncomingResponseHeaderModificationRules',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListHttpIncomingResponseHeaderModificationRulesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_http_incoming_response_header_modification_rules(
        self,
        request: esa20240910_models.ListHttpIncomingResponseHeaderModificationRulesRequest,
    ) -> esa20240910_models.ListHttpIncomingResponseHeaderModificationRulesResponse:
        """
        @summary 查询HTTP入站响应头规则列表
        
        @param request: ListHttpIncomingResponseHeaderModificationRulesRequest
        @return: ListHttpIncomingResponseHeaderModificationRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_http_incoming_response_header_modification_rules_with_options(request, runtime)

    async def list_http_incoming_response_header_modification_rules_async(
        self,
        request: esa20240910_models.ListHttpIncomingResponseHeaderModificationRulesRequest,
    ) -> esa20240910_models.ListHttpIncomingResponseHeaderModificationRulesResponse:
        """
        @summary 查询HTTP入站响应头规则列表
        
        @param request: ListHttpIncomingResponseHeaderModificationRulesRequest
        @return: ListHttpIncomingResponseHeaderModificationRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_http_incoming_response_header_modification_rules_with_options_async(request, runtime)

    def list_http_request_header_modification_rules_with_options(
        self,
        request: esa20240910_models.ListHttpRequestHeaderModificationRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListHttpRequestHeaderModificationRulesResponse:
        """
        @summary List of HTTP Request Header Rules
        
        @param request: ListHttpRequestHeaderModificationRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListHttpRequestHeaderModificationRulesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListHttpRequestHeaderModificationRules',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListHttpRequestHeaderModificationRulesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_http_request_header_modification_rules_with_options_async(
        self,
        request: esa20240910_models.ListHttpRequestHeaderModificationRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListHttpRequestHeaderModificationRulesResponse:
        """
        @summary List of HTTP Request Header Rules
        
        @param request: ListHttpRequestHeaderModificationRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListHttpRequestHeaderModificationRulesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListHttpRequestHeaderModificationRules',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListHttpRequestHeaderModificationRulesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_http_request_header_modification_rules(
        self,
        request: esa20240910_models.ListHttpRequestHeaderModificationRulesRequest,
    ) -> esa20240910_models.ListHttpRequestHeaderModificationRulesResponse:
        """
        @summary List of HTTP Request Header Rules
        
        @param request: ListHttpRequestHeaderModificationRulesRequest
        @return: ListHttpRequestHeaderModificationRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_http_request_header_modification_rules_with_options(request, runtime)

    async def list_http_request_header_modification_rules_async(
        self,
        request: esa20240910_models.ListHttpRequestHeaderModificationRulesRequest,
    ) -> esa20240910_models.ListHttpRequestHeaderModificationRulesResponse:
        """
        @summary List of HTTP Request Header Rules
        
        @param request: ListHttpRequestHeaderModificationRulesRequest
        @return: ListHttpRequestHeaderModificationRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_http_request_header_modification_rules_with_options_async(request, runtime)

    def list_http_response_header_modification_rules_with_options(
        self,
        request: esa20240910_models.ListHttpResponseHeaderModificationRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListHttpResponseHeaderModificationRulesResponse:
        """
        @summary List of HTTP Response Header Rules
        
        @param request: ListHttpResponseHeaderModificationRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListHttpResponseHeaderModificationRulesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListHttpResponseHeaderModificationRules',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListHttpResponseHeaderModificationRulesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_http_response_header_modification_rules_with_options_async(
        self,
        request: esa20240910_models.ListHttpResponseHeaderModificationRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListHttpResponseHeaderModificationRulesResponse:
        """
        @summary List of HTTP Response Header Rules
        
        @param request: ListHttpResponseHeaderModificationRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListHttpResponseHeaderModificationRulesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListHttpResponseHeaderModificationRules',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListHttpResponseHeaderModificationRulesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_http_response_header_modification_rules(
        self,
        request: esa20240910_models.ListHttpResponseHeaderModificationRulesRequest,
    ) -> esa20240910_models.ListHttpResponseHeaderModificationRulesResponse:
        """
        @summary List of HTTP Response Header Rules
        
        @param request: ListHttpResponseHeaderModificationRulesRequest
        @return: ListHttpResponseHeaderModificationRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_http_response_header_modification_rules_with_options(request, runtime)

    async def list_http_response_header_modification_rules_async(
        self,
        request: esa20240910_models.ListHttpResponseHeaderModificationRulesRequest,
    ) -> esa20240910_models.ListHttpResponseHeaderModificationRulesResponse:
        """
        @summary List of HTTP Response Header Rules
        
        @param request: ListHttpResponseHeaderModificationRulesRequest
        @return: ListHttpResponseHeaderModificationRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_http_response_header_modification_rules_with_options_async(request, runtime)

    def list_https_application_configurations_with_options(
        self,
        request: esa20240910_models.ListHttpsApplicationConfigurationsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListHttpsApplicationConfigurationsResponse:
        """
        @summary Query multiple HTTPS application configurations
        
        @param request: ListHttpsApplicationConfigurationsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListHttpsApplicationConfigurationsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListHttpsApplicationConfigurations',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListHttpsApplicationConfigurationsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_https_application_configurations_with_options_async(
        self,
        request: esa20240910_models.ListHttpsApplicationConfigurationsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListHttpsApplicationConfigurationsResponse:
        """
        @summary Query multiple HTTPS application configurations
        
        @param request: ListHttpsApplicationConfigurationsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListHttpsApplicationConfigurationsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListHttpsApplicationConfigurations',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListHttpsApplicationConfigurationsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_https_application_configurations(
        self,
        request: esa20240910_models.ListHttpsApplicationConfigurationsRequest,
    ) -> esa20240910_models.ListHttpsApplicationConfigurationsResponse:
        """
        @summary Query multiple HTTPS application configurations
        
        @param request: ListHttpsApplicationConfigurationsRequest
        @return: ListHttpsApplicationConfigurationsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_https_application_configurations_with_options(request, runtime)

    async def list_https_application_configurations_async(
        self,
        request: esa20240910_models.ListHttpsApplicationConfigurationsRequest,
    ) -> esa20240910_models.ListHttpsApplicationConfigurationsResponse:
        """
        @summary Query multiple HTTPS application configurations
        
        @param request: ListHttpsApplicationConfigurationsRequest
        @return: ListHttpsApplicationConfigurationsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_https_application_configurations_with_options_async(request, runtime)

    def list_https_basic_configurations_with_options(
        self,
        request: esa20240910_models.ListHttpsBasicConfigurationsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListHttpsBasicConfigurationsResponse:
        """
        @summary Query multiple HTTPS basic configurations
        
        @param request: ListHttpsBasicConfigurationsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListHttpsBasicConfigurationsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListHttpsBasicConfigurations',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListHttpsBasicConfigurationsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_https_basic_configurations_with_options_async(
        self,
        request: esa20240910_models.ListHttpsBasicConfigurationsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListHttpsBasicConfigurationsResponse:
        """
        @summary Query multiple HTTPS basic configurations
        
        @param request: ListHttpsBasicConfigurationsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListHttpsBasicConfigurationsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListHttpsBasicConfigurations',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListHttpsBasicConfigurationsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_https_basic_configurations(
        self,
        request: esa20240910_models.ListHttpsBasicConfigurationsRequest,
    ) -> esa20240910_models.ListHttpsBasicConfigurationsResponse:
        """
        @summary Query multiple HTTPS basic configurations
        
        @param request: ListHttpsBasicConfigurationsRequest
        @return: ListHttpsBasicConfigurationsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_https_basic_configurations_with_options(request, runtime)

    async def list_https_basic_configurations_async(
        self,
        request: esa20240910_models.ListHttpsBasicConfigurationsRequest,
    ) -> esa20240910_models.ListHttpsBasicConfigurationsResponse:
        """
        @summary Query multiple HTTPS basic configurations
        
        @param request: ListHttpsBasicConfigurationsRequest
        @return: ListHttpsBasicConfigurationsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_https_basic_configurations_with_options_async(request, runtime)

    def list_image_transforms_with_options(
        self,
        request: esa20240910_models.ListImageTransformsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListImageTransformsResponse:
        """
        @summary Query Multiple Site Image Transformation Configurations
        
        @param request: ListImageTransformsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListImageTransformsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListImageTransforms',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListImageTransformsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_image_transforms_with_options_async(
        self,
        request: esa20240910_models.ListImageTransformsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListImageTransformsResponse:
        """
        @summary Query Multiple Site Image Transformation Configurations
        
        @param request: ListImageTransformsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListImageTransformsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListImageTransforms',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListImageTransformsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_image_transforms(
        self,
        request: esa20240910_models.ListImageTransformsRequest,
    ) -> esa20240910_models.ListImageTransformsResponse:
        """
        @summary Query Multiple Site Image Transformation Configurations
        
        @param request: ListImageTransformsRequest
        @return: ListImageTransformsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_image_transforms_with_options(request, runtime)

    async def list_image_transforms_async(
        self,
        request: esa20240910_models.ListImageTransformsRequest,
    ) -> esa20240910_models.ListImageTransformsResponse:
        """
        @summary Query Multiple Site Image Transformation Configurations
        
        @param request: ListImageTransformsRequest
        @return: ListImageTransformsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_image_transforms_with_options_async(request, runtime)

    def list_instance_quotas_with_options(
        self,
        request: esa20240910_models.ListInstanceQuotasRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListInstanceQuotasResponse:
        """
        @summary Queries the quota details in a subscription plan.
        
        @param request: ListInstanceQuotasRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListInstanceQuotasResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListInstanceQuotas',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListInstanceQuotasResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_instance_quotas_with_options_async(
        self,
        request: esa20240910_models.ListInstanceQuotasRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListInstanceQuotasResponse:
        """
        @summary Queries the quota details in a subscription plan.
        
        @param request: ListInstanceQuotasRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListInstanceQuotasResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListInstanceQuotas',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListInstanceQuotasResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_instance_quotas(
        self,
        request: esa20240910_models.ListInstanceQuotasRequest,
    ) -> esa20240910_models.ListInstanceQuotasResponse:
        """
        @summary Queries the quota details in a subscription plan.
        
        @param request: ListInstanceQuotasRequest
        @return: ListInstanceQuotasResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_instance_quotas_with_options(request, runtime)

    async def list_instance_quotas_async(
        self,
        request: esa20240910_models.ListInstanceQuotasRequest,
    ) -> esa20240910_models.ListInstanceQuotasResponse:
        """
        @summary Queries the quota details in a subscription plan.
        
        @param request: ListInstanceQuotasRequest
        @return: ListInstanceQuotasResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_instance_quotas_with_options_async(request, runtime)

    def list_instance_quotas_with_usage_with_options(
        self,
        request: esa20240910_models.ListInstanceQuotasWithUsageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListInstanceQuotasWithUsageResponse:
        """
        @summary Queries quotas and the actual usage in a plan based on the website or plan ID.
        
        @param request: ListInstanceQuotasWithUsageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListInstanceQuotasWithUsageResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListInstanceQuotasWithUsage',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListInstanceQuotasWithUsageResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_instance_quotas_with_usage_with_options_async(
        self,
        request: esa20240910_models.ListInstanceQuotasWithUsageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListInstanceQuotasWithUsageResponse:
        """
        @summary Queries quotas and the actual usage in a plan based on the website or plan ID.
        
        @param request: ListInstanceQuotasWithUsageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListInstanceQuotasWithUsageResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListInstanceQuotasWithUsage',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListInstanceQuotasWithUsageResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_instance_quotas_with_usage(
        self,
        request: esa20240910_models.ListInstanceQuotasWithUsageRequest,
    ) -> esa20240910_models.ListInstanceQuotasWithUsageResponse:
        """
        @summary Queries quotas and the actual usage in a plan based on the website or plan ID.
        
        @param request: ListInstanceQuotasWithUsageRequest
        @return: ListInstanceQuotasWithUsageResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_instance_quotas_with_usage_with_options(request, runtime)

    async def list_instance_quotas_with_usage_async(
        self,
        request: esa20240910_models.ListInstanceQuotasWithUsageRequest,
    ) -> esa20240910_models.ListInstanceQuotasWithUsageResponse:
        """
        @summary Queries quotas and the actual usage in a plan based on the website or plan ID.
        
        @param request: ListInstanceQuotasWithUsageRequest
        @return: ListInstanceQuotasWithUsageResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_instance_quotas_with_usage_with_options_async(request, runtime)

    def list_kvs_with_options(
        self,
        request: esa20240910_models.ListKvsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListKvsResponse:
        """
        @summary Lists all key-value pairs in a namespace in your Alibaba Cloud account.
        
        @param request: ListKvsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListKvsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListKvs',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListKvsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_kvs_with_options_async(
        self,
        request: esa20240910_models.ListKvsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListKvsResponse:
        """
        @summary Lists all key-value pairs in a namespace in your Alibaba Cloud account.
        
        @param request: ListKvsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListKvsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListKvs',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListKvsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_kvs(
        self,
        request: esa20240910_models.ListKvsRequest,
    ) -> esa20240910_models.ListKvsResponse:
        """
        @summary Lists all key-value pairs in a namespace in your Alibaba Cloud account.
        
        @param request: ListKvsRequest
        @return: ListKvsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_kvs_with_options(request, runtime)

    async def list_kvs_async(
        self,
        request: esa20240910_models.ListKvsRequest,
    ) -> esa20240910_models.ListKvsResponse:
        """
        @summary Lists all key-value pairs in a namespace in your Alibaba Cloud account.
        
        @param request: ListKvsRequest
        @return: ListKvsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_kvs_with_options_async(request, runtime)

    def list_lists_with_options(
        self,
        tmp_req: esa20240910_models.ListListsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListListsResponse:
        """
        @summary Queries all custom lists and their details in an Alibaba Cloud account. You can specify query arguments to filter the results and display the returned lists by page.
        
        @param tmp_req: ListListsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListListsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.ListListsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.query_args):
            request.query_args_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.query_args, 'QueryArgs', 'json')
        query = {}
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.query_args_shrink):
            query['QueryArgs'] = request.query_args_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListLists',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListListsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_lists_with_options_async(
        self,
        tmp_req: esa20240910_models.ListListsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListListsResponse:
        """
        @summary Queries all custom lists and their details in an Alibaba Cloud account. You can specify query arguments to filter the results and display the returned lists by page.
        
        @param tmp_req: ListListsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListListsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.ListListsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.query_args):
            request.query_args_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.query_args, 'QueryArgs', 'json')
        query = {}
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.query_args_shrink):
            query['QueryArgs'] = request.query_args_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListLists',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListListsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_lists(
        self,
        request: esa20240910_models.ListListsRequest,
    ) -> esa20240910_models.ListListsResponse:
        """
        @summary Queries all custom lists and their details in an Alibaba Cloud account. You can specify query arguments to filter the results and display the returned lists by page.
        
        @param request: ListListsRequest
        @return: ListListsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_lists_with_options(request, runtime)

    async def list_lists_async(
        self,
        request: esa20240910_models.ListListsRequest,
    ) -> esa20240910_models.ListListsResponse:
        """
        @summary Queries all custom lists and their details in an Alibaba Cloud account. You can specify query arguments to filter the results and display the returned lists by page.
        
        @param request: ListListsRequest
        @return: ListListsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_lists_with_options_async(request, runtime)

    def list_load_balancer_origin_status_with_options(
        self,
        request: esa20240910_models.ListLoadBalancerOriginStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListLoadBalancerOriginStatusResponse:
        """
        @summary Query the status of origins in load balancers
        
        @description Query the status of origins under load balancers. You can pass multiple load balancer IDs at once, separated by commas. This is for load balancers that have monitors configured. It will probe the origins in the source address pools used by the load balancers and record the current status of each origin.
        - Healthy(healthy): The probe result is available.
        - Unhealthy(unhealthy): The probe result is unavailable.
        - Unknown(unknown): Unknown, the monitor has not yet probed.
        - Undetected(undetected): The load balancer to which the origin belongs is not bound to a monitor.
        
        @param request: ListLoadBalancerOriginStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListLoadBalancerOriginStatusResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListLoadBalancerOriginStatus',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListLoadBalancerOriginStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_load_balancer_origin_status_with_options_async(
        self,
        request: esa20240910_models.ListLoadBalancerOriginStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListLoadBalancerOriginStatusResponse:
        """
        @summary Query the status of origins in load balancers
        
        @description Query the status of origins under load balancers. You can pass multiple load balancer IDs at once, separated by commas. This is for load balancers that have monitors configured. It will probe the origins in the source address pools used by the load balancers and record the current status of each origin.
        - Healthy(healthy): The probe result is available.
        - Unhealthy(unhealthy): The probe result is unavailable.
        - Unknown(unknown): Unknown, the monitor has not yet probed.
        - Undetected(undetected): The load balancer to which the origin belongs is not bound to a monitor.
        
        @param request: ListLoadBalancerOriginStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListLoadBalancerOriginStatusResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListLoadBalancerOriginStatus',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListLoadBalancerOriginStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_load_balancer_origin_status(
        self,
        request: esa20240910_models.ListLoadBalancerOriginStatusRequest,
    ) -> esa20240910_models.ListLoadBalancerOriginStatusResponse:
        """
        @summary Query the status of origins in load balancers
        
        @description Query the status of origins under load balancers. You can pass multiple load balancer IDs at once, separated by commas. This is for load balancers that have monitors configured. It will probe the origins in the source address pools used by the load balancers and record the current status of each origin.
        - Healthy(healthy): The probe result is available.
        - Unhealthy(unhealthy): The probe result is unavailable.
        - Unknown(unknown): Unknown, the monitor has not yet probed.
        - Undetected(undetected): The load balancer to which the origin belongs is not bound to a monitor.
        
        @param request: ListLoadBalancerOriginStatusRequest
        @return: ListLoadBalancerOriginStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_load_balancer_origin_status_with_options(request, runtime)

    async def list_load_balancer_origin_status_async(
        self,
        request: esa20240910_models.ListLoadBalancerOriginStatusRequest,
    ) -> esa20240910_models.ListLoadBalancerOriginStatusResponse:
        """
        @summary Query the status of origins in load balancers
        
        @description Query the status of origins under load balancers. You can pass multiple load balancer IDs at once, separated by commas. This is for load balancers that have monitors configured. It will probe the origins in the source address pools used by the load balancers and record the current status of each origin.
        - Healthy(healthy): The probe result is available.
        - Unhealthy(unhealthy): The probe result is unavailable.
        - Unknown(unknown): Unknown, the monitor has not yet probed.
        - Undetected(undetected): The load balancer to which the origin belongs is not bound to a monitor.
        
        @param request: ListLoadBalancerOriginStatusRequest
        @return: ListLoadBalancerOriginStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_load_balancer_origin_status_with_options_async(request, runtime)

    def list_load_balancer_regions_with_options(
        self,
        request: esa20240910_models.ListLoadBalancerRegionsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListLoadBalancerRegionsResponse:
        """
        @summary Query Load Balancer Region List
        
        @description When creating a load balancer \\"based on country/region scheduling\\" strategy through OpenAPI, use the code of primary or secondary regions to represent traffic from this geographical area.
        
        @param request: ListLoadBalancerRegionsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListLoadBalancerRegionsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListLoadBalancerRegions',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListLoadBalancerRegionsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_load_balancer_regions_with_options_async(
        self,
        request: esa20240910_models.ListLoadBalancerRegionsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListLoadBalancerRegionsResponse:
        """
        @summary Query Load Balancer Region List
        
        @description When creating a load balancer \\"based on country/region scheduling\\" strategy through OpenAPI, use the code of primary or secondary regions to represent traffic from this geographical area.
        
        @param request: ListLoadBalancerRegionsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListLoadBalancerRegionsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListLoadBalancerRegions',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListLoadBalancerRegionsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_load_balancer_regions(
        self,
        request: esa20240910_models.ListLoadBalancerRegionsRequest,
    ) -> esa20240910_models.ListLoadBalancerRegionsResponse:
        """
        @summary Query Load Balancer Region List
        
        @description When creating a load balancer \\"based on country/region scheduling\\" strategy through OpenAPI, use the code of primary or secondary regions to represent traffic from this geographical area.
        
        @param request: ListLoadBalancerRegionsRequest
        @return: ListLoadBalancerRegionsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_load_balancer_regions_with_options(request, runtime)

    async def list_load_balancer_regions_async(
        self,
        request: esa20240910_models.ListLoadBalancerRegionsRequest,
    ) -> esa20240910_models.ListLoadBalancerRegionsResponse:
        """
        @summary Query Load Balancer Region List
        
        @description When creating a load balancer \\"based on country/region scheduling\\" strategy through OpenAPI, use the code of primary or secondary regions to represent traffic from this geographical area.
        
        @param request: ListLoadBalancerRegionsRequest
        @return: ListLoadBalancerRegionsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_load_balancer_regions_with_options_async(request, runtime)

    def list_load_balancers_with_options(
        self,
        request: esa20240910_models.ListLoadBalancersRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListLoadBalancersResponse:
        """
        @summary Query the list of load balancers
        
        @param request: ListLoadBalancersRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListLoadBalancersResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListLoadBalancers',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListLoadBalancersResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_load_balancers_with_options_async(
        self,
        request: esa20240910_models.ListLoadBalancersRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListLoadBalancersResponse:
        """
        @summary Query the list of load balancers
        
        @param request: ListLoadBalancersRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListLoadBalancersResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListLoadBalancers',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListLoadBalancersResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_load_balancers(
        self,
        request: esa20240910_models.ListLoadBalancersRequest,
    ) -> esa20240910_models.ListLoadBalancersResponse:
        """
        @summary Query the list of load balancers
        
        @param request: ListLoadBalancersRequest
        @return: ListLoadBalancersResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_load_balancers_with_options(request, runtime)

    async def list_load_balancers_async(
        self,
        request: esa20240910_models.ListLoadBalancersRequest,
    ) -> esa20240910_models.ListLoadBalancersResponse:
        """
        @summary Query the list of load balancers
        
        @param request: ListLoadBalancersRequest
        @return: ListLoadBalancersResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_load_balancers_with_options_async(request, runtime)

    def list_managed_rules_groups_with_options(
        self,
        request: esa20240910_models.ListManagedRulesGroupsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListManagedRulesGroupsResponse:
        """
        @summary List Custom Managed Rule Groups
        
        @param request: ListManagedRulesGroupsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListManagedRulesGroupsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListManagedRulesGroups',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListManagedRulesGroupsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_managed_rules_groups_with_options_async(
        self,
        request: esa20240910_models.ListManagedRulesGroupsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListManagedRulesGroupsResponse:
        """
        @summary List Custom Managed Rule Groups
        
        @param request: ListManagedRulesGroupsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListManagedRulesGroupsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListManagedRulesGroups',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListManagedRulesGroupsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_managed_rules_groups(
        self,
        request: esa20240910_models.ListManagedRulesGroupsRequest,
    ) -> esa20240910_models.ListManagedRulesGroupsResponse:
        """
        @summary List Custom Managed Rule Groups
        
        @param request: ListManagedRulesGroupsRequest
        @return: ListManagedRulesGroupsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_managed_rules_groups_with_options(request, runtime)

    async def list_managed_rules_groups_async(
        self,
        request: esa20240910_models.ListManagedRulesGroupsRequest,
    ) -> esa20240910_models.ListManagedRulesGroupsResponse:
        """
        @summary List Custom Managed Rule Groups
        
        @param request: ListManagedRulesGroupsRequest
        @return: ListManagedRulesGroupsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_managed_rules_groups_with_options_async(request, runtime)

    def list_network_optimizations_with_options(
        self,
        request: esa20240910_models.ListNetworkOptimizationsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListNetworkOptimizationsResponse:
        """
        @summary Query multiple network optimization configurations
        
        @param request: ListNetworkOptimizationsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListNetworkOptimizationsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListNetworkOptimizations',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListNetworkOptimizationsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_network_optimizations_with_options_async(
        self,
        request: esa20240910_models.ListNetworkOptimizationsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListNetworkOptimizationsResponse:
        """
        @summary Query multiple network optimization configurations
        
        @param request: ListNetworkOptimizationsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListNetworkOptimizationsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListNetworkOptimizations',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListNetworkOptimizationsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_network_optimizations(
        self,
        request: esa20240910_models.ListNetworkOptimizationsRequest,
    ) -> esa20240910_models.ListNetworkOptimizationsResponse:
        """
        @summary Query multiple network optimization configurations
        
        @param request: ListNetworkOptimizationsRequest
        @return: ListNetworkOptimizationsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_network_optimizations_with_options(request, runtime)

    async def list_network_optimizations_async(
        self,
        request: esa20240910_models.ListNetworkOptimizationsRequest,
    ) -> esa20240910_models.ListNetworkOptimizationsResponse:
        """
        @summary Query multiple network optimization configurations
        
        @param request: ListNetworkOptimizationsRequest
        @return: ListNetworkOptimizationsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_network_optimizations_with_options_async(request, runtime)

    def list_origin_ca_certificates_with_options(
        self,
        request: esa20240910_models.ListOriginCaCertificatesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListOriginCaCertificatesResponse:
        """
        @summary 查询源服务器CA证书列表
        
        @param request: ListOriginCaCertificatesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListOriginCaCertificatesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListOriginCaCertificates',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListOriginCaCertificatesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_origin_ca_certificates_with_options_async(
        self,
        request: esa20240910_models.ListOriginCaCertificatesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListOriginCaCertificatesResponse:
        """
        @summary 查询源服务器CA证书列表
        
        @param request: ListOriginCaCertificatesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListOriginCaCertificatesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListOriginCaCertificates',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListOriginCaCertificatesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_origin_ca_certificates(
        self,
        request: esa20240910_models.ListOriginCaCertificatesRequest,
    ) -> esa20240910_models.ListOriginCaCertificatesResponse:
        """
        @summary 查询源服务器CA证书列表
        
        @param request: ListOriginCaCertificatesRequest
        @return: ListOriginCaCertificatesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_origin_ca_certificates_with_options(request, runtime)

    async def list_origin_ca_certificates_async(
        self,
        request: esa20240910_models.ListOriginCaCertificatesRequest,
    ) -> esa20240910_models.ListOriginCaCertificatesResponse:
        """
        @summary 查询源服务器CA证书列表
        
        @param request: ListOriginCaCertificatesRequest
        @return: ListOriginCaCertificatesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_origin_ca_certificates_with_options_async(request, runtime)

    def list_origin_client_certificates_with_options(
        self,
        request: esa20240910_models.ListOriginClientCertificatesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListOriginClientCertificatesResponse:
        """
        @summary 查询域名回源客户端证书列表
        
        @param request: ListOriginClientCertificatesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListOriginClientCertificatesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListOriginClientCertificates',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListOriginClientCertificatesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_origin_client_certificates_with_options_async(
        self,
        request: esa20240910_models.ListOriginClientCertificatesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListOriginClientCertificatesResponse:
        """
        @summary 查询域名回源客户端证书列表
        
        @param request: ListOriginClientCertificatesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListOriginClientCertificatesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListOriginClientCertificates',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListOriginClientCertificatesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_origin_client_certificates(
        self,
        request: esa20240910_models.ListOriginClientCertificatesRequest,
    ) -> esa20240910_models.ListOriginClientCertificatesResponse:
        """
        @summary 查询域名回源客户端证书列表
        
        @param request: ListOriginClientCertificatesRequest
        @return: ListOriginClientCertificatesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_origin_client_certificates_with_options(request, runtime)

    async def list_origin_client_certificates_async(
        self,
        request: esa20240910_models.ListOriginClientCertificatesRequest,
    ) -> esa20240910_models.ListOriginClientCertificatesResponse:
        """
        @summary 查询域名回源客户端证书列表
        
        @param request: ListOriginClientCertificatesRequest
        @return: ListOriginClientCertificatesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_origin_client_certificates_with_options_async(request, runtime)

    def list_origin_pools_with_options(
        self,
        request: esa20240910_models.ListOriginPoolsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListOriginPoolsResponse:
        """
        @summary List Origin Pools
        
        @param request: ListOriginPoolsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListOriginPoolsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListOriginPools',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListOriginPoolsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_origin_pools_with_options_async(
        self,
        request: esa20240910_models.ListOriginPoolsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListOriginPoolsResponse:
        """
        @summary List Origin Pools
        
        @param request: ListOriginPoolsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListOriginPoolsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListOriginPools',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListOriginPoolsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_origin_pools(
        self,
        request: esa20240910_models.ListOriginPoolsRequest,
    ) -> esa20240910_models.ListOriginPoolsResponse:
        """
        @summary List Origin Pools
        
        @param request: ListOriginPoolsRequest
        @return: ListOriginPoolsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_origin_pools_with_options(request, runtime)

    async def list_origin_pools_async(
        self,
        request: esa20240910_models.ListOriginPoolsRequest,
    ) -> esa20240910_models.ListOriginPoolsResponse:
        """
        @summary List Origin Pools
        
        @param request: ListOriginPoolsRequest
        @return: ListOriginPoolsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_origin_pools_with_options_async(request, runtime)

    def list_origin_rules_with_options(
        self,
        request: esa20240910_models.ListOriginRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListOriginRulesResponse:
        """
        @summary Query multiple origin rule configurations
        
        @param request: ListOriginRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListOriginRulesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListOriginRules',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListOriginRulesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_origin_rules_with_options_async(
        self,
        request: esa20240910_models.ListOriginRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListOriginRulesResponse:
        """
        @summary Query multiple origin rule configurations
        
        @param request: ListOriginRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListOriginRulesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListOriginRules',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListOriginRulesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_origin_rules(
        self,
        request: esa20240910_models.ListOriginRulesRequest,
    ) -> esa20240910_models.ListOriginRulesResponse:
        """
        @summary Query multiple origin rule configurations
        
        @param request: ListOriginRulesRequest
        @return: ListOriginRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_origin_rules_with_options(request, runtime)

    async def list_origin_rules_async(
        self,
        request: esa20240910_models.ListOriginRulesRequest,
    ) -> esa20240910_models.ListOriginRulesResponse:
        """
        @summary Query multiple origin rule configurations
        
        @param request: ListOriginRulesRequest
        @return: ListOriginRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_origin_rules_with_options_async(request, runtime)

    def list_pages_with_options(
        self,
        tmp_req: esa20240910_models.ListPagesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListPagesResponse:
        """
        @summary Lists all custom error pages that you created. You can define the page number and the number of entries per page to display the response.
        
        @param tmp_req: ListPagesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListPagesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.ListPagesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.query_args):
            request.query_args_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.query_args, 'QueryArgs', 'json')
        query = {}
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.query_args_shrink):
            query['QueryArgs'] = request.query_args_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListPages',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListPagesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_pages_with_options_async(
        self,
        tmp_req: esa20240910_models.ListPagesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListPagesResponse:
        """
        @summary Lists all custom error pages that you created. You can define the page number and the number of entries per page to display the response.
        
        @param tmp_req: ListPagesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListPagesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.ListPagesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.query_args):
            request.query_args_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.query_args, 'QueryArgs', 'json')
        query = {}
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.query_args_shrink):
            query['QueryArgs'] = request.query_args_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListPages',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListPagesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_pages(
        self,
        request: esa20240910_models.ListPagesRequest,
    ) -> esa20240910_models.ListPagesResponse:
        """
        @summary Lists all custom error pages that you created. You can define the page number and the number of entries per page to display the response.
        
        @param request: ListPagesRequest
        @return: ListPagesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_pages_with_options(request, runtime)

    async def list_pages_async(
        self,
        request: esa20240910_models.ListPagesRequest,
    ) -> esa20240910_models.ListPagesResponse:
        """
        @summary Lists all custom error pages that you created. You can define the page number and the number of entries per page to display the response.
        
        @param request: ListPagesRequest
        @return: ListPagesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_pages_with_options_async(request, runtime)

    def list_records_with_options(
        self,
        request: esa20240910_models.ListRecordsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListRecordsResponse:
        """
        @summary Queries a list of Domain Name System (DNS) records of a website, including the record value, priority, and authentication configurations. Supports filtering by specifying parameters such as RecordName and RecordMatchType.
        
        @description The DNS records related to Edge Container, Edge Routine, and TCP/UDP proxy are not returned in this operation.
        
        @param request: ListRecordsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListRecordsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListRecords',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListRecordsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_records_with_options_async(
        self,
        request: esa20240910_models.ListRecordsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListRecordsResponse:
        """
        @summary Queries a list of Domain Name System (DNS) records of a website, including the record value, priority, and authentication configurations. Supports filtering by specifying parameters such as RecordName and RecordMatchType.
        
        @description The DNS records related to Edge Container, Edge Routine, and TCP/UDP proxy are not returned in this operation.
        
        @param request: ListRecordsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListRecordsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListRecords',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListRecordsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_records(
        self,
        request: esa20240910_models.ListRecordsRequest,
    ) -> esa20240910_models.ListRecordsResponse:
        """
        @summary Queries a list of Domain Name System (DNS) records of a website, including the record value, priority, and authentication configurations. Supports filtering by specifying parameters such as RecordName and RecordMatchType.
        
        @description The DNS records related to Edge Container, Edge Routine, and TCP/UDP proxy are not returned in this operation.
        
        @param request: ListRecordsRequest
        @return: ListRecordsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_records_with_options(request, runtime)

    async def list_records_async(
        self,
        request: esa20240910_models.ListRecordsRequest,
    ) -> esa20240910_models.ListRecordsResponse:
        """
        @summary Queries a list of Domain Name System (DNS) records of a website, including the record value, priority, and authentication configurations. Supports filtering by specifying parameters such as RecordName and RecordMatchType.
        
        @description The DNS records related to Edge Container, Edge Routine, and TCP/UDP proxy are not returned in this operation.
        
        @param request: ListRecordsRequest
        @return: ListRecordsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_records_with_options_async(request, runtime)

    def list_redirect_rules_with_options(
        self,
        request: esa20240910_models.ListRedirectRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListRedirectRulesResponse:
        """
        @summary Query Redirect Rule List
        
        @param request: ListRedirectRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListRedirectRulesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListRedirectRules',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListRedirectRulesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_redirect_rules_with_options_async(
        self,
        request: esa20240910_models.ListRedirectRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListRedirectRulesResponse:
        """
        @summary Query Redirect Rule List
        
        @param request: ListRedirectRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListRedirectRulesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListRedirectRules',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListRedirectRulesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_redirect_rules(
        self,
        request: esa20240910_models.ListRedirectRulesRequest,
    ) -> esa20240910_models.ListRedirectRulesResponse:
        """
        @summary Query Redirect Rule List
        
        @param request: ListRedirectRulesRequest
        @return: ListRedirectRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_redirect_rules_with_options(request, runtime)

    async def list_redirect_rules_async(
        self,
        request: esa20240910_models.ListRedirectRulesRequest,
    ) -> esa20240910_models.ListRedirectRulesResponse:
        """
        @summary Query Redirect Rule List
        
        @param request: ListRedirectRulesRequest
        @return: ListRedirectRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_redirect_rules_with_options_async(request, runtime)

    def list_rewrite_url_rules_with_options(
        self,
        request: esa20240910_models.ListRewriteUrlRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListRewriteUrlRulesResponse:
        """
        @summary List of Rewrite URL Rules
        
        @param request: ListRewriteUrlRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListRewriteUrlRulesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListRewriteUrlRules',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListRewriteUrlRulesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_rewrite_url_rules_with_options_async(
        self,
        request: esa20240910_models.ListRewriteUrlRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListRewriteUrlRulesResponse:
        """
        @summary List of Rewrite URL Rules
        
        @param request: ListRewriteUrlRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListRewriteUrlRulesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListRewriteUrlRules',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListRewriteUrlRulesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_rewrite_url_rules(
        self,
        request: esa20240910_models.ListRewriteUrlRulesRequest,
    ) -> esa20240910_models.ListRewriteUrlRulesResponse:
        """
        @summary List of Rewrite URL Rules
        
        @param request: ListRewriteUrlRulesRequest
        @return: ListRewriteUrlRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_rewrite_url_rules_with_options(request, runtime)

    async def list_rewrite_url_rules_async(
        self,
        request: esa20240910_models.ListRewriteUrlRulesRequest,
    ) -> esa20240910_models.ListRewriteUrlRulesResponse:
        """
        @summary List of Rewrite URL Rules
        
        @param request: ListRewriteUrlRulesRequest
        @return: ListRewriteUrlRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_rewrite_url_rules_with_options_async(request, runtime)

    def list_routine_canary_areas_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListRoutineCanaryAreasResponse:
        """
        @summary Lists the regions to which Edge Routine code can be released for canary deployment.
        
        @param request: ListRoutineCanaryAreasRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListRoutineCanaryAreasResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='ListRoutineCanaryAreas',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListRoutineCanaryAreasResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_routine_canary_areas_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListRoutineCanaryAreasResponse:
        """
        @summary Lists the regions to which Edge Routine code can be released for canary deployment.
        
        @param request: ListRoutineCanaryAreasRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListRoutineCanaryAreasResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='ListRoutineCanaryAreas',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListRoutineCanaryAreasResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_routine_canary_areas(self) -> esa20240910_models.ListRoutineCanaryAreasResponse:
        """
        @summary Lists the regions to which Edge Routine code can be released for canary deployment.
        
        @return: ListRoutineCanaryAreasResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_routine_canary_areas_with_options(runtime)

    async def list_routine_canary_areas_async(self) -> esa20240910_models.ListRoutineCanaryAreasResponse:
        """
        @summary Lists the regions to which Edge Routine code can be released for canary deployment.
        
        @return: ListRoutineCanaryAreasResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_routine_canary_areas_with_options_async(runtime)

    def list_routine_code_versions_with_options(
        self,
        request: esa20240910_models.ListRoutineCodeVersionsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListRoutineCodeVersionsResponse:
        """
        @summary 查询Routine的代码版本列表
        
        @param request: ListRoutineCodeVersionsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListRoutineCodeVersionsResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.search_key_word):
            body['SearchKeyWord'] = request.search_key_word
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListRoutineCodeVersions',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListRoutineCodeVersionsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_routine_code_versions_with_options_async(
        self,
        request: esa20240910_models.ListRoutineCodeVersionsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListRoutineCodeVersionsResponse:
        """
        @summary 查询Routine的代码版本列表
        
        @param request: ListRoutineCodeVersionsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListRoutineCodeVersionsResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.search_key_word):
            body['SearchKeyWord'] = request.search_key_word
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListRoutineCodeVersions',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListRoutineCodeVersionsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_routine_code_versions(
        self,
        request: esa20240910_models.ListRoutineCodeVersionsRequest,
    ) -> esa20240910_models.ListRoutineCodeVersionsResponse:
        """
        @summary 查询Routine的代码版本列表
        
        @param request: ListRoutineCodeVersionsRequest
        @return: ListRoutineCodeVersionsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_routine_code_versions_with_options(request, runtime)

    async def list_routine_code_versions_async(
        self,
        request: esa20240910_models.ListRoutineCodeVersionsRequest,
    ) -> esa20240910_models.ListRoutineCodeVersionsResponse:
        """
        @summary 查询Routine的代码版本列表
        
        @param request: ListRoutineCodeVersionsRequest
        @return: ListRoutineCodeVersionsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_routine_code_versions_with_options_async(request, runtime)

    def list_routine_related_records_with_options(
        self,
        request: esa20240910_models.ListRoutineRelatedRecordsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListRoutineRelatedRecordsResponse:
        """
        @summary 查询函数关联域名列表
        
        @param request: ListRoutineRelatedRecordsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListRoutineRelatedRecordsResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.search_key_word):
            body['SearchKeyWord'] = request.search_key_word
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListRoutineRelatedRecords',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListRoutineRelatedRecordsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_routine_related_records_with_options_async(
        self,
        request: esa20240910_models.ListRoutineRelatedRecordsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListRoutineRelatedRecordsResponse:
        """
        @summary 查询函数关联域名列表
        
        @param request: ListRoutineRelatedRecordsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListRoutineRelatedRecordsResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.search_key_word):
            body['SearchKeyWord'] = request.search_key_word
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListRoutineRelatedRecords',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListRoutineRelatedRecordsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_routine_related_records(
        self,
        request: esa20240910_models.ListRoutineRelatedRecordsRequest,
    ) -> esa20240910_models.ListRoutineRelatedRecordsResponse:
        """
        @summary 查询函数关联域名列表
        
        @param request: ListRoutineRelatedRecordsRequest
        @return: ListRoutineRelatedRecordsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_routine_related_records_with_options(request, runtime)

    async def list_routine_related_records_async(
        self,
        request: esa20240910_models.ListRoutineRelatedRecordsRequest,
    ) -> esa20240910_models.ListRoutineRelatedRecordsResponse:
        """
        @summary 查询函数关联域名列表
        
        @param request: ListRoutineRelatedRecordsRequest
        @return: ListRoutineRelatedRecordsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_routine_related_records_with_options_async(request, runtime)

    def list_routine_routes_with_options(
        self,
        request: esa20240910_models.ListRoutineRoutesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListRoutineRoutesResponse:
        """
        @summary 查询边缘程序的函数路由列表
        
        @param request: ListRoutineRoutesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListRoutineRoutesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.routine_name):
            query['RoutineName'] = request.routine_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListRoutineRoutes',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListRoutineRoutesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_routine_routes_with_options_async(
        self,
        request: esa20240910_models.ListRoutineRoutesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListRoutineRoutesResponse:
        """
        @summary 查询边缘程序的函数路由列表
        
        @param request: ListRoutineRoutesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListRoutineRoutesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.routine_name):
            query['RoutineName'] = request.routine_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListRoutineRoutes',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListRoutineRoutesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_routine_routes(
        self,
        request: esa20240910_models.ListRoutineRoutesRequest,
    ) -> esa20240910_models.ListRoutineRoutesResponse:
        """
        @summary 查询边缘程序的函数路由列表
        
        @param request: ListRoutineRoutesRequest
        @return: ListRoutineRoutesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_routine_routes_with_options(request, runtime)

    async def list_routine_routes_async(
        self,
        request: esa20240910_models.ListRoutineRoutesRequest,
    ) -> esa20240910_models.ListRoutineRoutesResponse:
        """
        @summary 查询边缘程序的函数路由列表
        
        @param request: ListRoutineRoutesRequest
        @return: ListRoutineRoutesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_routine_routes_with_options_async(request, runtime)

    def list_scheduled_preload_executions_with_options(
        self,
        request: esa20240910_models.ListScheduledPreloadExecutionsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListScheduledPreloadExecutionsResponse:
        """
        @summary Lists the plans in a scheduled prefetch task by task ID.
        
        @param request: ListScheduledPreloadExecutionsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListScheduledPreloadExecutionsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListScheduledPreloadExecutions',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListScheduledPreloadExecutionsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_scheduled_preload_executions_with_options_async(
        self,
        request: esa20240910_models.ListScheduledPreloadExecutionsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListScheduledPreloadExecutionsResponse:
        """
        @summary Lists the plans in a scheduled prefetch task by task ID.
        
        @param request: ListScheduledPreloadExecutionsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListScheduledPreloadExecutionsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListScheduledPreloadExecutions',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListScheduledPreloadExecutionsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_scheduled_preload_executions(
        self,
        request: esa20240910_models.ListScheduledPreloadExecutionsRequest,
    ) -> esa20240910_models.ListScheduledPreloadExecutionsResponse:
        """
        @summary Lists the plans in a scheduled prefetch task by task ID.
        
        @param request: ListScheduledPreloadExecutionsRequest
        @return: ListScheduledPreloadExecutionsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_scheduled_preload_executions_with_options(request, runtime)

    async def list_scheduled_preload_executions_async(
        self,
        request: esa20240910_models.ListScheduledPreloadExecutionsRequest,
    ) -> esa20240910_models.ListScheduledPreloadExecutionsResponse:
        """
        @summary Lists the plans in a scheduled prefetch task by task ID.
        
        @param request: ListScheduledPreloadExecutionsRequest
        @return: ListScheduledPreloadExecutionsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_scheduled_preload_executions_with_options_async(request, runtime)

    def list_scheduled_preload_jobs_with_options(
        self,
        request: esa20240910_models.ListScheduledPreloadJobsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListScheduledPreloadJobsResponse:
        """
        @summary Queries the scheduled prefetch tasks for a website.
        
        @param request: ListScheduledPreloadJobsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListScheduledPreloadJobsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListScheduledPreloadJobs',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListScheduledPreloadJobsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_scheduled_preload_jobs_with_options_async(
        self,
        request: esa20240910_models.ListScheduledPreloadJobsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListScheduledPreloadJobsResponse:
        """
        @summary Queries the scheduled prefetch tasks for a website.
        
        @param request: ListScheduledPreloadJobsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListScheduledPreloadJobsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListScheduledPreloadJobs',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListScheduledPreloadJobsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_scheduled_preload_jobs(
        self,
        request: esa20240910_models.ListScheduledPreloadJobsRequest,
    ) -> esa20240910_models.ListScheduledPreloadJobsResponse:
        """
        @summary Queries the scheduled prefetch tasks for a website.
        
        @param request: ListScheduledPreloadJobsRequest
        @return: ListScheduledPreloadJobsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_scheduled_preload_jobs_with_options(request, runtime)

    async def list_scheduled_preload_jobs_async(
        self,
        request: esa20240910_models.ListScheduledPreloadJobsRequest,
    ) -> esa20240910_models.ListScheduledPreloadJobsResponse:
        """
        @summary Queries the scheduled prefetch tasks for a website.
        
        @param request: ListScheduledPreloadJobsRequest
        @return: ListScheduledPreloadJobsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_scheduled_preload_jobs_with_options_async(request, runtime)

    def list_site_delivery_tasks_with_options(
        self,
        request: esa20240910_models.ListSiteDeliveryTasksRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListSiteDeliveryTasksResponse:
        """
        @summary Lists all log delivery tasks that are in progress.
        
        @param request: ListSiteDeliveryTasksRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListSiteDeliveryTasksResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListSiteDeliveryTasks',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListSiteDeliveryTasksResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_site_delivery_tasks_with_options_async(
        self,
        request: esa20240910_models.ListSiteDeliveryTasksRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListSiteDeliveryTasksResponse:
        """
        @summary Lists all log delivery tasks that are in progress.
        
        @param request: ListSiteDeliveryTasksRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListSiteDeliveryTasksResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListSiteDeliveryTasks',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListSiteDeliveryTasksResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_site_delivery_tasks(
        self,
        request: esa20240910_models.ListSiteDeliveryTasksRequest,
    ) -> esa20240910_models.ListSiteDeliveryTasksResponse:
        """
        @summary Lists all log delivery tasks that are in progress.
        
        @param request: ListSiteDeliveryTasksRequest
        @return: ListSiteDeliveryTasksResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_site_delivery_tasks_with_options(request, runtime)

    async def list_site_delivery_tasks_async(
        self,
        request: esa20240910_models.ListSiteDeliveryTasksRequest,
    ) -> esa20240910_models.ListSiteDeliveryTasksResponse:
        """
        @summary Lists all log delivery tasks that are in progress.
        
        @param request: ListSiteDeliveryTasksRequest
        @return: ListSiteDeliveryTasksResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_site_delivery_tasks_with_options_async(request, runtime)

    def list_site_routes_with_options(
        self,
        request: esa20240910_models.ListSiteRoutesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListSiteRoutesResponse:
        """
        @summary 查询站点的函数路由列表
        
        @param request: ListSiteRoutesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListSiteRoutesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.config_type):
            query['ConfigType'] = request.config_type
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.route_name):
            query['RouteName'] = request.route_name
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListSiteRoutes',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListSiteRoutesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_site_routes_with_options_async(
        self,
        request: esa20240910_models.ListSiteRoutesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListSiteRoutesResponse:
        """
        @summary 查询站点的函数路由列表
        
        @param request: ListSiteRoutesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListSiteRoutesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.config_type):
            query['ConfigType'] = request.config_type
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.route_name):
            query['RouteName'] = request.route_name
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListSiteRoutes',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListSiteRoutesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_site_routes(
        self,
        request: esa20240910_models.ListSiteRoutesRequest,
    ) -> esa20240910_models.ListSiteRoutesResponse:
        """
        @summary 查询站点的函数路由列表
        
        @param request: ListSiteRoutesRequest
        @return: ListSiteRoutesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_site_routes_with_options(request, runtime)

    async def list_site_routes_async(
        self,
        request: esa20240910_models.ListSiteRoutesRequest,
    ) -> esa20240910_models.ListSiteRoutesResponse:
        """
        @summary 查询站点的函数路由列表
        
        @param request: ListSiteRoutesRequest
        @return: ListSiteRoutesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_site_routes_with_options_async(request, runtime)

    def list_sites_with_options(
        self,
        tmp_req: esa20240910_models.ListSitesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListSitesResponse:
        """
        @summary Queries the information about websites in your account, such as the name, status, and configuration of each website.
        
        @param tmp_req: ListSitesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListSitesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.ListSitesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.tag_filter):
            request.tag_filter_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tag_filter, 'TagFilter', 'json')
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListSites',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListSitesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_sites_with_options_async(
        self,
        tmp_req: esa20240910_models.ListSitesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListSitesResponse:
        """
        @summary Queries the information about websites in your account, such as the name, status, and configuration of each website.
        
        @param tmp_req: ListSitesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListSitesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.ListSitesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.tag_filter):
            request.tag_filter_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tag_filter, 'TagFilter', 'json')
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListSites',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListSitesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_sites(
        self,
        request: esa20240910_models.ListSitesRequest,
    ) -> esa20240910_models.ListSitesResponse:
        """
        @summary Queries the information about websites in your account, such as the name, status, and configuration of each website.
        
        @param request: ListSitesRequest
        @return: ListSitesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_sites_with_options(request, runtime)

    async def list_sites_async(
        self,
        request: esa20240910_models.ListSitesRequest,
    ) -> esa20240910_models.ListSitesResponse:
        """
        @summary Queries the information about websites in your account, such as the name, status, and configuration of each website.
        
        @param request: ListSitesRequest
        @return: ListSitesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_sites_with_options_async(request, runtime)

    def list_tag_resources_with_options(
        self,
        request: esa20240910_models.ListTagResourcesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListTagResourcesResponse:
        """
        @summary Queries tags based on the region ID and resource type.
        
        @param request: ListTagResourcesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListTagResourcesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.max_item):
            query['MaxItem'] = request.max_item
        if not UtilClient.is_unset(request.next_token):
            query['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.owner_id):
            query['OwnerId'] = request.owner_id
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        if not UtilClient.is_unset(request.resource_id):
            query['ResourceId'] = request.resource_id
        if not UtilClient.is_unset(request.resource_type):
            query['ResourceType'] = request.resource_type
        if not UtilClient.is_unset(request.security_token):
            query['SecurityToken'] = request.security_token
        if not UtilClient.is_unset(request.tag):
            query['Tag'] = request.tag
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListTagResources',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListTagResourcesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_tag_resources_with_options_async(
        self,
        request: esa20240910_models.ListTagResourcesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListTagResourcesResponse:
        """
        @summary Queries tags based on the region ID and resource type.
        
        @param request: ListTagResourcesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListTagResourcesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.max_item):
            query['MaxItem'] = request.max_item
        if not UtilClient.is_unset(request.next_token):
            query['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.owner_id):
            query['OwnerId'] = request.owner_id
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        if not UtilClient.is_unset(request.resource_id):
            query['ResourceId'] = request.resource_id
        if not UtilClient.is_unset(request.resource_type):
            query['ResourceType'] = request.resource_type
        if not UtilClient.is_unset(request.security_token):
            query['SecurityToken'] = request.security_token
        if not UtilClient.is_unset(request.tag):
            query['Tag'] = request.tag
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListTagResources',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListTagResourcesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_tag_resources(
        self,
        request: esa20240910_models.ListTagResourcesRequest,
    ) -> esa20240910_models.ListTagResourcesResponse:
        """
        @summary Queries tags based on the region ID and resource type.
        
        @param request: ListTagResourcesRequest
        @return: ListTagResourcesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_tag_resources_with_options(request, runtime)

    async def list_tag_resources_async(
        self,
        request: esa20240910_models.ListTagResourcesRequest,
    ) -> esa20240910_models.ListTagResourcesResponse:
        """
        @summary Queries tags based on the region ID and resource type.
        
        @param request: ListTagResourcesRequest
        @return: ListTagResourcesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_tag_resources_with_options_async(request, runtime)

    def list_transport_layer_applications_with_options(
        self,
        request: esa20240910_models.ListTransportLayerApplicationsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListTransportLayerApplicationsResponse:
        """
        @summary List of Transport Layer Applications
        
        @param request: ListTransportLayerApplicationsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListTransportLayerApplicationsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListTransportLayerApplications',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListTransportLayerApplicationsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_transport_layer_applications_with_options_async(
        self,
        request: esa20240910_models.ListTransportLayerApplicationsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListTransportLayerApplicationsResponse:
        """
        @summary List of Transport Layer Applications
        
        @param request: ListTransportLayerApplicationsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListTransportLayerApplicationsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListTransportLayerApplications',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListTransportLayerApplicationsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_transport_layer_applications(
        self,
        request: esa20240910_models.ListTransportLayerApplicationsRequest,
    ) -> esa20240910_models.ListTransportLayerApplicationsResponse:
        """
        @summary List of Transport Layer Applications
        
        @param request: ListTransportLayerApplicationsRequest
        @return: ListTransportLayerApplicationsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_transport_layer_applications_with_options(request, runtime)

    async def list_transport_layer_applications_async(
        self,
        request: esa20240910_models.ListTransportLayerApplicationsRequest,
    ) -> esa20240910_models.ListTransportLayerApplicationsResponse:
        """
        @summary List of Transport Layer Applications
        
        @param request: ListTransportLayerApplicationsRequest
        @return: ListTransportLayerApplicationsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_transport_layer_applications_with_options_async(request, runtime)

    def list_upload_tasks_with_options(
        self,
        request: esa20240910_models.ListUploadTasksRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListUploadTasksResponse:
        """
        @summary Queries the execution status and running information of file upload tasks based on the task time and type.
        
        @param request: ListUploadTasksRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListUploadTasksResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListUploadTasks',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListUploadTasksResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_upload_tasks_with_options_async(
        self,
        request: esa20240910_models.ListUploadTasksRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListUploadTasksResponse:
        """
        @summary Queries the execution status and running information of file upload tasks based on the task time and type.
        
        @param request: ListUploadTasksRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListUploadTasksResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListUploadTasks',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListUploadTasksResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_upload_tasks(
        self,
        request: esa20240910_models.ListUploadTasksRequest,
    ) -> esa20240910_models.ListUploadTasksResponse:
        """
        @summary Queries the execution status and running information of file upload tasks based on the task time and type.
        
        @param request: ListUploadTasksRequest
        @return: ListUploadTasksResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_upload_tasks_with_options(request, runtime)

    async def list_upload_tasks_async(
        self,
        request: esa20240910_models.ListUploadTasksRequest,
    ) -> esa20240910_models.ListUploadTasksResponse:
        """
        @summary Queries the execution status and running information of file upload tasks based on the task time and type.
        
        @param request: ListUploadTasksRequest
        @return: ListUploadTasksResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_upload_tasks_with_options_async(request, runtime)

    def list_url_observations_with_options(
        self,
        request: esa20240910_models.ListUrlObservationsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListUrlObservationsResponse:
        """
        @summary 查询网页观测配置列表
        
        @param request: ListUrlObservationsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListUrlObservationsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListUrlObservations',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListUrlObservationsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_url_observations_with_options_async(
        self,
        request: esa20240910_models.ListUrlObservationsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListUrlObservationsResponse:
        """
        @summary 查询网页观测配置列表
        
        @param request: ListUrlObservationsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListUrlObservationsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListUrlObservations',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListUrlObservationsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_url_observations(
        self,
        request: esa20240910_models.ListUrlObservationsRequest,
    ) -> esa20240910_models.ListUrlObservationsResponse:
        """
        @summary 查询网页观测配置列表
        
        @param request: ListUrlObservationsRequest
        @return: ListUrlObservationsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_url_observations_with_options(request, runtime)

    async def list_url_observations_async(
        self,
        request: esa20240910_models.ListUrlObservationsRequest,
    ) -> esa20240910_models.ListUrlObservationsResponse:
        """
        @summary 查询网页观测配置列表
        
        @param request: ListUrlObservationsRequest
        @return: ListUrlObservationsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_url_observations_with_options_async(request, runtime)

    def list_user_delivery_tasks_with_options(
        self,
        request: esa20240910_models.ListUserDeliveryTasksRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListUserDeliveryTasksResponse:
        """
        @summary Queries all delivery tasks in your Alibaba Cloud account by page. You can filter the delivery tasks by the category of the delivered real-time logs.
        
        @param request: ListUserDeliveryTasksRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListUserDeliveryTasksResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListUserDeliveryTasks',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListUserDeliveryTasksResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_user_delivery_tasks_with_options_async(
        self,
        request: esa20240910_models.ListUserDeliveryTasksRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListUserDeliveryTasksResponse:
        """
        @summary Queries all delivery tasks in your Alibaba Cloud account by page. You can filter the delivery tasks by the category of the delivered real-time logs.
        
        @param request: ListUserDeliveryTasksRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListUserDeliveryTasksResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListUserDeliveryTasks',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListUserDeliveryTasksResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_user_delivery_tasks(
        self,
        request: esa20240910_models.ListUserDeliveryTasksRequest,
    ) -> esa20240910_models.ListUserDeliveryTasksResponse:
        """
        @summary Queries all delivery tasks in your Alibaba Cloud account by page. You can filter the delivery tasks by the category of the delivered real-time logs.
        
        @param request: ListUserDeliveryTasksRequest
        @return: ListUserDeliveryTasksResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_user_delivery_tasks_with_options(request, runtime)

    async def list_user_delivery_tasks_async(
        self,
        request: esa20240910_models.ListUserDeliveryTasksRequest,
    ) -> esa20240910_models.ListUserDeliveryTasksResponse:
        """
        @summary Queries all delivery tasks in your Alibaba Cloud account by page. You can filter the delivery tasks by the category of the delivered real-time logs.
        
        @param request: ListUserDeliveryTasksRequest
        @return: ListUserDeliveryTasksResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_user_delivery_tasks_with_options_async(request, runtime)

    def list_user_rate_plan_instances_with_options(
        self,
        request: esa20240910_models.ListUserRatePlanInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListUserRatePlanInstancesResponse:
        """
        @summary Queries the plans that you purchased and the details of the plans.
        
        @param request: ListUserRatePlanInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListUserRatePlanInstancesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListUserRatePlanInstances',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListUserRatePlanInstancesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_user_rate_plan_instances_with_options_async(
        self,
        request: esa20240910_models.ListUserRatePlanInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListUserRatePlanInstancesResponse:
        """
        @summary Queries the plans that you purchased and the details of the plans.
        
        @param request: ListUserRatePlanInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListUserRatePlanInstancesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListUserRatePlanInstances',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListUserRatePlanInstancesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_user_rate_plan_instances(
        self,
        request: esa20240910_models.ListUserRatePlanInstancesRequest,
    ) -> esa20240910_models.ListUserRatePlanInstancesResponse:
        """
        @summary Queries the plans that you purchased and the details of the plans.
        
        @param request: ListUserRatePlanInstancesRequest
        @return: ListUserRatePlanInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_user_rate_plan_instances_with_options(request, runtime)

    async def list_user_rate_plan_instances_async(
        self,
        request: esa20240910_models.ListUserRatePlanInstancesRequest,
    ) -> esa20240910_models.ListUserRatePlanInstancesResponse:
        """
        @summary Queries the plans that you purchased and the details of the plans.
        
        @param request: ListUserRatePlanInstancesRequest
        @return: ListUserRatePlanInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_user_rate_plan_instances_with_options_async(request, runtime)

    def list_user_routines_with_options(
        self,
        request: esa20240910_models.ListUserRoutinesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListUserRoutinesResponse:
        """
        @summary 查询用户的Routine列表
        
        @param request: ListUserRoutinesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListUserRoutinesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.search_key_word):
            query['SearchKeyWord'] = request.search_key_word
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListUserRoutines',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListUserRoutinesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_user_routines_with_options_async(
        self,
        request: esa20240910_models.ListUserRoutinesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListUserRoutinesResponse:
        """
        @summary 查询用户的Routine列表
        
        @param request: ListUserRoutinesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListUserRoutinesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.search_key_word):
            query['SearchKeyWord'] = request.search_key_word
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListUserRoutines',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListUserRoutinesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_user_routines(
        self,
        request: esa20240910_models.ListUserRoutinesRequest,
    ) -> esa20240910_models.ListUserRoutinesResponse:
        """
        @summary 查询用户的Routine列表
        
        @param request: ListUserRoutinesRequest
        @return: ListUserRoutinesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_user_routines_with_options(request, runtime)

    async def list_user_routines_async(
        self,
        request: esa20240910_models.ListUserRoutinesRequest,
    ) -> esa20240910_models.ListUserRoutinesResponse:
        """
        @summary 查询用户的Routine列表
        
        @param request: ListUserRoutinesRequest
        @return: ListUserRoutinesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_user_routines_with_options_async(request, runtime)

    def list_video_processings_with_options(
        self,
        request: esa20240910_models.ListVideoProcessingsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListVideoProcessingsResponse:
        """
        @summary 查询站点视频处理配置列表
        
        @param request: ListVideoProcessingsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListVideoProcessingsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.config_type):
            query['ConfigType'] = request.config_type
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListVideoProcessings',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListVideoProcessingsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_video_processings_with_options_async(
        self,
        request: esa20240910_models.ListVideoProcessingsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListVideoProcessingsResponse:
        """
        @summary 查询站点视频处理配置列表
        
        @param request: ListVideoProcessingsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListVideoProcessingsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.config_type):
            query['ConfigType'] = request.config_type
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListVideoProcessings',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListVideoProcessingsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_video_processings(
        self,
        request: esa20240910_models.ListVideoProcessingsRequest,
    ) -> esa20240910_models.ListVideoProcessingsResponse:
        """
        @summary 查询站点视频处理配置列表
        
        @param request: ListVideoProcessingsRequest
        @return: ListVideoProcessingsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_video_processings_with_options(request, runtime)

    async def list_video_processings_async(
        self,
        request: esa20240910_models.ListVideoProcessingsRequest,
    ) -> esa20240910_models.ListVideoProcessingsResponse:
        """
        @summary 查询站点视频处理配置列表
        
        @param request: ListVideoProcessingsRequest
        @return: ListVideoProcessingsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_video_processings_with_options_async(request, runtime)

    def list_waf_managed_rules_with_options(
        self,
        tmp_req: esa20240910_models.ListWafManagedRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListWafManagedRulesResponse:
        """
        @summary List WAF Managed Rules
        
        @param tmp_req: ListWafManagedRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListWafManagedRulesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.ListWafManagedRulesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.query_args):
            request.query_args_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.query_args, 'QueryArgs', 'json')
        query = {}
        if not UtilClient.is_unset(request.attack_type):
            query['AttackType'] = request.attack_type
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.language):
            query['Language'] = request.language
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.protection_level):
            query['ProtectionLevel'] = request.protection_level
        if not UtilClient.is_unset(request.query_args_shrink):
            query['QueryArgs'] = request.query_args_shrink
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListWafManagedRules',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListWafManagedRulesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_waf_managed_rules_with_options_async(
        self,
        tmp_req: esa20240910_models.ListWafManagedRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListWafManagedRulesResponse:
        """
        @summary List WAF Managed Rules
        
        @param tmp_req: ListWafManagedRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListWafManagedRulesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.ListWafManagedRulesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.query_args):
            request.query_args_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.query_args, 'QueryArgs', 'json')
        query = {}
        if not UtilClient.is_unset(request.attack_type):
            query['AttackType'] = request.attack_type
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.language):
            query['Language'] = request.language
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.protection_level):
            query['ProtectionLevel'] = request.protection_level
        if not UtilClient.is_unset(request.query_args_shrink):
            query['QueryArgs'] = request.query_args_shrink
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListWafManagedRules',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListWafManagedRulesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_waf_managed_rules(
        self,
        request: esa20240910_models.ListWafManagedRulesRequest,
    ) -> esa20240910_models.ListWafManagedRulesResponse:
        """
        @summary List WAF Managed Rules
        
        @param request: ListWafManagedRulesRequest
        @return: ListWafManagedRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_waf_managed_rules_with_options(request, runtime)

    async def list_waf_managed_rules_async(
        self,
        request: esa20240910_models.ListWafManagedRulesRequest,
    ) -> esa20240910_models.ListWafManagedRulesResponse:
        """
        @summary List WAF Managed Rules
        
        @param request: ListWafManagedRulesRequest
        @return: ListWafManagedRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_waf_managed_rules_with_options_async(request, runtime)

    def list_waf_phases_with_options(
        self,
        request: esa20240910_models.ListWafPhasesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListWafPhasesResponse:
        """
        @summary List WAF Phases
        
        @param request: ListWafPhasesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListWafPhasesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListWafPhases',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListWafPhasesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_waf_phases_with_options_async(
        self,
        request: esa20240910_models.ListWafPhasesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListWafPhasesResponse:
        """
        @summary List WAF Phases
        
        @param request: ListWafPhasesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListWafPhasesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListWafPhases',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListWafPhasesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_waf_phases(
        self,
        request: esa20240910_models.ListWafPhasesRequest,
    ) -> esa20240910_models.ListWafPhasesResponse:
        """
        @summary List WAF Phases
        
        @param request: ListWafPhasesRequest
        @return: ListWafPhasesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_waf_phases_with_options(request, runtime)

    async def list_waf_phases_async(
        self,
        request: esa20240910_models.ListWafPhasesRequest,
    ) -> esa20240910_models.ListWafPhasesResponse:
        """
        @summary List WAF Phases
        
        @param request: ListWafPhasesRequest
        @return: ListWafPhasesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_waf_phases_with_options_async(request, runtime)

    def list_waf_rules_with_options(
        self,
        tmp_req: esa20240910_models.ListWafRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListWafRulesResponse:
        """
        @summary List WAF Rules
        
        @param tmp_req: ListWafRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListWafRulesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.ListWafRulesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.query_args):
            request.query_args_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.query_args, 'QueryArgs', 'json')
        query = {}
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.phase):
            query['Phase'] = request.phase
        if not UtilClient.is_unset(request.query_args_shrink):
            query['QueryArgs'] = request.query_args_shrink
        if not UtilClient.is_unset(request.ruleset_id):
            query['RulesetId'] = request.ruleset_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListWafRules',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListWafRulesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_waf_rules_with_options_async(
        self,
        tmp_req: esa20240910_models.ListWafRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListWafRulesResponse:
        """
        @summary List WAF Rules
        
        @param tmp_req: ListWafRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListWafRulesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.ListWafRulesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.query_args):
            request.query_args_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.query_args, 'QueryArgs', 'json')
        query = {}
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.phase):
            query['Phase'] = request.phase
        if not UtilClient.is_unset(request.query_args_shrink):
            query['QueryArgs'] = request.query_args_shrink
        if not UtilClient.is_unset(request.ruleset_id):
            query['RulesetId'] = request.ruleset_id
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListWafRules',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListWafRulesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_waf_rules(
        self,
        request: esa20240910_models.ListWafRulesRequest,
    ) -> esa20240910_models.ListWafRulesResponse:
        """
        @summary List WAF Rules
        
        @param request: ListWafRulesRequest
        @return: ListWafRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_waf_rules_with_options(request, runtime)

    async def list_waf_rules_async(
        self,
        request: esa20240910_models.ListWafRulesRequest,
    ) -> esa20240910_models.ListWafRulesResponse:
        """
        @summary List WAF Rules
        
        @param request: ListWafRulesRequest
        @return: ListWafRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_waf_rules_with_options_async(request, runtime)

    def list_waf_rulesets_with_options(
        self,
        tmp_req: esa20240910_models.ListWafRulesetsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListWafRulesetsResponse:
        """
        @summary List WAF Rule Sets
        
        @param tmp_req: ListWafRulesetsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListWafRulesetsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.ListWafRulesetsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.query_args):
            request.query_args_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.query_args, 'QueryArgs', 'json')
        query = {}
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.phase):
            query['Phase'] = request.phase
        if not UtilClient.is_unset(request.query_args_shrink):
            query['QueryArgs'] = request.query_args_shrink
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListWafRulesets',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListWafRulesetsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_waf_rulesets_with_options_async(
        self,
        tmp_req: esa20240910_models.ListWafRulesetsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListWafRulesetsResponse:
        """
        @summary List WAF Rule Sets
        
        @param tmp_req: ListWafRulesetsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListWafRulesetsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.ListWafRulesetsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.query_args):
            request.query_args_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.query_args, 'QueryArgs', 'json')
        query = {}
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.phase):
            query['Phase'] = request.phase
        if not UtilClient.is_unset(request.query_args_shrink):
            query['QueryArgs'] = request.query_args_shrink
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListWafRulesets',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListWafRulesetsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_waf_rulesets(
        self,
        request: esa20240910_models.ListWafRulesetsRequest,
    ) -> esa20240910_models.ListWafRulesetsResponse:
        """
        @summary List WAF Rule Sets
        
        @param request: ListWafRulesetsRequest
        @return: ListWafRulesetsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_waf_rulesets_with_options(request, runtime)

    async def list_waf_rulesets_async(
        self,
        request: esa20240910_models.ListWafRulesetsRequest,
    ) -> esa20240910_models.ListWafRulesetsResponse:
        """
        @summary List WAF Rule Sets
        
        @param request: ListWafRulesetsRequest
        @return: ListWafRulesetsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_waf_rulesets_with_options_async(request, runtime)

    def list_waf_template_rules_with_options(
        self,
        tmp_req: esa20240910_models.ListWafTemplateRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListWafTemplateRulesResponse:
        """
        @summary List WAF Template Rules
        
        @param tmp_req: ListWafTemplateRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListWafTemplateRulesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.ListWafTemplateRulesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.query_args):
            request.query_args_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.query_args, 'QueryArgs', 'json')
        query = {}
        if not UtilClient.is_unset(request.phase):
            query['Phase'] = request.phase
        if not UtilClient.is_unset(request.query_args_shrink):
            query['QueryArgs'] = request.query_args_shrink
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListWafTemplateRules',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListWafTemplateRulesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_waf_template_rules_with_options_async(
        self,
        tmp_req: esa20240910_models.ListWafTemplateRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListWafTemplateRulesResponse:
        """
        @summary List WAF Template Rules
        
        @param tmp_req: ListWafTemplateRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListWafTemplateRulesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.ListWafTemplateRulesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.query_args):
            request.query_args_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.query_args, 'QueryArgs', 'json')
        query = {}
        if not UtilClient.is_unset(request.phase):
            query['Phase'] = request.phase
        if not UtilClient.is_unset(request.query_args_shrink):
            query['QueryArgs'] = request.query_args_shrink
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListWafTemplateRules',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListWafTemplateRulesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_waf_template_rules(
        self,
        request: esa20240910_models.ListWafTemplateRulesRequest,
    ) -> esa20240910_models.ListWafTemplateRulesResponse:
        """
        @summary List WAF Template Rules
        
        @param request: ListWafTemplateRulesRequest
        @return: ListWafTemplateRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_waf_template_rules_with_options(request, runtime)

    async def list_waf_template_rules_async(
        self,
        request: esa20240910_models.ListWafTemplateRulesRequest,
    ) -> esa20240910_models.ListWafTemplateRulesResponse:
        """
        @summary List WAF Template Rules
        
        @param request: ListWafTemplateRulesRequest
        @return: ListWafTemplateRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_waf_template_rules_with_options_async(request, runtime)

    def list_waf_usage_of_rules_with_options(
        self,
        request: esa20240910_models.ListWafUsageOfRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListWafUsageOfRulesResponse:
        """
        @summary List WAF Rule Usage
        
        @param request: ListWafUsageOfRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListWafUsageOfRulesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.phase):
            query['Phase'] = request.phase
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListWafUsageOfRules',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListWafUsageOfRulesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_waf_usage_of_rules_with_options_async(
        self,
        request: esa20240910_models.ListWafUsageOfRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListWafUsageOfRulesResponse:
        """
        @summary List WAF Rule Usage
        
        @param request: ListWafUsageOfRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListWafUsageOfRulesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.phase):
            query['Phase'] = request.phase
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListWafUsageOfRules',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListWafUsageOfRulesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_waf_usage_of_rules(
        self,
        request: esa20240910_models.ListWafUsageOfRulesRequest,
    ) -> esa20240910_models.ListWafUsageOfRulesResponse:
        """
        @summary List WAF Rule Usage
        
        @param request: ListWafUsageOfRulesRequest
        @return: ListWafUsageOfRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_waf_usage_of_rules_with_options(request, runtime)

    async def list_waf_usage_of_rules_async(
        self,
        request: esa20240910_models.ListWafUsageOfRulesRequest,
    ) -> esa20240910_models.ListWafUsageOfRulesResponse:
        """
        @summary List WAF Rule Usage
        
        @param request: ListWafUsageOfRulesRequest
        @return: ListWafUsageOfRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_waf_usage_of_rules_with_options_async(request, runtime)

    def list_waiting_room_events_with_options(
        self,
        request: esa20240910_models.ListWaitingRoomEventsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListWaitingRoomEventsResponse:
        """
        @summary Queries the information about waiting room events for a waiting room.
        
        @description You can call this operation to query details of all waiting room events related to a waiting room in a website.
        
        @param request: ListWaitingRoomEventsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListWaitingRoomEventsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListWaitingRoomEvents',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListWaitingRoomEventsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_waiting_room_events_with_options_async(
        self,
        request: esa20240910_models.ListWaitingRoomEventsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListWaitingRoomEventsResponse:
        """
        @summary Queries the information about waiting room events for a waiting room.
        
        @description You can call this operation to query details of all waiting room events related to a waiting room in a website.
        
        @param request: ListWaitingRoomEventsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListWaitingRoomEventsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListWaitingRoomEvents',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListWaitingRoomEventsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_waiting_room_events(
        self,
        request: esa20240910_models.ListWaitingRoomEventsRequest,
    ) -> esa20240910_models.ListWaitingRoomEventsResponse:
        """
        @summary Queries the information about waiting room events for a waiting room.
        
        @description You can call this operation to query details of all waiting room events related to a waiting room in a website.
        
        @param request: ListWaitingRoomEventsRequest
        @return: ListWaitingRoomEventsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_waiting_room_events_with_options(request, runtime)

    async def list_waiting_room_events_async(
        self,
        request: esa20240910_models.ListWaitingRoomEventsRequest,
    ) -> esa20240910_models.ListWaitingRoomEventsResponse:
        """
        @summary Queries the information about waiting room events for a waiting room.
        
        @description You can call this operation to query details of all waiting room events related to a waiting room in a website.
        
        @param request: ListWaitingRoomEventsRequest
        @return: ListWaitingRoomEventsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_waiting_room_events_with_options_async(request, runtime)

    def list_waiting_room_rules_with_options(
        self,
        request: esa20240910_models.ListWaitingRoomRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListWaitingRoomRulesResponse:
        """
        @summary Query Waiting Room Bypass Rules
        
        @description This API allows users to query the list of waiting room bypass rules associated with a specific site.
        
        @param request: ListWaitingRoomRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListWaitingRoomRulesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListWaitingRoomRules',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListWaitingRoomRulesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_waiting_room_rules_with_options_async(
        self,
        request: esa20240910_models.ListWaitingRoomRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListWaitingRoomRulesResponse:
        """
        @summary Query Waiting Room Bypass Rules
        
        @description This API allows users to query the list of waiting room bypass rules associated with a specific site.
        
        @param request: ListWaitingRoomRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListWaitingRoomRulesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListWaitingRoomRules',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListWaitingRoomRulesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_waiting_room_rules(
        self,
        request: esa20240910_models.ListWaitingRoomRulesRequest,
    ) -> esa20240910_models.ListWaitingRoomRulesResponse:
        """
        @summary Query Waiting Room Bypass Rules
        
        @description This API allows users to query the list of waiting room bypass rules associated with a specific site.
        
        @param request: ListWaitingRoomRulesRequest
        @return: ListWaitingRoomRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_waiting_room_rules_with_options(request, runtime)

    async def list_waiting_room_rules_async(
        self,
        request: esa20240910_models.ListWaitingRoomRulesRequest,
    ) -> esa20240910_models.ListWaitingRoomRulesResponse:
        """
        @summary Query Waiting Room Bypass Rules
        
        @description This API allows users to query the list of waiting room bypass rules associated with a specific site.
        
        @param request: ListWaitingRoomRulesRequest
        @return: ListWaitingRoomRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_waiting_room_rules_with_options_async(request, runtime)

    def list_waiting_rooms_with_options(
        self,
        request: esa20240910_models.ListWaitingRoomsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListWaitingRoomsResponse:
        """
        @summary Queries the information about all waiting rooms in a website.
        
        @description You can call this operation to query detailed configurations about all waiting rooms in a website, including the status, name, and queuing rules of each waiting room.
        
        @param request: ListWaitingRoomsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListWaitingRoomsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListWaitingRooms',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListWaitingRoomsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_waiting_rooms_with_options_async(
        self,
        request: esa20240910_models.ListWaitingRoomsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ListWaitingRoomsResponse:
        """
        @summary Queries the information about all waiting rooms in a website.
        
        @description You can call this operation to query detailed configurations about all waiting rooms in a website, including the status, name, and queuing rules of each waiting room.
        
        @param request: ListWaitingRoomsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListWaitingRoomsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListWaitingRooms',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ListWaitingRoomsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_waiting_rooms(
        self,
        request: esa20240910_models.ListWaitingRoomsRequest,
    ) -> esa20240910_models.ListWaitingRoomsResponse:
        """
        @summary Queries the information about all waiting rooms in a website.
        
        @description You can call this operation to query detailed configurations about all waiting rooms in a website, including the status, name, and queuing rules of each waiting room.
        
        @param request: ListWaitingRoomsRequest
        @return: ListWaitingRoomsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_waiting_rooms_with_options(request, runtime)

    async def list_waiting_rooms_async(
        self,
        request: esa20240910_models.ListWaitingRoomsRequest,
    ) -> esa20240910_models.ListWaitingRoomsResponse:
        """
        @summary Queries the information about all waiting rooms in a website.
        
        @description You can call this operation to query detailed configurations about all waiting rooms in a website, including the status, name, and queuing rules of each waiting room.
        
        @param request: ListWaitingRoomsRequest
        @return: ListWaitingRoomsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_waiting_rooms_with_options_async(request, runtime)

    def open_er_service_with_options(
        self,
        request: esa20240910_models.OpenErServiceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.OpenErServiceResponse:
        """
        @summary OpenErService
        
        @param request: OpenErServiceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OpenErServiceResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.owner_id):
            query['OwnerId'] = request.owner_id
        if not UtilClient.is_unset(request.security_token):
            query['SecurityToken'] = request.security_token
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OpenErService',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.OpenErServiceResponse(),
            self.call_api(params, req, runtime)
        )

    async def open_er_service_with_options_async(
        self,
        request: esa20240910_models.OpenErServiceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.OpenErServiceResponse:
        """
        @summary OpenErService
        
        @param request: OpenErServiceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OpenErServiceResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.owner_id):
            query['OwnerId'] = request.owner_id
        if not UtilClient.is_unset(request.security_token):
            query['SecurityToken'] = request.security_token
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OpenErService',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.OpenErServiceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def open_er_service(
        self,
        request: esa20240910_models.OpenErServiceRequest,
    ) -> esa20240910_models.OpenErServiceResponse:
        """
        @summary OpenErService
        
        @param request: OpenErServiceRequest
        @return: OpenErServiceResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.open_er_service_with_options(request, runtime)

    async def open_er_service_async(
        self,
        request: esa20240910_models.OpenErServiceRequest,
    ) -> esa20240910_models.OpenErServiceResponse:
        """
        @summary OpenErService
        
        @param request: OpenErServiceRequest
        @return: OpenErServiceResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.open_er_service_with_options_async(request, runtime)

    def preload_caches_with_options(
        self,
        tmp_req: esa20240910_models.PreloadCachesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.PreloadCachesResponse:
        """
        @summary Prefetches cache.
        
        @param tmp_req: PreloadCachesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: PreloadCachesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.PreloadCachesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.content):
            request.content_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.content, 'Content', 'json')
        if not UtilClient.is_unset(tmp_req.headers):
            request.headers_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.headers, 'Headers', 'json')
        query = {}
        if not UtilClient.is_unset(request.content_shrink):
            query['Content'] = request.content_shrink
        if not UtilClient.is_unset(request.headers_shrink):
            query['Headers'] = request.headers_shrink
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='PreloadCaches',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.PreloadCachesResponse(),
            self.call_api(params, req, runtime)
        )

    async def preload_caches_with_options_async(
        self,
        tmp_req: esa20240910_models.PreloadCachesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.PreloadCachesResponse:
        """
        @summary Prefetches cache.
        
        @param tmp_req: PreloadCachesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: PreloadCachesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.PreloadCachesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.content):
            request.content_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.content, 'Content', 'json')
        if not UtilClient.is_unset(tmp_req.headers):
            request.headers_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.headers, 'Headers', 'json')
        query = {}
        if not UtilClient.is_unset(request.content_shrink):
            query['Content'] = request.content_shrink
        if not UtilClient.is_unset(request.headers_shrink):
            query['Headers'] = request.headers_shrink
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='PreloadCaches',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.PreloadCachesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def preload_caches(
        self,
        request: esa20240910_models.PreloadCachesRequest,
    ) -> esa20240910_models.PreloadCachesResponse:
        """
        @summary Prefetches cache.
        
        @param request: PreloadCachesRequest
        @return: PreloadCachesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.preload_caches_with_options(request, runtime)

    async def preload_caches_async(
        self,
        request: esa20240910_models.PreloadCachesRequest,
    ) -> esa20240910_models.PreloadCachesResponse:
        """
        @summary Prefetches cache.
        
        @param request: PreloadCachesRequest
        @return: PreloadCachesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.preload_caches_with_options_async(request, runtime)

    def publish_edge_container_app_version_with_options(
        self,
        tmp_req: esa20240910_models.PublishEdgeContainerAppVersionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.PublishEdgeContainerAppVersionResponse:
        """
        @summary Releases a specific version of a containerized application. You can call this operation to iterate an application.
        
        @param tmp_req: PublishEdgeContainerAppVersionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: PublishEdgeContainerAppVersionResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.PublishEdgeContainerAppVersionShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.regions):
            request.regions_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.regions, 'Regions', 'json')
        query = {}
        if not UtilClient.is_unset(request.full_release):
            query['FullRelease'] = request.full_release
        if not UtilClient.is_unset(request.publish_type):
            query['PublishType'] = request.publish_type
        if not UtilClient.is_unset(request.regions_shrink):
            query['Regions'] = request.regions_shrink
        if not UtilClient.is_unset(request.version_id):
            query['VersionId'] = request.version_id
        body = {}
        if not UtilClient.is_unset(request.app_id):
            body['AppId'] = request.app_id
        if not UtilClient.is_unset(request.percentage):
            body['Percentage'] = request.percentage
        if not UtilClient.is_unset(request.publish_env):
            body['PublishEnv'] = request.publish_env
        if not UtilClient.is_unset(request.remarks):
            body['Remarks'] = request.remarks
        if not UtilClient.is_unset(request.start_time):
            body['StartTime'] = request.start_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='PublishEdgeContainerAppVersion',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.PublishEdgeContainerAppVersionResponse(),
            self.call_api(params, req, runtime)
        )

    async def publish_edge_container_app_version_with_options_async(
        self,
        tmp_req: esa20240910_models.PublishEdgeContainerAppVersionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.PublishEdgeContainerAppVersionResponse:
        """
        @summary Releases a specific version of a containerized application. You can call this operation to iterate an application.
        
        @param tmp_req: PublishEdgeContainerAppVersionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: PublishEdgeContainerAppVersionResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.PublishEdgeContainerAppVersionShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.regions):
            request.regions_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.regions, 'Regions', 'json')
        query = {}
        if not UtilClient.is_unset(request.full_release):
            query['FullRelease'] = request.full_release
        if not UtilClient.is_unset(request.publish_type):
            query['PublishType'] = request.publish_type
        if not UtilClient.is_unset(request.regions_shrink):
            query['Regions'] = request.regions_shrink
        if not UtilClient.is_unset(request.version_id):
            query['VersionId'] = request.version_id
        body = {}
        if not UtilClient.is_unset(request.app_id):
            body['AppId'] = request.app_id
        if not UtilClient.is_unset(request.percentage):
            body['Percentage'] = request.percentage
        if not UtilClient.is_unset(request.publish_env):
            body['PublishEnv'] = request.publish_env
        if not UtilClient.is_unset(request.remarks):
            body['Remarks'] = request.remarks
        if not UtilClient.is_unset(request.start_time):
            body['StartTime'] = request.start_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='PublishEdgeContainerAppVersion',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.PublishEdgeContainerAppVersionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def publish_edge_container_app_version(
        self,
        request: esa20240910_models.PublishEdgeContainerAppVersionRequest,
    ) -> esa20240910_models.PublishEdgeContainerAppVersionResponse:
        """
        @summary Releases a specific version of a containerized application. You can call this operation to iterate an application.
        
        @param request: PublishEdgeContainerAppVersionRequest
        @return: PublishEdgeContainerAppVersionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.publish_edge_container_app_version_with_options(request, runtime)

    async def publish_edge_container_app_version_async(
        self,
        request: esa20240910_models.PublishEdgeContainerAppVersionRequest,
    ) -> esa20240910_models.PublishEdgeContainerAppVersionResponse:
        """
        @summary Releases a specific version of a containerized application. You can call this operation to iterate an application.
        
        @param request: PublishEdgeContainerAppVersionRequest
        @return: PublishEdgeContainerAppVersionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.publish_edge_container_app_version_with_options_async(request, runtime)

    def publish_routine_code_version_with_options(
        self,
        request: esa20240910_models.PublishRoutineCodeVersionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.PublishRoutineCodeVersionResponse:
        """
        @summary Releases a code version of a routine to the staging, canary, or production environment. You can specify the regions where the canary environment is deployed to release your code.
        
        @param request: PublishRoutineCodeVersionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: PublishRoutineCodeVersionResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.code_version):
            body['CodeVersion'] = request.code_version
        if not UtilClient.is_unset(request.env):
            body['Env'] = request.env
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='PublishRoutineCodeVersion',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.PublishRoutineCodeVersionResponse(),
            self.call_api(params, req, runtime)
        )

    async def publish_routine_code_version_with_options_async(
        self,
        request: esa20240910_models.PublishRoutineCodeVersionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.PublishRoutineCodeVersionResponse:
        """
        @summary Releases a code version of a routine to the staging, canary, or production environment. You can specify the regions where the canary environment is deployed to release your code.
        
        @param request: PublishRoutineCodeVersionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: PublishRoutineCodeVersionResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.code_version):
            body['CodeVersion'] = request.code_version
        if not UtilClient.is_unset(request.env):
            body['Env'] = request.env
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='PublishRoutineCodeVersion',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.PublishRoutineCodeVersionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def publish_routine_code_version(
        self,
        request: esa20240910_models.PublishRoutineCodeVersionRequest,
    ) -> esa20240910_models.PublishRoutineCodeVersionResponse:
        """
        @summary Releases a code version of a routine to the staging, canary, or production environment. You can specify the regions where the canary environment is deployed to release your code.
        
        @param request: PublishRoutineCodeVersionRequest
        @return: PublishRoutineCodeVersionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.publish_routine_code_version_with_options(request, runtime)

    async def publish_routine_code_version_async(
        self,
        request: esa20240910_models.PublishRoutineCodeVersionRequest,
    ) -> esa20240910_models.PublishRoutineCodeVersionResponse:
        """
        @summary Releases a code version of a routine to the staging, canary, or production environment. You can specify the regions where the canary environment is deployed to release your code.
        
        @param request: PublishRoutineCodeVersionRequest
        @return: PublishRoutineCodeVersionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.publish_routine_code_version_with_options_async(request, runtime)

    def purchase_cache_reserve_with_options(
        self,
        request: esa20240910_models.PurchaseCacheReserveRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.PurchaseCacheReserveResponse:
        """
        @summary New Purchase of Cache Retention
        
        @param request: PurchaseCacheReserveRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: PurchaseCacheReserveResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.auto_pay):
            query['AutoPay'] = request.auto_pay
        if not UtilClient.is_unset(request.auto_renew):
            query['AutoRenew'] = request.auto_renew
        if not UtilClient.is_unset(request.charge_type):
            query['ChargeType'] = request.charge_type
        if not UtilClient.is_unset(request.cr_region):
            query['CrRegion'] = request.cr_region
        if not UtilClient.is_unset(request.period):
            query['Period'] = request.period
        if not UtilClient.is_unset(request.quota_gb):
            query['QuotaGb'] = request.quota_gb
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='PurchaseCacheReserve',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.PurchaseCacheReserveResponse(),
            self.call_api(params, req, runtime)
        )

    async def purchase_cache_reserve_with_options_async(
        self,
        request: esa20240910_models.PurchaseCacheReserveRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.PurchaseCacheReserveResponse:
        """
        @summary New Purchase of Cache Retention
        
        @param request: PurchaseCacheReserveRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: PurchaseCacheReserveResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.auto_pay):
            query['AutoPay'] = request.auto_pay
        if not UtilClient.is_unset(request.auto_renew):
            query['AutoRenew'] = request.auto_renew
        if not UtilClient.is_unset(request.charge_type):
            query['ChargeType'] = request.charge_type
        if not UtilClient.is_unset(request.cr_region):
            query['CrRegion'] = request.cr_region
        if not UtilClient.is_unset(request.period):
            query['Period'] = request.period
        if not UtilClient.is_unset(request.quota_gb):
            query['QuotaGb'] = request.quota_gb
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='PurchaseCacheReserve',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.PurchaseCacheReserveResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def purchase_cache_reserve(
        self,
        request: esa20240910_models.PurchaseCacheReserveRequest,
    ) -> esa20240910_models.PurchaseCacheReserveResponse:
        """
        @summary New Purchase of Cache Retention
        
        @param request: PurchaseCacheReserveRequest
        @return: PurchaseCacheReserveResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.purchase_cache_reserve_with_options(request, runtime)

    async def purchase_cache_reserve_async(
        self,
        request: esa20240910_models.PurchaseCacheReserveRequest,
    ) -> esa20240910_models.PurchaseCacheReserveResponse:
        """
        @summary New Purchase of Cache Retention
        
        @param request: PurchaseCacheReserveRequest
        @return: PurchaseCacheReserveResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.purchase_cache_reserve_with_options_async(request, runtime)

    def purchase_rate_plan_with_options(
        self,
        request: esa20240910_models.PurchaseRatePlanRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.PurchaseRatePlanResponse:
        """
        @summary Purchase New Package
        
        @description 1. The package name and code can be obtained from the DescribeRatePlanPrice interface.
        2. If the acceleration area is not overseas, the site must have successfully completed the filing process.
        
        @param request: PurchaseRatePlanRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: PurchaseRatePlanResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.amount):
            query['Amount'] = request.amount
        if not UtilClient.is_unset(request.auto_pay):
            query['AutoPay'] = request.auto_pay
        if not UtilClient.is_unset(request.auto_renew):
            query['AutoRenew'] = request.auto_renew
        if not UtilClient.is_unset(request.charge_type):
            query['ChargeType'] = request.charge_type
        if not UtilClient.is_unset(request.coverage):
            query['Coverage'] = request.coverage
        if not UtilClient.is_unset(request.period):
            query['Period'] = request.period
        if not UtilClient.is_unset(request.plan_code):
            query['PlanCode'] = request.plan_code
        if not UtilClient.is_unset(request.plan_name):
            query['PlanName'] = request.plan_name
        if not UtilClient.is_unset(request.site_name):
            query['SiteName'] = request.site_name
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='PurchaseRatePlan',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.PurchaseRatePlanResponse(),
            self.call_api(params, req, runtime)
        )

    async def purchase_rate_plan_with_options_async(
        self,
        request: esa20240910_models.PurchaseRatePlanRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.PurchaseRatePlanResponse:
        """
        @summary Purchase New Package
        
        @description 1. The package name and code can be obtained from the DescribeRatePlanPrice interface.
        2. If the acceleration area is not overseas, the site must have successfully completed the filing process.
        
        @param request: PurchaseRatePlanRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: PurchaseRatePlanResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.amount):
            query['Amount'] = request.amount
        if not UtilClient.is_unset(request.auto_pay):
            query['AutoPay'] = request.auto_pay
        if not UtilClient.is_unset(request.auto_renew):
            query['AutoRenew'] = request.auto_renew
        if not UtilClient.is_unset(request.charge_type):
            query['ChargeType'] = request.charge_type
        if not UtilClient.is_unset(request.coverage):
            query['Coverage'] = request.coverage
        if not UtilClient.is_unset(request.period):
            query['Period'] = request.period
        if not UtilClient.is_unset(request.plan_code):
            query['PlanCode'] = request.plan_code
        if not UtilClient.is_unset(request.plan_name):
            query['PlanName'] = request.plan_name
        if not UtilClient.is_unset(request.site_name):
            query['SiteName'] = request.site_name
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='PurchaseRatePlan',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.PurchaseRatePlanResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def purchase_rate_plan(
        self,
        request: esa20240910_models.PurchaseRatePlanRequest,
    ) -> esa20240910_models.PurchaseRatePlanResponse:
        """
        @summary Purchase New Package
        
        @description 1. The package name and code can be obtained from the DescribeRatePlanPrice interface.
        2. If the acceleration area is not overseas, the site must have successfully completed the filing process.
        
        @param request: PurchaseRatePlanRequest
        @return: PurchaseRatePlanResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.purchase_rate_plan_with_options(request, runtime)

    async def purchase_rate_plan_async(
        self,
        request: esa20240910_models.PurchaseRatePlanRequest,
    ) -> esa20240910_models.PurchaseRatePlanResponse:
        """
        @summary Purchase New Package
        
        @description 1. The package name and code can be obtained from the DescribeRatePlanPrice interface.
        2. If the acceleration area is not overseas, the site must have successfully completed the filing process.
        
        @param request: PurchaseRatePlanRequest
        @return: PurchaseRatePlanResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.purchase_rate_plan_with_options_async(request, runtime)

    def purge_caches_with_options(
        self,
        tmp_req: esa20240910_models.PurgeCachesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.PurgeCachesResponse:
        """
        @summary Cache Refresh
        
        @param tmp_req: PurgeCachesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: PurgeCachesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.PurgeCachesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.content):
            request.content_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.content, 'Content', 'json')
        query = {}
        if not UtilClient.is_unset(request.content_shrink):
            query['Content'] = request.content_shrink
        if not UtilClient.is_unset(request.edge_compute_purge):
            query['EdgeComputePurge'] = request.edge_compute_purge
        if not UtilClient.is_unset(request.force):
            query['Force'] = request.force
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='PurgeCaches',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.PurgeCachesResponse(),
            self.call_api(params, req, runtime)
        )

    async def purge_caches_with_options_async(
        self,
        tmp_req: esa20240910_models.PurgeCachesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.PurgeCachesResponse:
        """
        @summary Cache Refresh
        
        @param tmp_req: PurgeCachesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: PurgeCachesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.PurgeCachesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.content):
            request.content_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.content, 'Content', 'json')
        query = {}
        if not UtilClient.is_unset(request.content_shrink):
            query['Content'] = request.content_shrink
        if not UtilClient.is_unset(request.edge_compute_purge):
            query['EdgeComputePurge'] = request.edge_compute_purge
        if not UtilClient.is_unset(request.force):
            query['Force'] = request.force
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='PurgeCaches',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.PurgeCachesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def purge_caches(
        self,
        request: esa20240910_models.PurgeCachesRequest,
    ) -> esa20240910_models.PurgeCachesResponse:
        """
        @summary Cache Refresh
        
        @param request: PurgeCachesRequest
        @return: PurgeCachesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.purge_caches_with_options(request, runtime)

    async def purge_caches_async(
        self,
        request: esa20240910_models.PurgeCachesRequest,
    ) -> esa20240910_models.PurgeCachesResponse:
        """
        @summary Cache Refresh
        
        @param request: PurgeCachesRequest
        @return: PurgeCachesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.purge_caches_with_options_async(request, runtime)

    def put_kv_with_options(
        self,
        request: esa20240910_models.PutKvRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.PutKvResponse:
        """
        @summary Configures a key-value pair for a namespace. The request body can be up to 2 MB.
        
        @param request: PutKvRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: PutKvResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.base_64):
            query['Base64'] = request.base_64
        if not UtilClient.is_unset(request.expiration):
            query['Expiration'] = request.expiration
        if not UtilClient.is_unset(request.expiration_ttl):
            query['ExpirationTtl'] = request.expiration_ttl
        if not UtilClient.is_unset(request.key):
            query['Key'] = request.key
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        body = {}
        if not UtilClient.is_unset(request.value):
            body['Value'] = request.value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='PutKv',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.PutKvResponse(),
            self.call_api(params, req, runtime)
        )

    async def put_kv_with_options_async(
        self,
        request: esa20240910_models.PutKvRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.PutKvResponse:
        """
        @summary Configures a key-value pair for a namespace. The request body can be up to 2 MB.
        
        @param request: PutKvRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: PutKvResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.base_64):
            query['Base64'] = request.base_64
        if not UtilClient.is_unset(request.expiration):
            query['Expiration'] = request.expiration
        if not UtilClient.is_unset(request.expiration_ttl):
            query['ExpirationTtl'] = request.expiration_ttl
        if not UtilClient.is_unset(request.key):
            query['Key'] = request.key
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        body = {}
        if not UtilClient.is_unset(request.value):
            body['Value'] = request.value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='PutKv',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.PutKvResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def put_kv(
        self,
        request: esa20240910_models.PutKvRequest,
    ) -> esa20240910_models.PutKvResponse:
        """
        @summary Configures a key-value pair for a namespace. The request body can be up to 2 MB.
        
        @param request: PutKvRequest
        @return: PutKvResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.put_kv_with_options(request, runtime)

    async def put_kv_async(
        self,
        request: esa20240910_models.PutKvRequest,
    ) -> esa20240910_models.PutKvResponse:
        """
        @summary Configures a key-value pair for a namespace. The request body can be up to 2 MB.
        
        @param request: PutKvRequest
        @return: PutKvResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.put_kv_with_options_async(request, runtime)

    def put_kv_with_high_capacity_with_options(
        self,
        request: esa20240910_models.PutKvWithHighCapacityRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.PutKvWithHighCapacityResponse:
        """
        @summary Configures a large key-value pair for a namespace. The request body can be up to 25 MB.
        
        @description This operation allows you to upload a larger request body than by using [PutKv](~~PutKv~~). For small request bodies, we recommend that you use [PutKv](~~PutKv~~) to minimize the server processing time. This operation must be called by using SDKs. The following sample code uses the Golang SDK and PutKvWithHighCapacityAdvance to call the operation.
        func TestPutKvWithHighCapacity() {
        // Initialize the configurations.
        cfg := new(openapi.Config)
        cfg.SetAccessKeyId("xxxxxxxxx")
        cfg.SetAccessKeySecret("xxxxxxxxxx")
        cli, err := NewClient(cfg)
        if err != nil {
        return err
        }
        runtime := &util.RuntimeOptions{}
        // Construct a request for uploading key-value pairs.
        namespace := "test-put-kv"
        key := "test_PutKvWithHighCapacity_0"
        value := strings.Repeat("t", 101024*1024)
        rawReq := &PutKvRequest{
        Namespace: &namespace,
        Key:       &key,
        Value:     &value,
        }
        payload, err := json.Marshal(rawReq)
        if err != nil {
        return err
        }
        // If the payload is greater than 2 MB, call the PutKvWithHighCapacity operation for upload.
        reqHighCapacity := &PutKvWithHighCapacityAdvanceRequest{
        Namespace: &namespace,
        Key:       &key,
        UrlObject: bytes.NewReader([]byte(payload)),
        }
        resp, err := cli.PutKvWithHighCapacityAdvance(reqHighCapacity, runtime)
        if err != nil {
        return err
        }
        return nil
        }
        
        @param request: PutKvWithHighCapacityRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: PutKvWithHighCapacityResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.key):
            query['Key'] = request.key
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        if not UtilClient.is_unset(request.url):
            query['Url'] = request.url
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='PutKvWithHighCapacity',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.PutKvWithHighCapacityResponse(),
            self.call_api(params, req, runtime)
        )

    async def put_kv_with_high_capacity_with_options_async(
        self,
        request: esa20240910_models.PutKvWithHighCapacityRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.PutKvWithHighCapacityResponse:
        """
        @summary Configures a large key-value pair for a namespace. The request body can be up to 25 MB.
        
        @description This operation allows you to upload a larger request body than by using [PutKv](~~PutKv~~). For small request bodies, we recommend that you use [PutKv](~~PutKv~~) to minimize the server processing time. This operation must be called by using SDKs. The following sample code uses the Golang SDK and PutKvWithHighCapacityAdvance to call the operation.
        func TestPutKvWithHighCapacity() {
        // Initialize the configurations.
        cfg := new(openapi.Config)
        cfg.SetAccessKeyId("xxxxxxxxx")
        cfg.SetAccessKeySecret("xxxxxxxxxx")
        cli, err := NewClient(cfg)
        if err != nil {
        return err
        }
        runtime := &util.RuntimeOptions{}
        // Construct a request for uploading key-value pairs.
        namespace := "test-put-kv"
        key := "test_PutKvWithHighCapacity_0"
        value := strings.Repeat("t", 101024*1024)
        rawReq := &PutKvRequest{
        Namespace: &namespace,
        Key:       &key,
        Value:     &value,
        }
        payload, err := json.Marshal(rawReq)
        if err != nil {
        return err
        }
        // If the payload is greater than 2 MB, call the PutKvWithHighCapacity operation for upload.
        reqHighCapacity := &PutKvWithHighCapacityAdvanceRequest{
        Namespace: &namespace,
        Key:       &key,
        UrlObject: bytes.NewReader([]byte(payload)),
        }
        resp, err := cli.PutKvWithHighCapacityAdvance(reqHighCapacity, runtime)
        if err != nil {
        return err
        }
        return nil
        }
        
        @param request: PutKvWithHighCapacityRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: PutKvWithHighCapacityResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.key):
            query['Key'] = request.key
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        if not UtilClient.is_unset(request.url):
            query['Url'] = request.url
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='PutKvWithHighCapacity',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.PutKvWithHighCapacityResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def put_kv_with_high_capacity(
        self,
        request: esa20240910_models.PutKvWithHighCapacityRequest,
    ) -> esa20240910_models.PutKvWithHighCapacityResponse:
        """
        @summary Configures a large key-value pair for a namespace. The request body can be up to 25 MB.
        
        @description This operation allows you to upload a larger request body than by using [PutKv](~~PutKv~~). For small request bodies, we recommend that you use [PutKv](~~PutKv~~) to minimize the server processing time. This operation must be called by using SDKs. The following sample code uses the Golang SDK and PutKvWithHighCapacityAdvance to call the operation.
        func TestPutKvWithHighCapacity() {
        // Initialize the configurations.
        cfg := new(openapi.Config)
        cfg.SetAccessKeyId("xxxxxxxxx")
        cfg.SetAccessKeySecret("xxxxxxxxxx")
        cli, err := NewClient(cfg)
        if err != nil {
        return err
        }
        runtime := &util.RuntimeOptions{}
        // Construct a request for uploading key-value pairs.
        namespace := "test-put-kv"
        key := "test_PutKvWithHighCapacity_0"
        value := strings.Repeat("t", 101024*1024)
        rawReq := &PutKvRequest{
        Namespace: &namespace,
        Key:       &key,
        Value:     &value,
        }
        payload, err := json.Marshal(rawReq)
        if err != nil {
        return err
        }
        // If the payload is greater than 2 MB, call the PutKvWithHighCapacity operation for upload.
        reqHighCapacity := &PutKvWithHighCapacityAdvanceRequest{
        Namespace: &namespace,
        Key:       &key,
        UrlObject: bytes.NewReader([]byte(payload)),
        }
        resp, err := cli.PutKvWithHighCapacityAdvance(reqHighCapacity, runtime)
        if err != nil {
        return err
        }
        return nil
        }
        
        @param request: PutKvWithHighCapacityRequest
        @return: PutKvWithHighCapacityResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.put_kv_with_high_capacity_with_options(request, runtime)

    async def put_kv_with_high_capacity_async(
        self,
        request: esa20240910_models.PutKvWithHighCapacityRequest,
    ) -> esa20240910_models.PutKvWithHighCapacityResponse:
        """
        @summary Configures a large key-value pair for a namespace. The request body can be up to 25 MB.
        
        @description This operation allows you to upload a larger request body than by using [PutKv](~~PutKv~~). For small request bodies, we recommend that you use [PutKv](~~PutKv~~) to minimize the server processing time. This operation must be called by using SDKs. The following sample code uses the Golang SDK and PutKvWithHighCapacityAdvance to call the operation.
        func TestPutKvWithHighCapacity() {
        // Initialize the configurations.
        cfg := new(openapi.Config)
        cfg.SetAccessKeyId("xxxxxxxxx")
        cfg.SetAccessKeySecret("xxxxxxxxxx")
        cli, err := NewClient(cfg)
        if err != nil {
        return err
        }
        runtime := &util.RuntimeOptions{}
        // Construct a request for uploading key-value pairs.
        namespace := "test-put-kv"
        key := "test_PutKvWithHighCapacity_0"
        value := strings.Repeat("t", 101024*1024)
        rawReq := &PutKvRequest{
        Namespace: &namespace,
        Key:       &key,
        Value:     &value,
        }
        payload, err := json.Marshal(rawReq)
        if err != nil {
        return err
        }
        // If the payload is greater than 2 MB, call the PutKvWithHighCapacity operation for upload.
        reqHighCapacity := &PutKvWithHighCapacityAdvanceRequest{
        Namespace: &namespace,
        Key:       &key,
        UrlObject: bytes.NewReader([]byte(payload)),
        }
        resp, err := cli.PutKvWithHighCapacityAdvance(reqHighCapacity, runtime)
        if err != nil {
        return err
        }
        return nil
        }
        
        @param request: PutKvWithHighCapacityRequest
        @return: PutKvWithHighCapacityResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.put_kv_with_high_capacity_with_options_async(request, runtime)

    def put_kv_with_high_capacity_advance(
        self,
        request: esa20240910_models.PutKvWithHighCapacityAdvanceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.PutKvWithHighCapacityResponse:
        # Step 0: init client
        credential_model = None
        if UtilClient.is_unset(self._credential):
            raise TeaException({
                'code': 'InvalidCredentials',
                'message': 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
            })
        credential_model = self._credential.get_credential()
        access_key_id = credential_model.access_key_id
        access_key_secret = credential_model.access_key_secret
        security_token = credential_model.security_token
        credential_type = credential_model.type
        open_platform_endpoint = self._open_platform_endpoint
        if UtilClient.empty(open_platform_endpoint):
            open_platform_endpoint = 'openplatform.aliyuncs.com'
        if UtilClient.is_unset(credential_type):
            credential_type = 'access_key'
        auth_config = open_api_models.Config(
            access_key_id=access_key_id,
            access_key_secret=access_key_secret,
            security_token=security_token,
            type=credential_type,
            endpoint=open_platform_endpoint,
            protocol=self._protocol,
            region_id=self._region_id
        )
        auth_client = OpenApiClient(auth_config)
        auth_request = {
            'Product': 'ESA',
            'RegionId': self._region_id
        }
        auth_req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(auth_request)
        )
        auth_params = open_api_models.Params(
            action='AuthorizeFileUpload',
            version='2019-12-19',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        auth_response = {}
        file_obj = file_form_models.FileField()
        oss_header = {}
        tmp_body = {}
        use_accelerate = False
        auth_response_body = {}
        put_kv_with_high_capacity_req = esa20240910_models.PutKvWithHighCapacityRequest()
        OpenApiUtilClient.convert(request, put_kv_with_high_capacity_req)
        if not UtilClient.is_unset(request.url_object):
            tmp_resp_0 = auth_client.call_api(auth_params, auth_req, runtime)
            auth_response = UtilClient.assert_as_map(tmp_resp_0)
            tmp_body = UtilClient.assert_as_map(auth_response.get('body'))
            use_accelerate = UtilClient.assert_as_boolean(tmp_body.get('UseAccelerate'))
            auth_response_body = UtilClient.stringify_map_value(tmp_body)
            file_obj = file_form_models.FileField(
                filename=auth_response_body.get('ObjectKey'),
                content=request.url_object,
                content_type=''
            )
            oss_header = {
                'host': f"{auth_response_body.get('Bucket')}.{OpenApiUtilClient.get_endpoint(auth_response_body.get('Endpoint'), use_accelerate, self._endpoint_type)}",
                'OSSAccessKeyId': auth_response_body.get('AccessKeyId'),
                'policy': auth_response_body.get('EncodedPolicy'),
                'Signature': auth_response_body.get('Signature'),
                'key': auth_response_body.get('ObjectKey'),
                'file': file_obj,
                'success_action_status': '201'
            }
            self._post_ossobject(auth_response_body.get('Bucket'), oss_header)
            put_kv_with_high_capacity_req.url = f"http://{auth_response_body.get('Bucket')}.{auth_response_body.get('Endpoint')}/{auth_response_body.get('ObjectKey')}"
        put_kv_with_high_capacity_resp = self.put_kv_with_high_capacity_with_options(put_kv_with_high_capacity_req, runtime)
        return put_kv_with_high_capacity_resp

    async def put_kv_with_high_capacity_advance_async(
        self,
        request: esa20240910_models.PutKvWithHighCapacityAdvanceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.PutKvWithHighCapacityResponse:
        # Step 0: init client
        credential_model = None
        if UtilClient.is_unset(self._credential):
            raise TeaException({
                'code': 'InvalidCredentials',
                'message': 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
            })
        credential_model = await self._credential.get_credential_async()
        access_key_id = credential_model.access_key_id
        access_key_secret = credential_model.access_key_secret
        security_token = credential_model.security_token
        credential_type = credential_model.type
        open_platform_endpoint = self._open_platform_endpoint
        if UtilClient.empty(open_platform_endpoint):
            open_platform_endpoint = 'openplatform.aliyuncs.com'
        if UtilClient.is_unset(credential_type):
            credential_type = 'access_key'
        auth_config = open_api_models.Config(
            access_key_id=access_key_id,
            access_key_secret=access_key_secret,
            security_token=security_token,
            type=credential_type,
            endpoint=open_platform_endpoint,
            protocol=self._protocol,
            region_id=self._region_id
        )
        auth_client = OpenApiClient(auth_config)
        auth_request = {
            'Product': 'ESA',
            'RegionId': self._region_id
        }
        auth_req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(auth_request)
        )
        auth_params = open_api_models.Params(
            action='AuthorizeFileUpload',
            version='2019-12-19',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        auth_response = {}
        file_obj = file_form_models.FileField()
        oss_header = {}
        tmp_body = {}
        use_accelerate = False
        auth_response_body = {}
        put_kv_with_high_capacity_req = esa20240910_models.PutKvWithHighCapacityRequest()
        OpenApiUtilClient.convert(request, put_kv_with_high_capacity_req)
        if not UtilClient.is_unset(request.url_object):
            tmp_resp_0 = await auth_client.call_api_async(auth_params, auth_req, runtime)
            auth_response = UtilClient.assert_as_map(tmp_resp_0)
            tmp_body = UtilClient.assert_as_map(auth_response.get('body'))
            use_accelerate = UtilClient.assert_as_boolean(tmp_body.get('UseAccelerate'))
            auth_response_body = UtilClient.stringify_map_value(tmp_body)
            file_obj = file_form_models.FileField(
                filename=auth_response_body.get('ObjectKey'),
                content=request.url_object,
                content_type=''
            )
            oss_header = {
                'host': f"{auth_response_body.get('Bucket')}.{OpenApiUtilClient.get_endpoint(auth_response_body.get('Endpoint'), use_accelerate, self._endpoint_type)}",
                'OSSAccessKeyId': auth_response_body.get('AccessKeyId'),
                'policy': auth_response_body.get('EncodedPolicy'),
                'Signature': auth_response_body.get('Signature'),
                'key': auth_response_body.get('ObjectKey'),
                'file': file_obj,
                'success_action_status': '201'
            }
            await self._post_ossobject_async(auth_response_body.get('Bucket'), oss_header)
            put_kv_with_high_capacity_req.url = f"http://{auth_response_body.get('Bucket')}.{auth_response_body.get('Endpoint')}/{auth_response_body.get('ObjectKey')}"
        put_kv_with_high_capacity_resp = await self.put_kv_with_high_capacity_with_options_async(put_kv_with_high_capacity_req, runtime)
        return put_kv_with_high_capacity_resp

    def rebuild_edge_container_app_staging_env_with_options(
        self,
        request: esa20240910_models.RebuildEdgeContainerAppStagingEnvRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.RebuildEdgeContainerAppStagingEnvResponse:
        """
        @summary Rebuilds the staging environment for containerized applications.
        
        @param request: RebuildEdgeContainerAppStagingEnvRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RebuildEdgeContainerAppStagingEnvResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_id):
            query['AppId'] = request.app_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='RebuildEdgeContainerAppStagingEnv',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.RebuildEdgeContainerAppStagingEnvResponse(),
            self.call_api(params, req, runtime)
        )

    async def rebuild_edge_container_app_staging_env_with_options_async(
        self,
        request: esa20240910_models.RebuildEdgeContainerAppStagingEnvRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.RebuildEdgeContainerAppStagingEnvResponse:
        """
        @summary Rebuilds the staging environment for containerized applications.
        
        @param request: RebuildEdgeContainerAppStagingEnvRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RebuildEdgeContainerAppStagingEnvResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_id):
            query['AppId'] = request.app_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='RebuildEdgeContainerAppStagingEnv',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.RebuildEdgeContainerAppStagingEnvResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def rebuild_edge_container_app_staging_env(
        self,
        request: esa20240910_models.RebuildEdgeContainerAppStagingEnvRequest,
    ) -> esa20240910_models.RebuildEdgeContainerAppStagingEnvResponse:
        """
        @summary Rebuilds the staging environment for containerized applications.
        
        @param request: RebuildEdgeContainerAppStagingEnvRequest
        @return: RebuildEdgeContainerAppStagingEnvResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.rebuild_edge_container_app_staging_env_with_options(request, runtime)

    async def rebuild_edge_container_app_staging_env_async(
        self,
        request: esa20240910_models.RebuildEdgeContainerAppStagingEnvRequest,
    ) -> esa20240910_models.RebuildEdgeContainerAppStagingEnvResponse:
        """
        @summary Rebuilds the staging environment for containerized applications.
        
        @param request: RebuildEdgeContainerAppStagingEnvRequest
        @return: RebuildEdgeContainerAppStagingEnvResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.rebuild_edge_container_app_staging_env_with_options_async(request, runtime)

    def reset_scheduled_preload_job_with_options(
        self,
        request: esa20240910_models.ResetScheduledPreloadJobRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ResetScheduledPreloadJobResponse:
        """
        @summary Resets the progress of a scheduled prefetch task and starts the prefetch from the beginning.
        
        @param request: ResetScheduledPreloadJobRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ResetScheduledPreloadJobResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ResetScheduledPreloadJob',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ResetScheduledPreloadJobResponse(),
            self.call_api(params, req, runtime)
        )

    async def reset_scheduled_preload_job_with_options_async(
        self,
        request: esa20240910_models.ResetScheduledPreloadJobRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.ResetScheduledPreloadJobResponse:
        """
        @summary Resets the progress of a scheduled prefetch task and starts the prefetch from the beginning.
        
        @param request: ResetScheduledPreloadJobRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ResetScheduledPreloadJobResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ResetScheduledPreloadJob',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.ResetScheduledPreloadJobResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def reset_scheduled_preload_job(
        self,
        request: esa20240910_models.ResetScheduledPreloadJobRequest,
    ) -> esa20240910_models.ResetScheduledPreloadJobResponse:
        """
        @summary Resets the progress of a scheduled prefetch task and starts the prefetch from the beginning.
        
        @param request: ResetScheduledPreloadJobRequest
        @return: ResetScheduledPreloadJobResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.reset_scheduled_preload_job_with_options(request, runtime)

    async def reset_scheduled_preload_job_async(
        self,
        request: esa20240910_models.ResetScheduledPreloadJobRequest,
    ) -> esa20240910_models.ResetScheduledPreloadJobResponse:
        """
        @summary Resets the progress of a scheduled prefetch task and starts the prefetch from the beginning.
        
        @param request: ResetScheduledPreloadJobRequest
        @return: ResetScheduledPreloadJobResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.reset_scheduled_preload_job_with_options_async(request, runtime)

    def revoke_client_certificate_with_options(
        self,
        request: esa20240910_models.RevokeClientCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.RevokeClientCertificateResponse:
        """
        @summary Revokes an activated client certificate.
        
        @param request: RevokeClientCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RevokeClientCertificateResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='RevokeClientCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.RevokeClientCertificateResponse(),
            self.call_api(params, req, runtime)
        )

    async def revoke_client_certificate_with_options_async(
        self,
        request: esa20240910_models.RevokeClientCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.RevokeClientCertificateResponse:
        """
        @summary Revokes an activated client certificate.
        
        @param request: RevokeClientCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RevokeClientCertificateResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='RevokeClientCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.RevokeClientCertificateResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def revoke_client_certificate(
        self,
        request: esa20240910_models.RevokeClientCertificateRequest,
    ) -> esa20240910_models.RevokeClientCertificateResponse:
        """
        @summary Revokes an activated client certificate.
        
        @param request: RevokeClientCertificateRequest
        @return: RevokeClientCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.revoke_client_certificate_with_options(request, runtime)

    async def revoke_client_certificate_async(
        self,
        request: esa20240910_models.RevokeClientCertificateRequest,
    ) -> esa20240910_models.RevokeClientCertificateResponse:
        """
        @summary Revokes an activated client certificate.
        
        @param request: RevokeClientCertificateRequest
        @return: RevokeClientCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.revoke_client_certificate_with_options_async(request, runtime)

    def rollback_edge_container_app_version_with_options(
        self,
        request: esa20240910_models.RollbackEdgeContainerAppVersionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.RollbackEdgeContainerAppVersionResponse:
        """
        @summary Rolls back a version of a containerized application.
        
        @param request: RollbackEdgeContainerAppVersionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RollbackEdgeContainerAppVersionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.percentage):
            query['Percentage'] = request.percentage
        if not UtilClient.is_unset(request.used_percent):
            query['UsedPercent'] = request.used_percent
        if not UtilClient.is_unset(request.version_id):
            query['VersionId'] = request.version_id
        body = {}
        if not UtilClient.is_unset(request.app_id):
            body['AppId'] = request.app_id
        if not UtilClient.is_unset(request.remarks):
            body['Remarks'] = request.remarks
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='RollbackEdgeContainerAppVersion',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.RollbackEdgeContainerAppVersionResponse(),
            self.call_api(params, req, runtime)
        )

    async def rollback_edge_container_app_version_with_options_async(
        self,
        request: esa20240910_models.RollbackEdgeContainerAppVersionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.RollbackEdgeContainerAppVersionResponse:
        """
        @summary Rolls back a version of a containerized application.
        
        @param request: RollbackEdgeContainerAppVersionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RollbackEdgeContainerAppVersionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.percentage):
            query['Percentage'] = request.percentage
        if not UtilClient.is_unset(request.used_percent):
            query['UsedPercent'] = request.used_percent
        if not UtilClient.is_unset(request.version_id):
            query['VersionId'] = request.version_id
        body = {}
        if not UtilClient.is_unset(request.app_id):
            body['AppId'] = request.app_id
        if not UtilClient.is_unset(request.remarks):
            body['Remarks'] = request.remarks
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='RollbackEdgeContainerAppVersion',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.RollbackEdgeContainerAppVersionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def rollback_edge_container_app_version(
        self,
        request: esa20240910_models.RollbackEdgeContainerAppVersionRequest,
    ) -> esa20240910_models.RollbackEdgeContainerAppVersionResponse:
        """
        @summary Rolls back a version of a containerized application.
        
        @param request: RollbackEdgeContainerAppVersionRequest
        @return: RollbackEdgeContainerAppVersionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.rollback_edge_container_app_version_with_options(request, runtime)

    async def rollback_edge_container_app_version_async(
        self,
        request: esa20240910_models.RollbackEdgeContainerAppVersionRequest,
    ) -> esa20240910_models.RollbackEdgeContainerAppVersionResponse:
        """
        @summary Rolls back a version of a containerized application.
        
        @param request: RollbackEdgeContainerAppVersionRequest
        @return: RollbackEdgeContainerAppVersionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.rollback_edge_container_app_version_with_options_async(request, runtime)

    def set_certificate_with_options(
        self,
        request: esa20240910_models.SetCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.SetCertificateResponse:
        """
        @summary Configures whether to enable certificates and update certificate information for a website.
        
        @param request: SetCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SetCertificateResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.owner_id):
            query['OwnerId'] = request.owner_id
        if not UtilClient.is_unset(request.security_token):
            query['SecurityToken'] = request.security_token
        body = {}
        if not UtilClient.is_unset(request.cas_id):
            body['CasId'] = request.cas_id
        if not UtilClient.is_unset(request.certificate):
            body['Certificate'] = request.certificate
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.private_key):
            body['PrivateKey'] = request.private_key
        if not UtilClient.is_unset(request.region):
            body['Region'] = request.region
        if not UtilClient.is_unset(request.site_id):
            body['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.type):
            body['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SetCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.SetCertificateResponse(),
            self.call_api(params, req, runtime)
        )

    async def set_certificate_with_options_async(
        self,
        request: esa20240910_models.SetCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.SetCertificateResponse:
        """
        @summary Configures whether to enable certificates and update certificate information for a website.
        
        @param request: SetCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SetCertificateResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.owner_id):
            query['OwnerId'] = request.owner_id
        if not UtilClient.is_unset(request.security_token):
            query['SecurityToken'] = request.security_token
        body = {}
        if not UtilClient.is_unset(request.cas_id):
            body['CasId'] = request.cas_id
        if not UtilClient.is_unset(request.certificate):
            body['Certificate'] = request.certificate
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.private_key):
            body['PrivateKey'] = request.private_key
        if not UtilClient.is_unset(request.region):
            body['Region'] = request.region
        if not UtilClient.is_unset(request.site_id):
            body['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.type):
            body['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SetCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.SetCertificateResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def set_certificate(
        self,
        request: esa20240910_models.SetCertificateRequest,
    ) -> esa20240910_models.SetCertificateResponse:
        """
        @summary Configures whether to enable certificates and update certificate information for a website.
        
        @param request: SetCertificateRequest
        @return: SetCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.set_certificate_with_options(request, runtime)

    async def set_certificate_async(
        self,
        request: esa20240910_models.SetCertificateRequest,
    ) -> esa20240910_models.SetCertificateResponse:
        """
        @summary Configures whether to enable certificates and update certificate information for a website.
        
        @param request: SetCertificateRequest
        @return: SetCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.set_certificate_with_options_async(request, runtime)

    def set_client_certificate_hostnames_with_options(
        self,
        tmp_req: esa20240910_models.SetClientCertificateHostnamesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.SetClientCertificateHostnamesResponse:
        """
        @summary Associates domain names with a client CA certificate. If no certificate is specified, domain names are associated with an Edge Security Acceleration (ESA)-managed CA certificate.
        
        @param tmp_req: SetClientCertificateHostnamesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SetClientCertificateHostnamesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.SetClientCertificateHostnamesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.hostnames):
            request.hostnames_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.hostnames, 'Hostnames', 'json')
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        body = {}
        if not UtilClient.is_unset(request.hostnames_shrink):
            body['Hostnames'] = request.hostnames_shrink
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SetClientCertificateHostnames',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.SetClientCertificateHostnamesResponse(),
            self.call_api(params, req, runtime)
        )

    async def set_client_certificate_hostnames_with_options_async(
        self,
        tmp_req: esa20240910_models.SetClientCertificateHostnamesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.SetClientCertificateHostnamesResponse:
        """
        @summary Associates domain names with a client CA certificate. If no certificate is specified, domain names are associated with an Edge Security Acceleration (ESA)-managed CA certificate.
        
        @param tmp_req: SetClientCertificateHostnamesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SetClientCertificateHostnamesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.SetClientCertificateHostnamesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.hostnames):
            request.hostnames_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.hostnames, 'Hostnames', 'json')
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        body = {}
        if not UtilClient.is_unset(request.hostnames_shrink):
            body['Hostnames'] = request.hostnames_shrink
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SetClientCertificateHostnames',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.SetClientCertificateHostnamesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def set_client_certificate_hostnames(
        self,
        request: esa20240910_models.SetClientCertificateHostnamesRequest,
    ) -> esa20240910_models.SetClientCertificateHostnamesResponse:
        """
        @summary Associates domain names with a client CA certificate. If no certificate is specified, domain names are associated with an Edge Security Acceleration (ESA)-managed CA certificate.
        
        @param request: SetClientCertificateHostnamesRequest
        @return: SetClientCertificateHostnamesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.set_client_certificate_hostnames_with_options(request, runtime)

    async def set_client_certificate_hostnames_async(
        self,
        request: esa20240910_models.SetClientCertificateHostnamesRequest,
    ) -> esa20240910_models.SetClientCertificateHostnamesResponse:
        """
        @summary Associates domain names with a client CA certificate. If no certificate is specified, domain names are associated with an Edge Security Acceleration (ESA)-managed CA certificate.
        
        @param request: SetClientCertificateHostnamesRequest
        @return: SetClientCertificateHostnamesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.set_client_certificate_hostnames_with_options_async(request, runtime)

    def set_http_ddo_sattack_intelligent_protection_with_options(
        self,
        request: esa20240910_models.SetHttpDDoSAttackIntelligentProtectionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.SetHttpDDoSAttackIntelligentProtectionResponse:
        """
        @summary Configures smart HTTP DDoS protection.
        
        @param request: SetHttpDDoSAttackIntelligentProtectionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SetHttpDDoSAttackIntelligentProtectionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.ai_mode):
            query['AiMode'] = request.ai_mode
        if not UtilClient.is_unset(request.ai_template):
            query['AiTemplate'] = request.ai_template
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SetHttpDDoSAttackIntelligentProtection',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.SetHttpDDoSAttackIntelligentProtectionResponse(),
            self.call_api(params, req, runtime)
        )

    async def set_http_ddo_sattack_intelligent_protection_with_options_async(
        self,
        request: esa20240910_models.SetHttpDDoSAttackIntelligentProtectionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.SetHttpDDoSAttackIntelligentProtectionResponse:
        """
        @summary Configures smart HTTP DDoS protection.
        
        @param request: SetHttpDDoSAttackIntelligentProtectionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SetHttpDDoSAttackIntelligentProtectionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.ai_mode):
            query['AiMode'] = request.ai_mode
        if not UtilClient.is_unset(request.ai_template):
            query['AiTemplate'] = request.ai_template
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SetHttpDDoSAttackIntelligentProtection',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.SetHttpDDoSAttackIntelligentProtectionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def set_http_ddo_sattack_intelligent_protection(
        self,
        request: esa20240910_models.SetHttpDDoSAttackIntelligentProtectionRequest,
    ) -> esa20240910_models.SetHttpDDoSAttackIntelligentProtectionResponse:
        """
        @summary Configures smart HTTP DDoS protection.
        
        @param request: SetHttpDDoSAttackIntelligentProtectionRequest
        @return: SetHttpDDoSAttackIntelligentProtectionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.set_http_ddo_sattack_intelligent_protection_with_options(request, runtime)

    async def set_http_ddo_sattack_intelligent_protection_async(
        self,
        request: esa20240910_models.SetHttpDDoSAttackIntelligentProtectionRequest,
    ) -> esa20240910_models.SetHttpDDoSAttackIntelligentProtectionResponse:
        """
        @summary Configures smart HTTP DDoS protection.
        
        @param request: SetHttpDDoSAttackIntelligentProtectionRequest
        @return: SetHttpDDoSAttackIntelligentProtectionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.set_http_ddo_sattack_intelligent_protection_with_options_async(request, runtime)

    def set_http_ddo_sattack_protection_with_options(
        self,
        request: esa20240910_models.SetHttpDDoSAttackProtectionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.SetHttpDDoSAttackProtectionResponse:
        """
        @summary Configures HTTP DDoS attack protection for a website.
        
        @param request: SetHttpDDoSAttackProtectionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SetHttpDDoSAttackProtectionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.global_mode):
            query['GlobalMode'] = request.global_mode
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SetHttpDDoSAttackProtection',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.SetHttpDDoSAttackProtectionResponse(),
            self.call_api(params, req, runtime)
        )

    async def set_http_ddo_sattack_protection_with_options_async(
        self,
        request: esa20240910_models.SetHttpDDoSAttackProtectionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.SetHttpDDoSAttackProtectionResponse:
        """
        @summary Configures HTTP DDoS attack protection for a website.
        
        @param request: SetHttpDDoSAttackProtectionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SetHttpDDoSAttackProtectionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.global_mode):
            query['GlobalMode'] = request.global_mode
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SetHttpDDoSAttackProtection',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.SetHttpDDoSAttackProtectionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def set_http_ddo_sattack_protection(
        self,
        request: esa20240910_models.SetHttpDDoSAttackProtectionRequest,
    ) -> esa20240910_models.SetHttpDDoSAttackProtectionResponse:
        """
        @summary Configures HTTP DDoS attack protection for a website.
        
        @param request: SetHttpDDoSAttackProtectionRequest
        @return: SetHttpDDoSAttackProtectionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.set_http_ddo_sattack_protection_with_options(request, runtime)

    async def set_http_ddo_sattack_protection_async(
        self,
        request: esa20240910_models.SetHttpDDoSAttackProtectionRequest,
    ) -> esa20240910_models.SetHttpDDoSAttackProtectionResponse:
        """
        @summary Configures HTTP DDoS attack protection for a website.
        
        @param request: SetHttpDDoSAttackProtectionRequest
        @return: SetHttpDDoSAttackProtectionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.set_http_ddo_sattack_protection_with_options_async(request, runtime)

    def set_origin_client_certificate_hostnames_with_options(
        self,
        tmp_req: esa20240910_models.SetOriginClientCertificateHostnamesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.SetOriginClientCertificateHostnamesResponse:
        """
        @summary 为域名回源客户端证书绑定域名
        
        @param tmp_req: SetOriginClientCertificateHostnamesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SetOriginClientCertificateHostnamesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.SetOriginClientCertificateHostnamesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.hostnames):
            request.hostnames_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.hostnames, 'Hostnames', 'json')
        body = {}
        if not UtilClient.is_unset(request.hostnames_shrink):
            body['Hostnames'] = request.hostnames_shrink
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.site_id):
            body['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SetOriginClientCertificateHostnames',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.SetOriginClientCertificateHostnamesResponse(),
            self.call_api(params, req, runtime)
        )

    async def set_origin_client_certificate_hostnames_with_options_async(
        self,
        tmp_req: esa20240910_models.SetOriginClientCertificateHostnamesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.SetOriginClientCertificateHostnamesResponse:
        """
        @summary 为域名回源客户端证书绑定域名
        
        @param tmp_req: SetOriginClientCertificateHostnamesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SetOriginClientCertificateHostnamesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.SetOriginClientCertificateHostnamesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.hostnames):
            request.hostnames_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.hostnames, 'Hostnames', 'json')
        body = {}
        if not UtilClient.is_unset(request.hostnames_shrink):
            body['Hostnames'] = request.hostnames_shrink
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.site_id):
            body['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SetOriginClientCertificateHostnames',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.SetOriginClientCertificateHostnamesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def set_origin_client_certificate_hostnames(
        self,
        request: esa20240910_models.SetOriginClientCertificateHostnamesRequest,
    ) -> esa20240910_models.SetOriginClientCertificateHostnamesResponse:
        """
        @summary 为域名回源客户端证书绑定域名
        
        @param request: SetOriginClientCertificateHostnamesRequest
        @return: SetOriginClientCertificateHostnamesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.set_origin_client_certificate_hostnames_with_options(request, runtime)

    async def set_origin_client_certificate_hostnames_async(
        self,
        request: esa20240910_models.SetOriginClientCertificateHostnamesRequest,
    ) -> esa20240910_models.SetOriginClientCertificateHostnamesResponse:
        """
        @summary 为域名回源客户端证书绑定域名
        
        @param request: SetOriginClientCertificateHostnamesRequest
        @return: SetOriginClientCertificateHostnamesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.set_origin_client_certificate_hostnames_with_options_async(request, runtime)

    def start_scheduled_preload_execution_with_options(
        self,
        request: esa20240910_models.StartScheduledPreloadExecutionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.StartScheduledPreloadExecutionResponse:
        """
        @summary Starts a scheduled prefetch plan based on the plan ID.
        
        @param request: StartScheduledPreloadExecutionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: StartScheduledPreloadExecutionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='StartScheduledPreloadExecution',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.StartScheduledPreloadExecutionResponse(),
            self.call_api(params, req, runtime)
        )

    async def start_scheduled_preload_execution_with_options_async(
        self,
        request: esa20240910_models.StartScheduledPreloadExecutionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.StartScheduledPreloadExecutionResponse:
        """
        @summary Starts a scheduled prefetch plan based on the plan ID.
        
        @param request: StartScheduledPreloadExecutionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: StartScheduledPreloadExecutionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='StartScheduledPreloadExecution',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.StartScheduledPreloadExecutionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def start_scheduled_preload_execution(
        self,
        request: esa20240910_models.StartScheduledPreloadExecutionRequest,
    ) -> esa20240910_models.StartScheduledPreloadExecutionResponse:
        """
        @summary Starts a scheduled prefetch plan based on the plan ID.
        
        @param request: StartScheduledPreloadExecutionRequest
        @return: StartScheduledPreloadExecutionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.start_scheduled_preload_execution_with_options(request, runtime)

    async def start_scheduled_preload_execution_async(
        self,
        request: esa20240910_models.StartScheduledPreloadExecutionRequest,
    ) -> esa20240910_models.StartScheduledPreloadExecutionResponse:
        """
        @summary Starts a scheduled prefetch plan based on the plan ID.
        
        @param request: StartScheduledPreloadExecutionRequest
        @return: StartScheduledPreloadExecutionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.start_scheduled_preload_execution_with_options_async(request, runtime)

    def stop_scheduled_preload_execution_with_options(
        self,
        request: esa20240910_models.StopScheduledPreloadExecutionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.StopScheduledPreloadExecutionResponse:
        """
        @summary Stops a scheduled prefetch plan based on the plan ID.
        
        @param request: StopScheduledPreloadExecutionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: StopScheduledPreloadExecutionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='StopScheduledPreloadExecution',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.StopScheduledPreloadExecutionResponse(),
            self.call_api(params, req, runtime)
        )

    async def stop_scheduled_preload_execution_with_options_async(
        self,
        request: esa20240910_models.StopScheduledPreloadExecutionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.StopScheduledPreloadExecutionResponse:
        """
        @summary Stops a scheduled prefetch plan based on the plan ID.
        
        @param request: StopScheduledPreloadExecutionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: StopScheduledPreloadExecutionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='StopScheduledPreloadExecution',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.StopScheduledPreloadExecutionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def stop_scheduled_preload_execution(
        self,
        request: esa20240910_models.StopScheduledPreloadExecutionRequest,
    ) -> esa20240910_models.StopScheduledPreloadExecutionResponse:
        """
        @summary Stops a scheduled prefetch plan based on the plan ID.
        
        @param request: StopScheduledPreloadExecutionRequest
        @return: StopScheduledPreloadExecutionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.stop_scheduled_preload_execution_with_options(request, runtime)

    async def stop_scheduled_preload_execution_async(
        self,
        request: esa20240910_models.StopScheduledPreloadExecutionRequest,
    ) -> esa20240910_models.StopScheduledPreloadExecutionResponse:
        """
        @summary Stops a scheduled prefetch plan based on the plan ID.
        
        @param request: StopScheduledPreloadExecutionRequest
        @return: StopScheduledPreloadExecutionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.stop_scheduled_preload_execution_with_options_async(request, runtime)

    def tag_resources_with_options(
        self,
        request: esa20240910_models.TagResourcesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.TagResourcesResponse:
        """
        @summary Adds one or more tags to resources.
        
        @param request: TagResourcesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: TagResourcesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.owner_id):
            query['OwnerId'] = request.owner_id
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        if not UtilClient.is_unset(request.resource_id):
            query['ResourceId'] = request.resource_id
        if not UtilClient.is_unset(request.resource_type):
            query['ResourceType'] = request.resource_type
        if not UtilClient.is_unset(request.security_token):
            query['SecurityToken'] = request.security_token
        if not UtilClient.is_unset(request.tag):
            query['Tag'] = request.tag
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='TagResources',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.TagResourcesResponse(),
            self.call_api(params, req, runtime)
        )

    async def tag_resources_with_options_async(
        self,
        request: esa20240910_models.TagResourcesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.TagResourcesResponse:
        """
        @summary Adds one or more tags to resources.
        
        @param request: TagResourcesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: TagResourcesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.owner_id):
            query['OwnerId'] = request.owner_id
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        if not UtilClient.is_unset(request.resource_id):
            query['ResourceId'] = request.resource_id
        if not UtilClient.is_unset(request.resource_type):
            query['ResourceType'] = request.resource_type
        if not UtilClient.is_unset(request.security_token):
            query['SecurityToken'] = request.security_token
        if not UtilClient.is_unset(request.tag):
            query['Tag'] = request.tag
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='TagResources',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.TagResourcesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def tag_resources(
        self,
        request: esa20240910_models.TagResourcesRequest,
    ) -> esa20240910_models.TagResourcesResponse:
        """
        @summary Adds one or more tags to resources.
        
        @param request: TagResourcesRequest
        @return: TagResourcesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.tag_resources_with_options(request, runtime)

    async def tag_resources_async(
        self,
        request: esa20240910_models.TagResourcesRequest,
    ) -> esa20240910_models.TagResourcesResponse:
        """
        @summary Adds one or more tags to resources.
        
        @param request: TagResourcesRequest
        @return: TagResourcesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.tag_resources_with_options_async(request, runtime)

    def untag_resources_with_options(
        self,
        request: esa20240910_models.UntagResourcesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UntagResourcesResponse:
        """
        @summary Deletes a resource tag based on a specified resource ID.
        
        @param request: UntagResourcesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UntagResourcesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.all):
            query['All'] = request.all
        if not UtilClient.is_unset(request.owner_id):
            query['OwnerId'] = request.owner_id
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        if not UtilClient.is_unset(request.resource_id):
            query['ResourceId'] = request.resource_id
        if not UtilClient.is_unset(request.resource_type):
            query['ResourceType'] = request.resource_type
        if not UtilClient.is_unset(request.security_token):
            query['SecurityToken'] = request.security_token
        if not UtilClient.is_unset(request.tag_key):
            query['TagKey'] = request.tag_key
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UntagResources',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UntagResourcesResponse(),
            self.call_api(params, req, runtime)
        )

    async def untag_resources_with_options_async(
        self,
        request: esa20240910_models.UntagResourcesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UntagResourcesResponse:
        """
        @summary Deletes a resource tag based on a specified resource ID.
        
        @param request: UntagResourcesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UntagResourcesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.all):
            query['All'] = request.all
        if not UtilClient.is_unset(request.owner_id):
            query['OwnerId'] = request.owner_id
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        if not UtilClient.is_unset(request.resource_id):
            query['ResourceId'] = request.resource_id
        if not UtilClient.is_unset(request.resource_type):
            query['ResourceType'] = request.resource_type
        if not UtilClient.is_unset(request.security_token):
            query['SecurityToken'] = request.security_token
        if not UtilClient.is_unset(request.tag_key):
            query['TagKey'] = request.tag_key
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UntagResources',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UntagResourcesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def untag_resources(
        self,
        request: esa20240910_models.UntagResourcesRequest,
    ) -> esa20240910_models.UntagResourcesResponse:
        """
        @summary Deletes a resource tag based on a specified resource ID.
        
        @param request: UntagResourcesRequest
        @return: UntagResourcesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.untag_resources_with_options(request, runtime)

    async def untag_resources_async(
        self,
        request: esa20240910_models.UntagResourcesRequest,
    ) -> esa20240910_models.UntagResourcesResponse:
        """
        @summary Deletes a resource tag based on a specified resource ID.
        
        @param request: UntagResourcesRequest
        @return: UntagResourcesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.untag_resources_with_options_async(request, runtime)

    def update_cache_reserve_spec_with_options(
        self,
        request: esa20240910_models.UpdateCacheReserveSpecRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateCacheReserveSpecResponse:
        """
        @summary 缓存保持变配
        
        @param request: UpdateCacheReserveSpecRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateCacheReserveSpecResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.auto_pay):
            query['AutoPay'] = request.auto_pay
        if not UtilClient.is_unset(request.charge_type):
            query['ChargeType'] = request.charge_type
        if not UtilClient.is_unset(request.instance_id):
            query['InstanceId'] = request.instance_id
        if not UtilClient.is_unset(request.target_quota_gb):
            query['TargetQuotaGb'] = request.target_quota_gb
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateCacheReserveSpec',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateCacheReserveSpecResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_cache_reserve_spec_with_options_async(
        self,
        request: esa20240910_models.UpdateCacheReserveSpecRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateCacheReserveSpecResponse:
        """
        @summary 缓存保持变配
        
        @param request: UpdateCacheReserveSpecRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateCacheReserveSpecResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.auto_pay):
            query['AutoPay'] = request.auto_pay
        if not UtilClient.is_unset(request.charge_type):
            query['ChargeType'] = request.charge_type
        if not UtilClient.is_unset(request.instance_id):
            query['InstanceId'] = request.instance_id
        if not UtilClient.is_unset(request.target_quota_gb):
            query['TargetQuotaGb'] = request.target_quota_gb
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateCacheReserveSpec',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateCacheReserveSpecResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_cache_reserve_spec(
        self,
        request: esa20240910_models.UpdateCacheReserveSpecRequest,
    ) -> esa20240910_models.UpdateCacheReserveSpecResponse:
        """
        @summary 缓存保持变配
        
        @param request: UpdateCacheReserveSpecRequest
        @return: UpdateCacheReserveSpecResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_cache_reserve_spec_with_options(request, runtime)

    async def update_cache_reserve_spec_async(
        self,
        request: esa20240910_models.UpdateCacheReserveSpecRequest,
    ) -> esa20240910_models.UpdateCacheReserveSpecResponse:
        """
        @summary 缓存保持变配
        
        @param request: UpdateCacheReserveSpecRequest
        @return: UpdateCacheReserveSpecResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_cache_reserve_spec_with_options_async(request, runtime)

    def update_cache_rule_with_options(
        self,
        request: esa20240910_models.UpdateCacheRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateCacheRuleResponse:
        """
        @summary Modify cache configuration
        
        @param request: UpdateCacheRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateCacheRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.additional_cacheable_ports):
            query['AdditionalCacheablePorts'] = request.additional_cacheable_ports
        if not UtilClient.is_unset(request.browser_cache_mode):
            query['BrowserCacheMode'] = request.browser_cache_mode
        if not UtilClient.is_unset(request.browser_cache_ttl):
            query['BrowserCacheTtl'] = request.browser_cache_ttl
        if not UtilClient.is_unset(request.bypass_cache):
            query['BypassCache'] = request.bypass_cache
        if not UtilClient.is_unset(request.cache_deception_armor):
            query['CacheDeceptionArmor'] = request.cache_deception_armor
        if not UtilClient.is_unset(request.cache_reserve_eligibility):
            query['CacheReserveEligibility'] = request.cache_reserve_eligibility
        if not UtilClient.is_unset(request.check_presence_cookie):
            query['CheckPresenceCookie'] = request.check_presence_cookie
        if not UtilClient.is_unset(request.check_presence_header):
            query['CheckPresenceHeader'] = request.check_presence_header
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.edge_cache_mode):
            query['EdgeCacheMode'] = request.edge_cache_mode
        if not UtilClient.is_unset(request.edge_cache_ttl):
            query['EdgeCacheTtl'] = request.edge_cache_ttl
        if not UtilClient.is_unset(request.edge_status_code_cache_ttl):
            query['EdgeStatusCodeCacheTtl'] = request.edge_status_code_cache_ttl
        if not UtilClient.is_unset(request.include_cookie):
            query['IncludeCookie'] = request.include_cookie
        if not UtilClient.is_unset(request.include_header):
            query['IncludeHeader'] = request.include_header
        if not UtilClient.is_unset(request.query_string):
            query['QueryString'] = request.query_string
        if not UtilClient.is_unset(request.query_string_mode):
            query['QueryStringMode'] = request.query_string_mode
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.serve_stale):
            query['ServeStale'] = request.serve_stale
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.sort_query_string_for_cache):
            query['SortQueryStringForCache'] = request.sort_query_string_for_cache
        if not UtilClient.is_unset(request.user_device_type):
            query['UserDeviceType'] = request.user_device_type
        if not UtilClient.is_unset(request.user_geo):
            query['UserGeo'] = request.user_geo
        if not UtilClient.is_unset(request.user_language):
            query['UserLanguage'] = request.user_language
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateCacheRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateCacheRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_cache_rule_with_options_async(
        self,
        request: esa20240910_models.UpdateCacheRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateCacheRuleResponse:
        """
        @summary Modify cache configuration
        
        @param request: UpdateCacheRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateCacheRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.additional_cacheable_ports):
            query['AdditionalCacheablePorts'] = request.additional_cacheable_ports
        if not UtilClient.is_unset(request.browser_cache_mode):
            query['BrowserCacheMode'] = request.browser_cache_mode
        if not UtilClient.is_unset(request.browser_cache_ttl):
            query['BrowserCacheTtl'] = request.browser_cache_ttl
        if not UtilClient.is_unset(request.bypass_cache):
            query['BypassCache'] = request.bypass_cache
        if not UtilClient.is_unset(request.cache_deception_armor):
            query['CacheDeceptionArmor'] = request.cache_deception_armor
        if not UtilClient.is_unset(request.cache_reserve_eligibility):
            query['CacheReserveEligibility'] = request.cache_reserve_eligibility
        if not UtilClient.is_unset(request.check_presence_cookie):
            query['CheckPresenceCookie'] = request.check_presence_cookie
        if not UtilClient.is_unset(request.check_presence_header):
            query['CheckPresenceHeader'] = request.check_presence_header
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.edge_cache_mode):
            query['EdgeCacheMode'] = request.edge_cache_mode
        if not UtilClient.is_unset(request.edge_cache_ttl):
            query['EdgeCacheTtl'] = request.edge_cache_ttl
        if not UtilClient.is_unset(request.edge_status_code_cache_ttl):
            query['EdgeStatusCodeCacheTtl'] = request.edge_status_code_cache_ttl
        if not UtilClient.is_unset(request.include_cookie):
            query['IncludeCookie'] = request.include_cookie
        if not UtilClient.is_unset(request.include_header):
            query['IncludeHeader'] = request.include_header
        if not UtilClient.is_unset(request.query_string):
            query['QueryString'] = request.query_string
        if not UtilClient.is_unset(request.query_string_mode):
            query['QueryStringMode'] = request.query_string_mode
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.serve_stale):
            query['ServeStale'] = request.serve_stale
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.sort_query_string_for_cache):
            query['SortQueryStringForCache'] = request.sort_query_string_for_cache
        if not UtilClient.is_unset(request.user_device_type):
            query['UserDeviceType'] = request.user_device_type
        if not UtilClient.is_unset(request.user_geo):
            query['UserGeo'] = request.user_geo
        if not UtilClient.is_unset(request.user_language):
            query['UserLanguage'] = request.user_language
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateCacheRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateCacheRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_cache_rule(
        self,
        request: esa20240910_models.UpdateCacheRuleRequest,
    ) -> esa20240910_models.UpdateCacheRuleResponse:
        """
        @summary Modify cache configuration
        
        @param request: UpdateCacheRuleRequest
        @return: UpdateCacheRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_cache_rule_with_options(request, runtime)

    async def update_cache_rule_async(
        self,
        request: esa20240910_models.UpdateCacheRuleRequest,
    ) -> esa20240910_models.UpdateCacheRuleResponse:
        """
        @summary Modify cache configuration
        
        @param request: UpdateCacheRuleRequest
        @return: UpdateCacheRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_cache_rule_with_options_async(request, runtime)

    def update_cache_tag_with_options(
        self,
        request: esa20240910_models.UpdateCacheTagRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateCacheTagResponse:
        """
        @summary Modifies the cache tag configuration of your website. You can call this operation when you need to specify tags in the Cache-Tag response header to use the purge by cache tag feature.
        
        @param request: UpdateCacheTagRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateCacheTagResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.case_insensitive):
            query['CaseInsensitive'] = request.case_insensitive
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        if not UtilClient.is_unset(request.tag_name):
            query['TagName'] = request.tag_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateCacheTag',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateCacheTagResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_cache_tag_with_options_async(
        self,
        request: esa20240910_models.UpdateCacheTagRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateCacheTagResponse:
        """
        @summary Modifies the cache tag configuration of your website. You can call this operation when you need to specify tags in the Cache-Tag response header to use the purge by cache tag feature.
        
        @param request: UpdateCacheTagRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateCacheTagResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.case_insensitive):
            query['CaseInsensitive'] = request.case_insensitive
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        if not UtilClient.is_unset(request.tag_name):
            query['TagName'] = request.tag_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateCacheTag',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateCacheTagResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_cache_tag(
        self,
        request: esa20240910_models.UpdateCacheTagRequest,
    ) -> esa20240910_models.UpdateCacheTagResponse:
        """
        @summary Modifies the cache tag configuration of your website. You can call this operation when you need to specify tags in the Cache-Tag response header to use the purge by cache tag feature.
        
        @param request: UpdateCacheTagRequest
        @return: UpdateCacheTagResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_cache_tag_with_options(request, runtime)

    async def update_cache_tag_async(
        self,
        request: esa20240910_models.UpdateCacheTagRequest,
    ) -> esa20240910_models.UpdateCacheTagResponse:
        """
        @summary Modifies the cache tag configuration of your website. You can call this operation when you need to specify tags in the Cache-Tag response header to use the purge by cache tag feature.
        
        @param request: UpdateCacheTagRequest
        @return: UpdateCacheTagResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_cache_tag_with_options_async(request, runtime)

    def update_cname_flattening_with_options(
        self,
        request: esa20240910_models.UpdateCnameFlatteningRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateCnameFlatteningResponse:
        """
        @summary Modifies the CNAME flattening configuration of a website.
        
        @param request: UpdateCnameFlatteningRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateCnameFlatteningResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.flatten_mode):
            query['FlattenMode'] = request.flatten_mode
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateCnameFlattening',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateCnameFlatteningResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_cname_flattening_with_options_async(
        self,
        request: esa20240910_models.UpdateCnameFlatteningRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateCnameFlatteningResponse:
        """
        @summary Modifies the CNAME flattening configuration of a website.
        
        @param request: UpdateCnameFlatteningRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateCnameFlatteningResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.flatten_mode):
            query['FlattenMode'] = request.flatten_mode
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateCnameFlattening',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateCnameFlatteningResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_cname_flattening(
        self,
        request: esa20240910_models.UpdateCnameFlatteningRequest,
    ) -> esa20240910_models.UpdateCnameFlatteningResponse:
        """
        @summary Modifies the CNAME flattening configuration of a website.
        
        @param request: UpdateCnameFlatteningRequest
        @return: UpdateCnameFlatteningResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_cname_flattening_with_options(request, runtime)

    async def update_cname_flattening_async(
        self,
        request: esa20240910_models.UpdateCnameFlatteningRequest,
    ) -> esa20240910_models.UpdateCnameFlatteningResponse:
        """
        @summary Modifies the CNAME flattening configuration of a website.
        
        @param request: UpdateCnameFlatteningRequest
        @return: UpdateCnameFlatteningResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_cname_flattening_with_options_async(request, runtime)

    def update_compression_rule_with_options(
        self,
        request: esa20240910_models.UpdateCompressionRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateCompressionRuleResponse:
        """
        @summary Modify compression rule
        
        @param request: UpdateCompressionRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateCompressionRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.brotli):
            query['Brotli'] = request.brotli
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.gzip):
            query['Gzip'] = request.gzip
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.zstd):
            query['Zstd'] = request.zstd
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateCompressionRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateCompressionRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_compression_rule_with_options_async(
        self,
        request: esa20240910_models.UpdateCompressionRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateCompressionRuleResponse:
        """
        @summary Modify compression rule
        
        @param request: UpdateCompressionRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateCompressionRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.brotli):
            query['Brotli'] = request.brotli
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.gzip):
            query['Gzip'] = request.gzip
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.zstd):
            query['Zstd'] = request.zstd
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateCompressionRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateCompressionRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_compression_rule(
        self,
        request: esa20240910_models.UpdateCompressionRuleRequest,
    ) -> esa20240910_models.UpdateCompressionRuleResponse:
        """
        @summary Modify compression rule
        
        @param request: UpdateCompressionRuleRequest
        @return: UpdateCompressionRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_compression_rule_with_options(request, runtime)

    async def update_compression_rule_async(
        self,
        request: esa20240910_models.UpdateCompressionRuleRequest,
    ) -> esa20240910_models.UpdateCompressionRuleResponse:
        """
        @summary Modify compression rule
        
        @param request: UpdateCompressionRuleRequest
        @return: UpdateCompressionRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_compression_rule_with_options_async(request, runtime)

    def update_cross_border_optimization_with_options(
        self,
        request: esa20240910_models.UpdateCrossBorderOptimizationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateCrossBorderOptimizationResponse:
        """
        @summary Modifies the configuration of the Chinese mainland network access optimization.
        
        @param request: UpdateCrossBorderOptimizationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateCrossBorderOptimizationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.enable):
            query['Enable'] = request.enable
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateCrossBorderOptimization',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateCrossBorderOptimizationResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_cross_border_optimization_with_options_async(
        self,
        request: esa20240910_models.UpdateCrossBorderOptimizationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateCrossBorderOptimizationResponse:
        """
        @summary Modifies the configuration of the Chinese mainland network access optimization.
        
        @param request: UpdateCrossBorderOptimizationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateCrossBorderOptimizationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.enable):
            query['Enable'] = request.enable
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateCrossBorderOptimization',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateCrossBorderOptimizationResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_cross_border_optimization(
        self,
        request: esa20240910_models.UpdateCrossBorderOptimizationRequest,
    ) -> esa20240910_models.UpdateCrossBorderOptimizationResponse:
        """
        @summary Modifies the configuration of the Chinese mainland network access optimization.
        
        @param request: UpdateCrossBorderOptimizationRequest
        @return: UpdateCrossBorderOptimizationResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_cross_border_optimization_with_options(request, runtime)

    async def update_cross_border_optimization_async(
        self,
        request: esa20240910_models.UpdateCrossBorderOptimizationRequest,
    ) -> esa20240910_models.UpdateCrossBorderOptimizationResponse:
        """
        @summary Modifies the configuration of the Chinese mainland network access optimization.
        
        @param request: UpdateCrossBorderOptimizationRequest
        @return: UpdateCrossBorderOptimizationResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_cross_border_optimization_with_options_async(request, runtime)

    def update_custom_scene_policy_with_options(
        self,
        request: esa20240910_models.UpdateCustomScenePolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateCustomScenePolicyResponse:
        """
        @summary Modifies the configurations of a custom scenario-specific policy.
        
        @param request: UpdateCustomScenePolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateCustomScenePolicyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.objects):
            query['Objects'] = request.objects
        if not UtilClient.is_unset(request.policy_id):
            query['PolicyId'] = request.policy_id
        if not UtilClient.is_unset(request.site_ids):
            query['SiteIds'] = request.site_ids
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.template):
            query['Template'] = request.template
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateCustomScenePolicy',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateCustomScenePolicyResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_custom_scene_policy_with_options_async(
        self,
        request: esa20240910_models.UpdateCustomScenePolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateCustomScenePolicyResponse:
        """
        @summary Modifies the configurations of a custom scenario-specific policy.
        
        @param request: UpdateCustomScenePolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateCustomScenePolicyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.objects):
            query['Objects'] = request.objects
        if not UtilClient.is_unset(request.policy_id):
            query['PolicyId'] = request.policy_id
        if not UtilClient.is_unset(request.site_ids):
            query['SiteIds'] = request.site_ids
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.template):
            query['Template'] = request.template
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateCustomScenePolicy',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateCustomScenePolicyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_custom_scene_policy(
        self,
        request: esa20240910_models.UpdateCustomScenePolicyRequest,
    ) -> esa20240910_models.UpdateCustomScenePolicyResponse:
        """
        @summary Modifies the configurations of a custom scenario-specific policy.
        
        @param request: UpdateCustomScenePolicyRequest
        @return: UpdateCustomScenePolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_custom_scene_policy_with_options(request, runtime)

    async def update_custom_scene_policy_async(
        self,
        request: esa20240910_models.UpdateCustomScenePolicyRequest,
    ) -> esa20240910_models.UpdateCustomScenePolicyResponse:
        """
        @summary Modifies the configurations of a custom scenario-specific policy.
        
        @param request: UpdateCustomScenePolicyRequest
        @return: UpdateCustomScenePolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_custom_scene_policy_with_options_async(request, runtime)

    def update_development_mode_with_options(
        self,
        request: esa20240910_models.UpdateDevelopmentModeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateDevelopmentModeResponse:
        """
        @summary Modifies the development mode configuration of your website. If you enable Development Mode, all requests bypass caching components on POPs and are redirected to the origin server. This allows clients to retrieve the most recent resources on the origin server.
        
        @param request: UpdateDevelopmentModeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateDevelopmentModeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.enable):
            query['Enable'] = request.enable
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateDevelopmentMode',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateDevelopmentModeResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_development_mode_with_options_async(
        self,
        request: esa20240910_models.UpdateDevelopmentModeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateDevelopmentModeResponse:
        """
        @summary Modifies the development mode configuration of your website. If you enable Development Mode, all requests bypass caching components on POPs and are redirected to the origin server. This allows clients to retrieve the most recent resources on the origin server.
        
        @param request: UpdateDevelopmentModeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateDevelopmentModeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.enable):
            query['Enable'] = request.enable
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateDevelopmentMode',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateDevelopmentModeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_development_mode(
        self,
        request: esa20240910_models.UpdateDevelopmentModeRequest,
    ) -> esa20240910_models.UpdateDevelopmentModeResponse:
        """
        @summary Modifies the development mode configuration of your website. If you enable Development Mode, all requests bypass caching components on POPs and are redirected to the origin server. This allows clients to retrieve the most recent resources on the origin server.
        
        @param request: UpdateDevelopmentModeRequest
        @return: UpdateDevelopmentModeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_development_mode_with_options(request, runtime)

    async def update_development_mode_async(
        self,
        request: esa20240910_models.UpdateDevelopmentModeRequest,
    ) -> esa20240910_models.UpdateDevelopmentModeResponse:
        """
        @summary Modifies the development mode configuration of your website. If you enable Development Mode, all requests bypass caching components on POPs and are redirected to the origin server. This allows clients to retrieve the most recent resources on the origin server.
        
        @param request: UpdateDevelopmentModeRequest
        @return: UpdateDevelopmentModeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_development_mode_with_options_async(request, runtime)

    def update_edge_container_app_log_river_with_options(
        self,
        request: esa20240910_models.UpdateEdgeContainerAppLogRiverRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateEdgeContainerAppLogRiverResponse:
        """
        @summary Updates the log collection configuration of a containerized application.
        
        @param request: UpdateEdgeContainerAppLogRiverRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateEdgeContainerAppLogRiverResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_id):
            query['AppId'] = request.app_id
        if not UtilClient.is_unset(request.path):
            query['Path'] = request.path
        if not UtilClient.is_unset(request.stdout):
            query['Stdout'] = request.stdout
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateEdgeContainerAppLogRiver',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateEdgeContainerAppLogRiverResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_edge_container_app_log_river_with_options_async(
        self,
        request: esa20240910_models.UpdateEdgeContainerAppLogRiverRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateEdgeContainerAppLogRiverResponse:
        """
        @summary Updates the log collection configuration of a containerized application.
        
        @param request: UpdateEdgeContainerAppLogRiverRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateEdgeContainerAppLogRiverResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_id):
            query['AppId'] = request.app_id
        if not UtilClient.is_unset(request.path):
            query['Path'] = request.path
        if not UtilClient.is_unset(request.stdout):
            query['Stdout'] = request.stdout
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateEdgeContainerAppLogRiver',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateEdgeContainerAppLogRiverResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_edge_container_app_log_river(
        self,
        request: esa20240910_models.UpdateEdgeContainerAppLogRiverRequest,
    ) -> esa20240910_models.UpdateEdgeContainerAppLogRiverResponse:
        """
        @summary Updates the log collection configuration of a containerized application.
        
        @param request: UpdateEdgeContainerAppLogRiverRequest
        @return: UpdateEdgeContainerAppLogRiverResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_edge_container_app_log_river_with_options(request, runtime)

    async def update_edge_container_app_log_river_async(
        self,
        request: esa20240910_models.UpdateEdgeContainerAppLogRiverRequest,
    ) -> esa20240910_models.UpdateEdgeContainerAppLogRiverResponse:
        """
        @summary Updates the log collection configuration of a containerized application.
        
        @param request: UpdateEdgeContainerAppLogRiverRequest
        @return: UpdateEdgeContainerAppLogRiverResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_edge_container_app_log_river_with_options_async(request, runtime)

    def update_edge_container_app_resource_reserve_with_options(
        self,
        tmp_req: esa20240910_models.UpdateEdgeContainerAppResourceReserveRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateEdgeContainerAppResourceReserveResponse:
        """
        @summary 更新边缘容器资源预留配置
        
        @param tmp_req: UpdateEdgeContainerAppResourceReserveRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateEdgeContainerAppResourceReserveResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.UpdateEdgeContainerAppResourceReserveShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.reserve_set):
            request.reserve_set_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.reserve_set, 'ReserveSet', 'json')
        query = {}
        if not UtilClient.is_unset(request.app_id):
            query['AppId'] = request.app_id
        if not UtilClient.is_unset(request.duration_time):
            query['DurationTime'] = request.duration_time
        if not UtilClient.is_unset(request.enable):
            query['Enable'] = request.enable
        if not UtilClient.is_unset(request.forever):
            query['Forever'] = request.forever
        if not UtilClient.is_unset(request.reserve_set_shrink):
            query['ReserveSet'] = request.reserve_set_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateEdgeContainerAppResourceReserve',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateEdgeContainerAppResourceReserveResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_edge_container_app_resource_reserve_with_options_async(
        self,
        tmp_req: esa20240910_models.UpdateEdgeContainerAppResourceReserveRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateEdgeContainerAppResourceReserveResponse:
        """
        @summary 更新边缘容器资源预留配置
        
        @param tmp_req: UpdateEdgeContainerAppResourceReserveRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateEdgeContainerAppResourceReserveResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.UpdateEdgeContainerAppResourceReserveShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.reserve_set):
            request.reserve_set_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.reserve_set, 'ReserveSet', 'json')
        query = {}
        if not UtilClient.is_unset(request.app_id):
            query['AppId'] = request.app_id
        if not UtilClient.is_unset(request.duration_time):
            query['DurationTime'] = request.duration_time
        if not UtilClient.is_unset(request.enable):
            query['Enable'] = request.enable
        if not UtilClient.is_unset(request.forever):
            query['Forever'] = request.forever
        if not UtilClient.is_unset(request.reserve_set_shrink):
            query['ReserveSet'] = request.reserve_set_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateEdgeContainerAppResourceReserve',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateEdgeContainerAppResourceReserveResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_edge_container_app_resource_reserve(
        self,
        request: esa20240910_models.UpdateEdgeContainerAppResourceReserveRequest,
    ) -> esa20240910_models.UpdateEdgeContainerAppResourceReserveResponse:
        """
        @summary 更新边缘容器资源预留配置
        
        @param request: UpdateEdgeContainerAppResourceReserveRequest
        @return: UpdateEdgeContainerAppResourceReserveResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_edge_container_app_resource_reserve_with_options(request, runtime)

    async def update_edge_container_app_resource_reserve_async(
        self,
        request: esa20240910_models.UpdateEdgeContainerAppResourceReserveRequest,
    ) -> esa20240910_models.UpdateEdgeContainerAppResourceReserveResponse:
        """
        @summary 更新边缘容器资源预留配置
        
        @param request: UpdateEdgeContainerAppResourceReserveRequest
        @return: UpdateEdgeContainerAppResourceReserveResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_edge_container_app_resource_reserve_with_options_async(request, runtime)

    def update_http_incoming_request_header_modification_rule_with_options(
        self,
        tmp_req: esa20240910_models.UpdateHttpIncomingRequestHeaderModificationRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateHttpIncomingRequestHeaderModificationRuleResponse:
        """
        @summary 修改HTTP入站请求头规则
        
        @param tmp_req: UpdateHttpIncomingRequestHeaderModificationRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateHttpIncomingRequestHeaderModificationRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.UpdateHttpIncomingRequestHeaderModificationRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.request_header_modification):
            request.request_header_modification_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.request_header_modification, 'RequestHeaderModification', 'json')
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.request_header_modification_shrink):
            query['RequestHeaderModification'] = request.request_header_modification_shrink
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateHttpIncomingRequestHeaderModificationRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateHttpIncomingRequestHeaderModificationRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_http_incoming_request_header_modification_rule_with_options_async(
        self,
        tmp_req: esa20240910_models.UpdateHttpIncomingRequestHeaderModificationRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateHttpIncomingRequestHeaderModificationRuleResponse:
        """
        @summary 修改HTTP入站请求头规则
        
        @param tmp_req: UpdateHttpIncomingRequestHeaderModificationRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateHttpIncomingRequestHeaderModificationRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.UpdateHttpIncomingRequestHeaderModificationRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.request_header_modification):
            request.request_header_modification_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.request_header_modification, 'RequestHeaderModification', 'json')
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.request_header_modification_shrink):
            query['RequestHeaderModification'] = request.request_header_modification_shrink
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateHttpIncomingRequestHeaderModificationRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateHttpIncomingRequestHeaderModificationRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_http_incoming_request_header_modification_rule(
        self,
        request: esa20240910_models.UpdateHttpIncomingRequestHeaderModificationRuleRequest,
    ) -> esa20240910_models.UpdateHttpIncomingRequestHeaderModificationRuleResponse:
        """
        @summary 修改HTTP入站请求头规则
        
        @param request: UpdateHttpIncomingRequestHeaderModificationRuleRequest
        @return: UpdateHttpIncomingRequestHeaderModificationRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_http_incoming_request_header_modification_rule_with_options(request, runtime)

    async def update_http_incoming_request_header_modification_rule_async(
        self,
        request: esa20240910_models.UpdateHttpIncomingRequestHeaderModificationRuleRequest,
    ) -> esa20240910_models.UpdateHttpIncomingRequestHeaderModificationRuleResponse:
        """
        @summary 修改HTTP入站请求头规则
        
        @param request: UpdateHttpIncomingRequestHeaderModificationRuleRequest
        @return: UpdateHttpIncomingRequestHeaderModificationRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_http_incoming_request_header_modification_rule_with_options_async(request, runtime)

    def update_http_incoming_response_header_modification_rule_with_options(
        self,
        tmp_req: esa20240910_models.UpdateHttpIncomingResponseHeaderModificationRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateHttpIncomingResponseHeaderModificationRuleResponse:
        """
        @summary 修改HTTP入站响应头规则
        
        @param tmp_req: UpdateHttpIncomingResponseHeaderModificationRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateHttpIncomingResponseHeaderModificationRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.UpdateHttpIncomingResponseHeaderModificationRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.response_header_modification):
            request.response_header_modification_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.response_header_modification, 'ResponseHeaderModification', 'json')
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.response_header_modification_shrink):
            query['ResponseHeaderModification'] = request.response_header_modification_shrink
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateHttpIncomingResponseHeaderModificationRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateHttpIncomingResponseHeaderModificationRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_http_incoming_response_header_modification_rule_with_options_async(
        self,
        tmp_req: esa20240910_models.UpdateHttpIncomingResponseHeaderModificationRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateHttpIncomingResponseHeaderModificationRuleResponse:
        """
        @summary 修改HTTP入站响应头规则
        
        @param tmp_req: UpdateHttpIncomingResponseHeaderModificationRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateHttpIncomingResponseHeaderModificationRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.UpdateHttpIncomingResponseHeaderModificationRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.response_header_modification):
            request.response_header_modification_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.response_header_modification, 'ResponseHeaderModification', 'json')
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.response_header_modification_shrink):
            query['ResponseHeaderModification'] = request.response_header_modification_shrink
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateHttpIncomingResponseHeaderModificationRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateHttpIncomingResponseHeaderModificationRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_http_incoming_response_header_modification_rule(
        self,
        request: esa20240910_models.UpdateHttpIncomingResponseHeaderModificationRuleRequest,
    ) -> esa20240910_models.UpdateHttpIncomingResponseHeaderModificationRuleResponse:
        """
        @summary 修改HTTP入站响应头规则
        
        @param request: UpdateHttpIncomingResponseHeaderModificationRuleRequest
        @return: UpdateHttpIncomingResponseHeaderModificationRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_http_incoming_response_header_modification_rule_with_options(request, runtime)

    async def update_http_incoming_response_header_modification_rule_async(
        self,
        request: esa20240910_models.UpdateHttpIncomingResponseHeaderModificationRuleRequest,
    ) -> esa20240910_models.UpdateHttpIncomingResponseHeaderModificationRuleResponse:
        """
        @summary 修改HTTP入站响应头规则
        
        @param request: UpdateHttpIncomingResponseHeaderModificationRuleRequest
        @return: UpdateHttpIncomingResponseHeaderModificationRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_http_incoming_response_header_modification_rule_with_options_async(request, runtime)

    def update_http_request_header_modification_rule_with_options(
        self,
        tmp_req: esa20240910_models.UpdateHttpRequestHeaderModificationRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateHttpRequestHeaderModificationRuleResponse:
        """
        @summary Modify HTTP Request Header Rules
        
        @param tmp_req: UpdateHttpRequestHeaderModificationRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateHttpRequestHeaderModificationRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.UpdateHttpRequestHeaderModificationRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.request_header_modification):
            request.request_header_modification_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.request_header_modification, 'RequestHeaderModification', 'json')
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.request_header_modification_shrink):
            query['RequestHeaderModification'] = request.request_header_modification_shrink
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateHttpRequestHeaderModificationRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateHttpRequestHeaderModificationRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_http_request_header_modification_rule_with_options_async(
        self,
        tmp_req: esa20240910_models.UpdateHttpRequestHeaderModificationRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateHttpRequestHeaderModificationRuleResponse:
        """
        @summary Modify HTTP Request Header Rules
        
        @param tmp_req: UpdateHttpRequestHeaderModificationRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateHttpRequestHeaderModificationRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.UpdateHttpRequestHeaderModificationRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.request_header_modification):
            request.request_header_modification_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.request_header_modification, 'RequestHeaderModification', 'json')
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.request_header_modification_shrink):
            query['RequestHeaderModification'] = request.request_header_modification_shrink
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateHttpRequestHeaderModificationRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateHttpRequestHeaderModificationRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_http_request_header_modification_rule(
        self,
        request: esa20240910_models.UpdateHttpRequestHeaderModificationRuleRequest,
    ) -> esa20240910_models.UpdateHttpRequestHeaderModificationRuleResponse:
        """
        @summary Modify HTTP Request Header Rules
        
        @param request: UpdateHttpRequestHeaderModificationRuleRequest
        @return: UpdateHttpRequestHeaderModificationRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_http_request_header_modification_rule_with_options(request, runtime)

    async def update_http_request_header_modification_rule_async(
        self,
        request: esa20240910_models.UpdateHttpRequestHeaderModificationRuleRequest,
    ) -> esa20240910_models.UpdateHttpRequestHeaderModificationRuleResponse:
        """
        @summary Modify HTTP Request Header Rules
        
        @param request: UpdateHttpRequestHeaderModificationRuleRequest
        @return: UpdateHttpRequestHeaderModificationRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_http_request_header_modification_rule_with_options_async(request, runtime)

    def update_http_response_header_modification_rule_with_options(
        self,
        tmp_req: esa20240910_models.UpdateHttpResponseHeaderModificationRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateHttpResponseHeaderModificationRuleResponse:
        """
        @summary Modify HTTP response header rules
        
        @param tmp_req: UpdateHttpResponseHeaderModificationRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateHttpResponseHeaderModificationRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.UpdateHttpResponseHeaderModificationRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.response_header_modification):
            request.response_header_modification_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.response_header_modification, 'ResponseHeaderModification', 'json')
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.response_header_modification_shrink):
            query['ResponseHeaderModification'] = request.response_header_modification_shrink
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateHttpResponseHeaderModificationRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateHttpResponseHeaderModificationRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_http_response_header_modification_rule_with_options_async(
        self,
        tmp_req: esa20240910_models.UpdateHttpResponseHeaderModificationRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateHttpResponseHeaderModificationRuleResponse:
        """
        @summary Modify HTTP response header rules
        
        @param tmp_req: UpdateHttpResponseHeaderModificationRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateHttpResponseHeaderModificationRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.UpdateHttpResponseHeaderModificationRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.response_header_modification):
            request.response_header_modification_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.response_header_modification, 'ResponseHeaderModification', 'json')
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.response_header_modification_shrink):
            query['ResponseHeaderModification'] = request.response_header_modification_shrink
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateHttpResponseHeaderModificationRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateHttpResponseHeaderModificationRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_http_response_header_modification_rule(
        self,
        request: esa20240910_models.UpdateHttpResponseHeaderModificationRuleRequest,
    ) -> esa20240910_models.UpdateHttpResponseHeaderModificationRuleResponse:
        """
        @summary Modify HTTP response header rules
        
        @param request: UpdateHttpResponseHeaderModificationRuleRequest
        @return: UpdateHttpResponseHeaderModificationRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_http_response_header_modification_rule_with_options(request, runtime)

    async def update_http_response_header_modification_rule_async(
        self,
        request: esa20240910_models.UpdateHttpResponseHeaderModificationRuleRequest,
    ) -> esa20240910_models.UpdateHttpResponseHeaderModificationRuleResponse:
        """
        @summary Modify HTTP response header rules
        
        @param request: UpdateHttpResponseHeaderModificationRuleRequest
        @return: UpdateHttpResponseHeaderModificationRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_http_response_header_modification_rule_with_options_async(request, runtime)

    def update_https_application_configuration_with_options(
        self,
        request: esa20240910_models.UpdateHttpsApplicationConfigurationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateHttpsApplicationConfigurationResponse:
        """
        @summary Modify HTTPS Application Configuration
        
        @param request: UpdateHttpsApplicationConfigurationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateHttpsApplicationConfigurationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.alt_svc):
            query['AltSvc'] = request.alt_svc
        if not UtilClient.is_unset(request.alt_svc_clear):
            query['AltSvcClear'] = request.alt_svc_clear
        if not UtilClient.is_unset(request.alt_svc_ma):
            query['AltSvcMa'] = request.alt_svc_ma
        if not UtilClient.is_unset(request.alt_svc_persist):
            query['AltSvcPersist'] = request.alt_svc_persist
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.hsts):
            query['Hsts'] = request.hsts
        if not UtilClient.is_unset(request.hsts_include_subdomains):
            query['HstsIncludeSubdomains'] = request.hsts_include_subdomains
        if not UtilClient.is_unset(request.hsts_max_age):
            query['HstsMaxAge'] = request.hsts_max_age
        if not UtilClient.is_unset(request.hsts_preload):
            query['HstsPreload'] = request.hsts_preload
        if not UtilClient.is_unset(request.https_force):
            query['HttpsForce'] = request.https_force
        if not UtilClient.is_unset(request.https_force_code):
            query['HttpsForceCode'] = request.https_force_code
        if not UtilClient.is_unset(request.https_no_sni_deny):
            query['HttpsNoSniDeny'] = request.https_no_sni_deny
        if not UtilClient.is_unset(request.https_sni_verify):
            query['HttpsSniVerify'] = request.https_sni_verify
        if not UtilClient.is_unset(request.https_sni_whitelist):
            query['HttpsSniWhitelist'] = request.https_sni_whitelist
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateHttpsApplicationConfiguration',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateHttpsApplicationConfigurationResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_https_application_configuration_with_options_async(
        self,
        request: esa20240910_models.UpdateHttpsApplicationConfigurationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateHttpsApplicationConfigurationResponse:
        """
        @summary Modify HTTPS Application Configuration
        
        @param request: UpdateHttpsApplicationConfigurationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateHttpsApplicationConfigurationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.alt_svc):
            query['AltSvc'] = request.alt_svc
        if not UtilClient.is_unset(request.alt_svc_clear):
            query['AltSvcClear'] = request.alt_svc_clear
        if not UtilClient.is_unset(request.alt_svc_ma):
            query['AltSvcMa'] = request.alt_svc_ma
        if not UtilClient.is_unset(request.alt_svc_persist):
            query['AltSvcPersist'] = request.alt_svc_persist
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.hsts):
            query['Hsts'] = request.hsts
        if not UtilClient.is_unset(request.hsts_include_subdomains):
            query['HstsIncludeSubdomains'] = request.hsts_include_subdomains
        if not UtilClient.is_unset(request.hsts_max_age):
            query['HstsMaxAge'] = request.hsts_max_age
        if not UtilClient.is_unset(request.hsts_preload):
            query['HstsPreload'] = request.hsts_preload
        if not UtilClient.is_unset(request.https_force):
            query['HttpsForce'] = request.https_force
        if not UtilClient.is_unset(request.https_force_code):
            query['HttpsForceCode'] = request.https_force_code
        if not UtilClient.is_unset(request.https_no_sni_deny):
            query['HttpsNoSniDeny'] = request.https_no_sni_deny
        if not UtilClient.is_unset(request.https_sni_verify):
            query['HttpsSniVerify'] = request.https_sni_verify
        if not UtilClient.is_unset(request.https_sni_whitelist):
            query['HttpsSniWhitelist'] = request.https_sni_whitelist
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateHttpsApplicationConfiguration',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateHttpsApplicationConfigurationResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_https_application_configuration(
        self,
        request: esa20240910_models.UpdateHttpsApplicationConfigurationRequest,
    ) -> esa20240910_models.UpdateHttpsApplicationConfigurationResponse:
        """
        @summary Modify HTTPS Application Configuration
        
        @param request: UpdateHttpsApplicationConfigurationRequest
        @return: UpdateHttpsApplicationConfigurationResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_https_application_configuration_with_options(request, runtime)

    async def update_https_application_configuration_async(
        self,
        request: esa20240910_models.UpdateHttpsApplicationConfigurationRequest,
    ) -> esa20240910_models.UpdateHttpsApplicationConfigurationResponse:
        """
        @summary Modify HTTPS Application Configuration
        
        @param request: UpdateHttpsApplicationConfigurationRequest
        @return: UpdateHttpsApplicationConfigurationResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_https_application_configuration_with_options_async(request, runtime)

    def update_https_basic_configuration_with_options(
        self,
        request: esa20240910_models.UpdateHttpsBasicConfigurationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateHttpsBasicConfigurationResponse:
        """
        @summary Modify HTTPS Basic Configuration
        
        @param request: UpdateHttpsBasicConfigurationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateHttpsBasicConfigurationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.ciphersuite):
            query['Ciphersuite'] = request.ciphersuite
        if not UtilClient.is_unset(request.ciphersuite_group):
            query['CiphersuiteGroup'] = request.ciphersuite_group
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.http_2):
            query['Http2'] = request.http_2
        if not UtilClient.is_unset(request.http_3):
            query['Http3'] = request.http_3
        if not UtilClient.is_unset(request.https):
            query['Https'] = request.https
        if not UtilClient.is_unset(request.ocsp_stapling):
            query['OcspStapling'] = request.ocsp_stapling
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.tls_10):
            query['Tls10'] = request.tls_10
        if not UtilClient.is_unset(request.tls_11):
            query['Tls11'] = request.tls_11
        if not UtilClient.is_unset(request.tls_12):
            query['Tls12'] = request.tls_12
        if not UtilClient.is_unset(request.tls_13):
            query['Tls13'] = request.tls_13
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateHttpsBasicConfiguration',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateHttpsBasicConfigurationResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_https_basic_configuration_with_options_async(
        self,
        request: esa20240910_models.UpdateHttpsBasicConfigurationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateHttpsBasicConfigurationResponse:
        """
        @summary Modify HTTPS Basic Configuration
        
        @param request: UpdateHttpsBasicConfigurationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateHttpsBasicConfigurationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.ciphersuite):
            query['Ciphersuite'] = request.ciphersuite
        if not UtilClient.is_unset(request.ciphersuite_group):
            query['CiphersuiteGroup'] = request.ciphersuite_group
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.http_2):
            query['Http2'] = request.http_2
        if not UtilClient.is_unset(request.http_3):
            query['Http3'] = request.http_3
        if not UtilClient.is_unset(request.https):
            query['Https'] = request.https
        if not UtilClient.is_unset(request.ocsp_stapling):
            query['OcspStapling'] = request.ocsp_stapling
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.tls_10):
            query['Tls10'] = request.tls_10
        if not UtilClient.is_unset(request.tls_11):
            query['Tls11'] = request.tls_11
        if not UtilClient.is_unset(request.tls_12):
            query['Tls12'] = request.tls_12
        if not UtilClient.is_unset(request.tls_13):
            query['Tls13'] = request.tls_13
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateHttpsBasicConfiguration',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateHttpsBasicConfigurationResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_https_basic_configuration(
        self,
        request: esa20240910_models.UpdateHttpsBasicConfigurationRequest,
    ) -> esa20240910_models.UpdateHttpsBasicConfigurationResponse:
        """
        @summary Modify HTTPS Basic Configuration
        
        @param request: UpdateHttpsBasicConfigurationRequest
        @return: UpdateHttpsBasicConfigurationResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_https_basic_configuration_with_options(request, runtime)

    async def update_https_basic_configuration_async(
        self,
        request: esa20240910_models.UpdateHttpsBasicConfigurationRequest,
    ) -> esa20240910_models.UpdateHttpsBasicConfigurationResponse:
        """
        @summary Modify HTTPS Basic Configuration
        
        @param request: UpdateHttpsBasicConfigurationRequest
        @return: UpdateHttpsBasicConfigurationResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_https_basic_configuration_with_options_async(request, runtime)

    def update_ipv_6with_options(
        self,
        request: esa20240910_models.UpdateIPv6Request,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateIPv6Response:
        """
        @summary Modifies the IPv6 configuration of a website.
        
        @param request: UpdateIPv6Request
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateIPv6Response
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.enable):
            query['Enable'] = request.enable
        if not UtilClient.is_unset(request.region):
            query['Region'] = request.region
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateIPv6',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateIPv6Response(),
            self.call_api(params, req, runtime)
        )

    async def update_ipv_6with_options_async(
        self,
        request: esa20240910_models.UpdateIPv6Request,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateIPv6Response:
        """
        @summary Modifies the IPv6 configuration of a website.
        
        @param request: UpdateIPv6Request
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateIPv6Response
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.enable):
            query['Enable'] = request.enable
        if not UtilClient.is_unset(request.region):
            query['Region'] = request.region
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateIPv6',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateIPv6Response(),
            await self.call_api_async(params, req, runtime)
        )

    def update_ipv_6(
        self,
        request: esa20240910_models.UpdateIPv6Request,
    ) -> esa20240910_models.UpdateIPv6Response:
        """
        @summary Modifies the IPv6 configuration of a website.
        
        @param request: UpdateIPv6Request
        @return: UpdateIPv6Response
        """
        runtime = util_models.RuntimeOptions()
        return self.update_ipv_6with_options(request, runtime)

    async def update_ipv_6_async(
        self,
        request: esa20240910_models.UpdateIPv6Request,
    ) -> esa20240910_models.UpdateIPv6Response:
        """
        @summary Modifies the IPv6 configuration of a website.
        
        @param request: UpdateIPv6Request
        @return: UpdateIPv6Response
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_ipv_6with_options_async(request, runtime)

    def update_image_transform_with_options(
        self,
        request: esa20240910_models.UpdateImageTransformRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateImageTransformResponse:
        """
        @summary Modify Site Image Transformation Configuration
        
        @param request: UpdateImageTransformRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateImageTransformResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.enable):
            query['Enable'] = request.enable
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateImageTransform',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateImageTransformResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_image_transform_with_options_async(
        self,
        request: esa20240910_models.UpdateImageTransformRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateImageTransformResponse:
        """
        @summary Modify Site Image Transformation Configuration
        
        @param request: UpdateImageTransformRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateImageTransformResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.enable):
            query['Enable'] = request.enable
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateImageTransform',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateImageTransformResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_image_transform(
        self,
        request: esa20240910_models.UpdateImageTransformRequest,
    ) -> esa20240910_models.UpdateImageTransformResponse:
        """
        @summary Modify Site Image Transformation Configuration
        
        @param request: UpdateImageTransformRequest
        @return: UpdateImageTransformResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_image_transform_with_options(request, runtime)

    async def update_image_transform_async(
        self,
        request: esa20240910_models.UpdateImageTransformRequest,
    ) -> esa20240910_models.UpdateImageTransformResponse:
        """
        @summary Modify Site Image Transformation Configuration
        
        @param request: UpdateImageTransformRequest
        @return: UpdateImageTransformResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_image_transform_with_options_async(request, runtime)

    def update_list_with_options(
        self,
        tmp_req: esa20240910_models.UpdateListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateListResponse:
        """
        @summary Updates a custom list.
        
        @param tmp_req: UpdateListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateListResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.UpdateListShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.items):
            request.items_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.items, 'Items', 'json')
        body = {}
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.items_shrink):
            body['Items'] = request.items_shrink
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateList',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateListResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_list_with_options_async(
        self,
        tmp_req: esa20240910_models.UpdateListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateListResponse:
        """
        @summary Updates a custom list.
        
        @param tmp_req: UpdateListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateListResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.UpdateListShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.items):
            request.items_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.items, 'Items', 'json')
        body = {}
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.items_shrink):
            body['Items'] = request.items_shrink
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateList',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_list(
        self,
        request: esa20240910_models.UpdateListRequest,
    ) -> esa20240910_models.UpdateListResponse:
        """
        @summary Updates a custom list.
        
        @param request: UpdateListRequest
        @return: UpdateListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_list_with_options(request, runtime)

    async def update_list_async(
        self,
        request: esa20240910_models.UpdateListRequest,
    ) -> esa20240910_models.UpdateListResponse:
        """
        @summary Updates a custom list.
        
        @param request: UpdateListRequest
        @return: UpdateListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_list_with_options_async(request, runtime)

    def update_load_balancer_with_options(
        self,
        tmp_req: esa20240910_models.UpdateLoadBalancerRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateLoadBalancerResponse:
        """
        @summary Modify Load Balancer
        
        @description Through this interface, you can modify multiple configurations of the load balancer, including but not limited to the name of the load balancer, whether to enable acceleration, session persistence strategy, and various advanced settings related to traffic routing.>Notice: Changes to certain parameters may affect the stability of existing services, please operate with caution.
        
        @param tmp_req: UpdateLoadBalancerRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateLoadBalancerResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.UpdateLoadBalancerShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.adaptive_routing):
            request.adaptive_routing_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.adaptive_routing, 'AdaptiveRouting', 'json')
        if not UtilClient.is_unset(tmp_req.default_pools):
            request.default_pools_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.default_pools, 'DefaultPools', 'json')
        if not UtilClient.is_unset(tmp_req.monitor):
            request.monitor_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.monitor, 'Monitor', 'json')
        if not UtilClient.is_unset(tmp_req.random_steering):
            request.random_steering_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.random_steering, 'RandomSteering', 'json')
        if not UtilClient.is_unset(tmp_req.rules):
            request.rules_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.rules, 'Rules', 'json')
        query = {}
        if not UtilClient.is_unset(request.adaptive_routing_shrink):
            query['AdaptiveRouting'] = request.adaptive_routing_shrink
        if not UtilClient.is_unset(request.default_pools_shrink):
            query['DefaultPools'] = request.default_pools_shrink
        if not UtilClient.is_unset(request.description):
            query['Description'] = request.description
        if not UtilClient.is_unset(request.enabled):
            query['Enabled'] = request.enabled
        if not UtilClient.is_unset(request.fallback_pool):
            query['FallbackPool'] = request.fallback_pool
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.monitor_shrink):
            query['Monitor'] = request.monitor_shrink
        if not UtilClient.is_unset(request.random_steering_shrink):
            query['RandomSteering'] = request.random_steering_shrink
        if not UtilClient.is_unset(request.region_pools):
            query['RegionPools'] = request.region_pools
        if not UtilClient.is_unset(request.rules_shrink):
            query['Rules'] = request.rules_shrink
        if not UtilClient.is_unset(request.session_affinity):
            query['SessionAffinity'] = request.session_affinity
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.steering_policy):
            query['SteeringPolicy'] = request.steering_policy
        if not UtilClient.is_unset(request.sub_region_pools):
            query['SubRegionPools'] = request.sub_region_pools
        if not UtilClient.is_unset(request.ttl):
            query['Ttl'] = request.ttl
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateLoadBalancer',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateLoadBalancerResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_load_balancer_with_options_async(
        self,
        tmp_req: esa20240910_models.UpdateLoadBalancerRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateLoadBalancerResponse:
        """
        @summary Modify Load Balancer
        
        @description Through this interface, you can modify multiple configurations of the load balancer, including but not limited to the name of the load balancer, whether to enable acceleration, session persistence strategy, and various advanced settings related to traffic routing.>Notice: Changes to certain parameters may affect the stability of existing services, please operate with caution.
        
        @param tmp_req: UpdateLoadBalancerRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateLoadBalancerResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.UpdateLoadBalancerShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.adaptive_routing):
            request.adaptive_routing_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.adaptive_routing, 'AdaptiveRouting', 'json')
        if not UtilClient.is_unset(tmp_req.default_pools):
            request.default_pools_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.default_pools, 'DefaultPools', 'json')
        if not UtilClient.is_unset(tmp_req.monitor):
            request.monitor_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.monitor, 'Monitor', 'json')
        if not UtilClient.is_unset(tmp_req.random_steering):
            request.random_steering_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.random_steering, 'RandomSteering', 'json')
        if not UtilClient.is_unset(tmp_req.rules):
            request.rules_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.rules, 'Rules', 'json')
        query = {}
        if not UtilClient.is_unset(request.adaptive_routing_shrink):
            query['AdaptiveRouting'] = request.adaptive_routing_shrink
        if not UtilClient.is_unset(request.default_pools_shrink):
            query['DefaultPools'] = request.default_pools_shrink
        if not UtilClient.is_unset(request.description):
            query['Description'] = request.description
        if not UtilClient.is_unset(request.enabled):
            query['Enabled'] = request.enabled
        if not UtilClient.is_unset(request.fallback_pool):
            query['FallbackPool'] = request.fallback_pool
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.monitor_shrink):
            query['Monitor'] = request.monitor_shrink
        if not UtilClient.is_unset(request.random_steering_shrink):
            query['RandomSteering'] = request.random_steering_shrink
        if not UtilClient.is_unset(request.region_pools):
            query['RegionPools'] = request.region_pools
        if not UtilClient.is_unset(request.rules_shrink):
            query['Rules'] = request.rules_shrink
        if not UtilClient.is_unset(request.session_affinity):
            query['SessionAffinity'] = request.session_affinity
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.steering_policy):
            query['SteeringPolicy'] = request.steering_policy
        if not UtilClient.is_unset(request.sub_region_pools):
            query['SubRegionPools'] = request.sub_region_pools
        if not UtilClient.is_unset(request.ttl):
            query['Ttl'] = request.ttl
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateLoadBalancer',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateLoadBalancerResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_load_balancer(
        self,
        request: esa20240910_models.UpdateLoadBalancerRequest,
    ) -> esa20240910_models.UpdateLoadBalancerResponse:
        """
        @summary Modify Load Balancer
        
        @description Through this interface, you can modify multiple configurations of the load balancer, including but not limited to the name of the load balancer, whether to enable acceleration, session persistence strategy, and various advanced settings related to traffic routing.>Notice: Changes to certain parameters may affect the stability of existing services, please operate with caution.
        
        @param request: UpdateLoadBalancerRequest
        @return: UpdateLoadBalancerResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_load_balancer_with_options(request, runtime)

    async def update_load_balancer_async(
        self,
        request: esa20240910_models.UpdateLoadBalancerRequest,
    ) -> esa20240910_models.UpdateLoadBalancerResponse:
        """
        @summary Modify Load Balancer
        
        @description Through this interface, you can modify multiple configurations of the load balancer, including but not limited to the name of the load balancer, whether to enable acceleration, session persistence strategy, and various advanced settings related to traffic routing.>Notice: Changes to certain parameters may affect the stability of existing services, please operate with caution.
        
        @param request: UpdateLoadBalancerRequest
        @return: UpdateLoadBalancerResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_load_balancer_with_options_async(request, runtime)

    def update_managed_transform_with_options(
        self,
        request: esa20240910_models.UpdateManagedTransformRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateManagedTransformResponse:
        """
        @summary Modifies the configuration of managed transforms for your website.
        
        @param request: UpdateManagedTransformRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateManagedTransformResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.add_client_geolocation_header):
            query['AddClientGeolocationHeader'] = request.add_client_geolocation_header
        if not UtilClient.is_unset(request.add_real_client_ip_header):
            query['AddRealClientIpHeader'] = request.add_real_client_ip_header
        if not UtilClient.is_unset(request.real_client_ip_header_name):
            query['RealClientIpHeaderName'] = request.real_client_ip_header_name
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateManagedTransform',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateManagedTransformResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_managed_transform_with_options_async(
        self,
        request: esa20240910_models.UpdateManagedTransformRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateManagedTransformResponse:
        """
        @summary Modifies the configuration of managed transforms for your website.
        
        @param request: UpdateManagedTransformRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateManagedTransformResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.add_client_geolocation_header):
            query['AddClientGeolocationHeader'] = request.add_client_geolocation_header
        if not UtilClient.is_unset(request.add_real_client_ip_header):
            query['AddRealClientIpHeader'] = request.add_real_client_ip_header
        if not UtilClient.is_unset(request.real_client_ip_header_name):
            query['RealClientIpHeaderName'] = request.real_client_ip_header_name
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateManagedTransform',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateManagedTransformResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_managed_transform(
        self,
        request: esa20240910_models.UpdateManagedTransformRequest,
    ) -> esa20240910_models.UpdateManagedTransformResponse:
        """
        @summary Modifies the configuration of managed transforms for your website.
        
        @param request: UpdateManagedTransformRequest
        @return: UpdateManagedTransformResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_managed_transform_with_options(request, runtime)

    async def update_managed_transform_async(
        self,
        request: esa20240910_models.UpdateManagedTransformRequest,
    ) -> esa20240910_models.UpdateManagedTransformResponse:
        """
        @summary Modifies the configuration of managed transforms for your website.
        
        @param request: UpdateManagedTransformRequest
        @return: UpdateManagedTransformResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_managed_transform_with_options_async(request, runtime)

    def update_network_optimization_with_options(
        self,
        request: esa20240910_models.UpdateNetworkOptimizationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateNetworkOptimizationResponse:
        """
        @summary Modify network optimization configuration
        
        @param request: UpdateNetworkOptimizationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateNetworkOptimizationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.grpc):
            query['Grpc'] = request.grpc
        if not UtilClient.is_unset(request.http_2origin):
            query['Http2Origin'] = request.http_2origin
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.smart_routing):
            query['SmartRouting'] = request.smart_routing
        if not UtilClient.is_unset(request.upload_max_filesize):
            query['UploadMaxFilesize'] = request.upload_max_filesize
        if not UtilClient.is_unset(request.websocket):
            query['Websocket'] = request.websocket
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateNetworkOptimization',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateNetworkOptimizationResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_network_optimization_with_options_async(
        self,
        request: esa20240910_models.UpdateNetworkOptimizationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateNetworkOptimizationResponse:
        """
        @summary Modify network optimization configuration
        
        @param request: UpdateNetworkOptimizationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateNetworkOptimizationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.grpc):
            query['Grpc'] = request.grpc
        if not UtilClient.is_unset(request.http_2origin):
            query['Http2Origin'] = request.http_2origin
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.smart_routing):
            query['SmartRouting'] = request.smart_routing
        if not UtilClient.is_unset(request.upload_max_filesize):
            query['UploadMaxFilesize'] = request.upload_max_filesize
        if not UtilClient.is_unset(request.websocket):
            query['Websocket'] = request.websocket
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateNetworkOptimization',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateNetworkOptimizationResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_network_optimization(
        self,
        request: esa20240910_models.UpdateNetworkOptimizationRequest,
    ) -> esa20240910_models.UpdateNetworkOptimizationResponse:
        """
        @summary Modify network optimization configuration
        
        @param request: UpdateNetworkOptimizationRequest
        @return: UpdateNetworkOptimizationResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_network_optimization_with_options(request, runtime)

    async def update_network_optimization_async(
        self,
        request: esa20240910_models.UpdateNetworkOptimizationRequest,
    ) -> esa20240910_models.UpdateNetworkOptimizationResponse:
        """
        @summary Modify network optimization configuration
        
        @param request: UpdateNetworkOptimizationRequest
        @return: UpdateNetworkOptimizationResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_network_optimization_with_options_async(request, runtime)

    def update_origin_pool_with_options(
        self,
        tmp_req: esa20240910_models.UpdateOriginPoolRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateOriginPoolResponse:
        """
        @summary Modify the Monitor
        
        @param tmp_req: UpdateOriginPoolRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateOriginPoolResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.UpdateOriginPoolShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.origins):
            request.origins_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.origins, 'Origins', 'json')
        query = {}
        if not UtilClient.is_unset(request.enabled):
            query['Enabled'] = request.enabled
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.origins_shrink):
            query['Origins'] = request.origins_shrink
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateOriginPool',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateOriginPoolResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_origin_pool_with_options_async(
        self,
        tmp_req: esa20240910_models.UpdateOriginPoolRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateOriginPoolResponse:
        """
        @summary Modify the Monitor
        
        @param tmp_req: UpdateOriginPoolRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateOriginPoolResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.UpdateOriginPoolShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.origins):
            request.origins_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.origins, 'Origins', 'json')
        query = {}
        if not UtilClient.is_unset(request.enabled):
            query['Enabled'] = request.enabled
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.origins_shrink):
            query['Origins'] = request.origins_shrink
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateOriginPool',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateOriginPoolResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_origin_pool(
        self,
        request: esa20240910_models.UpdateOriginPoolRequest,
    ) -> esa20240910_models.UpdateOriginPoolResponse:
        """
        @summary Modify the Monitor
        
        @param request: UpdateOriginPoolRequest
        @return: UpdateOriginPoolResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_origin_pool_with_options(request, runtime)

    async def update_origin_pool_async(
        self,
        request: esa20240910_models.UpdateOriginPoolRequest,
    ) -> esa20240910_models.UpdateOriginPoolResponse:
        """
        @summary Modify the Monitor
        
        @param request: UpdateOriginPoolRequest
        @return: UpdateOriginPoolResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_origin_pool_with_options_async(request, runtime)

    def update_origin_protection_with_options(
        self,
        request: esa20240910_models.UpdateOriginProtectionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateOriginProtectionResponse:
        """
        @summary Enables or disables IP convergence.
        
        @param request: UpdateOriginProtectionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateOriginProtectionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.origin_converge):
            query['OriginConverge'] = request.origin_converge
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateOriginProtection',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateOriginProtectionResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_origin_protection_with_options_async(
        self,
        request: esa20240910_models.UpdateOriginProtectionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateOriginProtectionResponse:
        """
        @summary Enables or disables IP convergence.
        
        @param request: UpdateOriginProtectionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateOriginProtectionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.origin_converge):
            query['OriginConverge'] = request.origin_converge
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateOriginProtection',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateOriginProtectionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_origin_protection(
        self,
        request: esa20240910_models.UpdateOriginProtectionRequest,
    ) -> esa20240910_models.UpdateOriginProtectionResponse:
        """
        @summary Enables or disables IP convergence.
        
        @param request: UpdateOriginProtectionRequest
        @return: UpdateOriginProtectionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_origin_protection_with_options(request, runtime)

    async def update_origin_protection_async(
        self,
        request: esa20240910_models.UpdateOriginProtectionRequest,
    ) -> esa20240910_models.UpdateOriginProtectionResponse:
        """
        @summary Enables or disables IP convergence.
        
        @param request: UpdateOriginProtectionRequest
        @return: UpdateOriginProtectionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_origin_protection_with_options_async(request, runtime)

    def update_origin_protection_ip_white_list_with_options(
        self,
        request: esa20240910_models.UpdateOriginProtectionIpWhiteListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateOriginProtectionIpWhiteListResponse:
        """
        @summary Updates the IP whitelist for origin protection used by a website to the latest version.
        
        @param request: UpdateOriginProtectionIpWhiteListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateOriginProtectionIpWhiteListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateOriginProtectionIpWhiteList',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateOriginProtectionIpWhiteListResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_origin_protection_ip_white_list_with_options_async(
        self,
        request: esa20240910_models.UpdateOriginProtectionIpWhiteListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateOriginProtectionIpWhiteListResponse:
        """
        @summary Updates the IP whitelist for origin protection used by a website to the latest version.
        
        @param request: UpdateOriginProtectionIpWhiteListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateOriginProtectionIpWhiteListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateOriginProtectionIpWhiteList',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateOriginProtectionIpWhiteListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_origin_protection_ip_white_list(
        self,
        request: esa20240910_models.UpdateOriginProtectionIpWhiteListRequest,
    ) -> esa20240910_models.UpdateOriginProtectionIpWhiteListResponse:
        """
        @summary Updates the IP whitelist for origin protection used by a website to the latest version.
        
        @param request: UpdateOriginProtectionIpWhiteListRequest
        @return: UpdateOriginProtectionIpWhiteListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_origin_protection_ip_white_list_with_options(request, runtime)

    async def update_origin_protection_ip_white_list_async(
        self,
        request: esa20240910_models.UpdateOriginProtectionIpWhiteListRequest,
    ) -> esa20240910_models.UpdateOriginProtectionIpWhiteListResponse:
        """
        @summary Updates the IP whitelist for origin protection used by a website to the latest version.
        
        @param request: UpdateOriginProtectionIpWhiteListRequest
        @return: UpdateOriginProtectionIpWhiteListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_origin_protection_ip_white_list_with_options_async(request, runtime)

    def update_origin_rule_with_options(
        self,
        request: esa20240910_models.UpdateOriginRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateOriginRuleResponse:
        """
        @summary Modify Origin Rule Configuration for Site
        
        @param request: UpdateOriginRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateOriginRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.dns_record):
            query['DnsRecord'] = request.dns_record
        if not UtilClient.is_unset(request.follow_302enable):
            query['Follow302Enable'] = request.follow_302enable
        if not UtilClient.is_unset(request.follow_302max_tries):
            query['Follow302MaxTries'] = request.follow_302max_tries
        if not UtilClient.is_unset(request.follow_302retain_args):
            query['Follow302RetainArgs'] = request.follow_302retain_args
        if not UtilClient.is_unset(request.follow_302retain_header):
            query['Follow302RetainHeader'] = request.follow_302retain_header
        if not UtilClient.is_unset(request.follow_302target_host):
            query['Follow302TargetHost'] = request.follow_302target_host
        if not UtilClient.is_unset(request.origin_host):
            query['OriginHost'] = request.origin_host
        if not UtilClient.is_unset(request.origin_http_port):
            query['OriginHttpPort'] = request.origin_http_port
        if not UtilClient.is_unset(request.origin_https_port):
            query['OriginHttpsPort'] = request.origin_https_port
        if not UtilClient.is_unset(request.origin_mtls):
            query['OriginMtls'] = request.origin_mtls
        if not UtilClient.is_unset(request.origin_read_timeout):
            query['OriginReadTimeout'] = request.origin_read_timeout
        if not UtilClient.is_unset(request.origin_scheme):
            query['OriginScheme'] = request.origin_scheme
        if not UtilClient.is_unset(request.origin_sni):
            query['OriginSni'] = request.origin_sni
        if not UtilClient.is_unset(request.origin_verify):
            query['OriginVerify'] = request.origin_verify
        if not UtilClient.is_unset(request.range):
            query['Range'] = request.range
        if not UtilClient.is_unset(request.range_chunk_size):
            query['RangeChunkSize'] = request.range_chunk_size
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateOriginRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateOriginRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_origin_rule_with_options_async(
        self,
        request: esa20240910_models.UpdateOriginRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateOriginRuleResponse:
        """
        @summary Modify Origin Rule Configuration for Site
        
        @param request: UpdateOriginRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateOriginRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.dns_record):
            query['DnsRecord'] = request.dns_record
        if not UtilClient.is_unset(request.follow_302enable):
            query['Follow302Enable'] = request.follow_302enable
        if not UtilClient.is_unset(request.follow_302max_tries):
            query['Follow302MaxTries'] = request.follow_302max_tries
        if not UtilClient.is_unset(request.follow_302retain_args):
            query['Follow302RetainArgs'] = request.follow_302retain_args
        if not UtilClient.is_unset(request.follow_302retain_header):
            query['Follow302RetainHeader'] = request.follow_302retain_header
        if not UtilClient.is_unset(request.follow_302target_host):
            query['Follow302TargetHost'] = request.follow_302target_host
        if not UtilClient.is_unset(request.origin_host):
            query['OriginHost'] = request.origin_host
        if not UtilClient.is_unset(request.origin_http_port):
            query['OriginHttpPort'] = request.origin_http_port
        if not UtilClient.is_unset(request.origin_https_port):
            query['OriginHttpsPort'] = request.origin_https_port
        if not UtilClient.is_unset(request.origin_mtls):
            query['OriginMtls'] = request.origin_mtls
        if not UtilClient.is_unset(request.origin_read_timeout):
            query['OriginReadTimeout'] = request.origin_read_timeout
        if not UtilClient.is_unset(request.origin_scheme):
            query['OriginScheme'] = request.origin_scheme
        if not UtilClient.is_unset(request.origin_sni):
            query['OriginSni'] = request.origin_sni
        if not UtilClient.is_unset(request.origin_verify):
            query['OriginVerify'] = request.origin_verify
        if not UtilClient.is_unset(request.range):
            query['Range'] = request.range
        if not UtilClient.is_unset(request.range_chunk_size):
            query['RangeChunkSize'] = request.range_chunk_size
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateOriginRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateOriginRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_origin_rule(
        self,
        request: esa20240910_models.UpdateOriginRuleRequest,
    ) -> esa20240910_models.UpdateOriginRuleResponse:
        """
        @summary Modify Origin Rule Configuration for Site
        
        @param request: UpdateOriginRuleRequest
        @return: UpdateOriginRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_origin_rule_with_options(request, runtime)

    async def update_origin_rule_async(
        self,
        request: esa20240910_models.UpdateOriginRuleRequest,
    ) -> esa20240910_models.UpdateOriginRuleResponse:
        """
        @summary Modify Origin Rule Configuration for Site
        
        @param request: UpdateOriginRuleRequest
        @return: UpdateOriginRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_origin_rule_with_options_async(request, runtime)

    def update_page_with_options(
        self,
        request: esa20240910_models.UpdatePageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdatePageResponse:
        """
        @summary Modifies the configurations of a custom error page, such as the name, description, content type, and content of the page.
        
        @param request: UpdatePageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdatePageResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.content):
            body['Content'] = request.content
        if not UtilClient.is_unset(request.content_type):
            body['ContentType'] = request.content_type
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdatePage',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdatePageResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_page_with_options_async(
        self,
        request: esa20240910_models.UpdatePageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdatePageResponse:
        """
        @summary Modifies the configurations of a custom error page, such as the name, description, content type, and content of the page.
        
        @param request: UpdatePageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdatePageResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.content):
            body['Content'] = request.content
        if not UtilClient.is_unset(request.content_type):
            body['ContentType'] = request.content_type
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdatePage',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdatePageResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_page(
        self,
        request: esa20240910_models.UpdatePageRequest,
    ) -> esa20240910_models.UpdatePageResponse:
        """
        @summary Modifies the configurations of a custom error page, such as the name, description, content type, and content of the page.
        
        @param request: UpdatePageRequest
        @return: UpdatePageResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_page_with_options(request, runtime)

    async def update_page_async(
        self,
        request: esa20240910_models.UpdatePageRequest,
    ) -> esa20240910_models.UpdatePageResponse:
        """
        @summary Modifies the configurations of a custom error page, such as the name, description, content type, and content of the page.
        
        @param request: UpdatePageRequest
        @return: UpdatePageResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_page_with_options_async(request, runtime)

    def update_rate_plan_spec_with_options(
        self,
        request: esa20240910_models.UpdateRatePlanSpecRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateRatePlanSpecResponse:
        """
        @summary 套餐变配
        
        @param request: UpdateRatePlanSpecRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateRatePlanSpecResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.auto_pay):
            query['AutoPay'] = request.auto_pay
        if not UtilClient.is_unset(request.charge_type):
            query['ChargeType'] = request.charge_type
        if not UtilClient.is_unset(request.instance_id):
            query['InstanceId'] = request.instance_id
        if not UtilClient.is_unset(request.order_type):
            query['OrderType'] = request.order_type
        if not UtilClient.is_unset(request.target_plan_code):
            query['TargetPlanCode'] = request.target_plan_code
        if not UtilClient.is_unset(request.target_plan_name):
            query['TargetPlanName'] = request.target_plan_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateRatePlanSpec',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateRatePlanSpecResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_rate_plan_spec_with_options_async(
        self,
        request: esa20240910_models.UpdateRatePlanSpecRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateRatePlanSpecResponse:
        """
        @summary 套餐变配
        
        @param request: UpdateRatePlanSpecRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateRatePlanSpecResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.auto_pay):
            query['AutoPay'] = request.auto_pay
        if not UtilClient.is_unset(request.charge_type):
            query['ChargeType'] = request.charge_type
        if not UtilClient.is_unset(request.instance_id):
            query['InstanceId'] = request.instance_id
        if not UtilClient.is_unset(request.order_type):
            query['OrderType'] = request.order_type
        if not UtilClient.is_unset(request.target_plan_code):
            query['TargetPlanCode'] = request.target_plan_code
        if not UtilClient.is_unset(request.target_plan_name):
            query['TargetPlanName'] = request.target_plan_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateRatePlanSpec',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateRatePlanSpecResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_rate_plan_spec(
        self,
        request: esa20240910_models.UpdateRatePlanSpecRequest,
    ) -> esa20240910_models.UpdateRatePlanSpecResponse:
        """
        @summary 套餐变配
        
        @param request: UpdateRatePlanSpecRequest
        @return: UpdateRatePlanSpecResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_rate_plan_spec_with_options(request, runtime)

    async def update_rate_plan_spec_async(
        self,
        request: esa20240910_models.UpdateRatePlanSpecRequest,
    ) -> esa20240910_models.UpdateRatePlanSpecResponse:
        """
        @summary 套餐变配
        
        @param request: UpdateRatePlanSpecRequest
        @return: UpdateRatePlanSpecResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_rate_plan_spec_with_options_async(request, runtime)

    def update_record_with_options(
        self,
        tmp_req: esa20240910_models.UpdateRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateRecordResponse:
        """
        @summary Updates multiple types of DNS records and origin authentication configurations.
        
        @description This operation allows you to update multiple types of DNS records, including but not limited to A/AAAA, CNAME, NS, MX, TXT, CAA, SRV, and URI. You can modify the record content by providing the necessary fields such as Value, Priority, and Flag. For origins added in CNAME records such as OSS and S3, the API enables you to configure authentication details to ensure secure access.
        ### [](#)Usage notes
        The record value (Value) must match the record type. For example, the CNAME record should correspond to the target domain name.
        You must specify a priority (Priority) for some record types, such as MX and SRV.
        You must specify specific fields such as Flag and Tag for CAA records.
        When you update security records such as CERT and SSHFP, you must accurately set fields such as Type and Algorithm.
        If your origin type is OSS or S3, configure the authentication details in AuthConf based on the permissions.
        
        @param tmp_req: UpdateRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateRecordResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.UpdateRecordShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.auth_conf):
            request.auth_conf_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.auth_conf, 'AuthConf', 'json')
        if not UtilClient.is_unset(tmp_req.data):
            request.data_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.data, 'Data', 'json')
        query = {}
        if not UtilClient.is_unset(request.auth_conf_shrink):
            query['AuthConf'] = request.auth_conf_shrink
        if not UtilClient.is_unset(request.biz_name):
            query['BizName'] = request.biz_name
        if not UtilClient.is_unset(request.comment):
            query['Comment'] = request.comment
        if not UtilClient.is_unset(request.data_shrink):
            query['Data'] = request.data_shrink
        if not UtilClient.is_unset(request.host_policy):
            query['HostPolicy'] = request.host_policy
        if not UtilClient.is_unset(request.proxied):
            query['Proxied'] = request.proxied
        if not UtilClient.is_unset(request.record_id):
            query['RecordId'] = request.record_id
        if not UtilClient.is_unset(request.source_type):
            query['SourceType'] = request.source_type
        if not UtilClient.is_unset(request.ttl):
            query['Ttl'] = request.ttl
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateRecord',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateRecordResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_record_with_options_async(
        self,
        tmp_req: esa20240910_models.UpdateRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateRecordResponse:
        """
        @summary Updates multiple types of DNS records and origin authentication configurations.
        
        @description This operation allows you to update multiple types of DNS records, including but not limited to A/AAAA, CNAME, NS, MX, TXT, CAA, SRV, and URI. You can modify the record content by providing the necessary fields such as Value, Priority, and Flag. For origins added in CNAME records such as OSS and S3, the API enables you to configure authentication details to ensure secure access.
        ### [](#)Usage notes
        The record value (Value) must match the record type. For example, the CNAME record should correspond to the target domain name.
        You must specify a priority (Priority) for some record types, such as MX and SRV.
        You must specify specific fields such as Flag and Tag for CAA records.
        When you update security records such as CERT and SSHFP, you must accurately set fields such as Type and Algorithm.
        If your origin type is OSS or S3, configure the authentication details in AuthConf based on the permissions.
        
        @param tmp_req: UpdateRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateRecordResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.UpdateRecordShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.auth_conf):
            request.auth_conf_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.auth_conf, 'AuthConf', 'json')
        if not UtilClient.is_unset(tmp_req.data):
            request.data_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.data, 'Data', 'json')
        query = {}
        if not UtilClient.is_unset(request.auth_conf_shrink):
            query['AuthConf'] = request.auth_conf_shrink
        if not UtilClient.is_unset(request.biz_name):
            query['BizName'] = request.biz_name
        if not UtilClient.is_unset(request.comment):
            query['Comment'] = request.comment
        if not UtilClient.is_unset(request.data_shrink):
            query['Data'] = request.data_shrink
        if not UtilClient.is_unset(request.host_policy):
            query['HostPolicy'] = request.host_policy
        if not UtilClient.is_unset(request.proxied):
            query['Proxied'] = request.proxied
        if not UtilClient.is_unset(request.record_id):
            query['RecordId'] = request.record_id
        if not UtilClient.is_unset(request.source_type):
            query['SourceType'] = request.source_type
        if not UtilClient.is_unset(request.ttl):
            query['Ttl'] = request.ttl
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateRecord',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateRecordResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_record(
        self,
        request: esa20240910_models.UpdateRecordRequest,
    ) -> esa20240910_models.UpdateRecordResponse:
        """
        @summary Updates multiple types of DNS records and origin authentication configurations.
        
        @description This operation allows you to update multiple types of DNS records, including but not limited to A/AAAA, CNAME, NS, MX, TXT, CAA, SRV, and URI. You can modify the record content by providing the necessary fields such as Value, Priority, and Flag. For origins added in CNAME records such as OSS and S3, the API enables you to configure authentication details to ensure secure access.
        ### [](#)Usage notes
        The record value (Value) must match the record type. For example, the CNAME record should correspond to the target domain name.
        You must specify a priority (Priority) for some record types, such as MX and SRV.
        You must specify specific fields such as Flag and Tag for CAA records.
        When you update security records such as CERT and SSHFP, you must accurately set fields such as Type and Algorithm.
        If your origin type is OSS or S3, configure the authentication details in AuthConf based on the permissions.
        
        @param request: UpdateRecordRequest
        @return: UpdateRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_record_with_options(request, runtime)

    async def update_record_async(
        self,
        request: esa20240910_models.UpdateRecordRequest,
    ) -> esa20240910_models.UpdateRecordResponse:
        """
        @summary Updates multiple types of DNS records and origin authentication configurations.
        
        @description This operation allows you to update multiple types of DNS records, including but not limited to A/AAAA, CNAME, NS, MX, TXT, CAA, SRV, and URI. You can modify the record content by providing the necessary fields such as Value, Priority, and Flag. For origins added in CNAME records such as OSS and S3, the API enables you to configure authentication details to ensure secure access.
        ### [](#)Usage notes
        The record value (Value) must match the record type. For example, the CNAME record should correspond to the target domain name.
        You must specify a priority (Priority) for some record types, such as MX and SRV.
        You must specify specific fields such as Flag and Tag for CAA records.
        When you update security records such as CERT and SSHFP, you must accurately set fields such as Type and Algorithm.
        If your origin type is OSS or S3, configure the authentication details in AuthConf based on the permissions.
        
        @param request: UpdateRecordRequest
        @return: UpdateRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_record_with_options_async(request, runtime)

    def update_redirect_rule_with_options(
        self,
        request: esa20240910_models.UpdateRedirectRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateRedirectRuleResponse:
        """
        @summary Update Redirect Rule
        
        @param request: UpdateRedirectRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateRedirectRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.reserve_query_string):
            query['ReserveQueryString'] = request.reserve_query_string
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.status_code):
            query['StatusCode'] = request.status_code
        if not UtilClient.is_unset(request.target_url):
            query['TargetUrl'] = request.target_url
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateRedirectRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateRedirectRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_redirect_rule_with_options_async(
        self,
        request: esa20240910_models.UpdateRedirectRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateRedirectRuleResponse:
        """
        @summary Update Redirect Rule
        
        @param request: UpdateRedirectRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateRedirectRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.reserve_query_string):
            query['ReserveQueryString'] = request.reserve_query_string
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.status_code):
            query['StatusCode'] = request.status_code
        if not UtilClient.is_unset(request.target_url):
            query['TargetUrl'] = request.target_url
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateRedirectRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateRedirectRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_redirect_rule(
        self,
        request: esa20240910_models.UpdateRedirectRuleRequest,
    ) -> esa20240910_models.UpdateRedirectRuleResponse:
        """
        @summary Update Redirect Rule
        
        @param request: UpdateRedirectRuleRequest
        @return: UpdateRedirectRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_redirect_rule_with_options(request, runtime)

    async def update_redirect_rule_async(
        self,
        request: esa20240910_models.UpdateRedirectRuleRequest,
    ) -> esa20240910_models.UpdateRedirectRuleResponse:
        """
        @summary Update Redirect Rule
        
        @param request: UpdateRedirectRuleRequest
        @return: UpdateRedirectRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_redirect_rule_with_options_async(request, runtime)

    def update_rewrite_url_rule_with_options(
        self,
        request: esa20240910_models.UpdateRewriteUrlRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateRewriteUrlRuleResponse:
        """
        @summary Modify Rewrite URL Rule
        
        @param request: UpdateRewriteUrlRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateRewriteUrlRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.query_string):
            query['QueryString'] = request.query_string
        if not UtilClient.is_unset(request.rewrite_query_string_type):
            query['RewriteQueryStringType'] = request.rewrite_query_string_type
        if not UtilClient.is_unset(request.rewrite_uri_type):
            query['RewriteUriType'] = request.rewrite_uri_type
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.uri):
            query['Uri'] = request.uri
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateRewriteUrlRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateRewriteUrlRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_rewrite_url_rule_with_options_async(
        self,
        request: esa20240910_models.UpdateRewriteUrlRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateRewriteUrlRuleResponse:
        """
        @summary Modify Rewrite URL Rule
        
        @param request: UpdateRewriteUrlRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateRewriteUrlRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.query_string):
            query['QueryString'] = request.query_string
        if not UtilClient.is_unset(request.rewrite_query_string_type):
            query['RewriteQueryStringType'] = request.rewrite_query_string_type
        if not UtilClient.is_unset(request.rewrite_uri_type):
            query['RewriteUriType'] = request.rewrite_uri_type
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.uri):
            query['Uri'] = request.uri
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateRewriteUrlRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateRewriteUrlRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_rewrite_url_rule(
        self,
        request: esa20240910_models.UpdateRewriteUrlRuleRequest,
    ) -> esa20240910_models.UpdateRewriteUrlRuleResponse:
        """
        @summary Modify Rewrite URL Rule
        
        @param request: UpdateRewriteUrlRuleRequest
        @return: UpdateRewriteUrlRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_rewrite_url_rule_with_options(request, runtime)

    async def update_rewrite_url_rule_async(
        self,
        request: esa20240910_models.UpdateRewriteUrlRuleRequest,
    ) -> esa20240910_models.UpdateRewriteUrlRuleResponse:
        """
        @summary Modify Rewrite URL Rule
        
        @param request: UpdateRewriteUrlRuleRequest
        @return: UpdateRewriteUrlRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_rewrite_url_rule_with_options_async(request, runtime)

    def update_routine_route_with_options(
        self,
        request: esa20240910_models.UpdateRoutineRouteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateRoutineRouteResponse:
        """
        @summary 修改边缘函数路由配置
        
        @param request: UpdateRoutineRouteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateRoutineRouteResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.bypass):
            query['Bypass'] = request.bypass
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.fallback):
            query['Fallback'] = request.fallback
        if not UtilClient.is_unset(request.route_enable):
            query['RouteEnable'] = request.route_enable
        if not UtilClient.is_unset(request.route_name):
            query['RouteName'] = request.route_name
        if not UtilClient.is_unset(request.routine_name):
            query['RoutineName'] = request.routine_name
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateRoutineRoute',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateRoutineRouteResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_routine_route_with_options_async(
        self,
        request: esa20240910_models.UpdateRoutineRouteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateRoutineRouteResponse:
        """
        @summary 修改边缘函数路由配置
        
        @param request: UpdateRoutineRouteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateRoutineRouteResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.bypass):
            query['Bypass'] = request.bypass
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.fallback):
            query['Fallback'] = request.fallback
        if not UtilClient.is_unset(request.route_enable):
            query['RouteEnable'] = request.route_enable
        if not UtilClient.is_unset(request.route_name):
            query['RouteName'] = request.route_name
        if not UtilClient.is_unset(request.routine_name):
            query['RoutineName'] = request.routine_name
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateRoutineRoute',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateRoutineRouteResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_routine_route(
        self,
        request: esa20240910_models.UpdateRoutineRouteRequest,
    ) -> esa20240910_models.UpdateRoutineRouteResponse:
        """
        @summary 修改边缘函数路由配置
        
        @param request: UpdateRoutineRouteRequest
        @return: UpdateRoutineRouteResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_routine_route_with_options(request, runtime)

    async def update_routine_route_async(
        self,
        request: esa20240910_models.UpdateRoutineRouteRequest,
    ) -> esa20240910_models.UpdateRoutineRouteResponse:
        """
        @summary 修改边缘函数路由配置
        
        @param request: UpdateRoutineRouteRequest
        @return: UpdateRoutineRouteResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_routine_route_with_options_async(request, runtime)

    def update_scheduled_preload_execution_with_options(
        self,
        request: esa20240910_models.UpdateScheduledPreloadExecutionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateScheduledPreloadExecutionResponse:
        """
        @summary Updates a scheduled prefetch plan based on the plan ID.
        
        @param request: UpdateScheduledPreloadExecutionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateScheduledPreloadExecutionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        body = {}
        if not UtilClient.is_unset(request.end_time):
            body['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.interval):
            body['Interval'] = request.interval
        if not UtilClient.is_unset(request.slice_len):
            body['SliceLen'] = request.slice_len
        if not UtilClient.is_unset(request.start_time):
            body['StartTime'] = request.start_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateScheduledPreloadExecution',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateScheduledPreloadExecutionResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_scheduled_preload_execution_with_options_async(
        self,
        request: esa20240910_models.UpdateScheduledPreloadExecutionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateScheduledPreloadExecutionResponse:
        """
        @summary Updates a scheduled prefetch plan based on the plan ID.
        
        @param request: UpdateScheduledPreloadExecutionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateScheduledPreloadExecutionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        body = {}
        if not UtilClient.is_unset(request.end_time):
            body['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.interval):
            body['Interval'] = request.interval
        if not UtilClient.is_unset(request.slice_len):
            body['SliceLen'] = request.slice_len
        if not UtilClient.is_unset(request.start_time):
            body['StartTime'] = request.start_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateScheduledPreloadExecution',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateScheduledPreloadExecutionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_scheduled_preload_execution(
        self,
        request: esa20240910_models.UpdateScheduledPreloadExecutionRequest,
    ) -> esa20240910_models.UpdateScheduledPreloadExecutionResponse:
        """
        @summary Updates a scheduled prefetch plan based on the plan ID.
        
        @param request: UpdateScheduledPreloadExecutionRequest
        @return: UpdateScheduledPreloadExecutionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_scheduled_preload_execution_with_options(request, runtime)

    async def update_scheduled_preload_execution_async(
        self,
        request: esa20240910_models.UpdateScheduledPreloadExecutionRequest,
    ) -> esa20240910_models.UpdateScheduledPreloadExecutionResponse:
        """
        @summary Updates a scheduled prefetch plan based on the plan ID.
        
        @param request: UpdateScheduledPreloadExecutionRequest
        @return: UpdateScheduledPreloadExecutionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_scheduled_preload_execution_with_options_async(request, runtime)

    def update_seo_bypass_with_options(
        self,
        request: esa20240910_models.UpdateSeoBypassRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateSeoBypassResponse:
        """
        @summary 修改站点放行搜索引擎爬虫配置
        
        @param request: UpdateSeoBypassRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateSeoBypassResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.enable):
            query['Enable'] = request.enable
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateSeoBypass',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateSeoBypassResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_seo_bypass_with_options_async(
        self,
        request: esa20240910_models.UpdateSeoBypassRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateSeoBypassResponse:
        """
        @summary 修改站点放行搜索引擎爬虫配置
        
        @param request: UpdateSeoBypassRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateSeoBypassResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.enable):
            query['Enable'] = request.enable
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateSeoBypass',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateSeoBypassResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_seo_bypass(
        self,
        request: esa20240910_models.UpdateSeoBypassRequest,
    ) -> esa20240910_models.UpdateSeoBypassResponse:
        """
        @summary 修改站点放行搜索引擎爬虫配置
        
        @param request: UpdateSeoBypassRequest
        @return: UpdateSeoBypassResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_seo_bypass_with_options(request, runtime)

    async def update_seo_bypass_async(
        self,
        request: esa20240910_models.UpdateSeoBypassRequest,
    ) -> esa20240910_models.UpdateSeoBypassResponse:
        """
        @summary 修改站点放行搜索引擎爬虫配置
        
        @param request: UpdateSeoBypassRequest
        @return: UpdateSeoBypassResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_seo_bypass_with_options_async(request, runtime)

    def update_site_access_type_with_options(
        self,
        request: esa20240910_models.UpdateSiteAccessTypeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateSiteAccessTypeResponse:
        """
        @summary Converts the DNS setup option of a website.
        
        @description When you change the DNS setup of a website from NS to CNAME, note the following prerequisites:
        The website only has proxied A/AAAA and CNAME records.
        The DNS passthrough mode and custom nameserver features are not enabled for the website.
        
        @param request: UpdateSiteAccessTypeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateSiteAccessTypeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.access_type):
            query['AccessType'] = request.access_type
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateSiteAccessType',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateSiteAccessTypeResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_site_access_type_with_options_async(
        self,
        request: esa20240910_models.UpdateSiteAccessTypeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateSiteAccessTypeResponse:
        """
        @summary Converts the DNS setup option of a website.
        
        @description When you change the DNS setup of a website from NS to CNAME, note the following prerequisites:
        The website only has proxied A/AAAA and CNAME records.
        The DNS passthrough mode and custom nameserver features are not enabled for the website.
        
        @param request: UpdateSiteAccessTypeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateSiteAccessTypeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.access_type):
            query['AccessType'] = request.access_type
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateSiteAccessType',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateSiteAccessTypeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_site_access_type(
        self,
        request: esa20240910_models.UpdateSiteAccessTypeRequest,
    ) -> esa20240910_models.UpdateSiteAccessTypeResponse:
        """
        @summary Converts the DNS setup option of a website.
        
        @description When you change the DNS setup of a website from NS to CNAME, note the following prerequisites:
        The website only has proxied A/AAAA and CNAME records.
        The DNS passthrough mode and custom nameserver features are not enabled for the website.
        
        @param request: UpdateSiteAccessTypeRequest
        @return: UpdateSiteAccessTypeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_site_access_type_with_options(request, runtime)

    async def update_site_access_type_async(
        self,
        request: esa20240910_models.UpdateSiteAccessTypeRequest,
    ) -> esa20240910_models.UpdateSiteAccessTypeResponse:
        """
        @summary Converts the DNS setup option of a website.
        
        @description When you change the DNS setup of a website from NS to CNAME, note the following prerequisites:
        The website only has proxied A/AAAA and CNAME records.
        The DNS passthrough mode and custom nameserver features are not enabled for the website.
        
        @param request: UpdateSiteAccessTypeRequest
        @return: UpdateSiteAccessTypeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_site_access_type_with_options_async(request, runtime)

    def update_site_coverage_with_options(
        self,
        request: esa20240910_models.UpdateSiteCoverageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateSiteCoverageResponse:
        """
        @summary Modifies the service location for a single website. This updates the acceleration configuration of the website to adapt to changes in traffic distribution, and improve user experience in specific regions.
        
        @param request: UpdateSiteCoverageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateSiteCoverageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.coverage):
            query['Coverage'] = request.coverage
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateSiteCoverage',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateSiteCoverageResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_site_coverage_with_options_async(
        self,
        request: esa20240910_models.UpdateSiteCoverageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateSiteCoverageResponse:
        """
        @summary Modifies the service location for a single website. This updates the acceleration configuration of the website to adapt to changes in traffic distribution, and improve user experience in specific regions.
        
        @param request: UpdateSiteCoverageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateSiteCoverageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.coverage):
            query['Coverage'] = request.coverage
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateSiteCoverage',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateSiteCoverageResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_site_coverage(
        self,
        request: esa20240910_models.UpdateSiteCoverageRequest,
    ) -> esa20240910_models.UpdateSiteCoverageResponse:
        """
        @summary Modifies the service location for a single website. This updates the acceleration configuration of the website to adapt to changes in traffic distribution, and improve user experience in specific regions.
        
        @param request: UpdateSiteCoverageRequest
        @return: UpdateSiteCoverageResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_site_coverage_with_options(request, runtime)

    async def update_site_coverage_async(
        self,
        request: esa20240910_models.UpdateSiteCoverageRequest,
    ) -> esa20240910_models.UpdateSiteCoverageResponse:
        """
        @summary Modifies the service location for a single website. This updates the acceleration configuration of the website to adapt to changes in traffic distribution, and improve user experience in specific regions.
        
        @param request: UpdateSiteCoverageRequest
        @return: UpdateSiteCoverageResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_site_coverage_with_options_async(request, runtime)

    def update_site_custom_log_with_options(
        self,
        tmp_req: esa20240910_models.UpdateSiteCustomLogRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateSiteCustomLogResponse:
        """
        @summary Modifies the configuration of custom request header, response header, and cookie fields that are used to capture logs of a website.
        
        @param tmp_req: UpdateSiteCustomLogRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateSiteCustomLogResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.UpdateSiteCustomLogShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.cookies):
            request.cookies_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.cookies, 'Cookies', 'json')
        if not UtilClient.is_unset(tmp_req.request_headers):
            request.request_headers_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.request_headers, 'RequestHeaders', 'json')
        if not UtilClient.is_unset(tmp_req.response_headers):
            request.response_headers_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.response_headers, 'ResponseHeaders', 'json')
        body = {}
        if not UtilClient.is_unset(request.cookies_shrink):
            body['Cookies'] = request.cookies_shrink
        if not UtilClient.is_unset(request.request_headers_shrink):
            body['RequestHeaders'] = request.request_headers_shrink
        if not UtilClient.is_unset(request.response_headers_shrink):
            body['ResponseHeaders'] = request.response_headers_shrink
        if not UtilClient.is_unset(request.site_id):
            body['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateSiteCustomLog',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateSiteCustomLogResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_site_custom_log_with_options_async(
        self,
        tmp_req: esa20240910_models.UpdateSiteCustomLogRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateSiteCustomLogResponse:
        """
        @summary Modifies the configuration of custom request header, response header, and cookie fields that are used to capture logs of a website.
        
        @param tmp_req: UpdateSiteCustomLogRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateSiteCustomLogResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.UpdateSiteCustomLogShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.cookies):
            request.cookies_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.cookies, 'Cookies', 'json')
        if not UtilClient.is_unset(tmp_req.request_headers):
            request.request_headers_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.request_headers, 'RequestHeaders', 'json')
        if not UtilClient.is_unset(tmp_req.response_headers):
            request.response_headers_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.response_headers, 'ResponseHeaders', 'json')
        body = {}
        if not UtilClient.is_unset(request.cookies_shrink):
            body['Cookies'] = request.cookies_shrink
        if not UtilClient.is_unset(request.request_headers_shrink):
            body['RequestHeaders'] = request.request_headers_shrink
        if not UtilClient.is_unset(request.response_headers_shrink):
            body['ResponseHeaders'] = request.response_headers_shrink
        if not UtilClient.is_unset(request.site_id):
            body['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateSiteCustomLog',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateSiteCustomLogResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_site_custom_log(
        self,
        request: esa20240910_models.UpdateSiteCustomLogRequest,
    ) -> esa20240910_models.UpdateSiteCustomLogResponse:
        """
        @summary Modifies the configuration of custom request header, response header, and cookie fields that are used to capture logs of a website.
        
        @param request: UpdateSiteCustomLogRequest
        @return: UpdateSiteCustomLogResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_site_custom_log_with_options(request, runtime)

    async def update_site_custom_log_async(
        self,
        request: esa20240910_models.UpdateSiteCustomLogRequest,
    ) -> esa20240910_models.UpdateSiteCustomLogResponse:
        """
        @summary Modifies the configuration of custom request header, response header, and cookie fields that are used to capture logs of a website.
        
        @param request: UpdateSiteCustomLogRequest
        @return: UpdateSiteCustomLogResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_site_custom_log_with_options_async(request, runtime)

    def update_site_delivery_task_with_options(
        self,
        request: esa20240910_models.UpdateSiteDeliveryTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateSiteDeliveryTaskResponse:
        """
        @summary Modifies a real-time log delivery task.
        
        @param request: UpdateSiteDeliveryTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateSiteDeliveryTaskResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.business_type):
            body['BusinessType'] = request.business_type
        if not UtilClient.is_unset(request.discard_rate):
            body['DiscardRate'] = request.discard_rate
        if not UtilClient.is_unset(request.field_name):
            body['FieldName'] = request.field_name
        if not UtilClient.is_unset(request.filter_ver):
            body['FilterVer'] = request.filter_ver
        if not UtilClient.is_unset(request.site_id):
            body['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.task_name):
            body['TaskName'] = request.task_name
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateSiteDeliveryTask',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateSiteDeliveryTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_site_delivery_task_with_options_async(
        self,
        request: esa20240910_models.UpdateSiteDeliveryTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateSiteDeliveryTaskResponse:
        """
        @summary Modifies a real-time log delivery task.
        
        @param request: UpdateSiteDeliveryTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateSiteDeliveryTaskResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.business_type):
            body['BusinessType'] = request.business_type
        if not UtilClient.is_unset(request.discard_rate):
            body['DiscardRate'] = request.discard_rate
        if not UtilClient.is_unset(request.field_name):
            body['FieldName'] = request.field_name
        if not UtilClient.is_unset(request.filter_ver):
            body['FilterVer'] = request.filter_ver
        if not UtilClient.is_unset(request.site_id):
            body['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.task_name):
            body['TaskName'] = request.task_name
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateSiteDeliveryTask',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateSiteDeliveryTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_site_delivery_task(
        self,
        request: esa20240910_models.UpdateSiteDeliveryTaskRequest,
    ) -> esa20240910_models.UpdateSiteDeliveryTaskResponse:
        """
        @summary Modifies a real-time log delivery task.
        
        @param request: UpdateSiteDeliveryTaskRequest
        @return: UpdateSiteDeliveryTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_site_delivery_task_with_options(request, runtime)

    async def update_site_delivery_task_async(
        self,
        request: esa20240910_models.UpdateSiteDeliveryTaskRequest,
    ) -> esa20240910_models.UpdateSiteDeliveryTaskResponse:
        """
        @summary Modifies a real-time log delivery task.
        
        @param request: UpdateSiteDeliveryTaskRequest
        @return: UpdateSiteDeliveryTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_site_delivery_task_with_options_async(request, runtime)

    def update_site_delivery_task_status_with_options(
        self,
        request: esa20240910_models.UpdateSiteDeliveryTaskStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateSiteDeliveryTaskStatusResponse:
        """
        @summary Changes the status of a real-time log delivery task.
        
        @param request: UpdateSiteDeliveryTaskStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateSiteDeliveryTaskStatusResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateSiteDeliveryTaskStatus',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateSiteDeliveryTaskStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_site_delivery_task_status_with_options_async(
        self,
        request: esa20240910_models.UpdateSiteDeliveryTaskStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateSiteDeliveryTaskStatusResponse:
        """
        @summary Changes the status of a real-time log delivery task.
        
        @param request: UpdateSiteDeliveryTaskStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateSiteDeliveryTaskStatusResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateSiteDeliveryTaskStatus',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateSiteDeliveryTaskStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_site_delivery_task_status(
        self,
        request: esa20240910_models.UpdateSiteDeliveryTaskStatusRequest,
    ) -> esa20240910_models.UpdateSiteDeliveryTaskStatusResponse:
        """
        @summary Changes the status of a real-time log delivery task.
        
        @param request: UpdateSiteDeliveryTaskStatusRequest
        @return: UpdateSiteDeliveryTaskStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_site_delivery_task_status_with_options(request, runtime)

    async def update_site_delivery_task_status_async(
        self,
        request: esa20240910_models.UpdateSiteDeliveryTaskStatusRequest,
    ) -> esa20240910_models.UpdateSiteDeliveryTaskStatusResponse:
        """
        @summary Changes the status of a real-time log delivery task.
        
        @param request: UpdateSiteDeliveryTaskStatusRequest
        @return: UpdateSiteDeliveryTaskStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_site_delivery_task_status_with_options_async(request, runtime)

    def update_site_name_exclusive_with_options(
        self,
        request: esa20240910_models.UpdateSiteNameExclusiveRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateSiteNameExclusiveResponse:
        """
        @summary Modifies the site hold configuration of a website. After you enable site hold, other accounts cannot add your website domain or its subdomains to ESA.
        
        @param request: UpdateSiteNameExclusiveRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateSiteNameExclusiveResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.enable):
            query['Enable'] = request.enable
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateSiteNameExclusive',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateSiteNameExclusiveResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_site_name_exclusive_with_options_async(
        self,
        request: esa20240910_models.UpdateSiteNameExclusiveRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateSiteNameExclusiveResponse:
        """
        @summary Modifies the site hold configuration of a website. After you enable site hold, other accounts cannot add your website domain or its subdomains to ESA.
        
        @param request: UpdateSiteNameExclusiveRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateSiteNameExclusiveResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.enable):
            query['Enable'] = request.enable
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateSiteNameExclusive',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateSiteNameExclusiveResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_site_name_exclusive(
        self,
        request: esa20240910_models.UpdateSiteNameExclusiveRequest,
    ) -> esa20240910_models.UpdateSiteNameExclusiveResponse:
        """
        @summary Modifies the site hold configuration of a website. After you enable site hold, other accounts cannot add your website domain or its subdomains to ESA.
        
        @param request: UpdateSiteNameExclusiveRequest
        @return: UpdateSiteNameExclusiveResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_site_name_exclusive_with_options(request, runtime)

    async def update_site_name_exclusive_async(
        self,
        request: esa20240910_models.UpdateSiteNameExclusiveRequest,
    ) -> esa20240910_models.UpdateSiteNameExclusiveResponse:
        """
        @summary Modifies the site hold configuration of a website. After you enable site hold, other accounts cannot add your website domain or its subdomains to ESA.
        
        @param request: UpdateSiteNameExclusiveRequest
        @return: UpdateSiteNameExclusiveResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_site_name_exclusive_with_options_async(request, runtime)

    def update_site_pause_with_options(
        self,
        request: esa20240910_models.UpdateSitePauseRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateSitePauseResponse:
        """
        @summary Modifies the ESA proxy configuration of a website.
        
        @param request: UpdateSitePauseRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateSitePauseResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.paused):
            query['Paused'] = request.paused
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateSitePause',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateSitePauseResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_site_pause_with_options_async(
        self,
        request: esa20240910_models.UpdateSitePauseRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateSitePauseResponse:
        """
        @summary Modifies the ESA proxy configuration of a website.
        
        @param request: UpdateSitePauseRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateSitePauseResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.paused):
            query['Paused'] = request.paused
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateSitePause',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateSitePauseResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_site_pause(
        self,
        request: esa20240910_models.UpdateSitePauseRequest,
    ) -> esa20240910_models.UpdateSitePauseResponse:
        """
        @summary Modifies the ESA proxy configuration of a website.
        
        @param request: UpdateSitePauseRequest
        @return: UpdateSitePauseResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_site_pause_with_options(request, runtime)

    async def update_site_pause_async(
        self,
        request: esa20240910_models.UpdateSitePauseRequest,
    ) -> esa20240910_models.UpdateSitePauseResponse:
        """
        @summary Modifies the ESA proxy configuration of a website.
        
        @param request: UpdateSitePauseRequest
        @return: UpdateSitePauseResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_site_pause_with_options_async(request, runtime)

    def update_site_vanity_nswith_options(
        self,
        request: esa20240910_models.UpdateSiteVanityNSRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateSiteVanityNSResponse:
        """
        @summary Updates the custom nameserver names for a single website.
        
        @param request: UpdateSiteVanityNSRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateSiteVanityNSResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.vanity_nslist):
            query['VanityNSList'] = request.vanity_nslist
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateSiteVanityNS',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateSiteVanityNSResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_site_vanity_nswith_options_async(
        self,
        request: esa20240910_models.UpdateSiteVanityNSRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateSiteVanityNSResponse:
        """
        @summary Updates the custom nameserver names for a single website.
        
        @param request: UpdateSiteVanityNSRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateSiteVanityNSResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.vanity_nslist):
            query['VanityNSList'] = request.vanity_nslist
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateSiteVanityNS',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateSiteVanityNSResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_site_vanity_ns(
        self,
        request: esa20240910_models.UpdateSiteVanityNSRequest,
    ) -> esa20240910_models.UpdateSiteVanityNSResponse:
        """
        @summary Updates the custom nameserver names for a single website.
        
        @param request: UpdateSiteVanityNSRequest
        @return: UpdateSiteVanityNSResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_site_vanity_nswith_options(request, runtime)

    async def update_site_vanity_ns_async(
        self,
        request: esa20240910_models.UpdateSiteVanityNSRequest,
    ) -> esa20240910_models.UpdateSiteVanityNSResponse:
        """
        @summary Updates the custom nameserver names for a single website.
        
        @param request: UpdateSiteVanityNSRequest
        @return: UpdateSiteVanityNSResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_site_vanity_nswith_options_async(request, runtime)

    def update_tiered_cache_with_options(
        self,
        request: esa20240910_models.UpdateTieredCacheRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateTieredCacheResponse:
        """
        @summary Modifies the tiered cache configuration of your website.
        
        @param request: UpdateTieredCacheRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateTieredCacheResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cache_architecture_mode):
            query['CacheArchitectureMode'] = request.cache_architecture_mode
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateTieredCache',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateTieredCacheResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_tiered_cache_with_options_async(
        self,
        request: esa20240910_models.UpdateTieredCacheRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateTieredCacheResponse:
        """
        @summary Modifies the tiered cache configuration of your website.
        
        @param request: UpdateTieredCacheRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateTieredCacheResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cache_architecture_mode):
            query['CacheArchitectureMode'] = request.cache_architecture_mode
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateTieredCache',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateTieredCacheResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_tiered_cache(
        self,
        request: esa20240910_models.UpdateTieredCacheRequest,
    ) -> esa20240910_models.UpdateTieredCacheResponse:
        """
        @summary Modifies the tiered cache configuration of your website.
        
        @param request: UpdateTieredCacheRequest
        @return: UpdateTieredCacheResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_tiered_cache_with_options(request, runtime)

    async def update_tiered_cache_async(
        self,
        request: esa20240910_models.UpdateTieredCacheRequest,
    ) -> esa20240910_models.UpdateTieredCacheResponse:
        """
        @summary Modifies the tiered cache configuration of your website.
        
        @param request: UpdateTieredCacheRequest
        @return: UpdateTieredCacheResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_tiered_cache_with_options_async(request, runtime)

    def update_transport_layer_application_with_options(
        self,
        tmp_req: esa20240910_models.UpdateTransportLayerApplicationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateTransportLayerApplicationResponse:
        """
        @summary Modify Transport Layer Application
        
        @param tmp_req: UpdateTransportLayerApplicationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateTransportLayerApplicationResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.UpdateTransportLayerApplicationShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.rules):
            request.rules_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.rules, 'Rules', 'json')
        query = {}
        if not UtilClient.is_unset(request.application_id):
            query['ApplicationId'] = request.application_id
        if not UtilClient.is_unset(request.cross_border_optimization):
            query['CrossBorderOptimization'] = request.cross_border_optimization
        if not UtilClient.is_unset(request.ip_access_rule):
            query['IpAccessRule'] = request.ip_access_rule
        if not UtilClient.is_unset(request.ipv_6):
            query['Ipv6'] = request.ipv_6
        if not UtilClient.is_unset(request.rules_shrink):
            query['Rules'] = request.rules_shrink
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.static_ip):
            query['StaticIp'] = request.static_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateTransportLayerApplication',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateTransportLayerApplicationResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_transport_layer_application_with_options_async(
        self,
        tmp_req: esa20240910_models.UpdateTransportLayerApplicationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateTransportLayerApplicationResponse:
        """
        @summary Modify Transport Layer Application
        
        @param tmp_req: UpdateTransportLayerApplicationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateTransportLayerApplicationResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.UpdateTransportLayerApplicationShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.rules):
            request.rules_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.rules, 'Rules', 'json')
        query = {}
        if not UtilClient.is_unset(request.application_id):
            query['ApplicationId'] = request.application_id
        if not UtilClient.is_unset(request.cross_border_optimization):
            query['CrossBorderOptimization'] = request.cross_border_optimization
        if not UtilClient.is_unset(request.ip_access_rule):
            query['IpAccessRule'] = request.ip_access_rule
        if not UtilClient.is_unset(request.ipv_6):
            query['Ipv6'] = request.ipv_6
        if not UtilClient.is_unset(request.rules_shrink):
            query['Rules'] = request.rules_shrink
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.static_ip):
            query['StaticIp'] = request.static_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateTransportLayerApplication',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateTransportLayerApplicationResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_transport_layer_application(
        self,
        request: esa20240910_models.UpdateTransportLayerApplicationRequest,
    ) -> esa20240910_models.UpdateTransportLayerApplicationResponse:
        """
        @summary Modify Transport Layer Application
        
        @param request: UpdateTransportLayerApplicationRequest
        @return: UpdateTransportLayerApplicationResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_transport_layer_application_with_options(request, runtime)

    async def update_transport_layer_application_async(
        self,
        request: esa20240910_models.UpdateTransportLayerApplicationRequest,
    ) -> esa20240910_models.UpdateTransportLayerApplicationResponse:
        """
        @summary Modify Transport Layer Application
        
        @param request: UpdateTransportLayerApplicationRequest
        @return: UpdateTransportLayerApplicationResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_transport_layer_application_with_options_async(request, runtime)

    def update_url_observation_with_options(
        self,
        request: esa20240910_models.UpdateUrlObservationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateUrlObservationResponse:
        """
        @summary 更新网页监测配置
        
        @param request: UpdateUrlObservationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateUrlObservationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.sdk_type):
            query['SdkType'] = request.sdk_type
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateUrlObservation',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateUrlObservationResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_url_observation_with_options_async(
        self,
        request: esa20240910_models.UpdateUrlObservationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateUrlObservationResponse:
        """
        @summary 更新网页监测配置
        
        @param request: UpdateUrlObservationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateUrlObservationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.sdk_type):
            query['SdkType'] = request.sdk_type
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateUrlObservation',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateUrlObservationResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_url_observation(
        self,
        request: esa20240910_models.UpdateUrlObservationRequest,
    ) -> esa20240910_models.UpdateUrlObservationResponse:
        """
        @summary 更新网页监测配置
        
        @param request: UpdateUrlObservationRequest
        @return: UpdateUrlObservationResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_url_observation_with_options(request, runtime)

    async def update_url_observation_async(
        self,
        request: esa20240910_models.UpdateUrlObservationRequest,
    ) -> esa20240910_models.UpdateUrlObservationResponse:
        """
        @summary 更新网页监测配置
        
        @param request: UpdateUrlObservationRequest
        @return: UpdateUrlObservationResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_url_observation_with_options_async(request, runtime)

    def update_user_delivery_task_with_options(
        self,
        request: esa20240910_models.UpdateUserDeliveryTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateUserDeliveryTaskResponse:
        """
        @summary Modifies the configurations of a delivery task, including the task name, log field, log category, and discard rate.
        
        @param request: UpdateUserDeliveryTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateUserDeliveryTaskResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.business_type):
            body['BusinessType'] = request.business_type
        if not UtilClient.is_unset(request.details):
            body['Details'] = request.details
        if not UtilClient.is_unset(request.discard_rate):
            body['DiscardRate'] = request.discard_rate
        if not UtilClient.is_unset(request.field_name):
            body['FieldName'] = request.field_name
        if not UtilClient.is_unset(request.filter_ver):
            body['FilterVer'] = request.filter_ver
        if not UtilClient.is_unset(request.task_name):
            body['TaskName'] = request.task_name
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateUserDeliveryTask',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateUserDeliveryTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_user_delivery_task_with_options_async(
        self,
        request: esa20240910_models.UpdateUserDeliveryTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateUserDeliveryTaskResponse:
        """
        @summary Modifies the configurations of a delivery task, including the task name, log field, log category, and discard rate.
        
        @param request: UpdateUserDeliveryTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateUserDeliveryTaskResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.business_type):
            body['BusinessType'] = request.business_type
        if not UtilClient.is_unset(request.details):
            body['Details'] = request.details
        if not UtilClient.is_unset(request.discard_rate):
            body['DiscardRate'] = request.discard_rate
        if not UtilClient.is_unset(request.field_name):
            body['FieldName'] = request.field_name
        if not UtilClient.is_unset(request.filter_ver):
            body['FilterVer'] = request.filter_ver
        if not UtilClient.is_unset(request.task_name):
            body['TaskName'] = request.task_name
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateUserDeliveryTask',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateUserDeliveryTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_user_delivery_task(
        self,
        request: esa20240910_models.UpdateUserDeliveryTaskRequest,
    ) -> esa20240910_models.UpdateUserDeliveryTaskResponse:
        """
        @summary Modifies the configurations of a delivery task, including the task name, log field, log category, and discard rate.
        
        @param request: UpdateUserDeliveryTaskRequest
        @return: UpdateUserDeliveryTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_user_delivery_task_with_options(request, runtime)

    async def update_user_delivery_task_async(
        self,
        request: esa20240910_models.UpdateUserDeliveryTaskRequest,
    ) -> esa20240910_models.UpdateUserDeliveryTaskResponse:
        """
        @summary Modifies the configurations of a delivery task, including the task name, log field, log category, and discard rate.
        
        @param request: UpdateUserDeliveryTaskRequest
        @return: UpdateUserDeliveryTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_user_delivery_task_with_options_async(request, runtime)

    def update_user_delivery_task_status_with_options(
        self,
        request: esa20240910_models.UpdateUserDeliveryTaskStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateUserDeliveryTaskStatusResponse:
        """
        @summary Changes the status of a delivery task in your Alibaba Cloud account.
        
        @description ## [](#)
        You can call this operation to enable or disable a delivery task by using TaskName and Method. The response includes the most recent status and operation result details of the task.
        
        @param request: UpdateUserDeliveryTaskStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateUserDeliveryTaskStatusResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateUserDeliveryTaskStatus',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateUserDeliveryTaskStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_user_delivery_task_status_with_options_async(
        self,
        request: esa20240910_models.UpdateUserDeliveryTaskStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateUserDeliveryTaskStatusResponse:
        """
        @summary Changes the status of a delivery task in your Alibaba Cloud account.
        
        @description ## [](#)
        You can call this operation to enable or disable a delivery task by using TaskName and Method. The response includes the most recent status and operation result details of the task.
        
        @param request: UpdateUserDeliveryTaskStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateUserDeliveryTaskStatusResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateUserDeliveryTaskStatus',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateUserDeliveryTaskStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_user_delivery_task_status(
        self,
        request: esa20240910_models.UpdateUserDeliveryTaskStatusRequest,
    ) -> esa20240910_models.UpdateUserDeliveryTaskStatusResponse:
        """
        @summary Changes the status of a delivery task in your Alibaba Cloud account.
        
        @description ## [](#)
        You can call this operation to enable or disable a delivery task by using TaskName and Method. The response includes the most recent status and operation result details of the task.
        
        @param request: UpdateUserDeliveryTaskStatusRequest
        @return: UpdateUserDeliveryTaskStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_user_delivery_task_status_with_options(request, runtime)

    async def update_user_delivery_task_status_async(
        self,
        request: esa20240910_models.UpdateUserDeliveryTaskStatusRequest,
    ) -> esa20240910_models.UpdateUserDeliveryTaskStatusResponse:
        """
        @summary Changes the status of a delivery task in your Alibaba Cloud account.
        
        @description ## [](#)
        You can call this operation to enable or disable a delivery task by using TaskName and Method. The response includes the most recent status and operation result details of the task.
        
        @param request: UpdateUserDeliveryTaskStatusRequest
        @return: UpdateUserDeliveryTaskStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_user_delivery_task_status_with_options_async(request, runtime)

    def update_video_processing_with_options(
        self,
        request: esa20240910_models.UpdateVideoProcessingRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateVideoProcessingResponse:
        """
        @summary 修改站点视频处理配置
        
        @param request: UpdateVideoProcessingRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateVideoProcessingResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.flv_seek_end):
            query['FlvSeekEnd'] = request.flv_seek_end
        if not UtilClient.is_unset(request.flv_seek_start):
            query['FlvSeekStart'] = request.flv_seek_start
        if not UtilClient.is_unset(request.flv_video_seek_mode):
            query['FlvVideoSeekMode'] = request.flv_video_seek_mode
        if not UtilClient.is_unset(request.mp_4seek_end):
            query['Mp4SeekEnd'] = request.mp_4seek_end
        if not UtilClient.is_unset(request.mp_4seek_start):
            query['Mp4SeekStart'] = request.mp_4seek_start
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.video_seek_enable):
            query['VideoSeekEnable'] = request.video_seek_enable
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateVideoProcessing',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateVideoProcessingResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_video_processing_with_options_async(
        self,
        request: esa20240910_models.UpdateVideoProcessingRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateVideoProcessingResponse:
        """
        @summary 修改站点视频处理配置
        
        @param request: UpdateVideoProcessingRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateVideoProcessingResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.flv_seek_end):
            query['FlvSeekEnd'] = request.flv_seek_end
        if not UtilClient.is_unset(request.flv_seek_start):
            query['FlvSeekStart'] = request.flv_seek_start
        if not UtilClient.is_unset(request.flv_video_seek_mode):
            query['FlvVideoSeekMode'] = request.flv_video_seek_mode
        if not UtilClient.is_unset(request.mp_4seek_end):
            query['Mp4SeekEnd'] = request.mp_4seek_end
        if not UtilClient.is_unset(request.mp_4seek_start):
            query['Mp4SeekStart'] = request.mp_4seek_start
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.sequence):
            query['Sequence'] = request.sequence
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.video_seek_enable):
            query['VideoSeekEnable'] = request.video_seek_enable
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateVideoProcessing',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateVideoProcessingResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_video_processing(
        self,
        request: esa20240910_models.UpdateVideoProcessingRequest,
    ) -> esa20240910_models.UpdateVideoProcessingResponse:
        """
        @summary 修改站点视频处理配置
        
        @param request: UpdateVideoProcessingRequest
        @return: UpdateVideoProcessingResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_video_processing_with_options(request, runtime)

    async def update_video_processing_async(
        self,
        request: esa20240910_models.UpdateVideoProcessingRequest,
    ) -> esa20240910_models.UpdateVideoProcessingResponse:
        """
        @summary 修改站点视频处理配置
        
        @param request: UpdateVideoProcessingRequest
        @return: UpdateVideoProcessingResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_video_processing_with_options_async(request, runtime)

    def update_waf_rule_with_options(
        self,
        tmp_req: esa20240910_models.UpdateWafRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateWafRuleResponse:
        """
        @summary Update WAF Rule Page
        
        @param tmp_req: UpdateWafRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateWafRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.UpdateWafRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.config):
            request.config_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.config, 'Config', 'json')
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        body = {}
        if not UtilClient.is_unset(request.config_shrink):
            body['Config'] = request.config_shrink
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.position):
            body['Position'] = request.position
        if not UtilClient.is_unset(request.status):
            body['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateWafRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateWafRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_waf_rule_with_options_async(
        self,
        tmp_req: esa20240910_models.UpdateWafRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateWafRuleResponse:
        """
        @summary Update WAF Rule Page
        
        @param tmp_req: UpdateWafRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateWafRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.UpdateWafRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.config):
            request.config_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.config, 'Config', 'json')
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        body = {}
        if not UtilClient.is_unset(request.config_shrink):
            body['Config'] = request.config_shrink
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.position):
            body['Position'] = request.position
        if not UtilClient.is_unset(request.status):
            body['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateWafRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateWafRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_waf_rule(
        self,
        request: esa20240910_models.UpdateWafRuleRequest,
    ) -> esa20240910_models.UpdateWafRuleResponse:
        """
        @summary Update WAF Rule Page
        
        @param request: UpdateWafRuleRequest
        @return: UpdateWafRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_waf_rule_with_options(request, runtime)

    async def update_waf_rule_async(
        self,
        request: esa20240910_models.UpdateWafRuleRequest,
    ) -> esa20240910_models.UpdateWafRuleResponse:
        """
        @summary Update WAF Rule Page
        
        @param request: UpdateWafRuleRequest
        @return: UpdateWafRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_waf_rule_with_options_async(request, runtime)

    def update_waf_ruleset_with_options(
        self,
        request: esa20240910_models.UpdateWafRulesetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateWafRulesetResponse:
        """
        @summary Update WAF Ruleset
        
        @param request: UpdateWafRulesetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateWafRulesetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.status):
            body['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateWafRuleset',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateWafRulesetResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_waf_ruleset_with_options_async(
        self,
        request: esa20240910_models.UpdateWafRulesetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateWafRulesetResponse:
        """
        @summary Update WAF Ruleset
        
        @param request: UpdateWafRulesetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateWafRulesetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.site_version):
            query['SiteVersion'] = request.site_version
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.status):
            body['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateWafRuleset',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateWafRulesetResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_waf_ruleset(
        self,
        request: esa20240910_models.UpdateWafRulesetRequest,
    ) -> esa20240910_models.UpdateWafRulesetResponse:
        """
        @summary Update WAF Ruleset
        
        @param request: UpdateWafRulesetRequest
        @return: UpdateWafRulesetResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_waf_ruleset_with_options(request, runtime)

    async def update_waf_ruleset_async(
        self,
        request: esa20240910_models.UpdateWafRulesetRequest,
    ) -> esa20240910_models.UpdateWafRulesetResponse:
        """
        @summary Update WAF Ruleset
        
        @param request: UpdateWafRulesetRequest
        @return: UpdateWafRulesetResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_waf_ruleset_with_options_async(request, runtime)

    def update_waiting_room_with_options(
        self,
        tmp_req: esa20240910_models.UpdateWaitingRoomRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateWaitingRoomResponse:
        """
        @summary Modifies the configurations of a waiting room.
        
        @param tmp_req: UpdateWaitingRoomRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateWaitingRoomResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.UpdateWaitingRoomShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.host_name_and_path):
            request.host_name_and_path_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.host_name_and_path, 'HostNameAndPath', 'json')
        query = {}
        if not UtilClient.is_unset(request.cookie_name):
            query['CookieName'] = request.cookie_name
        if not UtilClient.is_unset(request.custom_page_html):
            query['CustomPageHtml'] = request.custom_page_html
        if not UtilClient.is_unset(request.description):
            query['Description'] = request.description
        if not UtilClient.is_unset(request.disable_session_renewal_enable):
            query['DisableSessionRenewalEnable'] = request.disable_session_renewal_enable
        if not UtilClient.is_unset(request.enable):
            query['Enable'] = request.enable
        if not UtilClient.is_unset(request.host_name_and_path_shrink):
            query['HostNameAndPath'] = request.host_name_and_path_shrink
        if not UtilClient.is_unset(request.json_response_enable):
            query['JsonResponseEnable'] = request.json_response_enable
        if not UtilClient.is_unset(request.language):
            query['Language'] = request.language
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.new_users_per_minute):
            query['NewUsersPerMinute'] = request.new_users_per_minute
        if not UtilClient.is_unset(request.queue_all_enable):
            query['QueueAllEnable'] = request.queue_all_enable
        if not UtilClient.is_unset(request.queuing_method):
            query['QueuingMethod'] = request.queuing_method
        if not UtilClient.is_unset(request.queuing_status_code):
            query['QueuingStatusCode'] = request.queuing_status_code
        if not UtilClient.is_unset(request.session_duration):
            query['SessionDuration'] = request.session_duration
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.total_active_users):
            query['TotalActiveUsers'] = request.total_active_users
        if not UtilClient.is_unset(request.waiting_room_id):
            query['WaitingRoomId'] = request.waiting_room_id
        if not UtilClient.is_unset(request.waiting_room_type):
            query['WaitingRoomType'] = request.waiting_room_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateWaitingRoom',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateWaitingRoomResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_waiting_room_with_options_async(
        self,
        tmp_req: esa20240910_models.UpdateWaitingRoomRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateWaitingRoomResponse:
        """
        @summary Modifies the configurations of a waiting room.
        
        @param tmp_req: UpdateWaitingRoomRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateWaitingRoomResponse
        """
        UtilClient.validate_model(tmp_req)
        request = esa20240910_models.UpdateWaitingRoomShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.host_name_and_path):
            request.host_name_and_path_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.host_name_and_path, 'HostNameAndPath', 'json')
        query = {}
        if not UtilClient.is_unset(request.cookie_name):
            query['CookieName'] = request.cookie_name
        if not UtilClient.is_unset(request.custom_page_html):
            query['CustomPageHtml'] = request.custom_page_html
        if not UtilClient.is_unset(request.description):
            query['Description'] = request.description
        if not UtilClient.is_unset(request.disable_session_renewal_enable):
            query['DisableSessionRenewalEnable'] = request.disable_session_renewal_enable
        if not UtilClient.is_unset(request.enable):
            query['Enable'] = request.enable
        if not UtilClient.is_unset(request.host_name_and_path_shrink):
            query['HostNameAndPath'] = request.host_name_and_path_shrink
        if not UtilClient.is_unset(request.json_response_enable):
            query['JsonResponseEnable'] = request.json_response_enable
        if not UtilClient.is_unset(request.language):
            query['Language'] = request.language
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.new_users_per_minute):
            query['NewUsersPerMinute'] = request.new_users_per_minute
        if not UtilClient.is_unset(request.queue_all_enable):
            query['QueueAllEnable'] = request.queue_all_enable
        if not UtilClient.is_unset(request.queuing_method):
            query['QueuingMethod'] = request.queuing_method
        if not UtilClient.is_unset(request.queuing_status_code):
            query['QueuingStatusCode'] = request.queuing_status_code
        if not UtilClient.is_unset(request.session_duration):
            query['SessionDuration'] = request.session_duration
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.total_active_users):
            query['TotalActiveUsers'] = request.total_active_users
        if not UtilClient.is_unset(request.waiting_room_id):
            query['WaitingRoomId'] = request.waiting_room_id
        if not UtilClient.is_unset(request.waiting_room_type):
            query['WaitingRoomType'] = request.waiting_room_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateWaitingRoom',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateWaitingRoomResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_waiting_room(
        self,
        request: esa20240910_models.UpdateWaitingRoomRequest,
    ) -> esa20240910_models.UpdateWaitingRoomResponse:
        """
        @summary Modifies the configurations of a waiting room.
        
        @param request: UpdateWaitingRoomRequest
        @return: UpdateWaitingRoomResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_waiting_room_with_options(request, runtime)

    async def update_waiting_room_async(
        self,
        request: esa20240910_models.UpdateWaitingRoomRequest,
    ) -> esa20240910_models.UpdateWaitingRoomResponse:
        """
        @summary Modifies the configurations of a waiting room.
        
        @param request: UpdateWaitingRoomRequest
        @return: UpdateWaitingRoomResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_waiting_room_with_options_async(request, runtime)

    def update_waiting_room_event_with_options(
        self,
        request: esa20240910_models.UpdateWaitingRoomEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateWaitingRoomEventResponse:
        """
        @summary Modifies the configurations of a waiting room event.
        
        @param request: UpdateWaitingRoomEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateWaitingRoomEventResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.custom_page_html):
            query['CustomPageHtml'] = request.custom_page_html
        if not UtilClient.is_unset(request.description):
            query['Description'] = request.description
        if not UtilClient.is_unset(request.disable_session_renewal_enable):
            query['DisableSessionRenewalEnable'] = request.disable_session_renewal_enable
        if not UtilClient.is_unset(request.enable):
            query['Enable'] = request.enable
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.json_response_enable):
            query['JsonResponseEnable'] = request.json_response_enable
        if not UtilClient.is_unset(request.language):
            query['Language'] = request.language
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.new_users_per_minute):
            query['NewUsersPerMinute'] = request.new_users_per_minute
        if not UtilClient.is_unset(request.pre_queue_enable):
            query['PreQueueEnable'] = request.pre_queue_enable
        if not UtilClient.is_unset(request.pre_queue_start_time):
            query['PreQueueStartTime'] = request.pre_queue_start_time
        if not UtilClient.is_unset(request.queuing_method):
            query['QueuingMethod'] = request.queuing_method
        if not UtilClient.is_unset(request.queuing_status_code):
            query['QueuingStatusCode'] = request.queuing_status_code
        if not UtilClient.is_unset(request.random_pre_queue_enable):
            query['RandomPreQueueEnable'] = request.random_pre_queue_enable
        if not UtilClient.is_unset(request.session_duration):
            query['SessionDuration'] = request.session_duration
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.total_active_users):
            query['TotalActiveUsers'] = request.total_active_users
        if not UtilClient.is_unset(request.waiting_room_event_id):
            query['WaitingRoomEventId'] = request.waiting_room_event_id
        if not UtilClient.is_unset(request.waiting_room_type):
            query['WaitingRoomType'] = request.waiting_room_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateWaitingRoomEvent',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateWaitingRoomEventResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_waiting_room_event_with_options_async(
        self,
        request: esa20240910_models.UpdateWaitingRoomEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateWaitingRoomEventResponse:
        """
        @summary Modifies the configurations of a waiting room event.
        
        @param request: UpdateWaitingRoomEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateWaitingRoomEventResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.custom_page_html):
            query['CustomPageHtml'] = request.custom_page_html
        if not UtilClient.is_unset(request.description):
            query['Description'] = request.description
        if not UtilClient.is_unset(request.disable_session_renewal_enable):
            query['DisableSessionRenewalEnable'] = request.disable_session_renewal_enable
        if not UtilClient.is_unset(request.enable):
            query['Enable'] = request.enable
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.json_response_enable):
            query['JsonResponseEnable'] = request.json_response_enable
        if not UtilClient.is_unset(request.language):
            query['Language'] = request.language
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.new_users_per_minute):
            query['NewUsersPerMinute'] = request.new_users_per_minute
        if not UtilClient.is_unset(request.pre_queue_enable):
            query['PreQueueEnable'] = request.pre_queue_enable
        if not UtilClient.is_unset(request.pre_queue_start_time):
            query['PreQueueStartTime'] = request.pre_queue_start_time
        if not UtilClient.is_unset(request.queuing_method):
            query['QueuingMethod'] = request.queuing_method
        if not UtilClient.is_unset(request.queuing_status_code):
            query['QueuingStatusCode'] = request.queuing_status_code
        if not UtilClient.is_unset(request.random_pre_queue_enable):
            query['RandomPreQueueEnable'] = request.random_pre_queue_enable
        if not UtilClient.is_unset(request.session_duration):
            query['SessionDuration'] = request.session_duration
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.total_active_users):
            query['TotalActiveUsers'] = request.total_active_users
        if not UtilClient.is_unset(request.waiting_room_event_id):
            query['WaitingRoomEventId'] = request.waiting_room_event_id
        if not UtilClient.is_unset(request.waiting_room_type):
            query['WaitingRoomType'] = request.waiting_room_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateWaitingRoomEvent',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateWaitingRoomEventResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_waiting_room_event(
        self,
        request: esa20240910_models.UpdateWaitingRoomEventRequest,
    ) -> esa20240910_models.UpdateWaitingRoomEventResponse:
        """
        @summary Modifies the configurations of a waiting room event.
        
        @param request: UpdateWaitingRoomEventRequest
        @return: UpdateWaitingRoomEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_waiting_room_event_with_options(request, runtime)

    async def update_waiting_room_event_async(
        self,
        request: esa20240910_models.UpdateWaitingRoomEventRequest,
    ) -> esa20240910_models.UpdateWaitingRoomEventResponse:
        """
        @summary Modifies the configurations of a waiting room event.
        
        @param request: UpdateWaitingRoomEventRequest
        @return: UpdateWaitingRoomEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_waiting_room_event_with_options_async(request, runtime)

    def update_waiting_room_rule_with_options(
        self,
        request: esa20240910_models.UpdateWaitingRoomRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateWaitingRoomRuleResponse:
        """
        @summary Modify Waiting Room Rule
        
        @description This interface allows you to modify the rule settings of a specific waiting room in a site, including the rule name, enable status, and rule content, etc.
        
        @param request: UpdateWaitingRoomRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateWaitingRoomRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.waiting_room_rule_id):
            query['WaitingRoomRuleId'] = request.waiting_room_rule_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateWaitingRoomRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateWaitingRoomRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_waiting_room_rule_with_options_async(
        self,
        request: esa20240910_models.UpdateWaitingRoomRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UpdateWaitingRoomRuleResponse:
        """
        @summary Modify Waiting Room Rule
        
        @description This interface allows you to modify the rule settings of a specific waiting room in a site, including the rule name, enable status, and rule content, etc.
        
        @param request: UpdateWaitingRoomRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateWaitingRoomRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.rule):
            query['Rule'] = request.rule
        if not UtilClient.is_unset(request.rule_enable):
            query['RuleEnable'] = request.rule_enable
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.waiting_room_rule_id):
            query['WaitingRoomRuleId'] = request.waiting_room_rule_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateWaitingRoomRule',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UpdateWaitingRoomRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_waiting_room_rule(
        self,
        request: esa20240910_models.UpdateWaitingRoomRuleRequest,
    ) -> esa20240910_models.UpdateWaitingRoomRuleResponse:
        """
        @summary Modify Waiting Room Rule
        
        @description This interface allows you to modify the rule settings of a specific waiting room in a site, including the rule name, enable status, and rule content, etc.
        
        @param request: UpdateWaitingRoomRuleRequest
        @return: UpdateWaitingRoomRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_waiting_room_rule_with_options(request, runtime)

    async def update_waiting_room_rule_async(
        self,
        request: esa20240910_models.UpdateWaitingRoomRuleRequest,
    ) -> esa20240910_models.UpdateWaitingRoomRuleResponse:
        """
        @summary Modify Waiting Room Rule
        
        @description This interface allows you to modify the rule settings of a specific waiting room in a site, including the rule name, enable status, and rule content, etc.
        
        @param request: UpdateWaitingRoomRuleRequest
        @return: UpdateWaitingRoomRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_waiting_room_rule_with_options_async(request, runtime)

    def upload_client_ca_certificate_with_options(
        self,
        request: esa20240910_models.UploadClientCaCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UploadClientCaCertificateResponse:
        """
        @summary Uploads a client certificate authority (CA) certificate.
        
        @param request: UploadClientCaCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UploadClientCaCertificateResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        body = {}
        if not UtilClient.is_unset(request.certificate):
            body['Certificate'] = request.certificate
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UploadClientCaCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UploadClientCaCertificateResponse(),
            self.call_api(params, req, runtime)
        )

    async def upload_client_ca_certificate_with_options_async(
        self,
        request: esa20240910_models.UploadClientCaCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UploadClientCaCertificateResponse:
        """
        @summary Uploads a client certificate authority (CA) certificate.
        
        @param request: UploadClientCaCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UploadClientCaCertificateResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        body = {}
        if not UtilClient.is_unset(request.certificate):
            body['Certificate'] = request.certificate
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UploadClientCaCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UploadClientCaCertificateResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def upload_client_ca_certificate(
        self,
        request: esa20240910_models.UploadClientCaCertificateRequest,
    ) -> esa20240910_models.UploadClientCaCertificateResponse:
        """
        @summary Uploads a client certificate authority (CA) certificate.
        
        @param request: UploadClientCaCertificateRequest
        @return: UploadClientCaCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.upload_client_ca_certificate_with_options(request, runtime)

    async def upload_client_ca_certificate_async(
        self,
        request: esa20240910_models.UploadClientCaCertificateRequest,
    ) -> esa20240910_models.UploadClientCaCertificateResponse:
        """
        @summary Uploads a client certificate authority (CA) certificate.
        
        @param request: UploadClientCaCertificateRequest
        @return: UploadClientCaCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.upload_client_ca_certificate_with_options_async(request, runtime)

    def upload_file_with_options(
        self,
        request: esa20240910_models.UploadFileRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UploadFileResponse:
        """
        @summary Uploads the file that contains resources to be purged or prefetched.
        
        @description >
        The file can be up to 10 MB in size.
        
        @param request: UploadFileRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UploadFileResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.upload_task_name):
            query['UploadTaskName'] = request.upload_task_name
        if not UtilClient.is_unset(request.url):
            query['Url'] = request.url
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UploadFile',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UploadFileResponse(),
            self.call_api(params, req, runtime)
        )

    async def upload_file_with_options_async(
        self,
        request: esa20240910_models.UploadFileRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UploadFileResponse:
        """
        @summary Uploads the file that contains resources to be purged or prefetched.
        
        @description >
        The file can be up to 10 MB in size.
        
        @param request: UploadFileRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UploadFileResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.upload_task_name):
            query['UploadTaskName'] = request.upload_task_name
        if not UtilClient.is_unset(request.url):
            query['Url'] = request.url
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UploadFile',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UploadFileResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def upload_file(
        self,
        request: esa20240910_models.UploadFileRequest,
    ) -> esa20240910_models.UploadFileResponse:
        """
        @summary Uploads the file that contains resources to be purged or prefetched.
        
        @description >
        The file can be up to 10 MB in size.
        
        @param request: UploadFileRequest
        @return: UploadFileResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.upload_file_with_options(request, runtime)

    async def upload_file_async(
        self,
        request: esa20240910_models.UploadFileRequest,
    ) -> esa20240910_models.UploadFileResponse:
        """
        @summary Uploads the file that contains resources to be purged or prefetched.
        
        @description >
        The file can be up to 10 MB in size.
        
        @param request: UploadFileRequest
        @return: UploadFileResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.upload_file_with_options_async(request, runtime)

    def upload_file_advance(
        self,
        request: esa20240910_models.UploadFileAdvanceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UploadFileResponse:
        # Step 0: init client
        credential_model = None
        if UtilClient.is_unset(self._credential):
            raise TeaException({
                'code': 'InvalidCredentials',
                'message': 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
            })
        credential_model = self._credential.get_credential()
        access_key_id = credential_model.access_key_id
        access_key_secret = credential_model.access_key_secret
        security_token = credential_model.security_token
        credential_type = credential_model.type
        open_platform_endpoint = self._open_platform_endpoint
        if UtilClient.empty(open_platform_endpoint):
            open_platform_endpoint = 'openplatform.aliyuncs.com'
        if UtilClient.is_unset(credential_type):
            credential_type = 'access_key'
        auth_config = open_api_models.Config(
            access_key_id=access_key_id,
            access_key_secret=access_key_secret,
            security_token=security_token,
            type=credential_type,
            endpoint=open_platform_endpoint,
            protocol=self._protocol,
            region_id=self._region_id
        )
        auth_client = OpenApiClient(auth_config)
        auth_request = {
            'Product': 'ESA',
            'RegionId': self._region_id
        }
        auth_req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(auth_request)
        )
        auth_params = open_api_models.Params(
            action='AuthorizeFileUpload',
            version='2019-12-19',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        auth_response = {}
        file_obj = file_form_models.FileField()
        oss_header = {}
        tmp_body = {}
        use_accelerate = False
        auth_response_body = {}
        upload_file_req = esa20240910_models.UploadFileRequest()
        OpenApiUtilClient.convert(request, upload_file_req)
        if not UtilClient.is_unset(request.url_object):
            tmp_resp_0 = auth_client.call_api(auth_params, auth_req, runtime)
            auth_response = UtilClient.assert_as_map(tmp_resp_0)
            tmp_body = UtilClient.assert_as_map(auth_response.get('body'))
            use_accelerate = UtilClient.assert_as_boolean(tmp_body.get('UseAccelerate'))
            auth_response_body = UtilClient.stringify_map_value(tmp_body)
            file_obj = file_form_models.FileField(
                filename=auth_response_body.get('ObjectKey'),
                content=request.url_object,
                content_type=''
            )
            oss_header = {
                'host': f"{auth_response_body.get('Bucket')}.{OpenApiUtilClient.get_endpoint(auth_response_body.get('Endpoint'), use_accelerate, self._endpoint_type)}",
                'OSSAccessKeyId': auth_response_body.get('AccessKeyId'),
                'policy': auth_response_body.get('EncodedPolicy'),
                'Signature': auth_response_body.get('Signature'),
                'key': auth_response_body.get('ObjectKey'),
                'file': file_obj,
                'success_action_status': '201'
            }
            self._post_ossobject(auth_response_body.get('Bucket'), oss_header)
            upload_file_req.url = f"http://{auth_response_body.get('Bucket')}.{auth_response_body.get('Endpoint')}/{auth_response_body.get('ObjectKey')}"
        upload_file_resp = self.upload_file_with_options(upload_file_req, runtime)
        return upload_file_resp

    async def upload_file_advance_async(
        self,
        request: esa20240910_models.UploadFileAdvanceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UploadFileResponse:
        # Step 0: init client
        credential_model = None
        if UtilClient.is_unset(self._credential):
            raise TeaException({
                'code': 'InvalidCredentials',
                'message': 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
            })
        credential_model = await self._credential.get_credential_async()
        access_key_id = credential_model.access_key_id
        access_key_secret = credential_model.access_key_secret
        security_token = credential_model.security_token
        credential_type = credential_model.type
        open_platform_endpoint = self._open_platform_endpoint
        if UtilClient.empty(open_platform_endpoint):
            open_platform_endpoint = 'openplatform.aliyuncs.com'
        if UtilClient.is_unset(credential_type):
            credential_type = 'access_key'
        auth_config = open_api_models.Config(
            access_key_id=access_key_id,
            access_key_secret=access_key_secret,
            security_token=security_token,
            type=credential_type,
            endpoint=open_platform_endpoint,
            protocol=self._protocol,
            region_id=self._region_id
        )
        auth_client = OpenApiClient(auth_config)
        auth_request = {
            'Product': 'ESA',
            'RegionId': self._region_id
        }
        auth_req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(auth_request)
        )
        auth_params = open_api_models.Params(
            action='AuthorizeFileUpload',
            version='2019-12-19',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        auth_response = {}
        file_obj = file_form_models.FileField()
        oss_header = {}
        tmp_body = {}
        use_accelerate = False
        auth_response_body = {}
        upload_file_req = esa20240910_models.UploadFileRequest()
        OpenApiUtilClient.convert(request, upload_file_req)
        if not UtilClient.is_unset(request.url_object):
            tmp_resp_0 = await auth_client.call_api_async(auth_params, auth_req, runtime)
            auth_response = UtilClient.assert_as_map(tmp_resp_0)
            tmp_body = UtilClient.assert_as_map(auth_response.get('body'))
            use_accelerate = UtilClient.assert_as_boolean(tmp_body.get('UseAccelerate'))
            auth_response_body = UtilClient.stringify_map_value(tmp_body)
            file_obj = file_form_models.FileField(
                filename=auth_response_body.get('ObjectKey'),
                content=request.url_object,
                content_type=''
            )
            oss_header = {
                'host': f"{auth_response_body.get('Bucket')}.{OpenApiUtilClient.get_endpoint(auth_response_body.get('Endpoint'), use_accelerate, self._endpoint_type)}",
                'OSSAccessKeyId': auth_response_body.get('AccessKeyId'),
                'policy': auth_response_body.get('EncodedPolicy'),
                'Signature': auth_response_body.get('Signature'),
                'key': auth_response_body.get('ObjectKey'),
                'file': file_obj,
                'success_action_status': '201'
            }
            await self._post_ossobject_async(auth_response_body.get('Bucket'), oss_header)
            upload_file_req.url = f"http://{auth_response_body.get('Bucket')}.{auth_response_body.get('Endpoint')}/{auth_response_body.get('ObjectKey')}"
        upload_file_resp = await self.upload_file_with_options_async(upload_file_req, runtime)
        return upload_file_resp

    def upload_origin_ca_certificate_with_options(
        self,
        request: esa20240910_models.UploadOriginCaCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UploadOriginCaCertificateResponse:
        """
        @summary 上传源服务器CA证书
        
        @param request: UploadOriginCaCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UploadOriginCaCertificateResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.certificate):
            body['Certificate'] = request.certificate
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.site_id):
            body['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UploadOriginCaCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UploadOriginCaCertificateResponse(),
            self.call_api(params, req, runtime)
        )

    async def upload_origin_ca_certificate_with_options_async(
        self,
        request: esa20240910_models.UploadOriginCaCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UploadOriginCaCertificateResponse:
        """
        @summary 上传源服务器CA证书
        
        @param request: UploadOriginCaCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UploadOriginCaCertificateResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.certificate):
            body['Certificate'] = request.certificate
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.site_id):
            body['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UploadOriginCaCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UploadOriginCaCertificateResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def upload_origin_ca_certificate(
        self,
        request: esa20240910_models.UploadOriginCaCertificateRequest,
    ) -> esa20240910_models.UploadOriginCaCertificateResponse:
        """
        @summary 上传源服务器CA证书
        
        @param request: UploadOriginCaCertificateRequest
        @return: UploadOriginCaCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.upload_origin_ca_certificate_with_options(request, runtime)

    async def upload_origin_ca_certificate_async(
        self,
        request: esa20240910_models.UploadOriginCaCertificateRequest,
    ) -> esa20240910_models.UploadOriginCaCertificateResponse:
        """
        @summary 上传源服务器CA证书
        
        @param request: UploadOriginCaCertificateRequest
        @return: UploadOriginCaCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.upload_origin_ca_certificate_with_options_async(request, runtime)

    def upload_origin_client_certificate_with_options(
        self,
        request: esa20240910_models.UploadOriginClientCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UploadOriginClientCertificateResponse:
        """
        @summary 上传域名回源客户端证书
        
        @param request: UploadOriginClientCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UploadOriginClientCertificateResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        body = {}
        if not UtilClient.is_unset(request.certificate):
            body['Certificate'] = request.certificate
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.private_key):
            body['PrivateKey'] = request.private_key
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UploadOriginClientCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UploadOriginClientCertificateResponse(),
            self.call_api(params, req, runtime)
        )

    async def upload_origin_client_certificate_with_options_async(
        self,
        request: esa20240910_models.UploadOriginClientCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UploadOriginClientCertificateResponse:
        """
        @summary 上传域名回源客户端证书
        
        @param request: UploadOriginClientCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UploadOriginClientCertificateResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        body = {}
        if not UtilClient.is_unset(request.certificate):
            body['Certificate'] = request.certificate
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.private_key):
            body['PrivateKey'] = request.private_key
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UploadOriginClientCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UploadOriginClientCertificateResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def upload_origin_client_certificate(
        self,
        request: esa20240910_models.UploadOriginClientCertificateRequest,
    ) -> esa20240910_models.UploadOriginClientCertificateResponse:
        """
        @summary 上传域名回源客户端证书
        
        @param request: UploadOriginClientCertificateRequest
        @return: UploadOriginClientCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.upload_origin_client_certificate_with_options(request, runtime)

    async def upload_origin_client_certificate_async(
        self,
        request: esa20240910_models.UploadOriginClientCertificateRequest,
    ) -> esa20240910_models.UploadOriginClientCertificateResponse:
        """
        @summary 上传域名回源客户端证书
        
        @param request: UploadOriginClientCertificateRequest
        @return: UploadOriginClientCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.upload_origin_client_certificate_with_options_async(request, runtime)

    def upload_site_origin_client_certificate_with_options(
        self,
        request: esa20240910_models.UploadSiteOriginClientCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UploadSiteOriginClientCertificateResponse:
        """
        @summary Upload site origin client certificate
        
        @param request: UploadSiteOriginClientCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UploadSiteOriginClientCertificateResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        body = {}
        if not UtilClient.is_unset(request.certificate):
            body['Certificate'] = request.certificate
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.private_key):
            body['PrivateKey'] = request.private_key
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UploadSiteOriginClientCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UploadSiteOriginClientCertificateResponse(),
            self.call_api(params, req, runtime)
        )

    async def upload_site_origin_client_certificate_with_options_async(
        self,
        request: esa20240910_models.UploadSiteOriginClientCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.UploadSiteOriginClientCertificateResponse:
        """
        @summary Upload site origin client certificate
        
        @param request: UploadSiteOriginClientCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UploadSiteOriginClientCertificateResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        body = {}
        if not UtilClient.is_unset(request.certificate):
            body['Certificate'] = request.certificate
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.private_key):
            body['PrivateKey'] = request.private_key
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UploadSiteOriginClientCertificate',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.UploadSiteOriginClientCertificateResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def upload_site_origin_client_certificate(
        self,
        request: esa20240910_models.UploadSiteOriginClientCertificateRequest,
    ) -> esa20240910_models.UploadSiteOriginClientCertificateResponse:
        """
        @summary Upload site origin client certificate
        
        @param request: UploadSiteOriginClientCertificateRequest
        @return: UploadSiteOriginClientCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.upload_site_origin_client_certificate_with_options(request, runtime)

    async def upload_site_origin_client_certificate_async(
        self,
        request: esa20240910_models.UploadSiteOriginClientCertificateRequest,
    ) -> esa20240910_models.UploadSiteOriginClientCertificateResponse:
        """
        @summary Upload site origin client certificate
        
        @param request: UploadSiteOriginClientCertificateRequest
        @return: UploadSiteOriginClientCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.upload_site_origin_client_certificate_with_options_async(request, runtime)

    def verify_site_with_options(
        self,
        request: esa20240910_models.VerifySiteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.VerifySiteResponse:
        """
        @summary Verifies the ownership of a website domain. Websites that pass the verification are automatically activated.
        
        @description 1.  For a website connected by using NS setup, this operation verifies whether the nameservers of the website are the nameservers assigned by Alibaba Cloud.
        2.  For a website connected by using CNAME setup, this operation verifies whether the website has a TXT record whose hostname is  _esaauth.[websiteDomainName] and record value is the value of VerifyCode to the DNS records of your domain. You can see the VerifyCode field in the site information.
        
        @param request: VerifySiteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: VerifySiteResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='VerifySite',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.VerifySiteResponse(),
            self.call_api(params, req, runtime)
        )

    async def verify_site_with_options_async(
        self,
        request: esa20240910_models.VerifySiteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> esa20240910_models.VerifySiteResponse:
        """
        @summary Verifies the ownership of a website domain. Websites that pass the verification are automatically activated.
        
        @description 1.  For a website connected by using NS setup, this operation verifies whether the nameservers of the website are the nameservers assigned by Alibaba Cloud.
        2.  For a website connected by using CNAME setup, this operation verifies whether the website has a TXT record whose hostname is  _esaauth.[websiteDomainName] and record value is the value of VerifyCode to the DNS records of your domain. You can see the VerifyCode field in the site information.
        
        @param request: VerifySiteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: VerifySiteResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.site_id):
            query['SiteId'] = request.site_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='VerifySite',
            version='2024-09-10',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            esa20240910_models.VerifySiteResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def verify_site(
        self,
        request: esa20240910_models.VerifySiteRequest,
    ) -> esa20240910_models.VerifySiteResponse:
        """
        @summary Verifies the ownership of a website domain. Websites that pass the verification are automatically activated.
        
        @description 1.  For a website connected by using NS setup, this operation verifies whether the nameservers of the website are the nameservers assigned by Alibaba Cloud.
        2.  For a website connected by using CNAME setup, this operation verifies whether the website has a TXT record whose hostname is  _esaauth.[websiteDomainName] and record value is the value of VerifyCode to the DNS records of your domain. You can see the VerifyCode field in the site information.
        
        @param request: VerifySiteRequest
        @return: VerifySiteResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.verify_site_with_options(request, runtime)

    async def verify_site_async(
        self,
        request: esa20240910_models.VerifySiteRequest,
    ) -> esa20240910_models.VerifySiteResponse:
        """
        @summary Verifies the ownership of a website domain. Websites that pass the verification are automatically activated.
        
        @description 1.  For a website connected by using NS setup, this operation verifies whether the nameservers of the website are the nameservers assigned by Alibaba Cloud.
        2.  For a website connected by using CNAME setup, this operation verifies whether the website has a TXT record whose hostname is  _esaauth.[websiteDomainName] and record value is the value of VerifyCode to the DNS records of your domain. You can see the VerifyCode field in the site information.
        
        @param request: VerifySiteRequest
        @return: VerifySiteResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.verify_site_with_options_async(request, runtime)
