# -*- coding: utf-8 -*-
# This file is auto-generated, don't edit it. Thanks.
from typing import Dict
from Tea.core import TeaCore

from alibabacloud_tea_openapi.client import Client as OpenApiClient
from alibabacloud_tea_openapi import models as open_api_models
from alibabacloud_tea_util.client import Client as UtilClient
from alibabacloud_endpoint_util.client import Client as EndpointUtilClient
from alibabacloud_sas20181203 import models as sas_20181203_models
from alibabacloud_tea_util import models as util_models
from alibabacloud_openapi_util.client import Client as OpenApiUtilClient


class Client(OpenApiClient):
    """
    *\
    """
    def __init__(
        self, 
        config: open_api_models.Config,
    ):
        super().__init__(config)
        self._endpoint_rule = 'regional'
        self._endpoint_map = {
            'cn-qingdao': 'tds.cn-shanghai.aliyuncs.com',
            'cn-beijing': 'tds.cn-shanghai.aliyuncs.com',
            'cn-zhangjiakou': 'tds.cn-shanghai.aliyuncs.com',
            'cn-huhehaote': 'tds.cn-shanghai.aliyuncs.com',
            'cn-wulanchabu': 'tds.cn-shanghai.aliyuncs.com',
            'cn-hangzhou': 'tds.cn-shanghai.aliyuncs.com',
            'cn-shanghai': 'tds.cn-shanghai.aliyuncs.com',
            'cn-nanjing': 'tds.cn-shanghai.aliyuncs.com',
            'cn-fuzhou': 'tds.cn-shanghai.aliyuncs.com',
            'cn-shenzhen': 'tds.cn-shanghai.aliyuncs.com',
            'cn-heyuan': 'tds.cn-shanghai.aliyuncs.com',
            'cn-guangzhou': 'tds.cn-shanghai.aliyuncs.com',
            'ap-southeast-2': 'tds.ap-southeast-1.aliyuncs.com',
            'ap-southeast-6': 'tds.ap-southeast-1.aliyuncs.com',
            'ap-northeast-2': 'tds.ap-southeast-1.aliyuncs.com',
            'ap-southeast-3': 'tds.ap-southeast-1.aliyuncs.com',
            'ap-northeast-1': 'tds.ap-southeast-1.aliyuncs.com',
            'ap-southeast-7': 'tds.ap-southeast-1.aliyuncs.com',
            'cn-chengdu': 'tds.cn-shanghai.aliyuncs.com',
            'ap-southeast-1': 'tds.ap-southeast-1.aliyuncs.com',
            'ap-southeast-5': 'tds.ap-southeast-1.aliyuncs.com',
            'cn-hongkong': 'tds.cn-shanghai.aliyuncs.com',
            'eu-central-1': 'tds.ap-southeast-1.aliyuncs.com',
            'us-east-1': 'tds.ap-southeast-1.aliyuncs.com',
            'us-west-1': 'tds.ap-southeast-1.aliyuncs.com',
            'eu-west-1': 'tds.ap-southeast-1.aliyuncs.com',
            'me-east-1': 'tds.ap-southeast-1.aliyuncs.com',
            'me-central-1': 'tds.ap-southeast-1.aliyuncs.com',
            'ap-south-1': 'tds.ap-southeast-1.aliyuncs.com',
            'cn-beijing-finance-1': 'tds.cn-shanghai.aliyuncs.com',
            'cn-hangzhou-finance': 'tds.cn-shanghai.aliyuncs.com',
            'cn-shanghai-finance-1': 'tds.cn-shanghai.aliyuncs.com',
            'cn-shenzhen-finance-1': 'tds.cn-shanghai.aliyuncs.com',
            'cn-heyuan-acdr-1': 'tds.cn-shanghai.aliyuncs.com',
            'cn-north-2-gov-1': 'tds.cn-shanghai.aliyuncs.com',
            'cn-qingdao-acdr-ut-1': 'tds.cn-shanghai.aliyuncs.com',
            'cn-shanghai-mybk': 'tds.cn-shanghai.aliyuncs.com',
            'cn-wuhan-lr': 'tds.cn-shanghai.aliyuncs.com',
            'cn-zhengzhou-jva': 'tds.cn-shanghai.aliyuncs.com'
        }
        self.check_config(config)
        self._endpoint = self.get_endpoint('sas', self._region_id, self._endpoint_rule, self._network, self._suffix, self._endpoint_map, self._endpoint)

    def get_endpoint(
        self,
        product_id: str,
        region_id: str,
        endpoint_rule: str,
        network: str,
        suffix: str,
        endpoint_map: Dict[str, str],
        endpoint: str,
    ) -> str:
        if not UtilClient.empty(endpoint):
            return endpoint
        if not UtilClient.is_unset(endpoint_map) and not UtilClient.empty(endpoint_map.get(region_id)):
            return endpoint_map.get(region_id)
        return EndpointUtilClient.get_endpoint_rules(product_id, region_id, endpoint_rule, network, suffix)

    def add_asset_selection_criteria_with_options(
        self,
        request: sas_20181203_models.AddAssetSelectionCriteriaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddAssetSelectionCriteriaResponse:
        """
        @summary Select an operation for assets.
        
        @param request: AddAssetSelectionCriteriaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddAssetSelectionCriteriaResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.criteria):
            query['Criteria'] = request.criteria
        if not UtilClient.is_unset(request.criteria_operation):
            query['CriteriaOperation'] = request.criteria_operation
        if not UtilClient.is_unset(request.selection_key):
            query['SelectionKey'] = request.selection_key
        if not UtilClient.is_unset(request.target_operation_list):
            query['TargetOperationList'] = request.target_operation_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddAssetSelectionCriteria',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddAssetSelectionCriteriaResponse(),
            self.call_api(params, req, runtime)
        )

    async def add_asset_selection_criteria_with_options_async(
        self,
        request: sas_20181203_models.AddAssetSelectionCriteriaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddAssetSelectionCriteriaResponse:
        """
        @summary Select an operation for assets.
        
        @param request: AddAssetSelectionCriteriaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddAssetSelectionCriteriaResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.criteria):
            query['Criteria'] = request.criteria
        if not UtilClient.is_unset(request.criteria_operation):
            query['CriteriaOperation'] = request.criteria_operation
        if not UtilClient.is_unset(request.selection_key):
            query['SelectionKey'] = request.selection_key
        if not UtilClient.is_unset(request.target_operation_list):
            query['TargetOperationList'] = request.target_operation_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddAssetSelectionCriteria',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddAssetSelectionCriteriaResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def add_asset_selection_criteria(
        self,
        request: sas_20181203_models.AddAssetSelectionCriteriaRequest,
    ) -> sas_20181203_models.AddAssetSelectionCriteriaResponse:
        """
        @summary Select an operation for assets.
        
        @param request: AddAssetSelectionCriteriaRequest
        @return: AddAssetSelectionCriteriaResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.add_asset_selection_criteria_with_options(request, runtime)

    async def add_asset_selection_criteria_async(
        self,
        request: sas_20181203_models.AddAssetSelectionCriteriaRequest,
    ) -> sas_20181203_models.AddAssetSelectionCriteriaResponse:
        """
        @summary Select an operation for assets.
        
        @param request: AddAssetSelectionCriteriaRequest
        @return: AddAssetSelectionCriteriaResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.add_asset_selection_criteria_with_options_async(request, runtime)

    def add_baseline_check_white_record_with_options(
        self,
        request: sas_20181203_models.AddBaselineCheckWhiteRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddBaselineCheckWhiteRecordResponse:
        """
        @summary Creates a whitelist rule for a baseline check item.
        
        @param request: AddBaselineCheckWhiteRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddBaselineCheckWhiteRecordResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_id):
            query['CheckId'] = request.check_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reason):
            query['Reason'] = request.reason
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddBaselineCheckWhiteRecord',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddBaselineCheckWhiteRecordResponse(),
            self.call_api(params, req, runtime)
        )

    async def add_baseline_check_white_record_with_options_async(
        self,
        request: sas_20181203_models.AddBaselineCheckWhiteRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddBaselineCheckWhiteRecordResponse:
        """
        @summary Creates a whitelist rule for a baseline check item.
        
        @param request: AddBaselineCheckWhiteRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddBaselineCheckWhiteRecordResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_id):
            query['CheckId'] = request.check_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reason):
            query['Reason'] = request.reason
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddBaselineCheckWhiteRecord',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddBaselineCheckWhiteRecordResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def add_baseline_check_white_record(
        self,
        request: sas_20181203_models.AddBaselineCheckWhiteRecordRequest,
    ) -> sas_20181203_models.AddBaselineCheckWhiteRecordResponse:
        """
        @summary Creates a whitelist rule for a baseline check item.
        
        @param request: AddBaselineCheckWhiteRecordRequest
        @return: AddBaselineCheckWhiteRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.add_baseline_check_white_record_with_options(request, runtime)

    async def add_baseline_check_white_record_async(
        self,
        request: sas_20181203_models.AddBaselineCheckWhiteRecordRequest,
    ) -> sas_20181203_models.AddBaselineCheckWhiteRecordResponse:
        """
        @summary Creates a whitelist rule for a baseline check item.
        
        @param request: AddBaselineCheckWhiteRecordRequest
        @return: AddBaselineCheckWhiteRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.add_baseline_check_white_record_with_options_async(request, runtime)

    def add_check_instance_result_white_list_with_options(
        self,
        request: sas_20181203_models.AddCheckInstanceResultWhiteListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddCheckInstanceResultWhiteListResponse:
        """
        @summary Adds instances on which risks are detected based on check items of the configuration assessment feature to a whitelist.
        
        @param request: AddCheckInstanceResultWhiteListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddCheckInstanceResultWhiteListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_group_id):
            query['CheckGroupId'] = request.check_group_id
        if not UtilClient.is_unset(request.check_id):
            query['CheckId'] = request.check_id
        if not UtilClient.is_unset(request.instance_ids):
            query['InstanceIds'] = request.instance_ids
        if not UtilClient.is_unset(request.instance_list):
            query['InstanceList'] = request.instance_list
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.rule_type):
            query['RuleType'] = request.rule_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddCheckInstanceResultWhiteList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddCheckInstanceResultWhiteListResponse(),
            self.call_api(params, req, runtime)
        )

    async def add_check_instance_result_white_list_with_options_async(
        self,
        request: sas_20181203_models.AddCheckInstanceResultWhiteListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddCheckInstanceResultWhiteListResponse:
        """
        @summary Adds instances on which risks are detected based on check items of the configuration assessment feature to a whitelist.
        
        @param request: AddCheckInstanceResultWhiteListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddCheckInstanceResultWhiteListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_group_id):
            query['CheckGroupId'] = request.check_group_id
        if not UtilClient.is_unset(request.check_id):
            query['CheckId'] = request.check_id
        if not UtilClient.is_unset(request.instance_ids):
            query['InstanceIds'] = request.instance_ids
        if not UtilClient.is_unset(request.instance_list):
            query['InstanceList'] = request.instance_list
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.rule_type):
            query['RuleType'] = request.rule_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddCheckInstanceResultWhiteList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddCheckInstanceResultWhiteListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def add_check_instance_result_white_list(
        self,
        request: sas_20181203_models.AddCheckInstanceResultWhiteListRequest,
    ) -> sas_20181203_models.AddCheckInstanceResultWhiteListResponse:
        """
        @summary Adds instances on which risks are detected based on check items of the configuration assessment feature to a whitelist.
        
        @param request: AddCheckInstanceResultWhiteListRequest
        @return: AddCheckInstanceResultWhiteListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.add_check_instance_result_white_list_with_options(request, runtime)

    async def add_check_instance_result_white_list_async(
        self,
        request: sas_20181203_models.AddCheckInstanceResultWhiteListRequest,
    ) -> sas_20181203_models.AddCheckInstanceResultWhiteListResponse:
        """
        @summary Adds instances on which risks are detected based on check items of the configuration assessment feature to a whitelist.
        
        @param request: AddCheckInstanceResultWhiteListRequest
        @return: AddCheckInstanceResultWhiteListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.add_check_instance_result_white_list_with_options_async(request, runtime)

    def add_check_result_white_list_with_options(
        self,
        request: sas_20181203_models.AddCheckResultWhiteListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddCheckResultWhiteListResponse:
        """
        @summary Adds the check items of the configuration assessment feature to the whitelist.
        
        @param request: AddCheckResultWhiteListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddCheckResultWhiteListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_ids):
            query['CheckIds'] = request.check_ids
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.rule_type):
            query['RuleType'] = request.rule_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddCheckResultWhiteList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddCheckResultWhiteListResponse(),
            self.call_api(params, req, runtime)
        )

    async def add_check_result_white_list_with_options_async(
        self,
        request: sas_20181203_models.AddCheckResultWhiteListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddCheckResultWhiteListResponse:
        """
        @summary Adds the check items of the configuration assessment feature to the whitelist.
        
        @param request: AddCheckResultWhiteListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddCheckResultWhiteListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_ids):
            query['CheckIds'] = request.check_ids
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.rule_type):
            query['RuleType'] = request.rule_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddCheckResultWhiteList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddCheckResultWhiteListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def add_check_result_white_list(
        self,
        request: sas_20181203_models.AddCheckResultWhiteListRequest,
    ) -> sas_20181203_models.AddCheckResultWhiteListResponse:
        """
        @summary Adds the check items of the configuration assessment feature to the whitelist.
        
        @param request: AddCheckResultWhiteListRequest
        @return: AddCheckResultWhiteListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.add_check_result_white_list_with_options(request, runtime)

    async def add_check_result_white_list_async(
        self,
        request: sas_20181203_models.AddCheckResultWhiteListRequest,
    ) -> sas_20181203_models.AddCheckResultWhiteListResponse:
        """
        @summary Adds the check items of the configuration assessment feature to the whitelist.
        
        @param request: AddCheckResultWhiteListRequest
        @return: AddCheckResultWhiteListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.add_check_result_white_list_with_options_async(request, runtime)

    def add_client_user_define_rule_with_options(
        self,
        request: sas_20181203_models.AddClientUserDefineRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddClientUserDefineRuleResponse:
        """
        @summary Creates a custom defense rule.
        
        @param request: AddClientUserDefineRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddClientUserDefineRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.action_type):
            query['ActionType'] = request.action_type
        if not UtilClient.is_unset(request.cmdline):
            query['Cmdline'] = request.cmdline
        if not UtilClient.is_unset(request.domain):
            query['Domain'] = request.domain
        if not UtilClient.is_unset(request.file_path):
            query['FilePath'] = request.file_path
        if not UtilClient.is_unset(request.ip):
            query['IP'] = request.ip
        if not UtilClient.is_unset(request.md_5list):
            query['Md5List'] = request.md_5list
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.new_file_path):
            query['NewFilePath'] = request.new_file_path
        if not UtilClient.is_unset(request.parent_cmdline):
            query['ParentCmdline'] = request.parent_cmdline
        if not UtilClient.is_unset(request.parent_proc_path):
            query['ParentProcPath'] = request.parent_proc_path
        if not UtilClient.is_unset(request.platform):
            query['Platform'] = request.platform
        if not UtilClient.is_unset(request.port):
            query['Port'] = request.port
        if not UtilClient.is_unset(request.port_str):
            query['PortStr'] = request.port_str
        if not UtilClient.is_unset(request.proc_path):
            query['ProcPath'] = request.proc_path
        if not UtilClient.is_unset(request.registry_content):
            query['RegistryContent'] = request.registry_content
        if not UtilClient.is_unset(request.registry_key):
            query['RegistryKey'] = request.registry_key
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddClientUserDefineRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddClientUserDefineRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def add_client_user_define_rule_with_options_async(
        self,
        request: sas_20181203_models.AddClientUserDefineRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddClientUserDefineRuleResponse:
        """
        @summary Creates a custom defense rule.
        
        @param request: AddClientUserDefineRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddClientUserDefineRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.action_type):
            query['ActionType'] = request.action_type
        if not UtilClient.is_unset(request.cmdline):
            query['Cmdline'] = request.cmdline
        if not UtilClient.is_unset(request.domain):
            query['Domain'] = request.domain
        if not UtilClient.is_unset(request.file_path):
            query['FilePath'] = request.file_path
        if not UtilClient.is_unset(request.ip):
            query['IP'] = request.ip
        if not UtilClient.is_unset(request.md_5list):
            query['Md5List'] = request.md_5list
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.new_file_path):
            query['NewFilePath'] = request.new_file_path
        if not UtilClient.is_unset(request.parent_cmdline):
            query['ParentCmdline'] = request.parent_cmdline
        if not UtilClient.is_unset(request.parent_proc_path):
            query['ParentProcPath'] = request.parent_proc_path
        if not UtilClient.is_unset(request.platform):
            query['Platform'] = request.platform
        if not UtilClient.is_unset(request.port):
            query['Port'] = request.port
        if not UtilClient.is_unset(request.port_str):
            query['PortStr'] = request.port_str
        if not UtilClient.is_unset(request.proc_path):
            query['ProcPath'] = request.proc_path
        if not UtilClient.is_unset(request.registry_content):
            query['RegistryContent'] = request.registry_content
        if not UtilClient.is_unset(request.registry_key):
            query['RegistryKey'] = request.registry_key
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddClientUserDefineRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddClientUserDefineRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def add_client_user_define_rule(
        self,
        request: sas_20181203_models.AddClientUserDefineRuleRequest,
    ) -> sas_20181203_models.AddClientUserDefineRuleResponse:
        """
        @summary Creates a custom defense rule.
        
        @param request: AddClientUserDefineRuleRequest
        @return: AddClientUserDefineRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.add_client_user_define_rule_with_options(request, runtime)

    async def add_client_user_define_rule_async(
        self,
        request: sas_20181203_models.AddClientUserDefineRuleRequest,
    ) -> sas_20181203_models.AddClientUserDefineRuleResponse:
        """
        @summary Creates a custom defense rule.
        
        @param request: AddClientUserDefineRuleRequest
        @return: AddClientUserDefineRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.add_client_user_define_rule_with_options_async(request, runtime)

    def add_cloud_vendor_account_akwith_options(
        self,
        request: sas_20181203_models.AddCloudVendorAccountAKRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddCloudVendorAccountAKResponse:
        """
        @summary Adds the configuration information of multi-cloud assets.
        
        @param request: AddCloudVendorAccountAKRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddCloudVendorAccountAKResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.ak_type):
            query['AkType'] = request.ak_type
        if not UtilClient.is_unset(request.auth_modules):
            query['AuthModules'] = request.auth_modules
        if not UtilClient.is_unset(request.ctdr_cloud_user_id):
            query['CtdrCloudUserId'] = request.ctdr_cloud_user_id
        if not UtilClient.is_unset(request.domain):
            query['Domain'] = request.domain
        if not UtilClient.is_unset(request.extend_info):
            query['ExtendInfo'] = request.extend_info
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.regions):
            query['Regions'] = request.regions
        if not UtilClient.is_unset(request.secret_id):
            query['SecretId'] = request.secret_id
        if not UtilClient.is_unset(request.secret_key):
            query['SecretKey'] = request.secret_key
        if not UtilClient.is_unset(request.subscription_ids):
            query['SubscriptionIds'] = request.subscription_ids
        if not UtilClient.is_unset(request.tenant_id):
            query['TenantId'] = request.tenant_id
        if not UtilClient.is_unset(request.vendor):
            query['Vendor'] = request.vendor
        if not UtilClient.is_unset(request.vendor_auth_alias):
            query['VendorAuthAlias'] = request.vendor_auth_alias
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddCloudVendorAccountAK',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddCloudVendorAccountAKResponse(),
            self.call_api(params, req, runtime)
        )

    async def add_cloud_vendor_account_akwith_options_async(
        self,
        request: sas_20181203_models.AddCloudVendorAccountAKRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddCloudVendorAccountAKResponse:
        """
        @summary Adds the configuration information of multi-cloud assets.
        
        @param request: AddCloudVendorAccountAKRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddCloudVendorAccountAKResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.ak_type):
            query['AkType'] = request.ak_type
        if not UtilClient.is_unset(request.auth_modules):
            query['AuthModules'] = request.auth_modules
        if not UtilClient.is_unset(request.ctdr_cloud_user_id):
            query['CtdrCloudUserId'] = request.ctdr_cloud_user_id
        if not UtilClient.is_unset(request.domain):
            query['Domain'] = request.domain
        if not UtilClient.is_unset(request.extend_info):
            query['ExtendInfo'] = request.extend_info
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.regions):
            query['Regions'] = request.regions
        if not UtilClient.is_unset(request.secret_id):
            query['SecretId'] = request.secret_id
        if not UtilClient.is_unset(request.secret_key):
            query['SecretKey'] = request.secret_key
        if not UtilClient.is_unset(request.subscription_ids):
            query['SubscriptionIds'] = request.subscription_ids
        if not UtilClient.is_unset(request.tenant_id):
            query['TenantId'] = request.tenant_id
        if not UtilClient.is_unset(request.vendor):
            query['Vendor'] = request.vendor
        if not UtilClient.is_unset(request.vendor_auth_alias):
            query['VendorAuthAlias'] = request.vendor_auth_alias
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddCloudVendorAccountAK',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddCloudVendorAccountAKResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def add_cloud_vendor_account_ak(
        self,
        request: sas_20181203_models.AddCloudVendorAccountAKRequest,
    ) -> sas_20181203_models.AddCloudVendorAccountAKResponse:
        """
        @summary Adds the configuration information of multi-cloud assets.
        
        @param request: AddCloudVendorAccountAKRequest
        @return: AddCloudVendorAccountAKResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.add_cloud_vendor_account_akwith_options(request, runtime)

    async def add_cloud_vendor_account_ak_async(
        self,
        request: sas_20181203_models.AddCloudVendorAccountAKRequest,
    ) -> sas_20181203_models.AddCloudVendorAccountAKResponse:
        """
        @summary Adds the configuration information of multi-cloud assets.
        
        @param request: AddCloudVendorAccountAKRequest
        @return: AddCloudVendorAccountAKResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.add_cloud_vendor_account_akwith_options_async(request, runtime)

    def add_cloud_vendor_trial_config_with_options(
        self,
        request: sas_20181203_models.AddCloudVendorTrialConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddCloudVendorTrialConfigResponse:
        """
        @summary Adds configurations of connecting the audit logs of a third-party cloud asset.
        
        @param request: AddCloudVendorTrialConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddCloudVendorTrialConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.auth_id):
            query['AuthId'] = request.auth_id
        if not UtilClient.is_unset(request.auth_info):
            query['AuthInfo'] = request.auth_info
        if not UtilClient.is_unset(request.vendor):
            query['Vendor'] = request.vendor
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddCloudVendorTrialConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddCloudVendorTrialConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def add_cloud_vendor_trial_config_with_options_async(
        self,
        request: sas_20181203_models.AddCloudVendorTrialConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddCloudVendorTrialConfigResponse:
        """
        @summary Adds configurations of connecting the audit logs of a third-party cloud asset.
        
        @param request: AddCloudVendorTrialConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddCloudVendorTrialConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.auth_id):
            query['AuthId'] = request.auth_id
        if not UtilClient.is_unset(request.auth_info):
            query['AuthInfo'] = request.auth_info
        if not UtilClient.is_unset(request.vendor):
            query['Vendor'] = request.vendor
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddCloudVendorTrialConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddCloudVendorTrialConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def add_cloud_vendor_trial_config(
        self,
        request: sas_20181203_models.AddCloudVendorTrialConfigRequest,
    ) -> sas_20181203_models.AddCloudVendorTrialConfigResponse:
        """
        @summary Adds configurations of connecting the audit logs of a third-party cloud asset.
        
        @param request: AddCloudVendorTrialConfigRequest
        @return: AddCloudVendorTrialConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.add_cloud_vendor_trial_config_with_options(request, runtime)

    async def add_cloud_vendor_trial_config_async(
        self,
        request: sas_20181203_models.AddCloudVendorTrialConfigRequest,
    ) -> sas_20181203_models.AddCloudVendorTrialConfigResponse:
        """
        @summary Adds configurations of connecting the audit logs of a third-party cloud asset.
        
        @param request: AddCloudVendorTrialConfigRequest
        @return: AddCloudVendorTrialConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.add_cloud_vendor_trial_config_with_options_async(request, runtime)

    def add_container_defense_rule_with_options(
        self,
        tmp_req: sas_20181203_models.AddContainerDefenseRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddContainerDefenseRuleResponse:
        """
        @summary Creates a rule for non-image program defense.
        
        @param tmp_req: AddContainerDefenseRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddContainerDefenseRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.AddContainerDefenseRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.whitelist):
            request.whitelist_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.whitelist, 'Whitelist', 'json')
        query = {}
        if not UtilClient.is_unset(request.description):
            query['Description'] = request.description
        if not UtilClient.is_unset(request.rule_action):
            query['RuleAction'] = request.rule_action
        if not UtilClient.is_unset(request.rule_id):
            query['RuleId'] = request.rule_id
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.rule_switch):
            query['RuleSwitch'] = request.rule_switch
        if not UtilClient.is_unset(request.rule_type):
            query['RuleType'] = request.rule_type
        if not UtilClient.is_unset(request.scope):
            query['Scope'] = request.scope
        if not UtilClient.is_unset(request.whitelist_shrink):
            query['Whitelist'] = request.whitelist_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddContainerDefenseRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddContainerDefenseRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def add_container_defense_rule_with_options_async(
        self,
        tmp_req: sas_20181203_models.AddContainerDefenseRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddContainerDefenseRuleResponse:
        """
        @summary Creates a rule for non-image program defense.
        
        @param tmp_req: AddContainerDefenseRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddContainerDefenseRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.AddContainerDefenseRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.whitelist):
            request.whitelist_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.whitelist, 'Whitelist', 'json')
        query = {}
        if not UtilClient.is_unset(request.description):
            query['Description'] = request.description
        if not UtilClient.is_unset(request.rule_action):
            query['RuleAction'] = request.rule_action
        if not UtilClient.is_unset(request.rule_id):
            query['RuleId'] = request.rule_id
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.rule_switch):
            query['RuleSwitch'] = request.rule_switch
        if not UtilClient.is_unset(request.rule_type):
            query['RuleType'] = request.rule_type
        if not UtilClient.is_unset(request.scope):
            query['Scope'] = request.scope
        if not UtilClient.is_unset(request.whitelist_shrink):
            query['Whitelist'] = request.whitelist_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddContainerDefenseRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddContainerDefenseRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def add_container_defense_rule(
        self,
        request: sas_20181203_models.AddContainerDefenseRuleRequest,
    ) -> sas_20181203_models.AddContainerDefenseRuleResponse:
        """
        @summary Creates a rule for non-image program defense.
        
        @param request: AddContainerDefenseRuleRequest
        @return: AddContainerDefenseRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.add_container_defense_rule_with_options(request, runtime)

    async def add_container_defense_rule_async(
        self,
        request: sas_20181203_models.AddContainerDefenseRuleRequest,
    ) -> sas_20181203_models.AddContainerDefenseRuleResponse:
        """
        @summary Creates a rule for non-image program defense.
        
        @param request: AddContainerDefenseRuleRequest
        @return: AddContainerDefenseRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.add_container_defense_rule_with_options_async(request, runtime)

    def add_container_plugin_rule_with_options(
        self,
        request: sas_20181203_models.AddContainerPluginRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddContainerPluginRuleResponse:
        """
        @summary Creates a defense rule against container escapes.
        
        @param request: AddContainerPluginRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddContainerPluginRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.mode):
            query['Mode'] = request.mode
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.rule_template_id):
            query['RuleTemplateId'] = request.rule_template_id
        if not UtilClient.is_unset(request.rule_type):
            query['RuleType'] = request.rule_type
        if not UtilClient.is_unset(request.selected_policy):
            query['SelectedPolicy'] = request.selected_policy
        if not UtilClient.is_unset(request.white_images):
            query['WhiteImages'] = request.white_images
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddContainerPluginRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddContainerPluginRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def add_container_plugin_rule_with_options_async(
        self,
        request: sas_20181203_models.AddContainerPluginRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddContainerPluginRuleResponse:
        """
        @summary Creates a defense rule against container escapes.
        
        @param request: AddContainerPluginRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddContainerPluginRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.mode):
            query['Mode'] = request.mode
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.rule_template_id):
            query['RuleTemplateId'] = request.rule_template_id
        if not UtilClient.is_unset(request.rule_type):
            query['RuleType'] = request.rule_type
        if not UtilClient.is_unset(request.selected_policy):
            query['SelectedPolicy'] = request.selected_policy
        if not UtilClient.is_unset(request.white_images):
            query['WhiteImages'] = request.white_images
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddContainerPluginRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddContainerPluginRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def add_container_plugin_rule(
        self,
        request: sas_20181203_models.AddContainerPluginRuleRequest,
    ) -> sas_20181203_models.AddContainerPluginRuleResponse:
        """
        @summary Creates a defense rule against container escapes.
        
        @param request: AddContainerPluginRuleRequest
        @return: AddContainerPluginRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.add_container_plugin_rule_with_options(request, runtime)

    async def add_container_plugin_rule_async(
        self,
        request: sas_20181203_models.AddContainerPluginRuleRequest,
    ) -> sas_20181203_models.AddContainerPluginRuleResponse:
        """
        @summary Creates a defense rule against container escapes.
        
        @param request: AddContainerPluginRuleRequest
        @return: AddContainerPluginRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.add_container_plugin_rule_with_options_async(request, runtime)

    def add_idc_probe_with_options(
        self,
        request: sas_20181203_models.AddIdcProbeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddIdcProbeResponse:
        """
        @summary Creates an IDC probe to add assets in a data center to Security Center and manage the assets by using the Security Center console.
        
        @description Security Center allows you to create an IDC probe only on servers on which the Security Center agent is installed.
        
        @param request: AddIdcProbeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddIdcProbeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.idc_name):
            query['IdcName'] = request.idc_name
        if not UtilClient.is_unset(request.idc_region):
            query['IdcRegion'] = request.idc_region
        if not UtilClient.is_unset(request.interval_period):
            query['IntervalPeriod'] = request.interval_period
        if not UtilClient.is_unset(request.ip_segments):
            query['IpSegments'] = request.ip_segments
        if not UtilClient.is_unset(request.linux_port):
            query['LinuxPort'] = request.linux_port
        if not UtilClient.is_unset(request.period_unit):
            query['PeriodUnit'] = request.period_unit
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        if not UtilClient.is_unset(request.win_port):
            query['WinPort'] = request.win_port
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddIdcProbe',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddIdcProbeResponse(),
            self.call_api(params, req, runtime)
        )

    async def add_idc_probe_with_options_async(
        self,
        request: sas_20181203_models.AddIdcProbeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddIdcProbeResponse:
        """
        @summary Creates an IDC probe to add assets in a data center to Security Center and manage the assets by using the Security Center console.
        
        @description Security Center allows you to create an IDC probe only on servers on which the Security Center agent is installed.
        
        @param request: AddIdcProbeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddIdcProbeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.idc_name):
            query['IdcName'] = request.idc_name
        if not UtilClient.is_unset(request.idc_region):
            query['IdcRegion'] = request.idc_region
        if not UtilClient.is_unset(request.interval_period):
            query['IntervalPeriod'] = request.interval_period
        if not UtilClient.is_unset(request.ip_segments):
            query['IpSegments'] = request.ip_segments
        if not UtilClient.is_unset(request.linux_port):
            query['LinuxPort'] = request.linux_port
        if not UtilClient.is_unset(request.period_unit):
            query['PeriodUnit'] = request.period_unit
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        if not UtilClient.is_unset(request.win_port):
            query['WinPort'] = request.win_port
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddIdcProbe',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddIdcProbeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def add_idc_probe(
        self,
        request: sas_20181203_models.AddIdcProbeRequest,
    ) -> sas_20181203_models.AddIdcProbeResponse:
        """
        @summary Creates an IDC probe to add assets in a data center to Security Center and manage the assets by using the Security Center console.
        
        @description Security Center allows you to create an IDC probe only on servers on which the Security Center agent is installed.
        
        @param request: AddIdcProbeRequest
        @return: AddIdcProbeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.add_idc_probe_with_options(request, runtime)

    async def add_idc_probe_async(
        self,
        request: sas_20181203_models.AddIdcProbeRequest,
    ) -> sas_20181203_models.AddIdcProbeResponse:
        """
        @summary Creates an IDC probe to add assets in a data center to Security Center and manage the assets by using the Security Center console.
        
        @description Security Center allows you to create an IDC probe only on servers on which the Security Center agent is installed.
        
        @param request: AddIdcProbeRequest
        @return: AddIdcProbeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.add_idc_probe_with_options_async(request, runtime)

    def add_image_event_operation_with_options(
        self,
        request: sas_20181203_models.AddImageEventOperationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddImageEventOperationResponse:
        """
        @summary Creates an alert handling rule.
        
        @param request: AddImageEventOperationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddImageEventOperationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.conditions):
            query['Conditions'] = request.conditions
        if not UtilClient.is_unset(request.event_key):
            query['EventKey'] = request.event_key
        if not UtilClient.is_unset(request.event_name):
            query['EventName'] = request.event_name
        if not UtilClient.is_unset(request.event_type):
            query['EventType'] = request.event_type
        if not UtilClient.is_unset(request.note):
            query['Note'] = request.note
        if not UtilClient.is_unset(request.operation_code):
            query['OperationCode'] = request.operation_code
        if not UtilClient.is_unset(request.scenarios):
            query['Scenarios'] = request.scenarios
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddImageEventOperation',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddImageEventOperationResponse(),
            self.call_api(params, req, runtime)
        )

    async def add_image_event_operation_with_options_async(
        self,
        request: sas_20181203_models.AddImageEventOperationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddImageEventOperationResponse:
        """
        @summary Creates an alert handling rule.
        
        @param request: AddImageEventOperationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddImageEventOperationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.conditions):
            query['Conditions'] = request.conditions
        if not UtilClient.is_unset(request.event_key):
            query['EventKey'] = request.event_key
        if not UtilClient.is_unset(request.event_name):
            query['EventName'] = request.event_name
        if not UtilClient.is_unset(request.event_type):
            query['EventType'] = request.event_type
        if not UtilClient.is_unset(request.note):
            query['Note'] = request.note
        if not UtilClient.is_unset(request.operation_code):
            query['OperationCode'] = request.operation_code
        if not UtilClient.is_unset(request.scenarios):
            query['Scenarios'] = request.scenarios
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddImageEventOperation',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddImageEventOperationResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def add_image_event_operation(
        self,
        request: sas_20181203_models.AddImageEventOperationRequest,
    ) -> sas_20181203_models.AddImageEventOperationResponse:
        """
        @summary Creates an alert handling rule.
        
        @param request: AddImageEventOperationRequest
        @return: AddImageEventOperationResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.add_image_event_operation_with_options(request, runtime)

    async def add_image_event_operation_async(
        self,
        request: sas_20181203_models.AddImageEventOperationRequest,
    ) -> sas_20181203_models.AddImageEventOperationResponse:
        """
        @summary Creates an alert handling rule.
        
        @param request: AddImageEventOperationRequest
        @return: AddImageEventOperationResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.add_image_event_operation_with_options_async(request, runtime)

    def add_image_vul_white_list_with_options(
        self,
        request: sas_20181203_models.AddImageVulWhiteListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddImageVulWhiteListResponse:
        """
        @summary Adds image vulnerabilities to the whitelist.
        
        @param request: AddImageVulWhiteListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddImageVulWhiteListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reason):
            query['Reason'] = request.reason
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.target):
            query['Target'] = request.target
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.whitelist):
            query['Whitelist'] = request.whitelist
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddImageVulWhiteList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddImageVulWhiteListResponse(),
            self.call_api(params, req, runtime)
        )

    async def add_image_vul_white_list_with_options_async(
        self,
        request: sas_20181203_models.AddImageVulWhiteListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddImageVulWhiteListResponse:
        """
        @summary Adds image vulnerabilities to the whitelist.
        
        @param request: AddImageVulWhiteListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddImageVulWhiteListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reason):
            query['Reason'] = request.reason
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.target):
            query['Target'] = request.target
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.whitelist):
            query['Whitelist'] = request.whitelist
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddImageVulWhiteList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddImageVulWhiteListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def add_image_vul_white_list(
        self,
        request: sas_20181203_models.AddImageVulWhiteListRequest,
    ) -> sas_20181203_models.AddImageVulWhiteListResponse:
        """
        @summary Adds image vulnerabilities to the whitelist.
        
        @param request: AddImageVulWhiteListRequest
        @return: AddImageVulWhiteListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.add_image_vul_white_list_with_options(request, runtime)

    async def add_image_vul_white_list_async(
        self,
        request: sas_20181203_models.AddImageVulWhiteListRequest,
    ) -> sas_20181203_models.AddImageVulWhiteListResponse:
        """
        @summary Adds image vulnerabilities to the whitelist.
        
        @param request: AddImageVulWhiteListRequest
        @return: AddImageVulWhiteListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.add_image_vul_white_list_with_options_async(request, runtime)

    def add_install_code_with_options(
        self,
        request: sas_20181203_models.AddInstallCodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddInstallCodeResponse:
        """
        @summary Creates a command that is used to install the Security Center agent.
        
        @param request: AddInstallCodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddInstallCodeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.expired_date):
            query['ExpiredDate'] = request.expired_date
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.only_image):
            query['OnlyImage'] = request.only_image
        if not UtilClient.is_unset(request.os):
            query['Os'] = request.os
        if not UtilClient.is_unset(request.private_link_id):
            query['PrivateLinkId'] = request.private_link_id
        if not UtilClient.is_unset(request.proxy_cluster):
            query['ProxyCluster'] = request.proxy_cluster
        if not UtilClient.is_unset(request.vendor_name):
            query['VendorName'] = request.vendor_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddInstallCode',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddInstallCodeResponse(),
            self.call_api(params, req, runtime)
        )

    async def add_install_code_with_options_async(
        self,
        request: sas_20181203_models.AddInstallCodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddInstallCodeResponse:
        """
        @summary Creates a command that is used to install the Security Center agent.
        
        @param request: AddInstallCodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddInstallCodeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.expired_date):
            query['ExpiredDate'] = request.expired_date
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.only_image):
            query['OnlyImage'] = request.only_image
        if not UtilClient.is_unset(request.os):
            query['Os'] = request.os
        if not UtilClient.is_unset(request.private_link_id):
            query['PrivateLinkId'] = request.private_link_id
        if not UtilClient.is_unset(request.proxy_cluster):
            query['ProxyCluster'] = request.proxy_cluster
        if not UtilClient.is_unset(request.vendor_name):
            query['VendorName'] = request.vendor_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddInstallCode',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddInstallCodeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def add_install_code(
        self,
        request: sas_20181203_models.AddInstallCodeRequest,
    ) -> sas_20181203_models.AddInstallCodeResponse:
        """
        @summary Creates a command that is used to install the Security Center agent.
        
        @param request: AddInstallCodeRequest
        @return: AddInstallCodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.add_install_code_with_options(request, runtime)

    async def add_install_code_async(
        self,
        request: sas_20181203_models.AddInstallCodeRequest,
    ) -> sas_20181203_models.AddInstallCodeResponse:
        """
        @summary Creates a command that is used to install the Security Center agent.
        
        @param request: AddInstallCodeRequest
        @return: AddInstallCodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.add_install_code_with_options_async(request, runtime)

    def add_private_registry_with_options(
        self,
        request: sas_20181203_models.AddPrivateRegistryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddPrivateRegistryResponse:
        """
        @summary Adds a self-managed image repository.
        
        @param request: AddPrivateRegistryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddPrivateRegistryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.domain_name):
            query['DomainName'] = request.domain_name
        if not UtilClient.is_unset(request.extra_param):
            query['ExtraParam'] = request.extra_param
        if not UtilClient.is_unset(request.net_type):
            query['NetType'] = request.net_type
        if not UtilClient.is_unset(request.password):
            query['Password'] = request.password
        if not UtilClient.is_unset(request.port):
            query['Port'] = request.port
        if not UtilClient.is_unset(request.protocol_type):
            query['ProtocolType'] = request.protocol_type
        if not UtilClient.is_unset(request.registry_host_ip):
            query['RegistryHostIp'] = request.registry_host_ip
        if not UtilClient.is_unset(request.registry_region_id):
            query['RegistryRegionId'] = request.registry_region_id
        if not UtilClient.is_unset(request.registry_type):
            query['RegistryType'] = request.registry_type
        if not UtilClient.is_unset(request.registry_version):
            query['RegistryVersion'] = request.registry_version
        if not UtilClient.is_unset(request.trans_per_hour):
            query['TransPerHour'] = request.trans_per_hour
        if not UtilClient.is_unset(request.user_name):
            query['UserName'] = request.user_name
        if not UtilClient.is_unset(request.vpc_id):
            query['VpcId'] = request.vpc_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddPrivateRegistry',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddPrivateRegistryResponse(),
            self.call_api(params, req, runtime)
        )

    async def add_private_registry_with_options_async(
        self,
        request: sas_20181203_models.AddPrivateRegistryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddPrivateRegistryResponse:
        """
        @summary Adds a self-managed image repository.
        
        @param request: AddPrivateRegistryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddPrivateRegistryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.domain_name):
            query['DomainName'] = request.domain_name
        if not UtilClient.is_unset(request.extra_param):
            query['ExtraParam'] = request.extra_param
        if not UtilClient.is_unset(request.net_type):
            query['NetType'] = request.net_type
        if not UtilClient.is_unset(request.password):
            query['Password'] = request.password
        if not UtilClient.is_unset(request.port):
            query['Port'] = request.port
        if not UtilClient.is_unset(request.protocol_type):
            query['ProtocolType'] = request.protocol_type
        if not UtilClient.is_unset(request.registry_host_ip):
            query['RegistryHostIp'] = request.registry_host_ip
        if not UtilClient.is_unset(request.registry_region_id):
            query['RegistryRegionId'] = request.registry_region_id
        if not UtilClient.is_unset(request.registry_type):
            query['RegistryType'] = request.registry_type
        if not UtilClient.is_unset(request.registry_version):
            query['RegistryVersion'] = request.registry_version
        if not UtilClient.is_unset(request.trans_per_hour):
            query['TransPerHour'] = request.trans_per_hour
        if not UtilClient.is_unset(request.user_name):
            query['UserName'] = request.user_name
        if not UtilClient.is_unset(request.vpc_id):
            query['VpcId'] = request.vpc_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddPrivateRegistry',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddPrivateRegistryResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def add_private_registry(
        self,
        request: sas_20181203_models.AddPrivateRegistryRequest,
    ) -> sas_20181203_models.AddPrivateRegistryResponse:
        """
        @summary Adds a self-managed image repository.
        
        @param request: AddPrivateRegistryRequest
        @return: AddPrivateRegistryResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.add_private_registry_with_options(request, runtime)

    async def add_private_registry_async(
        self,
        request: sas_20181203_models.AddPrivateRegistryRequest,
    ) -> sas_20181203_models.AddPrivateRegistryResponse:
        """
        @summary Adds a self-managed image repository.
        
        @param request: AddPrivateRegistryRequest
        @return: AddPrivateRegistryResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.add_private_registry_with_options_async(request, runtime)

    def add_protect_vpc_list_with_options(
        self,
        request: sas_20181203_models.AddProtectVpcListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddProtectVpcListResponse:
        """
        @summary Add or update the whitelist for VPC purchases
        
        @param request: AddProtectVpcListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddProtectVpcListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.add_vpc_instance_id_list):
            query['AddVpcInstanceIdList'] = request.add_vpc_instance_id_list
        if not UtilClient.is_unset(request.del_vpc_instance_id_list):
            query['DelVpcInstanceIdList'] = request.del_vpc_instance_id_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddProtectVpcList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddProtectVpcListResponse(),
            self.call_api(params, req, runtime)
        )

    async def add_protect_vpc_list_with_options_async(
        self,
        request: sas_20181203_models.AddProtectVpcListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddProtectVpcListResponse:
        """
        @summary Add or update the whitelist for VPC purchases
        
        @param request: AddProtectVpcListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddProtectVpcListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.add_vpc_instance_id_list):
            query['AddVpcInstanceIdList'] = request.add_vpc_instance_id_list
        if not UtilClient.is_unset(request.del_vpc_instance_id_list):
            query['DelVpcInstanceIdList'] = request.del_vpc_instance_id_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddProtectVpcList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddProtectVpcListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def add_protect_vpc_list(
        self,
        request: sas_20181203_models.AddProtectVpcListRequest,
    ) -> sas_20181203_models.AddProtectVpcListResponse:
        """
        @summary Add or update the whitelist for VPC purchases
        
        @param request: AddProtectVpcListRequest
        @return: AddProtectVpcListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.add_protect_vpc_list_with_options(request, runtime)

    async def add_protect_vpc_list_async(
        self,
        request: sas_20181203_models.AddProtectVpcListRequest,
    ) -> sas_20181203_models.AddProtectVpcListResponse:
        """
        @summary Add or update the whitelist for VPC purchases
        
        @param request: AddProtectVpcListRequest
        @return: AddProtectVpcListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.add_protect_vpc_list_with_options_async(request, runtime)

    def add_publish_batch_with_options(
        self,
        request: sas_20181203_models.AddPublishBatchRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddPublishBatchResponse:
        """
        @summary Upgrades the Security Center agent in batches.
        
        @param request: AddPublishBatchRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddPublishBatchResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.batch_name):
            query['BatchName'] = request.batch_name
        if not UtilClient.is_unset(request.interval):
            query['Interval'] = request.interval
        if not UtilClient.is_unset(request.operation_base):
            query['OperationBase'] = request.operation_base
        if not UtilClient.is_unset(request.upgrade_version):
            query['UpgradeVersion'] = request.upgrade_version
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddPublishBatch',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddPublishBatchResponse(),
            self.call_api(params, req, runtime)
        )

    async def add_publish_batch_with_options_async(
        self,
        request: sas_20181203_models.AddPublishBatchRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddPublishBatchResponse:
        """
        @summary Upgrades the Security Center agent in batches.
        
        @param request: AddPublishBatchRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddPublishBatchResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.batch_name):
            query['BatchName'] = request.batch_name
        if not UtilClient.is_unset(request.interval):
            query['Interval'] = request.interval
        if not UtilClient.is_unset(request.operation_base):
            query['OperationBase'] = request.operation_base
        if not UtilClient.is_unset(request.upgrade_version):
            query['UpgradeVersion'] = request.upgrade_version
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddPublishBatch',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddPublishBatchResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def add_publish_batch(
        self,
        request: sas_20181203_models.AddPublishBatchRequest,
    ) -> sas_20181203_models.AddPublishBatchResponse:
        """
        @summary Upgrades the Security Center agent in batches.
        
        @param request: AddPublishBatchRequest
        @return: AddPublishBatchResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.add_publish_batch_with_options(request, runtime)

    async def add_publish_batch_async(
        self,
        request: sas_20181203_models.AddPublishBatchRequest,
    ) -> sas_20181203_models.AddPublishBatchResponse:
        """
        @summary Upgrades the Security Center agent in batches.
        
        @param request: AddPublishBatchRequest
        @return: AddPublishBatchResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.add_publish_batch_with_options_async(request, runtime)

    def add_sas_container_web_defense_rule_with_options(
        self,
        request: sas_20181203_models.AddSasContainerWebDefenseRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddSasContainerWebDefenseRuleResponse:
        """
        @summary Creates a rule for container tamper-proofing.
        
        @param request: AddSasContainerWebDefenseRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddSasContainerWebDefenseRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.path_conf_dtolist):
            query['PathConfDTOList'] = request.path_conf_dtolist
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddSasContainerWebDefenseRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddSasContainerWebDefenseRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def add_sas_container_web_defense_rule_with_options_async(
        self,
        request: sas_20181203_models.AddSasContainerWebDefenseRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddSasContainerWebDefenseRuleResponse:
        """
        @summary Creates a rule for container tamper-proofing.
        
        @param request: AddSasContainerWebDefenseRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddSasContainerWebDefenseRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.path_conf_dtolist):
            query['PathConfDTOList'] = request.path_conf_dtolist
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddSasContainerWebDefenseRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddSasContainerWebDefenseRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def add_sas_container_web_defense_rule(
        self,
        request: sas_20181203_models.AddSasContainerWebDefenseRuleRequest,
    ) -> sas_20181203_models.AddSasContainerWebDefenseRuleResponse:
        """
        @summary Creates a rule for container tamper-proofing.
        
        @param request: AddSasContainerWebDefenseRuleRequest
        @return: AddSasContainerWebDefenseRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.add_sas_container_web_defense_rule_with_options(request, runtime)

    async def add_sas_container_web_defense_rule_async(
        self,
        request: sas_20181203_models.AddSasContainerWebDefenseRuleRequest,
    ) -> sas_20181203_models.AddSasContainerWebDefenseRuleResponse:
        """
        @summary Creates a rule for container tamper-proofing.
        
        @param request: AddSasContainerWebDefenseRuleRequest
        @return: AddSasContainerWebDefenseRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.add_sas_container_web_defense_rule_with_options_async(request, runtime)

    def add_sas_module_trial_with_options(
        self,
        request: sas_20181203_models.AddSasModuleTrialRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddSasModuleTrialResponse:
        """
        @summary Enables the trial use of Security Center value-added features, including vulnerability fixing and threat analysis and response.
        
        @param request: AddSasModuleTrialRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddSasModuleTrialResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.module_code):
            query['ModuleCode'] = request.module_code
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddSasModuleTrial',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddSasModuleTrialResponse(),
            self.call_api(params, req, runtime)
        )

    async def add_sas_module_trial_with_options_async(
        self,
        request: sas_20181203_models.AddSasModuleTrialRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddSasModuleTrialResponse:
        """
        @summary Enables the trial use of Security Center value-added features, including vulnerability fixing and threat analysis and response.
        
        @param request: AddSasModuleTrialRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddSasModuleTrialResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.module_code):
            query['ModuleCode'] = request.module_code
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddSasModuleTrial',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddSasModuleTrialResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def add_sas_module_trial(
        self,
        request: sas_20181203_models.AddSasModuleTrialRequest,
    ) -> sas_20181203_models.AddSasModuleTrialResponse:
        """
        @summary Enables the trial use of Security Center value-added features, including vulnerability fixing and threat analysis and response.
        
        @param request: AddSasModuleTrialRequest
        @return: AddSasModuleTrialResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.add_sas_module_trial_with_options(request, runtime)

    async def add_sas_module_trial_async(
        self,
        request: sas_20181203_models.AddSasModuleTrialRequest,
    ) -> sas_20181203_models.AddSasModuleTrialResponse:
        """
        @summary Enables the trial use of Security Center value-added features, including vulnerability fixing and threat analysis and response.
        
        @param request: AddSasModuleTrialRequest
        @return: AddSasModuleTrialResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.add_sas_module_trial_with_options_async(request, runtime)

    def add_tag_with_uuid_with_options(
        self,
        request: sas_20181203_models.AddTagWithUuidRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddTagWithUuidResponse:
        """
        @summary Adds a tag to assets.
        
        @description Security Center provides asset importance tags and custom tags. You can call the AddTagWithUuid operation to add only a custom tag to assets.
        
        @param request: AddTagWithUuidRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddTagWithUuidResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.tag_name):
            query['TagName'] = request.tag_name
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddTagWithUuid',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddTagWithUuidResponse(),
            self.call_api(params, req, runtime)
        )

    async def add_tag_with_uuid_with_options_async(
        self,
        request: sas_20181203_models.AddTagWithUuidRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddTagWithUuidResponse:
        """
        @summary Adds a tag to assets.
        
        @description Security Center provides asset importance tags and custom tags. You can call the AddTagWithUuid operation to add only a custom tag to assets.
        
        @param request: AddTagWithUuidRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddTagWithUuidResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.tag_name):
            query['TagName'] = request.tag_name
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddTagWithUuid',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddTagWithUuidResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def add_tag_with_uuid(
        self,
        request: sas_20181203_models.AddTagWithUuidRequest,
    ) -> sas_20181203_models.AddTagWithUuidResponse:
        """
        @summary Adds a tag to assets.
        
        @description Security Center provides asset importance tags and custom tags. You can call the AddTagWithUuid operation to add only a custom tag to assets.
        
        @param request: AddTagWithUuidRequest
        @return: AddTagWithUuidResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.add_tag_with_uuid_with_options(request, runtime)

    async def add_tag_with_uuid_async(
        self,
        request: sas_20181203_models.AddTagWithUuidRequest,
    ) -> sas_20181203_models.AddTagWithUuidResponse:
        """
        @summary Adds a tag to assets.
        
        @description Security Center provides asset importance tags and custom tags. You can call the AddTagWithUuid operation to add only a custom tag to assets.
        
        @param request: AddTagWithUuidRequest
        @return: AddTagWithUuidResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.add_tag_with_uuid_with_options_async(request, runtime)

    def add_uninstall_clients_by_uuids_with_options(
        self,
        request: sas_20181203_models.AddUninstallClientsByUuidsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddUninstallClientsByUuidsResponse:
        """
        @summary Adds servers from which you want to uninstall the Security Center agent.
        
        @param request: AddUninstallClientsByUuidsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddUninstallClientsByUuidsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.call_method):
            query['CallMethod'] = request.call_method
        if not UtilClient.is_unset(request.feedback):
            query['Feedback'] = request.feedback
        if not UtilClient.is_unset(request.region):
            query['Region'] = request.region
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddUninstallClientsByUuids',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddUninstallClientsByUuidsResponse(),
            self.call_api(params, req, runtime)
        )

    async def add_uninstall_clients_by_uuids_with_options_async(
        self,
        request: sas_20181203_models.AddUninstallClientsByUuidsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddUninstallClientsByUuidsResponse:
        """
        @summary Adds servers from which you want to uninstall the Security Center agent.
        
        @param request: AddUninstallClientsByUuidsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddUninstallClientsByUuidsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.call_method):
            query['CallMethod'] = request.call_method
        if not UtilClient.is_unset(request.feedback):
            query['Feedback'] = request.feedback
        if not UtilClient.is_unset(request.region):
            query['Region'] = request.region
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddUninstallClientsByUuids',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddUninstallClientsByUuidsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def add_uninstall_clients_by_uuids(
        self,
        request: sas_20181203_models.AddUninstallClientsByUuidsRequest,
    ) -> sas_20181203_models.AddUninstallClientsByUuidsResponse:
        """
        @summary Adds servers from which you want to uninstall the Security Center agent.
        
        @param request: AddUninstallClientsByUuidsRequest
        @return: AddUninstallClientsByUuidsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.add_uninstall_clients_by_uuids_with_options(request, runtime)

    async def add_uninstall_clients_by_uuids_async(
        self,
        request: sas_20181203_models.AddUninstallClientsByUuidsRequest,
    ) -> sas_20181203_models.AddUninstallClientsByUuidsResponse:
        """
        @summary Adds servers from which you want to uninstall the Security Center agent.
        
        @param request: AddUninstallClientsByUuidsRequest
        @return: AddUninstallClientsByUuidsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.add_uninstall_clients_by_uuids_with_options_async(request, runtime)

    def add_vpc_honey_pot_with_options(
        self,
        request: sas_20181203_models.AddVpcHoneyPotRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddVpcHoneyPotResponse:
        """
        @summary Creates a honeypot.
        
        @param request: AddVpcHoneyPotRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddVpcHoneyPotResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.vpc_id):
            query['VpcId'] = request.vpc_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddVpcHoneyPot',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddVpcHoneyPotResponse(),
            self.call_api(params, req, runtime)
        )

    async def add_vpc_honey_pot_with_options_async(
        self,
        request: sas_20181203_models.AddVpcHoneyPotRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AddVpcHoneyPotResponse:
        """
        @summary Creates a honeypot.
        
        @param request: AddVpcHoneyPotRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddVpcHoneyPotResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.vpc_id):
            query['VpcId'] = request.vpc_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddVpcHoneyPot',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AddVpcHoneyPotResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def add_vpc_honey_pot(
        self,
        request: sas_20181203_models.AddVpcHoneyPotRequest,
    ) -> sas_20181203_models.AddVpcHoneyPotResponse:
        """
        @summary Creates a honeypot.
        
        @param request: AddVpcHoneyPotRequest
        @return: AddVpcHoneyPotResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.add_vpc_honey_pot_with_options(request, runtime)

    async def add_vpc_honey_pot_async(
        self,
        request: sas_20181203_models.AddVpcHoneyPotRequest,
    ) -> sas_20181203_models.AddVpcHoneyPotResponse:
        """
        @summary Creates a honeypot.
        
        @param request: AddVpcHoneyPotRequest
        @return: AddVpcHoneyPotResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.add_vpc_honey_pot_with_options_async(request, runtime)

    def advance_security_event_operations_with_options(
        self,
        request: sas_20181203_models.AdvanceSecurityEventOperationsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AdvanceSecurityEventOperationsResponse:
        """
        @summary Queries the configurations of an advanced whitelist rule.
        
        @param request: AdvanceSecurityEventOperationsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AdvanceSecurityEventOperationsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.event_name):
            query['EventName'] = request.event_name
        if not UtilClient.is_unset(request.event_type):
            query['EventType'] = request.event_type
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.rule_id):
            query['RuleId'] = request.rule_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AdvanceSecurityEventOperations',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AdvanceSecurityEventOperationsResponse(),
            self.call_api(params, req, runtime)
        )

    async def advance_security_event_operations_with_options_async(
        self,
        request: sas_20181203_models.AdvanceSecurityEventOperationsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.AdvanceSecurityEventOperationsResponse:
        """
        @summary Queries the configurations of an advanced whitelist rule.
        
        @param request: AdvanceSecurityEventOperationsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AdvanceSecurityEventOperationsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.event_name):
            query['EventName'] = request.event_name
        if not UtilClient.is_unset(request.event_type):
            query['EventType'] = request.event_type
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.rule_id):
            query['RuleId'] = request.rule_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AdvanceSecurityEventOperations',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.AdvanceSecurityEventOperationsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def advance_security_event_operations(
        self,
        request: sas_20181203_models.AdvanceSecurityEventOperationsRequest,
    ) -> sas_20181203_models.AdvanceSecurityEventOperationsResponse:
        """
        @summary Queries the configurations of an advanced whitelist rule.
        
        @param request: AdvanceSecurityEventOperationsRequest
        @return: AdvanceSecurityEventOperationsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.advance_security_event_operations_with_options(request, runtime)

    async def advance_security_event_operations_async(
        self,
        request: sas_20181203_models.AdvanceSecurityEventOperationsRequest,
    ) -> sas_20181203_models.AdvanceSecurityEventOperationsResponse:
        """
        @summary Queries the configurations of an advanced whitelist rule.
        
        @param request: AdvanceSecurityEventOperationsRequest
        @return: AdvanceSecurityEventOperationsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.advance_security_event_operations_with_options_async(request, runtime)

    def batch_create_malicious_note_with_options(
        self,
        request: sas_20181203_models.BatchCreateMaliciousNoteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.BatchCreateMaliciousNoteResponse:
        """
        @summary Adds alert description in batches.
        
        @param request: BatchCreateMaliciousNoteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: BatchCreateMaliciousNoteResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.image_malicious_file_list):
            query['ImageMaliciousFileList'] = request.image_malicious_file_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='BatchCreateMaliciousNote',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.BatchCreateMaliciousNoteResponse(),
            self.call_api(params, req, runtime)
        )

    async def batch_create_malicious_note_with_options_async(
        self,
        request: sas_20181203_models.BatchCreateMaliciousNoteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.BatchCreateMaliciousNoteResponse:
        """
        @summary Adds alert description in batches.
        
        @param request: BatchCreateMaliciousNoteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: BatchCreateMaliciousNoteResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.image_malicious_file_list):
            query['ImageMaliciousFileList'] = request.image_malicious_file_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='BatchCreateMaliciousNote',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.BatchCreateMaliciousNoteResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def batch_create_malicious_note(
        self,
        request: sas_20181203_models.BatchCreateMaliciousNoteRequest,
    ) -> sas_20181203_models.BatchCreateMaliciousNoteResponse:
        """
        @summary Adds alert description in batches.
        
        @param request: BatchCreateMaliciousNoteRequest
        @return: BatchCreateMaliciousNoteResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.batch_create_malicious_note_with_options(request, runtime)

    async def batch_create_malicious_note_async(
        self,
        request: sas_20181203_models.BatchCreateMaliciousNoteRequest,
    ) -> sas_20181203_models.BatchCreateMaliciousNoteResponse:
        """
        @summary Adds alert description in batches.
        
        @param request: BatchCreateMaliciousNoteRequest
        @return: BatchCreateMaliciousNoteResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.batch_create_malicious_note_with_options_async(request, runtime)

    def batch_delete_malicious_file_whitelist_config_with_options(
        self,
        request: sas_20181203_models.BatchDeleteMaliciousFileWhitelistConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.BatchDeleteMaliciousFileWhitelistConfigResponse:
        """
        @summary Deletes whitelist rules for alerts generated for sensitive files that are detected by using the agentless detection feature in batches.
        
        @param request: BatchDeleteMaliciousFileWhitelistConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: BatchDeleteMaliciousFileWhitelistConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id_list):
            query['ConfigIdList'] = request.config_id_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='BatchDeleteMaliciousFileWhitelistConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.BatchDeleteMaliciousFileWhitelistConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def batch_delete_malicious_file_whitelist_config_with_options_async(
        self,
        request: sas_20181203_models.BatchDeleteMaliciousFileWhitelistConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.BatchDeleteMaliciousFileWhitelistConfigResponse:
        """
        @summary Deletes whitelist rules for alerts generated for sensitive files that are detected by using the agentless detection feature in batches.
        
        @param request: BatchDeleteMaliciousFileWhitelistConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: BatchDeleteMaliciousFileWhitelistConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id_list):
            query['ConfigIdList'] = request.config_id_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='BatchDeleteMaliciousFileWhitelistConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.BatchDeleteMaliciousFileWhitelistConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def batch_delete_malicious_file_whitelist_config(
        self,
        request: sas_20181203_models.BatchDeleteMaliciousFileWhitelistConfigRequest,
    ) -> sas_20181203_models.BatchDeleteMaliciousFileWhitelistConfigResponse:
        """
        @summary Deletes whitelist rules for alerts generated for sensitive files that are detected by using the agentless detection feature in batches.
        
        @param request: BatchDeleteMaliciousFileWhitelistConfigRequest
        @return: BatchDeleteMaliciousFileWhitelistConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.batch_delete_malicious_file_whitelist_config_with_options(request, runtime)

    async def batch_delete_malicious_file_whitelist_config_async(
        self,
        request: sas_20181203_models.BatchDeleteMaliciousFileWhitelistConfigRequest,
    ) -> sas_20181203_models.BatchDeleteMaliciousFileWhitelistConfigResponse:
        """
        @summary Deletes whitelist rules for alerts generated for sensitive files that are detected by using the agentless detection feature in batches.
        
        @param request: BatchDeleteMaliciousFileWhitelistConfigRequest
        @return: BatchDeleteMaliciousFileWhitelistConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.batch_delete_malicious_file_whitelist_config_with_options_async(request, runtime)

    def batch_operate_common_overall_config_with_options(
        self,
        request: sas_20181203_models.BatchOperateCommonOverallConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.BatchOperateCommonOverallConfigResponse:
        """
        @summary Enables or disables multiple features in proactive defense at a time.
        
        @param request: BatchOperateCommonOverallConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: BatchOperateCommonOverallConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config):
            query['Config'] = request.config
        if not UtilClient.is_unset(request.type_list):
            query['TypeList'] = request.type_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='BatchOperateCommonOverallConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.BatchOperateCommonOverallConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def batch_operate_common_overall_config_with_options_async(
        self,
        request: sas_20181203_models.BatchOperateCommonOverallConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.BatchOperateCommonOverallConfigResponse:
        """
        @summary Enables or disables multiple features in proactive defense at a time.
        
        @param request: BatchOperateCommonOverallConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: BatchOperateCommonOverallConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config):
            query['Config'] = request.config
        if not UtilClient.is_unset(request.type_list):
            query['TypeList'] = request.type_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='BatchOperateCommonOverallConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.BatchOperateCommonOverallConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def batch_operate_common_overall_config(
        self,
        request: sas_20181203_models.BatchOperateCommonOverallConfigRequest,
    ) -> sas_20181203_models.BatchOperateCommonOverallConfigResponse:
        """
        @summary Enables or disables multiple features in proactive defense at a time.
        
        @param request: BatchOperateCommonOverallConfigRequest
        @return: BatchOperateCommonOverallConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.batch_operate_common_overall_config_with_options(request, runtime)

    async def batch_operate_common_overall_config_async(
        self,
        request: sas_20181203_models.BatchOperateCommonOverallConfigRequest,
    ) -> sas_20181203_models.BatchOperateCommonOverallConfigResponse:
        """
        @summary Enables or disables multiple features in proactive defense at a time.
        
        @param request: BatchOperateCommonOverallConfigRequest
        @return: BatchOperateCommonOverallConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.batch_operate_common_overall_config_with_options_async(request, runtime)

    def batch_update_malicious_file_whitelist_config_with_options(
        self,
        request: sas_20181203_models.BatchUpdateMaliciousFileWhitelistConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.BatchUpdateMaliciousFileWhitelistConfigResponse:
        """
        @summary Modifies multiple alert whitelist rules of sensitive files that are detected by using the agentless detection feature at a time.
        
        @param request: BatchUpdateMaliciousFileWhitelistConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: BatchUpdateMaliciousFileWhitelistConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_list):
            query['ConfigList'] = request.config_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='BatchUpdateMaliciousFileWhitelistConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.BatchUpdateMaliciousFileWhitelistConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def batch_update_malicious_file_whitelist_config_with_options_async(
        self,
        request: sas_20181203_models.BatchUpdateMaliciousFileWhitelistConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.BatchUpdateMaliciousFileWhitelistConfigResponse:
        """
        @summary Modifies multiple alert whitelist rules of sensitive files that are detected by using the agentless detection feature at a time.
        
        @param request: BatchUpdateMaliciousFileWhitelistConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: BatchUpdateMaliciousFileWhitelistConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_list):
            query['ConfigList'] = request.config_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='BatchUpdateMaliciousFileWhitelistConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.BatchUpdateMaliciousFileWhitelistConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def batch_update_malicious_file_whitelist_config(
        self,
        request: sas_20181203_models.BatchUpdateMaliciousFileWhitelistConfigRequest,
    ) -> sas_20181203_models.BatchUpdateMaliciousFileWhitelistConfigResponse:
        """
        @summary Modifies multiple alert whitelist rules of sensitive files that are detected by using the agentless detection feature at a time.
        
        @param request: BatchUpdateMaliciousFileWhitelistConfigRequest
        @return: BatchUpdateMaliciousFileWhitelistConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.batch_update_malicious_file_whitelist_config_with_options(request, runtime)

    async def batch_update_malicious_file_whitelist_config_async(
        self,
        request: sas_20181203_models.BatchUpdateMaliciousFileWhitelistConfigRequest,
    ) -> sas_20181203_models.BatchUpdateMaliciousFileWhitelistConfigResponse:
        """
        @summary Modifies multiple alert whitelist rules of sensitive files that are detected by using the agentless detection feature at a time.
        
        @param request: BatchUpdateMaliciousFileWhitelistConfigRequest
        @return: BatchUpdateMaliciousFileWhitelistConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.batch_update_malicious_file_whitelist_config_with_options_async(request, runtime)

    def bind_auth_to_machine_with_options(
        self,
        request: sas_20181203_models.BindAuthToMachineRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.BindAuthToMachineResponse:
        """
        @summary Binds servers to Security Center or unbinds servers from Security Center.
        
        @param request: BindAuthToMachineRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: BindAuthToMachineResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.auth_version):
            query['AuthVersion'] = request.auth_version
        if not UtilClient.is_unset(request.auto_bind):
            query['AutoBind'] = request.auto_bind
        if not UtilClient.is_unset(request.bind):
            query['Bind'] = request.bind
        if not UtilClient.is_unset(request.bind_all):
            query['BindAll'] = request.bind_all
        if not UtilClient.is_unset(request.criteria):
            query['Criteria'] = request.criteria
        if not UtilClient.is_unset(request.is_pre_bind):
            query['IsPreBind'] = request.is_pre_bind
        if not UtilClient.is_unset(request.logical_exp):
            query['LogicalExp'] = request.logical_exp
        if not UtilClient.is_unset(request.ntm_version):
            query['NtmVersion'] = request.ntm_version
        if not UtilClient.is_unset(request.pre_bind_order_id):
            query['PreBindOrderId'] = request.pre_bind_order_id
        if not UtilClient.is_unset(request.un_bind):
            query['UnBind'] = request.un_bind
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='BindAuthToMachine',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.BindAuthToMachineResponse(),
            self.call_api(params, req, runtime)
        )

    async def bind_auth_to_machine_with_options_async(
        self,
        request: sas_20181203_models.BindAuthToMachineRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.BindAuthToMachineResponse:
        """
        @summary Binds servers to Security Center or unbinds servers from Security Center.
        
        @param request: BindAuthToMachineRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: BindAuthToMachineResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.auth_version):
            query['AuthVersion'] = request.auth_version
        if not UtilClient.is_unset(request.auto_bind):
            query['AutoBind'] = request.auto_bind
        if not UtilClient.is_unset(request.bind):
            query['Bind'] = request.bind
        if not UtilClient.is_unset(request.bind_all):
            query['BindAll'] = request.bind_all
        if not UtilClient.is_unset(request.criteria):
            query['Criteria'] = request.criteria
        if not UtilClient.is_unset(request.is_pre_bind):
            query['IsPreBind'] = request.is_pre_bind
        if not UtilClient.is_unset(request.logical_exp):
            query['LogicalExp'] = request.logical_exp
        if not UtilClient.is_unset(request.ntm_version):
            query['NtmVersion'] = request.ntm_version
        if not UtilClient.is_unset(request.pre_bind_order_id):
            query['PreBindOrderId'] = request.pre_bind_order_id
        if not UtilClient.is_unset(request.un_bind):
            query['UnBind'] = request.un_bind
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='BindAuthToMachine',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.BindAuthToMachineResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def bind_auth_to_machine(
        self,
        request: sas_20181203_models.BindAuthToMachineRequest,
    ) -> sas_20181203_models.BindAuthToMachineResponse:
        """
        @summary Binds servers to Security Center or unbinds servers from Security Center.
        
        @param request: BindAuthToMachineRequest
        @return: BindAuthToMachineResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.bind_auth_to_machine_with_options(request, runtime)

    async def bind_auth_to_machine_async(
        self,
        request: sas_20181203_models.BindAuthToMachineRequest,
    ) -> sas_20181203_models.BindAuthToMachineResponse:
        """
        @summary Binds servers to Security Center or unbinds servers from Security Center.
        
        @param request: BindAuthToMachineRequest
        @return: BindAuthToMachineResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.bind_auth_to_machine_with_options_async(request, runtime)

    def bind_hybrid_proxy_with_options(
        self,
        request: sas_20181203_models.BindHybridProxyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.BindHybridProxyResponse:
        """
        @summary Adds servers to Security Center over a proxy server. After you create a proxy cluster and deploy a proxy server, you can connect a server to the proxy cluster as a client. This way, the server is added to Security Center over the proxy server and is protected.
        
        @param request: BindHybridProxyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: BindHybridProxyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.yundun_uuids):
            query['YundunUuids'] = request.yundun_uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='BindHybridProxy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.BindHybridProxyResponse(),
            self.call_api(params, req, runtime)
        )

    async def bind_hybrid_proxy_with_options_async(
        self,
        request: sas_20181203_models.BindHybridProxyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.BindHybridProxyResponse:
        """
        @summary Adds servers to Security Center over a proxy server. After you create a proxy cluster and deploy a proxy server, you can connect a server to the proxy cluster as a client. This way, the server is added to Security Center over the proxy server and is protected.
        
        @param request: BindHybridProxyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: BindHybridProxyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.yundun_uuids):
            query['YundunUuids'] = request.yundun_uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='BindHybridProxy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.BindHybridProxyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def bind_hybrid_proxy(
        self,
        request: sas_20181203_models.BindHybridProxyRequest,
    ) -> sas_20181203_models.BindHybridProxyResponse:
        """
        @summary Adds servers to Security Center over a proxy server. After you create a proxy cluster and deploy a proxy server, you can connect a server to the proxy cluster as a client. This way, the server is added to Security Center over the proxy server and is protected.
        
        @param request: BindHybridProxyRequest
        @return: BindHybridProxyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.bind_hybrid_proxy_with_options(request, runtime)

    async def bind_hybrid_proxy_async(
        self,
        request: sas_20181203_models.BindHybridProxyRequest,
    ) -> sas_20181203_models.BindHybridProxyResponse:
        """
        @summary Adds servers to Security Center over a proxy server. After you create a proxy cluster and deploy a proxy server, you can connect a server to the proxy cluster as a client. This way, the server is added to Security Center over the proxy server and is protected.
        
        @param request: BindHybridProxyRequest
        @return: BindHybridProxyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.bind_hybrid_proxy_with_options_async(request, runtime)

    def cancel_once_task_with_options(
        self,
        request: sas_20181203_models.CancelOnceTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CancelOnceTaskResponse:
        """
        @summary Cancels the main task.
        
        @param request: CancelOnceTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CancelOnceTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.task_id):
            query['TaskId'] = request.task_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CancelOnceTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CancelOnceTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def cancel_once_task_with_options_async(
        self,
        request: sas_20181203_models.CancelOnceTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CancelOnceTaskResponse:
        """
        @summary Cancels the main task.
        
        @param request: CancelOnceTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CancelOnceTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.task_id):
            query['TaskId'] = request.task_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CancelOnceTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CancelOnceTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def cancel_once_task(
        self,
        request: sas_20181203_models.CancelOnceTaskRequest,
    ) -> sas_20181203_models.CancelOnceTaskResponse:
        """
        @summary Cancels the main task.
        
        @param request: CancelOnceTaskRequest
        @return: CancelOnceTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.cancel_once_task_with_options(request, runtime)

    async def cancel_once_task_async(
        self,
        request: sas_20181203_models.CancelOnceTaskRequest,
    ) -> sas_20181203_models.CancelOnceTaskResponse:
        """
        @summary Cancels the main task.
        
        @param request: CancelOnceTaskRequest
        @return: CancelOnceTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.cancel_once_task_with_options_async(request, runtime)

    def change_asset_refresh_task_config_with_options(
        self,
        request: sas_20181203_models.ChangeAssetRefreshTaskConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ChangeAssetRefreshTaskConfigResponse:
        """
        @summary Modifies the interval of asset synchronization configurations.
        
        @param request: ChangeAssetRefreshTaskConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ChangeAssetRefreshTaskConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.asset_refresh_configs):
            query['AssetRefreshConfigs'] = request.asset_refresh_configs
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ChangeAssetRefreshTaskConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ChangeAssetRefreshTaskConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def change_asset_refresh_task_config_with_options_async(
        self,
        request: sas_20181203_models.ChangeAssetRefreshTaskConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ChangeAssetRefreshTaskConfigResponse:
        """
        @summary Modifies the interval of asset synchronization configurations.
        
        @param request: ChangeAssetRefreshTaskConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ChangeAssetRefreshTaskConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.asset_refresh_configs):
            query['AssetRefreshConfigs'] = request.asset_refresh_configs
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ChangeAssetRefreshTaskConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ChangeAssetRefreshTaskConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def change_asset_refresh_task_config(
        self,
        request: sas_20181203_models.ChangeAssetRefreshTaskConfigRequest,
    ) -> sas_20181203_models.ChangeAssetRefreshTaskConfigResponse:
        """
        @summary Modifies the interval of asset synchronization configurations.
        
        @param request: ChangeAssetRefreshTaskConfigRequest
        @return: ChangeAssetRefreshTaskConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.change_asset_refresh_task_config_with_options(request, runtime)

    async def change_asset_refresh_task_config_async(
        self,
        request: sas_20181203_models.ChangeAssetRefreshTaskConfigRequest,
    ) -> sas_20181203_models.ChangeAssetRefreshTaskConfigResponse:
        """
        @summary Modifies the interval of asset synchronization configurations.
        
        @param request: ChangeAssetRefreshTaskConfigRequest
        @return: ChangeAssetRefreshTaskConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.change_asset_refresh_task_config_with_options_async(request, runtime)

    def change_check_config_with_options(
        self,
        tmp_req: sas_20181203_models.ChangeCheckConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ChangeCheckConfigResponse:
        """
        @summary Modifies the configuration items of the configuration assessment feature.
        
        @param tmp_req: ChangeCheckConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ChangeCheckConfigResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.ChangeCheckConfigShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.config_requirement_ids):
            request.config_requirement_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.config_requirement_ids, 'ConfigRequirementIds', 'json')
        if not UtilClient.is_unset(tmp_req.config_standard_ids):
            request.config_standard_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.config_standard_ids, 'ConfigStandardIds', 'json')
        query = {}
        if not UtilClient.is_unset(request.added_check):
            query['AddedCheck'] = request.added_check
        if not UtilClient.is_unset(request.config_requirement_ids_shrink):
            query['ConfigRequirementIds'] = request.config_requirement_ids_shrink
        if not UtilClient.is_unset(request.config_standard_ids_shrink):
            query['ConfigStandardIds'] = request.config_standard_ids_shrink
        if not UtilClient.is_unset(request.configure):
            query['Configure'] = request.configure
        if not UtilClient.is_unset(request.cycle_days):
            query['CycleDays'] = request.cycle_days
        if not UtilClient.is_unset(request.enable_add_check):
            query['EnableAddCheck'] = request.enable_add_check
        if not UtilClient.is_unset(request.enable_auto_check):
            query['EnableAutoCheck'] = request.enable_auto_check
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        if not UtilClient.is_unset(request.removed_check):
            query['RemovedCheck'] = request.removed_check
        if not UtilClient.is_unset(request.standard_ids):
            query['StandardIds'] = request.standard_ids
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.system_config):
            query['SystemConfig'] = request.system_config
        if not UtilClient.is_unset(request.vendors):
            query['Vendors'] = request.vendors
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ChangeCheckConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ChangeCheckConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def change_check_config_with_options_async(
        self,
        tmp_req: sas_20181203_models.ChangeCheckConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ChangeCheckConfigResponse:
        """
        @summary Modifies the configuration items of the configuration assessment feature.
        
        @param tmp_req: ChangeCheckConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ChangeCheckConfigResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.ChangeCheckConfigShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.config_requirement_ids):
            request.config_requirement_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.config_requirement_ids, 'ConfigRequirementIds', 'json')
        if not UtilClient.is_unset(tmp_req.config_standard_ids):
            request.config_standard_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.config_standard_ids, 'ConfigStandardIds', 'json')
        query = {}
        if not UtilClient.is_unset(request.added_check):
            query['AddedCheck'] = request.added_check
        if not UtilClient.is_unset(request.config_requirement_ids_shrink):
            query['ConfigRequirementIds'] = request.config_requirement_ids_shrink
        if not UtilClient.is_unset(request.config_standard_ids_shrink):
            query['ConfigStandardIds'] = request.config_standard_ids_shrink
        if not UtilClient.is_unset(request.configure):
            query['Configure'] = request.configure
        if not UtilClient.is_unset(request.cycle_days):
            query['CycleDays'] = request.cycle_days
        if not UtilClient.is_unset(request.enable_add_check):
            query['EnableAddCheck'] = request.enable_add_check
        if not UtilClient.is_unset(request.enable_auto_check):
            query['EnableAutoCheck'] = request.enable_auto_check
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        if not UtilClient.is_unset(request.removed_check):
            query['RemovedCheck'] = request.removed_check
        if not UtilClient.is_unset(request.standard_ids):
            query['StandardIds'] = request.standard_ids
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.system_config):
            query['SystemConfig'] = request.system_config
        if not UtilClient.is_unset(request.vendors):
            query['Vendors'] = request.vendors
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ChangeCheckConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ChangeCheckConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def change_check_config(
        self,
        request: sas_20181203_models.ChangeCheckConfigRequest,
    ) -> sas_20181203_models.ChangeCheckConfigResponse:
        """
        @summary Modifies the configuration items of the configuration assessment feature.
        
        @param request: ChangeCheckConfigRequest
        @return: ChangeCheckConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.change_check_config_with_options(request, runtime)

    async def change_check_config_async(
        self,
        request: sas_20181203_models.ChangeCheckConfigRequest,
    ) -> sas_20181203_models.ChangeCheckConfigResponse:
        """
        @summary Modifies the configuration items of the configuration assessment feature.
        
        @param request: ChangeCheckConfigRequest
        @return: ChangeCheckConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.change_check_config_with_options_async(request, runtime)

    def change_check_custom_config_with_options(
        self,
        request: sas_20181203_models.ChangeCheckCustomConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ChangeCheckCustomConfigResponse:
        """
        @summary Modifies the custom configuration items of a check item.
        
        @param request: ChangeCheckCustomConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ChangeCheckCustomConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_id):
            query['CheckId'] = request.check_id
        if not UtilClient.is_unset(request.custom_configs):
            query['CustomConfigs'] = request.custom_configs
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        if not UtilClient.is_unset(request.repair_configs):
            query['RepairConfigs'] = request.repair_configs
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ChangeCheckCustomConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ChangeCheckCustomConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def change_check_custom_config_with_options_async(
        self,
        request: sas_20181203_models.ChangeCheckCustomConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ChangeCheckCustomConfigResponse:
        """
        @summary Modifies the custom configuration items of a check item.
        
        @param request: ChangeCheckCustomConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ChangeCheckCustomConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_id):
            query['CheckId'] = request.check_id
        if not UtilClient.is_unset(request.custom_configs):
            query['CustomConfigs'] = request.custom_configs
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        if not UtilClient.is_unset(request.repair_configs):
            query['RepairConfigs'] = request.repair_configs
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ChangeCheckCustomConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ChangeCheckCustomConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def change_check_custom_config(
        self,
        request: sas_20181203_models.ChangeCheckCustomConfigRequest,
    ) -> sas_20181203_models.ChangeCheckCustomConfigResponse:
        """
        @summary Modifies the custom configuration items of a check item.
        
        @param request: ChangeCheckCustomConfigRequest
        @return: ChangeCheckCustomConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.change_check_custom_config_with_options(request, runtime)

    async def change_check_custom_config_async(
        self,
        request: sas_20181203_models.ChangeCheckCustomConfigRequest,
    ) -> sas_20181203_models.ChangeCheckCustomConfigResponse:
        """
        @summary Modifies the custom configuration items of a check item.
        
        @param request: ChangeCheckCustomConfigRequest
        @return: ChangeCheckCustomConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.change_check_custom_config_with_options_async(request, runtime)

    def change_security_score_rule_with_options(
        self,
        request: sas_20181203_models.ChangeSecurityScoreRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ChangeSecurityScoreRuleResponse:
        """
        @summary Modifies the details of the deduction modules of the security score feature, including custom settings.
        
        @param request: ChangeSecurityScoreRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ChangeSecurityScoreRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cal_type):
            query['CalType'] = request.cal_type
        if not UtilClient.is_unset(request.reset_security_score_rule):
            query['ResetSecurityScoreRule'] = request.reset_security_score_rule
        if not UtilClient.is_unset(request.security_score_category_list):
            query['SecurityScoreCategoryList'] = request.security_score_category_list
        if not UtilClient.is_unset(request.security_score_rule_list):
            query['SecurityScoreRuleList'] = request.security_score_rule_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ChangeSecurityScoreRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ChangeSecurityScoreRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def change_security_score_rule_with_options_async(
        self,
        request: sas_20181203_models.ChangeSecurityScoreRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ChangeSecurityScoreRuleResponse:
        """
        @summary Modifies the details of the deduction modules of the security score feature, including custom settings.
        
        @param request: ChangeSecurityScoreRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ChangeSecurityScoreRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cal_type):
            query['CalType'] = request.cal_type
        if not UtilClient.is_unset(request.reset_security_score_rule):
            query['ResetSecurityScoreRule'] = request.reset_security_score_rule
        if not UtilClient.is_unset(request.security_score_category_list):
            query['SecurityScoreCategoryList'] = request.security_score_category_list
        if not UtilClient.is_unset(request.security_score_rule_list):
            query['SecurityScoreRuleList'] = request.security_score_rule_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ChangeSecurityScoreRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ChangeSecurityScoreRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def change_security_score_rule(
        self,
        request: sas_20181203_models.ChangeSecurityScoreRuleRequest,
    ) -> sas_20181203_models.ChangeSecurityScoreRuleResponse:
        """
        @summary Modifies the details of the deduction modules of the security score feature, including custom settings.
        
        @param request: ChangeSecurityScoreRuleRequest
        @return: ChangeSecurityScoreRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.change_security_score_rule_with_options(request, runtime)

    async def change_security_score_rule_async(
        self,
        request: sas_20181203_models.ChangeSecurityScoreRuleRequest,
    ) -> sas_20181203_models.ChangeSecurityScoreRuleResponse:
        """
        @summary Modifies the details of the deduction modules of the security score feature, including custom settings.
        
        @param request: ChangeSecurityScoreRuleRequest
        @return: ChangeSecurityScoreRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.change_security_score_rule_with_options_async(request, runtime)

    def change_user_lang_with_options(
        self,
        request: sas_20181203_models.ChangeUserLangRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ChangeUserLangResponse:
        """
        @summary Modifies the language settings of log analysis. The modification on the language settings takes effect within 12 hours and affects only the language of the descriptions for security events in security logs.
        
        @param request: ChangeUserLangRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ChangeUserLangResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.user_lang):
            query['UserLang'] = request.user_lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ChangeUserLang',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ChangeUserLangResponse(),
            self.call_api(params, req, runtime)
        )

    async def change_user_lang_with_options_async(
        self,
        request: sas_20181203_models.ChangeUserLangRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ChangeUserLangResponse:
        """
        @summary Modifies the language settings of log analysis. The modification on the language settings takes effect within 12 hours and affects only the language of the descriptions for security events in security logs.
        
        @param request: ChangeUserLangRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ChangeUserLangResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.user_lang):
            query['UserLang'] = request.user_lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ChangeUserLang',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ChangeUserLangResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def change_user_lang(
        self,
        request: sas_20181203_models.ChangeUserLangRequest,
    ) -> sas_20181203_models.ChangeUserLangResponse:
        """
        @summary Modifies the language settings of log analysis. The modification on the language settings takes effect within 12 hours and affects only the language of the descriptions for security events in security logs.
        
        @param request: ChangeUserLangRequest
        @return: ChangeUserLangResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.change_user_lang_with_options(request, runtime)

    async def change_user_lang_async(
        self,
        request: sas_20181203_models.ChangeUserLangRequest,
    ) -> sas_20181203_models.ChangeUserLangResponse:
        """
        @summary Modifies the language settings of log analysis. The modification on the language settings takes effect within 12 hours and affects only the language of the descriptions for security events in security logs.
        
        @param request: ChangeUserLangRequest
        @return: ChangeUserLangResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.change_user_lang_with_options_async(request, runtime)

    def check_security_event_id_with_options(
        self,
        request: sas_20181203_models.CheckSecurityEventIdRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CheckSecurityEventIdResponse:
        """
        @summary Checks whether one or more alert events are generated on a specified server based on the IDs of the alert events.
        
        @param request: CheckSecurityEventIdRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CheckSecurityEventIdResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.security_event_ids):
            query['SecurityEventIds'] = request.security_event_ids
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CheckSecurityEventId',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CheckSecurityEventIdResponse(),
            self.call_api(params, req, runtime)
        )

    async def check_security_event_id_with_options_async(
        self,
        request: sas_20181203_models.CheckSecurityEventIdRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CheckSecurityEventIdResponse:
        """
        @summary Checks whether one or more alert events are generated on a specified server based on the IDs of the alert events.
        
        @param request: CheckSecurityEventIdRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CheckSecurityEventIdResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.security_event_ids):
            query['SecurityEventIds'] = request.security_event_ids
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CheckSecurityEventId',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CheckSecurityEventIdResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def check_security_event_id(
        self,
        request: sas_20181203_models.CheckSecurityEventIdRequest,
    ) -> sas_20181203_models.CheckSecurityEventIdResponse:
        """
        @summary Checks whether one or more alert events are generated on a specified server based on the IDs of the alert events.
        
        @param request: CheckSecurityEventIdRequest
        @return: CheckSecurityEventIdResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.check_security_event_id_with_options(request, runtime)

    async def check_security_event_id_async(
        self,
        request: sas_20181203_models.CheckSecurityEventIdRequest,
    ) -> sas_20181203_models.CheckSecurityEventIdResponse:
        """
        @summary Checks whether one or more alert events are generated on a specified server based on the IDs of the alert events.
        
        @param request: CheckSecurityEventIdRequest
        @return: CheckSecurityEventIdResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.check_security_event_id_with_options_async(request, runtime)

    def check_sts_token_auth_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CheckStsTokenAuthResponse:
        """
        @summary Checks a Security Token Service (STS) token and returns the ID of the Alibaba Cloud account.
        
        @param request: CheckStsTokenAuthRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CheckStsTokenAuthResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='CheckStsTokenAuth',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CheckStsTokenAuthResponse(),
            self.call_api(params, req, runtime)
        )

    async def check_sts_token_auth_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CheckStsTokenAuthResponse:
        """
        @summary Checks a Security Token Service (STS) token and returns the ID of the Alibaba Cloud account.
        
        @param request: CheckStsTokenAuthRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CheckStsTokenAuthResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='CheckStsTokenAuth',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CheckStsTokenAuthResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def check_sts_token_auth(self) -> sas_20181203_models.CheckStsTokenAuthResponse:
        """
        @summary Checks a Security Token Service (STS) token and returns the ID of the Alibaba Cloud account.
        
        @return: CheckStsTokenAuthResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.check_sts_token_auth_with_options(runtime)

    async def check_sts_token_auth_async(self) -> sas_20181203_models.CheckStsTokenAuthResponse:
        """
        @summary Checks a Security Token Service (STS) token and returns the ID of the Alibaba Cloud account.
        
        @return: CheckStsTokenAuthResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.check_sts_token_auth_with_options_async(runtime)

    def check_trial_fix_count_with_options(
        self,
        request: sas_20181203_models.CheckTrialFixCountRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CheckTrialFixCountResponse:
        """
        @summary Checks whether the remaining quota of the vulnerability fixing feature is sufficient for a free trial user of Security Center and queries the quota usage required for the current fix operation.
        
        @description You can call this operation to check whether the remaining quota of the vulnerability fixing feature is sufficient in free trial scenarios. This operation does not trigger vulnerability fixing.
        
        @param request: CheckTrialFixCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CheckTrialFixCountResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.info):
            query['Info'] = request.info
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        if not UtilClient.is_unset(request.vul_names):
            query['VulNames'] = request.vul_names
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CheckTrialFixCount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CheckTrialFixCountResponse(),
            self.call_api(params, req, runtime)
        )

    async def check_trial_fix_count_with_options_async(
        self,
        request: sas_20181203_models.CheckTrialFixCountRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CheckTrialFixCountResponse:
        """
        @summary Checks whether the remaining quota of the vulnerability fixing feature is sufficient for a free trial user of Security Center and queries the quota usage required for the current fix operation.
        
        @description You can call this operation to check whether the remaining quota of the vulnerability fixing feature is sufficient in free trial scenarios. This operation does not trigger vulnerability fixing.
        
        @param request: CheckTrialFixCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CheckTrialFixCountResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.info):
            query['Info'] = request.info
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        if not UtilClient.is_unset(request.vul_names):
            query['VulNames'] = request.vul_names
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CheckTrialFixCount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CheckTrialFixCountResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def check_trial_fix_count(
        self,
        request: sas_20181203_models.CheckTrialFixCountRequest,
    ) -> sas_20181203_models.CheckTrialFixCountResponse:
        """
        @summary Checks whether the remaining quota of the vulnerability fixing feature is sufficient for a free trial user of Security Center and queries the quota usage required for the current fix operation.
        
        @description You can call this operation to check whether the remaining quota of the vulnerability fixing feature is sufficient in free trial scenarios. This operation does not trigger vulnerability fixing.
        
        @param request: CheckTrialFixCountRequest
        @return: CheckTrialFixCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.check_trial_fix_count_with_options(request, runtime)

    async def check_trial_fix_count_async(
        self,
        request: sas_20181203_models.CheckTrialFixCountRequest,
    ) -> sas_20181203_models.CheckTrialFixCountResponse:
        """
        @summary Checks whether the remaining quota of the vulnerability fixing feature is sufficient for a free trial user of Security Center and queries the quota usage required for the current fix operation.
        
        @description You can call this operation to check whether the remaining quota of the vulnerability fixing feature is sufficient in free trial scenarios. This operation does not trigger vulnerability fixing.
        
        @param request: CheckTrialFixCountRequest
        @return: CheckTrialFixCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.check_trial_fix_count_with_options_async(request, runtime)

    def check_user_has_ecs_with_options(
        self,
        request: sas_20181203_models.CheckUserHasEcsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CheckUserHasEcsResponse:
        """
        @summary Checks whether Elastic Compute Service (ECS) instances exist.
        
        @param request: CheckUserHasEcsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CheckUserHasEcsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CheckUserHasEcs',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CheckUserHasEcsResponse(),
            self.call_api(params, req, runtime)
        )

    async def check_user_has_ecs_with_options_async(
        self,
        request: sas_20181203_models.CheckUserHasEcsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CheckUserHasEcsResponse:
        """
        @summary Checks whether Elastic Compute Service (ECS) instances exist.
        
        @param request: CheckUserHasEcsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CheckUserHasEcsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CheckUserHasEcs',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CheckUserHasEcsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def check_user_has_ecs(
        self,
        request: sas_20181203_models.CheckUserHasEcsRequest,
    ) -> sas_20181203_models.CheckUserHasEcsResponse:
        """
        @summary Checks whether Elastic Compute Service (ECS) instances exist.
        
        @param request: CheckUserHasEcsRequest
        @return: CheckUserHasEcsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.check_user_has_ecs_with_options(request, runtime)

    async def check_user_has_ecs_async(
        self,
        request: sas_20181203_models.CheckUserHasEcsRequest,
    ) -> sas_20181203_models.CheckUserHasEcsResponse:
        """
        @summary Checks whether Elastic Compute Service (ECS) instances exist.
        
        @param request: CheckUserHasEcsRequest
        @return: CheckUserHasEcsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.check_user_has_ecs_with_options_async(request, runtime)

    def confirm_virus_events_with_options(
        self,
        request: sas_20181203_models.ConfirmVirusEventsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ConfirmVirusEventsResponse:
        """
        @summary Confirms the alert events that you want to handle.
        
        @param request: ConfirmVirusEventsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ConfirmVirusEventsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.operation_all):
            query['OperationAll'] = request.operation_all
        if not UtilClient.is_unset(request.operation_code):
            query['OperationCode'] = request.operation_code
        if not UtilClient.is_unset(request.operation_range):
            query['OperationRange'] = request.operation_range
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ConfirmVirusEvents',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ConfirmVirusEventsResponse(),
            self.call_api(params, req, runtime)
        )

    async def confirm_virus_events_with_options_async(
        self,
        request: sas_20181203_models.ConfirmVirusEventsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ConfirmVirusEventsResponse:
        """
        @summary Confirms the alert events that you want to handle.
        
        @param request: ConfirmVirusEventsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ConfirmVirusEventsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.operation_all):
            query['OperationAll'] = request.operation_all
        if not UtilClient.is_unset(request.operation_code):
            query['OperationCode'] = request.operation_code
        if not UtilClient.is_unset(request.operation_range):
            query['OperationRange'] = request.operation_range
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ConfirmVirusEvents',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ConfirmVirusEventsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def confirm_virus_events(
        self,
        request: sas_20181203_models.ConfirmVirusEventsRequest,
    ) -> sas_20181203_models.ConfirmVirusEventsResponse:
        """
        @summary Confirms the alert events that you want to handle.
        
        @param request: ConfirmVirusEventsRequest
        @return: ConfirmVirusEventsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.confirm_virus_events_with_options(request, runtime)

    async def confirm_virus_events_async(
        self,
        request: sas_20181203_models.ConfirmVirusEventsRequest,
    ) -> sas_20181203_models.ConfirmVirusEventsResponse:
        """
        @summary Confirms the alert events that you want to handle.
        
        @param request: ConfirmVirusEventsRequest
        @return: ConfirmVirusEventsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.confirm_virus_events_with_options_async(request, runtime)

    def copy_customize_report_config_with_options(
        self,
        request: sas_20181203_models.CopyCustomizeReportConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CopyCustomizeReportConfigResponse:
        """
        @summary Clones an existing security report. The new security report has the same configuration as the existing security report.
        
        @param request: CopyCustomizeReportConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CopyCustomizeReportConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.report_id):
            query['ReportId'] = request.report_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CopyCustomizeReportConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CopyCustomizeReportConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def copy_customize_report_config_with_options_async(
        self,
        request: sas_20181203_models.CopyCustomizeReportConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CopyCustomizeReportConfigResponse:
        """
        @summary Clones an existing security report. The new security report has the same configuration as the existing security report.
        
        @param request: CopyCustomizeReportConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CopyCustomizeReportConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.report_id):
            query['ReportId'] = request.report_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CopyCustomizeReportConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CopyCustomizeReportConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def copy_customize_report_config(
        self,
        request: sas_20181203_models.CopyCustomizeReportConfigRequest,
    ) -> sas_20181203_models.CopyCustomizeReportConfigResponse:
        """
        @summary Clones an existing security report. The new security report has the same configuration as the existing security report.
        
        @param request: CopyCustomizeReportConfigRequest
        @return: CopyCustomizeReportConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.copy_customize_report_config_with_options(request, runtime)

    async def copy_customize_report_config_async(
        self,
        request: sas_20181203_models.CopyCustomizeReportConfigRequest,
    ) -> sas_20181203_models.CopyCustomizeReportConfigResponse:
        """
        @summary Clones an existing security report. The new security report has the same configuration as the existing security report.
        
        @param request: CopyCustomizeReportConfigRequest
        @return: CopyCustomizeReportConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.copy_customize_report_config_with_options_async(request, runtime)

    def create_agentless_scan_task_with_options(
        self,
        request: sas_20181203_models.CreateAgentlessScanTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateAgentlessScanTaskResponse:
        """
        @summary Creates an agentless detection task.
        
        @param request: CreateAgentlessScanTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateAgentlessScanTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.asset_selection_type):
            query['AssetSelectionType'] = request.asset_selection_type
        if not UtilClient.is_unset(request.auto_delete_days):
            query['AutoDeleteDays'] = request.auto_delete_days
        if not UtilClient.is_unset(request.release_after_scan):
            query['ReleaseAfterScan'] = request.release_after_scan
        if not UtilClient.is_unset(request.scan_data_disk):
            query['ScanDataDisk'] = request.scan_data_disk
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateAgentlessScanTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateAgentlessScanTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_agentless_scan_task_with_options_async(
        self,
        request: sas_20181203_models.CreateAgentlessScanTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateAgentlessScanTaskResponse:
        """
        @summary Creates an agentless detection task.
        
        @param request: CreateAgentlessScanTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateAgentlessScanTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.asset_selection_type):
            query['AssetSelectionType'] = request.asset_selection_type
        if not UtilClient.is_unset(request.auto_delete_days):
            query['AutoDeleteDays'] = request.auto_delete_days
        if not UtilClient.is_unset(request.release_after_scan):
            query['ReleaseAfterScan'] = request.release_after_scan
        if not UtilClient.is_unset(request.scan_data_disk):
            query['ScanDataDisk'] = request.scan_data_disk
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateAgentlessScanTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateAgentlessScanTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_agentless_scan_task(
        self,
        request: sas_20181203_models.CreateAgentlessScanTaskRequest,
    ) -> sas_20181203_models.CreateAgentlessScanTaskResponse:
        """
        @summary Creates an agentless detection task.
        
        @param request: CreateAgentlessScanTaskRequest
        @return: CreateAgentlessScanTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_agentless_scan_task_with_options(request, runtime)

    async def create_agentless_scan_task_async(
        self,
        request: sas_20181203_models.CreateAgentlessScanTaskRequest,
    ) -> sas_20181203_models.CreateAgentlessScanTaskResponse:
        """
        @summary Creates an agentless detection task.
        
        @param request: CreateAgentlessScanTaskRequest
        @return: CreateAgentlessScanTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_agentless_scan_task_with_options_async(request, runtime)

    def create_anti_brute_force_rule_with_options(
        self,
        tmp_req: sas_20181203_models.CreateAntiBruteForceRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateAntiBruteForceRuleResponse:
        """
        @summary Creates a defense rule against brute-force attacks.
        
        @param tmp_req: CreateAntiBruteForceRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateAntiBruteForceRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.CreateAntiBruteForceRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.protocol_type):
            request.protocol_type_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.protocol_type, 'ProtocolType', 'json')
        query = {}
        if not UtilClient.is_unset(request.default_rule):
            query['DefaultRule'] = request.default_rule
        if not UtilClient.is_unset(request.fail_count):
            query['FailCount'] = request.fail_count
        if not UtilClient.is_unset(request.forbidden_time):
            query['ForbiddenTime'] = request.forbidden_time
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.protocol_type_shrink):
            query['ProtocolType'] = request.protocol_type_shrink
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.span):
            query['Span'] = request.span
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateAntiBruteForceRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateAntiBruteForceRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_anti_brute_force_rule_with_options_async(
        self,
        tmp_req: sas_20181203_models.CreateAntiBruteForceRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateAntiBruteForceRuleResponse:
        """
        @summary Creates a defense rule against brute-force attacks.
        
        @param tmp_req: CreateAntiBruteForceRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateAntiBruteForceRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.CreateAntiBruteForceRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.protocol_type):
            request.protocol_type_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.protocol_type, 'ProtocolType', 'json')
        query = {}
        if not UtilClient.is_unset(request.default_rule):
            query['DefaultRule'] = request.default_rule
        if not UtilClient.is_unset(request.fail_count):
            query['FailCount'] = request.fail_count
        if not UtilClient.is_unset(request.forbidden_time):
            query['ForbiddenTime'] = request.forbidden_time
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.protocol_type_shrink):
            query['ProtocolType'] = request.protocol_type_shrink
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.span):
            query['Span'] = request.span
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateAntiBruteForceRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateAntiBruteForceRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_anti_brute_force_rule(
        self,
        request: sas_20181203_models.CreateAntiBruteForceRuleRequest,
    ) -> sas_20181203_models.CreateAntiBruteForceRuleResponse:
        """
        @summary Creates a defense rule against brute-force attacks.
        
        @param request: CreateAntiBruteForceRuleRequest
        @return: CreateAntiBruteForceRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_anti_brute_force_rule_with_options(request, runtime)

    async def create_anti_brute_force_rule_async(
        self,
        request: sas_20181203_models.CreateAntiBruteForceRuleRequest,
    ) -> sas_20181203_models.CreateAntiBruteForceRuleResponse:
        """
        @summary Creates a defense rule against brute-force attacks.
        
        @param request: CreateAntiBruteForceRuleRequest
        @return: CreateAntiBruteForceRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_anti_brute_force_rule_with_options_async(request, runtime)

    def create_asset_selection_config_with_options(
        self,
        request: sas_20181203_models.CreateAssetSelectionConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateAssetSelectionConfigResponse:
        """
        @summary Create asset selection configurations.
        
        @param request: CreateAssetSelectionConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateAssetSelectionConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.business_type):
            query['BusinessType'] = request.business_type
        if not UtilClient.is_unset(request.platform):
            query['Platform'] = request.platform
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateAssetSelectionConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateAssetSelectionConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_asset_selection_config_with_options_async(
        self,
        request: sas_20181203_models.CreateAssetSelectionConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateAssetSelectionConfigResponse:
        """
        @summary Create asset selection configurations.
        
        @param request: CreateAssetSelectionConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateAssetSelectionConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.business_type):
            query['BusinessType'] = request.business_type
        if not UtilClient.is_unset(request.platform):
            query['Platform'] = request.platform
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateAssetSelectionConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateAssetSelectionConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_asset_selection_config(
        self,
        request: sas_20181203_models.CreateAssetSelectionConfigRequest,
    ) -> sas_20181203_models.CreateAssetSelectionConfigResponse:
        """
        @summary Create asset selection configurations.
        
        @param request: CreateAssetSelectionConfigRequest
        @return: CreateAssetSelectionConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_asset_selection_config_with_options(request, runtime)

    async def create_asset_selection_config_async(
        self,
        request: sas_20181203_models.CreateAssetSelectionConfigRequest,
    ) -> sas_20181203_models.CreateAssetSelectionConfigResponse:
        """
        @summary Create asset selection configurations.
        
        @param request: CreateAssetSelectionConfigRequest
        @return: CreateAssetSelectionConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_asset_selection_config_with_options_async(request, runtime)

    def create_attack_path_sensitive_asset_config_with_options(
        self,
        request: sas_20181203_models.CreateAttackPathSensitiveAssetConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateAttackPathSensitiveAssetConfigResponse:
        """
        @summary Create attack path sensitive asset configuration.
        
        @param request: CreateAttackPathSensitiveAssetConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateAttackPathSensitiveAssetConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.attack_path_asset_list):
            query['AttackPathAssetList'] = request.attack_path_asset_list
        if not UtilClient.is_unset(request.config_type):
            query['ConfigType'] = request.config_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateAttackPathSensitiveAssetConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateAttackPathSensitiveAssetConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_attack_path_sensitive_asset_config_with_options_async(
        self,
        request: sas_20181203_models.CreateAttackPathSensitiveAssetConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateAttackPathSensitiveAssetConfigResponse:
        """
        @summary Create attack path sensitive asset configuration.
        
        @param request: CreateAttackPathSensitiveAssetConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateAttackPathSensitiveAssetConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.attack_path_asset_list):
            query['AttackPathAssetList'] = request.attack_path_asset_list
        if not UtilClient.is_unset(request.config_type):
            query['ConfigType'] = request.config_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateAttackPathSensitiveAssetConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateAttackPathSensitiveAssetConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_attack_path_sensitive_asset_config(
        self,
        request: sas_20181203_models.CreateAttackPathSensitiveAssetConfigRequest,
    ) -> sas_20181203_models.CreateAttackPathSensitiveAssetConfigResponse:
        """
        @summary Create attack path sensitive asset configuration.
        
        @param request: CreateAttackPathSensitiveAssetConfigRequest
        @return: CreateAttackPathSensitiveAssetConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_attack_path_sensitive_asset_config_with_options(request, runtime)

    async def create_attack_path_sensitive_asset_config_async(
        self,
        request: sas_20181203_models.CreateAttackPathSensitiveAssetConfigRequest,
    ) -> sas_20181203_models.CreateAttackPathSensitiveAssetConfigResponse:
        """
        @summary Create attack path sensitive asset configuration.
        
        @param request: CreateAttackPathSensitiveAssetConfigRequest
        @return: CreateAttackPathSensitiveAssetConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_attack_path_sensitive_asset_config_with_options_async(request, runtime)

    def create_attack_path_whitelist_with_options(
        self,
        request: sas_20181203_models.CreateAttackPathWhitelistRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateAttackPathWhitelistResponse:
        """
        @summary Create Attack Path Whitelist.
        
        @param request: CreateAttackPathWhitelistRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateAttackPathWhitelistResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.attack_path_asset_list):
            query['AttackPathAssetList'] = request.attack_path_asset_list
        if not UtilClient.is_unset(request.path_name):
            query['PathName'] = request.path_name
        if not UtilClient.is_unset(request.path_type):
            query['PathType'] = request.path_type
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.whitelist_name):
            query['WhitelistName'] = request.whitelist_name
        if not UtilClient.is_unset(request.whitelist_type):
            query['WhitelistType'] = request.whitelist_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateAttackPathWhitelist',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateAttackPathWhitelistResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_attack_path_whitelist_with_options_async(
        self,
        request: sas_20181203_models.CreateAttackPathWhitelistRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateAttackPathWhitelistResponse:
        """
        @summary Create Attack Path Whitelist.
        
        @param request: CreateAttackPathWhitelistRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateAttackPathWhitelistResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.attack_path_asset_list):
            query['AttackPathAssetList'] = request.attack_path_asset_list
        if not UtilClient.is_unset(request.path_name):
            query['PathName'] = request.path_name
        if not UtilClient.is_unset(request.path_type):
            query['PathType'] = request.path_type
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.whitelist_name):
            query['WhitelistName'] = request.whitelist_name
        if not UtilClient.is_unset(request.whitelist_type):
            query['WhitelistType'] = request.whitelist_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateAttackPathWhitelist',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateAttackPathWhitelistResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_attack_path_whitelist(
        self,
        request: sas_20181203_models.CreateAttackPathWhitelistRequest,
    ) -> sas_20181203_models.CreateAttackPathWhitelistResponse:
        """
        @summary Create Attack Path Whitelist.
        
        @param request: CreateAttackPathWhitelistRequest
        @return: CreateAttackPathWhitelistResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_attack_path_whitelist_with_options(request, runtime)

    async def create_attack_path_whitelist_async(
        self,
        request: sas_20181203_models.CreateAttackPathWhitelistRequest,
    ) -> sas_20181203_models.CreateAttackPathWhitelistResponse:
        """
        @summary Create Attack Path Whitelist.
        
        @param request: CreateAttackPathWhitelistRequest
        @return: CreateAttackPathWhitelistResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_attack_path_whitelist_with_options_async(request, runtime)

    def create_attestor_with_options(
        self,
        request: sas_20181203_models.CreateAttestorRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateAttestorResponse:
        """
        @summary Creates a witness.
        
        @param request: CreateAttestorRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateAttestorResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.key_id):
            query['KeyId'] = request.key_id
        if not UtilClient.is_unset(request.key_region_id):
            query['KeyRegionId'] = request.key_region_id
        if not UtilClient.is_unset(request.key_version_id):
            query['KeyVersionId'] = request.key_version_id
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateAttestor',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateAttestorResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_attestor_with_options_async(
        self,
        request: sas_20181203_models.CreateAttestorRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateAttestorResponse:
        """
        @summary Creates a witness.
        
        @param request: CreateAttestorRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateAttestorResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.key_id):
            query['KeyId'] = request.key_id
        if not UtilClient.is_unset(request.key_region_id):
            query['KeyRegionId'] = request.key_region_id
        if not UtilClient.is_unset(request.key_version_id):
            query['KeyVersionId'] = request.key_version_id
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateAttestor',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateAttestorResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_attestor(
        self,
        request: sas_20181203_models.CreateAttestorRequest,
    ) -> sas_20181203_models.CreateAttestorResponse:
        """
        @summary Creates a witness.
        
        @param request: CreateAttestorRequest
        @return: CreateAttestorResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_attestor_with_options(request, runtime)

    async def create_attestor_async(
        self,
        request: sas_20181203_models.CreateAttestorRequest,
    ) -> sas_20181203_models.CreateAttestorResponse:
        """
        @summary Creates a witness.
        
        @param request: CreateAttestorRequest
        @return: CreateAttestorResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_attestor_with_options_async(request, runtime)

    def create_backup_policy_with_options(
        self,
        tmp_req: sas_20181203_models.CreateBackupPolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateBackupPolicyResponse:
        """
        @summary Creates an anti-ransomware policy for servers.
        
        @param tmp_req: CreateBackupPolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateBackupPolicyResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.CreateBackupPolicyShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.policy):
            request.policy_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.policy, 'Policy', 'json')
        query = {}
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.policy_shrink):
            query['Policy'] = request.policy_shrink
        if not UtilClient.is_unset(request.policy_region_id):
            query['PolicyRegionId'] = request.policy_region_id
        if not UtilClient.is_unset(request.policy_version):
            query['PolicyVersion'] = request.policy_version
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateBackupPolicy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateBackupPolicyResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_backup_policy_with_options_async(
        self,
        tmp_req: sas_20181203_models.CreateBackupPolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateBackupPolicyResponse:
        """
        @summary Creates an anti-ransomware policy for servers.
        
        @param tmp_req: CreateBackupPolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateBackupPolicyResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.CreateBackupPolicyShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.policy):
            request.policy_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.policy, 'Policy', 'json')
        query = {}
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.policy_shrink):
            query['Policy'] = request.policy_shrink
        if not UtilClient.is_unset(request.policy_region_id):
            query['PolicyRegionId'] = request.policy_region_id
        if not UtilClient.is_unset(request.policy_version):
            query['PolicyVersion'] = request.policy_version
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateBackupPolicy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateBackupPolicyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_backup_policy(
        self,
        request: sas_20181203_models.CreateBackupPolicyRequest,
    ) -> sas_20181203_models.CreateBackupPolicyResponse:
        """
        @summary Creates an anti-ransomware policy for servers.
        
        @param request: CreateBackupPolicyRequest
        @return: CreateBackupPolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_backup_policy_with_options(request, runtime)

    async def create_backup_policy_async(
        self,
        request: sas_20181203_models.CreateBackupPolicyRequest,
    ) -> sas_20181203_models.CreateBackupPolicyResponse:
        """
        @summary Creates an anti-ransomware policy for servers.
        
        @param request: CreateBackupPolicyRequest
        @return: CreateBackupPolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_backup_policy_with_options_async(request, runtime)

    def create_batch_upload_url_with_options(
        self,
        request: sas_20181203_models.CreateBatchUploadUrlRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateBatchUploadUrlResponse:
        """
        @summary Queries the parameters that are required to upload a file for detection.
        
        @param request: CreateBatchUploadUrlRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateBatchUploadUrlResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.md_5list):
            query['Md5List'] = request.md_5list
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateBatchUploadUrl',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateBatchUploadUrlResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_batch_upload_url_with_options_async(
        self,
        request: sas_20181203_models.CreateBatchUploadUrlRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateBatchUploadUrlResponse:
        """
        @summary Queries the parameters that are required to upload a file for detection.
        
        @param request: CreateBatchUploadUrlRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateBatchUploadUrlResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.md_5list):
            query['Md5List'] = request.md_5list
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateBatchUploadUrl',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateBatchUploadUrlResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_batch_upload_url(
        self,
        request: sas_20181203_models.CreateBatchUploadUrlRequest,
    ) -> sas_20181203_models.CreateBatchUploadUrlResponse:
        """
        @summary Queries the parameters that are required to upload a file for detection.
        
        @param request: CreateBatchUploadUrlRequest
        @return: CreateBatchUploadUrlResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_batch_upload_url_with_options(request, runtime)

    async def create_batch_upload_url_async(
        self,
        request: sas_20181203_models.CreateBatchUploadUrlRequest,
    ) -> sas_20181203_models.CreateBatchUploadUrlResponse:
        """
        @summary Queries the parameters that are required to upload a file for detection.
        
        @param request: CreateBatchUploadUrlRequest
        @return: CreateBatchUploadUrlResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_batch_upload_url_with_options_async(request, runtime)

    def create_binary_security_policy_with_options(
        self,
        request: sas_20181203_models.CreateBinarySecurityPolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateBinarySecurityPolicyResponse:
        """
        @summary Creates a binary security policy.
        
        @param request: CreateBinarySecurityPolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateBinarySecurityPolicyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.clusters):
            query['Clusters'] = request.clusters
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.policy):
            query['Policy'] = request.policy
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateBinarySecurityPolicy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateBinarySecurityPolicyResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_binary_security_policy_with_options_async(
        self,
        request: sas_20181203_models.CreateBinarySecurityPolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateBinarySecurityPolicyResponse:
        """
        @summary Creates a binary security policy.
        
        @param request: CreateBinarySecurityPolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateBinarySecurityPolicyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.clusters):
            query['Clusters'] = request.clusters
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.policy):
            query['Policy'] = request.policy
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateBinarySecurityPolicy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateBinarySecurityPolicyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_binary_security_policy(
        self,
        request: sas_20181203_models.CreateBinarySecurityPolicyRequest,
    ) -> sas_20181203_models.CreateBinarySecurityPolicyResponse:
        """
        @summary Creates a binary security policy.
        
        @param request: CreateBinarySecurityPolicyRequest
        @return: CreateBinarySecurityPolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_binary_security_policy_with_options(request, runtime)

    async def create_binary_security_policy_async(
        self,
        request: sas_20181203_models.CreateBinarySecurityPolicyRequest,
    ) -> sas_20181203_models.CreateBinarySecurityPolicyResponse:
        """
        @summary Creates a binary security policy.
        
        @param request: CreateBinarySecurityPolicyRequest
        @return: CreateBinarySecurityPolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_binary_security_policy_with_options_async(request, runtime)

    def create_container_scan_task_with_options(
        self,
        request: sas_20181203_models.CreateContainerScanTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateContainerScanTaskResponse:
        """
        @summary Creates a container scan task.
        
        @param request: CreateContainerScanTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateContainerScanTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.container_ids):
            query['ContainerIds'] = request.container_ids
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateContainerScanTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateContainerScanTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_container_scan_task_with_options_async(
        self,
        request: sas_20181203_models.CreateContainerScanTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateContainerScanTaskResponse:
        """
        @summary Creates a container scan task.
        
        @param request: CreateContainerScanTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateContainerScanTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.container_ids):
            query['ContainerIds'] = request.container_ids
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateContainerScanTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateContainerScanTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_container_scan_task(
        self,
        request: sas_20181203_models.CreateContainerScanTaskRequest,
    ) -> sas_20181203_models.CreateContainerScanTaskResponse:
        """
        @summary Creates a container scan task.
        
        @param request: CreateContainerScanTaskRequest
        @return: CreateContainerScanTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_container_scan_task_with_options(request, runtime)

    async def create_container_scan_task_async(
        self,
        request: sas_20181203_models.CreateContainerScanTaskRequest,
    ) -> sas_20181203_models.CreateContainerScanTaskResponse:
        """
        @summary Creates a container scan task.
        
        @param request: CreateContainerScanTaskRequest
        @return: CreateContainerScanTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_container_scan_task_with_options_async(request, runtime)

    def create_container_scan_task_by_app_name_with_options(
        self,
        request: sas_20181203_models.CreateContainerScanTaskByAppNameRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateContainerScanTaskByAppNameResponse:
        """
        @summary Creates a scan task for a running container application based on the application name.
        
        @param request: CreateContainerScanTaskByAppNameRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateContainerScanTaskByAppNameResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_names):
            query['AppNames'] = request.app_names
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateContainerScanTaskByAppName',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateContainerScanTaskByAppNameResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_container_scan_task_by_app_name_with_options_async(
        self,
        request: sas_20181203_models.CreateContainerScanTaskByAppNameRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateContainerScanTaskByAppNameResponse:
        """
        @summary Creates a scan task for a running container application based on the application name.
        
        @param request: CreateContainerScanTaskByAppNameRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateContainerScanTaskByAppNameResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_names):
            query['AppNames'] = request.app_names
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateContainerScanTaskByAppName',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateContainerScanTaskByAppNameResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_container_scan_task_by_app_name(
        self,
        request: sas_20181203_models.CreateContainerScanTaskByAppNameRequest,
    ) -> sas_20181203_models.CreateContainerScanTaskByAppNameResponse:
        """
        @summary Creates a scan task for a running container application based on the application name.
        
        @param request: CreateContainerScanTaskByAppNameRequest
        @return: CreateContainerScanTaskByAppNameResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_container_scan_task_by_app_name_with_options(request, runtime)

    async def create_container_scan_task_by_app_name_async(
        self,
        request: sas_20181203_models.CreateContainerScanTaskByAppNameRequest,
    ) -> sas_20181203_models.CreateContainerScanTaskByAppNameResponse:
        """
        @summary Creates a scan task for a running container application based on the application name.
        
        @param request: CreateContainerScanTaskByAppNameRequest
        @return: CreateContainerScanTaskByAppNameResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_container_scan_task_by_app_name_with_options_async(request, runtime)

    def create_custom_block_record_with_options(
        self,
        request: sas_20181203_models.CreateCustomBlockRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateCustomBlockRecordResponse:
        """
        @summary Creates an IP address blocking policy for one or more servers.
        
        @param request: CreateCustomBlockRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateCustomBlockRecordResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.block_ip):
            query['BlockIp'] = request.block_ip
        if not UtilClient.is_unset(request.bound):
            query['Bound'] = request.bound
        if not UtilClient.is_unset(request.expire_time):
            query['ExpireTime'] = request.expire_time
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateCustomBlockRecord',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateCustomBlockRecordResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_custom_block_record_with_options_async(
        self,
        request: sas_20181203_models.CreateCustomBlockRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateCustomBlockRecordResponse:
        """
        @summary Creates an IP address blocking policy for one or more servers.
        
        @param request: CreateCustomBlockRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateCustomBlockRecordResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.block_ip):
            query['BlockIp'] = request.block_ip
        if not UtilClient.is_unset(request.bound):
            query['Bound'] = request.bound
        if not UtilClient.is_unset(request.expire_time):
            query['ExpireTime'] = request.expire_time
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateCustomBlockRecord',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateCustomBlockRecordResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_custom_block_record(
        self,
        request: sas_20181203_models.CreateCustomBlockRecordRequest,
    ) -> sas_20181203_models.CreateCustomBlockRecordResponse:
        """
        @summary Creates an IP address blocking policy for one or more servers.
        
        @param request: CreateCustomBlockRecordRequest
        @return: CreateCustomBlockRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_custom_block_record_with_options(request, runtime)

    async def create_custom_block_record_async(
        self,
        request: sas_20181203_models.CreateCustomBlockRecordRequest,
    ) -> sas_20181203_models.CreateCustomBlockRecordResponse:
        """
        @summary Creates an IP address blocking policy for one or more servers.
        
        @param request: CreateCustomBlockRecordRequest
        @return: CreateCustomBlockRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_custom_block_record_with_options_async(request, runtime)

    def create_customized_dict_with_options(
        self,
        request: sas_20181203_models.CreateCustomizedDictRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateCustomizedDictResponse:
        """
        @summary Creates custom weak password rules.
        
        @param request: CreateCustomizedDictRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateCustomizedDictResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.override):
            query['Override'] = request.override
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateCustomizedDict',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateCustomizedDictResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_customized_dict_with_options_async(
        self,
        request: sas_20181203_models.CreateCustomizedDictRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateCustomizedDictResponse:
        """
        @summary Creates custom weak password rules.
        
        @param request: CreateCustomizedDictRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateCustomizedDictResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.override):
            query['Override'] = request.override
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateCustomizedDict',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateCustomizedDictResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_customized_dict(
        self,
        request: sas_20181203_models.CreateCustomizedDictRequest,
    ) -> sas_20181203_models.CreateCustomizedDictResponse:
        """
        @summary Creates custom weak password rules.
        
        @param request: CreateCustomizedDictRequest
        @return: CreateCustomizedDictResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_customized_dict_with_options(request, runtime)

    async def create_customized_dict_async(
        self,
        request: sas_20181203_models.CreateCustomizedDictRequest,
    ) -> sas_20181203_models.CreateCustomizedDictResponse:
        """
        @summary Creates custom weak password rules.
        
        @param request: CreateCustomizedDictRequest
        @return: CreateCustomizedDictResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_customized_dict_with_options_async(request, runtime)

    def create_cycle_task_with_options(
        self,
        request: sas_20181203_models.CreateCycleTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateCycleTaskResponse:
        """
        @summary Creates a periodic scan task. The task can be an image scan task, urgent vulnerability scan task, or virus scan task.
        
        @param request: CreateCycleTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateCycleTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.enable):
            query['Enable'] = request.enable
        if not UtilClient.is_unset(request.first_date_str):
            query['FirstDateStr'] = request.first_date_str
        if not UtilClient.is_unset(request.interval_period):
            query['IntervalPeriod'] = request.interval_period
        if not UtilClient.is_unset(request.param):
            query['Param'] = request.param
        if not UtilClient.is_unset(request.period_unit):
            query['PeriodUnit'] = request.period_unit
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.target_end_time):
            query['TargetEndTime'] = request.target_end_time
        if not UtilClient.is_unset(request.target_start_time):
            query['TargetStartTime'] = request.target_start_time
        if not UtilClient.is_unset(request.task_name):
            query['TaskName'] = request.task_name
        if not UtilClient.is_unset(request.task_type):
            query['TaskType'] = request.task_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateCycleTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateCycleTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_cycle_task_with_options_async(
        self,
        request: sas_20181203_models.CreateCycleTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateCycleTaskResponse:
        """
        @summary Creates a periodic scan task. The task can be an image scan task, urgent vulnerability scan task, or virus scan task.
        
        @param request: CreateCycleTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateCycleTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.enable):
            query['Enable'] = request.enable
        if not UtilClient.is_unset(request.first_date_str):
            query['FirstDateStr'] = request.first_date_str
        if not UtilClient.is_unset(request.interval_period):
            query['IntervalPeriod'] = request.interval_period
        if not UtilClient.is_unset(request.param):
            query['Param'] = request.param
        if not UtilClient.is_unset(request.period_unit):
            query['PeriodUnit'] = request.period_unit
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.target_end_time):
            query['TargetEndTime'] = request.target_end_time
        if not UtilClient.is_unset(request.target_start_time):
            query['TargetStartTime'] = request.target_start_time
        if not UtilClient.is_unset(request.task_name):
            query['TaskName'] = request.task_name
        if not UtilClient.is_unset(request.task_type):
            query['TaskType'] = request.task_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateCycleTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateCycleTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_cycle_task(
        self,
        request: sas_20181203_models.CreateCycleTaskRequest,
    ) -> sas_20181203_models.CreateCycleTaskResponse:
        """
        @summary Creates a periodic scan task. The task can be an image scan task, urgent vulnerability scan task, or virus scan task.
        
        @param request: CreateCycleTaskRequest
        @return: CreateCycleTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_cycle_task_with_options(request, runtime)

    async def create_cycle_task_async(
        self,
        request: sas_20181203_models.CreateCycleTaskRequest,
    ) -> sas_20181203_models.CreateCycleTaskResponse:
        """
        @summary Creates a periodic scan task. The task can be an image scan task, urgent vulnerability scan task, or virus scan task.
        
        @param request: CreateCycleTaskRequest
        @return: CreateCycleTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_cycle_task_with_options_async(request, runtime)

    def create_dynamic_dict_with_options(
        self,
        request: sas_20181203_models.CreateDynamicDictRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateDynamicDictResponse:
        """
        @deprecated OpenAPI CreateDynamicDict is deprecated, please use Sas::2018-12-03::CreateCustomizedDict instead.
        
        @summary Creates a dynamic dictionary of weak passwords.
        
        @param request: CreateDynamicDictRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateDynamicDictResponse
        Deprecated
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.override):
            query['Override'] = request.override
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateDynamicDict',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateDynamicDictResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_dynamic_dict_with_options_async(
        self,
        request: sas_20181203_models.CreateDynamicDictRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateDynamicDictResponse:
        """
        @deprecated OpenAPI CreateDynamicDict is deprecated, please use Sas::2018-12-03::CreateCustomizedDict instead.
        
        @summary Creates a dynamic dictionary of weak passwords.
        
        @param request: CreateDynamicDictRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateDynamicDictResponse
        Deprecated
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.override):
            query['Override'] = request.override
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateDynamicDict',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateDynamicDictResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_dynamic_dict(
        self,
        request: sas_20181203_models.CreateDynamicDictRequest,
    ) -> sas_20181203_models.CreateDynamicDictResponse:
        """
        @deprecated OpenAPI CreateDynamicDict is deprecated, please use Sas::2018-12-03::CreateCustomizedDict instead.
        
        @summary Creates a dynamic dictionary of weak passwords.
        
        @param request: CreateDynamicDictRequest
        @return: CreateDynamicDictResponse
        Deprecated
        """
        runtime = util_models.RuntimeOptions()
        return self.create_dynamic_dict_with_options(request, runtime)

    async def create_dynamic_dict_async(
        self,
        request: sas_20181203_models.CreateDynamicDictRequest,
    ) -> sas_20181203_models.CreateDynamicDictResponse:
        """
        @deprecated OpenAPI CreateDynamicDict is deprecated, please use Sas::2018-12-03::CreateCustomizedDict instead.
        
        @summary Creates a dynamic dictionary of weak passwords.
        
        @param request: CreateDynamicDictRequest
        @return: CreateDynamicDictResponse
        Deprecated
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_dynamic_dict_with_options_async(request, runtime)

    def create_file_detect_with_options(
        self,
        request: sas_20181203_models.CreateFileDetectRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateFileDetectResponse:
        """
        @summary Pushes a file to the cloud for detection.
        
        @description You can call this operation to push a file to the cloud for detection. Before you call this operation, make sure that the file is uploaded. You can call the CreateFileDetectUploadUrl operation to upload the file.
        The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.
        
        @param request: CreateFileDetectRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateFileDetectResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.decompress):
            query['Decompress'] = request.decompress
        if not UtilClient.is_unset(request.decompress_max_file_count):
            query['DecompressMaxFileCount'] = request.decompress_max_file_count
        if not UtilClient.is_unset(request.decompress_max_layer):
            query['DecompressMaxLayer'] = request.decompress_max_layer
        if not UtilClient.is_unset(request.download_url):
            query['DownloadUrl'] = request.download_url
        if not UtilClient.is_unset(request.hash_key):
            query['HashKey'] = request.hash_key
        if not UtilClient.is_unset(request.oss_key):
            query['OssKey'] = request.oss_key
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateFileDetect',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateFileDetectResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_file_detect_with_options_async(
        self,
        request: sas_20181203_models.CreateFileDetectRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateFileDetectResponse:
        """
        @summary Pushes a file to the cloud for detection.
        
        @description You can call this operation to push a file to the cloud for detection. Before you call this operation, make sure that the file is uploaded. You can call the CreateFileDetectUploadUrl operation to upload the file.
        The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.
        
        @param request: CreateFileDetectRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateFileDetectResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.decompress):
            query['Decompress'] = request.decompress
        if not UtilClient.is_unset(request.decompress_max_file_count):
            query['DecompressMaxFileCount'] = request.decompress_max_file_count
        if not UtilClient.is_unset(request.decompress_max_layer):
            query['DecompressMaxLayer'] = request.decompress_max_layer
        if not UtilClient.is_unset(request.download_url):
            query['DownloadUrl'] = request.download_url
        if not UtilClient.is_unset(request.hash_key):
            query['HashKey'] = request.hash_key
        if not UtilClient.is_unset(request.oss_key):
            query['OssKey'] = request.oss_key
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateFileDetect',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateFileDetectResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_file_detect(
        self,
        request: sas_20181203_models.CreateFileDetectRequest,
    ) -> sas_20181203_models.CreateFileDetectResponse:
        """
        @summary Pushes a file to the cloud for detection.
        
        @description You can call this operation to push a file to the cloud for detection. Before you call this operation, make sure that the file is uploaded. You can call the CreateFileDetectUploadUrl operation to upload the file.
        The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.
        
        @param request: CreateFileDetectRequest
        @return: CreateFileDetectResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_file_detect_with_options(request, runtime)

    async def create_file_detect_async(
        self,
        request: sas_20181203_models.CreateFileDetectRequest,
    ) -> sas_20181203_models.CreateFileDetectResponse:
        """
        @summary Pushes a file to the cloud for detection.
        
        @description You can call this operation to push a file to the cloud for detection. Before you call this operation, make sure that the file is uploaded. You can call the CreateFileDetectUploadUrl operation to upload the file.
        The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.
        
        @param request: CreateFileDetectRequest
        @return: CreateFileDetectResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_file_detect_with_options_async(request, runtime)

    def create_file_detect_upload_url_with_options(
        self,
        request: sas_20181203_models.CreateFileDetectUploadUrlRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateFileDetectUploadUrlResponse:
        """
        @summary Queries the parameters that are required to upload a file for detection.
        
        @description You can call this operation to query the parameters that are required to upload a file for detection. If the value of the response parameter FileExist is true, the file that you want to upload for detection already exists in the cloud. In this case, you can directly push the file for detection. If the value of the response parameter FileExist is false, you must use the form upload method to upload the file to the specified Object Storage Service (OSS) bucket based on the response parameters of this operation.
        The form upload method is provided by OSS. For more information, see [Form upload](https://help.aliyun.com/document_detail/84788.html).
        The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.
        
        @param request: CreateFileDetectUploadUrlRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateFileDetectUploadUrlResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.hash_key_context_list):
            query['HashKeyContextList'] = request.hash_key_context_list
        if not UtilClient.is_unset(request.hash_key_list):
            query['HashKeyList'] = request.hash_key_list
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateFileDetectUploadUrl',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateFileDetectUploadUrlResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_file_detect_upload_url_with_options_async(
        self,
        request: sas_20181203_models.CreateFileDetectUploadUrlRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateFileDetectUploadUrlResponse:
        """
        @summary Queries the parameters that are required to upload a file for detection.
        
        @description You can call this operation to query the parameters that are required to upload a file for detection. If the value of the response parameter FileExist is true, the file that you want to upload for detection already exists in the cloud. In this case, you can directly push the file for detection. If the value of the response parameter FileExist is false, you must use the form upload method to upload the file to the specified Object Storage Service (OSS) bucket based on the response parameters of this operation.
        The form upload method is provided by OSS. For more information, see [Form upload](https://help.aliyun.com/document_detail/84788.html).
        The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.
        
        @param request: CreateFileDetectUploadUrlRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateFileDetectUploadUrlResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.hash_key_context_list):
            query['HashKeyContextList'] = request.hash_key_context_list
        if not UtilClient.is_unset(request.hash_key_list):
            query['HashKeyList'] = request.hash_key_list
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateFileDetectUploadUrl',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateFileDetectUploadUrlResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_file_detect_upload_url(
        self,
        request: sas_20181203_models.CreateFileDetectUploadUrlRequest,
    ) -> sas_20181203_models.CreateFileDetectUploadUrlResponse:
        """
        @summary Queries the parameters that are required to upload a file for detection.
        
        @description You can call this operation to query the parameters that are required to upload a file for detection. If the value of the response parameter FileExist is true, the file that you want to upload for detection already exists in the cloud. In this case, you can directly push the file for detection. If the value of the response parameter FileExist is false, you must use the form upload method to upload the file to the specified Object Storage Service (OSS) bucket based on the response parameters of this operation.
        The form upload method is provided by OSS. For more information, see [Form upload](https://help.aliyun.com/document_detail/84788.html).
        The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.
        
        @param request: CreateFileDetectUploadUrlRequest
        @return: CreateFileDetectUploadUrlResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_file_detect_upload_url_with_options(request, runtime)

    async def create_file_detect_upload_url_async(
        self,
        request: sas_20181203_models.CreateFileDetectUploadUrlRequest,
    ) -> sas_20181203_models.CreateFileDetectUploadUrlResponse:
        """
        @summary Queries the parameters that are required to upload a file for detection.
        
        @description You can call this operation to query the parameters that are required to upload a file for detection. If the value of the response parameter FileExist is true, the file that you want to upload for detection already exists in the cloud. In this case, you can directly push the file for detection. If the value of the response parameter FileExist is false, you must use the form upload method to upload the file to the specified Object Storage Service (OSS) bucket based on the response parameters of this operation.
        The form upload method is provided by OSS. For more information, see [Form upload](https://help.aliyun.com/document_detail/84788.html).
        The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.
        
        @param request: CreateFileDetectUploadUrlRequest
        @return: CreateFileDetectUploadUrlResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_file_detect_upload_url_with_options_async(request, runtime)

    def create_file_protect_rule_with_options(
        self,
        request: sas_20181203_models.CreateFileProtectRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateFileProtectRuleResponse:
        """
        @summary Creates a core file monitoring rule.
        
        @param request: CreateFileProtectRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateFileProtectRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.alert_level):
            query['AlertLevel'] = request.alert_level
        if not UtilClient.is_unset(request.file_ops):
            query['FileOps'] = request.file_ops
        if not UtilClient.is_unset(request.file_paths):
            query['FilePaths'] = request.file_paths
        if not UtilClient.is_unset(request.platform):
            query['Platform'] = request.platform
        if not UtilClient.is_unset(request.proc_paths):
            query['ProcPaths'] = request.proc_paths
        if not UtilClient.is_unset(request.rule_action):
            query['RuleAction'] = request.rule_action
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        if not UtilClient.is_unset(request.switch_id):
            query['SwitchId'] = request.switch_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateFileProtectRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateFileProtectRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_file_protect_rule_with_options_async(
        self,
        request: sas_20181203_models.CreateFileProtectRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateFileProtectRuleResponse:
        """
        @summary Creates a core file monitoring rule.
        
        @param request: CreateFileProtectRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateFileProtectRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.alert_level):
            query['AlertLevel'] = request.alert_level
        if not UtilClient.is_unset(request.file_ops):
            query['FileOps'] = request.file_ops
        if not UtilClient.is_unset(request.file_paths):
            query['FilePaths'] = request.file_paths
        if not UtilClient.is_unset(request.platform):
            query['Platform'] = request.platform
        if not UtilClient.is_unset(request.proc_paths):
            query['ProcPaths'] = request.proc_paths
        if not UtilClient.is_unset(request.rule_action):
            query['RuleAction'] = request.rule_action
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        if not UtilClient.is_unset(request.switch_id):
            query['SwitchId'] = request.switch_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateFileProtectRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateFileProtectRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_file_protect_rule(
        self,
        request: sas_20181203_models.CreateFileProtectRuleRequest,
    ) -> sas_20181203_models.CreateFileProtectRuleResponse:
        """
        @summary Creates a core file monitoring rule.
        
        @param request: CreateFileProtectRuleRequest
        @return: CreateFileProtectRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_file_protect_rule_with_options(request, runtime)

    async def create_file_protect_rule_async(
        self,
        request: sas_20181203_models.CreateFileProtectRuleRequest,
    ) -> sas_20181203_models.CreateFileProtectRuleResponse:
        """
        @summary Creates a core file monitoring rule.
        
        @param request: CreateFileProtectRuleRequest
        @return: CreateFileProtectRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_file_protect_rule_with_options_async(request, runtime)

    def create_file_upload_limit_with_options(
        self,
        request: sas_20181203_models.CreateFileUploadLimitRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateFileUploadLimitResponse:
        """
        @summary Specifies the queries per second (QPS) limit on the files uploaded from the client.
        
        @param request: CreateFileUploadLimitRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateFileUploadLimitResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.limit):
            query['Limit'] = request.limit
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateFileUploadLimit',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateFileUploadLimitResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_file_upload_limit_with_options_async(
        self,
        request: sas_20181203_models.CreateFileUploadLimitRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateFileUploadLimitResponse:
        """
        @summary Specifies the queries per second (QPS) limit on the files uploaded from the client.
        
        @param request: CreateFileUploadLimitRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateFileUploadLimitResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.limit):
            query['Limit'] = request.limit
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateFileUploadLimit',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateFileUploadLimitResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_file_upload_limit(
        self,
        request: sas_20181203_models.CreateFileUploadLimitRequest,
    ) -> sas_20181203_models.CreateFileUploadLimitResponse:
        """
        @summary Specifies the queries per second (QPS) limit on the files uploaded from the client.
        
        @param request: CreateFileUploadLimitRequest
        @return: CreateFileUploadLimitResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_file_upload_limit_with_options(request, runtime)

    async def create_file_upload_limit_async(
        self,
        request: sas_20181203_models.CreateFileUploadLimitRequest,
    ) -> sas_20181203_models.CreateFileUploadLimitResponse:
        """
        @summary Specifies the queries per second (QPS) limit on the files uploaded from the client.
        
        @param request: CreateFileUploadLimitRequest
        @return: CreateFileUploadLimitResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_file_upload_limit_with_options_async(request, runtime)

    def create_honeypot_with_options(
        self,
        request: sas_20181203_models.CreateHoneypotRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateHoneypotResponse:
        """
        @summary Creates a honeypot.
        
        @param request: CreateHoneypotRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateHoneypotResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.honeypot_image_id):
            query['HoneypotImageId'] = request.honeypot_image_id
        if not UtilClient.is_unset(request.honeypot_image_name):
            query['HoneypotImageName'] = request.honeypot_image_name
        if not UtilClient.is_unset(request.honeypot_name):
            query['HoneypotName'] = request.honeypot_name
        if not UtilClient.is_unset(request.meta):
            query['Meta'] = request.meta
        if not UtilClient.is_unset(request.node_id):
            query['NodeId'] = request.node_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateHoneypot',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateHoneypotResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_honeypot_with_options_async(
        self,
        request: sas_20181203_models.CreateHoneypotRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateHoneypotResponse:
        """
        @summary Creates a honeypot.
        
        @param request: CreateHoneypotRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateHoneypotResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.honeypot_image_id):
            query['HoneypotImageId'] = request.honeypot_image_id
        if not UtilClient.is_unset(request.honeypot_image_name):
            query['HoneypotImageName'] = request.honeypot_image_name
        if not UtilClient.is_unset(request.honeypot_name):
            query['HoneypotName'] = request.honeypot_name
        if not UtilClient.is_unset(request.meta):
            query['Meta'] = request.meta
        if not UtilClient.is_unset(request.node_id):
            query['NodeId'] = request.node_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateHoneypot',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateHoneypotResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_honeypot(
        self,
        request: sas_20181203_models.CreateHoneypotRequest,
    ) -> sas_20181203_models.CreateHoneypotResponse:
        """
        @summary Creates a honeypot.
        
        @param request: CreateHoneypotRequest
        @return: CreateHoneypotResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_honeypot_with_options(request, runtime)

    async def create_honeypot_async(
        self,
        request: sas_20181203_models.CreateHoneypotRequest,
    ) -> sas_20181203_models.CreateHoneypotResponse:
        """
        @summary Creates a honeypot.
        
        @param request: CreateHoneypotRequest
        @return: CreateHoneypotResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_honeypot_with_options_async(request, runtime)

    def create_honeypot_node_with_options(
        self,
        request: sas_20181203_models.CreateHoneypotNodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateHoneypotNodeResponse:
        """
        @summary Creates a management node.
        
        @param request: CreateHoneypotNodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateHoneypotNodeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.allow_honeypot_access_internet):
            query['AllowHoneypotAccessInternet'] = request.allow_honeypot_access_internet
        if not UtilClient.is_unset(request.available_probe_num):
            query['AvailableProbeNum'] = request.available_probe_num
        if not UtilClient.is_unset(request.node_name):
            query['NodeName'] = request.node_name
        if not UtilClient.is_unset(request.security_group_probe_ip_list):
            query['SecurityGroupProbeIpList'] = request.security_group_probe_ip_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateHoneypotNode',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateHoneypotNodeResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_honeypot_node_with_options_async(
        self,
        request: sas_20181203_models.CreateHoneypotNodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateHoneypotNodeResponse:
        """
        @summary Creates a management node.
        
        @param request: CreateHoneypotNodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateHoneypotNodeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.allow_honeypot_access_internet):
            query['AllowHoneypotAccessInternet'] = request.allow_honeypot_access_internet
        if not UtilClient.is_unset(request.available_probe_num):
            query['AvailableProbeNum'] = request.available_probe_num
        if not UtilClient.is_unset(request.node_name):
            query['NodeName'] = request.node_name
        if not UtilClient.is_unset(request.security_group_probe_ip_list):
            query['SecurityGroupProbeIpList'] = request.security_group_probe_ip_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateHoneypotNode',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateHoneypotNodeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_honeypot_node(
        self,
        request: sas_20181203_models.CreateHoneypotNodeRequest,
    ) -> sas_20181203_models.CreateHoneypotNodeResponse:
        """
        @summary Creates a management node.
        
        @param request: CreateHoneypotNodeRequest
        @return: CreateHoneypotNodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_honeypot_node_with_options(request, runtime)

    async def create_honeypot_node_async(
        self,
        request: sas_20181203_models.CreateHoneypotNodeRequest,
    ) -> sas_20181203_models.CreateHoneypotNodeResponse:
        """
        @summary Creates a management node.
        
        @param request: CreateHoneypotNodeRequest
        @return: CreateHoneypotNodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_honeypot_node_with_options_async(request, runtime)

    def create_honeypot_preset_with_options(
        self,
        request: sas_20181203_models.CreateHoneypotPresetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateHoneypotPresetResponse:
        """
        @summary Creates a honeypot template.
        
        @param request: CreateHoneypotPresetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateHoneypotPresetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.honeypot_image_name):
            query['HoneypotImageName'] = request.honeypot_image_name
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.meta):
            query['Meta'] = request.meta
        if not UtilClient.is_unset(request.node_id):
            query['NodeId'] = request.node_id
        if not UtilClient.is_unset(request.preset_name):
            query['PresetName'] = request.preset_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateHoneypotPreset',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateHoneypotPresetResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_honeypot_preset_with_options_async(
        self,
        request: sas_20181203_models.CreateHoneypotPresetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateHoneypotPresetResponse:
        """
        @summary Creates a honeypot template.
        
        @param request: CreateHoneypotPresetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateHoneypotPresetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.honeypot_image_name):
            query['HoneypotImageName'] = request.honeypot_image_name
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.meta):
            query['Meta'] = request.meta
        if not UtilClient.is_unset(request.node_id):
            query['NodeId'] = request.node_id
        if not UtilClient.is_unset(request.preset_name):
            query['PresetName'] = request.preset_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateHoneypotPreset',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateHoneypotPresetResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_honeypot_preset(
        self,
        request: sas_20181203_models.CreateHoneypotPresetRequest,
    ) -> sas_20181203_models.CreateHoneypotPresetResponse:
        """
        @summary Creates a honeypot template.
        
        @param request: CreateHoneypotPresetRequest
        @return: CreateHoneypotPresetResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_honeypot_preset_with_options(request, runtime)

    async def create_honeypot_preset_async(
        self,
        request: sas_20181203_models.CreateHoneypotPresetRequest,
    ) -> sas_20181203_models.CreateHoneypotPresetResponse:
        """
        @summary Creates a honeypot template.
        
        @param request: CreateHoneypotPresetRequest
        @return: CreateHoneypotPresetResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_honeypot_preset_with_options_async(request, runtime)

    def create_honeypot_probe_with_options(
        self,
        request: sas_20181203_models.CreateHoneypotProbeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateHoneypotProbeResponse:
        """
        @summary Creates a probe.
        
        @param request: CreateHoneypotProbeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateHoneypotProbeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.arp):
            query['Arp'] = request.arp
        if not UtilClient.is_unset(request.business_group_id):
            query['BusinessGroupId'] = request.business_group_id
        if not UtilClient.is_unset(request.control_node_id):
            query['ControlNodeId'] = request.control_node_id
        if not UtilClient.is_unset(request.display_name):
            query['DisplayName'] = request.display_name
        if not UtilClient.is_unset(request.honeypot_bind_list):
            query['HoneypotBindList'] = request.honeypot_bind_list
        if not UtilClient.is_unset(request.ping):
            query['Ping'] = request.ping
        if not UtilClient.is_unset(request.probe_type):
            query['ProbeType'] = request.probe_type
        if not UtilClient.is_unset(request.probe_version):
            query['ProbeVersion'] = request.probe_version
        if not UtilClient.is_unset(request.proxy_ip):
            query['ProxyIp'] = request.proxy_ip
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        if not UtilClient.is_unset(request.vpc_id):
            query['VpcId'] = request.vpc_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateHoneypotProbe',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateHoneypotProbeResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_honeypot_probe_with_options_async(
        self,
        request: sas_20181203_models.CreateHoneypotProbeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateHoneypotProbeResponse:
        """
        @summary Creates a probe.
        
        @param request: CreateHoneypotProbeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateHoneypotProbeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.arp):
            query['Arp'] = request.arp
        if not UtilClient.is_unset(request.business_group_id):
            query['BusinessGroupId'] = request.business_group_id
        if not UtilClient.is_unset(request.control_node_id):
            query['ControlNodeId'] = request.control_node_id
        if not UtilClient.is_unset(request.display_name):
            query['DisplayName'] = request.display_name
        if not UtilClient.is_unset(request.honeypot_bind_list):
            query['HoneypotBindList'] = request.honeypot_bind_list
        if not UtilClient.is_unset(request.ping):
            query['Ping'] = request.ping
        if not UtilClient.is_unset(request.probe_type):
            query['ProbeType'] = request.probe_type
        if not UtilClient.is_unset(request.probe_version):
            query['ProbeVersion'] = request.probe_version
        if not UtilClient.is_unset(request.proxy_ip):
            query['ProxyIp'] = request.proxy_ip
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        if not UtilClient.is_unset(request.vpc_id):
            query['VpcId'] = request.vpc_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateHoneypotProbe',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateHoneypotProbeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_honeypot_probe(
        self,
        request: sas_20181203_models.CreateHoneypotProbeRequest,
    ) -> sas_20181203_models.CreateHoneypotProbeResponse:
        """
        @summary Creates a probe.
        
        @param request: CreateHoneypotProbeRequest
        @return: CreateHoneypotProbeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_honeypot_probe_with_options(request, runtime)

    async def create_honeypot_probe_async(
        self,
        request: sas_20181203_models.CreateHoneypotProbeRequest,
    ) -> sas_20181203_models.CreateHoneypotProbeResponse:
        """
        @summary Creates a probe.
        
        @param request: CreateHoneypotProbeRequest
        @return: CreateHoneypotProbeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_honeypot_probe_with_options_async(request, runtime)

    def create_honeypot_probe_bind_with_options(
        self,
        request: sas_20181203_models.CreateHoneypotProbeBindRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateHoneypotProbeBindResponse:
        """
        @summary Creates a monitoring or forwarding service for a probe.
        
        @param request: CreateHoneypotProbeBindRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateHoneypotProbeBindResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.bind_port_list):
            query['BindPortList'] = request.bind_port_list
        if not UtilClient.is_unset(request.honeypot_id):
            query['HoneypotId'] = request.honeypot_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.probe_id):
            query['ProbeId'] = request.probe_id
        if not UtilClient.is_unset(request.service_ip_list):
            query['ServiceIpList'] = request.service_ip_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateHoneypotProbeBind',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateHoneypotProbeBindResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_honeypot_probe_bind_with_options_async(
        self,
        request: sas_20181203_models.CreateHoneypotProbeBindRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateHoneypotProbeBindResponse:
        """
        @summary Creates a monitoring or forwarding service for a probe.
        
        @param request: CreateHoneypotProbeBindRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateHoneypotProbeBindResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.bind_port_list):
            query['BindPortList'] = request.bind_port_list
        if not UtilClient.is_unset(request.honeypot_id):
            query['HoneypotId'] = request.honeypot_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.probe_id):
            query['ProbeId'] = request.probe_id
        if not UtilClient.is_unset(request.service_ip_list):
            query['ServiceIpList'] = request.service_ip_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateHoneypotProbeBind',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateHoneypotProbeBindResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_honeypot_probe_bind(
        self,
        request: sas_20181203_models.CreateHoneypotProbeBindRequest,
    ) -> sas_20181203_models.CreateHoneypotProbeBindResponse:
        """
        @summary Creates a monitoring or forwarding service for a probe.
        
        @param request: CreateHoneypotProbeBindRequest
        @return: CreateHoneypotProbeBindResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_honeypot_probe_bind_with_options(request, runtime)

    async def create_honeypot_probe_bind_async(
        self,
        request: sas_20181203_models.CreateHoneypotProbeBindRequest,
    ) -> sas_20181203_models.CreateHoneypotProbeBindResponse:
        """
        @summary Creates a monitoring or forwarding service for a probe.
        
        @param request: CreateHoneypotProbeBindRequest
        @return: CreateHoneypotProbeBindResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_honeypot_probe_bind_with_options_async(request, runtime)

    def create_hybrid_proxy_cluster_with_options(
        self,
        request: sas_20181203_models.CreateHybridProxyClusterRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateHybridProxyClusterResponse:
        """
        @summary Creates a hybrid-cloud proxy cluster.
        
        @param request: CreateHybridProxyClusterRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateHybridProxyClusterResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.ip):
            query['Ip'] = request.ip
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateHybridProxyCluster',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateHybridProxyClusterResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_hybrid_proxy_cluster_with_options_async(
        self,
        request: sas_20181203_models.CreateHybridProxyClusterRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateHybridProxyClusterResponse:
        """
        @summary Creates a hybrid-cloud proxy cluster.
        
        @param request: CreateHybridProxyClusterRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateHybridProxyClusterResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.ip):
            query['Ip'] = request.ip
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateHybridProxyCluster',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateHybridProxyClusterResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_hybrid_proxy_cluster(
        self,
        request: sas_20181203_models.CreateHybridProxyClusterRequest,
    ) -> sas_20181203_models.CreateHybridProxyClusterResponse:
        """
        @summary Creates a hybrid-cloud proxy cluster.
        
        @param request: CreateHybridProxyClusterRequest
        @return: CreateHybridProxyClusterResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_hybrid_proxy_cluster_with_options(request, runtime)

    async def create_hybrid_proxy_cluster_async(
        self,
        request: sas_20181203_models.CreateHybridProxyClusterRequest,
    ) -> sas_20181203_models.CreateHybridProxyClusterResponse:
        """
        @summary Creates a hybrid-cloud proxy cluster.
        
        @param request: CreateHybridProxyClusterRequest
        @return: CreateHybridProxyClusterResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_hybrid_proxy_cluster_with_options_async(request, runtime)

    def create_interception_rule_with_options(
        self,
        tmp_req: sas_20181203_models.CreateInterceptionRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateInterceptionRuleResponse:
        """
        @summary Creates a defense rule in the container firewall module.
        
        @param tmp_req: CreateInterceptionRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateInterceptionRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.CreateInterceptionRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.dst_target_list):
            request.dst_target_list_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.dst_target_list, 'DstTargetList', 'json')
        if not UtilClient.is_unset(tmp_req.src_target):
            request.src_target_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.src_target, 'SrcTarget', 'json')
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.dst_target_list_shrink):
            query['DstTargetList'] = request.dst_target_list_shrink
        if not UtilClient.is_unset(request.intercept_type):
            query['InterceptType'] = request.intercept_type
        if not UtilClient.is_unset(request.order_index):
            query['OrderIndex'] = request.order_index
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.rule_switch):
            query['RuleSwitch'] = request.rule_switch
        if not UtilClient.is_unset(request.rule_type):
            query['RuleType'] = request.rule_type
        if not UtilClient.is_unset(request.src_target_shrink):
            query['SrcTarget'] = request.src_target_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateInterceptionRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateInterceptionRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_interception_rule_with_options_async(
        self,
        tmp_req: sas_20181203_models.CreateInterceptionRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateInterceptionRuleResponse:
        """
        @summary Creates a defense rule in the container firewall module.
        
        @param tmp_req: CreateInterceptionRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateInterceptionRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.CreateInterceptionRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.dst_target_list):
            request.dst_target_list_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.dst_target_list, 'DstTargetList', 'json')
        if not UtilClient.is_unset(tmp_req.src_target):
            request.src_target_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.src_target, 'SrcTarget', 'json')
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.dst_target_list_shrink):
            query['DstTargetList'] = request.dst_target_list_shrink
        if not UtilClient.is_unset(request.intercept_type):
            query['InterceptType'] = request.intercept_type
        if not UtilClient.is_unset(request.order_index):
            query['OrderIndex'] = request.order_index
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.rule_switch):
            query['RuleSwitch'] = request.rule_switch
        if not UtilClient.is_unset(request.rule_type):
            query['RuleType'] = request.rule_type
        if not UtilClient.is_unset(request.src_target_shrink):
            query['SrcTarget'] = request.src_target_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateInterceptionRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateInterceptionRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_interception_rule(
        self,
        request: sas_20181203_models.CreateInterceptionRuleRequest,
    ) -> sas_20181203_models.CreateInterceptionRuleResponse:
        """
        @summary Creates a defense rule in the container firewall module.
        
        @param request: CreateInterceptionRuleRequest
        @return: CreateInterceptionRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_interception_rule_with_options(request, runtime)

    async def create_interception_rule_async(
        self,
        request: sas_20181203_models.CreateInterceptionRuleRequest,
    ) -> sas_20181203_models.CreateInterceptionRuleResponse:
        """
        @summary Creates a defense rule in the container firewall module.
        
        @param request: CreateInterceptionRuleRequest
        @return: CreateInterceptionRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_interception_rule_with_options_async(request, runtime)

    def create_interception_target_with_options(
        self,
        request: sas_20181203_models.CreateInterceptionTargetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateInterceptionTargetResponse:
        """
        @summary Creates a defense object.
        
        @param request: CreateInterceptionTargetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateInterceptionTargetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_name):
            query['AppName'] = request.app_name
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.image_list):
            query['ImageList'] = request.image_list
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        if not UtilClient.is_unset(request.tag_list):
            query['TagList'] = request.tag_list
        if not UtilClient.is_unset(request.target_name):
            query['TargetName'] = request.target_name
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateInterceptionTarget',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateInterceptionTargetResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_interception_target_with_options_async(
        self,
        request: sas_20181203_models.CreateInterceptionTargetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateInterceptionTargetResponse:
        """
        @summary Creates a defense object.
        
        @param request: CreateInterceptionTargetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateInterceptionTargetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_name):
            query['AppName'] = request.app_name
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.image_list):
            query['ImageList'] = request.image_list
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        if not UtilClient.is_unset(request.tag_list):
            query['TagList'] = request.tag_list
        if not UtilClient.is_unset(request.target_name):
            query['TargetName'] = request.target_name
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateInterceptionTarget',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateInterceptionTargetResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_interception_target(
        self,
        request: sas_20181203_models.CreateInterceptionTargetRequest,
    ) -> sas_20181203_models.CreateInterceptionTargetResponse:
        """
        @summary Creates a defense object.
        
        @param request: CreateInterceptionTargetRequest
        @return: CreateInterceptionTargetResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_interception_target_with_options(request, runtime)

    async def create_interception_target_async(
        self,
        request: sas_20181203_models.CreateInterceptionTargetRequest,
    ) -> sas_20181203_models.CreateInterceptionTargetResponse:
        """
        @summary Creates a defense object.
        
        @param request: CreateInterceptionTargetRequest
        @return: CreateInterceptionTargetResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_interception_target_with_options_async(request, runtime)

    def create_jenkins_image_registry_with_options(
        self,
        request: sas_20181203_models.CreateJenkinsImageRegistryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateJenkinsImageRegistryResponse:
        """
        @summary Creates a Jenkins image repository.
        
        @param request: CreateJenkinsImageRegistryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateJenkinsImageRegistryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        body = {}
        if not UtilClient.is_unset(request.domain_name):
            body['DomainName'] = request.domain_name
        if not UtilClient.is_unset(request.extra_param):
            body['ExtraParam'] = request.extra_param
        if not UtilClient.is_unset(request.net_type):
            body['NetType'] = request.net_type
        if not UtilClient.is_unset(request.password):
            body['Password'] = request.password
        if not UtilClient.is_unset(request.persistence_day):
            body['PersistenceDay'] = request.persistence_day
        if not UtilClient.is_unset(request.protocol_type):
            body['ProtocolType'] = request.protocol_type
        if not UtilClient.is_unset(request.region_id):
            body['RegionId'] = request.region_id
        if not UtilClient.is_unset(request.registry_host_ip):
            body['RegistryHostIp'] = request.registry_host_ip
        if not UtilClient.is_unset(request.registry_name):
            body['RegistryName'] = request.registry_name
        if not UtilClient.is_unset(request.registry_type):
            body['RegistryType'] = request.registry_type
        if not UtilClient.is_unset(request.registry_version):
            body['RegistryVersion'] = request.registry_version
        if not UtilClient.is_unset(request.trans_per_hour):
            body['TransPerHour'] = request.trans_per_hour
        if not UtilClient.is_unset(request.user_name):
            body['UserName'] = request.user_name
        if not UtilClient.is_unset(request.vpc_id):
            body['VpcId'] = request.vpc_id
        if not UtilClient.is_unset(request.white_list):
            body['WhiteList'] = request.white_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateJenkinsImageRegistry',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateJenkinsImageRegistryResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_jenkins_image_registry_with_options_async(
        self,
        request: sas_20181203_models.CreateJenkinsImageRegistryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateJenkinsImageRegistryResponse:
        """
        @summary Creates a Jenkins image repository.
        
        @param request: CreateJenkinsImageRegistryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateJenkinsImageRegistryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        body = {}
        if not UtilClient.is_unset(request.domain_name):
            body['DomainName'] = request.domain_name
        if not UtilClient.is_unset(request.extra_param):
            body['ExtraParam'] = request.extra_param
        if not UtilClient.is_unset(request.net_type):
            body['NetType'] = request.net_type
        if not UtilClient.is_unset(request.password):
            body['Password'] = request.password
        if not UtilClient.is_unset(request.persistence_day):
            body['PersistenceDay'] = request.persistence_day
        if not UtilClient.is_unset(request.protocol_type):
            body['ProtocolType'] = request.protocol_type
        if not UtilClient.is_unset(request.region_id):
            body['RegionId'] = request.region_id
        if not UtilClient.is_unset(request.registry_host_ip):
            body['RegistryHostIp'] = request.registry_host_ip
        if not UtilClient.is_unset(request.registry_name):
            body['RegistryName'] = request.registry_name
        if not UtilClient.is_unset(request.registry_type):
            body['RegistryType'] = request.registry_type
        if not UtilClient.is_unset(request.registry_version):
            body['RegistryVersion'] = request.registry_version
        if not UtilClient.is_unset(request.trans_per_hour):
            body['TransPerHour'] = request.trans_per_hour
        if not UtilClient.is_unset(request.user_name):
            body['UserName'] = request.user_name
        if not UtilClient.is_unset(request.vpc_id):
            body['VpcId'] = request.vpc_id
        if not UtilClient.is_unset(request.white_list):
            body['WhiteList'] = request.white_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateJenkinsImageRegistry',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateJenkinsImageRegistryResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_jenkins_image_registry(
        self,
        request: sas_20181203_models.CreateJenkinsImageRegistryRequest,
    ) -> sas_20181203_models.CreateJenkinsImageRegistryResponse:
        """
        @summary Creates a Jenkins image repository.
        
        @param request: CreateJenkinsImageRegistryRequest
        @return: CreateJenkinsImageRegistryResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_jenkins_image_registry_with_options(request, runtime)

    async def create_jenkins_image_registry_async(
        self,
        request: sas_20181203_models.CreateJenkinsImageRegistryRequest,
    ) -> sas_20181203_models.CreateJenkinsImageRegistryResponse:
        """
        @summary Creates a Jenkins image repository.
        
        @param request: CreateJenkinsImageRegistryRequest
        @return: CreateJenkinsImageRegistryResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_jenkins_image_registry_with_options_async(request, runtime)

    def create_jenkins_image_scan_task_with_options(
        self,
        request: sas_20181203_models.CreateJenkinsImageScanTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateJenkinsImageScanTaskResponse:
        """
        @summary Creates a Jenkins scan task.
        
        @param request: CreateJenkinsImageScanTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateJenkinsImageScanTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.jenkins_env):
            query['JenkinsEnv'] = request.jenkins_env
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        body = {}
        if not UtilClient.is_unset(request.digest):
            body['Digest'] = request.digest
        if not UtilClient.is_unset(request.image_create):
            body['ImageCreate'] = request.image_create
        if not UtilClient.is_unset(request.image_id):
            body['ImageId'] = request.image_id
        if not UtilClient.is_unset(request.image_size):
            body['ImageSize'] = request.image_size
        if not UtilClient.is_unset(request.image_update):
            body['ImageUpdate'] = request.image_update
        if not UtilClient.is_unset(request.namespace):
            body['Namespace'] = request.namespace
        if not UtilClient.is_unset(request.repo_name):
            body['RepoName'] = request.repo_name
        if not UtilClient.is_unset(request.tag):
            body['Tag'] = request.tag
        if not UtilClient.is_unset(request.token):
            body['Token'] = request.token
        if not UtilClient.is_unset(request.uuid):
            body['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateJenkinsImageScanTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateJenkinsImageScanTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_jenkins_image_scan_task_with_options_async(
        self,
        request: sas_20181203_models.CreateJenkinsImageScanTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateJenkinsImageScanTaskResponse:
        """
        @summary Creates a Jenkins scan task.
        
        @param request: CreateJenkinsImageScanTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateJenkinsImageScanTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.jenkins_env):
            query['JenkinsEnv'] = request.jenkins_env
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        body = {}
        if not UtilClient.is_unset(request.digest):
            body['Digest'] = request.digest
        if not UtilClient.is_unset(request.image_create):
            body['ImageCreate'] = request.image_create
        if not UtilClient.is_unset(request.image_id):
            body['ImageId'] = request.image_id
        if not UtilClient.is_unset(request.image_size):
            body['ImageSize'] = request.image_size
        if not UtilClient.is_unset(request.image_update):
            body['ImageUpdate'] = request.image_update
        if not UtilClient.is_unset(request.namespace):
            body['Namespace'] = request.namespace
        if not UtilClient.is_unset(request.repo_name):
            body['RepoName'] = request.repo_name
        if not UtilClient.is_unset(request.tag):
            body['Tag'] = request.tag
        if not UtilClient.is_unset(request.token):
            body['Token'] = request.token
        if not UtilClient.is_unset(request.uuid):
            body['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateJenkinsImageScanTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateJenkinsImageScanTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_jenkins_image_scan_task(
        self,
        request: sas_20181203_models.CreateJenkinsImageScanTaskRequest,
    ) -> sas_20181203_models.CreateJenkinsImageScanTaskResponse:
        """
        @summary Creates a Jenkins scan task.
        
        @param request: CreateJenkinsImageScanTaskRequest
        @return: CreateJenkinsImageScanTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_jenkins_image_scan_task_with_options(request, runtime)

    async def create_jenkins_image_scan_task_async(
        self,
        request: sas_20181203_models.CreateJenkinsImageScanTaskRequest,
    ) -> sas_20181203_models.CreateJenkinsImageScanTaskResponse:
        """
        @summary Creates a Jenkins scan task.
        
        @param request: CreateJenkinsImageScanTaskRequest
        @return: CreateJenkinsImageScanTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_jenkins_image_scan_task_with_options_async(request, runtime)

    def create_malicious_file_whitelist_config_with_options(
        self,
        request: sas_20181203_models.CreateMaliciousFileWhitelistConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateMaliciousFileWhitelistConfigResponse:
        """
        @summary Creates an alert whitelist rule of sensitive files that are detected by using the agentless detection feature.
        
        @param request: CreateMaliciousFileWhitelistConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateMaliciousFileWhitelistConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.event_name):
            query['EventName'] = request.event_name
        if not UtilClient.is_unset(request.field):
            query['Field'] = request.field
        if not UtilClient.is_unset(request.field_value):
            query['FieldValue'] = request.field_value
        if not UtilClient.is_unset(request.operator):
            query['Operator'] = request.operator
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        if not UtilClient.is_unset(request.target_value):
            query['TargetValue'] = request.target_value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateMaliciousFileWhitelistConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateMaliciousFileWhitelistConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_malicious_file_whitelist_config_with_options_async(
        self,
        request: sas_20181203_models.CreateMaliciousFileWhitelistConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateMaliciousFileWhitelistConfigResponse:
        """
        @summary Creates an alert whitelist rule of sensitive files that are detected by using the agentless detection feature.
        
        @param request: CreateMaliciousFileWhitelistConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateMaliciousFileWhitelistConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.event_name):
            query['EventName'] = request.event_name
        if not UtilClient.is_unset(request.field):
            query['Field'] = request.field
        if not UtilClient.is_unset(request.field_value):
            query['FieldValue'] = request.field_value
        if not UtilClient.is_unset(request.operator):
            query['Operator'] = request.operator
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        if not UtilClient.is_unset(request.target_value):
            query['TargetValue'] = request.target_value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateMaliciousFileWhitelistConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateMaliciousFileWhitelistConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_malicious_file_whitelist_config(
        self,
        request: sas_20181203_models.CreateMaliciousFileWhitelistConfigRequest,
    ) -> sas_20181203_models.CreateMaliciousFileWhitelistConfigResponse:
        """
        @summary Creates an alert whitelist rule of sensitive files that are detected by using the agentless detection feature.
        
        @param request: CreateMaliciousFileWhitelistConfigRequest
        @return: CreateMaliciousFileWhitelistConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_malicious_file_whitelist_config_with_options(request, runtime)

    async def create_malicious_file_whitelist_config_async(
        self,
        request: sas_20181203_models.CreateMaliciousFileWhitelistConfigRequest,
    ) -> sas_20181203_models.CreateMaliciousFileWhitelistConfigResponse:
        """
        @summary Creates an alert whitelist rule of sensitive files that are detected by using the agentless detection feature.
        
        @param request: CreateMaliciousFileWhitelistConfigRequest
        @return: CreateMaliciousFileWhitelistConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_malicious_file_whitelist_config_with_options_async(request, runtime)

    def create_malicious_note_with_options(
        self,
        request: sas_20181203_models.CreateMaliciousNoteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateMaliciousNoteResponse:
        """
        @summary Adds remarks to alert events for agentless detection.
        
        @param request: CreateMaliciousNoteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateMaliciousNoteResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.event_id):
            query['EventId'] = request.event_id
        if not UtilClient.is_unset(request.note):
            query['Note'] = request.note
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateMaliciousNote',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateMaliciousNoteResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_malicious_note_with_options_async(
        self,
        request: sas_20181203_models.CreateMaliciousNoteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateMaliciousNoteResponse:
        """
        @summary Adds remarks to alert events for agentless detection.
        
        @param request: CreateMaliciousNoteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateMaliciousNoteResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.event_id):
            query['EventId'] = request.event_id
        if not UtilClient.is_unset(request.note):
            query['Note'] = request.note
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateMaliciousNote',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateMaliciousNoteResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_malicious_note(
        self,
        request: sas_20181203_models.CreateMaliciousNoteRequest,
    ) -> sas_20181203_models.CreateMaliciousNoteResponse:
        """
        @summary Adds remarks to alert events for agentless detection.
        
        @param request: CreateMaliciousNoteRequest
        @return: CreateMaliciousNoteResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_malicious_note_with_options(request, runtime)

    async def create_malicious_note_async(
        self,
        request: sas_20181203_models.CreateMaliciousNoteRequest,
    ) -> sas_20181203_models.CreateMaliciousNoteResponse:
        """
        @summary Adds remarks to alert events for agentless detection.
        
        @param request: CreateMaliciousNoteRequest
        @return: CreateMaliciousNoteResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_malicious_note_with_options_async(request, runtime)

    def create_monitor_account_with_options(
        self,
        request: sas_20181203_models.CreateMonitorAccountRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateMonitorAccountResponse:
        """
        @summary Creates a list of members of the account monitored by Security Center type by using the multi-account management feature.
        
        @description You can call this operation only by using the management account of a resource directory or a delegated administrator account of Security Center.
        
        @param request: CreateMonitorAccountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateMonitorAccountResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.account_ids):
            query['AccountIds'] = request.account_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateMonitorAccount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateMonitorAccountResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_monitor_account_with_options_async(
        self,
        request: sas_20181203_models.CreateMonitorAccountRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateMonitorAccountResponse:
        """
        @summary Creates a list of members of the account monitored by Security Center type by using the multi-account management feature.
        
        @description You can call this operation only by using the management account of a resource directory or a delegated administrator account of Security Center.
        
        @param request: CreateMonitorAccountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateMonitorAccountResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.account_ids):
            query['AccountIds'] = request.account_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateMonitorAccount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateMonitorAccountResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_monitor_account(
        self,
        request: sas_20181203_models.CreateMonitorAccountRequest,
    ) -> sas_20181203_models.CreateMonitorAccountResponse:
        """
        @summary Creates a list of members of the account monitored by Security Center type by using the multi-account management feature.
        
        @description You can call this operation only by using the management account of a resource directory or a delegated administrator account of Security Center.
        
        @param request: CreateMonitorAccountRequest
        @return: CreateMonitorAccountResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_monitor_account_with_options(request, runtime)

    async def create_monitor_account_async(
        self,
        request: sas_20181203_models.CreateMonitorAccountRequest,
    ) -> sas_20181203_models.CreateMonitorAccountResponse:
        """
        @summary Creates a list of members of the account monitored by Security Center type by using the multi-account management feature.
        
        @description You can call this operation only by using the management account of a resource directory or a delegated administrator account of Security Center.
        
        @param request: CreateMonitorAccountRequest
        @return: CreateMonitorAccountResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_monitor_account_with_options_async(request, runtime)

    def create_opa_cluster_plugin_with_options(
        self,
        request: sas_20181203_models.CreateOpaClusterPluginRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateOpaClusterPluginResponse:
        """
        @summary Installs the components that are required by at-risk image blocking. The components are policy-template-controller, gatekeeper, and logtail-ds.
        
        @param request: CreateOpaClusterPluginRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateOpaClusterPluginResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_ids):
            query['ClusterIds'] = request.cluster_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateOpaClusterPlugin',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateOpaClusterPluginResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_opa_cluster_plugin_with_options_async(
        self,
        request: sas_20181203_models.CreateOpaClusterPluginRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateOpaClusterPluginResponse:
        """
        @summary Installs the components that are required by at-risk image blocking. The components are policy-template-controller, gatekeeper, and logtail-ds.
        
        @param request: CreateOpaClusterPluginRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateOpaClusterPluginResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_ids):
            query['ClusterIds'] = request.cluster_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateOpaClusterPlugin',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateOpaClusterPluginResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_opa_cluster_plugin(
        self,
        request: sas_20181203_models.CreateOpaClusterPluginRequest,
    ) -> sas_20181203_models.CreateOpaClusterPluginResponse:
        """
        @summary Installs the components that are required by at-risk image blocking. The components are policy-template-controller, gatekeeper, and logtail-ds.
        
        @param request: CreateOpaClusterPluginRequest
        @return: CreateOpaClusterPluginResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_opa_cluster_plugin_with_options(request, runtime)

    async def create_opa_cluster_plugin_async(
        self,
        request: sas_20181203_models.CreateOpaClusterPluginRequest,
    ) -> sas_20181203_models.CreateOpaClusterPluginResponse:
        """
        @summary Installs the components that are required by at-risk image blocking. The components are policy-template-controller, gatekeeper, and logtail-ds.
        
        @param request: CreateOpaClusterPluginRequest
        @return: CreateOpaClusterPluginResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_opa_cluster_plugin_with_options_async(request, runtime)

    def create_opa_strategy_new_with_options(
        self,
        tmp_req: sas_20181203_models.CreateOpaStrategyNewRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateOpaStrategyNewResponse:
        """
        @summary Creates a rule to block at-risk images.
        
        @param tmp_req: CreateOpaStrategyNewRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateOpaStrategyNewResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.CreateOpaStrategyNewShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.alarm_detail):
            request.alarm_detail_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.alarm_detail, 'AlarmDetail', 'json')
        query = {}
        if not UtilClient.is_unset(request.alarm_detail_shrink):
            query['AlarmDetail'] = request.alarm_detail_shrink
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.description):
            query['Description'] = request.description
        if not UtilClient.is_unset(request.image_name):
            query['ImageName'] = request.image_name
        if not UtilClient.is_unset(request.label):
            query['Label'] = request.label
        if not UtilClient.is_unset(request.malicious_image):
            query['MaliciousImage'] = request.malicious_image
        if not UtilClient.is_unset(request.rule_action):
            query['RuleAction'] = request.rule_action
        if not UtilClient.is_unset(request.scopes):
            query['Scopes'] = request.scopes
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        if not UtilClient.is_unset(request.strategy_name):
            query['StrategyName'] = request.strategy_name
        if not UtilClient.is_unset(request.strategy_template_id):
            query['StrategyTemplateId'] = request.strategy_template_id
        if not UtilClient.is_unset(request.un_scaned_image):
            query['UnScanedImage'] = request.un_scaned_image
        if not UtilClient.is_unset(request.white_list):
            query['WhiteList'] = request.white_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateOpaStrategyNew',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateOpaStrategyNewResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_opa_strategy_new_with_options_async(
        self,
        tmp_req: sas_20181203_models.CreateOpaStrategyNewRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateOpaStrategyNewResponse:
        """
        @summary Creates a rule to block at-risk images.
        
        @param tmp_req: CreateOpaStrategyNewRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateOpaStrategyNewResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.CreateOpaStrategyNewShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.alarm_detail):
            request.alarm_detail_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.alarm_detail, 'AlarmDetail', 'json')
        query = {}
        if not UtilClient.is_unset(request.alarm_detail_shrink):
            query['AlarmDetail'] = request.alarm_detail_shrink
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.description):
            query['Description'] = request.description
        if not UtilClient.is_unset(request.image_name):
            query['ImageName'] = request.image_name
        if not UtilClient.is_unset(request.label):
            query['Label'] = request.label
        if not UtilClient.is_unset(request.malicious_image):
            query['MaliciousImage'] = request.malicious_image
        if not UtilClient.is_unset(request.rule_action):
            query['RuleAction'] = request.rule_action
        if not UtilClient.is_unset(request.scopes):
            query['Scopes'] = request.scopes
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        if not UtilClient.is_unset(request.strategy_name):
            query['StrategyName'] = request.strategy_name
        if not UtilClient.is_unset(request.strategy_template_id):
            query['StrategyTemplateId'] = request.strategy_template_id
        if not UtilClient.is_unset(request.un_scaned_image):
            query['UnScanedImage'] = request.un_scaned_image
        if not UtilClient.is_unset(request.white_list):
            query['WhiteList'] = request.white_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateOpaStrategyNew',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateOpaStrategyNewResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_opa_strategy_new(
        self,
        request: sas_20181203_models.CreateOpaStrategyNewRequest,
    ) -> sas_20181203_models.CreateOpaStrategyNewResponse:
        """
        @summary Creates a rule to block at-risk images.
        
        @param request: CreateOpaStrategyNewRequest
        @return: CreateOpaStrategyNewResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_opa_strategy_new_with_options(request, runtime)

    async def create_opa_strategy_new_async(
        self,
        request: sas_20181203_models.CreateOpaStrategyNewRequest,
    ) -> sas_20181203_models.CreateOpaStrategyNewResponse:
        """
        @summary Creates a rule to block at-risk images.
        
        @param request: CreateOpaStrategyNewRequest
        @return: CreateOpaStrategyNewResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_opa_strategy_new_with_options_async(request, runtime)

    def create_or_update_asset_group_with_options(
        self,
        request: sas_20181203_models.CreateOrUpdateAssetGroupRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateOrUpdateAssetGroupResponse:
        """
        @summary Modifies the mapping between an asset and an asset group. For example, you can call this operation to modify the server group to which the asset belongs or the asset list of the asset group.
        
        @description A server can belong only to one server group. If you call the CreateOrUpdateAssetGroup operation and the server specified in request parameters belongs to Server Group A, the server is removed from Server Group A and then added to the newly created or specified server group after the call is complete.
        
        @param request: CreateOrUpdateAssetGroupRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateOrUpdateAssetGroupResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.group_name):
            query['GroupName'] = request.group_name
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateOrUpdateAssetGroup',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateOrUpdateAssetGroupResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_or_update_asset_group_with_options_async(
        self,
        request: sas_20181203_models.CreateOrUpdateAssetGroupRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateOrUpdateAssetGroupResponse:
        """
        @summary Modifies the mapping between an asset and an asset group. For example, you can call this operation to modify the server group to which the asset belongs or the asset list of the asset group.
        
        @description A server can belong only to one server group. If you call the CreateOrUpdateAssetGroup operation and the server specified in request parameters belongs to Server Group A, the server is removed from Server Group A and then added to the newly created or specified server group after the call is complete.
        
        @param request: CreateOrUpdateAssetGroupRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateOrUpdateAssetGroupResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.group_name):
            query['GroupName'] = request.group_name
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateOrUpdateAssetGroup',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateOrUpdateAssetGroupResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_or_update_asset_group(
        self,
        request: sas_20181203_models.CreateOrUpdateAssetGroupRequest,
    ) -> sas_20181203_models.CreateOrUpdateAssetGroupResponse:
        """
        @summary Modifies the mapping between an asset and an asset group. For example, you can call this operation to modify the server group to which the asset belongs or the asset list of the asset group.
        
        @description A server can belong only to one server group. If you call the CreateOrUpdateAssetGroup operation and the server specified in request parameters belongs to Server Group A, the server is removed from Server Group A and then added to the newly created or specified server group after the call is complete.
        
        @param request: CreateOrUpdateAssetGroupRequest
        @return: CreateOrUpdateAssetGroupResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_or_update_asset_group_with_options(request, runtime)

    async def create_or_update_asset_group_async(
        self,
        request: sas_20181203_models.CreateOrUpdateAssetGroupRequest,
    ) -> sas_20181203_models.CreateOrUpdateAssetGroupResponse:
        """
        @summary Modifies the mapping between an asset and an asset group. For example, you can call this operation to modify the server group to which the asset belongs or the asset list of the asset group.
        
        @description A server can belong only to one server group. If you call the CreateOrUpdateAssetGroup operation and the server specified in request parameters belongs to Server Group A, the server is removed from Server Group A and then added to the newly created or specified server group after the call is complete.
        
        @param request: CreateOrUpdateAssetGroupRequest
        @return: CreateOrUpdateAssetGroupResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_or_update_asset_group_with_options_async(request, runtime)

    def create_or_update_auto_tag_rule_with_options(
        self,
        request: sas_20181203_models.CreateOrUpdateAutoTagRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateOrUpdateAutoTagRuleResponse:
        """
        @summary Creates an asset auto-tagging rule or modifies an asset auto-tagging rule that is created on the Asset Management Rule tab.
        
        @param request: CreateOrUpdateAutoTagRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateOrUpdateAutoTagRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_all):
            query['CheckAll'] = request.check_all
        if not UtilClient.is_unset(request.expression):
            query['Expression'] = request.expression
        if not UtilClient.is_unset(request.rule_desc):
            query['RuleDesc'] = request.rule_desc
        if not UtilClient.is_unset(request.rule_id):
            query['RuleId'] = request.rule_id
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.tag_context):
            query['TagContext'] = request.tag_context
        if not UtilClient.is_unset(request.tag_type):
            query['TagType'] = request.tag_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateOrUpdateAutoTagRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateOrUpdateAutoTagRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_or_update_auto_tag_rule_with_options_async(
        self,
        request: sas_20181203_models.CreateOrUpdateAutoTagRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateOrUpdateAutoTagRuleResponse:
        """
        @summary Creates an asset auto-tagging rule or modifies an asset auto-tagging rule that is created on the Asset Management Rule tab.
        
        @param request: CreateOrUpdateAutoTagRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateOrUpdateAutoTagRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_all):
            query['CheckAll'] = request.check_all
        if not UtilClient.is_unset(request.expression):
            query['Expression'] = request.expression
        if not UtilClient.is_unset(request.rule_desc):
            query['RuleDesc'] = request.rule_desc
        if not UtilClient.is_unset(request.rule_id):
            query['RuleId'] = request.rule_id
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.tag_context):
            query['TagContext'] = request.tag_context
        if not UtilClient.is_unset(request.tag_type):
            query['TagType'] = request.tag_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateOrUpdateAutoTagRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateOrUpdateAutoTagRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_or_update_auto_tag_rule(
        self,
        request: sas_20181203_models.CreateOrUpdateAutoTagRuleRequest,
    ) -> sas_20181203_models.CreateOrUpdateAutoTagRuleResponse:
        """
        @summary Creates an asset auto-tagging rule or modifies an asset auto-tagging rule that is created on the Asset Management Rule tab.
        
        @param request: CreateOrUpdateAutoTagRuleRequest
        @return: CreateOrUpdateAutoTagRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_or_update_auto_tag_rule_with_options(request, runtime)

    async def create_or_update_auto_tag_rule_async(
        self,
        request: sas_20181203_models.CreateOrUpdateAutoTagRuleRequest,
    ) -> sas_20181203_models.CreateOrUpdateAutoTagRuleResponse:
        """
        @summary Creates an asset auto-tagging rule or modifies an asset auto-tagging rule that is created on the Asset Management Rule tab.
        
        @param request: CreateOrUpdateAutoTagRuleRequest
        @return: CreateOrUpdateAutoTagRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_or_update_auto_tag_rule_with_options_async(request, runtime)

    def create_or_update_ding_talk_with_options(
        self,
        request: sas_20181203_models.CreateOrUpdateDingTalkRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateOrUpdateDingTalkResponse:
        """
        @summary Creates or modifies a DingTalk chatbot that sends notifications.
        
        @param request: CreateOrUpdateDingTalkRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateOrUpdateDingTalkResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_list):
            query['ConfigList'] = request.config_list
        if not UtilClient.is_unset(request.ding_talk_lang):
            query['DingTalkLang'] = request.ding_talk_lang
        if not UtilClient.is_unset(request.group_id_list):
            query['GroupIdList'] = request.group_id_list
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.interval_time):
            query['IntervalTime'] = request.interval_time
        if not UtilClient.is_unset(request.rule_action_name):
            query['RuleActionName'] = request.rule_action_name
        if not UtilClient.is_unset(request.send_url):
            query['SendUrl'] = request.send_url
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateOrUpdateDingTalk',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateOrUpdateDingTalkResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_or_update_ding_talk_with_options_async(
        self,
        request: sas_20181203_models.CreateOrUpdateDingTalkRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateOrUpdateDingTalkResponse:
        """
        @summary Creates or modifies a DingTalk chatbot that sends notifications.
        
        @param request: CreateOrUpdateDingTalkRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateOrUpdateDingTalkResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_list):
            query['ConfigList'] = request.config_list
        if not UtilClient.is_unset(request.ding_talk_lang):
            query['DingTalkLang'] = request.ding_talk_lang
        if not UtilClient.is_unset(request.group_id_list):
            query['GroupIdList'] = request.group_id_list
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.interval_time):
            query['IntervalTime'] = request.interval_time
        if not UtilClient.is_unset(request.rule_action_name):
            query['RuleActionName'] = request.rule_action_name
        if not UtilClient.is_unset(request.send_url):
            query['SendUrl'] = request.send_url
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateOrUpdateDingTalk',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateOrUpdateDingTalkResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_or_update_ding_talk(
        self,
        request: sas_20181203_models.CreateOrUpdateDingTalkRequest,
    ) -> sas_20181203_models.CreateOrUpdateDingTalkResponse:
        """
        @summary Creates or modifies a DingTalk chatbot that sends notifications.
        
        @param request: CreateOrUpdateDingTalkRequest
        @return: CreateOrUpdateDingTalkResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_or_update_ding_talk_with_options(request, runtime)

    async def create_or_update_ding_talk_async(
        self,
        request: sas_20181203_models.CreateOrUpdateDingTalkRequest,
    ) -> sas_20181203_models.CreateOrUpdateDingTalkResponse:
        """
        @summary Creates or modifies a DingTalk chatbot that sends notifications.
        
        @param request: CreateOrUpdateDingTalkRequest
        @return: CreateOrUpdateDingTalkResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_or_update_ding_talk_with_options_async(request, runtime)

    def create_oss_bucket_scan_task_with_options(
        self,
        request: sas_20181203_models.CreateOssBucketScanTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateOssBucketScanTaskResponse:
        """
        @summary Creates a bucket check task.
        
        @param request: CreateOssBucketScanTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateOssBucketScanTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.all_key_prefix):
            query['AllKeyPrefix'] = request.all_key_prefix
        if not UtilClient.is_unset(request.bucket_name_list):
            query['BucketNameList'] = request.bucket_name_list
        if not UtilClient.is_unset(request.decompress_max_file_count):
            query['DecompressMaxFileCount'] = request.decompress_max_file_count
        if not UtilClient.is_unset(request.decompress_max_layer):
            query['DecompressMaxLayer'] = request.decompress_max_layer
        if not UtilClient.is_unset(request.decryption_list):
            query['DecryptionList'] = request.decryption_list
        if not UtilClient.is_unset(request.exclude_key_suffix_list):
            query['ExcludeKeySuffixList'] = request.exclude_key_suffix_list
        if not UtilClient.is_unset(request.key_prefix_list):
            query['KeyPrefixList'] = request.key_prefix_list
        if not UtilClient.is_unset(request.key_suffix_list):
            query['KeySuffixList'] = request.key_suffix_list
        if not UtilClient.is_unset(request.last_modified_start_time):
            query['LastModifiedStartTime'] = request.last_modified_start_time
        if not UtilClient.is_unset(request.scan_mode):
            query['ScanMode'] = request.scan_mode
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateOssBucketScanTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateOssBucketScanTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_oss_bucket_scan_task_with_options_async(
        self,
        request: sas_20181203_models.CreateOssBucketScanTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateOssBucketScanTaskResponse:
        """
        @summary Creates a bucket check task.
        
        @param request: CreateOssBucketScanTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateOssBucketScanTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.all_key_prefix):
            query['AllKeyPrefix'] = request.all_key_prefix
        if not UtilClient.is_unset(request.bucket_name_list):
            query['BucketNameList'] = request.bucket_name_list
        if not UtilClient.is_unset(request.decompress_max_file_count):
            query['DecompressMaxFileCount'] = request.decompress_max_file_count
        if not UtilClient.is_unset(request.decompress_max_layer):
            query['DecompressMaxLayer'] = request.decompress_max_layer
        if not UtilClient.is_unset(request.decryption_list):
            query['DecryptionList'] = request.decryption_list
        if not UtilClient.is_unset(request.exclude_key_suffix_list):
            query['ExcludeKeySuffixList'] = request.exclude_key_suffix_list
        if not UtilClient.is_unset(request.key_prefix_list):
            query['KeyPrefixList'] = request.key_prefix_list
        if not UtilClient.is_unset(request.key_suffix_list):
            query['KeySuffixList'] = request.key_suffix_list
        if not UtilClient.is_unset(request.last_modified_start_time):
            query['LastModifiedStartTime'] = request.last_modified_start_time
        if not UtilClient.is_unset(request.scan_mode):
            query['ScanMode'] = request.scan_mode
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateOssBucketScanTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateOssBucketScanTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_oss_bucket_scan_task(
        self,
        request: sas_20181203_models.CreateOssBucketScanTaskRequest,
    ) -> sas_20181203_models.CreateOssBucketScanTaskResponse:
        """
        @summary Creates a bucket check task.
        
        @param request: CreateOssBucketScanTaskRequest
        @return: CreateOssBucketScanTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_oss_bucket_scan_task_with_options(request, runtime)

    async def create_oss_bucket_scan_task_async(
        self,
        request: sas_20181203_models.CreateOssBucketScanTaskRequest,
    ) -> sas_20181203_models.CreateOssBucketScanTaskResponse:
        """
        @summary Creates a bucket check task.
        
        @param request: CreateOssBucketScanTaskRequest
        @return: CreateOssBucketScanTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_oss_bucket_scan_task_with_options_async(request, runtime)

    def create_oss_scan_config_with_options(
        self,
        request: sas_20181203_models.CreateOssScanConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateOssScanConfigResponse:
        """
        @summary Creates a policy for detecting malicious Object Storage Service (OSS) objects by using the SDK for malicious file detection feature.
        
        @param request: CreateOssScanConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateOssScanConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.all_key_prefix):
            query['AllKeyPrefix'] = request.all_key_prefix
        if not UtilClient.is_unset(request.bucket_name_list):
            query['BucketNameList'] = request.bucket_name_list
        if not UtilClient.is_unset(request.decompress_max_file_count):
            query['DecompressMaxFileCount'] = request.decompress_max_file_count
        if not UtilClient.is_unset(request.decompress_max_layer):
            query['DecompressMaxLayer'] = request.decompress_max_layer
        if not UtilClient.is_unset(request.decryption_list):
            query['DecryptionList'] = request.decryption_list
        if not UtilClient.is_unset(request.enable):
            query['Enable'] = request.enable
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.key_prefix_list):
            query['KeyPrefixList'] = request.key_prefix_list
        if not UtilClient.is_unset(request.key_suffix_list):
            query['KeySuffixList'] = request.key_suffix_list
        if not UtilClient.is_unset(request.last_modified_start_time):
            query['LastModifiedStartTime'] = request.last_modified_start_time
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.real_time_incr):
            query['RealTimeIncr'] = request.real_time_incr
        if not UtilClient.is_unset(request.scan_day_list):
            query['ScanDayList'] = request.scan_day_list
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateOssScanConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateOssScanConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_oss_scan_config_with_options_async(
        self,
        request: sas_20181203_models.CreateOssScanConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateOssScanConfigResponse:
        """
        @summary Creates a policy for detecting malicious Object Storage Service (OSS) objects by using the SDK for malicious file detection feature.
        
        @param request: CreateOssScanConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateOssScanConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.all_key_prefix):
            query['AllKeyPrefix'] = request.all_key_prefix
        if not UtilClient.is_unset(request.bucket_name_list):
            query['BucketNameList'] = request.bucket_name_list
        if not UtilClient.is_unset(request.decompress_max_file_count):
            query['DecompressMaxFileCount'] = request.decompress_max_file_count
        if not UtilClient.is_unset(request.decompress_max_layer):
            query['DecompressMaxLayer'] = request.decompress_max_layer
        if not UtilClient.is_unset(request.decryption_list):
            query['DecryptionList'] = request.decryption_list
        if not UtilClient.is_unset(request.enable):
            query['Enable'] = request.enable
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.key_prefix_list):
            query['KeyPrefixList'] = request.key_prefix_list
        if not UtilClient.is_unset(request.key_suffix_list):
            query['KeySuffixList'] = request.key_suffix_list
        if not UtilClient.is_unset(request.last_modified_start_time):
            query['LastModifiedStartTime'] = request.last_modified_start_time
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.real_time_incr):
            query['RealTimeIncr'] = request.real_time_incr
        if not UtilClient.is_unset(request.scan_day_list):
            query['ScanDayList'] = request.scan_day_list
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateOssScanConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateOssScanConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_oss_scan_config(
        self,
        request: sas_20181203_models.CreateOssScanConfigRequest,
    ) -> sas_20181203_models.CreateOssScanConfigResponse:
        """
        @summary Creates a policy for detecting malicious Object Storage Service (OSS) objects by using the SDK for malicious file detection feature.
        
        @param request: CreateOssScanConfigRequest
        @return: CreateOssScanConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_oss_scan_config_with_options(request, runtime)

    async def create_oss_scan_config_async(
        self,
        request: sas_20181203_models.CreateOssScanConfigRequest,
    ) -> sas_20181203_models.CreateOssScanConfigResponse:
        """
        @summary Creates a policy for detecting malicious Object Storage Service (OSS) objects by using the SDK for malicious file detection feature.
        
        @param request: CreateOssScanConfigRequest
        @return: CreateOssScanConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_oss_scan_config_with_options_async(request, runtime)

    def create_rd_default_sync_list_with_options(
        self,
        request: sas_20181203_models.CreateRdDefaultSyncListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateRdDefaultSyncListResponse:
        """
        @summary Creates an automatic account management policy for members of the account monitored by Security Center type by using the multi-account management feature. After the policy is created, the members that are newly added to the specified resource directory are automatically added to the list of members of the account monitored by Security Center type.
        
        @description You can call this operation only by using the management account of a resource directory or a delegated administrator account of Security Center.
        
        @param request: CreateRdDefaultSyncListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateRdDefaultSyncListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.folder_ids):
            query['FolderIds'] = request.folder_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateRdDefaultSyncList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateRdDefaultSyncListResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_rd_default_sync_list_with_options_async(
        self,
        request: sas_20181203_models.CreateRdDefaultSyncListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateRdDefaultSyncListResponse:
        """
        @summary Creates an automatic account management policy for members of the account monitored by Security Center type by using the multi-account management feature. After the policy is created, the members that are newly added to the specified resource directory are automatically added to the list of members of the account monitored by Security Center type.
        
        @description You can call this operation only by using the management account of a resource directory or a delegated administrator account of Security Center.
        
        @param request: CreateRdDefaultSyncListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateRdDefaultSyncListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.folder_ids):
            query['FolderIds'] = request.folder_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateRdDefaultSyncList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateRdDefaultSyncListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_rd_default_sync_list(
        self,
        request: sas_20181203_models.CreateRdDefaultSyncListRequest,
    ) -> sas_20181203_models.CreateRdDefaultSyncListResponse:
        """
        @summary Creates an automatic account management policy for members of the account monitored by Security Center type by using the multi-account management feature. After the policy is created, the members that are newly added to the specified resource directory are automatically added to the list of members of the account monitored by Security Center type.
        
        @description You can call this operation only by using the management account of a resource directory or a delegated administrator account of Security Center.
        
        @param request: CreateRdDefaultSyncListRequest
        @return: CreateRdDefaultSyncListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_rd_default_sync_list_with_options(request, runtime)

    async def create_rd_default_sync_list_async(
        self,
        request: sas_20181203_models.CreateRdDefaultSyncListRequest,
    ) -> sas_20181203_models.CreateRdDefaultSyncListResponse:
        """
        @summary Creates an automatic account management policy for members of the account monitored by Security Center type by using the multi-account management feature. After the policy is created, the members that are newly added to the specified resource directory are automatically added to the list of members of the account monitored by Security Center type.
        
        @description You can call this operation only by using the management account of a resource directory or a delegated administrator account of Security Center.
        
        @param request: CreateRdDefaultSyncListRequest
        @return: CreateRdDefaultSyncListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_rd_default_sync_list_with_options_async(request, runtime)

    def create_restore_job_with_options(
        self,
        request: sas_20181203_models.CreateRestoreJobRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateRestoreJobResponse:
        """
        @summary Creates a restoration task.
        
        @param request: CreateRestoreJobRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateRestoreJobResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.includes):
            query['Includes'] = request.includes
        if not UtilClient.is_unset(request.snapshot_hash):
            query['SnapshotHash'] = request.snapshot_hash
        if not UtilClient.is_unset(request.snapshot_id):
            query['SnapshotId'] = request.snapshot_id
        if not UtilClient.is_unset(request.snapshot_version):
            query['SnapshotVersion'] = request.snapshot_version
        if not UtilClient.is_unset(request.source_type):
            query['SourceType'] = request.source_type
        if not UtilClient.is_unset(request.target):
            query['Target'] = request.target
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        if not UtilClient.is_unset(request.vault_id):
            query['VaultId'] = request.vault_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateRestoreJob',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateRestoreJobResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_restore_job_with_options_async(
        self,
        request: sas_20181203_models.CreateRestoreJobRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateRestoreJobResponse:
        """
        @summary Creates a restoration task.
        
        @param request: CreateRestoreJobRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateRestoreJobResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.includes):
            query['Includes'] = request.includes
        if not UtilClient.is_unset(request.snapshot_hash):
            query['SnapshotHash'] = request.snapshot_hash
        if not UtilClient.is_unset(request.snapshot_id):
            query['SnapshotId'] = request.snapshot_id
        if not UtilClient.is_unset(request.snapshot_version):
            query['SnapshotVersion'] = request.snapshot_version
        if not UtilClient.is_unset(request.source_type):
            query['SourceType'] = request.source_type
        if not UtilClient.is_unset(request.target):
            query['Target'] = request.target
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        if not UtilClient.is_unset(request.vault_id):
            query['VaultId'] = request.vault_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateRestoreJob',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateRestoreJobResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_restore_job(
        self,
        request: sas_20181203_models.CreateRestoreJobRequest,
    ) -> sas_20181203_models.CreateRestoreJobResponse:
        """
        @summary Creates a restoration task.
        
        @param request: CreateRestoreJobRequest
        @return: CreateRestoreJobResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_restore_job_with_options(request, runtime)

    async def create_restore_job_async(
        self,
        request: sas_20181203_models.CreateRestoreJobRequest,
    ) -> sas_20181203_models.CreateRestoreJobResponse:
        """
        @summary Creates a restoration task.
        
        @param request: CreateRestoreJobRequest
        @return: CreateRestoreJobResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_restore_job_with_options_async(request, runtime)

    def create_sas_trial_with_options(
        self,
        tmp_req: sas_20181203_models.CreateSasTrialRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateSasTrialResponse:
        """
        @summary Applies for a trial of Security Center.
        
        @param tmp_req: CreateSasTrialRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateSasTrialResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.CreateSasTrialShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.request_form):
            request.request_form_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.request_form, 'RequestForm', 'json')
        body = {}
        if not UtilClient.is_unset(request.from_ecs):
            body['FromEcs'] = request.from_ecs
        if not UtilClient.is_unset(request.lang):
            body['Lang'] = request.lang
        if not UtilClient.is_unset(request.request_form_shrink):
            body['RequestForm'] = request.request_form_shrink
        if not UtilClient.is_unset(request.try_type):
            body['TryType'] = request.try_type
        if not UtilClient.is_unset(request.try_version):
            body['TryVersion'] = request.try_version
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateSasTrial',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateSasTrialResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_sas_trial_with_options_async(
        self,
        tmp_req: sas_20181203_models.CreateSasTrialRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateSasTrialResponse:
        """
        @summary Applies for a trial of Security Center.
        
        @param tmp_req: CreateSasTrialRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateSasTrialResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.CreateSasTrialShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.request_form):
            request.request_form_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.request_form, 'RequestForm', 'json')
        body = {}
        if not UtilClient.is_unset(request.from_ecs):
            body['FromEcs'] = request.from_ecs
        if not UtilClient.is_unset(request.lang):
            body['Lang'] = request.lang
        if not UtilClient.is_unset(request.request_form_shrink):
            body['RequestForm'] = request.request_form_shrink
        if not UtilClient.is_unset(request.try_type):
            body['TryType'] = request.try_type
        if not UtilClient.is_unset(request.try_version):
            body['TryVersion'] = request.try_version
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateSasTrial',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateSasTrialResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_sas_trial(
        self,
        request: sas_20181203_models.CreateSasTrialRequest,
    ) -> sas_20181203_models.CreateSasTrialResponse:
        """
        @summary Applies for a trial of Security Center.
        
        @param request: CreateSasTrialRequest
        @return: CreateSasTrialResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_sas_trial_with_options(request, runtime)

    async def create_sas_trial_async(
        self,
        request: sas_20181203_models.CreateSasTrialRequest,
    ) -> sas_20181203_models.CreateSasTrialResponse:
        """
        @summary Applies for a trial of Security Center.
        
        @param request: CreateSasTrialRequest
        @return: CreateSasTrialResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_sas_trial_with_options_async(request, runtime)

    def create_service_linked_role_with_options(
        self,
        request: sas_20181203_models.CreateServiceLinkedRoleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateServiceLinkedRoleResponse:
        """
        @summary Creates a service-linked role and authorizes Security Center to access cloud resources.
        
        @description For more information about service-linked roles, see [Service-linked roles](https://help.aliyun.com/document_detail/160674.html).
        
        @param request: CreateServiceLinkedRoleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateServiceLinkedRoleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.service_linked_role):
            query['ServiceLinkedRole'] = request.service_linked_role
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateServiceLinkedRole',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateServiceLinkedRoleResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_service_linked_role_with_options_async(
        self,
        request: sas_20181203_models.CreateServiceLinkedRoleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateServiceLinkedRoleResponse:
        """
        @summary Creates a service-linked role and authorizes Security Center to access cloud resources.
        
        @description For more information about service-linked roles, see [Service-linked roles](https://help.aliyun.com/document_detail/160674.html).
        
        @param request: CreateServiceLinkedRoleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateServiceLinkedRoleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.service_linked_role):
            query['ServiceLinkedRole'] = request.service_linked_role
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateServiceLinkedRole',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateServiceLinkedRoleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_service_linked_role(
        self,
        request: sas_20181203_models.CreateServiceLinkedRoleRequest,
    ) -> sas_20181203_models.CreateServiceLinkedRoleResponse:
        """
        @summary Creates a service-linked role and authorizes Security Center to access cloud resources.
        
        @description For more information about service-linked roles, see [Service-linked roles](https://help.aliyun.com/document_detail/160674.html).
        
        @param request: CreateServiceLinkedRoleRequest
        @return: CreateServiceLinkedRoleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_service_linked_role_with_options(request, runtime)

    async def create_service_linked_role_async(
        self,
        request: sas_20181203_models.CreateServiceLinkedRoleRequest,
    ) -> sas_20181203_models.CreateServiceLinkedRoleResponse:
        """
        @summary Creates a service-linked role and authorizes Security Center to access cloud resources.
        
        @description For more information about service-linked roles, see [Service-linked roles](https://help.aliyun.com/document_detail/160674.html).
        
        @param request: CreateServiceLinkedRoleRequest
        @return: CreateServiceLinkedRoleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_service_linked_role_with_options_async(request, runtime)

    def create_service_trail_with_options(
        self,
        request: sas_20181203_models.CreateServiceTrailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateServiceTrailResponse:
        """
        @summary Create a service trail.
        
        @param request: CreateServiceTrailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateServiceTrailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateServiceTrail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateServiceTrailResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_service_trail_with_options_async(
        self,
        request: sas_20181203_models.CreateServiceTrailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateServiceTrailResponse:
        """
        @summary Create a service trail.
        
        @param request: CreateServiceTrailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateServiceTrailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateServiceTrail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateServiceTrailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_service_trail(
        self,
        request: sas_20181203_models.CreateServiceTrailRequest,
    ) -> sas_20181203_models.CreateServiceTrailResponse:
        """
        @summary Create a service trail.
        
        @param request: CreateServiceTrailRequest
        @return: CreateServiceTrailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_service_trail_with_options(request, runtime)

    async def create_service_trail_async(
        self,
        request: sas_20181203_models.CreateServiceTrailRequest,
    ) -> sas_20181203_models.CreateServiceTrailResponse:
        """
        @summary Create a service trail.
        
        @param request: CreateServiceTrailRequest
        @return: CreateServiceTrailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_service_trail_with_options_async(request, runtime)

    def create_similar_security_events_query_task_with_options(
        self,
        request: sas_20181203_models.CreateSimilarSecurityEventsQueryTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateSimilarSecurityEventsQueryTaskResponse:
        """
        @summary Creates a task to query alert events that are triggered by the same rule or of the same alert type.
        
        @param request: CreateSimilarSecurityEventsQueryTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateSimilarSecurityEventsQueryTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.security_event_id):
            query['SecurityEventId'] = request.security_event_id
        if not UtilClient.is_unset(request.similar_event_scenario_code):
            query['SimilarEventScenarioCode'] = request.similar_event_scenario_code
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateSimilarSecurityEventsQueryTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateSimilarSecurityEventsQueryTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_similar_security_events_query_task_with_options_async(
        self,
        request: sas_20181203_models.CreateSimilarSecurityEventsQueryTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateSimilarSecurityEventsQueryTaskResponse:
        """
        @summary Creates a task to query alert events that are triggered by the same rule or of the same alert type.
        
        @param request: CreateSimilarSecurityEventsQueryTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateSimilarSecurityEventsQueryTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.security_event_id):
            query['SecurityEventId'] = request.security_event_id
        if not UtilClient.is_unset(request.similar_event_scenario_code):
            query['SimilarEventScenarioCode'] = request.similar_event_scenario_code
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateSimilarSecurityEventsQueryTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateSimilarSecurityEventsQueryTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_similar_security_events_query_task(
        self,
        request: sas_20181203_models.CreateSimilarSecurityEventsQueryTaskRequest,
    ) -> sas_20181203_models.CreateSimilarSecurityEventsQueryTaskResponse:
        """
        @summary Creates a task to query alert events that are triggered by the same rule or of the same alert type.
        
        @param request: CreateSimilarSecurityEventsQueryTaskRequest
        @return: CreateSimilarSecurityEventsQueryTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_similar_security_events_query_task_with_options(request, runtime)

    async def create_similar_security_events_query_task_async(
        self,
        request: sas_20181203_models.CreateSimilarSecurityEventsQueryTaskRequest,
    ) -> sas_20181203_models.CreateSimilarSecurityEventsQueryTaskResponse:
        """
        @summary Creates a task to query alert events that are triggered by the same rule or of the same alert type.
        
        @param request: CreateSimilarSecurityEventsQueryTaskRequest
        @return: CreateSimilarSecurityEventsQueryTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_similar_security_events_query_task_with_options_async(request, runtime)

    def create_soar_strategy_task_with_options(
        self,
        request: sas_20181203_models.CreateSoarStrategyTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateSoarStrategyTaskResponse:
        """
        @summary Creates a task on the My Policies tab of the Playbook page.
        
        @description Only the Enterprise and Ultimate editions of Security Center support this API operation.
        
        @param request: CreateSoarStrategyTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateSoarStrategyTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        if not UtilClient.is_unset(request.strategy_name):
            query['StrategyName'] = request.strategy_name
        if not UtilClient.is_unset(request.strategy_task_name):
            query['StrategyTaskName'] = request.strategy_task_name
        if not UtilClient.is_unset(request.strategy_task_params):
            query['StrategyTaskParams'] = request.strategy_task_params
        if not UtilClient.is_unset(request.strategy_task_plan_exe_time):
            query['StrategyTaskPlanExeTime'] = request.strategy_task_plan_exe_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateSoarStrategyTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateSoarStrategyTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_soar_strategy_task_with_options_async(
        self,
        request: sas_20181203_models.CreateSoarStrategyTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateSoarStrategyTaskResponse:
        """
        @summary Creates a task on the My Policies tab of the Playbook page.
        
        @description Only the Enterprise and Ultimate editions of Security Center support this API operation.
        
        @param request: CreateSoarStrategyTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateSoarStrategyTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        if not UtilClient.is_unset(request.strategy_name):
            query['StrategyName'] = request.strategy_name
        if not UtilClient.is_unset(request.strategy_task_name):
            query['StrategyTaskName'] = request.strategy_task_name
        if not UtilClient.is_unset(request.strategy_task_params):
            query['StrategyTaskParams'] = request.strategy_task_params
        if not UtilClient.is_unset(request.strategy_task_plan_exe_time):
            query['StrategyTaskPlanExeTime'] = request.strategy_task_plan_exe_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateSoarStrategyTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateSoarStrategyTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_soar_strategy_task(
        self,
        request: sas_20181203_models.CreateSoarStrategyTaskRequest,
    ) -> sas_20181203_models.CreateSoarStrategyTaskResponse:
        """
        @summary Creates a task on the My Policies tab of the Playbook page.
        
        @description Only the Enterprise and Ultimate editions of Security Center support this API operation.
        
        @param request: CreateSoarStrategyTaskRequest
        @return: CreateSoarStrategyTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_soar_strategy_task_with_options(request, runtime)

    async def create_soar_strategy_task_async(
        self,
        request: sas_20181203_models.CreateSoarStrategyTaskRequest,
    ) -> sas_20181203_models.CreateSoarStrategyTaskResponse:
        """
        @summary Creates a task on the My Policies tab of the Playbook page.
        
        @description Only the Enterprise and Ultimate editions of Security Center support this API operation.
        
        @param request: CreateSoarStrategyTaskRequest
        @return: CreateSoarStrategyTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_soar_strategy_task_with_options_async(request, runtime)

    def create_susp_event_note_with_options(
        self,
        request: sas_20181203_models.CreateSuspEventNoteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateSuspEventNoteResponse:
        """
        @summary Adds remarks to an alert event.
        
        @param request: CreateSuspEventNoteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateSuspEventNoteResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.event_id):
            query['EventId'] = request.event_id
        if not UtilClient.is_unset(request.note):
            query['Note'] = request.note
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateSuspEventNote',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateSuspEventNoteResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_susp_event_note_with_options_async(
        self,
        request: sas_20181203_models.CreateSuspEventNoteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateSuspEventNoteResponse:
        """
        @summary Adds remarks to an alert event.
        
        @param request: CreateSuspEventNoteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateSuspEventNoteResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.event_id):
            query['EventId'] = request.event_id
        if not UtilClient.is_unset(request.note):
            query['Note'] = request.note
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateSuspEventNote',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateSuspEventNoteResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_susp_event_note(
        self,
        request: sas_20181203_models.CreateSuspEventNoteRequest,
    ) -> sas_20181203_models.CreateSuspEventNoteResponse:
        """
        @summary Adds remarks to an alert event.
        
        @param request: CreateSuspEventNoteRequest
        @return: CreateSuspEventNoteResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_susp_event_note_with_options(request, runtime)

    async def create_susp_event_note_async(
        self,
        request: sas_20181203_models.CreateSuspEventNoteRequest,
    ) -> sas_20181203_models.CreateSuspEventNoteResponse:
        """
        @summary Adds remarks to an alert event.
        
        @param request: CreateSuspEventNoteRequest
        @return: CreateSuspEventNoteResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_susp_event_note_with_options_async(request, runtime)

    def create_uni_backup_policy_with_options(
        self,
        tmp_req: sas_20181203_models.CreateUniBackupPolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateUniBackupPolicyResponse:
        """
        @summary Creates an anti-ransomware policy for a database.
        
        @param tmp_req: CreateUniBackupPolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateUniBackupPolicyResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.CreateUniBackupPolicyShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.full_plan):
            request.full_plan_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.full_plan, 'FullPlan', 'json')
        if not UtilClient.is_unset(tmp_req.inc_plan):
            request.inc_plan_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.inc_plan, 'IncPlan', 'json')
        query = {}
        if not UtilClient.is_unset(request.account_name):
            query['AccountName'] = request.account_name
        if not UtilClient.is_unset(request.account_password):
            query['AccountPassword'] = request.account_password
        if not UtilClient.is_unset(request.database_add_by_user):
            query['DatabaseAddByUser'] = request.database_add_by_user
        if not UtilClient.is_unset(request.database_type):
            query['DatabaseType'] = request.database_type
        if not UtilClient.is_unset(request.full_plan_shrink):
            query['FullPlan'] = request.full_plan_shrink
        if not UtilClient.is_unset(request.inc_plan_shrink):
            query['IncPlan'] = request.inc_plan_shrink
        if not UtilClient.is_unset(request.instance_id):
            query['InstanceId'] = request.instance_id
        if not UtilClient.is_unset(request.policy_name):
            query['PolicyName'] = request.policy_name
        if not UtilClient.is_unset(request.retention):
            query['Retention'] = request.retention
        if not UtilClient.is_unset(request.speed_limiter):
            query['SpeedLimiter'] = request.speed_limiter
        if not UtilClient.is_unset(request.uni_region_id):
            query['UniRegionId'] = request.uni_region_id
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateUniBackupPolicy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateUniBackupPolicyResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_uni_backup_policy_with_options_async(
        self,
        tmp_req: sas_20181203_models.CreateUniBackupPolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateUniBackupPolicyResponse:
        """
        @summary Creates an anti-ransomware policy for a database.
        
        @param tmp_req: CreateUniBackupPolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateUniBackupPolicyResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.CreateUniBackupPolicyShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.full_plan):
            request.full_plan_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.full_plan, 'FullPlan', 'json')
        if not UtilClient.is_unset(tmp_req.inc_plan):
            request.inc_plan_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.inc_plan, 'IncPlan', 'json')
        query = {}
        if not UtilClient.is_unset(request.account_name):
            query['AccountName'] = request.account_name
        if not UtilClient.is_unset(request.account_password):
            query['AccountPassword'] = request.account_password
        if not UtilClient.is_unset(request.database_add_by_user):
            query['DatabaseAddByUser'] = request.database_add_by_user
        if not UtilClient.is_unset(request.database_type):
            query['DatabaseType'] = request.database_type
        if not UtilClient.is_unset(request.full_plan_shrink):
            query['FullPlan'] = request.full_plan_shrink
        if not UtilClient.is_unset(request.inc_plan_shrink):
            query['IncPlan'] = request.inc_plan_shrink
        if not UtilClient.is_unset(request.instance_id):
            query['InstanceId'] = request.instance_id
        if not UtilClient.is_unset(request.policy_name):
            query['PolicyName'] = request.policy_name
        if not UtilClient.is_unset(request.retention):
            query['Retention'] = request.retention
        if not UtilClient.is_unset(request.speed_limiter):
            query['SpeedLimiter'] = request.speed_limiter
        if not UtilClient.is_unset(request.uni_region_id):
            query['UniRegionId'] = request.uni_region_id
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateUniBackupPolicy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateUniBackupPolicyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_uni_backup_policy(
        self,
        request: sas_20181203_models.CreateUniBackupPolicyRequest,
    ) -> sas_20181203_models.CreateUniBackupPolicyResponse:
        """
        @summary Creates an anti-ransomware policy for a database.
        
        @param request: CreateUniBackupPolicyRequest
        @return: CreateUniBackupPolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_uni_backup_policy_with_options(request, runtime)

    async def create_uni_backup_policy_async(
        self,
        request: sas_20181203_models.CreateUniBackupPolicyRequest,
    ) -> sas_20181203_models.CreateUniBackupPolicyResponse:
        """
        @summary Creates an anti-ransomware policy for a database.
        
        @param request: CreateUniBackupPolicyRequest
        @return: CreateUniBackupPolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_uni_backup_policy_with_options_async(request, runtime)

    def create_uni_restore_plan_with_options(
        self,
        request: sas_20181203_models.CreateUniRestorePlanRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateUniRestorePlanResponse:
        """
        @summary Creates a restoration task for a database.
        
        @param request: CreateUniRestorePlanRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateUniRestorePlanResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.database):
            query['Database'] = request.database
        if not UtilClient.is_unset(request.instance_uuid):
            query['InstanceUuid'] = request.instance_uuid
        if not UtilClient.is_unset(request.policy_id):
            query['PolicyId'] = request.policy_id
        if not UtilClient.is_unset(request.reset_scn):
            query['ResetScn'] = request.reset_scn
        if not UtilClient.is_unset(request.reset_time):
            query['ResetTime'] = request.reset_time
        if not UtilClient.is_unset(request.restore_info):
            query['RestoreInfo'] = request.restore_info
        if not UtilClient.is_unset(request.time_point):
            query['TimePoint'] = request.time_point
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateUniRestorePlan',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateUniRestorePlanResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_uni_restore_plan_with_options_async(
        self,
        request: sas_20181203_models.CreateUniRestorePlanRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateUniRestorePlanResponse:
        """
        @summary Creates a restoration task for a database.
        
        @param request: CreateUniRestorePlanRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateUniRestorePlanResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.database):
            query['Database'] = request.database
        if not UtilClient.is_unset(request.instance_uuid):
            query['InstanceUuid'] = request.instance_uuid
        if not UtilClient.is_unset(request.policy_id):
            query['PolicyId'] = request.policy_id
        if not UtilClient.is_unset(request.reset_scn):
            query['ResetScn'] = request.reset_scn
        if not UtilClient.is_unset(request.reset_time):
            query['ResetTime'] = request.reset_time
        if not UtilClient.is_unset(request.restore_info):
            query['RestoreInfo'] = request.restore_info
        if not UtilClient.is_unset(request.time_point):
            query['TimePoint'] = request.time_point
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateUniRestorePlan',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateUniRestorePlanResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_uni_restore_plan(
        self,
        request: sas_20181203_models.CreateUniRestorePlanRequest,
    ) -> sas_20181203_models.CreateUniRestorePlanResponse:
        """
        @summary Creates a restoration task for a database.
        
        @param request: CreateUniRestorePlanRequest
        @return: CreateUniRestorePlanResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_uni_restore_plan_with_options(request, runtime)

    async def create_uni_restore_plan_async(
        self,
        request: sas_20181203_models.CreateUniRestorePlanRequest,
    ) -> sas_20181203_models.CreateUniRestorePlanResponse:
        """
        @summary Creates a restoration task for a database.
        
        @param request: CreateUniRestorePlanRequest
        @return: CreateUniRestorePlanResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_uni_restore_plan_with_options_async(request, runtime)

    def create_user_setting_with_options(
        self,
        request: sas_20181203_models.CreateUserSettingRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateUserSettingResponse:
        """
        @summary Creates the risk level settings for baseline check items.
        
        @param request: CreateUserSettingRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateUserSettingResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.alert_levels):
            query['AlertLevels'] = request.alert_levels
        if not UtilClient.is_unset(request.invalid_warning_keep_days):
            query['InvalidWarningKeepDays'] = request.invalid_warning_keep_days
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateUserSetting',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateUserSettingResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_user_setting_with_options_async(
        self,
        request: sas_20181203_models.CreateUserSettingRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateUserSettingResponse:
        """
        @summary Creates the risk level settings for baseline check items.
        
        @param request: CreateUserSettingRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateUserSettingResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.alert_levels):
            query['AlertLevels'] = request.alert_levels
        if not UtilClient.is_unset(request.invalid_warning_keep_days):
            query['InvalidWarningKeepDays'] = request.invalid_warning_keep_days
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateUserSetting',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateUserSettingResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_user_setting(
        self,
        request: sas_20181203_models.CreateUserSettingRequest,
    ) -> sas_20181203_models.CreateUserSettingResponse:
        """
        @summary Creates the risk level settings for baseline check items.
        
        @param request: CreateUserSettingRequest
        @return: CreateUserSettingResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_user_setting_with_options(request, runtime)

    async def create_user_setting_async(
        self,
        request: sas_20181203_models.CreateUserSettingRequest,
    ) -> sas_20181203_models.CreateUserSettingResponse:
        """
        @summary Creates the risk level settings for baseline check items.
        
        @param request: CreateUserSettingRequest
        @return: CreateUserSettingResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_user_setting_with_options_async(request, runtime)

    def create_virus_scan_once_task_with_options(
        self,
        request: sas_20181203_models.CreateVirusScanOnceTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateVirusScanOnceTaskResponse:
        """
        @summary Creates a one-time virus scan task that is immediately executed.
        
        @param request: CreateVirusScanOnceTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateVirusScanOnceTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.param):
            query['Param'] = request.param
        if not UtilClient.is_unset(request.scan_path):
            query['ScanPath'] = request.scan_path
        if not UtilClient.is_unset(request.scan_type):
            query['ScanType'] = request.scan_type
        if not UtilClient.is_unset(request.selection_key):
            query['SelectionKey'] = request.selection_key
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateVirusScanOnceTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateVirusScanOnceTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_virus_scan_once_task_with_options_async(
        self,
        request: sas_20181203_models.CreateVirusScanOnceTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateVirusScanOnceTaskResponse:
        """
        @summary Creates a one-time virus scan task that is immediately executed.
        
        @param request: CreateVirusScanOnceTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateVirusScanOnceTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.param):
            query['Param'] = request.param
        if not UtilClient.is_unset(request.scan_path):
            query['ScanPath'] = request.scan_path
        if not UtilClient.is_unset(request.scan_type):
            query['ScanType'] = request.scan_type
        if not UtilClient.is_unset(request.selection_key):
            query['SelectionKey'] = request.selection_key
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateVirusScanOnceTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateVirusScanOnceTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_virus_scan_once_task(
        self,
        request: sas_20181203_models.CreateVirusScanOnceTaskRequest,
    ) -> sas_20181203_models.CreateVirusScanOnceTaskResponse:
        """
        @summary Creates a one-time virus scan task that is immediately executed.
        
        @param request: CreateVirusScanOnceTaskRequest
        @return: CreateVirusScanOnceTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_virus_scan_once_task_with_options(request, runtime)

    async def create_virus_scan_once_task_async(
        self,
        request: sas_20181203_models.CreateVirusScanOnceTaskRequest,
    ) -> sas_20181203_models.CreateVirusScanOnceTaskResponse:
        """
        @summary Creates a one-time virus scan task that is immediately executed.
        
        @param request: CreateVirusScanOnceTaskRequest
        @return: CreateVirusScanOnceTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_virus_scan_once_task_with_options_async(request, runtime)

    def create_vul_auto_repair_config_with_options(
        self,
        request: sas_20181203_models.CreateVulAutoRepairConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateVulAutoRepairConfigResponse:
        """
        @summary Creates a list of vulnerabilities that can be automatically fixed. After the list is created, you can select the list when you create a vulnerability fixing task on the Playbook page.
        
        @param request: CreateVulAutoRepairConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateVulAutoRepairConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.reason):
            query['Reason'] = request.reason
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.vul_auto_repair_config_list):
            query['VulAutoRepairConfigList'] = request.vul_auto_repair_config_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateVulAutoRepairConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateVulAutoRepairConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_vul_auto_repair_config_with_options_async(
        self,
        request: sas_20181203_models.CreateVulAutoRepairConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.CreateVulAutoRepairConfigResponse:
        """
        @summary Creates a list of vulnerabilities that can be automatically fixed. After the list is created, you can select the list when you create a vulnerability fixing task on the Playbook page.
        
        @param request: CreateVulAutoRepairConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateVulAutoRepairConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.reason):
            query['Reason'] = request.reason
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.vul_auto_repair_config_list):
            query['VulAutoRepairConfigList'] = request.vul_auto_repair_config_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateVulAutoRepairConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.CreateVulAutoRepairConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_vul_auto_repair_config(
        self,
        request: sas_20181203_models.CreateVulAutoRepairConfigRequest,
    ) -> sas_20181203_models.CreateVulAutoRepairConfigResponse:
        """
        @summary Creates a list of vulnerabilities that can be automatically fixed. After the list is created, you can select the list when you create a vulnerability fixing task on the Playbook page.
        
        @param request: CreateVulAutoRepairConfigRequest
        @return: CreateVulAutoRepairConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_vul_auto_repair_config_with_options(request, runtime)

    async def create_vul_auto_repair_config_async(
        self,
        request: sas_20181203_models.CreateVulAutoRepairConfigRequest,
    ) -> sas_20181203_models.CreateVulAutoRepairConfigResponse:
        """
        @summary Creates a list of vulnerabilities that can be automatically fixed. After the list is created, you can select the list when you create a vulnerability fixing task on the Playbook page.
        
        @param request: CreateVulAutoRepairConfigRequest
        @return: CreateVulAutoRepairConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_vul_auto_repair_config_with_options_async(request, runtime)

    def delete_anti_brute_force_rule_with_options(
        self,
        request: sas_20181203_models.DeleteAntiBruteForceRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteAntiBruteForceRuleResponse:
        """
        @summary Deletes the specified defense rules against brute-force attacks.
        
        @param request: DeleteAntiBruteForceRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteAntiBruteForceRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.ids):
            query['Ids'] = request.ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteAntiBruteForceRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteAntiBruteForceRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_anti_brute_force_rule_with_options_async(
        self,
        request: sas_20181203_models.DeleteAntiBruteForceRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteAntiBruteForceRuleResponse:
        """
        @summary Deletes the specified defense rules against brute-force attacks.
        
        @param request: DeleteAntiBruteForceRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteAntiBruteForceRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.ids):
            query['Ids'] = request.ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteAntiBruteForceRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteAntiBruteForceRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_anti_brute_force_rule(
        self,
        request: sas_20181203_models.DeleteAntiBruteForceRuleRequest,
    ) -> sas_20181203_models.DeleteAntiBruteForceRuleResponse:
        """
        @summary Deletes the specified defense rules against brute-force attacks.
        
        @param request: DeleteAntiBruteForceRuleRequest
        @return: DeleteAntiBruteForceRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_anti_brute_force_rule_with_options(request, runtime)

    async def delete_anti_brute_force_rule_async(
        self,
        request: sas_20181203_models.DeleteAntiBruteForceRuleRequest,
    ) -> sas_20181203_models.DeleteAntiBruteForceRuleResponse:
        """
        @summary Deletes the specified defense rules against brute-force attacks.
        
        @param request: DeleteAntiBruteForceRuleRequest
        @return: DeleteAntiBruteForceRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_anti_brute_force_rule_with_options_async(request, runtime)

    def delete_attack_path_sensitive_asset_config_with_options(
        self,
        request: sas_20181203_models.DeleteAttackPathSensitiveAssetConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteAttackPathSensitiveAssetConfigResponse:
        """
        @summary Delete attack path sensitive asset.
        
        @param request: DeleteAttackPathSensitiveAssetConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteAttackPathSensitiveAssetConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.attack_path_sensitive_asset_config_id):
            query['AttackPathSensitiveAssetConfigId'] = request.attack_path_sensitive_asset_config_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteAttackPathSensitiveAssetConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteAttackPathSensitiveAssetConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_attack_path_sensitive_asset_config_with_options_async(
        self,
        request: sas_20181203_models.DeleteAttackPathSensitiveAssetConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteAttackPathSensitiveAssetConfigResponse:
        """
        @summary Delete attack path sensitive asset.
        
        @param request: DeleteAttackPathSensitiveAssetConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteAttackPathSensitiveAssetConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.attack_path_sensitive_asset_config_id):
            query['AttackPathSensitiveAssetConfigId'] = request.attack_path_sensitive_asset_config_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteAttackPathSensitiveAssetConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteAttackPathSensitiveAssetConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_attack_path_sensitive_asset_config(
        self,
        request: sas_20181203_models.DeleteAttackPathSensitiveAssetConfigRequest,
    ) -> sas_20181203_models.DeleteAttackPathSensitiveAssetConfigResponse:
        """
        @summary Delete attack path sensitive asset.
        
        @param request: DeleteAttackPathSensitiveAssetConfigRequest
        @return: DeleteAttackPathSensitiveAssetConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_attack_path_sensitive_asset_config_with_options(request, runtime)

    async def delete_attack_path_sensitive_asset_config_async(
        self,
        request: sas_20181203_models.DeleteAttackPathSensitiveAssetConfigRequest,
    ) -> sas_20181203_models.DeleteAttackPathSensitiveAssetConfigResponse:
        """
        @summary Delete attack path sensitive asset.
        
        @param request: DeleteAttackPathSensitiveAssetConfigRequest
        @return: DeleteAttackPathSensitiveAssetConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_attack_path_sensitive_asset_config_with_options_async(request, runtime)

    def delete_attack_path_whitelist_with_options(
        self,
        request: sas_20181203_models.DeleteAttackPathWhitelistRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteAttackPathWhitelistResponse:
        """
        @summary Delete Attack Path Whitelist.
        
        @param request: DeleteAttackPathWhitelistRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteAttackPathWhitelistResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.attack_path_whitelist_id):
            query['AttackPathWhitelistId'] = request.attack_path_whitelist_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteAttackPathWhitelist',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteAttackPathWhitelistResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_attack_path_whitelist_with_options_async(
        self,
        request: sas_20181203_models.DeleteAttackPathWhitelistRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteAttackPathWhitelistResponse:
        """
        @summary Delete Attack Path Whitelist.
        
        @param request: DeleteAttackPathWhitelistRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteAttackPathWhitelistResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.attack_path_whitelist_id):
            query['AttackPathWhitelistId'] = request.attack_path_whitelist_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteAttackPathWhitelist',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteAttackPathWhitelistResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_attack_path_whitelist(
        self,
        request: sas_20181203_models.DeleteAttackPathWhitelistRequest,
    ) -> sas_20181203_models.DeleteAttackPathWhitelistResponse:
        """
        @summary Delete Attack Path Whitelist.
        
        @param request: DeleteAttackPathWhitelistRequest
        @return: DeleteAttackPathWhitelistResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_attack_path_whitelist_with_options(request, runtime)

    async def delete_attack_path_whitelist_async(
        self,
        request: sas_20181203_models.DeleteAttackPathWhitelistRequest,
    ) -> sas_20181203_models.DeleteAttackPathWhitelistResponse:
        """
        @summary Delete Attack Path Whitelist.
        
        @param request: DeleteAttackPathWhitelistRequest
        @return: DeleteAttackPathWhitelistResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_attack_path_whitelist_with_options_async(request, runtime)

    def delete_attestor_with_options(
        self,
        request: sas_20181203_models.DeleteAttestorRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteAttestorResponse:
        """
        @summary Deletes a witness.
        
        @param request: DeleteAttestorRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteAttestorResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteAttestor',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteAttestorResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_attestor_with_options_async(
        self,
        request: sas_20181203_models.DeleteAttestorRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteAttestorResponse:
        """
        @summary Deletes a witness.
        
        @param request: DeleteAttestorRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteAttestorResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteAttestor',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteAttestorResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_attestor(
        self,
        request: sas_20181203_models.DeleteAttestorRequest,
    ) -> sas_20181203_models.DeleteAttestorResponse:
        """
        @summary Deletes a witness.
        
        @param request: DeleteAttestorRequest
        @return: DeleteAttestorResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_attestor_with_options(request, runtime)

    async def delete_attestor_async(
        self,
        request: sas_20181203_models.DeleteAttestorRequest,
    ) -> sas_20181203_models.DeleteAttestorResponse:
        """
        @summary Deletes a witness.
        
        @param request: DeleteAttestorRequest
        @return: DeleteAttestorResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_attestor_with_options_async(request, runtime)

    def delete_auto_tag_rules_with_options(
        self,
        request: sas_20181203_models.DeleteAutoTagRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteAutoTagRulesResponse:
        """
        @summary Deletes asset auto-tagging rules that are created by using the feature of asset management rules. You can create rules on the System Configuration > Feature Settings > Multi-cloud Configuration Management > Asset Management Rule page in the Security Center console.
        
        @param request: DeleteAutoTagRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteAutoTagRulesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.rule_id_list):
            query['RuleIdList'] = request.rule_id_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteAutoTagRules',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteAutoTagRulesResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_auto_tag_rules_with_options_async(
        self,
        request: sas_20181203_models.DeleteAutoTagRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteAutoTagRulesResponse:
        """
        @summary Deletes asset auto-tagging rules that are created by using the feature of asset management rules. You can create rules on the System Configuration > Feature Settings > Multi-cloud Configuration Management > Asset Management Rule page in the Security Center console.
        
        @param request: DeleteAutoTagRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteAutoTagRulesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.rule_id_list):
            query['RuleIdList'] = request.rule_id_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteAutoTagRules',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteAutoTagRulesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_auto_tag_rules(
        self,
        request: sas_20181203_models.DeleteAutoTagRulesRequest,
    ) -> sas_20181203_models.DeleteAutoTagRulesResponse:
        """
        @summary Deletes asset auto-tagging rules that are created by using the feature of asset management rules. You can create rules on the System Configuration > Feature Settings > Multi-cloud Configuration Management > Asset Management Rule page in the Security Center console.
        
        @param request: DeleteAutoTagRulesRequest
        @return: DeleteAutoTagRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_auto_tag_rules_with_options(request, runtime)

    async def delete_auto_tag_rules_async(
        self,
        request: sas_20181203_models.DeleteAutoTagRulesRequest,
    ) -> sas_20181203_models.DeleteAutoTagRulesResponse:
        """
        @summary Deletes asset auto-tagging rules that are created by using the feature of asset management rules. You can create rules on the System Configuration > Feature Settings > Multi-cloud Configuration Management > Asset Management Rule page in the Security Center console.
        
        @param request: DeleteAutoTagRulesRequest
        @return: DeleteAutoTagRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_auto_tag_rules_with_options_async(request, runtime)

    def delete_backup_policy_with_options(
        self,
        request: sas_20181203_models.DeleteBackupPolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteBackupPolicyResponse:
        """
        @summary Deletes an anti-ransomware policy.
        
        @param request: DeleteBackupPolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteBackupPolicyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.policy_version):
            query['PolicyVersion'] = request.policy_version
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteBackupPolicy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteBackupPolicyResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_backup_policy_with_options_async(
        self,
        request: sas_20181203_models.DeleteBackupPolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteBackupPolicyResponse:
        """
        @summary Deletes an anti-ransomware policy.
        
        @param request: DeleteBackupPolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteBackupPolicyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.policy_version):
            query['PolicyVersion'] = request.policy_version
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteBackupPolicy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteBackupPolicyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_backup_policy(
        self,
        request: sas_20181203_models.DeleteBackupPolicyRequest,
    ) -> sas_20181203_models.DeleteBackupPolicyResponse:
        """
        @summary Deletes an anti-ransomware policy.
        
        @param request: DeleteBackupPolicyRequest
        @return: DeleteBackupPolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_backup_policy_with_options(request, runtime)

    async def delete_backup_policy_async(
        self,
        request: sas_20181203_models.DeleteBackupPolicyRequest,
    ) -> sas_20181203_models.DeleteBackupPolicyResponse:
        """
        @summary Deletes an anti-ransomware policy.
        
        @param request: DeleteBackupPolicyRequest
        @return: DeleteBackupPolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_backup_policy_with_options_async(request, runtime)

    def delete_backup_policy_machine_with_options(
        self,
        request: sas_20181203_models.DeleteBackupPolicyMachineRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteBackupPolicyMachineResponse:
        """
        @summary Disables a specified anti-ransomware policy that is applied to specified servers and uninstalls the anti-ransomware agent from the servers. If the backup vaults of the servers contain only backup data of the servers, the backup vaults are deleted.
        
        @param request: DeleteBackupPolicyMachineRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteBackupPolicyMachineResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.policy_id):
            query['PolicyId'] = request.policy_id
        if not UtilClient.is_unset(request.policy_version):
            query['PolicyVersion'] = request.policy_version
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteBackupPolicyMachine',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteBackupPolicyMachineResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_backup_policy_machine_with_options_async(
        self,
        request: sas_20181203_models.DeleteBackupPolicyMachineRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteBackupPolicyMachineResponse:
        """
        @summary Disables a specified anti-ransomware policy that is applied to specified servers and uninstalls the anti-ransomware agent from the servers. If the backup vaults of the servers contain only backup data of the servers, the backup vaults are deleted.
        
        @param request: DeleteBackupPolicyMachineRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteBackupPolicyMachineResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.policy_id):
            query['PolicyId'] = request.policy_id
        if not UtilClient.is_unset(request.policy_version):
            query['PolicyVersion'] = request.policy_version
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteBackupPolicyMachine',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteBackupPolicyMachineResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_backup_policy_machine(
        self,
        request: sas_20181203_models.DeleteBackupPolicyMachineRequest,
    ) -> sas_20181203_models.DeleteBackupPolicyMachineResponse:
        """
        @summary Disables a specified anti-ransomware policy that is applied to specified servers and uninstalls the anti-ransomware agent from the servers. If the backup vaults of the servers contain only backup data of the servers, the backup vaults are deleted.
        
        @param request: DeleteBackupPolicyMachineRequest
        @return: DeleteBackupPolicyMachineResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_backup_policy_machine_with_options(request, runtime)

    async def delete_backup_policy_machine_async(
        self,
        request: sas_20181203_models.DeleteBackupPolicyMachineRequest,
    ) -> sas_20181203_models.DeleteBackupPolicyMachineResponse:
        """
        @summary Disables a specified anti-ransomware policy that is applied to specified servers and uninstalls the anti-ransomware agent from the servers. If the backup vaults of the servers contain only backup data of the servers, the backup vaults are deleted.
        
        @param request: DeleteBackupPolicyMachineRequest
        @return: DeleteBackupPolicyMachineResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_backup_policy_machine_with_options_async(request, runtime)

    def delete_backup_snapshot_with_options(
        self,
        request: sas_20181203_models.DeleteBackupSnapshotRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteBackupSnapshotResponse:
        """
        @summary Deletes a backup snapshot that is created for anti-ransomware.
        
        @param request: DeleteBackupSnapshotRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteBackupSnapshotResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.backup_region_id_list):
            query['BackupRegionIdList'] = request.backup_region_id_list
        if not UtilClient.is_unset(request.backup_snapshot_list):
            query['BackupSnapshotList'] = request.backup_snapshot_list
        if not UtilClient.is_unset(request.retain_latest_snapshot):
            query['RetainLatestSnapshot'] = request.retain_latest_snapshot
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteBackupSnapshot',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteBackupSnapshotResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_backup_snapshot_with_options_async(
        self,
        request: sas_20181203_models.DeleteBackupSnapshotRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteBackupSnapshotResponse:
        """
        @summary Deletes a backup snapshot that is created for anti-ransomware.
        
        @param request: DeleteBackupSnapshotRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteBackupSnapshotResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.backup_region_id_list):
            query['BackupRegionIdList'] = request.backup_region_id_list
        if not UtilClient.is_unset(request.backup_snapshot_list):
            query['BackupSnapshotList'] = request.backup_snapshot_list
        if not UtilClient.is_unset(request.retain_latest_snapshot):
            query['RetainLatestSnapshot'] = request.retain_latest_snapshot
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteBackupSnapshot',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteBackupSnapshotResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_backup_snapshot(
        self,
        request: sas_20181203_models.DeleteBackupSnapshotRequest,
    ) -> sas_20181203_models.DeleteBackupSnapshotResponse:
        """
        @summary Deletes a backup snapshot that is created for anti-ransomware.
        
        @param request: DeleteBackupSnapshotRequest
        @return: DeleteBackupSnapshotResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_backup_snapshot_with_options(request, runtime)

    async def delete_backup_snapshot_async(
        self,
        request: sas_20181203_models.DeleteBackupSnapshotRequest,
    ) -> sas_20181203_models.DeleteBackupSnapshotResponse:
        """
        @summary Deletes a backup snapshot that is created for anti-ransomware.
        
        @param request: DeleteBackupSnapshotRequest
        @return: DeleteBackupSnapshotResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_backup_snapshot_with_options_async(request, runtime)

    def delete_baseline_check_white_record_with_options(
        self,
        request: sas_20181203_models.DeleteBaselineCheckWhiteRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteBaselineCheckWhiteRecordResponse:
        """
        @summary Deletes the whitelist record for a baseline check item.
        
        @param request: DeleteBaselineCheckWhiteRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteBaselineCheckWhiteRecordResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_ids):
            query['CheckIds'] = request.check_ids
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.record_ids):
            query['RecordIds'] = request.record_ids
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteBaselineCheckWhiteRecord',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteBaselineCheckWhiteRecordResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_baseline_check_white_record_with_options_async(
        self,
        request: sas_20181203_models.DeleteBaselineCheckWhiteRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteBaselineCheckWhiteRecordResponse:
        """
        @summary Deletes the whitelist record for a baseline check item.
        
        @param request: DeleteBaselineCheckWhiteRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteBaselineCheckWhiteRecordResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_ids):
            query['CheckIds'] = request.check_ids
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.record_ids):
            query['RecordIds'] = request.record_ids
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteBaselineCheckWhiteRecord',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteBaselineCheckWhiteRecordResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_baseline_check_white_record(
        self,
        request: sas_20181203_models.DeleteBaselineCheckWhiteRecordRequest,
    ) -> sas_20181203_models.DeleteBaselineCheckWhiteRecordResponse:
        """
        @summary Deletes the whitelist record for a baseline check item.
        
        @param request: DeleteBaselineCheckWhiteRecordRequest
        @return: DeleteBaselineCheckWhiteRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_baseline_check_white_record_with_options(request, runtime)

    async def delete_baseline_check_white_record_async(
        self,
        request: sas_20181203_models.DeleteBaselineCheckWhiteRecordRequest,
    ) -> sas_20181203_models.DeleteBaselineCheckWhiteRecordResponse:
        """
        @summary Deletes the whitelist record for a baseline check item.
        
        @param request: DeleteBaselineCheckWhiteRecordRequest
        @return: DeleteBaselineCheckWhiteRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_baseline_check_white_record_with_options_async(request, runtime)

    def delete_binary_security_policy_with_options(
        self,
        request: sas_20181203_models.DeleteBinarySecurityPolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteBinarySecurityPolicyResponse:
        """
        @summary Deletes a binary security policy from the container signature feature.
        
        @param request: DeleteBinarySecurityPolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteBinarySecurityPolicyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteBinarySecurityPolicy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteBinarySecurityPolicyResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_binary_security_policy_with_options_async(
        self,
        request: sas_20181203_models.DeleteBinarySecurityPolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteBinarySecurityPolicyResponse:
        """
        @summary Deletes a binary security policy from the container signature feature.
        
        @param request: DeleteBinarySecurityPolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteBinarySecurityPolicyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteBinarySecurityPolicy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteBinarySecurityPolicyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_binary_security_policy(
        self,
        request: sas_20181203_models.DeleteBinarySecurityPolicyRequest,
    ) -> sas_20181203_models.DeleteBinarySecurityPolicyResponse:
        """
        @summary Deletes a binary security policy from the container signature feature.
        
        @param request: DeleteBinarySecurityPolicyRequest
        @return: DeleteBinarySecurityPolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_binary_security_policy_with_options(request, runtime)

    async def delete_binary_security_policy_async(
        self,
        request: sas_20181203_models.DeleteBinarySecurityPolicyRequest,
    ) -> sas_20181203_models.DeleteBinarySecurityPolicyResponse:
        """
        @summary Deletes a binary security policy from the container signature feature.
        
        @param request: DeleteBinarySecurityPolicyRequest
        @return: DeleteBinarySecurityPolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_binary_security_policy_with_options_async(request, runtime)

    def delete_check_policy_with_options(
        self,
        request: sas_20181203_models.DeleteCheckPolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteCheckPolicyResponse:
        """
        @summary 删除自定义策略
        
        @param request: DeleteCheckPolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteCheckPolicyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.policy_ids):
            query['PolicyIds'] = request.policy_ids
        if not UtilClient.is_unset(request.policy_type):
            query['PolicyType'] = request.policy_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteCheckPolicy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteCheckPolicyResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_check_policy_with_options_async(
        self,
        request: sas_20181203_models.DeleteCheckPolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteCheckPolicyResponse:
        """
        @summary 删除自定义策略
        
        @param request: DeleteCheckPolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteCheckPolicyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.policy_ids):
            query['PolicyIds'] = request.policy_ids
        if not UtilClient.is_unset(request.policy_type):
            query['PolicyType'] = request.policy_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteCheckPolicy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteCheckPolicyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_check_policy(
        self,
        request: sas_20181203_models.DeleteCheckPolicyRequest,
    ) -> sas_20181203_models.DeleteCheckPolicyResponse:
        """
        @summary 删除自定义策略
        
        @param request: DeleteCheckPolicyRequest
        @return: DeleteCheckPolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_check_policy_with_options(request, runtime)

    async def delete_check_policy_async(
        self,
        request: sas_20181203_models.DeleteCheckPolicyRequest,
    ) -> sas_20181203_models.DeleteCheckPolicyResponse:
        """
        @summary 删除自定义策略
        
        @param request: DeleteCheckPolicyRequest
        @return: DeleteCheckPolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_check_policy_with_options_async(request, runtime)

    def delete_client_user_define_rule_with_options(
        self,
        request: sas_20181203_models.DeleteClientUserDefineRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteClientUserDefineRuleResponse:
        """
        @summary Deletes specified custom defense rules.
        
        @param request: DeleteClientUserDefineRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteClientUserDefineRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id_list):
            query['IdList'] = request.id_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteClientUserDefineRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteClientUserDefineRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_client_user_define_rule_with_options_async(
        self,
        request: sas_20181203_models.DeleteClientUserDefineRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteClientUserDefineRuleResponse:
        """
        @summary Deletes specified custom defense rules.
        
        @param request: DeleteClientUserDefineRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteClientUserDefineRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id_list):
            query['IdList'] = request.id_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteClientUserDefineRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteClientUserDefineRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_client_user_define_rule(
        self,
        request: sas_20181203_models.DeleteClientUserDefineRuleRequest,
    ) -> sas_20181203_models.DeleteClientUserDefineRuleResponse:
        """
        @summary Deletes specified custom defense rules.
        
        @param request: DeleteClientUserDefineRuleRequest
        @return: DeleteClientUserDefineRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_client_user_define_rule_with_options(request, runtime)

    async def delete_client_user_define_rule_async(
        self,
        request: sas_20181203_models.DeleteClientUserDefineRuleRequest,
    ) -> sas_20181203_models.DeleteClientUserDefineRuleResponse:
        """
        @summary Deletes specified custom defense rules.
        
        @param request: DeleteClientUserDefineRuleRequest
        @return: DeleteClientUserDefineRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_client_user_define_rule_with_options_async(request, runtime)

    def delete_cloud_vendor_account_akwith_options(
        self,
        request: sas_20181203_models.DeleteCloudVendorAccountAKRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteCloudVendorAccountAKResponse:
        """
        @summary Delete multi-cloud asset synchronization configuration.
        
        @param request: DeleteCloudVendorAccountAKRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteCloudVendorAccountAKResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.auth_id):
            query['AuthId'] = request.auth_id
        if not UtilClient.is_unset(request.auth_modules):
            query['AuthModules'] = request.auth_modules
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteCloudVendorAccountAK',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteCloudVendorAccountAKResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_cloud_vendor_account_akwith_options_async(
        self,
        request: sas_20181203_models.DeleteCloudVendorAccountAKRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteCloudVendorAccountAKResponse:
        """
        @summary Delete multi-cloud asset synchronization configuration.
        
        @param request: DeleteCloudVendorAccountAKRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteCloudVendorAccountAKResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.auth_id):
            query['AuthId'] = request.auth_id
        if not UtilClient.is_unset(request.auth_modules):
            query['AuthModules'] = request.auth_modules
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteCloudVendorAccountAK',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteCloudVendorAccountAKResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_cloud_vendor_account_ak(
        self,
        request: sas_20181203_models.DeleteCloudVendorAccountAKRequest,
    ) -> sas_20181203_models.DeleteCloudVendorAccountAKResponse:
        """
        @summary Delete multi-cloud asset synchronization configuration.
        
        @param request: DeleteCloudVendorAccountAKRequest
        @return: DeleteCloudVendorAccountAKResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_cloud_vendor_account_akwith_options(request, runtime)

    async def delete_cloud_vendor_account_ak_async(
        self,
        request: sas_20181203_models.DeleteCloudVendorAccountAKRequest,
    ) -> sas_20181203_models.DeleteCloudVendorAccountAKResponse:
        """
        @summary Delete multi-cloud asset synchronization configuration.
        
        @param request: DeleteCloudVendorAccountAKRequest
        @return: DeleteCloudVendorAccountAKResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_cloud_vendor_account_akwith_options_async(request, runtime)

    def delete_container_defense_rule_with_options(
        self,
        request: sas_20181203_models.DeleteContainerDefenseRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteContainerDefenseRuleResponse:
        """
        @summary Deletes a rule for non-image program defense.
        
        @param request: DeleteContainerDefenseRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteContainerDefenseRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.rule_ids):
            query['RuleIds'] = request.rule_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteContainerDefenseRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteContainerDefenseRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_container_defense_rule_with_options_async(
        self,
        request: sas_20181203_models.DeleteContainerDefenseRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteContainerDefenseRuleResponse:
        """
        @summary Deletes a rule for non-image program defense.
        
        @param request: DeleteContainerDefenseRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteContainerDefenseRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.rule_ids):
            query['RuleIds'] = request.rule_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteContainerDefenseRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteContainerDefenseRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_container_defense_rule(
        self,
        request: sas_20181203_models.DeleteContainerDefenseRuleRequest,
    ) -> sas_20181203_models.DeleteContainerDefenseRuleResponse:
        """
        @summary Deletes a rule for non-image program defense.
        
        @param request: DeleteContainerDefenseRuleRequest
        @return: DeleteContainerDefenseRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_container_defense_rule_with_options(request, runtime)

    async def delete_container_defense_rule_async(
        self,
        request: sas_20181203_models.DeleteContainerDefenseRuleRequest,
    ) -> sas_20181203_models.DeleteContainerDefenseRuleResponse:
        """
        @summary Deletes a rule for non-image program defense.
        
        @param request: DeleteContainerDefenseRuleRequest
        @return: DeleteContainerDefenseRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_container_defense_rule_with_options_async(request, runtime)

    def delete_container_plugin_rule_with_options(
        self,
        request: sas_20181203_models.DeleteContainerPluginRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteContainerPluginRuleResponse:
        """
        @summary Deletes a defense rule against container escapes.
        
        @param request: DeleteContainerPluginRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteContainerPluginRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.rule_id):
            query['RuleId'] = request.rule_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteContainerPluginRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteContainerPluginRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_container_plugin_rule_with_options_async(
        self,
        request: sas_20181203_models.DeleteContainerPluginRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteContainerPluginRuleResponse:
        """
        @summary Deletes a defense rule against container escapes.
        
        @param request: DeleteContainerPluginRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteContainerPluginRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.rule_id):
            query['RuleId'] = request.rule_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteContainerPluginRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteContainerPluginRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_container_plugin_rule(
        self,
        request: sas_20181203_models.DeleteContainerPluginRuleRequest,
    ) -> sas_20181203_models.DeleteContainerPluginRuleResponse:
        """
        @summary Deletes a defense rule against container escapes.
        
        @param request: DeleteContainerPluginRuleRequest
        @return: DeleteContainerPluginRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_container_plugin_rule_with_options(request, runtime)

    async def delete_container_plugin_rule_async(
        self,
        request: sas_20181203_models.DeleteContainerPluginRuleRequest,
    ) -> sas_20181203_models.DeleteContainerPluginRuleResponse:
        """
        @summary Deletes a defense rule against container escapes.
        
        @param request: DeleteContainerPluginRuleRequest
        @return: DeleteContainerPluginRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_container_plugin_rule_with_options_async(request, runtime)

    def delete_custom_block_record_with_options(
        self,
        request: sas_20181203_models.DeleteCustomBlockRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteCustomBlockRecordResponse:
        """
        @summary Deletes a specified IP address blocking policy from one or more servers.
        
        @param request: DeleteCustomBlockRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteCustomBlockRecordResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteCustomBlockRecord',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteCustomBlockRecordResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_custom_block_record_with_options_async(
        self,
        request: sas_20181203_models.DeleteCustomBlockRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteCustomBlockRecordResponse:
        """
        @summary Deletes a specified IP address blocking policy from one or more servers.
        
        @param request: DeleteCustomBlockRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteCustomBlockRecordResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteCustomBlockRecord',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteCustomBlockRecordResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_custom_block_record(
        self,
        request: sas_20181203_models.DeleteCustomBlockRecordRequest,
    ) -> sas_20181203_models.DeleteCustomBlockRecordResponse:
        """
        @summary Deletes a specified IP address blocking policy from one or more servers.
        
        @param request: DeleteCustomBlockRecordRequest
        @return: DeleteCustomBlockRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_custom_block_record_with_options(request, runtime)

    async def delete_custom_block_record_async(
        self,
        request: sas_20181203_models.DeleteCustomBlockRecordRequest,
    ) -> sas_20181203_models.DeleteCustomBlockRecordResponse:
        """
        @summary Deletes a specified IP address blocking policy from one or more servers.
        
        @param request: DeleteCustomBlockRecordRequest
        @return: DeleteCustomBlockRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_custom_block_record_with_options_async(request, runtime)

    def delete_customize_report_with_options(
        self,
        request: sas_20181203_models.DeleteCustomizeReportRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteCustomizeReportResponse:
        """
        @summary Deletes a custom security report.
        
        @param request: DeleteCustomizeReportRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteCustomizeReportResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.report_id):
            query['ReportId'] = request.report_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteCustomizeReport',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteCustomizeReportResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_customize_report_with_options_async(
        self,
        request: sas_20181203_models.DeleteCustomizeReportRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteCustomizeReportResponse:
        """
        @summary Deletes a custom security report.
        
        @param request: DeleteCustomizeReportRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteCustomizeReportResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.report_id):
            query['ReportId'] = request.report_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteCustomizeReport',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteCustomizeReportResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_customize_report(
        self,
        request: sas_20181203_models.DeleteCustomizeReportRequest,
    ) -> sas_20181203_models.DeleteCustomizeReportResponse:
        """
        @summary Deletes a custom security report.
        
        @param request: DeleteCustomizeReportRequest
        @return: DeleteCustomizeReportResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_customize_report_with_options(request, runtime)

    async def delete_customize_report_async(
        self,
        request: sas_20181203_models.DeleteCustomizeReportRequest,
    ) -> sas_20181203_models.DeleteCustomizeReportResponse:
        """
        @summary Deletes a custom security report.
        
        @param request: DeleteCustomizeReportRequest
        @return: DeleteCustomizeReportResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_customize_report_with_options_async(request, runtime)

    def delete_customized_dict_with_options(
        self,
        request: sas_20181203_models.DeleteCustomizedDictRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteCustomizedDictResponse:
        """
        @summary Deletes the file that is uploaded to create custom weak password rules.
        
        @param request: DeleteCustomizedDictRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteCustomizedDictResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteCustomizedDict',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteCustomizedDictResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_customized_dict_with_options_async(
        self,
        request: sas_20181203_models.DeleteCustomizedDictRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteCustomizedDictResponse:
        """
        @summary Deletes the file that is uploaded to create custom weak password rules.
        
        @param request: DeleteCustomizedDictRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteCustomizedDictResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteCustomizedDict',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteCustomizedDictResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_customized_dict(
        self,
        request: sas_20181203_models.DeleteCustomizedDictRequest,
    ) -> sas_20181203_models.DeleteCustomizedDictResponse:
        """
        @summary Deletes the file that is uploaded to create custom weak password rules.
        
        @param request: DeleteCustomizedDictRequest
        @return: DeleteCustomizedDictResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_customized_dict_with_options(request, runtime)

    async def delete_customized_dict_async(
        self,
        request: sas_20181203_models.DeleteCustomizedDictRequest,
    ) -> sas_20181203_models.DeleteCustomizedDictResponse:
        """
        @summary Deletes the file that is uploaded to create custom weak password rules.
        
        @param request: DeleteCustomizedDictRequest
        @return: DeleteCustomizedDictResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_customized_dict_with_options_async(request, runtime)

    def delete_cycle_task_with_options(
        self,
        request: sas_20181203_models.DeleteCycleTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteCycleTaskResponse:
        """
        @summary Deletes a periodic scan task. The task can be an image scan task, urgent vulnerability scan task, or virus scan task.
        
        @param request: DeleteCycleTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteCycleTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteCycleTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteCycleTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_cycle_task_with_options_async(
        self,
        request: sas_20181203_models.DeleteCycleTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteCycleTaskResponse:
        """
        @summary Deletes a periodic scan task. The task can be an image scan task, urgent vulnerability scan task, or virus scan task.
        
        @param request: DeleteCycleTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteCycleTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteCycleTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteCycleTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_cycle_task(
        self,
        request: sas_20181203_models.DeleteCycleTaskRequest,
    ) -> sas_20181203_models.DeleteCycleTaskResponse:
        """
        @summary Deletes a periodic scan task. The task can be an image scan task, urgent vulnerability scan task, or virus scan task.
        
        @param request: DeleteCycleTaskRequest
        @return: DeleteCycleTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_cycle_task_with_options(request, runtime)

    async def delete_cycle_task_async(
        self,
        request: sas_20181203_models.DeleteCycleTaskRequest,
    ) -> sas_20181203_models.DeleteCycleTaskResponse:
        """
        @summary Deletes a periodic scan task. The task can be an image scan task, urgent vulnerability scan task, or virus scan task.
        
        @param request: DeleteCycleTaskRequest
        @return: DeleteCycleTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_cycle_task_with_options_async(request, runtime)

    def delete_ding_talk_with_options(
        self,
        request: sas_20181203_models.DeleteDingTalkRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteDingTalkResponse:
        """
        @summary Deletes a DingTalk chatbot on the DingTalk Chatbot tab of the Notification Settings page.
        
        @param request: DeleteDingTalkRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteDingTalkResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.ids):
            query['Ids'] = request.ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteDingTalk',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteDingTalkResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_ding_talk_with_options_async(
        self,
        request: sas_20181203_models.DeleteDingTalkRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteDingTalkResponse:
        """
        @summary Deletes a DingTalk chatbot on the DingTalk Chatbot tab of the Notification Settings page.
        
        @param request: DeleteDingTalkRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteDingTalkResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.ids):
            query['Ids'] = request.ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteDingTalk',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteDingTalkResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_ding_talk(
        self,
        request: sas_20181203_models.DeleteDingTalkRequest,
    ) -> sas_20181203_models.DeleteDingTalkResponse:
        """
        @summary Deletes a DingTalk chatbot on the DingTalk Chatbot tab of the Notification Settings page.
        
        @param request: DeleteDingTalkRequest
        @return: DeleteDingTalkResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_ding_talk_with_options(request, runtime)

    async def delete_ding_talk_async(
        self,
        request: sas_20181203_models.DeleteDingTalkRequest,
    ) -> sas_20181203_models.DeleteDingTalkResponse:
        """
        @summary Deletes a DingTalk chatbot on the DingTalk Chatbot tab of the Notification Settings page.
        
        @param request: DeleteDingTalkRequest
        @return: DeleteDingTalkResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_ding_talk_with_options_async(request, runtime)

    def delete_file_protect_rule_with_options(
        self,
        request: sas_20181203_models.DeleteFileProtectRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteFileProtectRuleResponse:
        """
        @summary Deletes core file monitoring rules.
        
        @param request: DeleteFileProtectRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteFileProtectRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteFileProtectRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteFileProtectRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_file_protect_rule_with_options_async(
        self,
        request: sas_20181203_models.DeleteFileProtectRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteFileProtectRuleResponse:
        """
        @summary Deletes core file monitoring rules.
        
        @param request: DeleteFileProtectRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteFileProtectRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteFileProtectRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteFileProtectRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_file_protect_rule(
        self,
        request: sas_20181203_models.DeleteFileProtectRuleRequest,
    ) -> sas_20181203_models.DeleteFileProtectRuleResponse:
        """
        @summary Deletes core file monitoring rules.
        
        @param request: DeleteFileProtectRuleRequest
        @return: DeleteFileProtectRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_file_protect_rule_with_options(request, runtime)

    async def delete_file_protect_rule_async(
        self,
        request: sas_20181203_models.DeleteFileProtectRuleRequest,
    ) -> sas_20181203_models.DeleteFileProtectRuleResponse:
        """
        @summary Deletes core file monitoring rules.
        
        @param request: DeleteFileProtectRuleRequest
        @return: DeleteFileProtectRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_file_protect_rule_with_options_async(request, runtime)

    def delete_group_with_options(
        self,
        request: sas_20181203_models.DeleteGroupRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteGroupResponse:
        """
        @summary Deletes a server group.
        
        @description The *Default** server group that is provided by Security Center cannot be deleted. After you delete a group, the assets in this group are moved to the **Default** group.
        
        @param request: DeleteGroupRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteGroupResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteGroup',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteGroupResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_group_with_options_async(
        self,
        request: sas_20181203_models.DeleteGroupRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteGroupResponse:
        """
        @summary Deletes a server group.
        
        @description The *Default** server group that is provided by Security Center cannot be deleted. After you delete a group, the assets in this group are moved to the **Default** group.
        
        @param request: DeleteGroupRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteGroupResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteGroup',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteGroupResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_group(
        self,
        request: sas_20181203_models.DeleteGroupRequest,
    ) -> sas_20181203_models.DeleteGroupResponse:
        """
        @summary Deletes a server group.
        
        @description The *Default** server group that is provided by Security Center cannot be deleted. After you delete a group, the assets in this group are moved to the **Default** group.
        
        @param request: DeleteGroupRequest
        @return: DeleteGroupResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_group_with_options(request, runtime)

    async def delete_group_async(
        self,
        request: sas_20181203_models.DeleteGroupRequest,
    ) -> sas_20181203_models.DeleteGroupResponse:
        """
        @summary Deletes a server group.
        
        @description The *Default** server group that is provided by Security Center cannot be deleted. After you delete a group, the assets in this group are moved to the **Default** group.
        
        @param request: DeleteGroupRequest
        @return: DeleteGroupResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_group_with_options_async(request, runtime)

    def delete_honeypot_with_options(
        self,
        request: sas_20181203_models.DeleteHoneypotRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteHoneypotResponse:
        """
        @summary Deletes a specified honeypot.
        
        @param request: DeleteHoneypotRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteHoneypotResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.honeypot_id):
            query['HoneypotId'] = request.honeypot_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteHoneypot',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteHoneypotResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_honeypot_with_options_async(
        self,
        request: sas_20181203_models.DeleteHoneypotRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteHoneypotResponse:
        """
        @summary Deletes a specified honeypot.
        
        @param request: DeleteHoneypotRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteHoneypotResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.honeypot_id):
            query['HoneypotId'] = request.honeypot_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteHoneypot',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteHoneypotResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_honeypot(
        self,
        request: sas_20181203_models.DeleteHoneypotRequest,
    ) -> sas_20181203_models.DeleteHoneypotResponse:
        """
        @summary Deletes a specified honeypot.
        
        @param request: DeleteHoneypotRequest
        @return: DeleteHoneypotResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_honeypot_with_options(request, runtime)

    async def delete_honeypot_async(
        self,
        request: sas_20181203_models.DeleteHoneypotRequest,
    ) -> sas_20181203_models.DeleteHoneypotResponse:
        """
        @summary Deletes a specified honeypot.
        
        @param request: DeleteHoneypotRequest
        @return: DeleteHoneypotResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_honeypot_with_options_async(request, runtime)

    def delete_honeypot_node_with_options(
        self,
        request: sas_20181203_models.DeleteHoneypotNodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteHoneypotNodeResponse:
        """
        @summary Deletes a specified management node.
        
        @param request: DeleteHoneypotNodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteHoneypotNodeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.node_id):
            query['NodeId'] = request.node_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteHoneypotNode',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteHoneypotNodeResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_honeypot_node_with_options_async(
        self,
        request: sas_20181203_models.DeleteHoneypotNodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteHoneypotNodeResponse:
        """
        @summary Deletes a specified management node.
        
        @param request: DeleteHoneypotNodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteHoneypotNodeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.node_id):
            query['NodeId'] = request.node_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteHoneypotNode',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteHoneypotNodeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_honeypot_node(
        self,
        request: sas_20181203_models.DeleteHoneypotNodeRequest,
    ) -> sas_20181203_models.DeleteHoneypotNodeResponse:
        """
        @summary Deletes a specified management node.
        
        @param request: DeleteHoneypotNodeRequest
        @return: DeleteHoneypotNodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_honeypot_node_with_options(request, runtime)

    async def delete_honeypot_node_async(
        self,
        request: sas_20181203_models.DeleteHoneypotNodeRequest,
    ) -> sas_20181203_models.DeleteHoneypotNodeResponse:
        """
        @summary Deletes a specified management node.
        
        @param request: DeleteHoneypotNodeRequest
        @return: DeleteHoneypotNodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_honeypot_node_with_options_async(request, runtime)

    def delete_honeypot_preset_with_options(
        self,
        request: sas_20181203_models.DeleteHoneypotPresetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteHoneypotPresetResponse:
        """
        @summary Deletes a specified honeypot template.
        
        @param request: DeleteHoneypotPresetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteHoneypotPresetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.honeypot_preset_id):
            query['HoneypotPresetId'] = request.honeypot_preset_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteHoneypotPreset',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteHoneypotPresetResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_honeypot_preset_with_options_async(
        self,
        request: sas_20181203_models.DeleteHoneypotPresetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteHoneypotPresetResponse:
        """
        @summary Deletes a specified honeypot template.
        
        @param request: DeleteHoneypotPresetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteHoneypotPresetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.honeypot_preset_id):
            query['HoneypotPresetId'] = request.honeypot_preset_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteHoneypotPreset',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteHoneypotPresetResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_honeypot_preset(
        self,
        request: sas_20181203_models.DeleteHoneypotPresetRequest,
    ) -> sas_20181203_models.DeleteHoneypotPresetResponse:
        """
        @summary Deletes a specified honeypot template.
        
        @param request: DeleteHoneypotPresetRequest
        @return: DeleteHoneypotPresetResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_honeypot_preset_with_options(request, runtime)

    async def delete_honeypot_preset_async(
        self,
        request: sas_20181203_models.DeleteHoneypotPresetRequest,
    ) -> sas_20181203_models.DeleteHoneypotPresetResponse:
        """
        @summary Deletes a specified honeypot template.
        
        @param request: DeleteHoneypotPresetRequest
        @return: DeleteHoneypotPresetResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_honeypot_preset_with_options_async(request, runtime)

    def delete_honeypot_probe_with_options(
        self,
        request: sas_20181203_models.DeleteHoneypotProbeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteHoneypotProbeResponse:
        """
        @summary Deletes a specified probe.
        
        @param request: DeleteHoneypotProbeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteHoneypotProbeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.probe_id):
            query['ProbeId'] = request.probe_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteHoneypotProbe',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteHoneypotProbeResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_honeypot_probe_with_options_async(
        self,
        request: sas_20181203_models.DeleteHoneypotProbeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteHoneypotProbeResponse:
        """
        @summary Deletes a specified probe.
        
        @param request: DeleteHoneypotProbeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteHoneypotProbeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.probe_id):
            query['ProbeId'] = request.probe_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteHoneypotProbe',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteHoneypotProbeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_honeypot_probe(
        self,
        request: sas_20181203_models.DeleteHoneypotProbeRequest,
    ) -> sas_20181203_models.DeleteHoneypotProbeResponse:
        """
        @summary Deletes a specified probe.
        
        @param request: DeleteHoneypotProbeRequest
        @return: DeleteHoneypotProbeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_honeypot_probe_with_options(request, runtime)

    async def delete_honeypot_probe_async(
        self,
        request: sas_20181203_models.DeleteHoneypotProbeRequest,
    ) -> sas_20181203_models.DeleteHoneypotProbeResponse:
        """
        @summary Deletes a specified probe.
        
        @param request: DeleteHoneypotProbeRequest
        @return: DeleteHoneypotProbeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_honeypot_probe_with_options_async(request, runtime)

    def delete_honeypot_probe_bind_with_options(
        self,
        request: sas_20181203_models.DeleteHoneypotProbeBindRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteHoneypotProbeBindResponse:
        """
        @summary Delete the probe service.
        
        @param request: DeleteHoneypotProbeBindRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteHoneypotProbeBindResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.bind_id):
            query['BindId'] = request.bind_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.probe_id):
            query['ProbeId'] = request.probe_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteHoneypotProbeBind',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteHoneypotProbeBindResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_honeypot_probe_bind_with_options_async(
        self,
        request: sas_20181203_models.DeleteHoneypotProbeBindRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteHoneypotProbeBindResponse:
        """
        @summary Delete the probe service.
        
        @param request: DeleteHoneypotProbeBindRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteHoneypotProbeBindResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.bind_id):
            query['BindId'] = request.bind_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.probe_id):
            query['ProbeId'] = request.probe_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteHoneypotProbeBind',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteHoneypotProbeBindResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_honeypot_probe_bind(
        self,
        request: sas_20181203_models.DeleteHoneypotProbeBindRequest,
    ) -> sas_20181203_models.DeleteHoneypotProbeBindResponse:
        """
        @summary Delete the probe service.
        
        @param request: DeleteHoneypotProbeBindRequest
        @return: DeleteHoneypotProbeBindResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_honeypot_probe_bind_with_options(request, runtime)

    async def delete_honeypot_probe_bind_async(
        self,
        request: sas_20181203_models.DeleteHoneypotProbeBindRequest,
    ) -> sas_20181203_models.DeleteHoneypotProbeBindResponse:
        """
        @summary Delete the probe service.
        
        @param request: DeleteHoneypotProbeBindRequest
        @return: DeleteHoneypotProbeBindResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_honeypot_probe_bind_with_options_async(request, runtime)

    def delete_hybrid_proxy_with_options(
        self,
        request: sas_20181203_models.DeleteHybridProxyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteHybridProxyResponse:
        """
        @summary Removes a proxy node from a specified proxy cluster.
        
        @param request: DeleteHybridProxyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteHybridProxyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteHybridProxy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteHybridProxyResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_hybrid_proxy_with_options_async(
        self,
        request: sas_20181203_models.DeleteHybridProxyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteHybridProxyResponse:
        """
        @summary Removes a proxy node from a specified proxy cluster.
        
        @param request: DeleteHybridProxyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteHybridProxyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteHybridProxy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteHybridProxyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_hybrid_proxy(
        self,
        request: sas_20181203_models.DeleteHybridProxyRequest,
    ) -> sas_20181203_models.DeleteHybridProxyResponse:
        """
        @summary Removes a proxy node from a specified proxy cluster.
        
        @param request: DeleteHybridProxyRequest
        @return: DeleteHybridProxyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_hybrid_proxy_with_options(request, runtime)

    async def delete_hybrid_proxy_async(
        self,
        request: sas_20181203_models.DeleteHybridProxyRequest,
    ) -> sas_20181203_models.DeleteHybridProxyResponse:
        """
        @summary Removes a proxy node from a specified proxy cluster.
        
        @param request: DeleteHybridProxyRequest
        @return: DeleteHybridProxyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_hybrid_proxy_with_options_async(request, runtime)

    def delete_hybrid_proxy_cluster_with_options(
        self,
        request: sas_20181203_models.DeleteHybridProxyClusterRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteHybridProxyClusterResponse:
        """
        @summary Deletes a proxy cluster based on the name of the proxy cluster.
        
        @param request: DeleteHybridProxyClusterRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteHybridProxyClusterResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteHybridProxyCluster',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteHybridProxyClusterResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_hybrid_proxy_cluster_with_options_async(
        self,
        request: sas_20181203_models.DeleteHybridProxyClusterRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteHybridProxyClusterResponse:
        """
        @summary Deletes a proxy cluster based on the name of the proxy cluster.
        
        @param request: DeleteHybridProxyClusterRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteHybridProxyClusterResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteHybridProxyCluster',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteHybridProxyClusterResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_hybrid_proxy_cluster(
        self,
        request: sas_20181203_models.DeleteHybridProxyClusterRequest,
    ) -> sas_20181203_models.DeleteHybridProxyClusterResponse:
        """
        @summary Deletes a proxy cluster based on the name of the proxy cluster.
        
        @param request: DeleteHybridProxyClusterRequest
        @return: DeleteHybridProxyClusterResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_hybrid_proxy_cluster_with_options(request, runtime)

    async def delete_hybrid_proxy_cluster_async(
        self,
        request: sas_20181203_models.DeleteHybridProxyClusterRequest,
    ) -> sas_20181203_models.DeleteHybridProxyClusterResponse:
        """
        @summary Deletes a proxy cluster based on the name of the proxy cluster.
        
        @param request: DeleteHybridProxyClusterRequest
        @return: DeleteHybridProxyClusterResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_hybrid_proxy_cluster_with_options_async(request, runtime)

    def delete_idc_probe_with_options(
        self,
        request: sas_20181203_models.DeleteIdcProbeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteIdcProbeResponse:
        """
        @summary Deletes an IDC probe that is created in Security Center.
        
        @param request: DeleteIdcProbeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteIdcProbeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteIdcProbe',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteIdcProbeResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_idc_probe_with_options_async(
        self,
        request: sas_20181203_models.DeleteIdcProbeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteIdcProbeResponse:
        """
        @summary Deletes an IDC probe that is created in Security Center.
        
        @param request: DeleteIdcProbeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteIdcProbeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteIdcProbe',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteIdcProbeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_idc_probe(
        self,
        request: sas_20181203_models.DeleteIdcProbeRequest,
    ) -> sas_20181203_models.DeleteIdcProbeResponse:
        """
        @summary Deletes an IDC probe that is created in Security Center.
        
        @param request: DeleteIdcProbeRequest
        @return: DeleteIdcProbeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_idc_probe_with_options(request, runtime)

    async def delete_idc_probe_async(
        self,
        request: sas_20181203_models.DeleteIdcProbeRequest,
    ) -> sas_20181203_models.DeleteIdcProbeResponse:
        """
        @summary Deletes an IDC probe that is created in Security Center.
        
        @param request: DeleteIdcProbeRequest
        @return: DeleteIdcProbeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_idc_probe_with_options_async(request, runtime)

    def delete_image_event_operation_with_options(
        self,
        request: sas_20181203_models.DeleteImageEventOperationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteImageEventOperationResponse:
        """
        @summary Deletes an alert handling rule.
        
        @param request: DeleteImageEventOperationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteImageEventOperationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteImageEventOperation',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteImageEventOperationResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_image_event_operation_with_options_async(
        self,
        request: sas_20181203_models.DeleteImageEventOperationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteImageEventOperationResponse:
        """
        @summary Deletes an alert handling rule.
        
        @param request: DeleteImageEventOperationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteImageEventOperationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteImageEventOperation',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteImageEventOperationResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_image_event_operation(
        self,
        request: sas_20181203_models.DeleteImageEventOperationRequest,
    ) -> sas_20181203_models.DeleteImageEventOperationResponse:
        """
        @summary Deletes an alert handling rule.
        
        @param request: DeleteImageEventOperationRequest
        @return: DeleteImageEventOperationResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_image_event_operation_with_options(request, runtime)

    async def delete_image_event_operation_async(
        self,
        request: sas_20181203_models.DeleteImageEventOperationRequest,
    ) -> sas_20181203_models.DeleteImageEventOperationResponse:
        """
        @summary Deletes an alert handling rule.
        
        @param request: DeleteImageEventOperationRequest
        @return: DeleteImageEventOperationResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_image_event_operation_with_options_async(request, runtime)

    def delete_image_vul_whitelist_with_options(
        self,
        request: sas_20181203_models.DeleteImageVulWhitelistRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteImageVulWhitelistResponse:
        """
        @summary Deletes an image vulnerability whitelist.
        
        @param request: DeleteImageVulWhitelistRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteImageVulWhitelistResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.ids):
            query['Ids'] = request.ids
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteImageVulWhitelist',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteImageVulWhitelistResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_image_vul_whitelist_with_options_async(
        self,
        request: sas_20181203_models.DeleteImageVulWhitelistRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteImageVulWhitelistResponse:
        """
        @summary Deletes an image vulnerability whitelist.
        
        @param request: DeleteImageVulWhitelistRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteImageVulWhitelistResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.ids):
            query['Ids'] = request.ids
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteImageVulWhitelist',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteImageVulWhitelistResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_image_vul_whitelist(
        self,
        request: sas_20181203_models.DeleteImageVulWhitelistRequest,
    ) -> sas_20181203_models.DeleteImageVulWhitelistResponse:
        """
        @summary Deletes an image vulnerability whitelist.
        
        @param request: DeleteImageVulWhitelistRequest
        @return: DeleteImageVulWhitelistResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_image_vul_whitelist_with_options(request, runtime)

    async def delete_image_vul_whitelist_async(
        self,
        request: sas_20181203_models.DeleteImageVulWhitelistRequest,
    ) -> sas_20181203_models.DeleteImageVulWhitelistResponse:
        """
        @summary Deletes an image vulnerability whitelist.
        
        @param request: DeleteImageVulWhitelistRequest
        @return: DeleteImageVulWhitelistResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_image_vul_whitelist_with_options_async(request, runtime)

    def delete_install_code_with_options(
        self,
        request: sas_20181203_models.DeleteInstallCodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteInstallCodeResponse:
        """
        @summary Deletes the command that is used to install the Security Center agent.
        
        @param request: DeleteInstallCodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteInstallCodeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.captcha_code):
            query['CaptchaCode'] = request.captcha_code
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteInstallCode',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteInstallCodeResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_install_code_with_options_async(
        self,
        request: sas_20181203_models.DeleteInstallCodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteInstallCodeResponse:
        """
        @summary Deletes the command that is used to install the Security Center agent.
        
        @param request: DeleteInstallCodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteInstallCodeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.captcha_code):
            query['CaptchaCode'] = request.captcha_code
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteInstallCode',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteInstallCodeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_install_code(
        self,
        request: sas_20181203_models.DeleteInstallCodeRequest,
    ) -> sas_20181203_models.DeleteInstallCodeResponse:
        """
        @summary Deletes the command that is used to install the Security Center agent.
        
        @param request: DeleteInstallCodeRequest
        @return: DeleteInstallCodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_install_code_with_options(request, runtime)

    async def delete_install_code_async(
        self,
        request: sas_20181203_models.DeleteInstallCodeRequest,
    ) -> sas_20181203_models.DeleteInstallCodeResponse:
        """
        @summary Deletes the command that is used to install the Security Center agent.
        
        @param request: DeleteInstallCodeRequest
        @return: DeleteInstallCodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_install_code_with_options_async(request, runtime)

    def delete_interception_rule_with_options(
        self,
        request: sas_20181203_models.DeleteInterceptionRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteInterceptionRuleResponse:
        """
        @summary Deletes a defense rule in the container firewall module.
        
        @param request: DeleteInterceptionRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteInterceptionRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.rule_ids):
            query['RuleIds'] = request.rule_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteInterceptionRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteInterceptionRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_interception_rule_with_options_async(
        self,
        request: sas_20181203_models.DeleteInterceptionRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteInterceptionRuleResponse:
        """
        @summary Deletes a defense rule in the container firewall module.
        
        @param request: DeleteInterceptionRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteInterceptionRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.rule_ids):
            query['RuleIds'] = request.rule_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteInterceptionRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteInterceptionRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_interception_rule(
        self,
        request: sas_20181203_models.DeleteInterceptionRuleRequest,
    ) -> sas_20181203_models.DeleteInterceptionRuleResponse:
        """
        @summary Deletes a defense rule in the container firewall module.
        
        @param request: DeleteInterceptionRuleRequest
        @return: DeleteInterceptionRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_interception_rule_with_options(request, runtime)

    async def delete_interception_rule_async(
        self,
        request: sas_20181203_models.DeleteInterceptionRuleRequest,
    ) -> sas_20181203_models.DeleteInterceptionRuleResponse:
        """
        @summary Deletes a defense rule in the container firewall module.
        
        @param request: DeleteInterceptionRuleRequest
        @return: DeleteInterceptionRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_interception_rule_with_options_async(request, runtime)

    def delete_interception_target_with_options(
        self,
        request: sas_20181203_models.DeleteInterceptionTargetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteInterceptionTargetResponse:
        """
        @summary Removes the network objects that are in effect in the container firewall.
        
        @param request: DeleteInterceptionTargetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteInterceptionTargetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.target_ids):
            query['TargetIds'] = request.target_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteInterceptionTarget',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteInterceptionTargetResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_interception_target_with_options_async(
        self,
        request: sas_20181203_models.DeleteInterceptionTargetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteInterceptionTargetResponse:
        """
        @summary Removes the network objects that are in effect in the container firewall.
        
        @param request: DeleteInterceptionTargetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteInterceptionTargetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.target_ids):
            query['TargetIds'] = request.target_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteInterceptionTarget',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteInterceptionTargetResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_interception_target(
        self,
        request: sas_20181203_models.DeleteInterceptionTargetRequest,
    ) -> sas_20181203_models.DeleteInterceptionTargetResponse:
        """
        @summary Removes the network objects that are in effect in the container firewall.
        
        @param request: DeleteInterceptionTargetRequest
        @return: DeleteInterceptionTargetResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_interception_target_with_options(request, runtime)

    async def delete_interception_target_async(
        self,
        request: sas_20181203_models.DeleteInterceptionTargetRequest,
    ) -> sas_20181203_models.DeleteInterceptionTargetResponse:
        """
        @summary Removes the network objects that are in effect in the container firewall.
        
        @param request: DeleteInterceptionTargetRequest
        @return: DeleteInterceptionTargetResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_interception_target_with_options_async(request, runtime)

    def delete_k8s_access_info_with_options(
        self,
        request: sas_20181203_models.DeleteK8sAccessInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteK8sAccessInfoResponse:
        """
        @summary Deletes the Kubernetes access information.
        
        @param request: DeleteK8sAccessInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteK8sAccessInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.aliyun_yundun_gateway_api_name):
            query['AliyunYundunGatewayApiName'] = request.aliyun_yundun_gateway_api_name
        if not UtilClient.is_unset(request.aliyun_yundun_gateway_pop_name):
            query['AliyunYundunGatewayPopName'] = request.aliyun_yundun_gateway_pop_name
        if not UtilClient.is_unset(request.aliyun_yundun_gateway_project_name):
            query['AliyunYundunGatewayProjectName'] = request.aliyun_yundun_gateway_project_name
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteK8sAccessInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteK8sAccessInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_k8s_access_info_with_options_async(
        self,
        request: sas_20181203_models.DeleteK8sAccessInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteK8sAccessInfoResponse:
        """
        @summary Deletes the Kubernetes access information.
        
        @param request: DeleteK8sAccessInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteK8sAccessInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.aliyun_yundun_gateway_api_name):
            query['AliyunYundunGatewayApiName'] = request.aliyun_yundun_gateway_api_name
        if not UtilClient.is_unset(request.aliyun_yundun_gateway_pop_name):
            query['AliyunYundunGatewayPopName'] = request.aliyun_yundun_gateway_pop_name
        if not UtilClient.is_unset(request.aliyun_yundun_gateway_project_name):
            query['AliyunYundunGatewayProjectName'] = request.aliyun_yundun_gateway_project_name
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteK8sAccessInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteK8sAccessInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_k8s_access_info(
        self,
        request: sas_20181203_models.DeleteK8sAccessInfoRequest,
    ) -> sas_20181203_models.DeleteK8sAccessInfoResponse:
        """
        @summary Deletes the Kubernetes access information.
        
        @param request: DeleteK8sAccessInfoRequest
        @return: DeleteK8sAccessInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_k8s_access_info_with_options(request, runtime)

    async def delete_k8s_access_info_async(
        self,
        request: sas_20181203_models.DeleteK8sAccessInfoRequest,
    ) -> sas_20181203_models.DeleteK8sAccessInfoResponse:
        """
        @summary Deletes the Kubernetes access information.
        
        @param request: DeleteK8sAccessInfoRequest
        @return: DeleteK8sAccessInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_k8s_access_info_with_options_async(request, runtime)

    def delete_login_base_config_with_options(
        self,
        request: sas_20181203_models.DeleteLoginBaseConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteLoginBaseConfigResponse:
        """
        @summary Deletes the basic configuration information from the logon security configurations for a specific asset.
        
        @param request: DeleteLoginBaseConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteLoginBaseConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config):
            query['Config'] = request.config
        if not UtilClient.is_unset(request.target):
            query['Target'] = request.target
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteLoginBaseConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteLoginBaseConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_login_base_config_with_options_async(
        self,
        request: sas_20181203_models.DeleteLoginBaseConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteLoginBaseConfigResponse:
        """
        @summary Deletes the basic configuration information from the logon security configurations for a specific asset.
        
        @param request: DeleteLoginBaseConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteLoginBaseConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config):
            query['Config'] = request.config
        if not UtilClient.is_unset(request.target):
            query['Target'] = request.target
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteLoginBaseConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteLoginBaseConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_login_base_config(
        self,
        request: sas_20181203_models.DeleteLoginBaseConfigRequest,
    ) -> sas_20181203_models.DeleteLoginBaseConfigResponse:
        """
        @summary Deletes the basic configuration information from the logon security configurations for a specific asset.
        
        @param request: DeleteLoginBaseConfigRequest
        @return: DeleteLoginBaseConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_login_base_config_with_options(request, runtime)

    async def delete_login_base_config_async(
        self,
        request: sas_20181203_models.DeleteLoginBaseConfigRequest,
    ) -> sas_20181203_models.DeleteLoginBaseConfigResponse:
        """
        @summary Deletes the basic configuration information from the logon security configurations for a specific asset.
        
        @param request: DeleteLoginBaseConfigRequest
        @return: DeleteLoginBaseConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_login_base_config_with_options_async(request, runtime)

    def delete_malicious_file_whitelist_config_with_options(
        self,
        request: sas_20181203_models.DeleteMaliciousFileWhitelistConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteMaliciousFileWhitelistConfigResponse:
        """
        @summary Deletes a whitelist rule for alerts generated for sensitive files that are detected by using the agentless detection feature.
        
        @param request: DeleteMaliciousFileWhitelistConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteMaliciousFileWhitelistConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteMaliciousFileWhitelistConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteMaliciousFileWhitelistConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_malicious_file_whitelist_config_with_options_async(
        self,
        request: sas_20181203_models.DeleteMaliciousFileWhitelistConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteMaliciousFileWhitelistConfigResponse:
        """
        @summary Deletes a whitelist rule for alerts generated for sensitive files that are detected by using the agentless detection feature.
        
        @param request: DeleteMaliciousFileWhitelistConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteMaliciousFileWhitelistConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteMaliciousFileWhitelistConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteMaliciousFileWhitelistConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_malicious_file_whitelist_config(
        self,
        request: sas_20181203_models.DeleteMaliciousFileWhitelistConfigRequest,
    ) -> sas_20181203_models.DeleteMaliciousFileWhitelistConfigResponse:
        """
        @summary Deletes a whitelist rule for alerts generated for sensitive files that are detected by using the agentless detection feature.
        
        @param request: DeleteMaliciousFileWhitelistConfigRequest
        @return: DeleteMaliciousFileWhitelistConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_malicious_file_whitelist_config_with_options(request, runtime)

    async def delete_malicious_file_whitelist_config_async(
        self,
        request: sas_20181203_models.DeleteMaliciousFileWhitelistConfigRequest,
    ) -> sas_20181203_models.DeleteMaliciousFileWhitelistConfigResponse:
        """
        @summary Deletes a whitelist rule for alerts generated for sensitive files that are detected by using the agentless detection feature.
        
        @param request: DeleteMaliciousFileWhitelistConfigRequest
        @return: DeleteMaliciousFileWhitelistConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_malicious_file_whitelist_config_with_options_async(request, runtime)

    def delete_malicious_note_with_options(
        self,
        request: sas_20181203_models.DeleteMaliciousNoteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteMaliciousNoteResponse:
        """
        @summary Removes the remarks added to alert events that are generated by the agentless detection feature.
        
        @param request: DeleteMaliciousNoteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteMaliciousNoteResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.note_id):
            query['NoteId'] = request.note_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteMaliciousNote',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteMaliciousNoteResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_malicious_note_with_options_async(
        self,
        request: sas_20181203_models.DeleteMaliciousNoteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteMaliciousNoteResponse:
        """
        @summary Removes the remarks added to alert events that are generated by the agentless detection feature.
        
        @param request: DeleteMaliciousNoteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteMaliciousNoteResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.note_id):
            query['NoteId'] = request.note_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteMaliciousNote',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteMaliciousNoteResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_malicious_note(
        self,
        request: sas_20181203_models.DeleteMaliciousNoteRequest,
    ) -> sas_20181203_models.DeleteMaliciousNoteResponse:
        """
        @summary Removes the remarks added to alert events that are generated by the agentless detection feature.
        
        @param request: DeleteMaliciousNoteRequest
        @return: DeleteMaliciousNoteResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_malicious_note_with_options(request, runtime)

    async def delete_malicious_note_async(
        self,
        request: sas_20181203_models.DeleteMaliciousNoteRequest,
    ) -> sas_20181203_models.DeleteMaliciousNoteResponse:
        """
        @summary Removes the remarks added to alert events that are generated by the agentless detection feature.
        
        @param request: DeleteMaliciousNoteRequest
        @return: DeleteMaliciousNoteResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_malicious_note_with_options_async(request, runtime)

    def delete_monitor_account_with_options(
        self,
        request: sas_20181203_models.DeleteMonitorAccountRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteMonitorAccountResponse:
        """
        @summary Deletes a member of the account managed by Security Center type of the multi-account management feature.
        
        @description You must use the management account of your resource directory or a delegated administrator account of Security Center to call this operation.
        
        @param request: DeleteMonitorAccountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteMonitorAccountResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.account_id):
            query['AccountId'] = request.account_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteMonitorAccount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteMonitorAccountResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_monitor_account_with_options_async(
        self,
        request: sas_20181203_models.DeleteMonitorAccountRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteMonitorAccountResponse:
        """
        @summary Deletes a member of the account managed by Security Center type of the multi-account management feature.
        
        @description You must use the management account of your resource directory or a delegated administrator account of Security Center to call this operation.
        
        @param request: DeleteMonitorAccountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteMonitorAccountResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.account_id):
            query['AccountId'] = request.account_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteMonitorAccount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteMonitorAccountResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_monitor_account(
        self,
        request: sas_20181203_models.DeleteMonitorAccountRequest,
    ) -> sas_20181203_models.DeleteMonitorAccountResponse:
        """
        @summary Deletes a member of the account managed by Security Center type of the multi-account management feature.
        
        @description You must use the management account of your resource directory or a delegated administrator account of Security Center to call this operation.
        
        @param request: DeleteMonitorAccountRequest
        @return: DeleteMonitorAccountResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_monitor_account_with_options(request, runtime)

    async def delete_monitor_account_async(
        self,
        request: sas_20181203_models.DeleteMonitorAccountRequest,
    ) -> sas_20181203_models.DeleteMonitorAccountResponse:
        """
        @summary Deletes a member of the account managed by Security Center type of the multi-account management feature.
        
        @description You must use the management account of your resource directory or a delegated administrator account of Security Center to call this operation.
        
        @param request: DeleteMonitorAccountRequest
        @return: DeleteMonitorAccountResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_monitor_account_with_options_async(request, runtime)

    def delete_opa_strategy_new_with_options(
        self,
        request: sas_20181203_models.DeleteOpaStrategyNewRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteOpaStrategyNewResponse:
        """
        @summary Deletes rules of the at-risk image blocking type.
        
        @param request: DeleteOpaStrategyNewRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteOpaStrategyNewResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.strategy_ids):
            query['StrategyIds'] = request.strategy_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteOpaStrategyNew',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteOpaStrategyNewResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_opa_strategy_new_with_options_async(
        self,
        request: sas_20181203_models.DeleteOpaStrategyNewRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteOpaStrategyNewResponse:
        """
        @summary Deletes rules of the at-risk image blocking type.
        
        @param request: DeleteOpaStrategyNewRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteOpaStrategyNewResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.strategy_ids):
            query['StrategyIds'] = request.strategy_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteOpaStrategyNew',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteOpaStrategyNewResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_opa_strategy_new(
        self,
        request: sas_20181203_models.DeleteOpaStrategyNewRequest,
    ) -> sas_20181203_models.DeleteOpaStrategyNewResponse:
        """
        @summary Deletes rules of the at-risk image blocking type.
        
        @param request: DeleteOpaStrategyNewRequest
        @return: DeleteOpaStrategyNewResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_opa_strategy_new_with_options(request, runtime)

    async def delete_opa_strategy_new_async(
        self,
        request: sas_20181203_models.DeleteOpaStrategyNewRequest,
    ) -> sas_20181203_models.DeleteOpaStrategyNewResponse:
        """
        @summary Deletes rules of the at-risk image blocking type.
        
        @param request: DeleteOpaStrategyNewRequest
        @return: DeleteOpaStrategyNewResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_opa_strategy_new_with_options_async(request, runtime)

    def delete_oss_scan_config_with_options(
        self,
        request: sas_20181203_models.DeleteOssScanConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteOssScanConfigResponse:
        """
        @summary Deletes the configuration of an Object Storage Service (OSS) file detection policy.
        
        @param request: DeleteOssScanConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteOssScanConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteOssScanConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteOssScanConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_oss_scan_config_with_options_async(
        self,
        request: sas_20181203_models.DeleteOssScanConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteOssScanConfigResponse:
        """
        @summary Deletes the configuration of an Object Storage Service (OSS) file detection policy.
        
        @param request: DeleteOssScanConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteOssScanConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteOssScanConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteOssScanConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_oss_scan_config(
        self,
        request: sas_20181203_models.DeleteOssScanConfigRequest,
    ) -> sas_20181203_models.DeleteOssScanConfigResponse:
        """
        @summary Deletes the configuration of an Object Storage Service (OSS) file detection policy.
        
        @param request: DeleteOssScanConfigRequest
        @return: DeleteOssScanConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_oss_scan_config_with_options(request, runtime)

    async def delete_oss_scan_config_async(
        self,
        request: sas_20181203_models.DeleteOssScanConfigRequest,
    ) -> sas_20181203_models.DeleteOssScanConfigResponse:
        """
        @summary Deletes the configuration of an Object Storage Service (OSS) file detection policy.
        
        @param request: DeleteOssScanConfigRequest
        @return: DeleteOssScanConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_oss_scan_config_with_options_async(request, runtime)

    def delete_private_registry_with_options(
        self,
        request: sas_20181203_models.DeletePrivateRegistryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeletePrivateRegistryResponse:
        """
        @summary Deletes a private image repository by using the ID of the image repository.
        
        @param request: DeletePrivateRegistryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeletePrivateRegistryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.registry_id):
            query['RegistryId'] = request.registry_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeletePrivateRegistry',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeletePrivateRegistryResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_private_registry_with_options_async(
        self,
        request: sas_20181203_models.DeletePrivateRegistryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeletePrivateRegistryResponse:
        """
        @summary Deletes a private image repository by using the ID of the image repository.
        
        @param request: DeletePrivateRegistryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeletePrivateRegistryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.registry_id):
            query['RegistryId'] = request.registry_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeletePrivateRegistry',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeletePrivateRegistryResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_private_registry(
        self,
        request: sas_20181203_models.DeletePrivateRegistryRequest,
    ) -> sas_20181203_models.DeletePrivateRegistryResponse:
        """
        @summary Deletes a private image repository by using the ID of the image repository.
        
        @param request: DeletePrivateRegistryRequest
        @return: DeletePrivateRegistryResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_private_registry_with_options(request, runtime)

    async def delete_private_registry_async(
        self,
        request: sas_20181203_models.DeletePrivateRegistryRequest,
    ) -> sas_20181203_models.DeletePrivateRegistryResponse:
        """
        @summary Deletes a private image repository by using the ID of the image repository.
        
        @param request: DeletePrivateRegistryRequest
        @return: DeletePrivateRegistryResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_private_registry_with_options_async(request, runtime)

    def delete_sas_container_web_defense_rule_with_options(
        self,
        request: sas_20181203_models.DeleteSasContainerWebDefenseRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteSasContainerWebDefenseRuleResponse:
        """
        @summary Deletes a rule for container tamper-proofing.
        
        @param request: DeleteSasContainerWebDefenseRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteSasContainerWebDefenseRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.rule_id):
            query['RuleId'] = request.rule_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteSasContainerWebDefenseRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteSasContainerWebDefenseRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_sas_container_web_defense_rule_with_options_async(
        self,
        request: sas_20181203_models.DeleteSasContainerWebDefenseRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteSasContainerWebDefenseRuleResponse:
        """
        @summary Deletes a rule for container tamper-proofing.
        
        @param request: DeleteSasContainerWebDefenseRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteSasContainerWebDefenseRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.rule_id):
            query['RuleId'] = request.rule_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteSasContainerWebDefenseRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteSasContainerWebDefenseRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_sas_container_web_defense_rule(
        self,
        request: sas_20181203_models.DeleteSasContainerWebDefenseRuleRequest,
    ) -> sas_20181203_models.DeleteSasContainerWebDefenseRuleResponse:
        """
        @summary Deletes a rule for container tamper-proofing.
        
        @param request: DeleteSasContainerWebDefenseRuleRequest
        @return: DeleteSasContainerWebDefenseRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_sas_container_web_defense_rule_with_options(request, runtime)

    async def delete_sas_container_web_defense_rule_async(
        self,
        request: sas_20181203_models.DeleteSasContainerWebDefenseRuleRequest,
    ) -> sas_20181203_models.DeleteSasContainerWebDefenseRuleResponse:
        """
        @summary Deletes a rule for container tamper-proofing.
        
        @param request: DeleteSasContainerWebDefenseRuleRequest
        @return: DeleteSasContainerWebDefenseRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_sas_container_web_defense_rule_with_options_async(request, runtime)

    def delete_search_condition_with_options(
        self,
        request: sas_20181203_models.DeleteSearchConditionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteSearchConditionResponse:
        """
        @summary Deletes a frequently used search condition by using the asset management feature of the Assets module in the Security Center console.
        
        @param request: DeleteSearchConditionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteSearchConditionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteSearchCondition',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteSearchConditionResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_search_condition_with_options_async(
        self,
        request: sas_20181203_models.DeleteSearchConditionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteSearchConditionResponse:
        """
        @summary Deletes a frequently used search condition by using the asset management feature of the Assets module in the Security Center console.
        
        @param request: DeleteSearchConditionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteSearchConditionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteSearchCondition',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteSearchConditionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_search_condition(
        self,
        request: sas_20181203_models.DeleteSearchConditionRequest,
    ) -> sas_20181203_models.DeleteSearchConditionResponse:
        """
        @summary Deletes a frequently used search condition by using the asset management feature of the Assets module in the Security Center console.
        
        @param request: DeleteSearchConditionRequest
        @return: DeleteSearchConditionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_search_condition_with_options(request, runtime)

    async def delete_search_condition_async(
        self,
        request: sas_20181203_models.DeleteSearchConditionRequest,
    ) -> sas_20181203_models.DeleteSearchConditionResponse:
        """
        @summary Deletes a frequently used search condition by using the asset management feature of the Assets module in the Security Center console.
        
        @param request: DeleteSearchConditionRequest
        @return: DeleteSearchConditionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_search_condition_with_options_async(request, runtime)

    def delete_security_event_mark_miss_list_with_options(
        self,
        request: sas_20181203_models.DeleteSecurityEventMarkMissListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteSecurityEventMarkMissListResponse:
        """
        @deprecated OpenAPI DeleteSecurityEventMarkMissList is deprecated, please use Sas::2018-12-03::ModifySecurityEventMarkMissIndividually instead.
        
        @summary Deletes multiple custom defense rules at a time. The custom defense rules are used to add false positive alerts to the whitelist.
        
        @param request: DeleteSecurityEventMarkMissListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteSecurityEventMarkMissListResponse
        Deprecated
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.ids):
            query['Ids'] = request.ids
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteSecurityEventMarkMissList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteSecurityEventMarkMissListResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_security_event_mark_miss_list_with_options_async(
        self,
        request: sas_20181203_models.DeleteSecurityEventMarkMissListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteSecurityEventMarkMissListResponse:
        """
        @deprecated OpenAPI DeleteSecurityEventMarkMissList is deprecated, please use Sas::2018-12-03::ModifySecurityEventMarkMissIndividually instead.
        
        @summary Deletes multiple custom defense rules at a time. The custom defense rules are used to add false positive alerts to the whitelist.
        
        @param request: DeleteSecurityEventMarkMissListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteSecurityEventMarkMissListResponse
        Deprecated
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.ids):
            query['Ids'] = request.ids
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteSecurityEventMarkMissList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteSecurityEventMarkMissListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_security_event_mark_miss_list(
        self,
        request: sas_20181203_models.DeleteSecurityEventMarkMissListRequest,
    ) -> sas_20181203_models.DeleteSecurityEventMarkMissListResponse:
        """
        @deprecated OpenAPI DeleteSecurityEventMarkMissList is deprecated, please use Sas::2018-12-03::ModifySecurityEventMarkMissIndividually instead.
        
        @summary Deletes multiple custom defense rules at a time. The custom defense rules are used to add false positive alerts to the whitelist.
        
        @param request: DeleteSecurityEventMarkMissListRequest
        @return: DeleteSecurityEventMarkMissListResponse
        Deprecated
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_security_event_mark_miss_list_with_options(request, runtime)

    async def delete_security_event_mark_miss_list_async(
        self,
        request: sas_20181203_models.DeleteSecurityEventMarkMissListRequest,
    ) -> sas_20181203_models.DeleteSecurityEventMarkMissListResponse:
        """
        @deprecated OpenAPI DeleteSecurityEventMarkMissList is deprecated, please use Sas::2018-12-03::ModifySecurityEventMarkMissIndividually instead.
        
        @summary Deletes multiple custom defense rules at a time. The custom defense rules are used to add false positive alerts to the whitelist.
        
        @param request: DeleteSecurityEventMarkMissListRequest
        @return: DeleteSecurityEventMarkMissListResponse
        Deprecated
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_security_event_mark_miss_list_with_options_async(request, runtime)

    def delete_service_trail_with_options(
        self,
        request: sas_20181203_models.DeleteServiceTrailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteServiceTrailResponse:
        """
        @summary Deletes a service trail.
        
        @param request: DeleteServiceTrailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteServiceTrailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteServiceTrail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteServiceTrailResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_service_trail_with_options_async(
        self,
        request: sas_20181203_models.DeleteServiceTrailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteServiceTrailResponse:
        """
        @summary Deletes a service trail.
        
        @param request: DeleteServiceTrailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteServiceTrailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteServiceTrail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteServiceTrailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_service_trail(
        self,
        request: sas_20181203_models.DeleteServiceTrailRequest,
    ) -> sas_20181203_models.DeleteServiceTrailResponse:
        """
        @summary Deletes a service trail.
        
        @param request: DeleteServiceTrailRequest
        @return: DeleteServiceTrailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_service_trail_with_options(request, runtime)

    async def delete_service_trail_async(
        self,
        request: sas_20181203_models.DeleteServiceTrailRequest,
    ) -> sas_20181203_models.DeleteServiceTrailResponse:
        """
        @summary Deletes a service trail.
        
        @param request: DeleteServiceTrailRequest
        @return: DeleteServiceTrailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_service_trail_with_options_async(request, runtime)

    def delete_soar_strategy_task_with_options(
        self,
        request: sas_20181203_models.DeleteSoarStrategyTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteSoarStrategyTaskResponse:
        """
        @summary Deletes a policy task that is in the waiting state on the Playbook page.
        
        @description Only the Enterprise and Ultimate editions of Security Center support this API operation.
        
        @param request: DeleteSoarStrategyTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteSoarStrategyTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.strategy_task_id):
            query['StrategyTaskId'] = request.strategy_task_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteSoarStrategyTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteSoarStrategyTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_soar_strategy_task_with_options_async(
        self,
        request: sas_20181203_models.DeleteSoarStrategyTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteSoarStrategyTaskResponse:
        """
        @summary Deletes a policy task that is in the waiting state on the Playbook page.
        
        @description Only the Enterprise and Ultimate editions of Security Center support this API operation.
        
        @param request: DeleteSoarStrategyTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteSoarStrategyTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.strategy_task_id):
            query['StrategyTaskId'] = request.strategy_task_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteSoarStrategyTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteSoarStrategyTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_soar_strategy_task(
        self,
        request: sas_20181203_models.DeleteSoarStrategyTaskRequest,
    ) -> sas_20181203_models.DeleteSoarStrategyTaskResponse:
        """
        @summary Deletes a policy task that is in the waiting state on the Playbook page.
        
        @description Only the Enterprise and Ultimate editions of Security Center support this API operation.
        
        @param request: DeleteSoarStrategyTaskRequest
        @return: DeleteSoarStrategyTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_soar_strategy_task_with_options(request, runtime)

    async def delete_soar_strategy_task_async(
        self,
        request: sas_20181203_models.DeleteSoarStrategyTaskRequest,
    ) -> sas_20181203_models.DeleteSoarStrategyTaskResponse:
        """
        @summary Deletes a policy task that is in the waiting state on the Playbook page.
        
        @description Only the Enterprise and Ultimate editions of Security Center support this API operation.
        
        @param request: DeleteSoarStrategyTaskRequest
        @return: DeleteSoarStrategyTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_soar_strategy_task_with_options_async(request, runtime)

    def delete_strategy_with_options(
        self,
        request: sas_20181203_models.DeleteStrategyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteStrategyResponse:
        """
        @summary Deletes a baseline check policy.
        
        @param request: DeleteStrategyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteStrategyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteStrategy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteStrategyResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_strategy_with_options_async(
        self,
        request: sas_20181203_models.DeleteStrategyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteStrategyResponse:
        """
        @summary Deletes a baseline check policy.
        
        @param request: DeleteStrategyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteStrategyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteStrategy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteStrategyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_strategy(
        self,
        request: sas_20181203_models.DeleteStrategyRequest,
    ) -> sas_20181203_models.DeleteStrategyResponse:
        """
        @summary Deletes a baseline check policy.
        
        @param request: DeleteStrategyRequest
        @return: DeleteStrategyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_strategy_with_options(request, runtime)

    async def delete_strategy_async(
        self,
        request: sas_20181203_models.DeleteStrategyRequest,
    ) -> sas_20181203_models.DeleteStrategyResponse:
        """
        @summary Deletes a baseline check policy.
        
        @param request: DeleteStrategyRequest
        @return: DeleteStrategyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_strategy_with_options_async(request, runtime)

    def delete_susp_event_node_with_options(
        self,
        request: sas_20181203_models.DeleteSuspEventNodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteSuspEventNodeResponse:
        """
        @summary Deletes the description of an alert.
        
        @param request: DeleteSuspEventNodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteSuspEventNodeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.note_id):
            query['NoteId'] = request.note_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteSuspEventNode',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteSuspEventNodeResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_susp_event_node_with_options_async(
        self,
        request: sas_20181203_models.DeleteSuspEventNodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteSuspEventNodeResponse:
        """
        @summary Deletes the description of an alert.
        
        @param request: DeleteSuspEventNodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteSuspEventNodeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.note_id):
            query['NoteId'] = request.note_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteSuspEventNode',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteSuspEventNodeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_susp_event_node(
        self,
        request: sas_20181203_models.DeleteSuspEventNodeRequest,
    ) -> sas_20181203_models.DeleteSuspEventNodeResponse:
        """
        @summary Deletes the description of an alert.
        
        @param request: DeleteSuspEventNodeRequest
        @return: DeleteSuspEventNodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_susp_event_node_with_options(request, runtime)

    async def delete_susp_event_node_async(
        self,
        request: sas_20181203_models.DeleteSuspEventNodeRequest,
    ) -> sas_20181203_models.DeleteSuspEventNodeResponse:
        """
        @summary Deletes the description of an alert.
        
        @param request: DeleteSuspEventNodeRequest
        @return: DeleteSuspEventNodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_susp_event_node_with_options_async(request, runtime)

    def delete_tag_with_uuid_with_options(
        self,
        request: sas_20181203_models.DeleteTagWithUuidRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteTagWithUuidResponse:
        """
        @summary Removes custom tags from assets.
        
        @description Security Center provides asset importance tags and custom tags. You can call this operation to remove only the custom tag that is added to an asset.
        
        @param request: DeleteTagWithUuidRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteTagWithUuidResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.tag_name):
            query['TagName'] = request.tag_name
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteTagWithUuid',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteTagWithUuidResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_tag_with_uuid_with_options_async(
        self,
        request: sas_20181203_models.DeleteTagWithUuidRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteTagWithUuidResponse:
        """
        @summary Removes custom tags from assets.
        
        @description Security Center provides asset importance tags and custom tags. You can call this operation to remove only the custom tag that is added to an asset.
        
        @param request: DeleteTagWithUuidRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteTagWithUuidResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.tag_name):
            query['TagName'] = request.tag_name
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteTagWithUuid',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteTagWithUuidResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_tag_with_uuid(
        self,
        request: sas_20181203_models.DeleteTagWithUuidRequest,
    ) -> sas_20181203_models.DeleteTagWithUuidResponse:
        """
        @summary Removes custom tags from assets.
        
        @description Security Center provides asset importance tags and custom tags. You can call this operation to remove only the custom tag that is added to an asset.
        
        @param request: DeleteTagWithUuidRequest
        @return: DeleteTagWithUuidResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_tag_with_uuid_with_options(request, runtime)

    async def delete_tag_with_uuid_async(
        self,
        request: sas_20181203_models.DeleteTagWithUuidRequest,
    ) -> sas_20181203_models.DeleteTagWithUuidResponse:
        """
        @summary Removes custom tags from assets.
        
        @description Security Center provides asset importance tags and custom tags. You can call this operation to remove only the custom tag that is added to an asset.
        
        @param request: DeleteTagWithUuidRequest
        @return: DeleteTagWithUuidResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_tag_with_uuid_with_options_async(request, runtime)

    def delete_uni_backup_policy_with_options(
        self,
        request: sas_20181203_models.DeleteUniBackupPolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteUniBackupPolicyResponse:
        """
        @summary Deletes anti-ransomware policies that are created for databases.
        
        @param request: DeleteUniBackupPolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteUniBackupPolicyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.policy_id):
            query['PolicyId'] = request.policy_id
        if not UtilClient.is_unset(request.policy_ids):
            query['PolicyIds'] = request.policy_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteUniBackupPolicy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteUniBackupPolicyResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_uni_backup_policy_with_options_async(
        self,
        request: sas_20181203_models.DeleteUniBackupPolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteUniBackupPolicyResponse:
        """
        @summary Deletes anti-ransomware policies that are created for databases.
        
        @param request: DeleteUniBackupPolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteUniBackupPolicyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.policy_id):
            query['PolicyId'] = request.policy_id
        if not UtilClient.is_unset(request.policy_ids):
            query['PolicyIds'] = request.policy_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteUniBackupPolicy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteUniBackupPolicyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_uni_backup_policy(
        self,
        request: sas_20181203_models.DeleteUniBackupPolicyRequest,
    ) -> sas_20181203_models.DeleteUniBackupPolicyResponse:
        """
        @summary Deletes anti-ransomware policies that are created for databases.
        
        @param request: DeleteUniBackupPolicyRequest
        @return: DeleteUniBackupPolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_uni_backup_policy_with_options(request, runtime)

    async def delete_uni_backup_policy_async(
        self,
        request: sas_20181203_models.DeleteUniBackupPolicyRequest,
    ) -> sas_20181203_models.DeleteUniBackupPolicyResponse:
        """
        @summary Deletes anti-ransomware policies that are created for databases.
        
        @param request: DeleteUniBackupPolicyRequest
        @return: DeleteUniBackupPolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_uni_backup_policy_with_options_async(request, runtime)

    def delete_vpc_honey_pot_with_options(
        self,
        request: sas_20181203_models.DeleteVpcHoneyPotRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteVpcHoneyPotResponse:
        """
        @summary Deletes a honeypot.
        
        @param request: DeleteVpcHoneyPotRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteVpcHoneyPotResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.vpc_id):
            query['VpcId'] = request.vpc_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteVpcHoneyPot',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteVpcHoneyPotResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_vpc_honey_pot_with_options_async(
        self,
        request: sas_20181203_models.DeleteVpcHoneyPotRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteVpcHoneyPotResponse:
        """
        @summary Deletes a honeypot.
        
        @param request: DeleteVpcHoneyPotRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteVpcHoneyPotResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.vpc_id):
            query['VpcId'] = request.vpc_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteVpcHoneyPot',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteVpcHoneyPotResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_vpc_honey_pot(
        self,
        request: sas_20181203_models.DeleteVpcHoneyPotRequest,
    ) -> sas_20181203_models.DeleteVpcHoneyPotResponse:
        """
        @summary Deletes a honeypot.
        
        @param request: DeleteVpcHoneyPotRequest
        @return: DeleteVpcHoneyPotResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_vpc_honey_pot_with_options(request, runtime)

    async def delete_vpc_honey_pot_async(
        self,
        request: sas_20181203_models.DeleteVpcHoneyPotRequest,
    ) -> sas_20181203_models.DeleteVpcHoneyPotResponse:
        """
        @summary Deletes a honeypot.
        
        @param request: DeleteVpcHoneyPotRequest
        @return: DeleteVpcHoneyPotResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_vpc_honey_pot_with_options_async(request, runtime)

    def delete_vul_auto_repair_config_with_options(
        self,
        request: sas_20181203_models.DeleteVulAutoRepairConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteVulAutoRepairConfigResponse:
        """
        @summary Deletes configurations of of an automatic vulnerability fixing task at a time on the Playbook page.
        
        @param request: DeleteVulAutoRepairConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteVulAutoRepairConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.alias_name):
            query['AliasName'] = request.alias_name
        if not UtilClient.is_unset(request.config_id_list):
            query['ConfigIdList'] = request.config_id_list
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteVulAutoRepairConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteVulAutoRepairConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_vul_auto_repair_config_with_options_async(
        self,
        request: sas_20181203_models.DeleteVulAutoRepairConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteVulAutoRepairConfigResponse:
        """
        @summary Deletes configurations of of an automatic vulnerability fixing task at a time on the Playbook page.
        
        @param request: DeleteVulAutoRepairConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteVulAutoRepairConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.alias_name):
            query['AliasName'] = request.alias_name
        if not UtilClient.is_unset(request.config_id_list):
            query['ConfigIdList'] = request.config_id_list
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteVulAutoRepairConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteVulAutoRepairConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_vul_auto_repair_config(
        self,
        request: sas_20181203_models.DeleteVulAutoRepairConfigRequest,
    ) -> sas_20181203_models.DeleteVulAutoRepairConfigResponse:
        """
        @summary Deletes configurations of of an automatic vulnerability fixing task at a time on the Playbook page.
        
        @param request: DeleteVulAutoRepairConfigRequest
        @return: DeleteVulAutoRepairConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_vul_auto_repair_config_with_options(request, runtime)

    async def delete_vul_auto_repair_config_async(
        self,
        request: sas_20181203_models.DeleteVulAutoRepairConfigRequest,
    ) -> sas_20181203_models.DeleteVulAutoRepairConfigResponse:
        """
        @summary Deletes configurations of of an automatic vulnerability fixing task at a time on the Playbook page.
        
        @param request: DeleteVulAutoRepairConfigRequest
        @return: DeleteVulAutoRepairConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_vul_auto_repair_config_with_options_async(request, runtime)

    def delete_vul_whitelist_with_options(
        self,
        request: sas_20181203_models.DeleteVulWhitelistRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteVulWhitelistResponse:
        """
        @summary Deletes a specified vulnerability whitelist.
        
        @param request: DeleteVulWhitelistRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteVulWhitelistResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.whitelist):
            query['Whitelist'] = request.whitelist
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteVulWhitelist',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteVulWhitelistResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_vul_whitelist_with_options_async(
        self,
        request: sas_20181203_models.DeleteVulWhitelistRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DeleteVulWhitelistResponse:
        """
        @summary Deletes a specified vulnerability whitelist.
        
        @param request: DeleteVulWhitelistRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteVulWhitelistResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.whitelist):
            query['Whitelist'] = request.whitelist
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteVulWhitelist',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DeleteVulWhitelistResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_vul_whitelist(
        self,
        request: sas_20181203_models.DeleteVulWhitelistRequest,
    ) -> sas_20181203_models.DeleteVulWhitelistResponse:
        """
        @summary Deletes a specified vulnerability whitelist.
        
        @param request: DeleteVulWhitelistRequest
        @return: DeleteVulWhitelistResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_vul_whitelist_with_options(request, runtime)

    async def delete_vul_whitelist_async(
        self,
        request: sas_20181203_models.DeleteVulWhitelistRequest,
    ) -> sas_20181203_models.DeleteVulWhitelistResponse:
        """
        @summary Deletes a specified vulnerability whitelist.
        
        @param request: DeleteVulWhitelistRequest
        @return: DeleteVulWhitelistResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_vul_whitelist_with_options_async(request, runtime)

    def describe_aiasset_summary_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAIAssetSummaryResponse:
        """
        @summary Queries the overview of user AI assets.
        
        @param request: DescribeAIAssetSummaryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAIAssetSummaryResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeAIAssetSummary',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAIAssetSummaryResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_aiasset_summary_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAIAssetSummaryResponse:
        """
        @summary Queries the overview of user AI assets.
        
        @param request: DescribeAIAssetSummaryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAIAssetSummaryResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeAIAssetSummary',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAIAssetSummaryResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_aiasset_summary(self) -> sas_20181203_models.DescribeAIAssetSummaryResponse:
        """
        @summary Queries the overview of user AI assets.
        
        @return: DescribeAIAssetSummaryResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_aiasset_summary_with_options(runtime)

    async def describe_aiasset_summary_async(self) -> sas_20181203_models.DescribeAIAssetSummaryResponse:
        """
        @summary Queries the overview of user AI assets.
        
        @return: DescribeAIAssetSummaryResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_aiasset_summary_with_options_async(runtime)

    def describe_access_key_leak_detail_with_options(
        self,
        request: sas_20181203_models.DescribeAccessKeyLeakDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAccessKeyLeakDetailResponse:
        """
        @summary Queries the details of AccessKey pair leaks.
        
        @param request: DescribeAccessKeyLeakDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAccessKeyLeakDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAccessKeyLeakDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAccessKeyLeakDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_access_key_leak_detail_with_options_async(
        self,
        request: sas_20181203_models.DescribeAccessKeyLeakDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAccessKeyLeakDetailResponse:
        """
        @summary Queries the details of AccessKey pair leaks.
        
        @param request: DescribeAccessKeyLeakDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAccessKeyLeakDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAccessKeyLeakDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAccessKeyLeakDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_access_key_leak_detail(
        self,
        request: sas_20181203_models.DescribeAccessKeyLeakDetailRequest,
    ) -> sas_20181203_models.DescribeAccessKeyLeakDetailResponse:
        """
        @summary Queries the details of AccessKey pair leaks.
        
        @param request: DescribeAccessKeyLeakDetailRequest
        @return: DescribeAccessKeyLeakDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_access_key_leak_detail_with_options(request, runtime)

    async def describe_access_key_leak_detail_async(
        self,
        request: sas_20181203_models.DescribeAccessKeyLeakDetailRequest,
    ) -> sas_20181203_models.DescribeAccessKeyLeakDetailResponse:
        """
        @summary Queries the details of AccessKey pair leaks.
        
        @param request: DescribeAccessKeyLeakDetailRequest
        @return: DescribeAccessKeyLeakDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_access_key_leak_detail_with_options_async(request, runtime)

    def describe_accesskey_leak_list_with_options(
        self,
        request: sas_20181203_models.DescribeAccesskeyLeakListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAccesskeyLeakListResponse:
        """
        @summary Queries the AccessKey pair leaks that are detected on your assets.
        
        @param request: DescribeAccesskeyLeakListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAccesskeyLeakListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.query):
            query['Query'] = request.query
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.start_ts):
            query['StartTs'] = request.start_ts
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAccesskeyLeakList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAccesskeyLeakListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_accesskey_leak_list_with_options_async(
        self,
        request: sas_20181203_models.DescribeAccesskeyLeakListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAccesskeyLeakListResponse:
        """
        @summary Queries the AccessKey pair leaks that are detected on your assets.
        
        @param request: DescribeAccesskeyLeakListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAccesskeyLeakListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.query):
            query['Query'] = request.query
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.start_ts):
            query['StartTs'] = request.start_ts
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAccesskeyLeakList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAccesskeyLeakListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_accesskey_leak_list(
        self,
        request: sas_20181203_models.DescribeAccesskeyLeakListRequest,
    ) -> sas_20181203_models.DescribeAccesskeyLeakListResponse:
        """
        @summary Queries the AccessKey pair leaks that are detected on your assets.
        
        @param request: DescribeAccesskeyLeakListRequest
        @return: DescribeAccesskeyLeakListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_accesskey_leak_list_with_options(request, runtime)

    async def describe_accesskey_leak_list_async(
        self,
        request: sas_20181203_models.DescribeAccesskeyLeakListRequest,
    ) -> sas_20181203_models.DescribeAccesskeyLeakListResponse:
        """
        @summary Queries the AccessKey pair leaks that are detected on your assets.
        
        @param request: DescribeAccesskeyLeakListRequest
        @return: DescribeAccesskeyLeakListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_accesskey_leak_list_with_options_async(request, runtime)

    def describe_affected_assets_with_options(
        self,
        request: sas_20181203_models.DescribeAffectedAssetsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAffectedAssetsResponse:
        """
        @summary Queries the affected servers in the result of a virus scan task.
        
        @param request: DescribeAffectedAssetsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAffectedAssetsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current):
            query['Current'] = request.current
        if not UtilClient.is_unset(request.levels):
            query['Levels'] = request.levels
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAffectedAssets',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAffectedAssetsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_affected_assets_with_options_async(
        self,
        request: sas_20181203_models.DescribeAffectedAssetsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAffectedAssetsResponse:
        """
        @summary Queries the affected servers in the result of a virus scan task.
        
        @param request: DescribeAffectedAssetsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAffectedAssetsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current):
            query['Current'] = request.current
        if not UtilClient.is_unset(request.levels):
            query['Levels'] = request.levels
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAffectedAssets',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAffectedAssetsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_affected_assets(
        self,
        request: sas_20181203_models.DescribeAffectedAssetsRequest,
    ) -> sas_20181203_models.DescribeAffectedAssetsResponse:
        """
        @summary Queries the affected servers in the result of a virus scan task.
        
        @param request: DescribeAffectedAssetsRequest
        @return: DescribeAffectedAssetsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_affected_assets_with_options(request, runtime)

    async def describe_affected_assets_async(
        self,
        request: sas_20181203_models.DescribeAffectedAssetsRequest,
    ) -> sas_20181203_models.DescribeAffectedAssetsResponse:
        """
        @summary Queries the affected servers in the result of a virus scan task.
        
        @param request: DescribeAffectedAssetsRequest
        @return: DescribeAffectedAssetsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_affected_assets_with_options_async(request, runtime)

    def describe_affected_malicious_file_images_with_options(
        self,
        request: sas_20181203_models.DescribeAffectedMaliciousFileImagesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAffectedMaliciousFileImagesResponse:
        """
        @summary Queries the details of malicious image samples.
        
        @param request: DescribeAffectedMaliciousFileImagesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAffectedMaliciousFileImagesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.container_id):
            query['ContainerId'] = request.container_id
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.image):
            query['Image'] = request.image
        if not UtilClient.is_unset(request.image_digest):
            query['ImageDigest'] = request.image_digest
        if not UtilClient.is_unset(request.image_layer):
            query['ImageLayer'] = request.image_layer
        if not UtilClient.is_unset(request.image_tag):
            query['ImageTag'] = request.image_tag
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.levels):
            query['Levels'] = request.levels
        if not UtilClient.is_unset(request.malicious_md_5):
            query['MaliciousMd5'] = request.malicious_md_5
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.pod):
            query['Pod'] = request.pod
        if not UtilClient.is_unset(request.repo_id):
            query['RepoId'] = request.repo_id
        if not UtilClient.is_unset(request.repo_instance_id):
            query['RepoInstanceId'] = request.repo_instance_id
        if not UtilClient.is_unset(request.repo_name):
            query['RepoName'] = request.repo_name
        if not UtilClient.is_unset(request.repo_namespace):
            query['RepoNamespace'] = request.repo_namespace
        if not UtilClient.is_unset(request.repo_region_id):
            query['RepoRegionId'] = request.repo_region_id
        if not UtilClient.is_unset(request.scan_range):
            query['ScanRange'] = request.scan_range
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAffectedMaliciousFileImages',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAffectedMaliciousFileImagesResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_affected_malicious_file_images_with_options_async(
        self,
        request: sas_20181203_models.DescribeAffectedMaliciousFileImagesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAffectedMaliciousFileImagesResponse:
        """
        @summary Queries the details of malicious image samples.
        
        @param request: DescribeAffectedMaliciousFileImagesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAffectedMaliciousFileImagesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.container_id):
            query['ContainerId'] = request.container_id
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.image):
            query['Image'] = request.image
        if not UtilClient.is_unset(request.image_digest):
            query['ImageDigest'] = request.image_digest
        if not UtilClient.is_unset(request.image_layer):
            query['ImageLayer'] = request.image_layer
        if not UtilClient.is_unset(request.image_tag):
            query['ImageTag'] = request.image_tag
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.levels):
            query['Levels'] = request.levels
        if not UtilClient.is_unset(request.malicious_md_5):
            query['MaliciousMd5'] = request.malicious_md_5
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.pod):
            query['Pod'] = request.pod
        if not UtilClient.is_unset(request.repo_id):
            query['RepoId'] = request.repo_id
        if not UtilClient.is_unset(request.repo_instance_id):
            query['RepoInstanceId'] = request.repo_instance_id
        if not UtilClient.is_unset(request.repo_name):
            query['RepoName'] = request.repo_name
        if not UtilClient.is_unset(request.repo_namespace):
            query['RepoNamespace'] = request.repo_namespace
        if not UtilClient.is_unset(request.repo_region_id):
            query['RepoRegionId'] = request.repo_region_id
        if not UtilClient.is_unset(request.scan_range):
            query['ScanRange'] = request.scan_range
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAffectedMaliciousFileImages',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAffectedMaliciousFileImagesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_affected_malicious_file_images(
        self,
        request: sas_20181203_models.DescribeAffectedMaliciousFileImagesRequest,
    ) -> sas_20181203_models.DescribeAffectedMaliciousFileImagesResponse:
        """
        @summary Queries the details of malicious image samples.
        
        @param request: DescribeAffectedMaliciousFileImagesRequest
        @return: DescribeAffectedMaliciousFileImagesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_affected_malicious_file_images_with_options(request, runtime)

    async def describe_affected_malicious_file_images_async(
        self,
        request: sas_20181203_models.DescribeAffectedMaliciousFileImagesRequest,
    ) -> sas_20181203_models.DescribeAffectedMaliciousFileImagesResponse:
        """
        @summary Queries the details of malicious image samples.
        
        @param request: DescribeAffectedMaliciousFileImagesRequest
        @return: DescribeAffectedMaliciousFileImagesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_affected_malicious_file_images_with_options_async(request, runtime)

    def describe_agent_install_status_with_options(
        self,
        request: sas_20181203_models.DescribeAgentInstallStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAgentInstallStatusResponse:
        """
        @summary Queries the installation status of the Security Center agent after you run an installation command by using Cloud Assistant. You can call this operation to query the installation status only if the installation request is initiated within 2 minutes.
        
        @param request: DescribeAgentInstallStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAgentInstallStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAgentInstallStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAgentInstallStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_agent_install_status_with_options_async(
        self,
        request: sas_20181203_models.DescribeAgentInstallStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAgentInstallStatusResponse:
        """
        @summary Queries the installation status of the Security Center agent after you run an installation command by using Cloud Assistant. You can call this operation to query the installation status only if the installation request is initiated within 2 minutes.
        
        @param request: DescribeAgentInstallStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAgentInstallStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAgentInstallStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAgentInstallStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_agent_install_status(
        self,
        request: sas_20181203_models.DescribeAgentInstallStatusRequest,
    ) -> sas_20181203_models.DescribeAgentInstallStatusResponse:
        """
        @summary Queries the installation status of the Security Center agent after you run an installation command by using Cloud Assistant. You can call this operation to query the installation status only if the installation request is initiated within 2 minutes.
        
        @param request: DescribeAgentInstallStatusRequest
        @return: DescribeAgentInstallStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_agent_install_status_with_options(request, runtime)

    async def describe_agent_install_status_async(
        self,
        request: sas_20181203_models.DescribeAgentInstallStatusRequest,
    ) -> sas_20181203_models.DescribeAgentInstallStatusResponse:
        """
        @summary Queries the installation status of the Security Center agent after you run an installation command by using Cloud Assistant. You can call this operation to query the installation status only if the installation request is initiated within 2 minutes.
        
        @param request: DescribeAgentInstallStatusRequest
        @return: DescribeAgentInstallStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_agent_install_status_with_options_async(request, runtime)

    def describe_agentless_sensitive_file_by_key_with_options(
        self,
        tmp_req: sas_20181203_models.DescribeAgentlessSensitiveFileByKeyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAgentlessSensitiveFileByKeyResponse:
        """
        @summary Queries the list of assets on which a specific type of sensitive files are detected by using the agentless detection feature.
        
        @description You can call this operation only when the agentless detection feature is purchased by using the pay-as-you-go billing method within your Alibaba Cloud account.
        
        @param tmp_req: DescribeAgentlessSensitiveFileByKeyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAgentlessSensitiveFileByKeyResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.DescribeAgentlessSensitiveFileByKeyShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.scan_range):
            request.scan_range_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.scan_range, 'ScanRange', 'json')
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAgentlessSensitiveFileByKey',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAgentlessSensitiveFileByKeyResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_agentless_sensitive_file_by_key_with_options_async(
        self,
        tmp_req: sas_20181203_models.DescribeAgentlessSensitiveFileByKeyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAgentlessSensitiveFileByKeyResponse:
        """
        @summary Queries the list of assets on which a specific type of sensitive files are detected by using the agentless detection feature.
        
        @description You can call this operation only when the agentless detection feature is purchased by using the pay-as-you-go billing method within your Alibaba Cloud account.
        
        @param tmp_req: DescribeAgentlessSensitiveFileByKeyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAgentlessSensitiveFileByKeyResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.DescribeAgentlessSensitiveFileByKeyShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.scan_range):
            request.scan_range_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.scan_range, 'ScanRange', 'json')
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAgentlessSensitiveFileByKey',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAgentlessSensitiveFileByKeyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_agentless_sensitive_file_by_key(
        self,
        request: sas_20181203_models.DescribeAgentlessSensitiveFileByKeyRequest,
    ) -> sas_20181203_models.DescribeAgentlessSensitiveFileByKeyResponse:
        """
        @summary Queries the list of assets on which a specific type of sensitive files are detected by using the agentless detection feature.
        
        @description You can call this operation only when the agentless detection feature is purchased by using the pay-as-you-go billing method within your Alibaba Cloud account.
        
        @param request: DescribeAgentlessSensitiveFileByKeyRequest
        @return: DescribeAgentlessSensitiveFileByKeyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_agentless_sensitive_file_by_key_with_options(request, runtime)

    async def describe_agentless_sensitive_file_by_key_async(
        self,
        request: sas_20181203_models.DescribeAgentlessSensitiveFileByKeyRequest,
    ) -> sas_20181203_models.DescribeAgentlessSensitiveFileByKeyResponse:
        """
        @summary Queries the list of assets on which a specific type of sensitive files are detected by using the agentless detection feature.
        
        @description You can call this operation only when the agentless detection feature is purchased by using the pay-as-you-go billing method within your Alibaba Cloud account.
        
        @param request: DescribeAgentlessSensitiveFileByKeyRequest
        @return: DescribeAgentlessSensitiveFileByKeyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_agentless_sensitive_file_by_key_with_options_async(request, runtime)

    def describe_alarm_event_detail_with_options(
        self,
        request: sas_20181203_models.DescribeAlarmEventDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAlarmEventDetailResponse:
        """
        @summary Queries the details of an alert event. An alert event consists of alerts and exceptions. Each alert event is associated with multiple exceptions.
        
        @param request: DescribeAlarmEventDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAlarmEventDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.alarm_unique_info):
            query['AlarmUniqueInfo'] = request.alarm_unique_info
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAlarmEventDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAlarmEventDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_alarm_event_detail_with_options_async(
        self,
        request: sas_20181203_models.DescribeAlarmEventDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAlarmEventDetailResponse:
        """
        @summary Queries the details of an alert event. An alert event consists of alerts and exceptions. Each alert event is associated with multiple exceptions.
        
        @param request: DescribeAlarmEventDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAlarmEventDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.alarm_unique_info):
            query['AlarmUniqueInfo'] = request.alarm_unique_info
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAlarmEventDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAlarmEventDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_alarm_event_detail(
        self,
        request: sas_20181203_models.DescribeAlarmEventDetailRequest,
    ) -> sas_20181203_models.DescribeAlarmEventDetailResponse:
        """
        @summary Queries the details of an alert event. An alert event consists of alerts and exceptions. Each alert event is associated with multiple exceptions.
        
        @param request: DescribeAlarmEventDetailRequest
        @return: DescribeAlarmEventDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_alarm_event_detail_with_options(request, runtime)

    async def describe_alarm_event_detail_async(
        self,
        request: sas_20181203_models.DescribeAlarmEventDetailRequest,
    ) -> sas_20181203_models.DescribeAlarmEventDetailResponse:
        """
        @summary Queries the details of an alert event. An alert event consists of alerts and exceptions. Each alert event is associated with multiple exceptions.
        
        @param request: DescribeAlarmEventDetailRequest
        @return: DescribeAlarmEventDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_alarm_event_detail_with_options_async(request, runtime)

    def describe_alarm_event_stack_info_with_options(
        self,
        request: sas_20181203_models.DescribeAlarmEventStackInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAlarmEventStackInfoResponse:
        """
        @deprecated OpenAPI DescribeAlarmEventStackInfo is deprecated
        
        @summary Queries the stack information about an alert event.
        
        @param request: DescribeAlarmEventStackInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAlarmEventStackInfoResponse
        Deprecated
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.event_name):
            query['EventName'] = request.event_name
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.unique_info):
            query['UniqueInfo'] = request.unique_info
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAlarmEventStackInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAlarmEventStackInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_alarm_event_stack_info_with_options_async(
        self,
        request: sas_20181203_models.DescribeAlarmEventStackInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAlarmEventStackInfoResponse:
        """
        @deprecated OpenAPI DescribeAlarmEventStackInfo is deprecated
        
        @summary Queries the stack information about an alert event.
        
        @param request: DescribeAlarmEventStackInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAlarmEventStackInfoResponse
        Deprecated
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.event_name):
            query['EventName'] = request.event_name
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.unique_info):
            query['UniqueInfo'] = request.unique_info
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAlarmEventStackInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAlarmEventStackInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_alarm_event_stack_info(
        self,
        request: sas_20181203_models.DescribeAlarmEventStackInfoRequest,
    ) -> sas_20181203_models.DescribeAlarmEventStackInfoResponse:
        """
        @deprecated OpenAPI DescribeAlarmEventStackInfo is deprecated
        
        @summary Queries the stack information about an alert event.
        
        @param request: DescribeAlarmEventStackInfoRequest
        @return: DescribeAlarmEventStackInfoResponse
        Deprecated
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_alarm_event_stack_info_with_options(request, runtime)

    async def describe_alarm_event_stack_info_async(
        self,
        request: sas_20181203_models.DescribeAlarmEventStackInfoRequest,
    ) -> sas_20181203_models.DescribeAlarmEventStackInfoResponse:
        """
        @deprecated OpenAPI DescribeAlarmEventStackInfo is deprecated
        
        @summary Queries the stack information about an alert event.
        
        @param request: DescribeAlarmEventStackInfoRequest
        @return: DescribeAlarmEventStackInfoResponse
        Deprecated
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_alarm_event_stack_info_with_options_async(request, runtime)

    def describe_all_entity_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAllEntityResponse:
        """
        @summary Queries the information about all server assets, including the asset group IDs and asset names.
        
        @param request: DescribeAllEntityRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAllEntityResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeAllEntity',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAllEntityResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_all_entity_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAllEntityResponse:
        """
        @summary Queries the information about all server assets, including the asset group IDs and asset names.
        
        @param request: DescribeAllEntityRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAllEntityResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeAllEntity',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAllEntityResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_all_entity(self) -> sas_20181203_models.DescribeAllEntityResponse:
        """
        @summary Queries the information about all server assets, including the asset group IDs and asset names.
        
        @return: DescribeAllEntityResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_all_entity_with_options(runtime)

    async def describe_all_entity_async(self) -> sas_20181203_models.DescribeAllEntityResponse:
        """
        @summary Queries the information about all server assets, including the asset group IDs and asset names.
        
        @return: DescribeAllEntityResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_all_entity_with_options_async(runtime)

    def describe_all_groups_with_options(
        self,
        request: sas_20181203_models.DescribeAllGroupsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAllGroupsResponse:
        """
        @summary Queries the information about all server groups.
        
        @param request: DescribeAllGroupsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAllGroupsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAllGroups',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAllGroupsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_all_groups_with_options_async(
        self,
        request: sas_20181203_models.DescribeAllGroupsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAllGroupsResponse:
        """
        @summary Queries the information about all server groups.
        
        @param request: DescribeAllGroupsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAllGroupsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAllGroups',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAllGroupsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_all_groups(
        self,
        request: sas_20181203_models.DescribeAllGroupsRequest,
    ) -> sas_20181203_models.DescribeAllGroupsResponse:
        """
        @summary Queries the information about all server groups.
        
        @param request: DescribeAllGroupsRequest
        @return: DescribeAllGroupsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_all_groups_with_options(request, runtime)

    async def describe_all_groups_async(
        self,
        request: sas_20181203_models.DescribeAllGroupsRequest,
    ) -> sas_20181203_models.DescribeAllGroupsResponse:
        """
        @summary Queries the information about all server groups.
        
        @param request: DescribeAllGroupsRequest
        @return: DescribeAllGroupsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_all_groups_with_options_async(request, runtime)

    def describe_all_image_baseline_with_options(
        self,
        request: sas_20181203_models.DescribeAllImageBaselineRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAllImageBaselineResponse:
        """
        @summary Queries baselines that are used in image baseline checks.
        
        @param request: DescribeAllImageBaselineRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAllImageBaselineResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAllImageBaseline',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAllImageBaselineResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_all_image_baseline_with_options_async(
        self,
        request: sas_20181203_models.DescribeAllImageBaselineRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAllImageBaselineResponse:
        """
        @summary Queries baselines that are used in image baseline checks.
        
        @param request: DescribeAllImageBaselineRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAllImageBaselineResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAllImageBaseline',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAllImageBaselineResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_all_image_baseline(
        self,
        request: sas_20181203_models.DescribeAllImageBaselineRequest,
    ) -> sas_20181203_models.DescribeAllImageBaselineResponse:
        """
        @summary Queries baselines that are used in image baseline checks.
        
        @param request: DescribeAllImageBaselineRequest
        @return: DescribeAllImageBaselineResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_all_image_baseline_with_options(request, runtime)

    async def describe_all_image_baseline_async(
        self,
        request: sas_20181203_models.DescribeAllImageBaselineRequest,
    ) -> sas_20181203_models.DescribeAllImageBaselineResponse:
        """
        @summary Queries baselines that are used in image baseline checks.
        
        @param request: DescribeAllImageBaselineRequest
        @return: DescribeAllImageBaselineResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_all_image_baseline_with_options_async(request, runtime)

    def describe_all_regions_statistics_with_options(
        self,
        request: sas_20181203_models.DescribeAllRegionsStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAllRegionsStatisticsResponse:
        """
        @summary Queries the statistics on global security events, including the numbers of unfixed vulnerabilities, baseline risks, and alerts.
        
        @param request: DescribeAllRegionsStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAllRegionsStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAllRegionsStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAllRegionsStatisticsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_all_regions_statistics_with_options_async(
        self,
        request: sas_20181203_models.DescribeAllRegionsStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAllRegionsStatisticsResponse:
        """
        @summary Queries the statistics on global security events, including the numbers of unfixed vulnerabilities, baseline risks, and alerts.
        
        @param request: DescribeAllRegionsStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAllRegionsStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAllRegionsStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAllRegionsStatisticsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_all_regions_statistics(
        self,
        request: sas_20181203_models.DescribeAllRegionsStatisticsRequest,
    ) -> sas_20181203_models.DescribeAllRegionsStatisticsResponse:
        """
        @summary Queries the statistics on global security events, including the numbers of unfixed vulnerabilities, baseline risks, and alerts.
        
        @param request: DescribeAllRegionsStatisticsRequest
        @return: DescribeAllRegionsStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_all_regions_statistics_with_options(request, runtime)

    async def describe_all_regions_statistics_async(
        self,
        request: sas_20181203_models.DescribeAllRegionsStatisticsRequest,
    ) -> sas_20181203_models.DescribeAllRegionsStatisticsResponse:
        """
        @summary Queries the statistics on global security events, including the numbers of unfixed vulnerabilities, baseline risks, and alerts.
        
        @param request: DescribeAllRegionsStatisticsRequest
        @return: DescribeAllRegionsStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_all_regions_statistics_with_options_async(request, runtime)

    def describe_anti_brute_force_rules_with_options(
        self,
        request: sas_20181203_models.DescribeAntiBruteForceRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAntiBruteForceRulesResponse:
        """
        @summary Queries created defense rules against brute-force attacks.
        
        @param request: DescribeAntiBruteForceRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAntiBruteForceRulesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAntiBruteForceRules',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAntiBruteForceRulesResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_anti_brute_force_rules_with_options_async(
        self,
        request: sas_20181203_models.DescribeAntiBruteForceRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAntiBruteForceRulesResponse:
        """
        @summary Queries created defense rules against brute-force attacks.
        
        @param request: DescribeAntiBruteForceRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAntiBruteForceRulesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAntiBruteForceRules',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAntiBruteForceRulesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_anti_brute_force_rules(
        self,
        request: sas_20181203_models.DescribeAntiBruteForceRulesRequest,
    ) -> sas_20181203_models.DescribeAntiBruteForceRulesResponse:
        """
        @summary Queries created defense rules against brute-force attacks.
        
        @param request: DescribeAntiBruteForceRulesRequest
        @return: DescribeAntiBruteForceRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_anti_brute_force_rules_with_options(request, runtime)

    async def describe_anti_brute_force_rules_async(
        self,
        request: sas_20181203_models.DescribeAntiBruteForceRulesRequest,
    ) -> sas_20181203_models.DescribeAntiBruteForceRulesResponse:
        """
        @summary Queries created defense rules against brute-force attacks.
        
        @param request: DescribeAntiBruteForceRulesRequest
        @return: DescribeAntiBruteForceRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_anti_brute_force_rules_with_options_async(request, runtime)

    def describe_app_vul_scan_cycle_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAppVulScanCycleResponse:
        """
        @summary Queries the scan cycle for application vulnerabilities.
        
        @param request: DescribeAppVulScanCycleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAppVulScanCycleResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeAppVulScanCycle',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAppVulScanCycleResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_app_vul_scan_cycle_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAppVulScanCycleResponse:
        """
        @summary Queries the scan cycle for application vulnerabilities.
        
        @param request: DescribeAppVulScanCycleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAppVulScanCycleResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeAppVulScanCycle',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAppVulScanCycleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_app_vul_scan_cycle(self) -> sas_20181203_models.DescribeAppVulScanCycleResponse:
        """
        @summary Queries the scan cycle for application vulnerabilities.
        
        @return: DescribeAppVulScanCycleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_app_vul_scan_cycle_with_options(runtime)

    async def describe_app_vul_scan_cycle_async(self) -> sas_20181203_models.DescribeAppVulScanCycleResponse:
        """
        @summary Queries the scan cycle for application vulnerabilities.
        
        @return: DescribeAppVulScanCycleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_app_vul_scan_cycle_with_options_async(runtime)

    def describe_asset_detail_by_uuid_with_options(
        self,
        request: sas_20181203_models.DescribeAssetDetailByUuidRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAssetDetailByUuidResponse:
        """
        @deprecated OpenAPI DescribeAssetDetailByUuid is deprecated, please use Sas::2018-12-03::GetAssetDetailByUuid instead.
        
        @summary Queries the details of a server and the extended information about the server by using the UUID of the server.
        
        @description This operation will be discontinued soon. You must call the [GetAssetDetailByUuid](~~GetAssetDetailByUuid~~) operation to query the details of the server.
        
        @param request: DescribeAssetDetailByUuidRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAssetDetailByUuidResponse
        Deprecated
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAssetDetailByUuid',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAssetDetailByUuidResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_asset_detail_by_uuid_with_options_async(
        self,
        request: sas_20181203_models.DescribeAssetDetailByUuidRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAssetDetailByUuidResponse:
        """
        @deprecated OpenAPI DescribeAssetDetailByUuid is deprecated, please use Sas::2018-12-03::GetAssetDetailByUuid instead.
        
        @summary Queries the details of a server and the extended information about the server by using the UUID of the server.
        
        @description This operation will be discontinued soon. You must call the [GetAssetDetailByUuid](~~GetAssetDetailByUuid~~) operation to query the details of the server.
        
        @param request: DescribeAssetDetailByUuidRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAssetDetailByUuidResponse
        Deprecated
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAssetDetailByUuid',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAssetDetailByUuidResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_asset_detail_by_uuid(
        self,
        request: sas_20181203_models.DescribeAssetDetailByUuidRequest,
    ) -> sas_20181203_models.DescribeAssetDetailByUuidResponse:
        """
        @deprecated OpenAPI DescribeAssetDetailByUuid is deprecated, please use Sas::2018-12-03::GetAssetDetailByUuid instead.
        
        @summary Queries the details of a server and the extended information about the server by using the UUID of the server.
        
        @description This operation will be discontinued soon. You must call the [GetAssetDetailByUuid](~~GetAssetDetailByUuid~~) operation to query the details of the server.
        
        @param request: DescribeAssetDetailByUuidRequest
        @return: DescribeAssetDetailByUuidResponse
        Deprecated
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_asset_detail_by_uuid_with_options(request, runtime)

    async def describe_asset_detail_by_uuid_async(
        self,
        request: sas_20181203_models.DescribeAssetDetailByUuidRequest,
    ) -> sas_20181203_models.DescribeAssetDetailByUuidResponse:
        """
        @deprecated OpenAPI DescribeAssetDetailByUuid is deprecated, please use Sas::2018-12-03::GetAssetDetailByUuid instead.
        
        @summary Queries the details of a server and the extended information about the server by using the UUID of the server.
        
        @description This operation will be discontinued soon. You must call the [GetAssetDetailByUuid](~~GetAssetDetailByUuid~~) operation to query the details of the server.
        
        @param request: DescribeAssetDetailByUuidRequest
        @return: DescribeAssetDetailByUuidResponse
        Deprecated
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_asset_detail_by_uuid_with_options_async(request, runtime)

    def describe_asset_detail_by_uuids_with_options(
        self,
        request: sas_20181203_models.DescribeAssetDetailByUuidsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAssetDetailByUuidsResponse:
        """
        @summary Queries the details of Elastic Compute Service (ECS) instances.
        
        @param request: DescribeAssetDetailByUuidsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAssetDetailByUuidsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAssetDetailByUuids',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAssetDetailByUuidsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_asset_detail_by_uuids_with_options_async(
        self,
        request: sas_20181203_models.DescribeAssetDetailByUuidsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAssetDetailByUuidsResponse:
        """
        @summary Queries the details of Elastic Compute Service (ECS) instances.
        
        @param request: DescribeAssetDetailByUuidsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAssetDetailByUuidsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAssetDetailByUuids',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAssetDetailByUuidsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_asset_detail_by_uuids(
        self,
        request: sas_20181203_models.DescribeAssetDetailByUuidsRequest,
    ) -> sas_20181203_models.DescribeAssetDetailByUuidsResponse:
        """
        @summary Queries the details of Elastic Compute Service (ECS) instances.
        
        @param request: DescribeAssetDetailByUuidsRequest
        @return: DescribeAssetDetailByUuidsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_asset_detail_by_uuids_with_options(request, runtime)

    async def describe_asset_detail_by_uuids_async(
        self,
        request: sas_20181203_models.DescribeAssetDetailByUuidsRequest,
    ) -> sas_20181203_models.DescribeAssetDetailByUuidsResponse:
        """
        @summary Queries the details of Elastic Compute Service (ECS) instances.
        
        @param request: DescribeAssetDetailByUuidsRequest
        @return: DescribeAssetDetailByUuidsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_asset_detail_by_uuids_with_options_async(request, runtime)

    def describe_asset_summary_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAssetSummaryResponse:
        """
        @summary The ID of the request, which is used to locate and troubleshoot issues.
        
        @param request: DescribeAssetSummaryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAssetSummaryResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeAssetSummary',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAssetSummaryResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_asset_summary_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAssetSummaryResponse:
        """
        @summary The ID of the request, which is used to locate and troubleshoot issues.
        
        @param request: DescribeAssetSummaryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAssetSummaryResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeAssetSummary',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAssetSummaryResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_asset_summary(self) -> sas_20181203_models.DescribeAssetSummaryResponse:
        """
        @summary The ID of the request, which is used to locate and troubleshoot issues.
        
        @return: DescribeAssetSummaryResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_asset_summary_with_options(runtime)

    async def describe_asset_summary_async(self) -> sas_20181203_models.DescribeAssetSummaryResponse:
        """
        @summary The ID of the request, which is used to locate and troubleshoot issues.
        
        @return: DescribeAssetSummaryResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_asset_summary_with_options_async(runtime)

    def describe_assets_sca_process_num_with_options(
        self,
        request: sas_20181203_models.DescribeAssetsScaProcessNumRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAssetsScaProcessNumResponse:
        """
        @summary Queries the number of Java processes in an asset by using the asset fingerprints feature of Security Center.
        
        @param request: DescribeAssetsScaProcessNumRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAssetsScaProcessNumResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.biz_type):
            query['BizType'] = request.biz_type
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAssetsScaProcessNum',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAssetsScaProcessNumResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_assets_sca_process_num_with_options_async(
        self,
        request: sas_20181203_models.DescribeAssetsScaProcessNumRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAssetsScaProcessNumResponse:
        """
        @summary Queries the number of Java processes in an asset by using the asset fingerprints feature of Security Center.
        
        @param request: DescribeAssetsScaProcessNumRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAssetsScaProcessNumResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.biz_type):
            query['BizType'] = request.biz_type
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAssetsScaProcessNum',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAssetsScaProcessNumResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_assets_sca_process_num(
        self,
        request: sas_20181203_models.DescribeAssetsScaProcessNumRequest,
    ) -> sas_20181203_models.DescribeAssetsScaProcessNumResponse:
        """
        @summary Queries the number of Java processes in an asset by using the asset fingerprints feature of Security Center.
        
        @param request: DescribeAssetsScaProcessNumRequest
        @return: DescribeAssetsScaProcessNumResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_assets_sca_process_num_with_options(request, runtime)

    async def describe_assets_sca_process_num_async(
        self,
        request: sas_20181203_models.DescribeAssetsScaProcessNumRequest,
    ) -> sas_20181203_models.DescribeAssetsScaProcessNumResponse:
        """
        @summary Queries the number of Java processes in an asset by using the asset fingerprints feature of Security Center.
        
        @param request: DescribeAssetsScaProcessNumRequest
        @return: DescribeAssetsScaProcessNumResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_assets_sca_process_num_with_options_async(request, runtime)

    def describe_assets_security_event_summary_with_options(
        self,
        request: sas_20181203_models.DescribeAssetsSecurityEventSummaryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAssetsSecurityEventSummaryResponse:
        """
        @summary Queries the risk information about containers.
        
        @param request: DescribeAssetsSecurityEventSummaryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAssetsSecurityEventSummaryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.container_field_name):
            query['ContainerFieldName'] = request.container_field_name
        if not UtilClient.is_unset(request.container_field_value):
            query['ContainerFieldValue'] = request.container_field_value
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAssetsSecurityEventSummary',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAssetsSecurityEventSummaryResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_assets_security_event_summary_with_options_async(
        self,
        request: sas_20181203_models.DescribeAssetsSecurityEventSummaryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAssetsSecurityEventSummaryResponse:
        """
        @summary Queries the risk information about containers.
        
        @param request: DescribeAssetsSecurityEventSummaryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAssetsSecurityEventSummaryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.container_field_name):
            query['ContainerFieldName'] = request.container_field_name
        if not UtilClient.is_unset(request.container_field_value):
            query['ContainerFieldValue'] = request.container_field_value
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAssetsSecurityEventSummary',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAssetsSecurityEventSummaryResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_assets_security_event_summary(
        self,
        request: sas_20181203_models.DescribeAssetsSecurityEventSummaryRequest,
    ) -> sas_20181203_models.DescribeAssetsSecurityEventSummaryResponse:
        """
        @summary Queries the risk information about containers.
        
        @param request: DescribeAssetsSecurityEventSummaryRequest
        @return: DescribeAssetsSecurityEventSummaryResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_assets_security_event_summary_with_options(request, runtime)

    async def describe_assets_security_event_summary_async(
        self,
        request: sas_20181203_models.DescribeAssetsSecurityEventSummaryRequest,
    ) -> sas_20181203_models.DescribeAssetsSecurityEventSummaryResponse:
        """
        @summary Queries the risk information about containers.
        
        @param request: DescribeAssetsSecurityEventSummaryRequest
        @return: DescribeAssetsSecurityEventSummaryResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_assets_security_event_summary_with_options_async(request, runtime)

    def describe_attack_analysis_data_with_options(
        self,
        request: sas_20181203_models.DescribeAttackAnalysisDataRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAttackAnalysisDataResponse:
        """
        @summary Queries the statistics of attack analysis.
        
        @param request: DescribeAttackAnalysisDataRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAttackAnalysisDataResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.base_64):
            query['Base64'] = request.base_64
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.data):
            query['Data'] = request.data
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAttackAnalysisData',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAttackAnalysisDataResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_attack_analysis_data_with_options_async(
        self,
        request: sas_20181203_models.DescribeAttackAnalysisDataRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAttackAnalysisDataResponse:
        """
        @summary Queries the statistics of attack analysis.
        
        @param request: DescribeAttackAnalysisDataRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAttackAnalysisDataResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.base_64):
            query['Base64'] = request.base_64
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.data):
            query['Data'] = request.data
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAttackAnalysisData',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAttackAnalysisDataResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_attack_analysis_data(
        self,
        request: sas_20181203_models.DescribeAttackAnalysisDataRequest,
    ) -> sas_20181203_models.DescribeAttackAnalysisDataResponse:
        """
        @summary Queries the statistics of attack analysis.
        
        @param request: DescribeAttackAnalysisDataRequest
        @return: DescribeAttackAnalysisDataResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_attack_analysis_data_with_options(request, runtime)

    async def describe_attack_analysis_data_async(
        self,
        request: sas_20181203_models.DescribeAttackAnalysisDataRequest,
    ) -> sas_20181203_models.DescribeAttackAnalysisDataResponse:
        """
        @summary Queries the statistics of attack analysis.
        
        @param request: DescribeAttackAnalysisDataRequest
        @return: DescribeAttackAnalysisDataResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_attack_analysis_data_with_options_async(request, runtime)

    def describe_attestors_with_options(
        self,
        request: sas_20181203_models.DescribeAttestorsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAttestorsResponse:
        """
        @summary Queries a list of witnesses.
        
        @param request: DescribeAttestorsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAttestorsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAttestors',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAttestorsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_attestors_with_options_async(
        self,
        request: sas_20181203_models.DescribeAttestorsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAttestorsResponse:
        """
        @summary Queries a list of witnesses.
        
        @param request: DescribeAttestorsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAttestorsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeAttestors',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAttestorsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_attestors(
        self,
        request: sas_20181203_models.DescribeAttestorsRequest,
    ) -> sas_20181203_models.DescribeAttestorsResponse:
        """
        @summary Queries a list of witnesses.
        
        @param request: DescribeAttestorsRequest
        @return: DescribeAttestorsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_attestors_with_options(request, runtime)

    async def describe_attestors_async(
        self,
        request: sas_20181203_models.DescribeAttestorsRequest,
    ) -> sas_20181203_models.DescribeAttestorsResponse:
        """
        @summary Queries a list of witnesses.
        
        @param request: DescribeAttestorsRequest
        @return: DescribeAttestorsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_attestors_with_options_async(request, runtime)

    def describe_auto_del_config_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAutoDelConfigResponse:
        """
        @summary Queries the number of days during which a detected vulnerability is retained before the vulnerability is automatically deleted.
        
        @param request: DescribeAutoDelConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAutoDelConfigResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeAutoDelConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAutoDelConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_auto_del_config_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeAutoDelConfigResponse:
        """
        @summary Queries the number of days during which a detected vulnerability is retained before the vulnerability is automatically deleted.
        
        @param request: DescribeAutoDelConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeAutoDelConfigResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeAutoDelConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeAutoDelConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_auto_del_config(self) -> sas_20181203_models.DescribeAutoDelConfigResponse:
        """
        @summary Queries the number of days during which a detected vulnerability is retained before the vulnerability is automatically deleted.
        
        @return: DescribeAutoDelConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_auto_del_config_with_options(runtime)

    async def describe_auto_del_config_async(self) -> sas_20181203_models.DescribeAutoDelConfigResponse:
        """
        @summary Queries the number of days during which a detected vulnerability is retained before the vulnerability is automatically deleted.
        
        @return: DescribeAutoDelConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_auto_del_config_with_options_async(runtime)

    def describe_back_up_export_info_with_options(
        self,
        request: sas_20181203_models.DescribeBackUpExportInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeBackUpExportInfoResponse:
        """
        @summary Queries the information about a file to which archived alert events are exported.
        
        @param request: DescribeBackUpExportInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeBackUpExportInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.export_type):
            query['ExportType'] = request.export_type
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeBackUpExportInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeBackUpExportInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_back_up_export_info_with_options_async(
        self,
        request: sas_20181203_models.DescribeBackUpExportInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeBackUpExportInfoResponse:
        """
        @summary Queries the information about a file to which archived alert events are exported.
        
        @param request: DescribeBackUpExportInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeBackUpExportInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.export_type):
            query['ExportType'] = request.export_type
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeBackUpExportInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeBackUpExportInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_back_up_export_info(
        self,
        request: sas_20181203_models.DescribeBackUpExportInfoRequest,
    ) -> sas_20181203_models.DescribeBackUpExportInfoResponse:
        """
        @summary Queries the information about a file to which archived alert events are exported.
        
        @param request: DescribeBackUpExportInfoRequest
        @return: DescribeBackUpExportInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_back_up_export_info_with_options(request, runtime)

    async def describe_back_up_export_info_async(
        self,
        request: sas_20181203_models.DescribeBackUpExportInfoRequest,
    ) -> sas_20181203_models.DescribeBackUpExportInfoResponse:
        """
        @summary Queries the information about a file to which archived alert events are exported.
        
        @param request: DescribeBackUpExportInfoRequest
        @return: DescribeBackUpExportInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_back_up_export_info_with_options_async(request, runtime)

    def describe_backup_clients_with_options(
        self,
        request: sas_20181203_models.DescribeBackupClientsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeBackupClientsResponse:
        """
        @summary Queries the servers on which the anti-ransomware agent is installed in a specified region.
        
        @description You can call the DescribeBackupClients operation to query the servers on which the anti-ransomware agent is installed in a specified region.
        
        @param request: DescribeBackupClientsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeBackupClientsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.support_region_id):
            query['SupportRegionId'] = request.support_region_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeBackupClients',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeBackupClientsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_backup_clients_with_options_async(
        self,
        request: sas_20181203_models.DescribeBackupClientsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeBackupClientsResponse:
        """
        @summary Queries the servers on which the anti-ransomware agent is installed in a specified region.
        
        @description You can call the DescribeBackupClients operation to query the servers on which the anti-ransomware agent is installed in a specified region.
        
        @param request: DescribeBackupClientsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeBackupClientsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.support_region_id):
            query['SupportRegionId'] = request.support_region_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeBackupClients',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeBackupClientsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_backup_clients(
        self,
        request: sas_20181203_models.DescribeBackupClientsRequest,
    ) -> sas_20181203_models.DescribeBackupClientsResponse:
        """
        @summary Queries the servers on which the anti-ransomware agent is installed in a specified region.
        
        @description You can call the DescribeBackupClients operation to query the servers on which the anti-ransomware agent is installed in a specified region.
        
        @param request: DescribeBackupClientsRequest
        @return: DescribeBackupClientsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_backup_clients_with_options(request, runtime)

    async def describe_backup_clients_async(
        self,
        request: sas_20181203_models.DescribeBackupClientsRequest,
    ) -> sas_20181203_models.DescribeBackupClientsResponse:
        """
        @summary Queries the servers on which the anti-ransomware agent is installed in a specified region.
        
        @description You can call the DescribeBackupClients operation to query the servers on which the anti-ransomware agent is installed in a specified region.
        
        @param request: DescribeBackupClientsRequest
        @return: DescribeBackupClientsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_backup_clients_with_options_async(request, runtime)

    def describe_backup_files_with_options(
        self,
        request: sas_20181203_models.DescribeBackupFilesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeBackupFilesResponse:
        """
        @summary Queries backup files.
        
        @param request: DescribeBackupFilesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeBackupFilesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.path):
            query['Path'] = request.path
        if not UtilClient.is_unset(request.snapshot_hash):
            query['SnapshotHash'] = request.snapshot_hash
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeBackupFiles',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeBackupFilesResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_backup_files_with_options_async(
        self,
        request: sas_20181203_models.DescribeBackupFilesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeBackupFilesResponse:
        """
        @summary Queries backup files.
        
        @param request: DescribeBackupFilesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeBackupFilesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.path):
            query['Path'] = request.path
        if not UtilClient.is_unset(request.snapshot_hash):
            query['SnapshotHash'] = request.snapshot_hash
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeBackupFiles',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeBackupFilesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_backup_files(
        self,
        request: sas_20181203_models.DescribeBackupFilesRequest,
    ) -> sas_20181203_models.DescribeBackupFilesResponse:
        """
        @summary Queries backup files.
        
        @param request: DescribeBackupFilesRequest
        @return: DescribeBackupFilesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_backup_files_with_options(request, runtime)

    async def describe_backup_files_async(
        self,
        request: sas_20181203_models.DescribeBackupFilesRequest,
    ) -> sas_20181203_models.DescribeBackupFilesResponse:
        """
        @summary Queries backup files.
        
        @param request: DescribeBackupFilesRequest
        @return: DescribeBackupFilesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_backup_files_with_options_async(request, runtime)

    def describe_backup_machine_status_with_options(
        self,
        request: sas_20181203_models.DescribeBackupMachineStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeBackupMachineStatusResponse:
        """
        @summary Queries the backup status of a sever to which an anti-ransomware policy is applied.
        
        @param request: DescribeBackupMachineStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeBackupMachineStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.policy_id):
            query['PolicyId'] = request.policy_id
        if not UtilClient.is_unset(request.policy_version):
            query['PolicyVersion'] = request.policy_version
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeBackupMachineStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeBackupMachineStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_backup_machine_status_with_options_async(
        self,
        request: sas_20181203_models.DescribeBackupMachineStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeBackupMachineStatusResponse:
        """
        @summary Queries the backup status of a sever to which an anti-ransomware policy is applied.
        
        @param request: DescribeBackupMachineStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeBackupMachineStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.policy_id):
            query['PolicyId'] = request.policy_id
        if not UtilClient.is_unset(request.policy_version):
            query['PolicyVersion'] = request.policy_version
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeBackupMachineStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeBackupMachineStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_backup_machine_status(
        self,
        request: sas_20181203_models.DescribeBackupMachineStatusRequest,
    ) -> sas_20181203_models.DescribeBackupMachineStatusResponse:
        """
        @summary Queries the backup status of a sever to which an anti-ransomware policy is applied.
        
        @param request: DescribeBackupMachineStatusRequest
        @return: DescribeBackupMachineStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_backup_machine_status_with_options(request, runtime)

    async def describe_backup_machine_status_async(
        self,
        request: sas_20181203_models.DescribeBackupMachineStatusRequest,
    ) -> sas_20181203_models.DescribeBackupMachineStatusResponse:
        """
        @summary Queries the backup status of a sever to which an anti-ransomware policy is applied.
        
        @param request: DescribeBackupMachineStatusRequest
        @return: DescribeBackupMachineStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_backup_machine_status_with_options_async(request, runtime)

    def describe_backup_policies_with_options(
        self,
        request: sas_20181203_models.DescribeBackupPoliciesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeBackupPoliciesResponse:
        """
        @summary Queries anti-ransomware policies.
        
        @param request: DescribeBackupPoliciesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeBackupPoliciesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.machine_remark):
            query['MachineRemark'] = request.machine_remark
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeBackupPolicies',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeBackupPoliciesResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_backup_policies_with_options_async(
        self,
        request: sas_20181203_models.DescribeBackupPoliciesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeBackupPoliciesResponse:
        """
        @summary Queries anti-ransomware policies.
        
        @param request: DescribeBackupPoliciesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeBackupPoliciesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.machine_remark):
            query['MachineRemark'] = request.machine_remark
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeBackupPolicies',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeBackupPoliciesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_backup_policies(
        self,
        request: sas_20181203_models.DescribeBackupPoliciesRequest,
    ) -> sas_20181203_models.DescribeBackupPoliciesResponse:
        """
        @summary Queries anti-ransomware policies.
        
        @param request: DescribeBackupPoliciesRequest
        @return: DescribeBackupPoliciesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_backup_policies_with_options(request, runtime)

    async def describe_backup_policies_async(
        self,
        request: sas_20181203_models.DescribeBackupPoliciesRequest,
    ) -> sas_20181203_models.DescribeBackupPoliciesResponse:
        """
        @summary Queries anti-ransomware policies.
        
        @param request: DescribeBackupPoliciesRequest
        @return: DescribeBackupPoliciesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_backup_policies_with_options_async(request, runtime)

    def describe_backup_policy_with_options(
        self,
        request: sas_20181203_models.DescribeBackupPolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeBackupPolicyResponse:
        """
        @summary Queries the details of an anti-ransomware policy for servers.
        
        @param request: DescribeBackupPolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeBackupPolicyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeBackupPolicy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeBackupPolicyResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_backup_policy_with_options_async(
        self,
        request: sas_20181203_models.DescribeBackupPolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeBackupPolicyResponse:
        """
        @summary Queries the details of an anti-ransomware policy for servers.
        
        @param request: DescribeBackupPolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeBackupPolicyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeBackupPolicy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeBackupPolicyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_backup_policy(
        self,
        request: sas_20181203_models.DescribeBackupPolicyRequest,
    ) -> sas_20181203_models.DescribeBackupPolicyResponse:
        """
        @summary Queries the details of an anti-ransomware policy for servers.
        
        @param request: DescribeBackupPolicyRequest
        @return: DescribeBackupPolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_backup_policy_with_options(request, runtime)

    async def describe_backup_policy_async(
        self,
        request: sas_20181203_models.DescribeBackupPolicyRequest,
    ) -> sas_20181203_models.DescribeBackupPolicyResponse:
        """
        @summary Queries the details of an anti-ransomware policy for servers.
        
        @param request: DescribeBackupPolicyRequest
        @return: DescribeBackupPolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_backup_policy_with_options_async(request, runtime)

    def describe_backup_restore_count_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeBackupRestoreCountResponse:
        """
        @summary Queries the statistics of restoration tasks.
        
        @description If you have created restoration tasks, you can call this operation to query the number of restoration tasks that are in the *restored** or **being restored** state.
        
        @param request: DescribeBackupRestoreCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeBackupRestoreCountResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeBackupRestoreCount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeBackupRestoreCountResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_backup_restore_count_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeBackupRestoreCountResponse:
        """
        @summary Queries the statistics of restoration tasks.
        
        @description If you have created restoration tasks, you can call this operation to query the number of restoration tasks that are in the *restored** or **being restored** state.
        
        @param request: DescribeBackupRestoreCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeBackupRestoreCountResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeBackupRestoreCount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeBackupRestoreCountResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_backup_restore_count(self) -> sas_20181203_models.DescribeBackupRestoreCountResponse:
        """
        @summary Queries the statistics of restoration tasks.
        
        @description If you have created restoration tasks, you can call this operation to query the number of restoration tasks that are in the *restored** or **being restored** state.
        
        @return: DescribeBackupRestoreCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_backup_restore_count_with_options(runtime)

    async def describe_backup_restore_count_async(self) -> sas_20181203_models.DescribeBackupRestoreCountResponse:
        """
        @summary Queries the statistics of restoration tasks.
        
        @description If you have created restoration tasks, you can call this operation to query the number of restoration tasks that are in the *restored** or **being restored** state.
        
        @return: DescribeBackupRestoreCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_backup_restore_count_with_options_async(runtime)

    def describe_binary_security_policies_with_options(
        self,
        request: sas_20181203_models.DescribeBinarySecurityPoliciesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeBinarySecurityPoliciesResponse:
        """
        @summary Queries binary security policies.
        
        @param request: DescribeBinarySecurityPoliciesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeBinarySecurityPoliciesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeBinarySecurityPolicies',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeBinarySecurityPoliciesResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_binary_security_policies_with_options_async(
        self,
        request: sas_20181203_models.DescribeBinarySecurityPoliciesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeBinarySecurityPoliciesResponse:
        """
        @summary Queries binary security policies.
        
        @param request: DescribeBinarySecurityPoliciesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeBinarySecurityPoliciesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeBinarySecurityPolicies',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeBinarySecurityPoliciesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_binary_security_policies(
        self,
        request: sas_20181203_models.DescribeBinarySecurityPoliciesRequest,
    ) -> sas_20181203_models.DescribeBinarySecurityPoliciesResponse:
        """
        @summary Queries binary security policies.
        
        @param request: DescribeBinarySecurityPoliciesRequest
        @return: DescribeBinarySecurityPoliciesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_binary_security_policies_with_options(request, runtime)

    async def describe_binary_security_policies_async(
        self,
        request: sas_20181203_models.DescribeBinarySecurityPoliciesRequest,
    ) -> sas_20181203_models.DescribeBinarySecurityPoliciesResponse:
        """
        @summary Queries binary security policies.
        
        @param request: DescribeBinarySecurityPoliciesRequest
        @return: DescribeBinarySecurityPoliciesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_binary_security_policies_with_options_async(request, runtime)

    def describe_brute_force_records_with_options(
        self,
        request: sas_20181203_models.DescribeBruteForceRecordsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeBruteForceRecordsResponse:
        """
        @summary Queries the IP addresses that are blocked by a defense rule against brute-force attacks.
        
        @param request: DescribeBruteForceRecordsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeBruteForceRecordsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.block_ip):
            query['BlockIp'] = request.block_ip
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.instance_id):
            query['InstanceId'] = request.instance_id
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeBruteForceRecords',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeBruteForceRecordsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_brute_force_records_with_options_async(
        self,
        request: sas_20181203_models.DescribeBruteForceRecordsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeBruteForceRecordsResponse:
        """
        @summary Queries the IP addresses that are blocked by a defense rule against brute-force attacks.
        
        @param request: DescribeBruteForceRecordsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeBruteForceRecordsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.block_ip):
            query['BlockIp'] = request.block_ip
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.instance_id):
            query['InstanceId'] = request.instance_id
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeBruteForceRecords',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeBruteForceRecordsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_brute_force_records(
        self,
        request: sas_20181203_models.DescribeBruteForceRecordsRequest,
    ) -> sas_20181203_models.DescribeBruteForceRecordsResponse:
        """
        @summary Queries the IP addresses that are blocked by a defense rule against brute-force attacks.
        
        @param request: DescribeBruteForceRecordsRequest
        @return: DescribeBruteForceRecordsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_brute_force_records_with_options(request, runtime)

    async def describe_brute_force_records_async(
        self,
        request: sas_20181203_models.DescribeBruteForceRecordsRequest,
    ) -> sas_20181203_models.DescribeBruteForceRecordsResponse:
        """
        @summary Queries the IP addresses that are blocked by a defense rule against brute-force attacks.
        
        @param request: DescribeBruteForceRecordsRequest
        @return: DescribeBruteForceRecordsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_brute_force_records_with_options_async(request, runtime)

    def describe_brute_force_summary_with_options(
        self,
        request: sas_20181203_models.DescribeBruteForceSummaryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeBruteForceSummaryResponse:
        """
        @summary The source IP address of the request.
        
        @param request: DescribeBruteForceSummaryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeBruteForceSummaryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeBruteForceSummary',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeBruteForceSummaryResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_brute_force_summary_with_options_async(
        self,
        request: sas_20181203_models.DescribeBruteForceSummaryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeBruteForceSummaryResponse:
        """
        @summary The source IP address of the request.
        
        @param request: DescribeBruteForceSummaryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeBruteForceSummaryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeBruteForceSummary',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeBruteForceSummaryResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_brute_force_summary(
        self,
        request: sas_20181203_models.DescribeBruteForceSummaryRequest,
    ) -> sas_20181203_models.DescribeBruteForceSummaryResponse:
        """
        @summary The source IP address of the request.
        
        @param request: DescribeBruteForceSummaryRequest
        @return: DescribeBruteForceSummaryResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_brute_force_summary_with_options(request, runtime)

    async def describe_brute_force_summary_async(
        self,
        request: sas_20181203_models.DescribeBruteForceSummaryRequest,
    ) -> sas_20181203_models.DescribeBruteForceSummaryResponse:
        """
        @summary The source IP address of the request.
        
        @param request: DescribeBruteForceSummaryRequest
        @return: DescribeBruteForceSummaryResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_brute_force_summary_with_options_async(request, runtime)

    def describe_can_access_vpc_sale_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCanAccessVpcSaleResponse:
        """
        @summary Check if the asset can be sold by VPC
        
        @param request: DescribeCanAccessVpcSaleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCanAccessVpcSaleResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeCanAccessVpcSale',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCanAccessVpcSaleResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_can_access_vpc_sale_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCanAccessVpcSaleResponse:
        """
        @summary Check if the asset can be sold by VPC
        
        @param request: DescribeCanAccessVpcSaleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCanAccessVpcSaleResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeCanAccessVpcSale',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCanAccessVpcSaleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_can_access_vpc_sale(self) -> sas_20181203_models.DescribeCanAccessVpcSaleResponse:
        """
        @summary Check if the asset can be sold by VPC
        
        @return: DescribeCanAccessVpcSaleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_can_access_vpc_sale_with_options(runtime)

    async def describe_can_access_vpc_sale_async(self) -> sas_20181203_models.DescribeCanAccessVpcSaleResponse:
        """
        @summary Check if the asset can be sold by VPC
        
        @return: DescribeCanAccessVpcSaleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_can_access_vpc_sale_with_options_async(runtime)

    def describe_can_fix_vul_list_with_options(
        self,
        request: sas_20181203_models.DescribeCanFixVulListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCanFixVulListResponse:
        """
        @summary Queries the list of fixable vulnerabilities.
        
        @param request: DescribeCanFixVulListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCanFixVulListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.alias_name):
            query['AliasName'] = request.alias_name
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.container_id):
            query['ContainerId'] = request.container_id
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.dealed):
            query['Dealed'] = request.dealed
        if not UtilClient.is_unset(request.digest):
            query['Digest'] = request.digest
        if not UtilClient.is_unset(request.image):
            query['Image'] = request.image
        if not UtilClient.is_unset(request.instance_id):
            query['InstanceId'] = request.instance_id
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        if not UtilClient.is_unset(request.necessity):
            query['Necessity'] = request.necessity
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.pod):
            query['Pod'] = request.pod
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        if not UtilClient.is_unset(request.repo_id):
            query['RepoId'] = request.repo_id
        if not UtilClient.is_unset(request.repo_id):
            query['RepoId'] = request.repo_id
        if not UtilClient.is_unset(request.repo_instance_id):
            query['RepoInstanceId'] = request.repo_instance_id
        if not UtilClient.is_unset(request.repo_name):
            query['RepoName'] = request.repo_name
        if not UtilClient.is_unset(request.repo_name):
            query['RepoName'] = request.repo_name
        if not UtilClient.is_unset(request.repo_namespace):
            query['RepoNamespace'] = request.repo_namespace
        if not UtilClient.is_unset(request.repo_region_id):
            query['RepoRegionId'] = request.repo_region_id
        if not UtilClient.is_unset(request.scan_range):
            query['ScanRange'] = request.scan_range
        if not UtilClient.is_unset(request.status_list):
            query['StatusList'] = request.status_list
        if not UtilClient.is_unset(request.tag):
            query['Tag'] = request.tag
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCanFixVulList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCanFixVulListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_can_fix_vul_list_with_options_async(
        self,
        request: sas_20181203_models.DescribeCanFixVulListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCanFixVulListResponse:
        """
        @summary Queries the list of fixable vulnerabilities.
        
        @param request: DescribeCanFixVulListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCanFixVulListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.alias_name):
            query['AliasName'] = request.alias_name
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.container_id):
            query['ContainerId'] = request.container_id
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.dealed):
            query['Dealed'] = request.dealed
        if not UtilClient.is_unset(request.digest):
            query['Digest'] = request.digest
        if not UtilClient.is_unset(request.image):
            query['Image'] = request.image
        if not UtilClient.is_unset(request.instance_id):
            query['InstanceId'] = request.instance_id
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        if not UtilClient.is_unset(request.necessity):
            query['Necessity'] = request.necessity
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.pod):
            query['Pod'] = request.pod
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        if not UtilClient.is_unset(request.repo_id):
            query['RepoId'] = request.repo_id
        if not UtilClient.is_unset(request.repo_id):
            query['RepoId'] = request.repo_id
        if not UtilClient.is_unset(request.repo_instance_id):
            query['RepoInstanceId'] = request.repo_instance_id
        if not UtilClient.is_unset(request.repo_name):
            query['RepoName'] = request.repo_name
        if not UtilClient.is_unset(request.repo_name):
            query['RepoName'] = request.repo_name
        if not UtilClient.is_unset(request.repo_namespace):
            query['RepoNamespace'] = request.repo_namespace
        if not UtilClient.is_unset(request.repo_region_id):
            query['RepoRegionId'] = request.repo_region_id
        if not UtilClient.is_unset(request.scan_range):
            query['ScanRange'] = request.scan_range
        if not UtilClient.is_unset(request.status_list):
            query['StatusList'] = request.status_list
        if not UtilClient.is_unset(request.tag):
            query['Tag'] = request.tag
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCanFixVulList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCanFixVulListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_can_fix_vul_list(
        self,
        request: sas_20181203_models.DescribeCanFixVulListRequest,
    ) -> sas_20181203_models.DescribeCanFixVulListResponse:
        """
        @summary Queries the list of fixable vulnerabilities.
        
        @param request: DescribeCanFixVulListRequest
        @return: DescribeCanFixVulListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_can_fix_vul_list_with_options(request, runtime)

    async def describe_can_fix_vul_list_async(
        self,
        request: sas_20181203_models.DescribeCanFixVulListRequest,
    ) -> sas_20181203_models.DescribeCanFixVulListResponse:
        """
        @summary Queries the list of fixable vulnerabilities.
        
        @param request: DescribeCanFixVulListRequest
        @return: DescribeCanFixVulListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_can_fix_vul_list_with_options_async(request, runtime)

    def describe_can_try_sas_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCanTrySasResponse:
        """
        @summary Checks the permissions on the trial use of Security Center.
        
        @param request: DescribeCanTrySasRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCanTrySasResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeCanTrySas',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCanTrySasResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_can_try_sas_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCanTrySasResponse:
        """
        @summary Checks the permissions on the trial use of Security Center.
        
        @param request: DescribeCanTrySasRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCanTrySasResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeCanTrySas',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCanTrySasResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_can_try_sas(self) -> sas_20181203_models.DescribeCanTrySasResponse:
        """
        @summary Checks the permissions on the trial use of Security Center.
        
        @return: DescribeCanTrySasResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_can_try_sas_with_options(runtime)

    async def describe_can_try_sas_async(self) -> sas_20181203_models.DescribeCanTrySasResponse:
        """
        @summary Checks the permissions on the trial use of Security Center.
        
        @return: DescribeCanTrySasResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_can_try_sas_with_options_async(runtime)

    def describe_chart_data_with_options(
        self,
        request: sas_20181203_models.DescribeChartDataRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeChartDataResponse:
        """
        @summary Queries the chart data of a security report.
        
        @param request: DescribeChartDataRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeChartDataResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.char_id):
            query['CharId'] = request.char_id
        if not UtilClient.is_unset(request.chart_id):
            query['ChartId'] = request.chart_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.report_id):
            query['ReportId'] = request.report_id
        if not UtilClient.is_unset(request.time_end):
            query['TimeEnd'] = request.time_end
        if not UtilClient.is_unset(request.time_start):
            query['TimeStart'] = request.time_start
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeChartData',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeChartDataResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_chart_data_with_options_async(
        self,
        request: sas_20181203_models.DescribeChartDataRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeChartDataResponse:
        """
        @summary Queries the chart data of a security report.
        
        @param request: DescribeChartDataRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeChartDataResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.char_id):
            query['CharId'] = request.char_id
        if not UtilClient.is_unset(request.chart_id):
            query['ChartId'] = request.chart_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.report_id):
            query['ReportId'] = request.report_id
        if not UtilClient.is_unset(request.time_end):
            query['TimeEnd'] = request.time_end
        if not UtilClient.is_unset(request.time_start):
            query['TimeStart'] = request.time_start
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeChartData',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeChartDataResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_chart_data(
        self,
        request: sas_20181203_models.DescribeChartDataRequest,
    ) -> sas_20181203_models.DescribeChartDataResponse:
        """
        @summary Queries the chart data of a security report.
        
        @param request: DescribeChartDataRequest
        @return: DescribeChartDataResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_chart_data_with_options(request, runtime)

    async def describe_chart_data_async(
        self,
        request: sas_20181203_models.DescribeChartDataRequest,
    ) -> sas_20181203_models.DescribeChartDataResponse:
        """
        @summary Queries the chart data of a security report.
        
        @param request: DescribeChartDataRequest
        @return: DescribeChartDataResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_chart_data_with_options_async(request, runtime)

    def describe_chart_list_with_options(
        self,
        request: sas_20181203_models.DescribeChartListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeChartListResponse:
        """
        @summary Queries the charts that are supported by using the security report feature of Security Center.
        
        @param request: DescribeChartListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeChartListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.project_code):
            query['ProjectCode'] = request.project_code
        if not UtilClient.is_unset(request.report_id):
            query['ReportId'] = request.report_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeChartList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeChartListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_chart_list_with_options_async(
        self,
        request: sas_20181203_models.DescribeChartListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeChartListResponse:
        """
        @summary Queries the charts that are supported by using the security report feature of Security Center.
        
        @param request: DescribeChartListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeChartListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.project_code):
            query['ProjectCode'] = request.project_code
        if not UtilClient.is_unset(request.report_id):
            query['ReportId'] = request.report_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeChartList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeChartListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_chart_list(
        self,
        request: sas_20181203_models.DescribeChartListRequest,
    ) -> sas_20181203_models.DescribeChartListResponse:
        """
        @summary Queries the charts that are supported by using the security report feature of Security Center.
        
        @param request: DescribeChartListRequest
        @return: DescribeChartListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_chart_list_with_options(request, runtime)

    async def describe_chart_list_async(
        self,
        request: sas_20181203_models.DescribeChartListRequest,
    ) -> sas_20181203_models.DescribeChartListResponse:
        """
        @summary Queries the charts that are supported by using the security report feature of Security Center.
        
        @param request: DescribeChartListRequest
        @return: DescribeChartListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_chart_list_with_options_async(request, runtime)

    def describe_check_ecs_warnings_with_options(
        self,
        request: sas_20181203_models.DescribeCheckEcsWarningsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCheckEcsWarningsResponse:
        """
        @summary Queries the number of weak passwords that can cause high risks to your assets.
        
        @param request: DescribeCheckEcsWarningsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCheckEcsWarningsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCheckEcsWarnings',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCheckEcsWarningsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_check_ecs_warnings_with_options_async(
        self,
        request: sas_20181203_models.DescribeCheckEcsWarningsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCheckEcsWarningsResponse:
        """
        @summary Queries the number of weak passwords that can cause high risks to your assets.
        
        @param request: DescribeCheckEcsWarningsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCheckEcsWarningsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCheckEcsWarnings',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCheckEcsWarningsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_check_ecs_warnings(
        self,
        request: sas_20181203_models.DescribeCheckEcsWarningsRequest,
    ) -> sas_20181203_models.DescribeCheckEcsWarningsResponse:
        """
        @summary Queries the number of weak passwords that can cause high risks to your assets.
        
        @param request: DescribeCheckEcsWarningsRequest
        @return: DescribeCheckEcsWarningsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_check_ecs_warnings_with_options(request, runtime)

    async def describe_check_ecs_warnings_async(
        self,
        request: sas_20181203_models.DescribeCheckEcsWarningsRequest,
    ) -> sas_20181203_models.DescribeCheckEcsWarningsResponse:
        """
        @summary Queries the number of weak passwords that can cause high risks to your assets.
        
        @param request: DescribeCheckEcsWarningsRequest
        @return: DescribeCheckEcsWarningsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_check_ecs_warnings_with_options_async(request, runtime)

    def describe_check_fix_details_with_options(
        self,
        request: sas_20181203_models.DescribeCheckFixDetailsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCheckFixDetailsResponse:
        """
        @summary Queries the parameters that you can configure to fix specified risk items.
        
        @param request: DescribeCheckFixDetailsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCheckFixDetailsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_ids):
            query['CheckIds'] = request.check_ids
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.risk_id):
            query['RiskId'] = request.risk_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCheckFixDetails',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCheckFixDetailsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_check_fix_details_with_options_async(
        self,
        request: sas_20181203_models.DescribeCheckFixDetailsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCheckFixDetailsResponse:
        """
        @summary Queries the parameters that you can configure to fix specified risk items.
        
        @param request: DescribeCheckFixDetailsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCheckFixDetailsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_ids):
            query['CheckIds'] = request.check_ids
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.risk_id):
            query['RiskId'] = request.risk_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCheckFixDetails',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCheckFixDetailsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_check_fix_details(
        self,
        request: sas_20181203_models.DescribeCheckFixDetailsRequest,
    ) -> sas_20181203_models.DescribeCheckFixDetailsResponse:
        """
        @summary Queries the parameters that you can configure to fix specified risk items.
        
        @param request: DescribeCheckFixDetailsRequest
        @return: DescribeCheckFixDetailsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_check_fix_details_with_options(request, runtime)

    async def describe_check_fix_details_async(
        self,
        request: sas_20181203_models.DescribeCheckFixDetailsRequest,
    ) -> sas_20181203_models.DescribeCheckFixDetailsResponse:
        """
        @summary Queries the parameters that you can configure to fix specified risk items.
        
        @param request: DescribeCheckFixDetailsRequest
        @return: DescribeCheckFixDetailsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_check_fix_details_with_options_async(request, runtime)

    def describe_check_result_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCheckResultResponse:
        """
        @summary Queries the result of the ISO 27001 compliance check.
        
        @param request: DescribeCheckResultRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCheckResultResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeCheckResult',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCheckResultResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_check_result_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCheckResultResponse:
        """
        @summary Queries the result of the ISO 27001 compliance check.
        
        @param request: DescribeCheckResultRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCheckResultResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeCheckResult',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCheckResultResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_check_result(self) -> sas_20181203_models.DescribeCheckResultResponse:
        """
        @summary Queries the result of the ISO 27001 compliance check.
        
        @return: DescribeCheckResultResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_check_result_with_options(runtime)

    async def describe_check_result_async(self) -> sas_20181203_models.DescribeCheckResultResponse:
        """
        @summary Queries the result of the ISO 27001 compliance check.
        
        @return: DescribeCheckResultResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_check_result_with_options_async(runtime)

    def describe_check_warning_count_with_options(
        self,
        request: sas_20181203_models.DescribeCheckWarningCountRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCheckWarningCountResponse:
        """
        @summary Queries the number of alerts that are triggered by a check item.
        
        @param request: DescribeCheckWarningCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCheckWarningCountResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.ali_uid):
            query['AliUid'] = request.ali_uid
        if not UtilClient.is_unset(request.check_id):
            query['CheckId'] = request.check_id
        if not UtilClient.is_unset(request.risk_id):
            query['RiskId'] = request.risk_id
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCheckWarningCount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCheckWarningCountResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_check_warning_count_with_options_async(
        self,
        request: sas_20181203_models.DescribeCheckWarningCountRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCheckWarningCountResponse:
        """
        @summary Queries the number of alerts that are triggered by a check item.
        
        @param request: DescribeCheckWarningCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCheckWarningCountResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.ali_uid):
            query['AliUid'] = request.ali_uid
        if not UtilClient.is_unset(request.check_id):
            query['CheckId'] = request.check_id
        if not UtilClient.is_unset(request.risk_id):
            query['RiskId'] = request.risk_id
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCheckWarningCount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCheckWarningCountResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_check_warning_count(
        self,
        request: sas_20181203_models.DescribeCheckWarningCountRequest,
    ) -> sas_20181203_models.DescribeCheckWarningCountResponse:
        """
        @summary Queries the number of alerts that are triggered by a check item.
        
        @param request: DescribeCheckWarningCountRequest
        @return: DescribeCheckWarningCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_check_warning_count_with_options(request, runtime)

    async def describe_check_warning_count_async(
        self,
        request: sas_20181203_models.DescribeCheckWarningCountRequest,
    ) -> sas_20181203_models.DescribeCheckWarningCountResponse:
        """
        @summary Queries the number of alerts that are triggered by a check item.
        
        @param request: DescribeCheckWarningCountRequest
        @return: DescribeCheckWarningCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_check_warning_count_with_options_async(request, runtime)

    def describe_check_warning_detail_with_options(
        self,
        request: sas_20181203_models.DescribeCheckWarningDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCheckWarningDetailResponse:
        """
        @summary Queries the details about a specified check item.
        
        @param request: DescribeCheckWarningDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCheckWarningDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_id):
            query['CheckId'] = request.check_id
        if not UtilClient.is_unset(request.check_warning_id):
            query['CheckWarningId'] = request.check_warning_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCheckWarningDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCheckWarningDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_check_warning_detail_with_options_async(
        self,
        request: sas_20181203_models.DescribeCheckWarningDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCheckWarningDetailResponse:
        """
        @summary Queries the details about a specified check item.
        
        @param request: DescribeCheckWarningDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCheckWarningDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_id):
            query['CheckId'] = request.check_id
        if not UtilClient.is_unset(request.check_warning_id):
            query['CheckWarningId'] = request.check_warning_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCheckWarningDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCheckWarningDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_check_warning_detail(
        self,
        request: sas_20181203_models.DescribeCheckWarningDetailRequest,
    ) -> sas_20181203_models.DescribeCheckWarningDetailResponse:
        """
        @summary Queries the details about a specified check item.
        
        @param request: DescribeCheckWarningDetailRequest
        @return: DescribeCheckWarningDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_check_warning_detail_with_options(request, runtime)

    async def describe_check_warning_detail_async(
        self,
        request: sas_20181203_models.DescribeCheckWarningDetailRequest,
    ) -> sas_20181203_models.DescribeCheckWarningDetailResponse:
        """
        @summary Queries the details about a specified check item.
        
        @param request: DescribeCheckWarningDetailRequest
        @return: DescribeCheckWarningDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_check_warning_detail_with_options_async(request, runtime)

    def describe_check_warning_machines_with_options(
        self,
        request: sas_20181203_models.DescribeCheckWarningMachinesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCheckWarningMachinesResponse:
        """
        @summary Queries the servers on which the same risk item is detected by specifying a baseline and a check item.
        
        @param request: DescribeCheckWarningMachinesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCheckWarningMachinesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_id):
            query['CheckId'] = request.check_id
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.filter_uuid):
            query['FilterUuid'] = request.filter_uuid
        if not UtilClient.is_unset(request.instance_id):
            query['InstanceId'] = request.instance_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.risk_id):
            query['RiskId'] = request.risk_id
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCheckWarningMachines',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCheckWarningMachinesResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_check_warning_machines_with_options_async(
        self,
        request: sas_20181203_models.DescribeCheckWarningMachinesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCheckWarningMachinesResponse:
        """
        @summary Queries the servers on which the same risk item is detected by specifying a baseline and a check item.
        
        @param request: DescribeCheckWarningMachinesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCheckWarningMachinesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_id):
            query['CheckId'] = request.check_id
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.filter_uuid):
            query['FilterUuid'] = request.filter_uuid
        if not UtilClient.is_unset(request.instance_id):
            query['InstanceId'] = request.instance_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.risk_id):
            query['RiskId'] = request.risk_id
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCheckWarningMachines',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCheckWarningMachinesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_check_warning_machines(
        self,
        request: sas_20181203_models.DescribeCheckWarningMachinesRequest,
    ) -> sas_20181203_models.DescribeCheckWarningMachinesResponse:
        """
        @summary Queries the servers on which the same risk item is detected by specifying a baseline and a check item.
        
        @param request: DescribeCheckWarningMachinesRequest
        @return: DescribeCheckWarningMachinesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_check_warning_machines_with_options(request, runtime)

    async def describe_check_warning_machines_async(
        self,
        request: sas_20181203_models.DescribeCheckWarningMachinesRequest,
    ) -> sas_20181203_models.DescribeCheckWarningMachinesResponse:
        """
        @summary Queries the servers on which the same risk item is detected by specifying a baseline and a check item.
        
        @param request: DescribeCheckWarningMachinesRequest
        @return: DescribeCheckWarningMachinesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_check_warning_machines_with_options_async(request, runtime)

    def describe_check_warning_summary_with_options(
        self,
        request: sas_20181203_models.DescribeCheckWarningSummaryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCheckWarningSummaryResponse:
        """
        @summary Queries the statistical information about baseline check results. The information includes the number of servers on which a baseline check is performed, the number of baseline check items, and the pass rate of check items in the last baseline check.
        
        @param request: DescribeCheckWarningSummaryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCheckWarningSummaryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.container_field_name):
            query['ContainerFieldName'] = request.container_field_name
        if not UtilClient.is_unset(request.container_field_value):
            query['ContainerFieldValue'] = request.container_field_value
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.risk_name):
            query['RiskName'] = request.risk_name
        if not UtilClient.is_unset(request.risk_status):
            query['RiskStatus'] = request.risk_status
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        if not UtilClient.is_unset(request.type_name):
            query['TypeName'] = request.type_name
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCheckWarningSummary',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCheckWarningSummaryResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_check_warning_summary_with_options_async(
        self,
        request: sas_20181203_models.DescribeCheckWarningSummaryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCheckWarningSummaryResponse:
        """
        @summary Queries the statistical information about baseline check results. The information includes the number of servers on which a baseline check is performed, the number of baseline check items, and the pass rate of check items in the last baseline check.
        
        @param request: DescribeCheckWarningSummaryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCheckWarningSummaryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.container_field_name):
            query['ContainerFieldName'] = request.container_field_name
        if not UtilClient.is_unset(request.container_field_value):
            query['ContainerFieldValue'] = request.container_field_value
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.risk_name):
            query['RiskName'] = request.risk_name
        if not UtilClient.is_unset(request.risk_status):
            query['RiskStatus'] = request.risk_status
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        if not UtilClient.is_unset(request.type_name):
            query['TypeName'] = request.type_name
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCheckWarningSummary',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCheckWarningSummaryResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_check_warning_summary(
        self,
        request: sas_20181203_models.DescribeCheckWarningSummaryRequest,
    ) -> sas_20181203_models.DescribeCheckWarningSummaryResponse:
        """
        @summary Queries the statistical information about baseline check results. The information includes the number of servers on which a baseline check is performed, the number of baseline check items, and the pass rate of check items in the last baseline check.
        
        @param request: DescribeCheckWarningSummaryRequest
        @return: DescribeCheckWarningSummaryResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_check_warning_summary_with_options(request, runtime)

    async def describe_check_warning_summary_async(
        self,
        request: sas_20181203_models.DescribeCheckWarningSummaryRequest,
    ) -> sas_20181203_models.DescribeCheckWarningSummaryResponse:
        """
        @summary Queries the statistical information about baseline check results. The information includes the number of servers on which a baseline check is performed, the number of baseline check items, and the pass rate of check items in the last baseline check.
        
        @param request: DescribeCheckWarningSummaryRequest
        @return: DescribeCheckWarningSummaryResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_check_warning_summary_with_options_async(request, runtime)

    def describe_check_warnings_with_options(
        self,
        request: sas_20181203_models.DescribeCheckWarningsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCheckWarningsResponse:
        """
        @summary Queries information about specified risk items and the check items of a specified server.
        
        @param request: DescribeCheckWarningsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCheckWarningsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_id):
            query['CheckId'] = request.check_id
        if not UtilClient.is_unset(request.check_type):
            query['CheckType'] = request.check_type
        if not UtilClient.is_unset(request.container_name):
            query['ContainerName'] = request.container_name
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.risk_id):
            query['RiskId'] = request.risk_id
        if not UtilClient.is_unset(request.risk_status):
            query['RiskStatus'] = request.risk_status
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCheckWarnings',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCheckWarningsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_check_warnings_with_options_async(
        self,
        request: sas_20181203_models.DescribeCheckWarningsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCheckWarningsResponse:
        """
        @summary Queries information about specified risk items and the check items of a specified server.
        
        @param request: DescribeCheckWarningsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCheckWarningsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_id):
            query['CheckId'] = request.check_id
        if not UtilClient.is_unset(request.check_type):
            query['CheckType'] = request.check_type
        if not UtilClient.is_unset(request.container_name):
            query['ContainerName'] = request.container_name
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.risk_id):
            query['RiskId'] = request.risk_id
        if not UtilClient.is_unset(request.risk_status):
            query['RiskStatus'] = request.risk_status
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCheckWarnings',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCheckWarningsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_check_warnings(
        self,
        request: sas_20181203_models.DescribeCheckWarningsRequest,
    ) -> sas_20181203_models.DescribeCheckWarningsResponse:
        """
        @summary Queries information about specified risk items and the check items of a specified server.
        
        @param request: DescribeCheckWarningsRequest
        @return: DescribeCheckWarningsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_check_warnings_with_options(request, runtime)

    async def describe_check_warnings_async(
        self,
        request: sas_20181203_models.DescribeCheckWarningsRequest,
    ) -> sas_20181203_models.DescribeCheckWarningsResponse:
        """
        @summary Queries information about specified risk items and the check items of a specified server.
        
        @param request: DescribeCheckWarningsRequest
        @return: DescribeCheckWarningsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_check_warnings_with_options_async(request, runtime)

    def describe_client_conf_setup_with_options(
        self,
        request: sas_20181203_models.DescribeClientConfSetupRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeClientConfSetupResponse:
        """
        @summary Queries the configurations of the Security Center agent.
        
        @param request: DescribeClientConfSetupRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeClientConfSetupResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.strategy_tag):
            query['StrategyTag'] = request.strategy_tag
        if not UtilClient.is_unset(request.strategy_tag_value):
            query['StrategyTagValue'] = request.strategy_tag_value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeClientConfSetup',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeClientConfSetupResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_client_conf_setup_with_options_async(
        self,
        request: sas_20181203_models.DescribeClientConfSetupRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeClientConfSetupResponse:
        """
        @summary Queries the configurations of the Security Center agent.
        
        @param request: DescribeClientConfSetupRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeClientConfSetupResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.strategy_tag):
            query['StrategyTag'] = request.strategy_tag
        if not UtilClient.is_unset(request.strategy_tag_value):
            query['StrategyTagValue'] = request.strategy_tag_value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeClientConfSetup',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeClientConfSetupResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_client_conf_setup(
        self,
        request: sas_20181203_models.DescribeClientConfSetupRequest,
    ) -> sas_20181203_models.DescribeClientConfSetupResponse:
        """
        @summary Queries the configurations of the Security Center agent.
        
        @param request: DescribeClientConfSetupRequest
        @return: DescribeClientConfSetupResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_client_conf_setup_with_options(request, runtime)

    async def describe_client_conf_setup_async(
        self,
        request: sas_20181203_models.DescribeClientConfSetupRequest,
    ) -> sas_20181203_models.DescribeClientConfSetupResponse:
        """
        @summary Queries the configurations of the Security Center agent.
        
        @param request: DescribeClientConfSetupRequest
        @return: DescribeClientConfSetupResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_client_conf_setup_with_options_async(request, runtime)

    def describe_client_conf_strategy_with_options(
        self,
        request: sas_20181203_models.DescribeClientConfStrategyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeClientConfStrategyResponse:
        """
        @summary Queries the configurations of servers to which different tags are added.
        
        @param request: DescribeClientConfStrategyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeClientConfStrategyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.tag):
            query['Tag'] = request.tag
        if not UtilClient.is_unset(request.tag_value):
            query['TagValue'] = request.tag_value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeClientConfStrategy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeClientConfStrategyResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_client_conf_strategy_with_options_async(
        self,
        request: sas_20181203_models.DescribeClientConfStrategyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeClientConfStrategyResponse:
        """
        @summary Queries the configurations of servers to which different tags are added.
        
        @param request: DescribeClientConfStrategyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeClientConfStrategyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.tag):
            query['Tag'] = request.tag
        if not UtilClient.is_unset(request.tag_value):
            query['TagValue'] = request.tag_value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeClientConfStrategy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeClientConfStrategyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_client_conf_strategy(
        self,
        request: sas_20181203_models.DescribeClientConfStrategyRequest,
    ) -> sas_20181203_models.DescribeClientConfStrategyResponse:
        """
        @summary Queries the configurations of servers to which different tags are added.
        
        @param request: DescribeClientConfStrategyRequest
        @return: DescribeClientConfStrategyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_client_conf_strategy_with_options(request, runtime)

    async def describe_client_conf_strategy_async(
        self,
        request: sas_20181203_models.DescribeClientConfStrategyRequest,
    ) -> sas_20181203_models.DescribeClientConfStrategyResponse:
        """
        @summary Queries the configurations of servers to which different tags are added.
        
        @param request: DescribeClientConfStrategyRequest
        @return: DescribeClientConfStrategyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_client_conf_strategy_with_options_async(request, runtime)

    def describe_client_problem_type_with_options(
        self,
        request: sas_20181203_models.DescribeClientProblemTypeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeClientProblemTypeResponse:
        """
        @summary Queries a list of agent issue types.
        
        @param request: DescribeClientProblemTypeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeClientProblemTypeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeClientProblemType',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeClientProblemTypeResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_client_problem_type_with_options_async(
        self,
        request: sas_20181203_models.DescribeClientProblemTypeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeClientProblemTypeResponse:
        """
        @summary Queries a list of agent issue types.
        
        @param request: DescribeClientProblemTypeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeClientProblemTypeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeClientProblemType',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeClientProblemTypeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_client_problem_type(
        self,
        request: sas_20181203_models.DescribeClientProblemTypeRequest,
    ) -> sas_20181203_models.DescribeClientProblemTypeResponse:
        """
        @summary Queries a list of agent issue types.
        
        @param request: DescribeClientProblemTypeRequest
        @return: DescribeClientProblemTypeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_client_problem_type_with_options(request, runtime)

    async def describe_client_problem_type_async(
        self,
        request: sas_20181203_models.DescribeClientProblemTypeRequest,
    ) -> sas_20181203_models.DescribeClientProblemTypeResponse:
        """
        @summary Queries a list of agent issue types.
        
        @param request: DescribeClientProblemTypeRequest
        @return: DescribeClientProblemTypeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_client_problem_type_with_options_async(request, runtime)

    def describe_cloud_center_instances_with_options(
        self,
        request: sas_20181203_models.DescribeCloudCenterInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCloudCenterInstancesResponse:
        """
        @summary Queries the information about assets that meet specific search conditions. For example, you can search for assets by the instance name or region of the asset.
        
        @description You can search for an asset by using search conditions, such as the instance ID, instance name, virtual private cloud (VPC) ID, region, and public IP address. You can also configure a logical relationship between multiple search conditions to search for the assets that meet the search conditions.
        
        @param request: DescribeCloudCenterInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCloudCenterInstancesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.criteria):
            query['Criteria'] = request.criteria
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.flags):
            query['Flags'] = request.flags
        if not UtilClient.is_unset(request.importance):
            query['Importance'] = request.importance
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.logical_exp):
            query['LogicalExp'] = request.logical_exp
        if not UtilClient.is_unset(request.machine_types):
            query['MachineTypes'] = request.machine_types
        if not UtilClient.is_unset(request.next_token):
            query['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.no_group_trace):
            query['NoGroupTrace'] = request.no_group_trace
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.use_next_token):
            query['UseNextToken'] = request.use_next_token
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCloudCenterInstances',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCloudCenterInstancesResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_cloud_center_instances_with_options_async(
        self,
        request: sas_20181203_models.DescribeCloudCenterInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCloudCenterInstancesResponse:
        """
        @summary Queries the information about assets that meet specific search conditions. For example, you can search for assets by the instance name or region of the asset.
        
        @description You can search for an asset by using search conditions, such as the instance ID, instance name, virtual private cloud (VPC) ID, region, and public IP address. You can also configure a logical relationship between multiple search conditions to search for the assets that meet the search conditions.
        
        @param request: DescribeCloudCenterInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCloudCenterInstancesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.criteria):
            query['Criteria'] = request.criteria
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.flags):
            query['Flags'] = request.flags
        if not UtilClient.is_unset(request.importance):
            query['Importance'] = request.importance
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.logical_exp):
            query['LogicalExp'] = request.logical_exp
        if not UtilClient.is_unset(request.machine_types):
            query['MachineTypes'] = request.machine_types
        if not UtilClient.is_unset(request.next_token):
            query['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.no_group_trace):
            query['NoGroupTrace'] = request.no_group_trace
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.use_next_token):
            query['UseNextToken'] = request.use_next_token
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCloudCenterInstances',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCloudCenterInstancesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_cloud_center_instances(
        self,
        request: sas_20181203_models.DescribeCloudCenterInstancesRequest,
    ) -> sas_20181203_models.DescribeCloudCenterInstancesResponse:
        """
        @summary Queries the information about assets that meet specific search conditions. For example, you can search for assets by the instance name or region of the asset.
        
        @description You can search for an asset by using search conditions, such as the instance ID, instance name, virtual private cloud (VPC) ID, region, and public IP address. You can also configure a logical relationship between multiple search conditions to search for the assets that meet the search conditions.
        
        @param request: DescribeCloudCenterInstancesRequest
        @return: DescribeCloudCenterInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_cloud_center_instances_with_options(request, runtime)

    async def describe_cloud_center_instances_async(
        self,
        request: sas_20181203_models.DescribeCloudCenterInstancesRequest,
    ) -> sas_20181203_models.DescribeCloudCenterInstancesResponse:
        """
        @summary Queries the information about assets that meet specific search conditions. For example, you can search for assets by the instance name or region of the asset.
        
        @description You can search for an asset by using search conditions, such as the instance ID, instance name, virtual private cloud (VPC) ID, region, and public IP address. You can also configure a logical relationship between multiple search conditions to search for the assets that meet the search conditions.
        
        @param request: DescribeCloudCenterInstancesRequest
        @return: DescribeCloudCenterInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_cloud_center_instances_with_options_async(request, runtime)

    def describe_cloud_product_field_statistics_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCloudProductFieldStatisticsResponse:
        """
        @deprecated OpenAPI DescribeCloudProductFieldStatistics is deprecated, please use Sas::2018-12-03::GetCloudAssetSummary instead.
        
        @summary Queries the statistics of cloud services.
        
        @param request: DescribeCloudProductFieldStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCloudProductFieldStatisticsResponse
        Deprecated
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeCloudProductFieldStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCloudProductFieldStatisticsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_cloud_product_field_statistics_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCloudProductFieldStatisticsResponse:
        """
        @deprecated OpenAPI DescribeCloudProductFieldStatistics is deprecated, please use Sas::2018-12-03::GetCloudAssetSummary instead.
        
        @summary Queries the statistics of cloud services.
        
        @param request: DescribeCloudProductFieldStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCloudProductFieldStatisticsResponse
        Deprecated
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeCloudProductFieldStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCloudProductFieldStatisticsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_cloud_product_field_statistics(self) -> sas_20181203_models.DescribeCloudProductFieldStatisticsResponse:
        """
        @deprecated OpenAPI DescribeCloudProductFieldStatistics is deprecated, please use Sas::2018-12-03::GetCloudAssetSummary instead.
        
        @summary Queries the statistics of cloud services.
        
        @return: DescribeCloudProductFieldStatisticsResponse
        Deprecated
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_cloud_product_field_statistics_with_options(runtime)

    async def describe_cloud_product_field_statistics_async(self) -> sas_20181203_models.DescribeCloudProductFieldStatisticsResponse:
        """
        @deprecated OpenAPI DescribeCloudProductFieldStatistics is deprecated, please use Sas::2018-12-03::GetCloudAssetSummary instead.
        
        @summary Queries the statistics of cloud services.
        
        @return: DescribeCloudProductFieldStatisticsResponse
        Deprecated
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_cloud_product_field_statistics_with_options_async(runtime)

    def describe_cloud_vendor_account_aklist_with_options(
        self,
        request: sas_20181203_models.DescribeCloudVendorAccountAKListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCloudVendorAccountAKListResponse:
        """
        @summary Queries the multi-cloud assets added to Security Center.
        
        @param request: DescribeCloudVendorAccountAKListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCloudVendorAccountAKListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.auth_ids):
            query['AuthIds'] = request.auth_ids
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        if not UtilClient.is_unset(request.sub_account_name):
            query['SubAccountName'] = request.sub_account_name
        if not UtilClient.is_unset(request.vendor_auth_alias):
            query['VendorAuthAlias'] = request.vendor_auth_alias
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCloudVendorAccountAKList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCloudVendorAccountAKListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_cloud_vendor_account_aklist_with_options_async(
        self,
        request: sas_20181203_models.DescribeCloudVendorAccountAKListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCloudVendorAccountAKListResponse:
        """
        @summary Queries the multi-cloud assets added to Security Center.
        
        @param request: DescribeCloudVendorAccountAKListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCloudVendorAccountAKListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.auth_ids):
            query['AuthIds'] = request.auth_ids
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        if not UtilClient.is_unset(request.sub_account_name):
            query['SubAccountName'] = request.sub_account_name
        if not UtilClient.is_unset(request.vendor_auth_alias):
            query['VendorAuthAlias'] = request.vendor_auth_alias
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCloudVendorAccountAKList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCloudVendorAccountAKListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_cloud_vendor_account_aklist(
        self,
        request: sas_20181203_models.DescribeCloudVendorAccountAKListRequest,
    ) -> sas_20181203_models.DescribeCloudVendorAccountAKListResponse:
        """
        @summary Queries the multi-cloud assets added to Security Center.
        
        @param request: DescribeCloudVendorAccountAKListRequest
        @return: DescribeCloudVendorAccountAKListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_cloud_vendor_account_aklist_with_options(request, runtime)

    async def describe_cloud_vendor_account_aklist_async(
        self,
        request: sas_20181203_models.DescribeCloudVendorAccountAKListRequest,
    ) -> sas_20181203_models.DescribeCloudVendorAccountAKListResponse:
        """
        @summary Queries the multi-cloud assets added to Security Center.
        
        @param request: DescribeCloudVendorAccountAKListRequest
        @return: DescribeCloudVendorAccountAKListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_cloud_vendor_account_aklist_with_options_async(request, runtime)

    def describe_cloud_vendor_trial_config_with_options(
        self,
        request: sas_20181203_models.DescribeCloudVendorTrialConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCloudVendorTrialConfigResponse:
        """
        @summary Query the trail configuration attributes of the corresponding AK configuration
        
        @param request: DescribeCloudVendorTrialConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCloudVendorTrialConfigResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCloudVendorTrialConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCloudVendorTrialConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_cloud_vendor_trial_config_with_options_async(
        self,
        request: sas_20181203_models.DescribeCloudVendorTrialConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCloudVendorTrialConfigResponse:
        """
        @summary Query the trail configuration attributes of the corresponding AK configuration
        
        @param request: DescribeCloudVendorTrialConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCloudVendorTrialConfigResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCloudVendorTrialConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCloudVendorTrialConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_cloud_vendor_trial_config(
        self,
        request: sas_20181203_models.DescribeCloudVendorTrialConfigRequest,
    ) -> sas_20181203_models.DescribeCloudVendorTrialConfigResponse:
        """
        @summary Query the trail configuration attributes of the corresponding AK configuration
        
        @param request: DescribeCloudVendorTrialConfigRequest
        @return: DescribeCloudVendorTrialConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_cloud_vendor_trial_config_with_options(request, runtime)

    async def describe_cloud_vendor_trial_config_async(
        self,
        request: sas_20181203_models.DescribeCloudVendorTrialConfigRequest,
    ) -> sas_20181203_models.DescribeCloudVendorTrialConfigResponse:
        """
        @summary Query the trail configuration attributes of the corresponding AK configuration
        
        @param request: DescribeCloudVendorTrialConfigRequest
        @return: DescribeCloudVendorTrialConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_cloud_vendor_trial_config_with_options_async(request, runtime)

    def describe_cluster_basic_info_with_options(
        self,
        request: sas_20181203_models.DescribeClusterBasicInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeClusterBasicInfoResponse:
        """
        @summary Queries the information about an cluster based on the cluster ID.
        
        @param request: DescribeClusterBasicInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeClusterBasicInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeClusterBasicInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeClusterBasicInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_cluster_basic_info_with_options_async(
        self,
        request: sas_20181203_models.DescribeClusterBasicInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeClusterBasicInfoResponse:
        """
        @summary Queries the information about an cluster based on the cluster ID.
        
        @param request: DescribeClusterBasicInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeClusterBasicInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeClusterBasicInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeClusterBasicInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_cluster_basic_info(
        self,
        request: sas_20181203_models.DescribeClusterBasicInfoRequest,
    ) -> sas_20181203_models.DescribeClusterBasicInfoResponse:
        """
        @summary Queries the information about an cluster based on the cluster ID.
        
        @param request: DescribeClusterBasicInfoRequest
        @return: DescribeClusterBasicInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_cluster_basic_info_with_options(request, runtime)

    async def describe_cluster_basic_info_async(
        self,
        request: sas_20181203_models.DescribeClusterBasicInfoRequest,
    ) -> sas_20181203_models.DescribeClusterBasicInfoResponse:
        """
        @summary Queries the information about an cluster based on the cluster ID.
        
        @param request: DescribeClusterBasicInfoRequest
        @return: DescribeClusterBasicInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_cluster_basic_info_with_options_async(request, runtime)

    def describe_cluster_host_security_summary_with_options(
        self,
        request: sas_20181203_models.DescribeClusterHostSecuritySummaryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeClusterHostSecuritySummaryResponse:
        """
        @summary Queries the statistical information about host security.
        
        @param request: DescribeClusterHostSecuritySummaryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeClusterHostSecuritySummaryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.container_field_name):
            query['ContainerFieldName'] = request.container_field_name
        if not UtilClient.is_unset(request.container_field_value):
            query['ContainerFieldValue'] = request.container_field_value
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeClusterHostSecuritySummary',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeClusterHostSecuritySummaryResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_cluster_host_security_summary_with_options_async(
        self,
        request: sas_20181203_models.DescribeClusterHostSecuritySummaryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeClusterHostSecuritySummaryResponse:
        """
        @summary Queries the statistical information about host security.
        
        @param request: DescribeClusterHostSecuritySummaryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeClusterHostSecuritySummaryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.container_field_name):
            query['ContainerFieldName'] = request.container_field_name
        if not UtilClient.is_unset(request.container_field_value):
            query['ContainerFieldValue'] = request.container_field_value
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeClusterHostSecuritySummary',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeClusterHostSecuritySummaryResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_cluster_host_security_summary(
        self,
        request: sas_20181203_models.DescribeClusterHostSecuritySummaryRequest,
    ) -> sas_20181203_models.DescribeClusterHostSecuritySummaryResponse:
        """
        @summary Queries the statistical information about host security.
        
        @param request: DescribeClusterHostSecuritySummaryRequest
        @return: DescribeClusterHostSecuritySummaryResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_cluster_host_security_summary_with_options(request, runtime)

    async def describe_cluster_host_security_summary_async(
        self,
        request: sas_20181203_models.DescribeClusterHostSecuritySummaryRequest,
    ) -> sas_20181203_models.DescribeClusterHostSecuritySummaryResponse:
        """
        @summary Queries the statistical information about host security.
        
        @param request: DescribeClusterHostSecuritySummaryRequest
        @return: DescribeClusterHostSecuritySummaryResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_cluster_host_security_summary_with_options_async(request, runtime)

    def describe_cluster_image_security_summary_with_options(
        self,
        request: sas_20181203_models.DescribeClusterImageSecuritySummaryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeClusterImageSecuritySummaryResponse:
        """
        @summary Queries the statistical information about image security.
        
        @param request: DescribeClusterImageSecuritySummaryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeClusterImageSecuritySummaryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.container_field_name):
            query['ContainerFieldName'] = request.container_field_name
        if not UtilClient.is_unset(request.container_field_value):
            query['ContainerFieldValue'] = request.container_field_value
        if not UtilClient.is_unset(request.image_digest):
            query['ImageDigest'] = request.image_digest
        if not UtilClient.is_unset(request.image_repo_name):
            query['ImageRepoName'] = request.image_repo_name
        if not UtilClient.is_unset(request.image_repo_namespace):
            query['ImageRepoNamespace'] = request.image_repo_namespace
        if not UtilClient.is_unset(request.image_tag):
            query['ImageTag'] = request.image_tag
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeClusterImageSecuritySummary',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeClusterImageSecuritySummaryResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_cluster_image_security_summary_with_options_async(
        self,
        request: sas_20181203_models.DescribeClusterImageSecuritySummaryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeClusterImageSecuritySummaryResponse:
        """
        @summary Queries the statistical information about image security.
        
        @param request: DescribeClusterImageSecuritySummaryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeClusterImageSecuritySummaryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.container_field_name):
            query['ContainerFieldName'] = request.container_field_name
        if not UtilClient.is_unset(request.container_field_value):
            query['ContainerFieldValue'] = request.container_field_value
        if not UtilClient.is_unset(request.image_digest):
            query['ImageDigest'] = request.image_digest
        if not UtilClient.is_unset(request.image_repo_name):
            query['ImageRepoName'] = request.image_repo_name
        if not UtilClient.is_unset(request.image_repo_namespace):
            query['ImageRepoNamespace'] = request.image_repo_namespace
        if not UtilClient.is_unset(request.image_tag):
            query['ImageTag'] = request.image_tag
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeClusterImageSecuritySummary',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeClusterImageSecuritySummaryResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_cluster_image_security_summary(
        self,
        request: sas_20181203_models.DescribeClusterImageSecuritySummaryRequest,
    ) -> sas_20181203_models.DescribeClusterImageSecuritySummaryResponse:
        """
        @summary Queries the statistical information about image security.
        
        @param request: DescribeClusterImageSecuritySummaryRequest
        @return: DescribeClusterImageSecuritySummaryResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_cluster_image_security_summary_with_options(request, runtime)

    async def describe_cluster_image_security_summary_async(
        self,
        request: sas_20181203_models.DescribeClusterImageSecuritySummaryRequest,
    ) -> sas_20181203_models.DescribeClusterImageSecuritySummaryResponse:
        """
        @summary Queries the statistical information about image security.
        
        @param request: DescribeClusterImageSecuritySummaryRequest
        @return: DescribeClusterImageSecuritySummaryResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_cluster_image_security_summary_with_options_async(request, runtime)

    def describe_cluster_info_list_with_options(
        self,
        request: sas_20181203_models.DescribeClusterInfoListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeClusterInfoListResponse:
        """
        @summary Queries the information about a cluster.
        
        @param request: DescribeClusterInfoListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeClusterInfoListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.target):
            query['Target'] = request.target
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeClusterInfoList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeClusterInfoListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_cluster_info_list_with_options_async(
        self,
        request: sas_20181203_models.DescribeClusterInfoListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeClusterInfoListResponse:
        """
        @summary Queries the information about a cluster.
        
        @param request: DescribeClusterInfoListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeClusterInfoListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.target):
            query['Target'] = request.target
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeClusterInfoList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeClusterInfoListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_cluster_info_list(
        self,
        request: sas_20181203_models.DescribeClusterInfoListRequest,
    ) -> sas_20181203_models.DescribeClusterInfoListResponse:
        """
        @summary Queries the information about a cluster.
        
        @param request: DescribeClusterInfoListRequest
        @return: DescribeClusterInfoListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_cluster_info_list_with_options(request, runtime)

    async def describe_cluster_info_list_async(
        self,
        request: sas_20181203_models.DescribeClusterInfoListRequest,
    ) -> sas_20181203_models.DescribeClusterInfoListResponse:
        """
        @summary Queries the information about a cluster.
        
        @param request: DescribeClusterInfoListRequest
        @return: DescribeClusterInfoListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_cluster_info_list_with_options_async(request, runtime)

    def describe_cluster_network_with_options(
        self,
        request: sas_20181203_models.DescribeClusterNetworkRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeClusterNetworkResponse:
        """
        @summary Queries information about the network topology edge by cluster.
        
        @param request: DescribeClusterNetworkRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeClusterNetworkResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeClusterNetwork',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeClusterNetworkResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_cluster_network_with_options_async(
        self,
        request: sas_20181203_models.DescribeClusterNetworkRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeClusterNetworkResponse:
        """
        @summary Queries information about the network topology edge by cluster.
        
        @param request: DescribeClusterNetworkRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeClusterNetworkResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeClusterNetwork',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeClusterNetworkResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_cluster_network(
        self,
        request: sas_20181203_models.DescribeClusterNetworkRequest,
    ) -> sas_20181203_models.DescribeClusterNetworkResponse:
        """
        @summary Queries information about the network topology edge by cluster.
        
        @param request: DescribeClusterNetworkRequest
        @return: DescribeClusterNetworkResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_cluster_network_with_options(request, runtime)

    async def describe_cluster_network_async(
        self,
        request: sas_20181203_models.DescribeClusterNetworkRequest,
    ) -> sas_20181203_models.DescribeClusterNetworkResponse:
        """
        @summary Queries information about the network topology edge by cluster.
        
        @param request: DescribeClusterNetworkRequest
        @return: DescribeClusterNetworkResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_cluster_network_with_options_async(request, runtime)

    def describe_cluster_vul_statistics_with_options(
        self,
        request: sas_20181203_models.DescribeClusterVulStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeClusterVulStatisticsResponse:
        """
        @summary Queries the statistics of vulnerabilities that are detected on a cluster.
        
        @param request: DescribeClusterVulStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeClusterVulStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.types):
            query['Types'] = request.types
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeClusterVulStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeClusterVulStatisticsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_cluster_vul_statistics_with_options_async(
        self,
        request: sas_20181203_models.DescribeClusterVulStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeClusterVulStatisticsResponse:
        """
        @summary Queries the statistics of vulnerabilities that are detected on a cluster.
        
        @param request: DescribeClusterVulStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeClusterVulStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.types):
            query['Types'] = request.types
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeClusterVulStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeClusterVulStatisticsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_cluster_vul_statistics(
        self,
        request: sas_20181203_models.DescribeClusterVulStatisticsRequest,
    ) -> sas_20181203_models.DescribeClusterVulStatisticsResponse:
        """
        @summary Queries the statistics of vulnerabilities that are detected on a cluster.
        
        @param request: DescribeClusterVulStatisticsRequest
        @return: DescribeClusterVulStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_cluster_vul_statistics_with_options(request, runtime)

    async def describe_cluster_vul_statistics_async(
        self,
        request: sas_20181203_models.DescribeClusterVulStatisticsRequest,
    ) -> sas_20181203_models.DescribeClusterVulStatisticsResponse:
        """
        @summary Queries the statistics of vulnerabilities that are detected on a cluster.
        
        @param request: DescribeClusterVulStatisticsRequest
        @return: DescribeClusterVulStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_cluster_vul_statistics_with_options_async(request, runtime)

    def describe_common_overall_config_with_options(
        self,
        request: sas_20181203_models.DescribeCommonOverallConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCommonOverallConfigResponse:
        """
        @summary Queries the information about a specified feature.
        
        @param request: DescribeCommonOverallConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCommonOverallConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCommonOverallConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCommonOverallConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_common_overall_config_with_options_async(
        self,
        request: sas_20181203_models.DescribeCommonOverallConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCommonOverallConfigResponse:
        """
        @summary Queries the information about a specified feature.
        
        @param request: DescribeCommonOverallConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCommonOverallConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCommonOverallConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCommonOverallConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_common_overall_config(
        self,
        request: sas_20181203_models.DescribeCommonOverallConfigRequest,
    ) -> sas_20181203_models.DescribeCommonOverallConfigResponse:
        """
        @summary Queries the information about a specified feature.
        
        @param request: DescribeCommonOverallConfigRequest
        @return: DescribeCommonOverallConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_common_overall_config_with_options(request, runtime)

    async def describe_common_overall_config_async(
        self,
        request: sas_20181203_models.DescribeCommonOverallConfigRequest,
    ) -> sas_20181203_models.DescribeCommonOverallConfigResponse:
        """
        @summary Queries the information about a specified feature.
        
        @param request: DescribeCommonOverallConfigRequest
        @return: DescribeCommonOverallConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_common_overall_config_with_options_async(request, runtime)

    def describe_common_overall_config_list_with_options(
        self,
        request: sas_20181203_models.DescribeCommonOverallConfigListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCommonOverallConfigListResponse:
        """
        @summary Queries the configurations of features in proactive defense.
        
        @param request: DescribeCommonOverallConfigListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCommonOverallConfigListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type_list):
            query['TypeList'] = request.type_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCommonOverallConfigList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCommonOverallConfigListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_common_overall_config_list_with_options_async(
        self,
        request: sas_20181203_models.DescribeCommonOverallConfigListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCommonOverallConfigListResponse:
        """
        @summary Queries the configurations of features in proactive defense.
        
        @param request: DescribeCommonOverallConfigListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCommonOverallConfigListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type_list):
            query['TypeList'] = request.type_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCommonOverallConfigList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCommonOverallConfigListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_common_overall_config_list(
        self,
        request: sas_20181203_models.DescribeCommonOverallConfigListRequest,
    ) -> sas_20181203_models.DescribeCommonOverallConfigListResponse:
        """
        @summary Queries the configurations of features in proactive defense.
        
        @param request: DescribeCommonOverallConfigListRequest
        @return: DescribeCommonOverallConfigListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_common_overall_config_list_with_options(request, runtime)

    async def describe_common_overall_config_list_async(
        self,
        request: sas_20181203_models.DescribeCommonOverallConfigListRequest,
    ) -> sas_20181203_models.DescribeCommonOverallConfigListResponse:
        """
        @summary Queries the configurations of features in proactive defense.
        
        @param request: DescribeCommonOverallConfigListRequest
        @return: DescribeCommonOverallConfigListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_common_overall_config_list_with_options_async(request, runtime)

    def describe_common_target_config_with_options(
        self,
        request: sas_20181203_models.DescribeCommonTargetConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCommonTargetConfigResponse:
        """
        @summary Queries the configurations of the proactive defense feature.
        
        @param request: DescribeCommonTargetConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCommonTargetConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCommonTargetConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCommonTargetConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_common_target_config_with_options_async(
        self,
        request: sas_20181203_models.DescribeCommonTargetConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCommonTargetConfigResponse:
        """
        @summary Queries the configurations of the proactive defense feature.
        
        @param request: DescribeCommonTargetConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCommonTargetConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCommonTargetConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCommonTargetConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_common_target_config(
        self,
        request: sas_20181203_models.DescribeCommonTargetConfigRequest,
    ) -> sas_20181203_models.DescribeCommonTargetConfigResponse:
        """
        @summary Queries the configurations of the proactive defense feature.
        
        @param request: DescribeCommonTargetConfigRequest
        @return: DescribeCommonTargetConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_common_target_config_with_options(request, runtime)

    async def describe_common_target_config_async(
        self,
        request: sas_20181203_models.DescribeCommonTargetConfigRequest,
    ) -> sas_20181203_models.DescribeCommonTargetConfigResponse:
        """
        @summary Queries the configurations of the proactive defense feature.
        
        @param request: DescribeCommonTargetConfigRequest
        @return: DescribeCommonTargetConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_common_target_config_with_options_async(request, runtime)

    def describe_common_target_result_list_with_options(
        self,
        request: sas_20181203_models.DescribeCommonTargetResultListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCommonTargetResultListResponse:
        """
        @summary Queries the information about the servers based on the specified configuration item.
        
        @param request: DescribeCommonTargetResultListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCommonTargetResultListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCommonTargetResultList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCommonTargetResultListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_common_target_result_list_with_options_async(
        self,
        request: sas_20181203_models.DescribeCommonTargetResultListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCommonTargetResultListResponse:
        """
        @summary Queries the information about the servers based on the specified configuration item.
        
        @param request: DescribeCommonTargetResultListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCommonTargetResultListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCommonTargetResultList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCommonTargetResultListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_common_target_result_list(
        self,
        request: sas_20181203_models.DescribeCommonTargetResultListRequest,
    ) -> sas_20181203_models.DescribeCommonTargetResultListResponse:
        """
        @summary Queries the information about the servers based on the specified configuration item.
        
        @param request: DescribeCommonTargetResultListRequest
        @return: DescribeCommonTargetResultListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_common_target_result_list_with_options(request, runtime)

    async def describe_common_target_result_list_async(
        self,
        request: sas_20181203_models.DescribeCommonTargetResultListRequest,
    ) -> sas_20181203_models.DescribeCommonTargetResultListResponse:
        """
        @summary Queries the information about the servers based on the specified configuration item.
        
        @param request: DescribeCommonTargetResultListRequest
        @return: DescribeCommonTargetResultListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_common_target_result_list_with_options_async(request, runtime)

    def describe_concern_necessity_with_options(
        self,
        request: sas_20181203_models.DescribeConcernNecessityRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeConcernNecessityResponse:
        """
        @summary Queries the priorities to fix vulnerabilities.
        
        @param request: DescribeConcernNecessityRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeConcernNecessityResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeConcernNecessity',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeConcernNecessityResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_concern_necessity_with_options_async(
        self,
        request: sas_20181203_models.DescribeConcernNecessityRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeConcernNecessityResponse:
        """
        @summary Queries the priorities to fix vulnerabilities.
        
        @param request: DescribeConcernNecessityRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeConcernNecessityResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeConcernNecessity',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeConcernNecessityResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_concern_necessity(
        self,
        request: sas_20181203_models.DescribeConcernNecessityRequest,
    ) -> sas_20181203_models.DescribeConcernNecessityResponse:
        """
        @summary Queries the priorities to fix vulnerabilities.
        
        @param request: DescribeConcernNecessityRequest
        @return: DescribeConcernNecessityResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_concern_necessity_with_options(request, runtime)

    async def describe_concern_necessity_async(
        self,
        request: sas_20181203_models.DescribeConcernNecessityRequest,
    ) -> sas_20181203_models.DescribeConcernNecessityResponse:
        """
        @summary Queries the priorities to fix vulnerabilities.
        
        @param request: DescribeConcernNecessityRequest
        @return: DescribeConcernNecessityResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_concern_necessity_with_options_async(request, runtime)

    def describe_container_apps_with_options(
        self,
        request: sas_20181203_models.DescribeContainerAppsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeContainerAppsResponse:
        """
        @summary Queries the information about a containerized application.
        
        @param request: DescribeContainerAppsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeContainerAppsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.field_value):
            query['FieldValue'] = request.field_value
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeContainerApps',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeContainerAppsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_container_apps_with_options_async(
        self,
        request: sas_20181203_models.DescribeContainerAppsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeContainerAppsResponse:
        """
        @summary Queries the information about a containerized application.
        
        @param request: DescribeContainerAppsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeContainerAppsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.field_value):
            query['FieldValue'] = request.field_value
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeContainerApps',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeContainerAppsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_container_apps(
        self,
        request: sas_20181203_models.DescribeContainerAppsRequest,
    ) -> sas_20181203_models.DescribeContainerAppsResponse:
        """
        @summary Queries the information about a containerized application.
        
        @param request: DescribeContainerAppsRequest
        @return: DescribeContainerAppsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_container_apps_with_options(request, runtime)

    async def describe_container_apps_async(
        self,
        request: sas_20181203_models.DescribeContainerAppsRequest,
    ) -> sas_20181203_models.DescribeContainerAppsResponse:
        """
        @summary Queries the information about a containerized application.
        
        @param request: DescribeContainerAppsRequest
        @return: DescribeContainerAppsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_container_apps_with_options_async(request, runtime)

    def describe_container_criteria_with_options(
        self,
        request: sas_20181203_models.DescribeContainerCriteriaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeContainerCriteriaResponse:
        """
        @summary Obtains the filter conditions that you can use to filter the containers.
        
        @param request: DescribeContainerCriteriaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeContainerCriteriaResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.group_field):
            query['GroupField'] = request.group_field
        if not UtilClient.is_unset(request.value):
            query['Value'] = request.value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeContainerCriteria',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeContainerCriteriaResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_container_criteria_with_options_async(
        self,
        request: sas_20181203_models.DescribeContainerCriteriaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeContainerCriteriaResponse:
        """
        @summary Obtains the filter conditions that you can use to filter the containers.
        
        @param request: DescribeContainerCriteriaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeContainerCriteriaResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.group_field):
            query['GroupField'] = request.group_field
        if not UtilClient.is_unset(request.value):
            query['Value'] = request.value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeContainerCriteria',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeContainerCriteriaResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_container_criteria(
        self,
        request: sas_20181203_models.DescribeContainerCriteriaRequest,
    ) -> sas_20181203_models.DescribeContainerCriteriaResponse:
        """
        @summary Obtains the filter conditions that you can use to filter the containers.
        
        @param request: DescribeContainerCriteriaRequest
        @return: DescribeContainerCriteriaResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_container_criteria_with_options(request, runtime)

    async def describe_container_criteria_async(
        self,
        request: sas_20181203_models.DescribeContainerCriteriaRequest,
    ) -> sas_20181203_models.DescribeContainerCriteriaResponse:
        """
        @summary Obtains the filter conditions that you can use to filter the containers.
        
        @param request: DescribeContainerCriteriaRequest
        @return: DescribeContainerCriteriaResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_container_criteria_with_options_async(request, runtime)

    def describe_container_field_statistics_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeContainerFieldStatisticsResponse:
        """
        @summary Queries the statistical information about containers.
        
        @param request: DescribeContainerFieldStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeContainerFieldStatisticsResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeContainerFieldStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeContainerFieldStatisticsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_container_field_statistics_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeContainerFieldStatisticsResponse:
        """
        @summary Queries the statistical information about containers.
        
        @param request: DescribeContainerFieldStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeContainerFieldStatisticsResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeContainerFieldStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeContainerFieldStatisticsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_container_field_statistics(self) -> sas_20181203_models.DescribeContainerFieldStatisticsResponse:
        """
        @summary Queries the statistical information about containers.
        
        @return: DescribeContainerFieldStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_container_field_statistics_with_options(runtime)

    async def describe_container_field_statistics_async(self) -> sas_20181203_models.DescribeContainerFieldStatisticsResponse:
        """
        @summary Queries the statistical information about containers.
        
        @return: DescribeContainerFieldStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_container_field_statistics_with_options_async(runtime)

    def describe_container_grouped_field_detail_with_options(
        self,
        request: sas_20181203_models.DescribeContainerGroupedFieldDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeContainerGroupedFieldDetailResponse:
        """
        @summary Queries the attribute details of containers.
        
        @param request: DescribeContainerGroupedFieldDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeContainerGroupedFieldDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.criteria):
            query['Criteria'] = request.criteria
        if not UtilClient.is_unset(request.group_field):
            query['GroupField'] = request.group_field
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeContainerGroupedFieldDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeContainerGroupedFieldDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_container_grouped_field_detail_with_options_async(
        self,
        request: sas_20181203_models.DescribeContainerGroupedFieldDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeContainerGroupedFieldDetailResponse:
        """
        @summary Queries the attribute details of containers.
        
        @param request: DescribeContainerGroupedFieldDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeContainerGroupedFieldDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.criteria):
            query['Criteria'] = request.criteria
        if not UtilClient.is_unset(request.group_field):
            query['GroupField'] = request.group_field
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeContainerGroupedFieldDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeContainerGroupedFieldDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_container_grouped_field_detail(
        self,
        request: sas_20181203_models.DescribeContainerGroupedFieldDetailRequest,
    ) -> sas_20181203_models.DescribeContainerGroupedFieldDetailResponse:
        """
        @summary Queries the attribute details of containers.
        
        @param request: DescribeContainerGroupedFieldDetailRequest
        @return: DescribeContainerGroupedFieldDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_container_grouped_field_detail_with_options(request, runtime)

    async def describe_container_grouped_field_detail_async(
        self,
        request: sas_20181203_models.DescribeContainerGroupedFieldDetailRequest,
    ) -> sas_20181203_models.DescribeContainerGroupedFieldDetailResponse:
        """
        @summary Queries the attribute details of containers.
        
        @param request: DescribeContainerGroupedFieldDetailRequest
        @return: DescribeContainerGroupedFieldDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_container_grouped_field_detail_with_options_async(request, runtime)

    def describe_container_instances_with_options(
        self,
        request: sas_20181203_models.DescribeContainerInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeContainerInstancesResponse:
        """
        @summary Queries the information about containers.
        
        @param request: DescribeContainerInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeContainerInstancesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.criteria):
            query['Criteria'] = request.criteria
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.logical_exp):
            query['LogicalExp'] = request.logical_exp
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeContainerInstances',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeContainerInstancesResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_container_instances_with_options_async(
        self,
        request: sas_20181203_models.DescribeContainerInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeContainerInstancesResponse:
        """
        @summary Queries the information about containers.
        
        @param request: DescribeContainerInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeContainerInstancesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.criteria):
            query['Criteria'] = request.criteria
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.logical_exp):
            query['LogicalExp'] = request.logical_exp
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeContainerInstances',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeContainerInstancesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_container_instances(
        self,
        request: sas_20181203_models.DescribeContainerInstancesRequest,
    ) -> sas_20181203_models.DescribeContainerInstancesResponse:
        """
        @summary Queries the information about containers.
        
        @param request: DescribeContainerInstancesRequest
        @return: DescribeContainerInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_container_instances_with_options(request, runtime)

    async def describe_container_instances_async(
        self,
        request: sas_20181203_models.DescribeContainerInstancesRequest,
    ) -> sas_20181203_models.DescribeContainerInstancesResponse:
        """
        @summary Queries the information about containers.
        
        @param request: DescribeContainerInstancesRequest
        @return: DescribeContainerInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_container_instances_with_options_async(request, runtime)

    def describe_container_scan_config_with_options(
        self,
        request: sas_20181203_models.DescribeContainerScanConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeContainerScanConfigResponse:
        """
        @summary Queries the configurations of the vulnerability scan of one or more running container applications.
        
        @param request: DescribeContainerScanConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeContainerScanConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeContainerScanConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeContainerScanConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_container_scan_config_with_options_async(
        self,
        request: sas_20181203_models.DescribeContainerScanConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeContainerScanConfigResponse:
        """
        @summary Queries the configurations of the vulnerability scan of one or more running container applications.
        
        @param request: DescribeContainerScanConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeContainerScanConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeContainerScanConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeContainerScanConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_container_scan_config(
        self,
        request: sas_20181203_models.DescribeContainerScanConfigRequest,
    ) -> sas_20181203_models.DescribeContainerScanConfigResponse:
        """
        @summary Queries the configurations of the vulnerability scan of one or more running container applications.
        
        @param request: DescribeContainerScanConfigRequest
        @return: DescribeContainerScanConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_container_scan_config_with_options(request, runtime)

    async def describe_container_scan_config_async(
        self,
        request: sas_20181203_models.DescribeContainerScanConfigRequest,
    ) -> sas_20181203_models.DescribeContainerScanConfigResponse:
        """
        @summary Queries the configurations of the vulnerability scan of one or more running container applications.
        
        @param request: DescribeContainerScanConfigRequest
        @return: DescribeContainerScanConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_container_scan_config_with_options_async(request, runtime)

    def describe_container_service_k8s_cluster_kritis_status_with_options(
        self,
        request: sas_20181203_models.DescribeContainerServiceK8sClusterKritisStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeContainerServiceK8sClusterKritisStatusResponse:
        """
        @summary Queries the Kritis status of a Container Service for Kubernetes (ACK) cluster.
        
        @param request: DescribeContainerServiceK8sClusterKritisStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeContainerServiceK8sClusterKritisStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeContainerServiceK8sClusterKritisStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeContainerServiceK8sClusterKritisStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_container_service_k8s_cluster_kritis_status_with_options_async(
        self,
        request: sas_20181203_models.DescribeContainerServiceK8sClusterKritisStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeContainerServiceK8sClusterKritisStatusResponse:
        """
        @summary Queries the Kritis status of a Container Service for Kubernetes (ACK) cluster.
        
        @param request: DescribeContainerServiceK8sClusterKritisStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeContainerServiceK8sClusterKritisStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeContainerServiceK8sClusterKritisStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeContainerServiceK8sClusterKritisStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_container_service_k8s_cluster_kritis_status(
        self,
        request: sas_20181203_models.DescribeContainerServiceK8sClusterKritisStatusRequest,
    ) -> sas_20181203_models.DescribeContainerServiceK8sClusterKritisStatusResponse:
        """
        @summary Queries the Kritis status of a Container Service for Kubernetes (ACK) cluster.
        
        @param request: DescribeContainerServiceK8sClusterKritisStatusRequest
        @return: DescribeContainerServiceK8sClusterKritisStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_container_service_k8s_cluster_kritis_status_with_options(request, runtime)

    async def describe_container_service_k8s_cluster_kritis_status_async(
        self,
        request: sas_20181203_models.DescribeContainerServiceK8sClusterKritisStatusRequest,
    ) -> sas_20181203_models.DescribeContainerServiceK8sClusterKritisStatusResponse:
        """
        @summary Queries the Kritis status of a Container Service for Kubernetes (ACK) cluster.
        
        @param request: DescribeContainerServiceK8sClusterKritisStatusRequest
        @return: DescribeContainerServiceK8sClusterKritisStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_container_service_k8s_cluster_kritis_status_with_options_async(request, runtime)

    def describe_container_service_k8s_cluster_namespaces_with_options(
        self,
        request: sas_20181203_models.DescribeContainerServiceK8sClusterNamespacesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeContainerServiceK8sClusterNamespacesResponse:
        """
        @summary Queries the namespace of a Container Service for Kubernetes (ACK) cluster.
        
        @param request: DescribeContainerServiceK8sClusterNamespacesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeContainerServiceK8sClusterNamespacesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeContainerServiceK8sClusterNamespaces',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeContainerServiceK8sClusterNamespacesResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_container_service_k8s_cluster_namespaces_with_options_async(
        self,
        request: sas_20181203_models.DescribeContainerServiceK8sClusterNamespacesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeContainerServiceK8sClusterNamespacesResponse:
        """
        @summary Queries the namespace of a Container Service for Kubernetes (ACK) cluster.
        
        @param request: DescribeContainerServiceK8sClusterNamespacesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeContainerServiceK8sClusterNamespacesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeContainerServiceK8sClusterNamespaces',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeContainerServiceK8sClusterNamespacesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_container_service_k8s_cluster_namespaces(
        self,
        request: sas_20181203_models.DescribeContainerServiceK8sClusterNamespacesRequest,
    ) -> sas_20181203_models.DescribeContainerServiceK8sClusterNamespacesResponse:
        """
        @summary Queries the namespace of a Container Service for Kubernetes (ACK) cluster.
        
        @param request: DescribeContainerServiceK8sClusterNamespacesRequest
        @return: DescribeContainerServiceK8sClusterNamespacesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_container_service_k8s_cluster_namespaces_with_options(request, runtime)

    async def describe_container_service_k8s_cluster_namespaces_async(
        self,
        request: sas_20181203_models.DescribeContainerServiceK8sClusterNamespacesRequest,
    ) -> sas_20181203_models.DescribeContainerServiceK8sClusterNamespacesResponse:
        """
        @summary Queries the namespace of a Container Service for Kubernetes (ACK) cluster.
        
        @param request: DescribeContainerServiceK8sClusterNamespacesRequest
        @return: DescribeContainerServiceK8sClusterNamespacesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_container_service_k8s_cluster_namespaces_with_options_async(request, runtime)

    def describe_container_service_k8s_clusters_with_options(
        self,
        request: sas_20181203_models.DescribeContainerServiceK8sClustersRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeContainerServiceK8sClustersResponse:
        """
        @summary Queries a list of Container Service for Kubernetes (ACK) clusters.
        
        @param request: DescribeContainerServiceK8sClustersRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeContainerServiceK8sClustersResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeContainerServiceK8sClusters',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeContainerServiceK8sClustersResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_container_service_k8s_clusters_with_options_async(
        self,
        request: sas_20181203_models.DescribeContainerServiceK8sClustersRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeContainerServiceK8sClustersResponse:
        """
        @summary Queries a list of Container Service for Kubernetes (ACK) clusters.
        
        @param request: DescribeContainerServiceK8sClustersRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeContainerServiceK8sClustersResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeContainerServiceK8sClusters',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeContainerServiceK8sClustersResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_container_service_k8s_clusters(
        self,
        request: sas_20181203_models.DescribeContainerServiceK8sClustersRequest,
    ) -> sas_20181203_models.DescribeContainerServiceK8sClustersResponse:
        """
        @summary Queries a list of Container Service for Kubernetes (ACK) clusters.
        
        @param request: DescribeContainerServiceK8sClustersRequest
        @return: DescribeContainerServiceK8sClustersResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_container_service_k8s_clusters_with_options(request, runtime)

    async def describe_container_service_k8s_clusters_async(
        self,
        request: sas_20181203_models.DescribeContainerServiceK8sClustersRequest,
    ) -> sas_20181203_models.DescribeContainerServiceK8sClustersResponse:
        """
        @summary Queries a list of Container Service for Kubernetes (ACK) clusters.
        
        @param request: DescribeContainerServiceK8sClustersRequest
        @return: DescribeContainerServiceK8sClustersResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_container_service_k8s_clusters_with_options_async(request, runtime)

    def describe_container_statistics_with_options(
        self,
        request: sas_20181203_models.DescribeContainerStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeContainerStatisticsResponse:
        """
        @summary Queries the alert statistics on container assets.
        
        @description Only users who created a Container Registry Enterprise Edition instance can call this operation.
        
        @param request: DescribeContainerStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeContainerStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeContainerStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeContainerStatisticsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_container_statistics_with_options_async(
        self,
        request: sas_20181203_models.DescribeContainerStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeContainerStatisticsResponse:
        """
        @summary Queries the alert statistics on container assets.
        
        @description Only users who created a Container Registry Enterprise Edition instance can call this operation.
        
        @param request: DescribeContainerStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeContainerStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeContainerStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeContainerStatisticsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_container_statistics(
        self,
        request: sas_20181203_models.DescribeContainerStatisticsRequest,
    ) -> sas_20181203_models.DescribeContainerStatisticsResponse:
        """
        @summary Queries the alert statistics on container assets.
        
        @description Only users who created a Container Registry Enterprise Edition instance can call this operation.
        
        @param request: DescribeContainerStatisticsRequest
        @return: DescribeContainerStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_container_statistics_with_options(request, runtime)

    async def describe_container_statistics_async(
        self,
        request: sas_20181203_models.DescribeContainerStatisticsRequest,
    ) -> sas_20181203_models.DescribeContainerStatisticsResponse:
        """
        @summary Queries the alert statistics on container assets.
        
        @description Only users who created a Container Registry Enterprise Edition instance can call this operation.
        
        @param request: DescribeContainerStatisticsRequest
        @return: DescribeContainerStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_container_statistics_with_options_async(request, runtime)

    def describe_container_tags_with_options(
        self,
        request: sas_20181203_models.DescribeContainerTagsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeContainerTagsResponse:
        """
        @summary Queries the details of container assets by using an attribute.
        
        @param request: DescribeContainerTagsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeContainerTagsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_name):
            query['AppName'] = request.app_name
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.field_name):
            query['FieldName'] = request.field_name
        if not UtilClient.is_unset(request.field_value):
            query['FieldValue'] = request.field_value
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeContainerTags',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeContainerTagsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_container_tags_with_options_async(
        self,
        request: sas_20181203_models.DescribeContainerTagsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeContainerTagsResponse:
        """
        @summary Queries the details of container assets by using an attribute.
        
        @param request: DescribeContainerTagsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeContainerTagsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_name):
            query['AppName'] = request.app_name
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.field_name):
            query['FieldName'] = request.field_name
        if not UtilClient.is_unset(request.field_value):
            query['FieldValue'] = request.field_value
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeContainerTags',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeContainerTagsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_container_tags(
        self,
        request: sas_20181203_models.DescribeContainerTagsRequest,
    ) -> sas_20181203_models.DescribeContainerTagsResponse:
        """
        @summary Queries the details of container assets by using an attribute.
        
        @param request: DescribeContainerTagsRequest
        @return: DescribeContainerTagsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_container_tags_with_options(request, runtime)

    async def describe_container_tags_async(
        self,
        request: sas_20181203_models.DescribeContainerTagsRequest,
    ) -> sas_20181203_models.DescribeContainerTagsResponse:
        """
        @summary Queries the details of container assets by using an attribute.
        
        @param request: DescribeContainerTagsRequest
        @return: DescribeContainerTagsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_container_tags_with_options_async(request, runtime)

    def describe_count_not_scanned_image_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCountNotScannedImageResponse:
        """
        @summary Queries the number of images that are not scanned.
        
        @param request: DescribeCountNotScannedImageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCountNotScannedImageResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeCountNotScannedImage',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCountNotScannedImageResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_count_not_scanned_image_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCountNotScannedImageResponse:
        """
        @summary Queries the number of images that are not scanned.
        
        @param request: DescribeCountNotScannedImageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCountNotScannedImageResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeCountNotScannedImage',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCountNotScannedImageResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_count_not_scanned_image(self) -> sas_20181203_models.DescribeCountNotScannedImageResponse:
        """
        @summary Queries the number of images that are not scanned.
        
        @return: DescribeCountNotScannedImageResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_count_not_scanned_image_with_options(runtime)

    async def describe_count_not_scanned_image_async(self) -> sas_20181203_models.DescribeCountNotScannedImageResponse:
        """
        @summary Queries the number of images that are not scanned.
        
        @return: DescribeCountNotScannedImageResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_count_not_scanned_image_with_options_async(runtime)

    def describe_count_scanned_image_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCountScannedImageResponse:
        """
        @summary Queries the number of images that are scanned.
        
        @param request: DescribeCountScannedImageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCountScannedImageResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeCountScannedImage',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCountScannedImageResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_count_scanned_image_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCountScannedImageResponse:
        """
        @summary Queries the number of images that are scanned.
        
        @param request: DescribeCountScannedImageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCountScannedImageResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeCountScannedImage',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCountScannedImageResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_count_scanned_image(self) -> sas_20181203_models.DescribeCountScannedImageResponse:
        """
        @summary Queries the number of images that are scanned.
        
        @return: DescribeCountScannedImageResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_count_scanned_image_with_options(runtime)

    async def describe_count_scanned_image_async(self) -> sas_20181203_models.DescribeCountScannedImageResponse:
        """
        @summary Queries the number of images that are scanned.
        
        @return: DescribeCountScannedImageResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_count_scanned_image_with_options_async(runtime)

    def describe_criteria_with_options(
        self,
        request: sas_20181203_models.DescribeCriteriaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCriteriaResponse:
        """
        @summary Queries the filter conditions that are used to search for assets in fuzzy match mode.
        
        @param request: DescribeCriteriaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCriteriaResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.machine_types):
            query['MachineTypes'] = request.machine_types
        if not UtilClient.is_unset(request.support_auto_tag):
            query['SupportAutoTag'] = request.support_auto_tag
        if not UtilClient.is_unset(request.value):
            query['Value'] = request.value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCriteria',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCriteriaResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_criteria_with_options_async(
        self,
        request: sas_20181203_models.DescribeCriteriaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCriteriaResponse:
        """
        @summary Queries the filter conditions that are used to search for assets in fuzzy match mode.
        
        @param request: DescribeCriteriaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCriteriaResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.machine_types):
            query['MachineTypes'] = request.machine_types
        if not UtilClient.is_unset(request.support_auto_tag):
            query['SupportAutoTag'] = request.support_auto_tag
        if not UtilClient.is_unset(request.value):
            query['Value'] = request.value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCriteria',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCriteriaResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_criteria(
        self,
        request: sas_20181203_models.DescribeCriteriaRequest,
    ) -> sas_20181203_models.DescribeCriteriaResponse:
        """
        @summary Queries the filter conditions that are used to search for assets in fuzzy match mode.
        
        @param request: DescribeCriteriaRequest
        @return: DescribeCriteriaResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_criteria_with_options(request, runtime)

    async def describe_criteria_async(
        self,
        request: sas_20181203_models.DescribeCriteriaRequest,
    ) -> sas_20181203_models.DescribeCriteriaResponse:
        """
        @summary Queries the filter conditions that are used to search for assets in fuzzy match mode.
        
        @param request: DescribeCriteriaRequest
        @return: DescribeCriteriaResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_criteria_with_options_async(request, runtime)

    def describe_custom_block_instances_with_options(
        self,
        request: sas_20181203_models.DescribeCustomBlockInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCustomBlockInstancesResponse:
        """
        @summary Queries the list of servers on which the custom defense rule against brute-force attacks takes effect.
        
        @param request: DescribeCustomBlockInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCustomBlockInstancesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.block_ip):
            query['BlockIp'] = request.block_ip
        if not UtilClient.is_unset(request.bound):
            query['Bound'] = request.bound
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCustomBlockInstances',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCustomBlockInstancesResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_custom_block_instances_with_options_async(
        self,
        request: sas_20181203_models.DescribeCustomBlockInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCustomBlockInstancesResponse:
        """
        @summary Queries the list of servers on which the custom defense rule against brute-force attacks takes effect.
        
        @param request: DescribeCustomBlockInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCustomBlockInstancesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.block_ip):
            query['BlockIp'] = request.block_ip
        if not UtilClient.is_unset(request.bound):
            query['Bound'] = request.bound
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCustomBlockInstances',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCustomBlockInstancesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_custom_block_instances(
        self,
        request: sas_20181203_models.DescribeCustomBlockInstancesRequest,
    ) -> sas_20181203_models.DescribeCustomBlockInstancesResponse:
        """
        @summary Queries the list of servers on which the custom defense rule against brute-force attacks takes effect.
        
        @param request: DescribeCustomBlockInstancesRequest
        @return: DescribeCustomBlockInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_custom_block_instances_with_options(request, runtime)

    async def describe_custom_block_instances_async(
        self,
        request: sas_20181203_models.DescribeCustomBlockInstancesRequest,
    ) -> sas_20181203_models.DescribeCustomBlockInstancesResponse:
        """
        @summary Queries the list of servers on which the custom defense rule against brute-force attacks takes effect.
        
        @param request: DescribeCustomBlockInstancesRequest
        @return: DescribeCustomBlockInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_custom_block_instances_with_options_async(request, runtime)

    def describe_custom_block_records_with_options(
        self,
        request: sas_20181203_models.DescribeCustomBlockRecordsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCustomBlockRecordsResponse:
        """
        @summary Queries the defense rules against brute-force attacks that are applied to one or more servers.
        
        @param request: DescribeCustomBlockRecordsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCustomBlockRecordsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.block_ip):
            query['BlockIp'] = request.block_ip
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCustomBlockRecords',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCustomBlockRecordsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_custom_block_records_with_options_async(
        self,
        request: sas_20181203_models.DescribeCustomBlockRecordsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCustomBlockRecordsResponse:
        """
        @summary Queries the defense rules against brute-force attacks that are applied to one or more servers.
        
        @param request: DescribeCustomBlockRecordsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCustomBlockRecordsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.block_ip):
            query['BlockIp'] = request.block_ip
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCustomBlockRecords',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCustomBlockRecordsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_custom_block_records(
        self,
        request: sas_20181203_models.DescribeCustomBlockRecordsRequest,
    ) -> sas_20181203_models.DescribeCustomBlockRecordsResponse:
        """
        @summary Queries the defense rules against brute-force attacks that are applied to one or more servers.
        
        @param request: DescribeCustomBlockRecordsRequest
        @return: DescribeCustomBlockRecordsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_custom_block_records_with_options(request, runtime)

    async def describe_custom_block_records_async(
        self,
        request: sas_20181203_models.DescribeCustomBlockRecordsRequest,
    ) -> sas_20181203_models.DescribeCustomBlockRecordsResponse:
        """
        @summary Queries the defense rules against brute-force attacks that are applied to one or more servers.
        
        @param request: DescribeCustomBlockRecordsRequest
        @return: DescribeCustomBlockRecordsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_custom_block_records_with_options_async(request, runtime)

    def describe_customize_report_config_detail_with_options(
        self,
        request: sas_20181203_models.DescribeCustomizeReportConfigDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCustomizeReportConfigDetailResponse:
        """
        @summary Obtains the configurations of a security report.
        
        @param request: DescribeCustomizeReportConfigDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCustomizeReportConfigDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.report_id):
            query['ReportId'] = request.report_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCustomizeReportConfigDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCustomizeReportConfigDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_customize_report_config_detail_with_options_async(
        self,
        request: sas_20181203_models.DescribeCustomizeReportConfigDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCustomizeReportConfigDetailResponse:
        """
        @summary Obtains the configurations of a security report.
        
        @param request: DescribeCustomizeReportConfigDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCustomizeReportConfigDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.report_id):
            query['ReportId'] = request.report_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCustomizeReportConfigDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCustomizeReportConfigDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_customize_report_config_detail(
        self,
        request: sas_20181203_models.DescribeCustomizeReportConfigDetailRequest,
    ) -> sas_20181203_models.DescribeCustomizeReportConfigDetailResponse:
        """
        @summary Obtains the configurations of a security report.
        
        @param request: DescribeCustomizeReportConfigDetailRequest
        @return: DescribeCustomizeReportConfigDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_customize_report_config_detail_with_options(request, runtime)

    async def describe_customize_report_config_detail_async(
        self,
        request: sas_20181203_models.DescribeCustomizeReportConfigDetailRequest,
    ) -> sas_20181203_models.DescribeCustomizeReportConfigDetailResponse:
        """
        @summary Obtains the configurations of a security report.
        
        @param request: DescribeCustomizeReportConfigDetailRequest
        @return: DescribeCustomizeReportConfigDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_customize_report_config_detail_with_options_async(request, runtime)

    def describe_customize_report_list_with_options(
        self,
        request: sas_20181203_models.DescribeCustomizeReportListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCustomizeReportListResponse:
        """
        @summary Queries security reports.
        
        @param request: DescribeCustomizeReportListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCustomizeReportListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.pinned):
            query['Pinned'] = request.pinned
        if not UtilClient.is_unset(request.report_status):
            query['ReportStatus'] = request.report_status
        if not UtilClient.is_unset(request.report_type):
            query['ReportType'] = request.report_type
        if not UtilClient.is_unset(request.report_version):
            query['ReportVersion'] = request.report_version
        if not UtilClient.is_unset(request.title):
            query['Title'] = request.title
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCustomizeReportList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCustomizeReportListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_customize_report_list_with_options_async(
        self,
        request: sas_20181203_models.DescribeCustomizeReportListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCustomizeReportListResponse:
        """
        @summary Queries security reports.
        
        @param request: DescribeCustomizeReportListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCustomizeReportListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.pinned):
            query['Pinned'] = request.pinned
        if not UtilClient.is_unset(request.report_status):
            query['ReportStatus'] = request.report_status
        if not UtilClient.is_unset(request.report_type):
            query['ReportType'] = request.report_type
        if not UtilClient.is_unset(request.report_version):
            query['ReportVersion'] = request.report_version
        if not UtilClient.is_unset(request.title):
            query['Title'] = request.title
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCustomizeReportList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCustomizeReportListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_customize_report_list(
        self,
        request: sas_20181203_models.DescribeCustomizeReportListRequest,
    ) -> sas_20181203_models.DescribeCustomizeReportListResponse:
        """
        @summary Queries security reports.
        
        @param request: DescribeCustomizeReportListRequest
        @return: DescribeCustomizeReportListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_customize_report_list_with_options(request, runtime)

    async def describe_customize_report_list_async(
        self,
        request: sas_20181203_models.DescribeCustomizeReportListRequest,
    ) -> sas_20181203_models.DescribeCustomizeReportListResponse:
        """
        @summary Queries security reports.
        
        @param request: DescribeCustomizeReportListRequest
        @return: DescribeCustomizeReportListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_customize_report_list_with_options_async(request, runtime)

    def describe_customized_dict_upload_info_with_options(
        self,
        request: sas_20181203_models.DescribeCustomizedDictUploadInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCustomizedDictUploadInfoResponse:
        """
        @summary Queries the Object Storage Service (OSS) information of the file that is uploaded to create custom weak password rules.
        
        @param request: DescribeCustomizedDictUploadInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCustomizedDictUploadInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCustomizedDictUploadInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCustomizedDictUploadInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_customized_dict_upload_info_with_options_async(
        self,
        request: sas_20181203_models.DescribeCustomizedDictUploadInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCustomizedDictUploadInfoResponse:
        """
        @summary Queries the Object Storage Service (OSS) information of the file that is uploaded to create custom weak password rules.
        
        @param request: DescribeCustomizedDictUploadInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCustomizedDictUploadInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCustomizedDictUploadInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCustomizedDictUploadInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_customized_dict_upload_info(
        self,
        request: sas_20181203_models.DescribeCustomizedDictUploadInfoRequest,
    ) -> sas_20181203_models.DescribeCustomizedDictUploadInfoResponse:
        """
        @summary Queries the Object Storage Service (OSS) information of the file that is uploaded to create custom weak password rules.
        
        @param request: DescribeCustomizedDictUploadInfoRequest
        @return: DescribeCustomizedDictUploadInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_customized_dict_upload_info_with_options(request, runtime)

    async def describe_customized_dict_upload_info_async(
        self,
        request: sas_20181203_models.DescribeCustomizedDictUploadInfoRequest,
    ) -> sas_20181203_models.DescribeCustomizedDictUploadInfoResponse:
        """
        @summary Queries the Object Storage Service (OSS) information of the file that is uploaded to create custom weak password rules.
        
        @param request: DescribeCustomizedDictUploadInfoRequest
        @return: DescribeCustomizedDictUploadInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_customized_dict_upload_info_with_options_async(request, runtime)

    def describe_customized_strategy_targets_with_options(
        self,
        request: sas_20181203_models.DescribeCustomizedStrategyTargetsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCustomizedStrategyTargetsResponse:
        """
        @summary Queries the servers to which custom policies are applied.
        
        @param request: DescribeCustomizedStrategyTargetsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCustomizedStrategyTargetsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCustomizedStrategyTargets',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCustomizedStrategyTargetsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_customized_strategy_targets_with_options_async(
        self,
        request: sas_20181203_models.DescribeCustomizedStrategyTargetsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCustomizedStrategyTargetsResponse:
        """
        @summary Queries the servers to which custom policies are applied.
        
        @param request: DescribeCustomizedStrategyTargetsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCustomizedStrategyTargetsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCustomizedStrategyTargets',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCustomizedStrategyTargetsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_customized_strategy_targets(
        self,
        request: sas_20181203_models.DescribeCustomizedStrategyTargetsRequest,
    ) -> sas_20181203_models.DescribeCustomizedStrategyTargetsResponse:
        """
        @summary Queries the servers to which custom policies are applied.
        
        @param request: DescribeCustomizedStrategyTargetsRequest
        @return: DescribeCustomizedStrategyTargetsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_customized_strategy_targets_with_options(request, runtime)

    async def describe_customized_strategy_targets_async(
        self,
        request: sas_20181203_models.DescribeCustomizedStrategyTargetsRequest,
    ) -> sas_20181203_models.DescribeCustomizedStrategyTargetsResponse:
        """
        @summary Queries the servers to which custom policies are applied.
        
        @param request: DescribeCustomizedStrategyTargetsRequest
        @return: DescribeCustomizedStrategyTargetsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_customized_strategy_targets_with_options_async(request, runtime)

    def describe_cycle_task_list_with_options(
        self,
        request: sas_20181203_models.DescribeCycleTaskListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCycleTaskListResponse:
        """
        @summary Queries periodic scan tasks. The tasks include image scan tasks, urgent vulnerability scan tasks, and virus scan tasks.
        
        @param request: DescribeCycleTaskListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCycleTaskListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.task_name):
            query['TaskName'] = request.task_name
        if not UtilClient.is_unset(request.task_type):
            query['TaskType'] = request.task_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCycleTaskList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCycleTaskListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_cycle_task_list_with_options_async(
        self,
        request: sas_20181203_models.DescribeCycleTaskListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeCycleTaskListResponse:
        """
        @summary Queries periodic scan tasks. The tasks include image scan tasks, urgent vulnerability scan tasks, and virus scan tasks.
        
        @param request: DescribeCycleTaskListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeCycleTaskListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.task_name):
            query['TaskName'] = request.task_name
        if not UtilClient.is_unset(request.task_type):
            query['TaskType'] = request.task_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeCycleTaskList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeCycleTaskListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_cycle_task_list(
        self,
        request: sas_20181203_models.DescribeCycleTaskListRequest,
    ) -> sas_20181203_models.DescribeCycleTaskListResponse:
        """
        @summary Queries periodic scan tasks. The tasks include image scan tasks, urgent vulnerability scan tasks, and virus scan tasks.
        
        @param request: DescribeCycleTaskListRequest
        @return: DescribeCycleTaskListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_cycle_task_list_with_options(request, runtime)

    async def describe_cycle_task_list_async(
        self,
        request: sas_20181203_models.DescribeCycleTaskListRequest,
    ) -> sas_20181203_models.DescribeCycleTaskListResponse:
        """
        @summary Queries periodic scan tasks. The tasks include image scan tasks, urgent vulnerability scan tasks, and virus scan tasks.
        
        @param request: DescribeCycleTaskListRequest
        @return: DescribeCycleTaskListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_cycle_task_list_with_options_async(request, runtime)

    def describe_data_source_with_options(
        self,
        request: sas_20181203_models.DescribeDataSourceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeDataSourceResponse:
        """
        @summary Queries data sources for DingTalk notifications. You can configure the types of alerts for which you want to use a DingTalk chatbot to send notifications based on the data sources.
        
        @param request: DescribeDataSourceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDataSourceResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_type):
            query['ConfigType'] = request.config_type
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDataSource',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeDataSourceResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_data_source_with_options_async(
        self,
        request: sas_20181203_models.DescribeDataSourceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeDataSourceResponse:
        """
        @summary Queries data sources for DingTalk notifications. You can configure the types of alerts for which you want to use a DingTalk chatbot to send notifications based on the data sources.
        
        @param request: DescribeDataSourceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDataSourceResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_type):
            query['ConfigType'] = request.config_type
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDataSource',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeDataSourceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_data_source(
        self,
        request: sas_20181203_models.DescribeDataSourceRequest,
    ) -> sas_20181203_models.DescribeDataSourceResponse:
        """
        @summary Queries data sources for DingTalk notifications. You can configure the types of alerts for which you want to use a DingTalk chatbot to send notifications based on the data sources.
        
        @param request: DescribeDataSourceRequest
        @return: DescribeDataSourceResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_data_source_with_options(request, runtime)

    async def describe_data_source_async(
        self,
        request: sas_20181203_models.DescribeDataSourceRequest,
    ) -> sas_20181203_models.DescribeDataSourceResponse:
        """
        @summary Queries data sources for DingTalk notifications. You can configure the types of alerts for which you want to use a DingTalk chatbot to send notifications based on the data sources.
        
        @param request: DescribeDataSourceRequest
        @return: DescribeDataSourceResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_data_source_with_options_async(request, runtime)

    def describe_default_key_info_with_options(
        self,
        request: sas_20181203_models.DescribeDefaultKeyInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeDefaultKeyInfoResponse:
        """
        @summary Queries the keywords of a custom dictionary that is generated by using weak passwords.
        
        @param request: DescribeDefaultKeyInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDefaultKeyInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDefaultKeyInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeDefaultKeyInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_default_key_info_with_options_async(
        self,
        request: sas_20181203_models.DescribeDefaultKeyInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeDefaultKeyInfoResponse:
        """
        @summary Queries the keywords of a custom dictionary that is generated by using weak passwords.
        
        @param request: DescribeDefaultKeyInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDefaultKeyInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDefaultKeyInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeDefaultKeyInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_default_key_info(
        self,
        request: sas_20181203_models.DescribeDefaultKeyInfoRequest,
    ) -> sas_20181203_models.DescribeDefaultKeyInfoResponse:
        """
        @summary Queries the keywords of a custom dictionary that is generated by using weak passwords.
        
        @param request: DescribeDefaultKeyInfoRequest
        @return: DescribeDefaultKeyInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_default_key_info_with_options(request, runtime)

    async def describe_default_key_info_async(
        self,
        request: sas_20181203_models.DescribeDefaultKeyInfoRequest,
    ) -> sas_20181203_models.DescribeDefaultKeyInfoResponse:
        """
        @summary Queries the keywords of a custom dictionary that is generated by using weak passwords.
        
        @param request: DescribeDefaultKeyInfoRequest
        @return: DescribeDefaultKeyInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_default_key_info_with_options_async(request, runtime)

    def describe_default_proxy_install_version_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeDefaultProxyInstallVersionResponse:
        """
        @summary Queries the default installation version of the proxy that is used in hybrid-cloud scenarios.
        
        @param request: DescribeDefaultProxyInstallVersionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDefaultProxyInstallVersionResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeDefaultProxyInstallVersion',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeDefaultProxyInstallVersionResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_default_proxy_install_version_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeDefaultProxyInstallVersionResponse:
        """
        @summary Queries the default installation version of the proxy that is used in hybrid-cloud scenarios.
        
        @param request: DescribeDefaultProxyInstallVersionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDefaultProxyInstallVersionResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeDefaultProxyInstallVersion',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeDefaultProxyInstallVersionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_default_proxy_install_version(self) -> sas_20181203_models.DescribeDefaultProxyInstallVersionResponse:
        """
        @summary Queries the default installation version of the proxy that is used in hybrid-cloud scenarios.
        
        @return: DescribeDefaultProxyInstallVersionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_default_proxy_install_version_with_options(runtime)

    async def describe_default_proxy_install_version_async(self) -> sas_20181203_models.DescribeDefaultProxyInstallVersionResponse:
        """
        @summary Queries the default installation version of the proxy that is used in hybrid-cloud scenarios.
        
        @return: DescribeDefaultProxyInstallVersionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_default_proxy_install_version_with_options_async(runtime)

    def describe_ding_talk_with_options(
        self,
        request: sas_20181203_models.DescribeDingTalkRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeDingTalkResponse:
        """
        @summary Obtains DingTalk notifications.
        
        @param request: DescribeDingTalkRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDingTalkResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.rule_action_name):
            query['RuleActionName'] = request.rule_action_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDingTalk',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeDingTalkResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_ding_talk_with_options_async(
        self,
        request: sas_20181203_models.DescribeDingTalkRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeDingTalkResponse:
        """
        @summary Obtains DingTalk notifications.
        
        @param request: DescribeDingTalkRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDingTalkResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.rule_action_name):
            query['RuleActionName'] = request.rule_action_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDingTalk',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeDingTalkResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_ding_talk(
        self,
        request: sas_20181203_models.DescribeDingTalkRequest,
    ) -> sas_20181203_models.DescribeDingTalkResponse:
        """
        @summary Obtains DingTalk notifications.
        
        @param request: DescribeDingTalkRequest
        @return: DescribeDingTalkResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_ding_talk_with_options(request, runtime)

    async def describe_ding_talk_async(
        self,
        request: sas_20181203_models.DescribeDingTalkRequest,
    ) -> sas_20181203_models.DescribeDingTalkResponse:
        """
        @summary Obtains DingTalk notifications.
        
        @param request: DescribeDingTalkRequest
        @return: DescribeDingTalkResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_ding_talk_with_options_async(request, runtime)

    def describe_domain_count_with_options(
        self,
        request: sas_20181203_models.DescribeDomainCountRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeDomainCountResponse:
        """
        @summary Queries the number of domain assets within your Alibaba Cloud account.
        
        @param request: DescribeDomainCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDomainCountResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDomainCount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeDomainCountResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_domain_count_with_options_async(
        self,
        request: sas_20181203_models.DescribeDomainCountRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeDomainCountResponse:
        """
        @summary Queries the number of domain assets within your Alibaba Cloud account.
        
        @param request: DescribeDomainCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDomainCountResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDomainCount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeDomainCountResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_domain_count(
        self,
        request: sas_20181203_models.DescribeDomainCountRequest,
    ) -> sas_20181203_models.DescribeDomainCountResponse:
        """
        @summary Queries the number of domain assets within your Alibaba Cloud account.
        
        @param request: DescribeDomainCountRequest
        @return: DescribeDomainCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_domain_count_with_options(request, runtime)

    async def describe_domain_count_async(
        self,
        request: sas_20181203_models.DescribeDomainCountRequest,
    ) -> sas_20181203_models.DescribeDomainCountResponse:
        """
        @summary Queries the number of domain assets within your Alibaba Cloud account.
        
        @param request: DescribeDomainCountRequest
        @return: DescribeDomainCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_domain_count_with_options_async(request, runtime)

    def describe_domain_detail_with_options(
        self,
        request: sas_20181203_models.DescribeDomainDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeDomainDetailResponse:
        """
        @summary Queries the details of domain assets within your Alibaba Cloud account.
        
        @param request: DescribeDomainDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDomainDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.domain_name):
            query['DomainName'] = request.domain_name
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDomainDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeDomainDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_domain_detail_with_options_async(
        self,
        request: sas_20181203_models.DescribeDomainDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeDomainDetailResponse:
        """
        @summary Queries the details of domain assets within your Alibaba Cloud account.
        
        @param request: DescribeDomainDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDomainDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.domain_name):
            query['DomainName'] = request.domain_name
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDomainDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeDomainDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_domain_detail(
        self,
        request: sas_20181203_models.DescribeDomainDetailRequest,
    ) -> sas_20181203_models.DescribeDomainDetailResponse:
        """
        @summary Queries the details of domain assets within your Alibaba Cloud account.
        
        @param request: DescribeDomainDetailRequest
        @return: DescribeDomainDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_domain_detail_with_options(request, runtime)

    async def describe_domain_detail_async(
        self,
        request: sas_20181203_models.DescribeDomainDetailRequest,
    ) -> sas_20181203_models.DescribeDomainDetailResponse:
        """
        @summary Queries the details of domain assets within your Alibaba Cloud account.
        
        @param request: DescribeDomainDetailRequest
        @return: DescribeDomainDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_domain_detail_with_options_async(request, runtime)

    def describe_domain_list_with_options(
        self,
        request: sas_20181203_models.DescribeDomainListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeDomainListResponse:
        """
        @summary Queries the information about the domain assets within your Alibaba Cloud account.
        
        @param request: DescribeDomainListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDomainListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.domain_type):
            query['DomainType'] = request.domain_type
        if not UtilClient.is_unset(request.fuzzy_domain):
            query['FuzzyDomain'] = request.fuzzy_domain
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDomainList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeDomainListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_domain_list_with_options_async(
        self,
        request: sas_20181203_models.DescribeDomainListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeDomainListResponse:
        """
        @summary Queries the information about the domain assets within your Alibaba Cloud account.
        
        @param request: DescribeDomainListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDomainListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.domain_type):
            query['DomainType'] = request.domain_type
        if not UtilClient.is_unset(request.fuzzy_domain):
            query['FuzzyDomain'] = request.fuzzy_domain
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDomainList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeDomainListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_domain_list(
        self,
        request: sas_20181203_models.DescribeDomainListRequest,
    ) -> sas_20181203_models.DescribeDomainListResponse:
        """
        @summary Queries the information about the domain assets within your Alibaba Cloud account.
        
        @param request: DescribeDomainListRequest
        @return: DescribeDomainListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_domain_list_with_options(request, runtime)

    async def describe_domain_list_async(
        self,
        request: sas_20181203_models.DescribeDomainListRequest,
    ) -> sas_20181203_models.DescribeDomainListResponse:
        """
        @summary Queries the information about the domain assets within your Alibaba Cloud account.
        
        @param request: DescribeDomainListRequest
        @return: DescribeDomainListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_domain_list_with_options_async(request, runtime)

    def describe_domain_secure_alarm_list_with_options(
        self,
        request: sas_20181203_models.DescribeDomainSecureAlarmListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeDomainSecureAlarmListResponse:
        """
        @summary Queries the security alert data of a website security report.
        
        @param request: DescribeDomainSecureAlarmListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDomainSecureAlarmListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDomainSecureAlarmList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeDomainSecureAlarmListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_domain_secure_alarm_list_with_options_async(
        self,
        request: sas_20181203_models.DescribeDomainSecureAlarmListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeDomainSecureAlarmListResponse:
        """
        @summary Queries the security alert data of a website security report.
        
        @param request: DescribeDomainSecureAlarmListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDomainSecureAlarmListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDomainSecureAlarmList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeDomainSecureAlarmListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_domain_secure_alarm_list(
        self,
        request: sas_20181203_models.DescribeDomainSecureAlarmListRequest,
    ) -> sas_20181203_models.DescribeDomainSecureAlarmListResponse:
        """
        @summary Queries the security alert data of a website security report.
        
        @param request: DescribeDomainSecureAlarmListRequest
        @return: DescribeDomainSecureAlarmListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_domain_secure_alarm_list_with_options(request, runtime)

    async def describe_domain_secure_alarm_list_async(
        self,
        request: sas_20181203_models.DescribeDomainSecureAlarmListRequest,
    ) -> sas_20181203_models.DescribeDomainSecureAlarmListResponse:
        """
        @summary Queries the security alert data of a website security report.
        
        @param request: DescribeDomainSecureAlarmListRequest
        @return: DescribeDomainSecureAlarmListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_domain_secure_alarm_list_with_options_async(request, runtime)

    def describe_domain_secure_risk_list_with_options(
        self,
        request: sas_20181203_models.DescribeDomainSecureRiskListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeDomainSecureRiskListResponse:
        """
        @summary Queries a list of risky websites in your website security report and the security information about the websites, including the number of vulnerabilities and the number of alerts.
        
        @param request: DescribeDomainSecureRiskListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDomainSecureRiskListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDomainSecureRiskList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeDomainSecureRiskListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_domain_secure_risk_list_with_options_async(
        self,
        request: sas_20181203_models.DescribeDomainSecureRiskListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeDomainSecureRiskListResponse:
        """
        @summary Queries a list of risky websites in your website security report and the security information about the websites, including the number of vulnerabilities and the number of alerts.
        
        @param request: DescribeDomainSecureRiskListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDomainSecureRiskListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDomainSecureRiskList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeDomainSecureRiskListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_domain_secure_risk_list(
        self,
        request: sas_20181203_models.DescribeDomainSecureRiskListRequest,
    ) -> sas_20181203_models.DescribeDomainSecureRiskListResponse:
        """
        @summary Queries a list of risky websites in your website security report and the security information about the websites, including the number of vulnerabilities and the number of alerts.
        
        @param request: DescribeDomainSecureRiskListRequest
        @return: DescribeDomainSecureRiskListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_domain_secure_risk_list_with_options(request, runtime)

    async def describe_domain_secure_risk_list_async(
        self,
        request: sas_20181203_models.DescribeDomainSecureRiskListRequest,
    ) -> sas_20181203_models.DescribeDomainSecureRiskListResponse:
        """
        @summary Queries a list of risky websites in your website security report and the security information about the websites, including the number of vulnerabilities and the number of alerts.
        
        @param request: DescribeDomainSecureRiskListRequest
        @return: DescribeDomainSecureRiskListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_domain_secure_risk_list_with_options_async(request, runtime)

    def describe_domain_secure_score_with_options(
        self,
        request: sas_20181203_models.DescribeDomainSecureScoreRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeDomainSecureScoreResponse:
        """
        @summary Queries the security score in your website security report. The full score is 100.
        
        @param request: DescribeDomainSecureScoreRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDomainSecureScoreResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDomainSecureScore',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeDomainSecureScoreResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_domain_secure_score_with_options_async(
        self,
        request: sas_20181203_models.DescribeDomainSecureScoreRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeDomainSecureScoreResponse:
        """
        @summary Queries the security score in your website security report. The full score is 100.
        
        @param request: DescribeDomainSecureScoreRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDomainSecureScoreResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDomainSecureScore',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeDomainSecureScoreResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_domain_secure_score(
        self,
        request: sas_20181203_models.DescribeDomainSecureScoreRequest,
    ) -> sas_20181203_models.DescribeDomainSecureScoreResponse:
        """
        @summary Queries the security score in your website security report. The full score is 100.
        
        @param request: DescribeDomainSecureScoreRequest
        @return: DescribeDomainSecureScoreResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_domain_secure_score_with_options(request, runtime)

    async def describe_domain_secure_score_async(
        self,
        request: sas_20181203_models.DescribeDomainSecureScoreRequest,
    ) -> sas_20181203_models.DescribeDomainSecureScoreResponse:
        """
        @summary Queries the security score in your website security report. The full score is 100.
        
        @param request: DescribeDomainSecureScoreRequest
        @return: DescribeDomainSecureScoreResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_domain_secure_score_with_options_async(request, runtime)

    def describe_domain_secure_statistics_with_options(
        self,
        request: sas_20181203_models.DescribeDomainSecureStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeDomainSecureStatisticsResponse:
        """
        @summary Queries the statistics in your website security report, including the number of websites and the number of security events.
        
        @param request: DescribeDomainSecureStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDomainSecureStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDomainSecureStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeDomainSecureStatisticsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_domain_secure_statistics_with_options_async(
        self,
        request: sas_20181203_models.DescribeDomainSecureStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeDomainSecureStatisticsResponse:
        """
        @summary Queries the statistics in your website security report, including the number of websites and the number of security events.
        
        @param request: DescribeDomainSecureStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDomainSecureStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDomainSecureStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeDomainSecureStatisticsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_domain_secure_statistics(
        self,
        request: sas_20181203_models.DescribeDomainSecureStatisticsRequest,
    ) -> sas_20181203_models.DescribeDomainSecureStatisticsResponse:
        """
        @summary Queries the statistics in your website security report, including the number of websites and the number of security events.
        
        @param request: DescribeDomainSecureStatisticsRequest
        @return: DescribeDomainSecureStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_domain_secure_statistics_with_options(request, runtime)

    async def describe_domain_secure_statistics_async(
        self,
        request: sas_20181203_models.DescribeDomainSecureStatisticsRequest,
    ) -> sas_20181203_models.DescribeDomainSecureStatisticsResponse:
        """
        @summary Queries the statistics in your website security report, including the number of websites and the number of security events.
        
        @param request: DescribeDomainSecureStatisticsRequest
        @return: DescribeDomainSecureStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_domain_secure_statistics_with_options_async(request, runtime)

    def describe_domain_secure_suggests_with_options(
        self,
        request: sas_20181203_models.DescribeDomainSecureSuggestsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeDomainSecureSuggestsResponse:
        """
        @summary Query Network Security Report - Security Suggestions
        
        @param request: DescribeDomainSecureSuggestsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDomainSecureSuggestsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDomainSecureSuggests',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeDomainSecureSuggestsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_domain_secure_suggests_with_options_async(
        self,
        request: sas_20181203_models.DescribeDomainSecureSuggestsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeDomainSecureSuggestsResponse:
        """
        @summary Query Network Security Report - Security Suggestions
        
        @param request: DescribeDomainSecureSuggestsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDomainSecureSuggestsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDomainSecureSuggests',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeDomainSecureSuggestsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_domain_secure_suggests(
        self,
        request: sas_20181203_models.DescribeDomainSecureSuggestsRequest,
    ) -> sas_20181203_models.DescribeDomainSecureSuggestsResponse:
        """
        @summary Query Network Security Report - Security Suggestions
        
        @param request: DescribeDomainSecureSuggestsRequest
        @return: DescribeDomainSecureSuggestsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_domain_secure_suggests_with_options(request, runtime)

    async def describe_domain_secure_suggests_async(
        self,
        request: sas_20181203_models.DescribeDomainSecureSuggestsRequest,
    ) -> sas_20181203_models.DescribeDomainSecureSuggestsResponse:
        """
        @summary Query Network Security Report - Security Suggestions
        
        @param request: DescribeDomainSecureSuggestsRequest
        @return: DescribeDomainSecureSuggestsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_domain_secure_suggests_with_options_async(request, runtime)

    def describe_domain_secure_vul_list_with_options(
        self,
        request: sas_20181203_models.DescribeDomainSecureVulListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeDomainSecureVulListResponse:
        """
        @summary Queries a list of vulnerabilities in your website security report.
        
        @param request: DescribeDomainSecureVulListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDomainSecureVulListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDomainSecureVulList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeDomainSecureVulListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_domain_secure_vul_list_with_options_async(
        self,
        request: sas_20181203_models.DescribeDomainSecureVulListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeDomainSecureVulListResponse:
        """
        @summary Queries a list of vulnerabilities in your website security report.
        
        @param request: DescribeDomainSecureVulListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDomainSecureVulListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDomainSecureVulList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeDomainSecureVulListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_domain_secure_vul_list(
        self,
        request: sas_20181203_models.DescribeDomainSecureVulListRequest,
    ) -> sas_20181203_models.DescribeDomainSecureVulListResponse:
        """
        @summary Queries a list of vulnerabilities in your website security report.
        
        @param request: DescribeDomainSecureVulListRequest
        @return: DescribeDomainSecureVulListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_domain_secure_vul_list_with_options(request, runtime)

    async def describe_domain_secure_vul_list_async(
        self,
        request: sas_20181203_models.DescribeDomainSecureVulListRequest,
    ) -> sas_20181203_models.DescribeDomainSecureVulListResponse:
        """
        @summary Queries a list of vulnerabilities in your website security report.
        
        @param request: DescribeDomainSecureVulListRequest
        @return: DescribeDomainSecureVulListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_domain_secure_vul_list_with_options_async(request, runtime)

    def describe_dynamic_dict_with_options(
        self,
        request: sas_20181203_models.DescribeDynamicDictRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeDynamicDictResponse:
        """
        @deprecated OpenAPI DescribeDynamicDict is deprecated, please use Sas::2018-12-03::DescribeCustomizedDict instead.
        
        @summary Queries custom weak password rules for the baseline check feature.
        
        @param request: DescribeDynamicDictRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDynamicDictResponse
        Deprecated
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDynamicDict',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeDynamicDictResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_dynamic_dict_with_options_async(
        self,
        request: sas_20181203_models.DescribeDynamicDictRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeDynamicDictResponse:
        """
        @deprecated OpenAPI DescribeDynamicDict is deprecated, please use Sas::2018-12-03::DescribeCustomizedDict instead.
        
        @summary Queries custom weak password rules for the baseline check feature.
        
        @param request: DescribeDynamicDictRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDynamicDictResponse
        Deprecated
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDynamicDict',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeDynamicDictResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_dynamic_dict(
        self,
        request: sas_20181203_models.DescribeDynamicDictRequest,
    ) -> sas_20181203_models.DescribeDynamicDictResponse:
        """
        @deprecated OpenAPI DescribeDynamicDict is deprecated, please use Sas::2018-12-03::DescribeCustomizedDict instead.
        
        @summary Queries custom weak password rules for the baseline check feature.
        
        @param request: DescribeDynamicDictRequest
        @return: DescribeDynamicDictResponse
        Deprecated
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_dynamic_dict_with_options(request, runtime)

    async def describe_dynamic_dict_async(
        self,
        request: sas_20181203_models.DescribeDynamicDictRequest,
    ) -> sas_20181203_models.DescribeDynamicDictResponse:
        """
        @deprecated OpenAPI DescribeDynamicDict is deprecated, please use Sas::2018-12-03::DescribeCustomizedDict instead.
        
        @summary Queries custom weak password rules for the baseline check feature.
        
        @param request: DescribeDynamicDictRequest
        @return: DescribeDynamicDictResponse
        Deprecated
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_dynamic_dict_with_options_async(request, runtime)

    def describe_dynamic_dict_upload_info_with_options(
        self,
        request: sas_20181203_models.DescribeDynamicDictUploadInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeDynamicDictUploadInfoResponse:
        """
        @deprecated OpenAPI DescribeDynamicDictUploadInfo is deprecated, please use Sas::2018-12-03::DescribeCustomizedDictUploadInfo instead.
        
        @summary Queries the information about an uploaded Object Storage Service (OSS) object that contains custom weak passwords and is used for baseline checks.
        
        @param request: DescribeDynamicDictUploadInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDynamicDictUploadInfoResponse
        Deprecated
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDynamicDictUploadInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeDynamicDictUploadInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_dynamic_dict_upload_info_with_options_async(
        self,
        request: sas_20181203_models.DescribeDynamicDictUploadInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeDynamicDictUploadInfoResponse:
        """
        @deprecated OpenAPI DescribeDynamicDictUploadInfo is deprecated, please use Sas::2018-12-03::DescribeCustomizedDictUploadInfo instead.
        
        @summary Queries the information about an uploaded Object Storage Service (OSS) object that contains custom weak passwords and is used for baseline checks.
        
        @param request: DescribeDynamicDictUploadInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeDynamicDictUploadInfoResponse
        Deprecated
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeDynamicDictUploadInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeDynamicDictUploadInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_dynamic_dict_upload_info(
        self,
        request: sas_20181203_models.DescribeDynamicDictUploadInfoRequest,
    ) -> sas_20181203_models.DescribeDynamicDictUploadInfoResponse:
        """
        @deprecated OpenAPI DescribeDynamicDictUploadInfo is deprecated, please use Sas::2018-12-03::DescribeCustomizedDictUploadInfo instead.
        
        @summary Queries the information about an uploaded Object Storage Service (OSS) object that contains custom weak passwords and is used for baseline checks.
        
        @param request: DescribeDynamicDictUploadInfoRequest
        @return: DescribeDynamicDictUploadInfoResponse
        Deprecated
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_dynamic_dict_upload_info_with_options(request, runtime)

    async def describe_dynamic_dict_upload_info_async(
        self,
        request: sas_20181203_models.DescribeDynamicDictUploadInfoRequest,
    ) -> sas_20181203_models.DescribeDynamicDictUploadInfoResponse:
        """
        @deprecated OpenAPI DescribeDynamicDictUploadInfo is deprecated, please use Sas::2018-12-03::DescribeCustomizedDictUploadInfo instead.
        
        @summary Queries the information about an uploaded Object Storage Service (OSS) object that contains custom weak passwords and is used for baseline checks.
        
        @param request: DescribeDynamicDictUploadInfoRequest
        @return: DescribeDynamicDictUploadInfoResponse
        Deprecated
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_dynamic_dict_upload_info_with_options_async(request, runtime)

    def describe_emg_user_agreement_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeEmgUserAgreementResponse:
        """
        @summary Queries whether Security Center is authorized to scan for urgent vulnerabilities.
        
        @param request: DescribeEmgUserAgreementRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEmgUserAgreementResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeEmgUserAgreement',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeEmgUserAgreementResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_emg_user_agreement_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeEmgUserAgreementResponse:
        """
        @summary Queries whether Security Center is authorized to scan for urgent vulnerabilities.
        
        @param request: DescribeEmgUserAgreementRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEmgUserAgreementResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeEmgUserAgreement',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeEmgUserAgreementResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_emg_user_agreement(self) -> sas_20181203_models.DescribeEmgUserAgreementResponse:
        """
        @summary Queries whether Security Center is authorized to scan for urgent vulnerabilities.
        
        @return: DescribeEmgUserAgreementResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_emg_user_agreement_with_options(runtime)

    async def describe_emg_user_agreement_async(self) -> sas_20181203_models.DescribeEmgUserAgreementResponse:
        """
        @summary Queries whether Security Center is authorized to scan for urgent vulnerabilities.
        
        @return: DescribeEmgUserAgreementResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_emg_user_agreement_with_options_async(runtime)

    def describe_emg_vul_item_with_options(
        self,
        request: sas_20181203_models.DescribeEmgVulItemRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeEmgVulItemResponse:
        """
        @summary Queries the details of urgent vulnerabilities.
        
        @param request: DescribeEmgVulItemRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEmgVulItemResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_type):
            query['CheckType'] = request.check_type
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.risk_status):
            query['RiskStatus'] = request.risk_status
        if not UtilClient.is_unset(request.scan_type):
            query['ScanType'] = request.scan_type
        if not UtilClient.is_unset(request.vul_name):
            query['VulName'] = request.vul_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeEmgVulItem',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeEmgVulItemResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_emg_vul_item_with_options_async(
        self,
        request: sas_20181203_models.DescribeEmgVulItemRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeEmgVulItemResponse:
        """
        @summary Queries the details of urgent vulnerabilities.
        
        @param request: DescribeEmgVulItemRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEmgVulItemResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_type):
            query['CheckType'] = request.check_type
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.risk_status):
            query['RiskStatus'] = request.risk_status
        if not UtilClient.is_unset(request.scan_type):
            query['ScanType'] = request.scan_type
        if not UtilClient.is_unset(request.vul_name):
            query['VulName'] = request.vul_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeEmgVulItem',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeEmgVulItemResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_emg_vul_item(
        self,
        request: sas_20181203_models.DescribeEmgVulItemRequest,
    ) -> sas_20181203_models.DescribeEmgVulItemResponse:
        """
        @summary Queries the details of urgent vulnerabilities.
        
        @param request: DescribeEmgVulItemRequest
        @return: DescribeEmgVulItemResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_emg_vul_item_with_options(request, runtime)

    async def describe_emg_vul_item_async(
        self,
        request: sas_20181203_models.DescribeEmgVulItemRequest,
    ) -> sas_20181203_models.DescribeEmgVulItemResponse:
        """
        @summary Queries the details of urgent vulnerabilities.
        
        @param request: DescribeEmgVulItemRequest
        @return: DescribeEmgVulItemResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_emg_vul_item_with_options_async(request, runtime)

    def describe_event_level_count_with_options(
        self,
        request: sas_20181203_models.DescribeEventLevelCountRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeEventLevelCountResponse:
        """
        @summary Queries the statistics of alert events by risk level.
        
        @param request: DescribeEventLevelCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEventLevelCountResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.container_field_name):
            query['ContainerFieldName'] = request.container_field_name
        if not UtilClient.is_unset(request.container_field_value):
            query['ContainerFieldValue'] = request.container_field_value
        if not UtilClient.is_unset(request.container_ids):
            query['ContainerIds'] = request.container_ids
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.multi_account_action_type):
            query['MultiAccountActionType'] = request.multi_account_action_type
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeEventLevelCount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeEventLevelCountResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_event_level_count_with_options_async(
        self,
        request: sas_20181203_models.DescribeEventLevelCountRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeEventLevelCountResponse:
        """
        @summary Queries the statistics of alert events by risk level.
        
        @param request: DescribeEventLevelCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEventLevelCountResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.container_field_name):
            query['ContainerFieldName'] = request.container_field_name
        if not UtilClient.is_unset(request.container_field_value):
            query['ContainerFieldValue'] = request.container_field_value
        if not UtilClient.is_unset(request.container_ids):
            query['ContainerIds'] = request.container_ids
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.multi_account_action_type):
            query['MultiAccountActionType'] = request.multi_account_action_type
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeEventLevelCount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeEventLevelCountResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_event_level_count(
        self,
        request: sas_20181203_models.DescribeEventLevelCountRequest,
    ) -> sas_20181203_models.DescribeEventLevelCountResponse:
        """
        @summary Queries the statistics of alert events by risk level.
        
        @param request: DescribeEventLevelCountRequest
        @return: DescribeEventLevelCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_event_level_count_with_options(request, runtime)

    async def describe_event_level_count_async(
        self,
        request: sas_20181203_models.DescribeEventLevelCountRequest,
    ) -> sas_20181203_models.DescribeEventLevelCountResponse:
        """
        @summary Queries the statistics of alert events by risk level.
        
        @param request: DescribeEventLevelCountRequest
        @return: DescribeEventLevelCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_event_level_count_with_options_async(request, runtime)

    def describe_event_on_stage_with_options(
        self,
        request: sas_20181203_models.DescribeEventOnStageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeEventOnStageResponse:
        """
        @summary Queries the platforms that are supported by the feature of container threat detection.
        
        @param request: DescribeEventOnStageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEventOnStageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeEventOnStage',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeEventOnStageResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_event_on_stage_with_options_async(
        self,
        request: sas_20181203_models.DescribeEventOnStageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeEventOnStageResponse:
        """
        @summary Queries the platforms that are supported by the feature of container threat detection.
        
        @param request: DescribeEventOnStageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeEventOnStageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeEventOnStage',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeEventOnStageResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_event_on_stage(
        self,
        request: sas_20181203_models.DescribeEventOnStageRequest,
    ) -> sas_20181203_models.DescribeEventOnStageResponse:
        """
        @summary Queries the platforms that are supported by the feature of container threat detection.
        
        @param request: DescribeEventOnStageRequest
        @return: DescribeEventOnStageResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_event_on_stage_with_options(request, runtime)

    async def describe_event_on_stage_async(
        self,
        request: sas_20181203_models.DescribeEventOnStageRequest,
    ) -> sas_20181203_models.DescribeEventOnStageResponse:
        """
        @summary Queries the platforms that are supported by the feature of container threat detection.
        
        @param request: DescribeEventOnStageRequest
        @return: DescribeEventOnStageResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_event_on_stage_with_options_async(request, runtime)

    def describe_exclude_system_path_with_options(
        self,
        request: sas_20181203_models.DescribeExcludeSystemPathRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeExcludeSystemPathResponse:
        """
        @summary Queries the directories that are excluded from anti-ransomware.
        
        @param request: DescribeExcludeSystemPathRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeExcludeSystemPathResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeExcludeSystemPath',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeExcludeSystemPathResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_exclude_system_path_with_options_async(
        self,
        request: sas_20181203_models.DescribeExcludeSystemPathRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeExcludeSystemPathResponse:
        """
        @summary Queries the directories that are excluded from anti-ransomware.
        
        @param request: DescribeExcludeSystemPathRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeExcludeSystemPathResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeExcludeSystemPath',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeExcludeSystemPathResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_exclude_system_path(
        self,
        request: sas_20181203_models.DescribeExcludeSystemPathRequest,
    ) -> sas_20181203_models.DescribeExcludeSystemPathResponse:
        """
        @summary Queries the directories that are excluded from anti-ransomware.
        
        @param request: DescribeExcludeSystemPathRequest
        @return: DescribeExcludeSystemPathResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_exclude_system_path_with_options(request, runtime)

    async def describe_exclude_system_path_async(
        self,
        request: sas_20181203_models.DescribeExcludeSystemPathRequest,
    ) -> sas_20181203_models.DescribeExcludeSystemPathResponse:
        """
        @summary Queries the directories that are excluded from anti-ransomware.
        
        @param request: DescribeExcludeSystemPathRequest
        @return: DescribeExcludeSystemPathResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_exclude_system_path_with_options_async(request, runtime)

    def describe_export_info_with_options(
        self,
        request: sas_20181203_models.DescribeExportInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeExportInfoResponse:
        """
        @summary Queries the progress of a task that exports your assets to an Excel file.
        
        @param request: DescribeExportInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeExportInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.export_id):
            query['ExportId'] = request.export_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeExportInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeExportInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_export_info_with_options_async(
        self,
        request: sas_20181203_models.DescribeExportInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeExportInfoResponse:
        """
        @summary Queries the progress of a task that exports your assets to an Excel file.
        
        @param request: DescribeExportInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeExportInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.export_id):
            query['ExportId'] = request.export_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeExportInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeExportInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_export_info(
        self,
        request: sas_20181203_models.DescribeExportInfoRequest,
    ) -> sas_20181203_models.DescribeExportInfoResponse:
        """
        @summary Queries the progress of a task that exports your assets to an Excel file.
        
        @param request: DescribeExportInfoRequest
        @return: DescribeExportInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_export_info_with_options(request, runtime)

    async def describe_export_info_async(
        self,
        request: sas_20181203_models.DescribeExportInfoRequest,
    ) -> sas_20181203_models.DescribeExportInfoResponse:
        """
        @summary Queries the progress of a task that exports your assets to an Excel file.
        
        @param request: DescribeExportInfoRequest
        @return: DescribeExportInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_export_info_with_options_async(request, runtime)

    def describe_exposed_check_warning_with_options(
        self,
        request: sas_20181203_models.DescribeExposedCheckWarningRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeExposedCheckWarningResponse:
        """
        @summary Queries the weak password-related risks of a specified server that is exposed on the Internet.
        
        @param request: DescribeExposedCheckWarningRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeExposedCheckWarningResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.type_name):
            query['TypeName'] = request.type_name
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeExposedCheckWarning',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeExposedCheckWarningResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_exposed_check_warning_with_options_async(
        self,
        request: sas_20181203_models.DescribeExposedCheckWarningRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeExposedCheckWarningResponse:
        """
        @summary Queries the weak password-related risks of a specified server that is exposed on the Internet.
        
        @param request: DescribeExposedCheckWarningRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeExposedCheckWarningResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.type_name):
            query['TypeName'] = request.type_name
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeExposedCheckWarning',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeExposedCheckWarningResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_exposed_check_warning(
        self,
        request: sas_20181203_models.DescribeExposedCheckWarningRequest,
    ) -> sas_20181203_models.DescribeExposedCheckWarningResponse:
        """
        @summary Queries the weak password-related risks of a specified server that is exposed on the Internet.
        
        @param request: DescribeExposedCheckWarningRequest
        @return: DescribeExposedCheckWarningResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_exposed_check_warning_with_options(request, runtime)

    async def describe_exposed_check_warning_async(
        self,
        request: sas_20181203_models.DescribeExposedCheckWarningRequest,
    ) -> sas_20181203_models.DescribeExposedCheckWarningResponse:
        """
        @summary Queries the weak password-related risks of a specified server that is exposed on the Internet.
        
        @param request: DescribeExposedCheckWarningRequest
        @return: DescribeExposedCheckWarningResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_exposed_check_warning_with_options_async(request, runtime)

    def describe_exposed_instance_criteria_with_options(
        self,
        request: sas_20181203_models.DescribeExposedInstanceCriteriaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeExposedInstanceCriteriaResponse:
        """
        @summary Queries the search conditions that are used to search for exposed assets.
        
        @param request: DescribeExposedInstanceCriteriaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeExposedInstanceCriteriaResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.value):
            query['Value'] = request.value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeExposedInstanceCriteria',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeExposedInstanceCriteriaResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_exposed_instance_criteria_with_options_async(
        self,
        request: sas_20181203_models.DescribeExposedInstanceCriteriaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeExposedInstanceCriteriaResponse:
        """
        @summary Queries the search conditions that are used to search for exposed assets.
        
        @param request: DescribeExposedInstanceCriteriaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeExposedInstanceCriteriaResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.value):
            query['Value'] = request.value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeExposedInstanceCriteria',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeExposedInstanceCriteriaResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_exposed_instance_criteria(
        self,
        request: sas_20181203_models.DescribeExposedInstanceCriteriaRequest,
    ) -> sas_20181203_models.DescribeExposedInstanceCriteriaResponse:
        """
        @summary Queries the search conditions that are used to search for exposed assets.
        
        @param request: DescribeExposedInstanceCriteriaRequest
        @return: DescribeExposedInstanceCriteriaResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_exposed_instance_criteria_with_options(request, runtime)

    async def describe_exposed_instance_criteria_async(
        self,
        request: sas_20181203_models.DescribeExposedInstanceCriteriaRequest,
    ) -> sas_20181203_models.DescribeExposedInstanceCriteriaResponse:
        """
        @summary Queries the search conditions that are used to search for exposed assets.
        
        @param request: DescribeExposedInstanceCriteriaRequest
        @return: DescribeExposedInstanceCriteriaResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_exposed_instance_criteria_with_options_async(request, runtime)

    def describe_exposed_instance_detail_with_options(
        self,
        request: sas_20181203_models.DescribeExposedInstanceDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeExposedInstanceDetailResponse:
        """
        @summary Queries the details of a specified server that is exposed on the Internet.
        
        @param request: DescribeExposedInstanceDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeExposedInstanceDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeExposedInstanceDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeExposedInstanceDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_exposed_instance_detail_with_options_async(
        self,
        request: sas_20181203_models.DescribeExposedInstanceDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeExposedInstanceDetailResponse:
        """
        @summary Queries the details of a specified server that is exposed on the Internet.
        
        @param request: DescribeExposedInstanceDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeExposedInstanceDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeExposedInstanceDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeExposedInstanceDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_exposed_instance_detail(
        self,
        request: sas_20181203_models.DescribeExposedInstanceDetailRequest,
    ) -> sas_20181203_models.DescribeExposedInstanceDetailResponse:
        """
        @summary Queries the details of a specified server that is exposed on the Internet.
        
        @param request: DescribeExposedInstanceDetailRequest
        @return: DescribeExposedInstanceDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_exposed_instance_detail_with_options(request, runtime)

    async def describe_exposed_instance_detail_async(
        self,
        request: sas_20181203_models.DescribeExposedInstanceDetailRequest,
    ) -> sas_20181203_models.DescribeExposedInstanceDetailResponse:
        """
        @summary Queries the details of a specified server that is exposed on the Internet.
        
        @param request: DescribeExposedInstanceDetailRequest
        @return: DescribeExposedInstanceDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_exposed_instance_detail_with_options_async(request, runtime)

    def describe_exposed_instance_list_with_options(
        self,
        request: sas_20181203_models.DescribeExposedInstanceListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeExposedInstanceListResponse:
        """
        @summary Queries the information about the assets that are exposed on the Internet.
        
        @param request: DescribeExposedInstanceListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeExposedInstanceListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.asset_type):
            query['AssetType'] = request.asset_type
        if not UtilClient.is_unset(request.cspm_status):
            query['CspmStatus'] = request.cspm_status
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.exposure_component):
            query['ExposureComponent'] = request.exposure_component
        if not UtilClient.is_unset(request.exposure_component_biz_type):
            query['ExposureComponentBizType'] = request.exposure_component_biz_type
        if not UtilClient.is_unset(request.exposure_ip):
            query['ExposureIp'] = request.exposure_ip
        if not UtilClient.is_unset(request.exposure_port):
            query['ExposurePort'] = request.exposure_port
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.health_status):
            query['HealthStatus'] = request.health_status
        if not UtilClient.is_unset(request.instance_id):
            query['InstanceId'] = request.instance_id
        if not UtilClient.is_unset(request.instance_name):
            query['InstanceName'] = request.instance_name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.vul_status):
            query['VulStatus'] = request.vul_status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeExposedInstanceList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeExposedInstanceListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_exposed_instance_list_with_options_async(
        self,
        request: sas_20181203_models.DescribeExposedInstanceListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeExposedInstanceListResponse:
        """
        @summary Queries the information about the assets that are exposed on the Internet.
        
        @param request: DescribeExposedInstanceListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeExposedInstanceListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.asset_type):
            query['AssetType'] = request.asset_type
        if not UtilClient.is_unset(request.cspm_status):
            query['CspmStatus'] = request.cspm_status
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.exposure_component):
            query['ExposureComponent'] = request.exposure_component
        if not UtilClient.is_unset(request.exposure_component_biz_type):
            query['ExposureComponentBizType'] = request.exposure_component_biz_type
        if not UtilClient.is_unset(request.exposure_ip):
            query['ExposureIp'] = request.exposure_ip
        if not UtilClient.is_unset(request.exposure_port):
            query['ExposurePort'] = request.exposure_port
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.health_status):
            query['HealthStatus'] = request.health_status
        if not UtilClient.is_unset(request.instance_id):
            query['InstanceId'] = request.instance_id
        if not UtilClient.is_unset(request.instance_name):
            query['InstanceName'] = request.instance_name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.vul_status):
            query['VulStatus'] = request.vul_status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeExposedInstanceList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeExposedInstanceListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_exposed_instance_list(
        self,
        request: sas_20181203_models.DescribeExposedInstanceListRequest,
    ) -> sas_20181203_models.DescribeExposedInstanceListResponse:
        """
        @summary Queries the information about the assets that are exposed on the Internet.
        
        @param request: DescribeExposedInstanceListRequest
        @return: DescribeExposedInstanceListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_exposed_instance_list_with_options(request, runtime)

    async def describe_exposed_instance_list_async(
        self,
        request: sas_20181203_models.DescribeExposedInstanceListRequest,
    ) -> sas_20181203_models.DescribeExposedInstanceListResponse:
        """
        @summary Queries the information about the assets that are exposed on the Internet.
        
        @param request: DescribeExposedInstanceListRequest
        @return: DescribeExposedInstanceListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_exposed_instance_list_with_options_async(request, runtime)

    def describe_exposed_statistics_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeExposedStatisticsResponse:
        """
        @summary Queries the exposure statistics of the assets on the Internet.
        
        @param request: DescribeExposedStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeExposedStatisticsResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeExposedStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeExposedStatisticsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_exposed_statistics_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeExposedStatisticsResponse:
        """
        @summary Queries the exposure statistics of the assets on the Internet.
        
        @param request: DescribeExposedStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeExposedStatisticsResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeExposedStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeExposedStatisticsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_exposed_statistics(self) -> sas_20181203_models.DescribeExposedStatisticsResponse:
        """
        @summary Queries the exposure statistics of the assets on the Internet.
        
        @return: DescribeExposedStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_exposed_statistics_with_options(runtime)

    async def describe_exposed_statistics_async(self) -> sas_20181203_models.DescribeExposedStatisticsResponse:
        """
        @summary Queries the exposure statistics of the assets on the Internet.
        
        @return: DescribeExposedStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_exposed_statistics_with_options_async(runtime)

    def describe_exposed_statistics_detail_with_options(
        self,
        request: sas_20181203_models.DescribeExposedStatisticsDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeExposedStatisticsDetailResponse:
        """
        @summary Queries the gateway assets, ports, system components, or public IP addresses that are exposed on the Internet.
        
        @param request: DescribeExposedStatisticsDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeExposedStatisticsDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.statistics_type):
            query['StatisticsType'] = request.statistics_type
        if not UtilClient.is_unset(request.statistics_type_gateway_type):
            query['StatisticsTypeGatewayType'] = request.statistics_type_gateway_type
        if not UtilClient.is_unset(request.statistics_type_instance_value):
            query['StatisticsTypeInstanceValue'] = request.statistics_type_instance_value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeExposedStatisticsDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeExposedStatisticsDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_exposed_statistics_detail_with_options_async(
        self,
        request: sas_20181203_models.DescribeExposedStatisticsDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeExposedStatisticsDetailResponse:
        """
        @summary Queries the gateway assets, ports, system components, or public IP addresses that are exposed on the Internet.
        
        @param request: DescribeExposedStatisticsDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeExposedStatisticsDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.statistics_type):
            query['StatisticsType'] = request.statistics_type
        if not UtilClient.is_unset(request.statistics_type_gateway_type):
            query['StatisticsTypeGatewayType'] = request.statistics_type_gateway_type
        if not UtilClient.is_unset(request.statistics_type_instance_value):
            query['StatisticsTypeInstanceValue'] = request.statistics_type_instance_value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeExposedStatisticsDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeExposedStatisticsDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_exposed_statistics_detail(
        self,
        request: sas_20181203_models.DescribeExposedStatisticsDetailRequest,
    ) -> sas_20181203_models.DescribeExposedStatisticsDetailResponse:
        """
        @summary Queries the gateway assets, ports, system components, or public IP addresses that are exposed on the Internet.
        
        @param request: DescribeExposedStatisticsDetailRequest
        @return: DescribeExposedStatisticsDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_exposed_statistics_detail_with_options(request, runtime)

    async def describe_exposed_statistics_detail_async(
        self,
        request: sas_20181203_models.DescribeExposedStatisticsDetailRequest,
    ) -> sas_20181203_models.DescribeExposedStatisticsDetailResponse:
        """
        @summary Queries the gateway assets, ports, system components, or public IP addresses that are exposed on the Internet.
        
        @param request: DescribeExposedStatisticsDetailRequest
        @return: DescribeExposedStatisticsDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_exposed_statistics_detail_with_options_async(request, runtime)

    def describe_field_statistics_with_options(
        self,
        request: sas_20181203_models.DescribeFieldStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeFieldStatisticsResponse:
        """
        @summary Queries the statistics of servers.
        
        @param request: DescribeFieldStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeFieldStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.machine_types):
            query['MachineTypes'] = request.machine_types
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeFieldStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeFieldStatisticsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_field_statistics_with_options_async(
        self,
        request: sas_20181203_models.DescribeFieldStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeFieldStatisticsResponse:
        """
        @summary Queries the statistics of servers.
        
        @param request: DescribeFieldStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeFieldStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.machine_types):
            query['MachineTypes'] = request.machine_types
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeFieldStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeFieldStatisticsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_field_statistics(
        self,
        request: sas_20181203_models.DescribeFieldStatisticsRequest,
    ) -> sas_20181203_models.DescribeFieldStatisticsResponse:
        """
        @summary Queries the statistics of servers.
        
        @param request: DescribeFieldStatisticsRequest
        @return: DescribeFieldStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_field_statistics_with_options(request, runtime)

    async def describe_field_statistics_async(
        self,
        request: sas_20181203_models.DescribeFieldStatisticsRequest,
    ) -> sas_20181203_models.DescribeFieldStatisticsResponse:
        """
        @summary Queries the statistics of servers.
        
        @param request: DescribeFieldStatisticsRequest
        @return: DescribeFieldStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_field_statistics_with_options_async(request, runtime)

    def describe_fix_used_count_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeFixUsedCountResponse:
        """
        @summary Queries the number of vulnerabilities that are fixed by the pay-as-you-go vulnerability fixing feature.
        
        @param request: DescribeFixUsedCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeFixUsedCountResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeFixUsedCount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeFixUsedCountResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_fix_used_count_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeFixUsedCountResponse:
        """
        @summary Queries the number of vulnerabilities that are fixed by the pay-as-you-go vulnerability fixing feature.
        
        @param request: DescribeFixUsedCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeFixUsedCountResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeFixUsedCount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeFixUsedCountResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_fix_used_count(self) -> sas_20181203_models.DescribeFixUsedCountResponse:
        """
        @summary Queries the number of vulnerabilities that are fixed by the pay-as-you-go vulnerability fixing feature.
        
        @return: DescribeFixUsedCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_fix_used_count_with_options(runtime)

    async def describe_fix_used_count_async(self) -> sas_20181203_models.DescribeFixUsedCountResponse:
        """
        @summary Queries the number of vulnerabilities that are fixed by the pay-as-you-go vulnerability fixing feature.
        
        @return: DescribeFixUsedCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_fix_used_count_with_options_async(runtime)

    def describe_front_vul_patch_list_with_options(
        self,
        request: sas_20181203_models.DescribeFrontVulPatchListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeFrontVulPatchListResponse:
        """
        @summary Queries the pre-patches that are required to fix a specified Windows system vulnerability.
        
        @param request: DescribeFrontVulPatchListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeFrontVulPatchListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.info):
            query['Info'] = request.info
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.operate_type):
            query['OperateType'] = request.operate_type
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeFrontVulPatchList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeFrontVulPatchListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_front_vul_patch_list_with_options_async(
        self,
        request: sas_20181203_models.DescribeFrontVulPatchListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeFrontVulPatchListResponse:
        """
        @summary Queries the pre-patches that are required to fix a specified Windows system vulnerability.
        
        @param request: DescribeFrontVulPatchListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeFrontVulPatchListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.info):
            query['Info'] = request.info
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.operate_type):
            query['OperateType'] = request.operate_type
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeFrontVulPatchList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeFrontVulPatchListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_front_vul_patch_list(
        self,
        request: sas_20181203_models.DescribeFrontVulPatchListRequest,
    ) -> sas_20181203_models.DescribeFrontVulPatchListResponse:
        """
        @summary Queries the pre-patches that are required to fix a specified Windows system vulnerability.
        
        @param request: DescribeFrontVulPatchListRequest
        @return: DescribeFrontVulPatchListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_front_vul_patch_list_with_options(request, runtime)

    async def describe_front_vul_patch_list_async(
        self,
        request: sas_20181203_models.DescribeFrontVulPatchListRequest,
    ) -> sas_20181203_models.DescribeFrontVulPatchListResponse:
        """
        @summary Queries the pre-patches that are required to fix a specified Windows system vulnerability.
        
        @param request: DescribeFrontVulPatchListRequest
        @return: DescribeFrontVulPatchListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_front_vul_patch_list_with_options_async(request, runtime)

    def describe_graph_4investigation_online_with_options(
        self,
        request: sas_20181203_models.DescribeGraph4InvestigationOnlineRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeGraph4InvestigationOnlineResponse:
        """
        @summary Alert Event Investigation
        
        @param request: DescribeGraph4InvestigationOnlineRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeGraph4InvestigationOnlineResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.anomaly_id):
            query['AnomalyId'] = request.anomaly_id
        if not UtilClient.is_unset(request.anomaly_uuid):
            query['AnomalyUuid'] = request.anomaly_uuid
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        if not UtilClient.is_unset(request.vertex_id):
            query['VertexId'] = request.vertex_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeGraph4InvestigationOnline',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeGraph4InvestigationOnlineResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_graph_4investigation_online_with_options_async(
        self,
        request: sas_20181203_models.DescribeGraph4InvestigationOnlineRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeGraph4InvestigationOnlineResponse:
        """
        @summary Alert Event Investigation
        
        @param request: DescribeGraph4InvestigationOnlineRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeGraph4InvestigationOnlineResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.anomaly_id):
            query['AnomalyId'] = request.anomaly_id
        if not UtilClient.is_unset(request.anomaly_uuid):
            query['AnomalyUuid'] = request.anomaly_uuid
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        if not UtilClient.is_unset(request.vertex_id):
            query['VertexId'] = request.vertex_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeGraph4InvestigationOnline',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeGraph4InvestigationOnlineResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_graph_4investigation_online(
        self,
        request: sas_20181203_models.DescribeGraph4InvestigationOnlineRequest,
    ) -> sas_20181203_models.DescribeGraph4InvestigationOnlineResponse:
        """
        @summary Alert Event Investigation
        
        @param request: DescribeGraph4InvestigationOnlineRequest
        @return: DescribeGraph4InvestigationOnlineResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_graph_4investigation_online_with_options(request, runtime)

    async def describe_graph_4investigation_online_async(
        self,
        request: sas_20181203_models.DescribeGraph4InvestigationOnlineRequest,
    ) -> sas_20181203_models.DescribeGraph4InvestigationOnlineResponse:
        """
        @summary Alert Event Investigation
        
        @param request: DescribeGraph4InvestigationOnlineRequest
        @return: DescribeGraph4InvestigationOnlineResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_graph_4investigation_online_with_options_async(request, runtime)

    def describe_group_struct_with_options(
        self,
        request: sas_20181203_models.DescribeGroupStructRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeGroupStructResponse:
        """
        @summary Queries the structure of a group.
        
        @param request: DescribeGroupStructRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeGroupStructResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeGroupStruct',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeGroupStructResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_group_struct_with_options_async(
        self,
        request: sas_20181203_models.DescribeGroupStructRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeGroupStructResponse:
        """
        @summary Queries the structure of a group.
        
        @param request: DescribeGroupStructRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeGroupStructResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeGroupStruct',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeGroupStructResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_group_struct(
        self,
        request: sas_20181203_models.DescribeGroupStructRequest,
    ) -> sas_20181203_models.DescribeGroupStructResponse:
        """
        @summary Queries the structure of a group.
        
        @param request: DescribeGroupStructRequest
        @return: DescribeGroupStructResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_group_struct_with_options(request, runtime)

    async def describe_group_struct_async(
        self,
        request: sas_20181203_models.DescribeGroupStructRequest,
    ) -> sas_20181203_models.DescribeGroupStructResponse:
        """
        @summary Queries the structure of a group.
        
        @param request: DescribeGroupStructRequest
        @return: DescribeGroupStructResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_group_struct_with_options_async(request, runtime)

    def describe_grouped_container_instances_with_options(
        self,
        request: sas_20181203_models.DescribeGroupedContainerInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeGroupedContainerInstancesResponse:
        """
        @summary Queries containers by group type.
        
        @param request: DescribeGroupedContainerInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeGroupedContainerInstancesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.criteria):
            query['Criteria'] = request.criteria
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.field_value):
            query['FieldValue'] = request.field_value
        if not UtilClient.is_unset(request.group_field):
            query['GroupField'] = request.group_field
        if not UtilClient.is_unset(request.logical_exp):
            query['LogicalExp'] = request.logical_exp
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeGroupedContainerInstances',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeGroupedContainerInstancesResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_grouped_container_instances_with_options_async(
        self,
        request: sas_20181203_models.DescribeGroupedContainerInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeGroupedContainerInstancesResponse:
        """
        @summary Queries containers by group type.
        
        @param request: DescribeGroupedContainerInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeGroupedContainerInstancesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.criteria):
            query['Criteria'] = request.criteria
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.field_value):
            query['FieldValue'] = request.field_value
        if not UtilClient.is_unset(request.group_field):
            query['GroupField'] = request.group_field
        if not UtilClient.is_unset(request.logical_exp):
            query['LogicalExp'] = request.logical_exp
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeGroupedContainerInstances',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeGroupedContainerInstancesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_grouped_container_instances(
        self,
        request: sas_20181203_models.DescribeGroupedContainerInstancesRequest,
    ) -> sas_20181203_models.DescribeGroupedContainerInstancesResponse:
        """
        @summary Queries containers by group type.
        
        @param request: DescribeGroupedContainerInstancesRequest
        @return: DescribeGroupedContainerInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_grouped_container_instances_with_options(request, runtime)

    async def describe_grouped_container_instances_async(
        self,
        request: sas_20181203_models.DescribeGroupedContainerInstancesRequest,
    ) -> sas_20181203_models.DescribeGroupedContainerInstancesResponse:
        """
        @summary Queries containers by group type.
        
        @param request: DescribeGroupedContainerInstancesRequest
        @return: DescribeGroupedContainerInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_grouped_container_instances_with_options_async(request, runtime)

    def describe_grouped_instances_with_options(
        self,
        request: sas_20181203_models.DescribeGroupedInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeGroupedInstancesResponse:
        """
        @summary Queries the statistical information about assets based on a specified filter condition.
        
        @param request: DescribeGroupedInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeGroupedInstancesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.field_value):
            query['FieldValue'] = request.field_value
        if not UtilClient.is_unset(request.group_field):
            query['GroupField'] = request.group_field
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.machine_types):
            query['MachineTypes'] = request.machine_types
        if not UtilClient.is_unset(request.no_page):
            query['NoPage'] = request.no_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.sale_version_check_code):
            query['SaleVersionCheckCode'] = request.sale_version_check_code
        if not UtilClient.is_unset(request.vendor):
            query['Vendor'] = request.vendor
        if not UtilClient.is_unset(request.vendors):
            query['Vendors'] = request.vendors
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeGroupedInstances',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeGroupedInstancesResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_grouped_instances_with_options_async(
        self,
        request: sas_20181203_models.DescribeGroupedInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeGroupedInstancesResponse:
        """
        @summary Queries the statistical information about assets based on a specified filter condition.
        
        @param request: DescribeGroupedInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeGroupedInstancesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.field_value):
            query['FieldValue'] = request.field_value
        if not UtilClient.is_unset(request.group_field):
            query['GroupField'] = request.group_field
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.machine_types):
            query['MachineTypes'] = request.machine_types
        if not UtilClient.is_unset(request.no_page):
            query['NoPage'] = request.no_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.sale_version_check_code):
            query['SaleVersionCheckCode'] = request.sale_version_check_code
        if not UtilClient.is_unset(request.vendor):
            query['Vendor'] = request.vendor
        if not UtilClient.is_unset(request.vendors):
            query['Vendors'] = request.vendors
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeGroupedInstances',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeGroupedInstancesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_grouped_instances(
        self,
        request: sas_20181203_models.DescribeGroupedInstancesRequest,
    ) -> sas_20181203_models.DescribeGroupedInstancesResponse:
        """
        @summary Queries the statistical information about assets based on a specified filter condition.
        
        @param request: DescribeGroupedInstancesRequest
        @return: DescribeGroupedInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_grouped_instances_with_options(request, runtime)

    async def describe_grouped_instances_async(
        self,
        request: sas_20181203_models.DescribeGroupedInstancesRequest,
    ) -> sas_20181203_models.DescribeGroupedInstancesResponse:
        """
        @summary Queries the statistical information about assets based on a specified filter condition.
        
        @param request: DescribeGroupedInstancesRequest
        @return: DescribeGroupedInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_grouped_instances_with_options_async(request, runtime)

    def describe_grouped_malicious_files_with_options(
        self,
        request: sas_20181203_models.DescribeGroupedMaliciousFilesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeGroupedMaliciousFilesResponse:
        """
        @summary Queries a list of malicious image samples.
        
        @param request: DescribeGroupedMaliciousFilesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeGroupedMaliciousFilesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.fuzzy_malicious_name):
            query['FuzzyMaliciousName'] = request.fuzzy_malicious_name
        if not UtilClient.is_unset(request.image_digest):
            query['ImageDigest'] = request.image_digest
        if not UtilClient.is_unset(request.image_layer):
            query['ImageLayer'] = request.image_layer
        if not UtilClient.is_unset(request.image_tag):
            query['ImageTag'] = request.image_tag
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.levels):
            query['Levels'] = request.levels
        if not UtilClient.is_unset(request.malicious_md_5):
            query['MaliciousMd5'] = request.malicious_md_5
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.repo_id):
            query['RepoId'] = request.repo_id
        if not UtilClient.is_unset(request.repo_instance_id):
            query['RepoInstanceId'] = request.repo_instance_id
        if not UtilClient.is_unset(request.repo_name):
            query['RepoName'] = request.repo_name
        if not UtilClient.is_unset(request.repo_namespace):
            query['RepoNamespace'] = request.repo_namespace
        if not UtilClient.is_unset(request.repo_region_id):
            query['RepoRegionId'] = request.repo_region_id
        if not UtilClient.is_unset(request.scan_range):
            query['ScanRange'] = request.scan_range
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeGroupedMaliciousFiles',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeGroupedMaliciousFilesResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_grouped_malicious_files_with_options_async(
        self,
        request: sas_20181203_models.DescribeGroupedMaliciousFilesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeGroupedMaliciousFilesResponse:
        """
        @summary Queries a list of malicious image samples.
        
        @param request: DescribeGroupedMaliciousFilesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeGroupedMaliciousFilesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.fuzzy_malicious_name):
            query['FuzzyMaliciousName'] = request.fuzzy_malicious_name
        if not UtilClient.is_unset(request.image_digest):
            query['ImageDigest'] = request.image_digest
        if not UtilClient.is_unset(request.image_layer):
            query['ImageLayer'] = request.image_layer
        if not UtilClient.is_unset(request.image_tag):
            query['ImageTag'] = request.image_tag
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.levels):
            query['Levels'] = request.levels
        if not UtilClient.is_unset(request.malicious_md_5):
            query['MaliciousMd5'] = request.malicious_md_5
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.repo_id):
            query['RepoId'] = request.repo_id
        if not UtilClient.is_unset(request.repo_instance_id):
            query['RepoInstanceId'] = request.repo_instance_id
        if not UtilClient.is_unset(request.repo_name):
            query['RepoName'] = request.repo_name
        if not UtilClient.is_unset(request.repo_namespace):
            query['RepoNamespace'] = request.repo_namespace
        if not UtilClient.is_unset(request.repo_region_id):
            query['RepoRegionId'] = request.repo_region_id
        if not UtilClient.is_unset(request.scan_range):
            query['ScanRange'] = request.scan_range
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeGroupedMaliciousFiles',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeGroupedMaliciousFilesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_grouped_malicious_files(
        self,
        request: sas_20181203_models.DescribeGroupedMaliciousFilesRequest,
    ) -> sas_20181203_models.DescribeGroupedMaliciousFilesResponse:
        """
        @summary Queries a list of malicious image samples.
        
        @param request: DescribeGroupedMaliciousFilesRequest
        @return: DescribeGroupedMaliciousFilesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_grouped_malicious_files_with_options(request, runtime)

    async def describe_grouped_malicious_files_async(
        self,
        request: sas_20181203_models.DescribeGroupedMaliciousFilesRequest,
    ) -> sas_20181203_models.DescribeGroupedMaliciousFilesResponse:
        """
        @summary Queries a list of malicious image samples.
        
        @param request: DescribeGroupedMaliciousFilesRequest
        @return: DescribeGroupedMaliciousFilesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_grouped_malicious_files_with_options_async(request, runtime)

    def describe_grouped_tags_with_options(
        self,
        request: sas_20181203_models.DescribeGroupedTagsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeGroupedTagsResponse:
        """
        @summary Queries the statistics of asset tags.
        
        @param request: DescribeGroupedTagsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeGroupedTagsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.machine_types):
            query['MachineTypes'] = request.machine_types
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeGroupedTags',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeGroupedTagsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_grouped_tags_with_options_async(
        self,
        request: sas_20181203_models.DescribeGroupedTagsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeGroupedTagsResponse:
        """
        @summary Queries the statistics of asset tags.
        
        @param request: DescribeGroupedTagsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeGroupedTagsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.machine_types):
            query['MachineTypes'] = request.machine_types
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeGroupedTags',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeGroupedTagsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_grouped_tags(
        self,
        request: sas_20181203_models.DescribeGroupedTagsRequest,
    ) -> sas_20181203_models.DescribeGroupedTagsResponse:
        """
        @summary Queries the statistics of asset tags.
        
        @param request: DescribeGroupedTagsRequest
        @return: DescribeGroupedTagsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_grouped_tags_with_options(request, runtime)

    async def describe_grouped_tags_async(
        self,
        request: sas_20181203_models.DescribeGroupedTagsRequest,
    ) -> sas_20181203_models.DescribeGroupedTagsResponse:
        """
        @summary Queries the statistics of asset tags.
        
        @param request: DescribeGroupedTagsRequest
        @return: DescribeGroupedTagsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_grouped_tags_with_options_async(request, runtime)

    def describe_grouped_vul_with_options(
        self,
        request: sas_20181203_models.DescribeGroupedVulRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeGroupedVulResponse:
        """
        @summary Queries vulnerabilities by group.
        
        @param request: DescribeGroupedVulRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeGroupedVulResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.alias_name):
            query['AliasName'] = request.alias_name
        if not UtilClient.is_unset(request.asset_type):
            query['AssetType'] = request.asset_type
        if not UtilClient.is_unset(request.attach_types):
            query['AttachTypes'] = request.attach_types
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.container_field_name):
            query['ContainerFieldName'] = request.container_field_name
        if not UtilClient.is_unset(request.container_field_value):
            query['ContainerFieldValue'] = request.container_field_value
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.cve_id):
            query['CveId'] = request.cve_id
        if not UtilClient.is_unset(request.dealed):
            query['Dealed'] = request.dealed
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.necessity):
            query['Necessity'] = request.necessity
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.rasp_defend):
            query['RaspDefend'] = request.rasp_defend
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.search_tags):
            query['SearchTags'] = request.search_tags
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeGroupedVul',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeGroupedVulResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_grouped_vul_with_options_async(
        self,
        request: sas_20181203_models.DescribeGroupedVulRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeGroupedVulResponse:
        """
        @summary Queries vulnerabilities by group.
        
        @param request: DescribeGroupedVulRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeGroupedVulResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.alias_name):
            query['AliasName'] = request.alias_name
        if not UtilClient.is_unset(request.asset_type):
            query['AssetType'] = request.asset_type
        if not UtilClient.is_unset(request.attach_types):
            query['AttachTypes'] = request.attach_types
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.container_field_name):
            query['ContainerFieldName'] = request.container_field_name
        if not UtilClient.is_unset(request.container_field_value):
            query['ContainerFieldValue'] = request.container_field_value
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.cve_id):
            query['CveId'] = request.cve_id
        if not UtilClient.is_unset(request.dealed):
            query['Dealed'] = request.dealed
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.necessity):
            query['Necessity'] = request.necessity
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.rasp_defend):
            query['RaspDefend'] = request.rasp_defend
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.search_tags):
            query['SearchTags'] = request.search_tags
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeGroupedVul',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeGroupedVulResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_grouped_vul(
        self,
        request: sas_20181203_models.DescribeGroupedVulRequest,
    ) -> sas_20181203_models.DescribeGroupedVulResponse:
        """
        @summary Queries vulnerabilities by group.
        
        @param request: DescribeGroupedVulRequest
        @return: DescribeGroupedVulResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_grouped_vul_with_options(request, runtime)

    async def describe_grouped_vul_async(
        self,
        request: sas_20181203_models.DescribeGroupedVulRequest,
    ) -> sas_20181203_models.DescribeGroupedVulResponse:
        """
        @summary Queries vulnerabilities by group.
        
        @param request: DescribeGroupedVulRequest
        @return: DescribeGroupedVulResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_grouped_vul_with_options_async(request, runtime)

    def describe_hc_export_info_with_options(
        self,
        request: sas_20181203_models.DescribeHcExportInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeHcExportInfoResponse:
        """
        @summary Queries the information about baseline export, including the name of the file to which baselines are exported and the download URL for the file.
        
        @param request: DescribeHcExportInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeHcExportInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.export_id):
            query['ExportId'] = request.export_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeHcExportInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeHcExportInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_hc_export_info_with_options_async(
        self,
        request: sas_20181203_models.DescribeHcExportInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeHcExportInfoResponse:
        """
        @summary Queries the information about baseline export, including the name of the file to which baselines are exported and the download URL for the file.
        
        @param request: DescribeHcExportInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeHcExportInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.export_id):
            query['ExportId'] = request.export_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeHcExportInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeHcExportInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_hc_export_info(
        self,
        request: sas_20181203_models.DescribeHcExportInfoRequest,
    ) -> sas_20181203_models.DescribeHcExportInfoResponse:
        """
        @summary Queries the information about baseline export, including the name of the file to which baselines are exported and the download URL for the file.
        
        @param request: DescribeHcExportInfoRequest
        @return: DescribeHcExportInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_hc_export_info_with_options(request, runtime)

    async def describe_hc_export_info_async(
        self,
        request: sas_20181203_models.DescribeHcExportInfoRequest,
    ) -> sas_20181203_models.DescribeHcExportInfoResponse:
        """
        @summary Queries the information about baseline export, including the name of the file to which baselines are exported and the download URL for the file.
        
        @param request: DescribeHcExportInfoRequest
        @return: DescribeHcExportInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_hc_export_info_with_options_async(request, runtime)

    def describe_honey_pot_auth_with_options(
        self,
        request: sas_20181203_models.DescribeHoneyPotAuthRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeHoneyPotAuthResponse:
        """
        @summary Queries statistics on the quota of honeypots.
        
        @param request: DescribeHoneyPotAuthRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeHoneyPotAuthResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeHoneyPotAuth',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeHoneyPotAuthResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_honey_pot_auth_with_options_async(
        self,
        request: sas_20181203_models.DescribeHoneyPotAuthRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeHoneyPotAuthResponse:
        """
        @summary Queries statistics on the quota of honeypots.
        
        @param request: DescribeHoneyPotAuthRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeHoneyPotAuthResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeHoneyPotAuth',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeHoneyPotAuthResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_honey_pot_auth(
        self,
        request: sas_20181203_models.DescribeHoneyPotAuthRequest,
    ) -> sas_20181203_models.DescribeHoneyPotAuthResponse:
        """
        @summary Queries statistics on the quota of honeypots.
        
        @param request: DescribeHoneyPotAuthRequest
        @return: DescribeHoneyPotAuthResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_honey_pot_auth_with_options(request, runtime)

    async def describe_honey_pot_auth_async(
        self,
        request: sas_20181203_models.DescribeHoneyPotAuthRequest,
    ) -> sas_20181203_models.DescribeHoneyPotAuthResponse:
        """
        @summary Queries statistics on the quota of honeypots.
        
        @param request: DescribeHoneyPotAuthRequest
        @return: DescribeHoneyPotAuthResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_honey_pot_auth_with_options_async(request, runtime)

    def describe_honey_pot_susp_statistics_with_options(
        self,
        request: sas_20181203_models.DescribeHoneyPotSuspStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeHoneyPotSuspStatisticsResponse:
        """
        @summary Queries the top five virtual private clouds (VPCs) or assets for which alerts are most frequently generated.
        
        @param request: DescribeHoneyPotSuspStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeHoneyPotSuspStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.statistics_days):
            query['StatisticsDays'] = request.statistics_days
        if not UtilClient.is_unset(request.statistics_key_type):
            query['StatisticsKeyType'] = request.statistics_key_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeHoneyPotSuspStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeHoneyPotSuspStatisticsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_honey_pot_susp_statistics_with_options_async(
        self,
        request: sas_20181203_models.DescribeHoneyPotSuspStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeHoneyPotSuspStatisticsResponse:
        """
        @summary Queries the top five virtual private clouds (VPCs) or assets for which alerts are most frequently generated.
        
        @param request: DescribeHoneyPotSuspStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeHoneyPotSuspStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.statistics_days):
            query['StatisticsDays'] = request.statistics_days
        if not UtilClient.is_unset(request.statistics_key_type):
            query['StatisticsKeyType'] = request.statistics_key_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeHoneyPotSuspStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeHoneyPotSuspStatisticsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_honey_pot_susp_statistics(
        self,
        request: sas_20181203_models.DescribeHoneyPotSuspStatisticsRequest,
    ) -> sas_20181203_models.DescribeHoneyPotSuspStatisticsResponse:
        """
        @summary Queries the top five virtual private clouds (VPCs) or assets for which alerts are most frequently generated.
        
        @param request: DescribeHoneyPotSuspStatisticsRequest
        @return: DescribeHoneyPotSuspStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_honey_pot_susp_statistics_with_options(request, runtime)

    async def describe_honey_pot_susp_statistics_async(
        self,
        request: sas_20181203_models.DescribeHoneyPotSuspStatisticsRequest,
    ) -> sas_20181203_models.DescribeHoneyPotSuspStatisticsResponse:
        """
        @summary Queries the top five virtual private clouds (VPCs) or assets for which alerts are most frequently generated.
        
        @param request: DescribeHoneyPotSuspStatisticsRequest
        @return: DescribeHoneyPotSuspStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_honey_pot_susp_statistics_with_options_async(request, runtime)

    def describe_hybrid_proxy_cluster_list_with_options(
        self,
        request: sas_20181203_models.DescribeHybridProxyClusterListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeHybridProxyClusterListResponse:
        """
        @summary Queries proxy clusters by page.
        
        @param request: DescribeHybridProxyClusterListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeHybridProxyClusterListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeHybridProxyClusterList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeHybridProxyClusterListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_hybrid_proxy_cluster_list_with_options_async(
        self,
        request: sas_20181203_models.DescribeHybridProxyClusterListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeHybridProxyClusterListResponse:
        """
        @summary Queries proxy clusters by page.
        
        @param request: DescribeHybridProxyClusterListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeHybridProxyClusterListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeHybridProxyClusterList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeHybridProxyClusterListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_hybrid_proxy_cluster_list(
        self,
        request: sas_20181203_models.DescribeHybridProxyClusterListRequest,
    ) -> sas_20181203_models.DescribeHybridProxyClusterListResponse:
        """
        @summary Queries proxy clusters by page.
        
        @param request: DescribeHybridProxyClusterListRequest
        @return: DescribeHybridProxyClusterListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_hybrid_proxy_cluster_list_with_options(request, runtime)

    async def describe_hybrid_proxy_cluster_list_async(
        self,
        request: sas_20181203_models.DescribeHybridProxyClusterListRequest,
    ) -> sas_20181203_models.DescribeHybridProxyClusterListResponse:
        """
        @summary Queries proxy clusters by page.
        
        @param request: DescribeHybridProxyClusterListRequest
        @return: DescribeHybridProxyClusterListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_hybrid_proxy_cluster_list_with_options_async(request, runtime)

    def describe_hybrid_proxy_linked_client_list_with_options(
        self,
        request: sas_20181203_models.DescribeHybridProxyLinkedClientListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeHybridProxyLinkedClientListResponse:
        """
        @summary Queries the servers that are connected to a proxy in a hybrid cloud by page.
        
        @param request: DescribeHybridProxyLinkedClientListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeHybridProxyLinkedClientListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.proxy_uuid):
            query['ProxyUuid'] = request.proxy_uuid
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeHybridProxyLinkedClientList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeHybridProxyLinkedClientListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_hybrid_proxy_linked_client_list_with_options_async(
        self,
        request: sas_20181203_models.DescribeHybridProxyLinkedClientListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeHybridProxyLinkedClientListResponse:
        """
        @summary Queries the servers that are connected to a proxy in a hybrid cloud by page.
        
        @param request: DescribeHybridProxyLinkedClientListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeHybridProxyLinkedClientListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.proxy_uuid):
            query['ProxyUuid'] = request.proxy_uuid
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeHybridProxyLinkedClientList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeHybridProxyLinkedClientListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_hybrid_proxy_linked_client_list(
        self,
        request: sas_20181203_models.DescribeHybridProxyLinkedClientListRequest,
    ) -> sas_20181203_models.DescribeHybridProxyLinkedClientListResponse:
        """
        @summary Queries the servers that are connected to a proxy in a hybrid cloud by page.
        
        @param request: DescribeHybridProxyLinkedClientListRequest
        @return: DescribeHybridProxyLinkedClientListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_hybrid_proxy_linked_client_list_with_options(request, runtime)

    async def describe_hybrid_proxy_linked_client_list_async(
        self,
        request: sas_20181203_models.DescribeHybridProxyLinkedClientListRequest,
    ) -> sas_20181203_models.DescribeHybridProxyLinkedClientListResponse:
        """
        @summary Queries the servers that are connected to a proxy in a hybrid cloud by page.
        
        @param request: DescribeHybridProxyLinkedClientListRequest
        @return: DescribeHybridProxyLinkedClientListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_hybrid_proxy_linked_client_list_with_options_async(request, runtime)

    def describe_hybrid_proxy_list_with_options(
        self,
        request: sas_20181203_models.DescribeHybridProxyListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeHybridProxyListResponse:
        """
        @summary Queries the proxy nodes that are deployed in a proxy cluster by page.
        
        @param request: DescribeHybridProxyListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeHybridProxyListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeHybridProxyList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeHybridProxyListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_hybrid_proxy_list_with_options_async(
        self,
        request: sas_20181203_models.DescribeHybridProxyListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeHybridProxyListResponse:
        """
        @summary Queries the proxy nodes that are deployed in a proxy cluster by page.
        
        @param request: DescribeHybridProxyListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeHybridProxyListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeHybridProxyList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeHybridProxyListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_hybrid_proxy_list(
        self,
        request: sas_20181203_models.DescribeHybridProxyListRequest,
    ) -> sas_20181203_models.DescribeHybridProxyListResponse:
        """
        @summary Queries the proxy nodes that are deployed in a proxy cluster by page.
        
        @param request: DescribeHybridProxyListRequest
        @return: DescribeHybridProxyListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_hybrid_proxy_list_with_options(request, runtime)

    async def describe_hybrid_proxy_list_async(
        self,
        request: sas_20181203_models.DescribeHybridProxyListRequest,
    ) -> sas_20181203_models.DescribeHybridProxyListResponse:
        """
        @summary Queries the proxy nodes that are deployed in a proxy cluster by page.
        
        @param request: DescribeHybridProxyListRequest
        @return: DescribeHybridProxyListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_hybrid_proxy_list_with_options_async(request, runtime)

    def describe_hybrid_proxy_policy_with_options(
        self,
        request: sas_20181203_models.DescribeHybridProxyPolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeHybridProxyPolicyResponse:
        """
        @summary Queries the data collection configurations of a proxy cluster.
        
        @param request: DescribeHybridProxyPolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeHybridProxyPolicyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeHybridProxyPolicy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeHybridProxyPolicyResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_hybrid_proxy_policy_with_options_async(
        self,
        request: sas_20181203_models.DescribeHybridProxyPolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeHybridProxyPolicyResponse:
        """
        @summary Queries the data collection configurations of a proxy cluster.
        
        @param request: DescribeHybridProxyPolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeHybridProxyPolicyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeHybridProxyPolicy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeHybridProxyPolicyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_hybrid_proxy_policy(
        self,
        request: sas_20181203_models.DescribeHybridProxyPolicyRequest,
    ) -> sas_20181203_models.DescribeHybridProxyPolicyResponse:
        """
        @summary Queries the data collection configurations of a proxy cluster.
        
        @param request: DescribeHybridProxyPolicyRequest
        @return: DescribeHybridProxyPolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_hybrid_proxy_policy_with_options(request, runtime)

    async def describe_hybrid_proxy_policy_async(
        self,
        request: sas_20181203_models.DescribeHybridProxyPolicyRequest,
    ) -> sas_20181203_models.DescribeHybridProxyPolicyResponse:
        """
        @summary Queries the data collection configurations of a proxy cluster.
        
        @param request: DescribeHybridProxyPolicyRequest
        @return: DescribeHybridProxyPolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_hybrid_proxy_policy_with_options_async(request, runtime)

    def describe_idc_asset_criteria_with_options(
        self,
        request: sas_20181203_models.DescribeIdcAssetCriteriaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeIdcAssetCriteriaResponse:
        """
        @summary Queries the search conditions that can be used to query data center assets found after scanning in fuzzy match mode.
        
        @param request: DescribeIdcAssetCriteriaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeIdcAssetCriteriaResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        if not UtilClient.is_unset(request.value):
            query['Value'] = request.value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeIdcAssetCriteria',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeIdcAssetCriteriaResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_idc_asset_criteria_with_options_async(
        self,
        request: sas_20181203_models.DescribeIdcAssetCriteriaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeIdcAssetCriteriaResponse:
        """
        @summary Queries the search conditions that can be used to query data center assets found after scanning in fuzzy match mode.
        
        @param request: DescribeIdcAssetCriteriaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeIdcAssetCriteriaResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        if not UtilClient.is_unset(request.value):
            query['Value'] = request.value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeIdcAssetCriteria',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeIdcAssetCriteriaResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_idc_asset_criteria(
        self,
        request: sas_20181203_models.DescribeIdcAssetCriteriaRequest,
    ) -> sas_20181203_models.DescribeIdcAssetCriteriaResponse:
        """
        @summary Queries the search conditions that can be used to query data center assets found after scanning in fuzzy match mode.
        
        @param request: DescribeIdcAssetCriteriaRequest
        @return: DescribeIdcAssetCriteriaResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_idc_asset_criteria_with_options(request, runtime)

    async def describe_idc_asset_criteria_async(
        self,
        request: sas_20181203_models.DescribeIdcAssetCriteriaRequest,
    ) -> sas_20181203_models.DescribeIdcAssetCriteriaResponse:
        """
        @summary Queries the search conditions that can be used to query data center assets found after scanning in fuzzy match mode.
        
        @param request: DescribeIdcAssetCriteriaRequest
        @return: DescribeIdcAssetCriteriaResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_idc_asset_criteria_with_options_async(request, runtime)

    def describe_idc_probe_list_with_options(
        self,
        request: sas_20181203_models.DescribeIdcProbeListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeIdcProbeListResponse:
        """
        @summary Query IDC probe list
        
        @param request: DescribeIdcProbeListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeIdcProbeListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.idc_name):
            query['IdcName'] = request.idc_name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeIdcProbeList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeIdcProbeListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_idc_probe_list_with_options_async(
        self,
        request: sas_20181203_models.DescribeIdcProbeListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeIdcProbeListResponse:
        """
        @summary Query IDC probe list
        
        @param request: DescribeIdcProbeListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeIdcProbeListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.idc_name):
            query['IdcName'] = request.idc_name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeIdcProbeList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeIdcProbeListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_idc_probe_list(
        self,
        request: sas_20181203_models.DescribeIdcProbeListRequest,
    ) -> sas_20181203_models.DescribeIdcProbeListResponse:
        """
        @summary Query IDC probe list
        
        @param request: DescribeIdcProbeListRequest
        @return: DescribeIdcProbeListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_idc_probe_list_with_options(request, runtime)

    async def describe_idc_probe_list_async(
        self,
        request: sas_20181203_models.DescribeIdcProbeListRequest,
    ) -> sas_20181203_models.DescribeIdcProbeListResponse:
        """
        @summary Query IDC probe list
        
        @param request: DescribeIdcProbeListRequest
        @return: DescribeIdcProbeListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_idc_probe_list_with_options_async(request, runtime)

    def describe_idc_probe_scan_result_list_with_options(
        self,
        request: sas_20181203_models.DescribeIdcProbeScanResultListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeIdcProbeScanResultListResponse:
        """
        @summary Queries assets that are identified by Internet Data Center (IDC) probes.
        
        @param request: DescribeIdcProbeScanResultListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeIdcProbeScanResultListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.criteria):
            query['Criteria'] = request.criteria
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.found_end_time):
            query['FoundEndTime'] = request.found_end_time
        if not UtilClient.is_unset(request.found_start_time):
            query['FoundStartTime'] = request.found_start_time
        if not UtilClient.is_unset(request.logical_exp):
            query['LogicalExp'] = request.logical_exp
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeIdcProbeScanResultList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeIdcProbeScanResultListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_idc_probe_scan_result_list_with_options_async(
        self,
        request: sas_20181203_models.DescribeIdcProbeScanResultListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeIdcProbeScanResultListResponse:
        """
        @summary Queries assets that are identified by Internet Data Center (IDC) probes.
        
        @param request: DescribeIdcProbeScanResultListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeIdcProbeScanResultListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.criteria):
            query['Criteria'] = request.criteria
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.found_end_time):
            query['FoundEndTime'] = request.found_end_time
        if not UtilClient.is_unset(request.found_start_time):
            query['FoundStartTime'] = request.found_start_time
        if not UtilClient.is_unset(request.logical_exp):
            query['LogicalExp'] = request.logical_exp
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeIdcProbeScanResultList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeIdcProbeScanResultListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_idc_probe_scan_result_list(
        self,
        request: sas_20181203_models.DescribeIdcProbeScanResultListRequest,
    ) -> sas_20181203_models.DescribeIdcProbeScanResultListResponse:
        """
        @summary Queries assets that are identified by Internet Data Center (IDC) probes.
        
        @param request: DescribeIdcProbeScanResultListRequest
        @return: DescribeIdcProbeScanResultListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_idc_probe_scan_result_list_with_options(request, runtime)

    async def describe_idc_probe_scan_result_list_async(
        self,
        request: sas_20181203_models.DescribeIdcProbeScanResultListRequest,
    ) -> sas_20181203_models.DescribeIdcProbeScanResultListResponse:
        """
        @summary Queries assets that are identified by Internet Data Center (IDC) probes.
        
        @param request: DescribeIdcProbeScanResultListRequest
        @return: DescribeIdcProbeScanResultListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_idc_probe_scan_result_list_with_options_async(request, runtime)

    def describe_image_with_options(
        self,
        request: sas_20181203_models.DescribeImageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageResponse:
        """
        @summary Queries an image digest.
        
        @param request: DescribeImageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.image_instance_id):
            query['ImageInstanceId'] = request.image_instance_id
        if not UtilClient.is_unset(request.image_region_id):
            query['ImageRegionId'] = request.image_region_id
        if not UtilClient.is_unset(request.image_repo_id):
            query['ImageRepoId'] = request.image_repo_id
        if not UtilClient.is_unset(request.image_tag):
            query['ImageTag'] = request.image_tag
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImage',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_image_with_options_async(
        self,
        request: sas_20181203_models.DescribeImageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageResponse:
        """
        @summary Queries an image digest.
        
        @param request: DescribeImageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.image_instance_id):
            query['ImageInstanceId'] = request.image_instance_id
        if not UtilClient.is_unset(request.image_region_id):
            query['ImageRegionId'] = request.image_region_id
        if not UtilClient.is_unset(request.image_repo_id):
            query['ImageRepoId'] = request.image_repo_id
        if not UtilClient.is_unset(request.image_tag):
            query['ImageTag'] = request.image_tag
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImage',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_image(
        self,
        request: sas_20181203_models.DescribeImageRequest,
    ) -> sas_20181203_models.DescribeImageResponse:
        """
        @summary Queries an image digest.
        
        @param request: DescribeImageRequest
        @return: DescribeImageResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_image_with_options(request, runtime)

    async def describe_image_async(
        self,
        request: sas_20181203_models.DescribeImageRequest,
    ) -> sas_20181203_models.DescribeImageResponse:
        """
        @summary Queries an image digest.
        
        @param request: DescribeImageRequest
        @return: DescribeImageResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_image_with_options_async(request, runtime)

    def describe_image_baseline_check_result_with_options(
        self,
        request: sas_20181203_models.DescribeImageBaselineCheckResultRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageBaselineCheckResultResponse:
        """
        @summary Queries the security scan results of images.
        
        @param request: DescribeImageBaselineCheckResultRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageBaselineCheckResultResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.criteria):
            query['Criteria'] = request.criteria
        if not UtilClient.is_unset(request.criteria_type):
            query['CriteriaType'] = request.criteria_type
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.image_uuid):
            query['ImageUuid'] = request.image_uuid
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.risk_level):
            query['RiskLevel'] = request.risk_level
        if not UtilClient.is_unset(request.scan_range):
            query['ScanRange'] = request.scan_range
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageBaselineCheckResult',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageBaselineCheckResultResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_image_baseline_check_result_with_options_async(
        self,
        request: sas_20181203_models.DescribeImageBaselineCheckResultRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageBaselineCheckResultResponse:
        """
        @summary Queries the security scan results of images.
        
        @param request: DescribeImageBaselineCheckResultRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageBaselineCheckResultResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.criteria):
            query['Criteria'] = request.criteria
        if not UtilClient.is_unset(request.criteria_type):
            query['CriteriaType'] = request.criteria_type
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.image_uuid):
            query['ImageUuid'] = request.image_uuid
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.risk_level):
            query['RiskLevel'] = request.risk_level
        if not UtilClient.is_unset(request.scan_range):
            query['ScanRange'] = request.scan_range
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageBaselineCheckResult',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageBaselineCheckResultResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_image_baseline_check_result(
        self,
        request: sas_20181203_models.DescribeImageBaselineCheckResultRequest,
    ) -> sas_20181203_models.DescribeImageBaselineCheckResultResponse:
        """
        @summary Queries the security scan results of images.
        
        @param request: DescribeImageBaselineCheckResultRequest
        @return: DescribeImageBaselineCheckResultResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_image_baseline_check_result_with_options(request, runtime)

    async def describe_image_baseline_check_result_async(
        self,
        request: sas_20181203_models.DescribeImageBaselineCheckResultRequest,
    ) -> sas_20181203_models.DescribeImageBaselineCheckResultResponse:
        """
        @summary Queries the security scan results of images.
        
        @param request: DescribeImageBaselineCheckResultRequest
        @return: DescribeImageBaselineCheckResultResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_image_baseline_check_result_with_options_async(request, runtime)

    def describe_image_baseline_check_summary_with_options(
        self,
        request: sas_20181203_models.DescribeImageBaselineCheckSummaryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageBaselineCheckSummaryResponse:
        """
        @summary Queries the check results of image baselines that are included in an image scan task.
        
        @param request: DescribeImageBaselineCheckSummaryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageBaselineCheckSummaryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.criteria):
            query['Criteria'] = request.criteria
        if not UtilClient.is_unset(request.criteria_type):
            query['CriteriaType'] = request.criteria_type
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.risk_level):
            query['RiskLevel'] = request.risk_level
        if not UtilClient.is_unset(request.scan_range):
            query['ScanRange'] = request.scan_range
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageBaselineCheckSummary',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageBaselineCheckSummaryResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_image_baseline_check_summary_with_options_async(
        self,
        request: sas_20181203_models.DescribeImageBaselineCheckSummaryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageBaselineCheckSummaryResponse:
        """
        @summary Queries the check results of image baselines that are included in an image scan task.
        
        @param request: DescribeImageBaselineCheckSummaryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageBaselineCheckSummaryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.criteria):
            query['Criteria'] = request.criteria
        if not UtilClient.is_unset(request.criteria_type):
            query['CriteriaType'] = request.criteria_type
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.risk_level):
            query['RiskLevel'] = request.risk_level
        if not UtilClient.is_unset(request.scan_range):
            query['ScanRange'] = request.scan_range
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageBaselineCheckSummary',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageBaselineCheckSummaryResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_image_baseline_check_summary(
        self,
        request: sas_20181203_models.DescribeImageBaselineCheckSummaryRequest,
    ) -> sas_20181203_models.DescribeImageBaselineCheckSummaryResponse:
        """
        @summary Queries the check results of image baselines that are included in an image scan task.
        
        @param request: DescribeImageBaselineCheckSummaryRequest
        @return: DescribeImageBaselineCheckSummaryResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_image_baseline_check_summary_with_options(request, runtime)

    async def describe_image_baseline_check_summary_async(
        self,
        request: sas_20181203_models.DescribeImageBaselineCheckSummaryRequest,
    ) -> sas_20181203_models.DescribeImageBaselineCheckSummaryResponse:
        """
        @summary Queries the check results of image baselines that are included in an image scan task.
        
        @param request: DescribeImageBaselineCheckSummaryRequest
        @return: DescribeImageBaselineCheckSummaryResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_image_baseline_check_summary_with_options_async(request, runtime)

    def describe_image_baseline_detail_with_options(
        self,
        request: sas_20181203_models.DescribeImageBaselineDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageBaselineDetailResponse:
        """
        @summary Queries the details about the baseline check result for an image.
        
        @param request: DescribeImageBaselineDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageBaselineDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.baseline_item_key):
            query['BaselineItemKey'] = request.baseline_item_key
        if not UtilClient.is_unset(request.image_uuid):
            query['ImageUuid'] = request.image_uuid
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageBaselineDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageBaselineDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_image_baseline_detail_with_options_async(
        self,
        request: sas_20181203_models.DescribeImageBaselineDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageBaselineDetailResponse:
        """
        @summary Queries the details about the baseline check result for an image.
        
        @param request: DescribeImageBaselineDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageBaselineDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.baseline_item_key):
            query['BaselineItemKey'] = request.baseline_item_key
        if not UtilClient.is_unset(request.image_uuid):
            query['ImageUuid'] = request.image_uuid
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageBaselineDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageBaselineDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_image_baseline_detail(
        self,
        request: sas_20181203_models.DescribeImageBaselineDetailRequest,
    ) -> sas_20181203_models.DescribeImageBaselineDetailResponse:
        """
        @summary Queries the details about the baseline check result for an image.
        
        @param request: DescribeImageBaselineDetailRequest
        @return: DescribeImageBaselineDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_image_baseline_detail_with_options(request, runtime)

    async def describe_image_baseline_detail_async(
        self,
        request: sas_20181203_models.DescribeImageBaselineDetailRequest,
    ) -> sas_20181203_models.DescribeImageBaselineDetailResponse:
        """
        @summary Queries the details about the baseline check result for an image.
        
        @param request: DescribeImageBaselineDetailRequest
        @return: DescribeImageBaselineDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_image_baseline_detail_with_options_async(request, runtime)

    def describe_image_baseline_item_list_with_options(
        self,
        request: sas_20181203_models.DescribeImageBaselineItemListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageBaselineItemListResponse:
        """
        @summary Queries baseline check results based on images.
        
        @param request: DescribeImageBaselineItemListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageBaselineItemListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.baseline_class_key):
            query['BaselineClassKey'] = request.baseline_class_key
        if not UtilClient.is_unset(request.baseline_name_key):
            query['BaselineNameKey'] = request.baseline_name_key
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.image_uuid):
            query['ImageUuid'] = request.image_uuid
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.scan_range):
            query['ScanRange'] = request.scan_range
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageBaselineItemList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageBaselineItemListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_image_baseline_item_list_with_options_async(
        self,
        request: sas_20181203_models.DescribeImageBaselineItemListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageBaselineItemListResponse:
        """
        @summary Queries baseline check results based on images.
        
        @param request: DescribeImageBaselineItemListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageBaselineItemListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.baseline_class_key):
            query['BaselineClassKey'] = request.baseline_class_key
        if not UtilClient.is_unset(request.baseline_name_key):
            query['BaselineNameKey'] = request.baseline_name_key
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.image_uuid):
            query['ImageUuid'] = request.image_uuid
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.scan_range):
            query['ScanRange'] = request.scan_range
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageBaselineItemList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageBaselineItemListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_image_baseline_item_list(
        self,
        request: sas_20181203_models.DescribeImageBaselineItemListRequest,
    ) -> sas_20181203_models.DescribeImageBaselineItemListResponse:
        """
        @summary Queries baseline check results based on images.
        
        @param request: DescribeImageBaselineItemListRequest
        @return: DescribeImageBaselineItemListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_image_baseline_item_list_with_options(request, runtime)

    async def describe_image_baseline_item_list_async(
        self,
        request: sas_20181203_models.DescribeImageBaselineItemListRequest,
    ) -> sas_20181203_models.DescribeImageBaselineItemListResponse:
        """
        @summary Queries baseline check results based on images.
        
        @param request: DescribeImageBaselineItemListRequest
        @return: DescribeImageBaselineItemListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_image_baseline_item_list_with_options_async(request, runtime)

    def describe_image_baseline_strategy_with_options(
        self,
        request: sas_20181203_models.DescribeImageBaselineStrategyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageBaselineStrategyResponse:
        """
        @summary Queries the information about a baseline check policy for images.
        
        @param request: DescribeImageBaselineStrategyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageBaselineStrategyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageBaselineStrategy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageBaselineStrategyResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_image_baseline_strategy_with_options_async(
        self,
        request: sas_20181203_models.DescribeImageBaselineStrategyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageBaselineStrategyResponse:
        """
        @summary Queries the information about a baseline check policy for images.
        
        @param request: DescribeImageBaselineStrategyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageBaselineStrategyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageBaselineStrategy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageBaselineStrategyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_image_baseline_strategy(
        self,
        request: sas_20181203_models.DescribeImageBaselineStrategyRequest,
    ) -> sas_20181203_models.DescribeImageBaselineStrategyResponse:
        """
        @summary Queries the information about a baseline check policy for images.
        
        @param request: DescribeImageBaselineStrategyRequest
        @return: DescribeImageBaselineStrategyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_image_baseline_strategy_with_options(request, runtime)

    async def describe_image_baseline_strategy_async(
        self,
        request: sas_20181203_models.DescribeImageBaselineStrategyRequest,
    ) -> sas_20181203_models.DescribeImageBaselineStrategyResponse:
        """
        @summary Queries the information about a baseline check policy for images.
        
        @param request: DescribeImageBaselineStrategyRequest
        @return: DescribeImageBaselineStrategyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_image_baseline_strategy_with_options_async(request, runtime)

    def describe_image_build_risk_by_key_with_options(
        self,
        request: sas_20181203_models.DescribeImageBuildRiskByKeyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageBuildRiskByKeyResponse:
        """
        @summary Queries image build command risks by page.
        
        @param request: DescribeImageBuildRiskByKeyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageBuildRiskByKeyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.image_uuid):
            query['ImageUuid'] = request.image_uuid
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.risk_key):
            query['RiskKey'] = request.risk_key
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageBuildRiskByKey',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageBuildRiskByKeyResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_image_build_risk_by_key_with_options_async(
        self,
        request: sas_20181203_models.DescribeImageBuildRiskByKeyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageBuildRiskByKeyResponse:
        """
        @summary Queries image build command risks by page.
        
        @param request: DescribeImageBuildRiskByKeyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageBuildRiskByKeyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.image_uuid):
            query['ImageUuid'] = request.image_uuid
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.risk_key):
            query['RiskKey'] = request.risk_key
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageBuildRiskByKey',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageBuildRiskByKeyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_image_build_risk_by_key(
        self,
        request: sas_20181203_models.DescribeImageBuildRiskByKeyRequest,
    ) -> sas_20181203_models.DescribeImageBuildRiskByKeyResponse:
        """
        @summary Queries image build command risks by page.
        
        @param request: DescribeImageBuildRiskByKeyRequest
        @return: DescribeImageBuildRiskByKeyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_image_build_risk_by_key_with_options(request, runtime)

    async def describe_image_build_risk_by_key_async(
        self,
        request: sas_20181203_models.DescribeImageBuildRiskByKeyRequest,
    ) -> sas_20181203_models.DescribeImageBuildRiskByKeyResponse:
        """
        @summary Queries image build command risks by page.
        
        @param request: DescribeImageBuildRiskByKeyRequest
        @return: DescribeImageBuildRiskByKeyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_image_build_risk_by_key_with_options_async(request, runtime)

    def describe_image_build_risk_list_with_options(
        self,
        request: sas_20181203_models.DescribeImageBuildRiskListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageBuildRiskListResponse:
        """
        @summary Queries a list of image build command risks by page.
        
        @param request: DescribeImageBuildRiskListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageBuildRiskListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.criteria):
            query['Criteria'] = request.criteria
        if not UtilClient.is_unset(request.criteria_type):
            query['CriteriaType'] = request.criteria_type
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.risk_level):
            query['RiskLevel'] = request.risk_level
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageBuildRiskList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageBuildRiskListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_image_build_risk_list_with_options_async(
        self,
        request: sas_20181203_models.DescribeImageBuildRiskListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageBuildRiskListResponse:
        """
        @summary Queries a list of image build command risks by page.
        
        @param request: DescribeImageBuildRiskListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageBuildRiskListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.criteria):
            query['Criteria'] = request.criteria
        if not UtilClient.is_unset(request.criteria_type):
            query['CriteriaType'] = request.criteria_type
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.risk_level):
            query['RiskLevel'] = request.risk_level
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageBuildRiskList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageBuildRiskListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_image_build_risk_list(
        self,
        request: sas_20181203_models.DescribeImageBuildRiskListRequest,
    ) -> sas_20181203_models.DescribeImageBuildRiskListResponse:
        """
        @summary Queries a list of image build command risks by page.
        
        @param request: DescribeImageBuildRiskListRequest
        @return: DescribeImageBuildRiskListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_image_build_risk_list_with_options(request, runtime)

    async def describe_image_build_risk_list_async(
        self,
        request: sas_20181203_models.DescribeImageBuildRiskListRequest,
    ) -> sas_20181203_models.DescribeImageBuildRiskListResponse:
        """
        @summary Queries a list of image build command risks by page.
        
        @param request: DescribeImageBuildRiskListRequest
        @return: DescribeImageBuildRiskListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_image_build_risk_list_with_options_async(request, runtime)

    def describe_image_criteria_with_options(
        self,
        request: sas_20181203_models.DescribeImageCriteriaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageCriteriaResponse:
        """
        @summary Queries the search conditions that are used to query images.
        
        @param request: DescribeImageCriteriaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageCriteriaResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.value):
            query['Value'] = request.value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageCriteria',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageCriteriaResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_image_criteria_with_options_async(
        self,
        request: sas_20181203_models.DescribeImageCriteriaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageCriteriaResponse:
        """
        @summary Queries the search conditions that are used to query images.
        
        @param request: DescribeImageCriteriaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageCriteriaResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.value):
            query['Value'] = request.value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageCriteria',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageCriteriaResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_image_criteria(
        self,
        request: sas_20181203_models.DescribeImageCriteriaRequest,
    ) -> sas_20181203_models.DescribeImageCriteriaResponse:
        """
        @summary Queries the search conditions that are used to query images.
        
        @param request: DescribeImageCriteriaRequest
        @return: DescribeImageCriteriaResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_image_criteria_with_options(request, runtime)

    async def describe_image_criteria_async(
        self,
        request: sas_20181203_models.DescribeImageCriteriaRequest,
    ) -> sas_20181203_models.DescribeImageCriteriaResponse:
        """
        @summary Queries the search conditions that are used to query images.
        
        @param request: DescribeImageCriteriaRequest
        @return: DescribeImageCriteriaResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_image_criteria_with_options_async(request, runtime)

    def describe_image_event_operation_condition_with_options(
        self,
        request: sas_20181203_models.DescribeImageEventOperationConditionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageEventOperationConditionResponse:
        """
        @summary Queries the conditions for handling alert events in an image.
        
        @param request: DescribeImageEventOperationConditionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageEventOperationConditionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.event_type):
            query['EventType'] = request.event_type
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageEventOperationCondition',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageEventOperationConditionResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_image_event_operation_condition_with_options_async(
        self,
        request: sas_20181203_models.DescribeImageEventOperationConditionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageEventOperationConditionResponse:
        """
        @summary Queries the conditions for handling alert events in an image.
        
        @param request: DescribeImageEventOperationConditionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageEventOperationConditionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.event_type):
            query['EventType'] = request.event_type
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageEventOperationCondition',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageEventOperationConditionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_image_event_operation_condition(
        self,
        request: sas_20181203_models.DescribeImageEventOperationConditionRequest,
    ) -> sas_20181203_models.DescribeImageEventOperationConditionResponse:
        """
        @summary Queries the conditions for handling alert events in an image.
        
        @param request: DescribeImageEventOperationConditionRequest
        @return: DescribeImageEventOperationConditionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_image_event_operation_condition_with_options(request, runtime)

    async def describe_image_event_operation_condition_async(
        self,
        request: sas_20181203_models.DescribeImageEventOperationConditionRequest,
    ) -> sas_20181203_models.DescribeImageEventOperationConditionResponse:
        """
        @summary Queries the conditions for handling alert events in an image.
        
        @param request: DescribeImageEventOperationConditionRequest
        @return: DescribeImageEventOperationConditionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_image_event_operation_condition_with_options_async(request, runtime)

    def describe_image_event_operation_page_with_options(
        self,
        request: sas_20181203_models.DescribeImageEventOperationPageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageEventOperationPageResponse:
        """
        @summary Queries alert handling rules by page.
        
        @param request: DescribeImageEventOperationPageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageEventOperationPageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.event_key):
            query['EventKey'] = request.event_key
        if not UtilClient.is_unset(request.event_name):
            query['EventName'] = request.event_name
        if not UtilClient.is_unset(request.event_type):
            query['EventType'] = request.event_type
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageEventOperationPage',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageEventOperationPageResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_image_event_operation_page_with_options_async(
        self,
        request: sas_20181203_models.DescribeImageEventOperationPageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageEventOperationPageResponse:
        """
        @summary Queries alert handling rules by page.
        
        @param request: DescribeImageEventOperationPageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageEventOperationPageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.event_key):
            query['EventKey'] = request.event_key
        if not UtilClient.is_unset(request.event_name):
            query['EventName'] = request.event_name
        if not UtilClient.is_unset(request.event_type):
            query['EventType'] = request.event_type
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageEventOperationPage',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageEventOperationPageResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_image_event_operation_page(
        self,
        request: sas_20181203_models.DescribeImageEventOperationPageRequest,
    ) -> sas_20181203_models.DescribeImageEventOperationPageResponse:
        """
        @summary Queries alert handling rules by page.
        
        @param request: DescribeImageEventOperationPageRequest
        @return: DescribeImageEventOperationPageResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_image_event_operation_page_with_options(request, runtime)

    async def describe_image_event_operation_page_async(
        self,
        request: sas_20181203_models.DescribeImageEventOperationPageRequest,
    ) -> sas_20181203_models.DescribeImageEventOperationPageResponse:
        """
        @summary Queries alert handling rules by page.
        
        @param request: DescribeImageEventOperationPageRequest
        @return: DescribeImageEventOperationPageResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_image_event_operation_page_with_options_async(request, runtime)

    def describe_image_fix_cycle_config_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageFixCycleConfigResponse:
        """
        @summary Queries the configurations of the scheduled fix of image risks.
        
        @param request: DescribeImageFixCycleConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageFixCycleConfigResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeImageFixCycleConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageFixCycleConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_image_fix_cycle_config_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageFixCycleConfigResponse:
        """
        @summary Queries the configurations of the scheduled fix of image risks.
        
        @param request: DescribeImageFixCycleConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageFixCycleConfigResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeImageFixCycleConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageFixCycleConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_image_fix_cycle_config(self) -> sas_20181203_models.DescribeImageFixCycleConfigResponse:
        """
        @summary Queries the configurations of the scheduled fix of image risks.
        
        @return: DescribeImageFixCycleConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_image_fix_cycle_config_with_options(runtime)

    async def describe_image_fix_cycle_config_async(self) -> sas_20181203_models.DescribeImageFixCycleConfigResponse:
        """
        @summary Queries the configurations of the scheduled fix of image risks.
        
        @return: DescribeImageFixCycleConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_image_fix_cycle_config_with_options_async(runtime)

    def describe_image_fix_task_with_options(
        self,
        request: sas_20181203_models.DescribeImageFixTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageFixTaskResponse:
        """
        @summary Queries the tasks that you create to fix image risks.
        
        @param request: DescribeImageFixTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageFixTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageFixTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageFixTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_image_fix_task_with_options_async(
        self,
        request: sas_20181203_models.DescribeImageFixTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageFixTaskResponse:
        """
        @summary Queries the tasks that you create to fix image risks.
        
        @param request: DescribeImageFixTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageFixTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageFixTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageFixTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_image_fix_task(
        self,
        request: sas_20181203_models.DescribeImageFixTaskRequest,
    ) -> sas_20181203_models.DescribeImageFixTaskResponse:
        """
        @summary Queries the tasks that you create to fix image risks.
        
        @param request: DescribeImageFixTaskRequest
        @return: DescribeImageFixTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_image_fix_task_with_options(request, runtime)

    async def describe_image_fix_task_async(
        self,
        request: sas_20181203_models.DescribeImageFixTaskRequest,
    ) -> sas_20181203_models.DescribeImageFixTaskResponse:
        """
        @summary Queries the tasks that you create to fix image risks.
        
        @param request: DescribeImageFixTaskRequest
        @return: DescribeImageFixTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_image_fix_task_with_options_async(request, runtime)

    def describe_image_grouped_vul_list_with_options(
        self,
        request: sas_20181203_models.DescribeImageGroupedVulListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageGroupedVulListResponse:
        """
        @summary Queries image vulnerabilities.
        
        @param request: DescribeImageGroupedVulListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageGroupedVulListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.alias_name):
            query['AliasName'] = request.alias_name
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.cve_id):
            query['CveId'] = request.cve_id
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.image_digest):
            query['ImageDigest'] = request.image_digest
        if not UtilClient.is_unset(request.image_layer):
            query['ImageLayer'] = request.image_layer
        if not UtilClient.is_unset(request.image_tag):
            query['ImageTag'] = request.image_tag
        if not UtilClient.is_unset(request.is_latest):
            query['IsLatest'] = request.is_latest
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.necessity):
            query['Necessity'] = request.necessity
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.patch_id):
            query['PatchId'] = request.patch_id
        if not UtilClient.is_unset(request.repo_id):
            query['RepoId'] = request.repo_id
        if not UtilClient.is_unset(request.repo_instance_id):
            query['RepoInstanceId'] = request.repo_instance_id
        if not UtilClient.is_unset(request.repo_name):
            query['RepoName'] = request.repo_name
        if not UtilClient.is_unset(request.repo_namespace):
            query['RepoNamespace'] = request.repo_namespace
        if not UtilClient.is_unset(request.repo_region_id):
            query['RepoRegionId'] = request.repo_region_id
        if not UtilClient.is_unset(request.rule_tag):
            query['RuleTag'] = request.rule_tag
        if not UtilClient.is_unset(request.scan_range):
            query['ScanRange'] = request.scan_range
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageGroupedVulList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageGroupedVulListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_image_grouped_vul_list_with_options_async(
        self,
        request: sas_20181203_models.DescribeImageGroupedVulListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageGroupedVulListResponse:
        """
        @summary Queries image vulnerabilities.
        
        @param request: DescribeImageGroupedVulListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageGroupedVulListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.alias_name):
            query['AliasName'] = request.alias_name
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.cve_id):
            query['CveId'] = request.cve_id
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.image_digest):
            query['ImageDigest'] = request.image_digest
        if not UtilClient.is_unset(request.image_layer):
            query['ImageLayer'] = request.image_layer
        if not UtilClient.is_unset(request.image_tag):
            query['ImageTag'] = request.image_tag
        if not UtilClient.is_unset(request.is_latest):
            query['IsLatest'] = request.is_latest
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.necessity):
            query['Necessity'] = request.necessity
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.patch_id):
            query['PatchId'] = request.patch_id
        if not UtilClient.is_unset(request.repo_id):
            query['RepoId'] = request.repo_id
        if not UtilClient.is_unset(request.repo_instance_id):
            query['RepoInstanceId'] = request.repo_instance_id
        if not UtilClient.is_unset(request.repo_name):
            query['RepoName'] = request.repo_name
        if not UtilClient.is_unset(request.repo_namespace):
            query['RepoNamespace'] = request.repo_namespace
        if not UtilClient.is_unset(request.repo_region_id):
            query['RepoRegionId'] = request.repo_region_id
        if not UtilClient.is_unset(request.rule_tag):
            query['RuleTag'] = request.rule_tag
        if not UtilClient.is_unset(request.scan_range):
            query['ScanRange'] = request.scan_range
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageGroupedVulList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageGroupedVulListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_image_grouped_vul_list(
        self,
        request: sas_20181203_models.DescribeImageGroupedVulListRequest,
    ) -> sas_20181203_models.DescribeImageGroupedVulListResponse:
        """
        @summary Queries image vulnerabilities.
        
        @param request: DescribeImageGroupedVulListRequest
        @return: DescribeImageGroupedVulListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_image_grouped_vul_list_with_options(request, runtime)

    async def describe_image_grouped_vul_list_async(
        self,
        request: sas_20181203_models.DescribeImageGroupedVulListRequest,
    ) -> sas_20181203_models.DescribeImageGroupedVulListResponse:
        """
        @summary Queries image vulnerabilities.
        
        @param request: DescribeImageGroupedVulListRequest
        @return: DescribeImageGroupedVulListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_image_grouped_vul_list_with_options_async(request, runtime)

    def describe_image_info_list_with_options(
        self,
        request: sas_20181203_models.DescribeImageInfoListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageInfoListResponse:
        """
        @summary Queries images.
        
        @param request: DescribeImageInfoListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageInfoListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageInfoList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageInfoListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_image_info_list_with_options_async(
        self,
        request: sas_20181203_models.DescribeImageInfoListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageInfoListResponse:
        """
        @summary Queries images.
        
        @param request: DescribeImageInfoListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageInfoListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageInfoList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageInfoListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_image_info_list(
        self,
        request: sas_20181203_models.DescribeImageInfoListRequest,
    ) -> sas_20181203_models.DescribeImageInfoListResponse:
        """
        @summary Queries images.
        
        @param request: DescribeImageInfoListRequest
        @return: DescribeImageInfoListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_image_info_list_with_options(request, runtime)

    async def describe_image_info_list_async(
        self,
        request: sas_20181203_models.DescribeImageInfoListRequest,
    ) -> sas_20181203_models.DescribeImageInfoListResponse:
        """
        @summary Queries images.
        
        @param request: DescribeImageInfoListRequest
        @return: DescribeImageInfoListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_image_info_list_with_options_async(request, runtime)

    def describe_image_instances_with_options(
        self,
        request: sas_20181203_models.DescribeImageInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageInstancesResponse:
        """
        @summary Queries information about images.
        
        @param request: DescribeImageInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageInstancesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.criteria):
            query['Criteria'] = request.criteria
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.logical_exp):
            query['LogicalExp'] = request.logical_exp
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.scanned):
            query['Scanned'] = request.scanned
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageInstances',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageInstancesResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_image_instances_with_options_async(
        self,
        request: sas_20181203_models.DescribeImageInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageInstancesResponse:
        """
        @summary Queries information about images.
        
        @param request: DescribeImageInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageInstancesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.criteria):
            query['Criteria'] = request.criteria
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.logical_exp):
            query['LogicalExp'] = request.logical_exp
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.scanned):
            query['Scanned'] = request.scanned
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageInstances',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageInstancesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_image_instances(
        self,
        request: sas_20181203_models.DescribeImageInstancesRequest,
    ) -> sas_20181203_models.DescribeImageInstancesResponse:
        """
        @summary Queries information about images.
        
        @param request: DescribeImageInstancesRequest
        @return: DescribeImageInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_image_instances_with_options(request, runtime)

    async def describe_image_instances_async(
        self,
        request: sas_20181203_models.DescribeImageInstancesRequest,
    ) -> sas_20181203_models.DescribeImageInstancesResponse:
        """
        @summary Queries information about images.
        
        @param request: DescribeImageInstancesRequest
        @return: DescribeImageInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_image_instances_with_options_async(request, runtime)

    def describe_image_latest_scan_task_with_options(
        self,
        request: sas_20181203_models.DescribeImageLatestScanTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageLatestScanTaskResponse:
        """
        @summary Queries the most recent scan task that is created for an image.
        
        @param request: DescribeImageLatestScanTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageLatestScanTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.digest):
            query['Digest'] = request.digest
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageLatestScanTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageLatestScanTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_image_latest_scan_task_with_options_async(
        self,
        request: sas_20181203_models.DescribeImageLatestScanTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageLatestScanTaskResponse:
        """
        @summary Queries the most recent scan task that is created for an image.
        
        @param request: DescribeImageLatestScanTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageLatestScanTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.digest):
            query['Digest'] = request.digest
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageLatestScanTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageLatestScanTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_image_latest_scan_task(
        self,
        request: sas_20181203_models.DescribeImageLatestScanTaskRequest,
    ) -> sas_20181203_models.DescribeImageLatestScanTaskResponse:
        """
        @summary Queries the most recent scan task that is created for an image.
        
        @param request: DescribeImageLatestScanTaskRequest
        @return: DescribeImageLatestScanTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_image_latest_scan_task_with_options(request, runtime)

    async def describe_image_latest_scan_task_async(
        self,
        request: sas_20181203_models.DescribeImageLatestScanTaskRequest,
    ) -> sas_20181203_models.DescribeImageLatestScanTaskResponse:
        """
        @summary Queries the most recent scan task that is created for an image.
        
        @param request: DescribeImageLatestScanTaskRequest
        @return: DescribeImageLatestScanTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_image_latest_scan_task_with_options_async(request, runtime)

    def describe_image_list_by_build_risk_with_options(
        self,
        request: sas_20181203_models.DescribeImageListByBuildRiskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageListByBuildRiskResponse:
        """
        @summary Queries a list of images that are affected by image build command risks by page.
        
        @param request: DescribeImageListByBuildRiskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageListByBuildRiskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.risk_key):
            query['RiskKey'] = request.risk_key
        if not UtilClient.is_unset(request.risk_level):
            query['RiskLevel'] = request.risk_level
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageListByBuildRisk',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageListByBuildRiskResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_image_list_by_build_risk_with_options_async(
        self,
        request: sas_20181203_models.DescribeImageListByBuildRiskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageListByBuildRiskResponse:
        """
        @summary Queries a list of images that are affected by image build command risks by page.
        
        @param request: DescribeImageListByBuildRiskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageListByBuildRiskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.risk_key):
            query['RiskKey'] = request.risk_key
        if not UtilClient.is_unset(request.risk_level):
            query['RiskLevel'] = request.risk_level
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageListByBuildRisk',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageListByBuildRiskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_image_list_by_build_risk(
        self,
        request: sas_20181203_models.DescribeImageListByBuildRiskRequest,
    ) -> sas_20181203_models.DescribeImageListByBuildRiskResponse:
        """
        @summary Queries a list of images that are affected by image build command risks by page.
        
        @param request: DescribeImageListByBuildRiskRequest
        @return: DescribeImageListByBuildRiskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_image_list_by_build_risk_with_options(request, runtime)

    async def describe_image_list_by_build_risk_async(
        self,
        request: sas_20181203_models.DescribeImageListByBuildRiskRequest,
    ) -> sas_20181203_models.DescribeImageListByBuildRiskResponse:
        """
        @summary Queries a list of images that are affected by image build command risks by page.
        
        @param request: DescribeImageListByBuildRiskRequest
        @return: DescribeImageListByBuildRiskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_image_list_by_build_risk_with_options_async(request, runtime)

    def describe_image_list_by_sensitive_file_with_options(
        self,
        tmp_req: sas_20181203_models.DescribeImageListBySensitiveFileRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageListBySensitiveFileResponse:
        """
        @summary Queries information about images that are affected by sensitive files.
        
        @param tmp_req: DescribeImageListBySensitiveFileRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageListBySensitiveFileResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.DescribeImageListBySensitiveFileShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.scan_range):
            request.scan_range_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.scan_range, 'ScanRange', 'json')
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.image_digest):
            query['ImageDigest'] = request.image_digest
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.repo_instance_id):
            query['RepoInstanceId'] = request.repo_instance_id
        if not UtilClient.is_unset(request.repo_name):
            query['RepoName'] = request.repo_name
        if not UtilClient.is_unset(request.repo_namespace):
            query['RepoNamespace'] = request.repo_namespace
        if not UtilClient.is_unset(request.risk_level):
            query['RiskLevel'] = request.risk_level
        if not UtilClient.is_unset(request.scan_range_shrink):
            query['ScanRange'] = request.scan_range_shrink
        if not UtilClient.is_unset(request.sensitive_file_key):
            query['SensitiveFileKey'] = request.sensitive_file_key
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageListBySensitiveFile',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageListBySensitiveFileResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_image_list_by_sensitive_file_with_options_async(
        self,
        tmp_req: sas_20181203_models.DescribeImageListBySensitiveFileRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageListBySensitiveFileResponse:
        """
        @summary Queries information about images that are affected by sensitive files.
        
        @param tmp_req: DescribeImageListBySensitiveFileRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageListBySensitiveFileResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.DescribeImageListBySensitiveFileShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.scan_range):
            request.scan_range_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.scan_range, 'ScanRange', 'json')
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.image_digest):
            query['ImageDigest'] = request.image_digest
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.repo_instance_id):
            query['RepoInstanceId'] = request.repo_instance_id
        if not UtilClient.is_unset(request.repo_name):
            query['RepoName'] = request.repo_name
        if not UtilClient.is_unset(request.repo_namespace):
            query['RepoNamespace'] = request.repo_namespace
        if not UtilClient.is_unset(request.risk_level):
            query['RiskLevel'] = request.risk_level
        if not UtilClient.is_unset(request.scan_range_shrink):
            query['ScanRange'] = request.scan_range_shrink
        if not UtilClient.is_unset(request.sensitive_file_key):
            query['SensitiveFileKey'] = request.sensitive_file_key
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageListBySensitiveFile',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageListBySensitiveFileResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_image_list_by_sensitive_file(
        self,
        request: sas_20181203_models.DescribeImageListBySensitiveFileRequest,
    ) -> sas_20181203_models.DescribeImageListBySensitiveFileResponse:
        """
        @summary Queries information about images that are affected by sensitive files.
        
        @param request: DescribeImageListBySensitiveFileRequest
        @return: DescribeImageListBySensitiveFileResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_image_list_by_sensitive_file_with_options(request, runtime)

    async def describe_image_list_by_sensitive_file_async(
        self,
        request: sas_20181203_models.DescribeImageListBySensitiveFileRequest,
    ) -> sas_20181203_models.DescribeImageListBySensitiveFileResponse:
        """
        @summary Queries information about images that are affected by sensitive files.
        
        @param request: DescribeImageListBySensitiveFileRequest
        @return: DescribeImageListBySensitiveFileResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_image_list_by_sensitive_file_with_options_async(request, runtime)

    def describe_image_list_with_baseline_name_with_options(
        self,
        request: sas_20181203_models.DescribeImageListWithBaselineNameRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageListWithBaselineNameResponse:
        """
        @summary Queries the details about images in the results of image baseline checks.
        
        @param request: DescribeImageListWithBaselineNameRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageListWithBaselineNameResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.baseline_name_key):
            query['BaselineNameKey'] = request.baseline_name_key
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.container_id):
            query['ContainerId'] = request.container_id
        if not UtilClient.is_unset(request.criteria):
            query['Criteria'] = request.criteria
        if not UtilClient.is_unset(request.criteria_type):
            query['CriteriaType'] = request.criteria_type
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.image):
            query['Image'] = request.image
        if not UtilClient.is_unset(request.image_digest):
            query['ImageDigest'] = request.image_digest
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.pod):
            query['Pod'] = request.pod
        if not UtilClient.is_unset(request.repo_instance_id):
            query['RepoInstanceId'] = request.repo_instance_id
        if not UtilClient.is_unset(request.repo_name):
            query['RepoName'] = request.repo_name
        if not UtilClient.is_unset(request.repo_namespace):
            query['RepoNamespace'] = request.repo_namespace
        if not UtilClient.is_unset(request.scan_range):
            query['ScanRange'] = request.scan_range
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageListWithBaselineName',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageListWithBaselineNameResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_image_list_with_baseline_name_with_options_async(
        self,
        request: sas_20181203_models.DescribeImageListWithBaselineNameRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageListWithBaselineNameResponse:
        """
        @summary Queries the details about images in the results of image baseline checks.
        
        @param request: DescribeImageListWithBaselineNameRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageListWithBaselineNameResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.baseline_name_key):
            query['BaselineNameKey'] = request.baseline_name_key
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.container_id):
            query['ContainerId'] = request.container_id
        if not UtilClient.is_unset(request.criteria):
            query['Criteria'] = request.criteria
        if not UtilClient.is_unset(request.criteria_type):
            query['CriteriaType'] = request.criteria_type
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.image):
            query['Image'] = request.image
        if not UtilClient.is_unset(request.image_digest):
            query['ImageDigest'] = request.image_digest
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.pod):
            query['Pod'] = request.pod
        if not UtilClient.is_unset(request.repo_instance_id):
            query['RepoInstanceId'] = request.repo_instance_id
        if not UtilClient.is_unset(request.repo_name):
            query['RepoName'] = request.repo_name
        if not UtilClient.is_unset(request.repo_namespace):
            query['RepoNamespace'] = request.repo_namespace
        if not UtilClient.is_unset(request.scan_range):
            query['ScanRange'] = request.scan_range
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageListWithBaselineName',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageListWithBaselineNameResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_image_list_with_baseline_name(
        self,
        request: sas_20181203_models.DescribeImageListWithBaselineNameRequest,
    ) -> sas_20181203_models.DescribeImageListWithBaselineNameResponse:
        """
        @summary Queries the details about images in the results of image baseline checks.
        
        @param request: DescribeImageListWithBaselineNameRequest
        @return: DescribeImageListWithBaselineNameResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_image_list_with_baseline_name_with_options(request, runtime)

    async def describe_image_list_with_baseline_name_async(
        self,
        request: sas_20181203_models.DescribeImageListWithBaselineNameRequest,
    ) -> sas_20181203_models.DescribeImageListWithBaselineNameResponse:
        """
        @summary Queries the details about images in the results of image baseline checks.
        
        @param request: DescribeImageListWithBaselineNameRequest
        @return: DescribeImageListWithBaselineNameResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_image_list_with_baseline_name_with_options_async(request, runtime)

    def describe_image_repo_criteria_with_options(
        self,
        request: sas_20181203_models.DescribeImageRepoCriteriaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageRepoCriteriaResponse:
        """
        @summary Obtains the filter conditions that are supported by the image repository.
        
        @param request: DescribeImageRepoCriteriaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageRepoCriteriaResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.value):
            query['Value'] = request.value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageRepoCriteria',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageRepoCriteriaResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_image_repo_criteria_with_options_async(
        self,
        request: sas_20181203_models.DescribeImageRepoCriteriaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageRepoCriteriaResponse:
        """
        @summary Obtains the filter conditions that are supported by the image repository.
        
        @param request: DescribeImageRepoCriteriaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageRepoCriteriaResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.value):
            query['Value'] = request.value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageRepoCriteria',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageRepoCriteriaResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_image_repo_criteria(
        self,
        request: sas_20181203_models.DescribeImageRepoCriteriaRequest,
    ) -> sas_20181203_models.DescribeImageRepoCriteriaResponse:
        """
        @summary Obtains the filter conditions that are supported by the image repository.
        
        @param request: DescribeImageRepoCriteriaRequest
        @return: DescribeImageRepoCriteriaResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_image_repo_criteria_with_options(request, runtime)

    async def describe_image_repo_criteria_async(
        self,
        request: sas_20181203_models.DescribeImageRepoCriteriaRequest,
    ) -> sas_20181203_models.DescribeImageRepoCriteriaResponse:
        """
        @summary Obtains the filter conditions that are supported by the image repository.
        
        @param request: DescribeImageRepoCriteriaRequest
        @return: DescribeImageRepoCriteriaResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_image_repo_criteria_with_options_async(request, runtime)

    def describe_image_repo_detail_list_with_options(
        self,
        request: sas_20181203_models.DescribeImageRepoDetailListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageRepoDetailListResponse:
        """
        @summary Queries the information about image repositories.
        
        @param request: DescribeImageRepoDetailListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageRepoDetailListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.criteria):
            query['Criteria'] = request.criteria
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.logical_exp):
            query['LogicalExp'] = request.logical_exp
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageRepoDetailList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageRepoDetailListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_image_repo_detail_list_with_options_async(
        self,
        request: sas_20181203_models.DescribeImageRepoDetailListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageRepoDetailListResponse:
        """
        @summary Queries the information about image repositories.
        
        @param request: DescribeImageRepoDetailListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageRepoDetailListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.criteria):
            query['Criteria'] = request.criteria
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.logical_exp):
            query['LogicalExp'] = request.logical_exp
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageRepoDetailList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageRepoDetailListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_image_repo_detail_list(
        self,
        request: sas_20181203_models.DescribeImageRepoDetailListRequest,
    ) -> sas_20181203_models.DescribeImageRepoDetailListResponse:
        """
        @summary Queries the information about image repositories.
        
        @param request: DescribeImageRepoDetailListRequest
        @return: DescribeImageRepoDetailListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_image_repo_detail_list_with_options(request, runtime)

    async def describe_image_repo_detail_list_async(
        self,
        request: sas_20181203_models.DescribeImageRepoDetailListRequest,
    ) -> sas_20181203_models.DescribeImageRepoDetailListResponse:
        """
        @summary Queries the information about image repositories.
        
        @param request: DescribeImageRepoDetailListRequest
        @return: DescribeImageRepoDetailListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_image_repo_detail_list_with_options_async(request, runtime)

    def describe_image_repo_list_with_options(
        self,
        request: sas_20181203_models.DescribeImageRepoListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageRepoListResponse:
        """
        @summary Queries the statistics and configurations of the feature that protects images.
        
        @param request: DescribeImageRepoListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageRepoListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.field_name):
            query['FieldName'] = request.field_name
        if not UtilClient.is_unset(request.field_value):
            query['FieldValue'] = request.field_value
        if not UtilClient.is_unset(request.operate_type):
            query['OperateType'] = request.operate_type
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.repo_name):
            query['RepoName'] = request.repo_name
        if not UtilClient.is_unset(request.repo_namespace):
            query['RepoNamespace'] = request.repo_namespace
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageRepoList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageRepoListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_image_repo_list_with_options_async(
        self,
        request: sas_20181203_models.DescribeImageRepoListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageRepoListResponse:
        """
        @summary Queries the statistics and configurations of the feature that protects images.
        
        @param request: DescribeImageRepoListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageRepoListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.field_name):
            query['FieldName'] = request.field_name
        if not UtilClient.is_unset(request.field_value):
            query['FieldValue'] = request.field_value
        if not UtilClient.is_unset(request.operate_type):
            query['OperateType'] = request.operate_type
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.repo_name):
            query['RepoName'] = request.repo_name
        if not UtilClient.is_unset(request.repo_namespace):
            query['RepoNamespace'] = request.repo_namespace
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageRepoList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageRepoListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_image_repo_list(
        self,
        request: sas_20181203_models.DescribeImageRepoListRequest,
    ) -> sas_20181203_models.DescribeImageRepoListResponse:
        """
        @summary Queries the statistics and configurations of the feature that protects images.
        
        @param request: DescribeImageRepoListRequest
        @return: DescribeImageRepoListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_image_repo_list_with_options(request, runtime)

    async def describe_image_repo_list_async(
        self,
        request: sas_20181203_models.DescribeImageRepoListRequest,
    ) -> sas_20181203_models.DescribeImageRepoListResponse:
        """
        @summary Queries the statistics and configurations of the feature that protects images.
        
        @param request: DescribeImageRepoListRequest
        @return: DescribeImageRepoListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_image_repo_list_with_options_async(request, runtime)

    def describe_image_risk_level_statistic_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageRiskLevelStatisticResponse:
        """
        @summary Queries the number of images on which security alerts are generated. Security alerts are generated for risks such as vulnerabilities, baselines risks, and malicious samples.
        
        @param request: DescribeImageRiskLevelStatisticRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageRiskLevelStatisticResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeImageRiskLevelStatistic',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageRiskLevelStatisticResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_image_risk_level_statistic_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageRiskLevelStatisticResponse:
        """
        @summary Queries the number of images on which security alerts are generated. Security alerts are generated for risks such as vulnerabilities, baselines risks, and malicious samples.
        
        @param request: DescribeImageRiskLevelStatisticRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageRiskLevelStatisticResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeImageRiskLevelStatistic',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageRiskLevelStatisticResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_image_risk_level_statistic(self) -> sas_20181203_models.DescribeImageRiskLevelStatisticResponse:
        """
        @summary Queries the number of images on which security alerts are generated. Security alerts are generated for risks such as vulnerabilities, baselines risks, and malicious samples.
        
        @return: DescribeImageRiskLevelStatisticResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_image_risk_level_statistic_with_options(runtime)

    async def describe_image_risk_level_statistic_async(self) -> sas_20181203_models.DescribeImageRiskLevelStatisticResponse:
        """
        @summary Queries the number of images on which security alerts are generated. Security alerts are generated for risks such as vulnerabilities, baselines risks, and malicious samples.
        
        @return: DescribeImageRiskLevelStatisticResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_image_risk_level_statistic_with_options_async(runtime)

    def describe_image_scan_auth_count_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageScanAuthCountResponse:
        """
        @summary Queries the details of the quota for container image scan.
        
        @param request: DescribeImageScanAuthCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageScanAuthCountResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeImageScanAuthCount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageScanAuthCountResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_image_scan_auth_count_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageScanAuthCountResponse:
        """
        @summary Queries the details of the quota for container image scan.
        
        @param request: DescribeImageScanAuthCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageScanAuthCountResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeImageScanAuthCount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageScanAuthCountResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_image_scan_auth_count(self) -> sas_20181203_models.DescribeImageScanAuthCountResponse:
        """
        @summary Queries the details of the quota for container image scan.
        
        @return: DescribeImageScanAuthCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_image_scan_auth_count_with_options(runtime)

    async def describe_image_scan_auth_count_async(self) -> sas_20181203_models.DescribeImageScanAuthCountResponse:
        """
        @summary Queries the details of the quota for container image scan.
        
        @return: DescribeImageScanAuthCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_image_scan_auth_count_with_options_async(runtime)

    def describe_image_security_scan_count_with_options(
        self,
        request: sas_20181203_models.DescribeImageSecurityScanCountRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageSecurityScanCountResponse:
        """
        @summary Queries the number of security events detected on an image.
        
        @param request: DescribeImageSecurityScanCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageSecurityScanCountResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.dealed):
            query['Dealed'] = request.dealed
        if not UtilClient.is_unset(request.image_digest):
            query['ImageDigest'] = request.image_digest
        if not UtilClient.is_unset(request.image_tag):
            query['ImageTag'] = request.image_tag
        if not UtilClient.is_unset(request.image_uuid):
            query['ImageUuid'] = request.image_uuid
        if not UtilClient.is_unset(request.repo_id):
            query['RepoId'] = request.repo_id
        if not UtilClient.is_unset(request.repo_instance_id):
            query['RepoInstanceId'] = request.repo_instance_id
        if not UtilClient.is_unset(request.repo_region_id):
            query['RepoRegionId'] = request.repo_region_id
        if not UtilClient.is_unset(request.scan_range):
            query['ScanRange'] = request.scan_range
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageSecurityScanCount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageSecurityScanCountResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_image_security_scan_count_with_options_async(
        self,
        request: sas_20181203_models.DescribeImageSecurityScanCountRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageSecurityScanCountResponse:
        """
        @summary Queries the number of security events detected on an image.
        
        @param request: DescribeImageSecurityScanCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageSecurityScanCountResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.dealed):
            query['Dealed'] = request.dealed
        if not UtilClient.is_unset(request.image_digest):
            query['ImageDigest'] = request.image_digest
        if not UtilClient.is_unset(request.image_tag):
            query['ImageTag'] = request.image_tag
        if not UtilClient.is_unset(request.image_uuid):
            query['ImageUuid'] = request.image_uuid
        if not UtilClient.is_unset(request.repo_id):
            query['RepoId'] = request.repo_id
        if not UtilClient.is_unset(request.repo_instance_id):
            query['RepoInstanceId'] = request.repo_instance_id
        if not UtilClient.is_unset(request.repo_region_id):
            query['RepoRegionId'] = request.repo_region_id
        if not UtilClient.is_unset(request.scan_range):
            query['ScanRange'] = request.scan_range
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageSecurityScanCount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageSecurityScanCountResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_image_security_scan_count(
        self,
        request: sas_20181203_models.DescribeImageSecurityScanCountRequest,
    ) -> sas_20181203_models.DescribeImageSecurityScanCountResponse:
        """
        @summary Queries the number of security events detected on an image.
        
        @param request: DescribeImageSecurityScanCountRequest
        @return: DescribeImageSecurityScanCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_image_security_scan_count_with_options(request, runtime)

    async def describe_image_security_scan_count_async(
        self,
        request: sas_20181203_models.DescribeImageSecurityScanCountRequest,
    ) -> sas_20181203_models.DescribeImageSecurityScanCountResponse:
        """
        @summary Queries the number of security events detected on an image.
        
        @param request: DescribeImageSecurityScanCountRequest
        @return: DescribeImageSecurityScanCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_image_security_scan_count_with_options_async(request, runtime)

    def describe_image_sensitive_file_by_key_with_options(
        self,
        tmp_req: sas_20181203_models.DescribeImageSensitiveFileByKeyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageSensitiveFileByKeyResponse:
        """
        @summary Queries the sensitive files in an image.
        
        @param tmp_req: DescribeImageSensitiveFileByKeyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageSensitiveFileByKeyResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.DescribeImageSensitiveFileByKeyShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.scan_range):
            request.scan_range_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.scan_range, 'ScanRange', 'json')
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.image_uuid):
            query['ImageUuid'] = request.image_uuid
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.scan_range_shrink):
            query['ScanRange'] = request.scan_range_shrink
        if not UtilClient.is_unset(request.sensitive_file_key):
            query['SensitiveFileKey'] = request.sensitive_file_key
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageSensitiveFileByKey',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageSensitiveFileByKeyResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_image_sensitive_file_by_key_with_options_async(
        self,
        tmp_req: sas_20181203_models.DescribeImageSensitiveFileByKeyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageSensitiveFileByKeyResponse:
        """
        @summary Queries the sensitive files in an image.
        
        @param tmp_req: DescribeImageSensitiveFileByKeyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageSensitiveFileByKeyResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.DescribeImageSensitiveFileByKeyShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.scan_range):
            request.scan_range_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.scan_range, 'ScanRange', 'json')
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.image_uuid):
            query['ImageUuid'] = request.image_uuid
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.scan_range_shrink):
            query['ScanRange'] = request.scan_range_shrink
        if not UtilClient.is_unset(request.sensitive_file_key):
            query['SensitiveFileKey'] = request.sensitive_file_key
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageSensitiveFileByKey',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageSensitiveFileByKeyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_image_sensitive_file_by_key(
        self,
        request: sas_20181203_models.DescribeImageSensitiveFileByKeyRequest,
    ) -> sas_20181203_models.DescribeImageSensitiveFileByKeyResponse:
        """
        @summary Queries the sensitive files in an image.
        
        @param request: DescribeImageSensitiveFileByKeyRequest
        @return: DescribeImageSensitiveFileByKeyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_image_sensitive_file_by_key_with_options(request, runtime)

    async def describe_image_sensitive_file_by_key_async(
        self,
        request: sas_20181203_models.DescribeImageSensitiveFileByKeyRequest,
    ) -> sas_20181203_models.DescribeImageSensitiveFileByKeyResponse:
        """
        @summary Queries the sensitive files in an image.
        
        @param request: DescribeImageSensitiveFileByKeyRequest
        @return: DescribeImageSensitiveFileByKeyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_image_sensitive_file_by_key_with_options_async(request, runtime)

    def describe_image_sensitive_file_list_with_options(
        self,
        tmp_req: sas_20181203_models.DescribeImageSensitiveFileListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageSensitiveFileListResponse:
        """
        @summary Queries information about sensitive files.
        
        @param tmp_req: DescribeImageSensitiveFileListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageSensitiveFileListResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.DescribeImageSensitiveFileListShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.scan_range):
            request.scan_range_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.scan_range, 'ScanRange', 'json')
        query = {}
        if not UtilClient.is_unset(request.criteria):
            query['Criteria'] = request.criteria
        if not UtilClient.is_unset(request.criteria_type):
            query['CriteriaType'] = request.criteria_type
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.image_uuid):
            query['ImageUuid'] = request.image_uuid
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.risk_level):
            query['RiskLevel'] = request.risk_level
        if not UtilClient.is_unset(request.scan_range_shrink):
            query['ScanRange'] = request.scan_range_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageSensitiveFileList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageSensitiveFileListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_image_sensitive_file_list_with_options_async(
        self,
        tmp_req: sas_20181203_models.DescribeImageSensitiveFileListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageSensitiveFileListResponse:
        """
        @summary Queries information about sensitive files.
        
        @param tmp_req: DescribeImageSensitiveFileListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageSensitiveFileListResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.DescribeImageSensitiveFileListShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.scan_range):
            request.scan_range_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.scan_range, 'ScanRange', 'json')
        query = {}
        if not UtilClient.is_unset(request.criteria):
            query['Criteria'] = request.criteria
        if not UtilClient.is_unset(request.criteria_type):
            query['CriteriaType'] = request.criteria_type
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.image_uuid):
            query['ImageUuid'] = request.image_uuid
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.risk_level):
            query['RiskLevel'] = request.risk_level
        if not UtilClient.is_unset(request.scan_range_shrink):
            query['ScanRange'] = request.scan_range_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageSensitiveFileList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageSensitiveFileListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_image_sensitive_file_list(
        self,
        request: sas_20181203_models.DescribeImageSensitiveFileListRequest,
    ) -> sas_20181203_models.DescribeImageSensitiveFileListResponse:
        """
        @summary Queries information about sensitive files.
        
        @param request: DescribeImageSensitiveFileListRequest
        @return: DescribeImageSensitiveFileListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_image_sensitive_file_list_with_options(request, runtime)

    async def describe_image_sensitive_file_list_async(
        self,
        request: sas_20181203_models.DescribeImageSensitiveFileListRequest,
    ) -> sas_20181203_models.DescribeImageSensitiveFileListResponse:
        """
        @summary Queries information about sensitive files.
        
        @param request: DescribeImageSensitiveFileListRequest
        @return: DescribeImageSensitiveFileListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_image_sensitive_file_list_with_options_async(request, runtime)

    def describe_image_statistics_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageStatisticsResponse:
        """
        @summary Queries the risk statistics on container images.
        
        @description Security Center can scan for security risks and collect statistics only for *Container Registry Enterprise Edition instances**.
        >  Security Center cannot scan for security risks or collect statistics for *default** Container Registry instances.
        
        @param request: DescribeImageStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageStatisticsResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeImageStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageStatisticsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_image_statistics_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageStatisticsResponse:
        """
        @summary Queries the risk statistics on container images.
        
        @description Security Center can scan for security risks and collect statistics only for *Container Registry Enterprise Edition instances**.
        >  Security Center cannot scan for security risks or collect statistics for *default** Container Registry instances.
        
        @param request: DescribeImageStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageStatisticsResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeImageStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageStatisticsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_image_statistics(self) -> sas_20181203_models.DescribeImageStatisticsResponse:
        """
        @summary Queries the risk statistics on container images.
        
        @description Security Center can scan for security risks and collect statistics only for *Container Registry Enterprise Edition instances**.
        >  Security Center cannot scan for security risks or collect statistics for *default** Container Registry instances.
        
        @return: DescribeImageStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_image_statistics_with_options(runtime)

    async def describe_image_statistics_async(self) -> sas_20181203_models.DescribeImageStatisticsResponse:
        """
        @summary Queries the risk statistics on container images.
        
        @description Security Center can scan for security risks and collect statistics only for *Container Registry Enterprise Edition instances**.
        >  Security Center cannot scan for security risks or collect statistics for *default** Container Registry instances.
        
        @return: DescribeImageStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_image_statistics_with_options_async(runtime)

    def describe_image_vul_list_with_options(
        self,
        request: sas_20181203_models.DescribeImageVulListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageVulListResponse:
        """
        @summary Queries the details of vulnerabilities that are detected by using container image scan and the affected images.
        
        @description To query the information about the recently detected image vulnerabilities, call the [PublicCreateImageScanTask](https://help.aliyun.com/document_detail/411723.html) operation. Wait 1 to 5 minutes until the call is successful and call the DescribeImageVulList operation.
        
        @param request: DescribeImageVulListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageVulListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.alias_name):
            query['AliasName'] = request.alias_name
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.container_id):
            query['ContainerId'] = request.container_id
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.dealed):
            query['Dealed'] = request.dealed
        if not UtilClient.is_unset(request.digest):
            query['Digest'] = request.digest
        if not UtilClient.is_unset(request.image):
            query['Image'] = request.image
        if not UtilClient.is_unset(request.instance_id):
            query['InstanceId'] = request.instance_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        if not UtilClient.is_unset(request.necessity):
            query['Necessity'] = request.necessity
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.pod):
            query['Pod'] = request.pod
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        if not UtilClient.is_unset(request.repo_id):
            query['RepoId'] = request.repo_id
        if not UtilClient.is_unset(request.repo_id):
            query['RepoId'] = request.repo_id
        if not UtilClient.is_unset(request.repo_instance_id):
            query['RepoInstanceId'] = request.repo_instance_id
        if not UtilClient.is_unset(request.repo_name):
            query['RepoName'] = request.repo_name
        if not UtilClient.is_unset(request.repo_name):
            query['RepoName'] = request.repo_name
        if not UtilClient.is_unset(request.repo_namespace):
            query['RepoNamespace'] = request.repo_namespace
        if not UtilClient.is_unset(request.repo_region_id):
            query['RepoRegionId'] = request.repo_region_id
        if not UtilClient.is_unset(request.rule_tag):
            query['RuleTag'] = request.rule_tag
        if not UtilClient.is_unset(request.scan_range):
            query['ScanRange'] = request.scan_range
        if not UtilClient.is_unset(request.status_list):
            query['StatusList'] = request.status_list
        if not UtilClient.is_unset(request.tag):
            query['Tag'] = request.tag
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageVulList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageVulListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_image_vul_list_with_options_async(
        self,
        request: sas_20181203_models.DescribeImageVulListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageVulListResponse:
        """
        @summary Queries the details of vulnerabilities that are detected by using container image scan and the affected images.
        
        @description To query the information about the recently detected image vulnerabilities, call the [PublicCreateImageScanTask](https://help.aliyun.com/document_detail/411723.html) operation. Wait 1 to 5 minutes until the call is successful and call the DescribeImageVulList operation.
        
        @param request: DescribeImageVulListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageVulListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.alias_name):
            query['AliasName'] = request.alias_name
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.container_id):
            query['ContainerId'] = request.container_id
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.dealed):
            query['Dealed'] = request.dealed
        if not UtilClient.is_unset(request.digest):
            query['Digest'] = request.digest
        if not UtilClient.is_unset(request.image):
            query['Image'] = request.image
        if not UtilClient.is_unset(request.instance_id):
            query['InstanceId'] = request.instance_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        if not UtilClient.is_unset(request.necessity):
            query['Necessity'] = request.necessity
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.pod):
            query['Pod'] = request.pod
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        if not UtilClient.is_unset(request.repo_id):
            query['RepoId'] = request.repo_id
        if not UtilClient.is_unset(request.repo_id):
            query['RepoId'] = request.repo_id
        if not UtilClient.is_unset(request.repo_instance_id):
            query['RepoInstanceId'] = request.repo_instance_id
        if not UtilClient.is_unset(request.repo_name):
            query['RepoName'] = request.repo_name
        if not UtilClient.is_unset(request.repo_name):
            query['RepoName'] = request.repo_name
        if not UtilClient.is_unset(request.repo_namespace):
            query['RepoNamespace'] = request.repo_namespace
        if not UtilClient.is_unset(request.repo_region_id):
            query['RepoRegionId'] = request.repo_region_id
        if not UtilClient.is_unset(request.rule_tag):
            query['RuleTag'] = request.rule_tag
        if not UtilClient.is_unset(request.scan_range):
            query['ScanRange'] = request.scan_range
        if not UtilClient.is_unset(request.status_list):
            query['StatusList'] = request.status_list
        if not UtilClient.is_unset(request.tag):
            query['Tag'] = request.tag
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageVulList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageVulListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_image_vul_list(
        self,
        request: sas_20181203_models.DescribeImageVulListRequest,
    ) -> sas_20181203_models.DescribeImageVulListResponse:
        """
        @summary Queries the details of vulnerabilities that are detected by using container image scan and the affected images.
        
        @description To query the information about the recently detected image vulnerabilities, call the [PublicCreateImageScanTask](https://help.aliyun.com/document_detail/411723.html) operation. Wait 1 to 5 minutes until the call is successful and call the DescribeImageVulList operation.
        
        @param request: DescribeImageVulListRequest
        @return: DescribeImageVulListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_image_vul_list_with_options(request, runtime)

    async def describe_image_vul_list_async(
        self,
        request: sas_20181203_models.DescribeImageVulListRequest,
    ) -> sas_20181203_models.DescribeImageVulListResponse:
        """
        @summary Queries the details of vulnerabilities that are detected by using container image scan and the affected images.
        
        @description To query the information about the recently detected image vulnerabilities, call the [PublicCreateImageScanTask](https://help.aliyun.com/document_detail/411723.html) operation. Wait 1 to 5 minutes until the call is successful and call the DescribeImageVulList operation.
        
        @param request: DescribeImageVulListRequest
        @return: DescribeImageVulListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_image_vul_list_with_options_async(request, runtime)

    def describe_image_vul_white_list_with_options(
        self,
        request: sas_20181203_models.DescribeImageVulWhiteListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageVulWhiteListResponse:
        """
        @summary Queries the whitelist of image vulnerabilities.
        
        @param request: DescribeImageVulWhiteListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageVulWhiteListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.alias_name):
            query['AliasName'] = request.alias_name
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageVulWhiteList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageVulWhiteListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_image_vul_white_list_with_options_async(
        self,
        request: sas_20181203_models.DescribeImageVulWhiteListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeImageVulWhiteListResponse:
        """
        @summary Queries the whitelist of image vulnerabilities.
        
        @param request: DescribeImageVulWhiteListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeImageVulWhiteListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.alias_name):
            query['AliasName'] = request.alias_name
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeImageVulWhiteList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeImageVulWhiteListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_image_vul_white_list(
        self,
        request: sas_20181203_models.DescribeImageVulWhiteListRequest,
    ) -> sas_20181203_models.DescribeImageVulWhiteListResponse:
        """
        @summary Queries the whitelist of image vulnerabilities.
        
        @param request: DescribeImageVulWhiteListRequest
        @return: DescribeImageVulWhiteListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_image_vul_white_list_with_options(request, runtime)

    async def describe_image_vul_white_list_async(
        self,
        request: sas_20181203_models.DescribeImageVulWhiteListRequest,
    ) -> sas_20181203_models.DescribeImageVulWhiteListResponse:
        """
        @summary Queries the whitelist of image vulnerabilities.
        
        @param request: DescribeImageVulWhiteListRequest
        @return: DescribeImageVulWhiteListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_image_vul_white_list_with_options_async(request, runtime)

    def describe_install_captcha_with_options(
        self,
        request: sas_20181203_models.DescribeInstallCaptchaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeInstallCaptchaResponse:
        """
        @summary Queries the verification codes that are used to manually install the Security Center agent.
        
        @param request: DescribeInstallCaptchaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeInstallCaptchaResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.deadline):
            query['Deadline'] = request.deadline
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeInstallCaptcha',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeInstallCaptchaResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_install_captcha_with_options_async(
        self,
        request: sas_20181203_models.DescribeInstallCaptchaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeInstallCaptchaResponse:
        """
        @summary Queries the verification codes that are used to manually install the Security Center agent.
        
        @param request: DescribeInstallCaptchaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeInstallCaptchaResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.deadline):
            query['Deadline'] = request.deadline
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeInstallCaptcha',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeInstallCaptchaResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_install_captcha(
        self,
        request: sas_20181203_models.DescribeInstallCaptchaRequest,
    ) -> sas_20181203_models.DescribeInstallCaptchaResponse:
        """
        @summary Queries the verification codes that are used to manually install the Security Center agent.
        
        @param request: DescribeInstallCaptchaRequest
        @return: DescribeInstallCaptchaResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_install_captcha_with_options(request, runtime)

    async def describe_install_captcha_async(
        self,
        request: sas_20181203_models.DescribeInstallCaptchaRequest,
    ) -> sas_20181203_models.DescribeInstallCaptchaResponse:
        """
        @summary Queries the verification codes that are used to manually install the Security Center agent.
        
        @param request: DescribeInstallCaptchaRequest
        @return: DescribeInstallCaptchaResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_install_captcha_with_options_async(request, runtime)

    def describe_install_code_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeInstallCodeResponse:
        """
        @summary Queries the installation verification code that is used to run the installation command of the Security Center agent.
        
        @param request: DescribeInstallCodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeInstallCodeResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeInstallCode',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeInstallCodeResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_install_code_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeInstallCodeResponse:
        """
        @summary Queries the installation verification code that is used to run the installation command of the Security Center agent.
        
        @param request: DescribeInstallCodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeInstallCodeResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeInstallCode',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeInstallCodeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_install_code(self) -> sas_20181203_models.DescribeInstallCodeResponse:
        """
        @summary Queries the installation verification code that is used to run the installation command of the Security Center agent.
        
        @return: DescribeInstallCodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_install_code_with_options(runtime)

    async def describe_install_code_async(self) -> sas_20181203_models.DescribeInstallCodeResponse:
        """
        @summary Queries the installation verification code that is used to run the installation command of the Security Center agent.
        
        @return: DescribeInstallCodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_install_code_with_options_async(runtime)

    def describe_install_codes_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeInstallCodesResponse:
        """
        @summary Queries the commands that are used to manually install the Security Center Agent.
        
        @description You can call this operation to query the commands that are used to manually install the Security Center agent on the server. The return result contains the installation verification code and the server information. If you want to manually install the Security Center agent on your server, you can call this operation to query installation commands.
        ### QPS limit
        You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
        
        @param request: DescribeInstallCodesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeInstallCodesResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeInstallCodes',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeInstallCodesResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_install_codes_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeInstallCodesResponse:
        """
        @summary Queries the commands that are used to manually install the Security Center Agent.
        
        @description You can call this operation to query the commands that are used to manually install the Security Center agent on the server. The return result contains the installation verification code and the server information. If you want to manually install the Security Center agent on your server, you can call this operation to query installation commands.
        ### QPS limit
        You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
        
        @param request: DescribeInstallCodesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeInstallCodesResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeInstallCodes',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeInstallCodesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_install_codes(self) -> sas_20181203_models.DescribeInstallCodesResponse:
        """
        @summary Queries the commands that are used to manually install the Security Center Agent.
        
        @description You can call this operation to query the commands that are used to manually install the Security Center agent on the server. The return result contains the installation verification code and the server information. If you want to manually install the Security Center agent on your server, you can call this operation to query installation commands.
        ### QPS limit
        You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
        
        @return: DescribeInstallCodesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_install_codes_with_options(runtime)

    async def describe_install_codes_async(self) -> sas_20181203_models.DescribeInstallCodesResponse:
        """
        @summary Queries the commands that are used to manually install the Security Center Agent.
        
        @description You can call this operation to query the commands that are used to manually install the Security Center agent on the server. The return result contains the installation verification code and the server information. If you want to manually install the Security Center agent on your server, you can call this operation to query installation commands.
        ### QPS limit
        You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
        
        @return: DescribeInstallCodesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_install_codes_with_options_async(runtime)

    def describe_instance_anti_brute_force_rules_with_options(
        self,
        request: sas_20181203_models.DescribeInstanceAntiBruteForceRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeInstanceAntiBruteForceRulesResponse:
        """
        @summary Queries the information about servers to which a defense rule against brute-force attacks is applied.
        
        @param request: DescribeInstanceAntiBruteForceRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeInstanceAntiBruteForceRulesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeInstanceAntiBruteForceRules',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeInstanceAntiBruteForceRulesResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_instance_anti_brute_force_rules_with_options_async(
        self,
        request: sas_20181203_models.DescribeInstanceAntiBruteForceRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeInstanceAntiBruteForceRulesResponse:
        """
        @summary Queries the information about servers to which a defense rule against brute-force attacks is applied.
        
        @param request: DescribeInstanceAntiBruteForceRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeInstanceAntiBruteForceRulesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeInstanceAntiBruteForceRules',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeInstanceAntiBruteForceRulesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_instance_anti_brute_force_rules(
        self,
        request: sas_20181203_models.DescribeInstanceAntiBruteForceRulesRequest,
    ) -> sas_20181203_models.DescribeInstanceAntiBruteForceRulesResponse:
        """
        @summary Queries the information about servers to which a defense rule against brute-force attacks is applied.
        
        @param request: DescribeInstanceAntiBruteForceRulesRequest
        @return: DescribeInstanceAntiBruteForceRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_instance_anti_brute_force_rules_with_options(request, runtime)

    async def describe_instance_anti_brute_force_rules_async(
        self,
        request: sas_20181203_models.DescribeInstanceAntiBruteForceRulesRequest,
    ) -> sas_20181203_models.DescribeInstanceAntiBruteForceRulesResponse:
        """
        @summary Queries the information about servers to which a defense rule against brute-force attacks is applied.
        
        @param request: DescribeInstanceAntiBruteForceRulesRequest
        @return: DescribeInstanceAntiBruteForceRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_instance_anti_brute_force_rules_with_options_async(request, runtime)

    def describe_instance_reboot_status_with_options(
        self,
        request: sas_20181203_models.DescribeInstanceRebootStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeInstanceRebootStatusResponse:
        """
        @summary Queries the status of the instance that you restart.
        
        @param request: DescribeInstanceRebootStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeInstanceRebootStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeInstanceRebootStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeInstanceRebootStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_instance_reboot_status_with_options_async(
        self,
        request: sas_20181203_models.DescribeInstanceRebootStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeInstanceRebootStatusResponse:
        """
        @summary Queries the status of the instance that you restart.
        
        @param request: DescribeInstanceRebootStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeInstanceRebootStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeInstanceRebootStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeInstanceRebootStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_instance_reboot_status(
        self,
        request: sas_20181203_models.DescribeInstanceRebootStatusRequest,
    ) -> sas_20181203_models.DescribeInstanceRebootStatusResponse:
        """
        @summary Queries the status of the instance that you restart.
        
        @param request: DescribeInstanceRebootStatusRequest
        @return: DescribeInstanceRebootStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_instance_reboot_status_with_options(request, runtime)

    async def describe_instance_reboot_status_async(
        self,
        request: sas_20181203_models.DescribeInstanceRebootStatusRequest,
    ) -> sas_20181203_models.DescribeInstanceRebootStatusResponse:
        """
        @summary Queries the status of the instance that you restart.
        
        @param request: DescribeInstanceRebootStatusRequest
        @return: DescribeInstanceRebootStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_instance_reboot_status_with_options_async(request, runtime)

    def describe_instance_statistics_with_options(
        self,
        request: sas_20181203_models.DescribeInstanceStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeInstanceStatisticsResponse:
        """
        @summary Queries the statistics of assets that are protected by Security Center.
        
        @param request: DescribeInstanceStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeInstanceStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeInstanceStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeInstanceStatisticsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_instance_statistics_with_options_async(
        self,
        request: sas_20181203_models.DescribeInstanceStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeInstanceStatisticsResponse:
        """
        @summary Queries the statistics of assets that are protected by Security Center.
        
        @param request: DescribeInstanceStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeInstanceStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeInstanceStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeInstanceStatisticsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_instance_statistics(
        self,
        request: sas_20181203_models.DescribeInstanceStatisticsRequest,
    ) -> sas_20181203_models.DescribeInstanceStatisticsResponse:
        """
        @summary Queries the statistics of assets that are protected by Security Center.
        
        @param request: DescribeInstanceStatisticsRequest
        @return: DescribeInstanceStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_instance_statistics_with_options(request, runtime)

    async def describe_instance_statistics_async(
        self,
        request: sas_20181203_models.DescribeInstanceStatisticsRequest,
    ) -> sas_20181203_models.DescribeInstanceStatisticsResponse:
        """
        @summary Queries the statistics of assets that are protected by Security Center.
        
        @param request: DescribeInstanceStatisticsRequest
        @return: DescribeInstanceStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_instance_statistics_with_options_async(request, runtime)

    def describe_instance_vul_statistics_with_options(
        self,
        request: sas_20181203_models.DescribeInstanceVulStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeInstanceVulStatisticsResponse:
        """
        @summary Queries the statistics of vulnerabilities that are detected on a cluster.
        
        @param request: DescribeInstanceVulStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeInstanceVulStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.types):
            query['Types'] = request.types
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeInstanceVulStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeInstanceVulStatisticsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_instance_vul_statistics_with_options_async(
        self,
        request: sas_20181203_models.DescribeInstanceVulStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeInstanceVulStatisticsResponse:
        """
        @summary Queries the statistics of vulnerabilities that are detected on a cluster.
        
        @param request: DescribeInstanceVulStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeInstanceVulStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.types):
            query['Types'] = request.types
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeInstanceVulStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeInstanceVulStatisticsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_instance_vul_statistics(
        self,
        request: sas_20181203_models.DescribeInstanceVulStatisticsRequest,
    ) -> sas_20181203_models.DescribeInstanceVulStatisticsResponse:
        """
        @summary Queries the statistics of vulnerabilities that are detected on a cluster.
        
        @param request: DescribeInstanceVulStatisticsRequest
        @return: DescribeInstanceVulStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_instance_vul_statistics_with_options(request, runtime)

    async def describe_instance_vul_statistics_async(
        self,
        request: sas_20181203_models.DescribeInstanceVulStatisticsRequest,
    ) -> sas_20181203_models.DescribeInstanceVulStatisticsResponse:
        """
        @summary Queries the statistics of vulnerabilities that are detected on a cluster.
        
        @param request: DescribeInstanceVulStatisticsRequest
        @return: DescribeInstanceVulStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_instance_vul_statistics_with_options_async(request, runtime)

    def describe_latest_scan_task_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeLatestScanTaskResponse:
        """
        @summary Queries the progress of the last virus scan task.
        
        @param request: DescribeLatestScanTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeLatestScanTaskResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeLatestScanTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeLatestScanTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_latest_scan_task_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeLatestScanTaskResponse:
        """
        @summary Queries the progress of the last virus scan task.
        
        @param request: DescribeLatestScanTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeLatestScanTaskResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeLatestScanTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeLatestScanTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_latest_scan_task(self) -> sas_20181203_models.DescribeLatestScanTaskResponse:
        """
        @summary Queries the progress of the last virus scan task.
        
        @return: DescribeLatestScanTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_latest_scan_task_with_options(runtime)

    async def describe_latest_scan_task_async(self) -> sas_20181203_models.DescribeLatestScanTaskResponse:
        """
        @summary Queries the progress of the last virus scan task.
        
        @return: DescribeLatestScanTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_latest_scan_task_with_options_async(runtime)

    def describe_log_meta_with_options(
        self,
        request: sas_20181203_models.DescribeLogMetaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeLogMetaResponse:
        """
        @summary Queries the configurations of the log analysis feature provided by Security Center.
        
        @param request: DescribeLogMetaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeLogMetaResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeLogMeta',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeLogMetaResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_log_meta_with_options_async(
        self,
        request: sas_20181203_models.DescribeLogMetaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeLogMetaResponse:
        """
        @summary Queries the configurations of the log analysis feature provided by Security Center.
        
        @param request: DescribeLogMetaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeLogMetaResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeLogMeta',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeLogMetaResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_log_meta(
        self,
        request: sas_20181203_models.DescribeLogMetaRequest,
    ) -> sas_20181203_models.DescribeLogMetaResponse:
        """
        @summary Queries the configurations of the log analysis feature provided by Security Center.
        
        @param request: DescribeLogMetaRequest
        @return: DescribeLogMetaResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_log_meta_with_options(request, runtime)

    async def describe_log_meta_async(
        self,
        request: sas_20181203_models.DescribeLogMetaRequest,
    ) -> sas_20181203_models.DescribeLogMetaResponse:
        """
        @summary Queries the configurations of the log analysis feature provided by Security Center.
        
        @param request: DescribeLogMetaRequest
        @return: DescribeLogMetaResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_log_meta_with_options_async(request, runtime)

    def describe_log_shipper_status_with_options(
        self,
        request: sas_20181203_models.DescribeLogShipperStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeLogShipperStatusResponse:
        """
        @summary Queries the status information about the log analysis feature.
        
        @param request: DescribeLogShipperStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeLogShipperStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeLogShipperStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeLogShipperStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_log_shipper_status_with_options_async(
        self,
        request: sas_20181203_models.DescribeLogShipperStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeLogShipperStatusResponse:
        """
        @summary Queries the status information about the log analysis feature.
        
        @param request: DescribeLogShipperStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeLogShipperStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeLogShipperStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeLogShipperStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_log_shipper_status(
        self,
        request: sas_20181203_models.DescribeLogShipperStatusRequest,
    ) -> sas_20181203_models.DescribeLogShipperStatusResponse:
        """
        @summary Queries the status information about the log analysis feature.
        
        @param request: DescribeLogShipperStatusRequest
        @return: DescribeLogShipperStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_log_shipper_status_with_options(request, runtime)

    async def describe_log_shipper_status_async(
        self,
        request: sas_20181203_models.DescribeLogShipperStatusRequest,
    ) -> sas_20181203_models.DescribeLogShipperStatusResponse:
        """
        @summary Queries the status information about the log analysis feature.
        
        @param request: DescribeLogShipperStatusRequest
        @return: DescribeLogShipperStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_log_shipper_status_with_options_async(request, runtime)

    def describe_login_base_configs_with_options(
        self,
        request: sas_20181203_models.DescribeLoginBaseConfigsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeLoginBaseConfigsResponse:
        """
        @summary Queries the information about the configurations that are used to detect unusual logons to your servers.
        
        @param request: DescribeLoginBaseConfigsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeLoginBaseConfigsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.target):
            query['Target'] = request.target
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeLoginBaseConfigs',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeLoginBaseConfigsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_login_base_configs_with_options_async(
        self,
        request: sas_20181203_models.DescribeLoginBaseConfigsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeLoginBaseConfigsResponse:
        """
        @summary Queries the information about the configurations that are used to detect unusual logons to your servers.
        
        @param request: DescribeLoginBaseConfigsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeLoginBaseConfigsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.target):
            query['Target'] = request.target
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeLoginBaseConfigs',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeLoginBaseConfigsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_login_base_configs(
        self,
        request: sas_20181203_models.DescribeLoginBaseConfigsRequest,
    ) -> sas_20181203_models.DescribeLoginBaseConfigsResponse:
        """
        @summary Queries the information about the configurations that are used to detect unusual logons to your servers.
        
        @param request: DescribeLoginBaseConfigsRequest
        @return: DescribeLoginBaseConfigsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_login_base_configs_with_options(request, runtime)

    async def describe_login_base_configs_async(
        self,
        request: sas_20181203_models.DescribeLoginBaseConfigsRequest,
    ) -> sas_20181203_models.DescribeLoginBaseConfigsResponse:
        """
        @summary Queries the information about the configurations that are used to detect unusual logons to your servers.
        
        @param request: DescribeLoginBaseConfigsRequest
        @return: DescribeLoginBaseConfigsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_login_base_configs_with_options_async(request, runtime)

    def describe_login_switch_configs_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeLoginSwitchConfigsResponse:
        """
        @summary Queries the alerting status for unapproved logon IP addresses, unapproved logon time ranges, or unapproved logon accounts.
        
        @param request: DescribeLoginSwitchConfigsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeLoginSwitchConfigsResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeLoginSwitchConfigs',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeLoginSwitchConfigsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_login_switch_configs_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeLoginSwitchConfigsResponse:
        """
        @summary Queries the alerting status for unapproved logon IP addresses, unapproved logon time ranges, or unapproved logon accounts.
        
        @param request: DescribeLoginSwitchConfigsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeLoginSwitchConfigsResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeLoginSwitchConfigs',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeLoginSwitchConfigsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_login_switch_configs(self) -> sas_20181203_models.DescribeLoginSwitchConfigsResponse:
        """
        @summary Queries the alerting status for unapproved logon IP addresses, unapproved logon time ranges, or unapproved logon accounts.
        
        @return: DescribeLoginSwitchConfigsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_login_switch_configs_with_options(runtime)

    async def describe_login_switch_configs_async(self) -> sas_20181203_models.DescribeLoginSwitchConfigsResponse:
        """
        @summary Queries the alerting status for unapproved logon IP addresses, unapproved logon time ranges, or unapproved logon accounts.
        
        @return: DescribeLoginSwitchConfigsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_login_switch_configs_with_options_async(runtime)

    def describe_logstore_storage_with_options(
        self,
        request: sas_20181203_models.DescribeLogstoreStorageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeLogstoreStorageResponse:
        """
        @summary Queries the purchased log storage capacity.
        
        @param request: DescribeLogstoreStorageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeLogstoreStorageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeLogstoreStorage',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeLogstoreStorageResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_logstore_storage_with_options_async(
        self,
        request: sas_20181203_models.DescribeLogstoreStorageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeLogstoreStorageResponse:
        """
        @summary Queries the purchased log storage capacity.
        
        @param request: DescribeLogstoreStorageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeLogstoreStorageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeLogstoreStorage',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeLogstoreStorageResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_logstore_storage(
        self,
        request: sas_20181203_models.DescribeLogstoreStorageRequest,
    ) -> sas_20181203_models.DescribeLogstoreStorageResponse:
        """
        @summary Queries the purchased log storage capacity.
        
        @param request: DescribeLogstoreStorageRequest
        @return: DescribeLogstoreStorageResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_logstore_storage_with_options(request, runtime)

    async def describe_logstore_storage_async(
        self,
        request: sas_20181203_models.DescribeLogstoreStorageRequest,
    ) -> sas_20181203_models.DescribeLogstoreStorageResponse:
        """
        @summary Queries the purchased log storage capacity.
        
        @param request: DescribeLogstoreStorageRequest
        @return: DescribeLogstoreStorageResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_logstore_storage_with_options_async(request, runtime)

    def describe_machine_can_reboot_with_options(
        self,
        request: sas_20181203_models.DescribeMachineCanRebootRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeMachineCanRebootResponse:
        """
        @summary Queries whether a server can be restarted after the vulnerabilities on the server are fixed. The fixes take effect only after the server is restarted.
        
        @param request: DescribeMachineCanRebootRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeMachineCanRebootResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeMachineCanReboot',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeMachineCanRebootResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_machine_can_reboot_with_options_async(
        self,
        request: sas_20181203_models.DescribeMachineCanRebootRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeMachineCanRebootResponse:
        """
        @summary Queries whether a server can be restarted after the vulnerabilities on the server are fixed. The fixes take effect only after the server is restarted.
        
        @param request: DescribeMachineCanRebootRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeMachineCanRebootResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeMachineCanReboot',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeMachineCanRebootResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_machine_can_reboot(
        self,
        request: sas_20181203_models.DescribeMachineCanRebootRequest,
    ) -> sas_20181203_models.DescribeMachineCanRebootResponse:
        """
        @summary Queries whether a server can be restarted after the vulnerabilities on the server are fixed. The fixes take effect only after the server is restarted.
        
        @param request: DescribeMachineCanRebootRequest
        @return: DescribeMachineCanRebootResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_machine_can_reboot_with_options(request, runtime)

    async def describe_machine_can_reboot_async(
        self,
        request: sas_20181203_models.DescribeMachineCanRebootRequest,
    ) -> sas_20181203_models.DescribeMachineCanRebootResponse:
        """
        @summary Queries whether a server can be restarted after the vulnerabilities on the server are fixed. The fixes take effect only after the server is restarted.
        
        @param request: DescribeMachineCanRebootRequest
        @return: DescribeMachineCanRebootResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_machine_can_reboot_with_options_async(request, runtime)

    def describe_matched_malicious_names_with_options(
        self,
        request: sas_20181203_models.DescribeMatchedMaliciousNamesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeMatchedMaliciousNamesResponse:
        """
        @summary Queries a list of malicious image sample types.
        
        @param request: DescribeMatchedMaliciousNamesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeMatchedMaliciousNamesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.levels):
            query['Levels'] = request.levels
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeMatchedMaliciousNames',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeMatchedMaliciousNamesResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_matched_malicious_names_with_options_async(
        self,
        request: sas_20181203_models.DescribeMatchedMaliciousNamesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeMatchedMaliciousNamesResponse:
        """
        @summary Queries a list of malicious image sample types.
        
        @param request: DescribeMatchedMaliciousNamesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeMatchedMaliciousNamesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.levels):
            query['Levels'] = request.levels
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeMatchedMaliciousNames',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeMatchedMaliciousNamesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_matched_malicious_names(
        self,
        request: sas_20181203_models.DescribeMatchedMaliciousNamesRequest,
    ) -> sas_20181203_models.DescribeMatchedMaliciousNamesResponse:
        """
        @summary Queries a list of malicious image sample types.
        
        @param request: DescribeMatchedMaliciousNamesRequest
        @return: DescribeMatchedMaliciousNamesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_matched_malicious_names_with_options(request, runtime)

    async def describe_matched_malicious_names_async(
        self,
        request: sas_20181203_models.DescribeMatchedMaliciousNamesRequest,
    ) -> sas_20181203_models.DescribeMatchedMaliciousNamesResponse:
        """
        @summary Queries a list of malicious image sample types.
        
        @param request: DescribeMatchedMaliciousNamesRequest
        @return: DescribeMatchedMaliciousNamesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_matched_malicious_names_with_options_async(request, runtime)

    def describe_module_config_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeModuleConfigResponse:
        """
        @summary Queries the configurations of the asset fingerprint module.
        
        @param request: DescribeModuleConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeModuleConfigResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeModuleConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeModuleConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_module_config_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeModuleConfigResponse:
        """
        @summary Queries the configurations of the asset fingerprint module.
        
        @param request: DescribeModuleConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeModuleConfigResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeModuleConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeModuleConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_module_config(self) -> sas_20181203_models.DescribeModuleConfigResponse:
        """
        @summary Queries the configurations of the asset fingerprint module.
        
        @return: DescribeModuleConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_module_config_with_options(runtime)

    async def describe_module_config_async(self) -> sas_20181203_models.DescribeModuleConfigResponse:
        """
        @summary Queries the configurations of the asset fingerprint module.
        
        @return: DescribeModuleConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_module_config_with_options_async(runtime)

    def describe_monitor_accounts_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeMonitorAccountsResponse:
        """
        @summary Queries the list of accounts that are added to the multi-account management feature as members.
        
        @param request: DescribeMonitorAccountsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeMonitorAccountsResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeMonitorAccounts',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeMonitorAccountsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_monitor_accounts_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeMonitorAccountsResponse:
        """
        @summary Queries the list of accounts that are added to the multi-account management feature as members.
        
        @param request: DescribeMonitorAccountsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeMonitorAccountsResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeMonitorAccounts',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeMonitorAccountsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_monitor_accounts(self) -> sas_20181203_models.DescribeMonitorAccountsResponse:
        """
        @summary Queries the list of accounts that are added to the multi-account management feature as members.
        
        @return: DescribeMonitorAccountsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_monitor_accounts_with_options(runtime)

    async def describe_monitor_accounts_async(self) -> sas_20181203_models.DescribeMonitorAccountsResponse:
        """
        @summary Queries the list of accounts that are added to the multi-account management feature as members.
        
        @return: DescribeMonitorAccountsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_monitor_accounts_with_options_async(runtime)

    def describe_need_async_query_with_options(
        self,
        request: sas_20181203_models.DescribeNeedAsyncQueryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeNeedAsyncQueryResponse:
        """
        @summary Queries whether slow queries need to be optimized.
        
        @param request: DescribeNeedAsyncQueryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeNeedAsyncQueryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeNeedAsyncQuery',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeNeedAsyncQueryResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_need_async_query_with_options_async(
        self,
        request: sas_20181203_models.DescribeNeedAsyncQueryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeNeedAsyncQueryResponse:
        """
        @summary Queries whether slow queries need to be optimized.
        
        @param request: DescribeNeedAsyncQueryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeNeedAsyncQueryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeNeedAsyncQuery',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeNeedAsyncQueryResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_need_async_query(
        self,
        request: sas_20181203_models.DescribeNeedAsyncQueryRequest,
    ) -> sas_20181203_models.DescribeNeedAsyncQueryResponse:
        """
        @summary Queries whether slow queries need to be optimized.
        
        @param request: DescribeNeedAsyncQueryRequest
        @return: DescribeNeedAsyncQueryResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_need_async_query_with_options(request, runtime)

    async def describe_need_async_query_async(
        self,
        request: sas_20181203_models.DescribeNeedAsyncQueryRequest,
    ) -> sas_20181203_models.DescribeNeedAsyncQueryResponse:
        """
        @summary Queries whether slow queries need to be optimized.
        
        @param request: DescribeNeedAsyncQueryRequest
        @return: DescribeNeedAsyncQueryResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_need_async_query_with_options_async(request, runtime)

    def describe_notice_config_with_options(
        self,
        request: sas_20181203_models.DescribeNoticeConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeNoticeConfigResponse:
        """
        @summary Queries notification settings.
        
        @param request: DescribeNoticeConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeNoticeConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeNoticeConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeNoticeConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_notice_config_with_options_async(
        self,
        request: sas_20181203_models.DescribeNoticeConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeNoticeConfigResponse:
        """
        @summary Queries notification settings.
        
        @param request: DescribeNoticeConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeNoticeConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeNoticeConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeNoticeConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_notice_config(
        self,
        request: sas_20181203_models.DescribeNoticeConfigRequest,
    ) -> sas_20181203_models.DescribeNoticeConfigResponse:
        """
        @summary Queries notification settings.
        
        @param request: DescribeNoticeConfigRequest
        @return: DescribeNoticeConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_notice_config_with_options(request, runtime)

    async def describe_notice_config_async(
        self,
        request: sas_20181203_models.DescribeNoticeConfigRequest,
    ) -> sas_20181203_models.DescribeNoticeConfigResponse:
        """
        @summary Queries notification settings.
        
        @param request: DescribeNoticeConfigRequest
        @return: DescribeNoticeConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_notice_config_with_options_async(request, runtime)

    def describe_nsas_susp_event_type_with_options(
        self,
        request: sas_20181203_models.DescribeNsasSuspEventTypeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeNsasSuspEventTypeResponse:
        """
        @summary Queries the information about an alert type.
        
        @param request: DescribeNsasSuspEventTypeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeNsasSuspEventTypeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.container_field_name):
            query['ContainerFieldName'] = request.container_field_name
        if not UtilClient.is_unset(request.container_field_value):
            query['ContainerFieldValue'] = request.container_field_value
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.multi_account_action_type):
            query['MultiAccountActionType'] = request.multi_account_action_type
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.support_operate_code_list):
            query['SupportOperateCodeList'] = request.support_operate_code_list
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeNsasSuspEventType',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeNsasSuspEventTypeResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_nsas_susp_event_type_with_options_async(
        self,
        request: sas_20181203_models.DescribeNsasSuspEventTypeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeNsasSuspEventTypeResponse:
        """
        @summary Queries the information about an alert type.
        
        @param request: DescribeNsasSuspEventTypeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeNsasSuspEventTypeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.container_field_name):
            query['ContainerFieldName'] = request.container_field_name
        if not UtilClient.is_unset(request.container_field_value):
            query['ContainerFieldValue'] = request.container_field_value
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.multi_account_action_type):
            query['MultiAccountActionType'] = request.multi_account_action_type
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.support_operate_code_list):
            query['SupportOperateCodeList'] = request.support_operate_code_list
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeNsasSuspEventType',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeNsasSuspEventTypeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_nsas_susp_event_type(
        self,
        request: sas_20181203_models.DescribeNsasSuspEventTypeRequest,
    ) -> sas_20181203_models.DescribeNsasSuspEventTypeResponse:
        """
        @summary Queries the information about an alert type.
        
        @param request: DescribeNsasSuspEventTypeRequest
        @return: DescribeNsasSuspEventTypeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_nsas_susp_event_type_with_options(request, runtime)

    async def describe_nsas_susp_event_type_async(
        self,
        request: sas_20181203_models.DescribeNsasSuspEventTypeRequest,
    ) -> sas_20181203_models.DescribeNsasSuspEventTypeResponse:
        """
        @summary Queries the information about an alert type.
        
        @param request: DescribeNsasSuspEventTypeRequest
        @return: DescribeNsasSuspEventTypeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_nsas_susp_event_type_with_options_async(request, runtime)

    def describe_offline_machines_with_options(
        self,
        request: sas_20181203_models.DescribeOfflineMachinesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeOfflineMachinesResponse:
        """
        @summary Queries the information about the servers whose Security Center agent status is Offline.
        
        @param request: DescribeOfflineMachinesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeOfflineMachinesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.os):
            query['Os'] = request.os
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.region_id_str):
            query['RegionIdStr'] = request.region_id_str
        if not UtilClient.is_unset(request.region_no):
            query['RegionNo'] = request.region_no
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.vendor):
            query['Vendor'] = request.vendor
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeOfflineMachines',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeOfflineMachinesResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_offline_machines_with_options_async(
        self,
        request: sas_20181203_models.DescribeOfflineMachinesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeOfflineMachinesResponse:
        """
        @summary Queries the information about the servers whose Security Center agent status is Offline.
        
        @param request: DescribeOfflineMachinesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeOfflineMachinesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.os):
            query['Os'] = request.os
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.region_id_str):
            query['RegionIdStr'] = request.region_id_str
        if not UtilClient.is_unset(request.region_no):
            query['RegionNo'] = request.region_no
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.vendor):
            query['Vendor'] = request.vendor
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeOfflineMachines',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeOfflineMachinesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_offline_machines(
        self,
        request: sas_20181203_models.DescribeOfflineMachinesRequest,
    ) -> sas_20181203_models.DescribeOfflineMachinesResponse:
        """
        @summary Queries the information about the servers whose Security Center agent status is Offline.
        
        @param request: DescribeOfflineMachinesRequest
        @return: DescribeOfflineMachinesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_offline_machines_with_options(request, runtime)

    async def describe_offline_machines_async(
        self,
        request: sas_20181203_models.DescribeOfflineMachinesRequest,
    ) -> sas_20181203_models.DescribeOfflineMachinesResponse:
        """
        @summary Queries the information about the servers whose Security Center agent status is Offline.
        
        @param request: DescribeOfflineMachinesRequest
        @return: DescribeOfflineMachinesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_offline_machines_with_options_async(request, runtime)

    def describe_once_task_with_options(
        self,
        request: sas_20181203_models.DescribeOnceTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeOnceTaskResponse:
        """
        @summary Queries agent tasks.
        
        @param request: DescribeOnceTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeOnceTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.end_time_query):
            query['EndTimeQuery'] = request.end_time_query
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.root_task_id):
            query['RootTaskId'] = request.root_task_id
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.start_time_query):
            query['StartTimeQuery'] = request.start_time_query
        if not UtilClient.is_unset(request.task_id):
            query['TaskId'] = request.task_id
        if not UtilClient.is_unset(request.task_type):
            query['TaskType'] = request.task_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeOnceTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeOnceTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_once_task_with_options_async(
        self,
        request: sas_20181203_models.DescribeOnceTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeOnceTaskResponse:
        """
        @summary Queries agent tasks.
        
        @param request: DescribeOnceTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeOnceTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.end_time_query):
            query['EndTimeQuery'] = request.end_time_query
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.root_task_id):
            query['RootTaskId'] = request.root_task_id
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.start_time_query):
            query['StartTimeQuery'] = request.start_time_query
        if not UtilClient.is_unset(request.task_id):
            query['TaskId'] = request.task_id
        if not UtilClient.is_unset(request.task_type):
            query['TaskType'] = request.task_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeOnceTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeOnceTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_once_task(
        self,
        request: sas_20181203_models.DescribeOnceTaskRequest,
    ) -> sas_20181203_models.DescribeOnceTaskResponse:
        """
        @summary Queries agent tasks.
        
        @param request: DescribeOnceTaskRequest
        @return: DescribeOnceTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_once_task_with_options(request, runtime)

    async def describe_once_task_async(
        self,
        request: sas_20181203_models.DescribeOnceTaskRequest,
    ) -> sas_20181203_models.DescribeOnceTaskResponse:
        """
        @summary Queries agent tasks.
        
        @param request: DescribeOnceTaskRequest
        @return: DescribeOnceTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_once_task_with_options_async(request, runtime)

    def describe_once_task_leaf_record_page_with_options(
        self,
        request: sas_20181203_models.DescribeOnceTaskLeafRecordPageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeOnceTaskLeafRecordPageResponse:
        """
        @summary Queries the sub-task information of one-time scan task. A sub-task can be an image scan task or an image asset synchronization task.
        
        @param request: DescribeOnceTaskLeafRecordPageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeOnceTaskLeafRecordPageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.relate_info):
            query['RelateInfo'] = request.relate_info
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.status_list):
            query['StatusList'] = request.status_list
        if not UtilClient.is_unset(request.task_id):
            query['TaskId'] = request.task_id
        if not UtilClient.is_unset(request.task_type):
            query['TaskType'] = request.task_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeOnceTaskLeafRecordPage',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeOnceTaskLeafRecordPageResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_once_task_leaf_record_page_with_options_async(
        self,
        request: sas_20181203_models.DescribeOnceTaskLeafRecordPageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeOnceTaskLeafRecordPageResponse:
        """
        @summary Queries the sub-task information of one-time scan task. A sub-task can be an image scan task or an image asset synchronization task.
        
        @param request: DescribeOnceTaskLeafRecordPageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeOnceTaskLeafRecordPageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.relate_info):
            query['RelateInfo'] = request.relate_info
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.status_list):
            query['StatusList'] = request.status_list
        if not UtilClient.is_unset(request.task_id):
            query['TaskId'] = request.task_id
        if not UtilClient.is_unset(request.task_type):
            query['TaskType'] = request.task_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeOnceTaskLeafRecordPage',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeOnceTaskLeafRecordPageResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_once_task_leaf_record_page(
        self,
        request: sas_20181203_models.DescribeOnceTaskLeafRecordPageRequest,
    ) -> sas_20181203_models.DescribeOnceTaskLeafRecordPageResponse:
        """
        @summary Queries the sub-task information of one-time scan task. A sub-task can be an image scan task or an image asset synchronization task.
        
        @param request: DescribeOnceTaskLeafRecordPageRequest
        @return: DescribeOnceTaskLeafRecordPageResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_once_task_leaf_record_page_with_options(request, runtime)

    async def describe_once_task_leaf_record_page_async(
        self,
        request: sas_20181203_models.DescribeOnceTaskLeafRecordPageRequest,
    ) -> sas_20181203_models.DescribeOnceTaskLeafRecordPageResponse:
        """
        @summary Queries the sub-task information of one-time scan task. A sub-task can be an image scan task or an image asset synchronization task.
        
        @param request: DescribeOnceTaskLeafRecordPageRequest
        @return: DescribeOnceTaskLeafRecordPageResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_once_task_leaf_record_page_with_options_async(request, runtime)

    def describe_plugin_summary_with_options(
        self,
        request: sas_20181203_models.DescribePluginSummaryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribePluginSummaryResponse:
        """
        @summary Queries statistics on the client plug-in installation status.
        
        @param request: DescribePluginSummaryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePluginSummaryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.plugin_name):
            query['PluginName'] = request.plugin_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePluginSummary',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribePluginSummaryResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_plugin_summary_with_options_async(
        self,
        request: sas_20181203_models.DescribePluginSummaryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribePluginSummaryResponse:
        """
        @summary Queries statistics on the client plug-in installation status.
        
        @param request: DescribePluginSummaryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePluginSummaryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.plugin_name):
            query['PluginName'] = request.plugin_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePluginSummary',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribePluginSummaryResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_plugin_summary(
        self,
        request: sas_20181203_models.DescribePluginSummaryRequest,
    ) -> sas_20181203_models.DescribePluginSummaryResponse:
        """
        @summary Queries statistics on the client plug-in installation status.
        
        @param request: DescribePluginSummaryRequest
        @return: DescribePluginSummaryResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_plugin_summary_with_options(request, runtime)

    async def describe_plugin_summary_async(
        self,
        request: sas_20181203_models.DescribePluginSummaryRequest,
    ) -> sas_20181203_models.DescribePluginSummaryResponse:
        """
        @summary Queries statistics on the client plug-in installation status.
        
        @param request: DescribePluginSummaryRequest
        @return: DescribePluginSummaryResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_plugin_summary_with_options_async(request, runtime)

    def describe_property_count_with_options(
        self,
        request: sas_20181203_models.DescribePropertyCountRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribePropertyCountResponse:
        """
        @summary Queries the statistics of asset fingerprints. The assets include processes, ports, software, accounts, middleware, websites, web services, scheduled tasks, startup items, and databases.
        
        @param request: DescribePropertyCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePropertyCountResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePropertyCount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribePropertyCountResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_property_count_with_options_async(
        self,
        request: sas_20181203_models.DescribePropertyCountRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribePropertyCountResponse:
        """
        @summary Queries the statistics of asset fingerprints. The assets include processes, ports, software, accounts, middleware, websites, web services, scheduled tasks, startup items, and databases.
        
        @param request: DescribePropertyCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePropertyCountResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePropertyCount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribePropertyCountResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_property_count(
        self,
        request: sas_20181203_models.DescribePropertyCountRequest,
    ) -> sas_20181203_models.DescribePropertyCountResponse:
        """
        @summary Queries the statistics of asset fingerprints. The assets include processes, ports, software, accounts, middleware, websites, web services, scheduled tasks, startup items, and databases.
        
        @param request: DescribePropertyCountRequest
        @return: DescribePropertyCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_property_count_with_options(request, runtime)

    async def describe_property_count_async(
        self,
        request: sas_20181203_models.DescribePropertyCountRequest,
    ) -> sas_20181203_models.DescribePropertyCountResponse:
        """
        @summary Queries the statistics of asset fingerprints. The assets include processes, ports, software, accounts, middleware, websites, web services, scheduled tasks, startup items, and databases.
        
        @param request: DescribePropertyCountRequest
        @return: DescribePropertyCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_property_count_with_options_async(request, runtime)

    def describe_property_cron_detail_with_options(
        self,
        request: sas_20181203_models.DescribePropertyCronDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribePropertyCronDetailResponse:
        """
        @summary Queries the details of scheduled tasks on the Host page.
        
        @param request: DescribePropertyCronDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePropertyCronDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.extend):
            query['Extend'] = request.extend
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.user):
            query['User'] = request.user
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePropertyCronDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribePropertyCronDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_property_cron_detail_with_options_async(
        self,
        request: sas_20181203_models.DescribePropertyCronDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribePropertyCronDetailResponse:
        """
        @summary Queries the details of scheduled tasks on the Host page.
        
        @param request: DescribePropertyCronDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePropertyCronDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.extend):
            query['Extend'] = request.extend
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.user):
            query['User'] = request.user
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePropertyCronDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribePropertyCronDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_property_cron_detail(
        self,
        request: sas_20181203_models.DescribePropertyCronDetailRequest,
    ) -> sas_20181203_models.DescribePropertyCronDetailResponse:
        """
        @summary Queries the details of scheduled tasks on the Host page.
        
        @param request: DescribePropertyCronDetailRequest
        @return: DescribePropertyCronDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_property_cron_detail_with_options(request, runtime)

    async def describe_property_cron_detail_async(
        self,
        request: sas_20181203_models.DescribePropertyCronDetailRequest,
    ) -> sas_20181203_models.DescribePropertyCronDetailResponse:
        """
        @summary Queries the details of scheduled tasks on the Host page.
        
        @param request: DescribePropertyCronDetailRequest
        @return: DescribePropertyCronDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_property_cron_detail_with_options_async(request, runtime)

    def describe_property_cron_item_with_options(
        self,
        request: sas_20181203_models.DescribePropertyCronItemRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribePropertyCronItemResponse:
        """
        @summary Queries the scheduled tasks of your assets.
        
        @param request: DescribePropertyCronItemRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePropertyCronItemResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.force_flush):
            query['ForceFlush'] = request.force_flush
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePropertyCronItem',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribePropertyCronItemResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_property_cron_item_with_options_async(
        self,
        request: sas_20181203_models.DescribePropertyCronItemRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribePropertyCronItemResponse:
        """
        @summary Queries the scheduled tasks of your assets.
        
        @param request: DescribePropertyCronItemRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePropertyCronItemResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.force_flush):
            query['ForceFlush'] = request.force_flush
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePropertyCronItem',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribePropertyCronItemResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_property_cron_item(
        self,
        request: sas_20181203_models.DescribePropertyCronItemRequest,
    ) -> sas_20181203_models.DescribePropertyCronItemResponse:
        """
        @summary Queries the scheduled tasks of your assets.
        
        @param request: DescribePropertyCronItemRequest
        @return: DescribePropertyCronItemResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_property_cron_item_with_options(request, runtime)

    async def describe_property_cron_item_async(
        self,
        request: sas_20181203_models.DescribePropertyCronItemRequest,
    ) -> sas_20181203_models.DescribePropertyCronItemResponse:
        """
        @summary Queries the scheduled tasks of your assets.
        
        @param request: DescribePropertyCronItemRequest
        @return: DescribePropertyCronItemResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_property_cron_item_with_options_async(request, runtime)

    def describe_property_port_detail_with_options(
        self,
        request: sas_20181203_models.DescribePropertyPortDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribePropertyPortDetailResponse:
        """
        @summary Queries the fingerprints of ports on a specified server.
        
        @param request: DescribePropertyPortDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePropertyPortDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.bind_ip):
            query['BindIp'] = request.bind_ip
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.extend):
            query['Extend'] = request.extend
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.port):
            query['Port'] = request.port
        if not UtilClient.is_unset(request.proc_name):
            query['ProcName'] = request.proc_name
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePropertyPortDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribePropertyPortDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_property_port_detail_with_options_async(
        self,
        request: sas_20181203_models.DescribePropertyPortDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribePropertyPortDetailResponse:
        """
        @summary Queries the fingerprints of ports on a specified server.
        
        @param request: DescribePropertyPortDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePropertyPortDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.bind_ip):
            query['BindIp'] = request.bind_ip
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.extend):
            query['Extend'] = request.extend
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.port):
            query['Port'] = request.port
        if not UtilClient.is_unset(request.proc_name):
            query['ProcName'] = request.proc_name
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePropertyPortDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribePropertyPortDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_property_port_detail(
        self,
        request: sas_20181203_models.DescribePropertyPortDetailRequest,
    ) -> sas_20181203_models.DescribePropertyPortDetailResponse:
        """
        @summary Queries the fingerprints of ports on a specified server.
        
        @param request: DescribePropertyPortDetailRequest
        @return: DescribePropertyPortDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_property_port_detail_with_options(request, runtime)

    async def describe_property_port_detail_async(
        self,
        request: sas_20181203_models.DescribePropertyPortDetailRequest,
    ) -> sas_20181203_models.DescribePropertyPortDetailResponse:
        """
        @summary Queries the fingerprints of ports on a specified server.
        
        @param request: DescribePropertyPortDetailRequest
        @return: DescribePropertyPortDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_property_port_detail_with_options_async(request, runtime)

    def describe_property_port_item_with_options(
        self,
        request: sas_20181203_models.DescribePropertyPortItemRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribePropertyPortItemResponse:
        """
        @summary Queries information about all ports.
        
        @param request: DescribePropertyPortItemRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePropertyPortItemResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.force_flush):
            query['ForceFlush'] = request.force_flush
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.port):
            query['Port'] = request.port
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePropertyPortItem',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribePropertyPortItemResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_property_port_item_with_options_async(
        self,
        request: sas_20181203_models.DescribePropertyPortItemRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribePropertyPortItemResponse:
        """
        @summary Queries information about all ports.
        
        @param request: DescribePropertyPortItemRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePropertyPortItemResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.force_flush):
            query['ForceFlush'] = request.force_flush
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.port):
            query['Port'] = request.port
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePropertyPortItem',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribePropertyPortItemResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_property_port_item(
        self,
        request: sas_20181203_models.DescribePropertyPortItemRequest,
    ) -> sas_20181203_models.DescribePropertyPortItemResponse:
        """
        @summary Queries information about all ports.
        
        @param request: DescribePropertyPortItemRequest
        @return: DescribePropertyPortItemResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_property_port_item_with_options(request, runtime)

    async def describe_property_port_item_async(
        self,
        request: sas_20181203_models.DescribePropertyPortItemRequest,
    ) -> sas_20181203_models.DescribePropertyPortItemResponse:
        """
        @summary Queries information about all ports.
        
        @param request: DescribePropertyPortItemRequest
        @return: DescribePropertyPortItemResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_property_port_item_with_options_async(request, runtime)

    def describe_property_proc_detail_with_options(
        self,
        request: sas_20181203_models.DescribePropertyProcDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribePropertyProcDetailResponse:
        """
        @summary Queries the fingerprints of processes on a specified server.
        
        @param request: DescribePropertyProcDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePropertyProcDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cmdline):
            query['Cmdline'] = request.cmdline
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.extend):
            query['Extend'] = request.extend
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.proc_time_end):
            query['ProcTimeEnd'] = request.proc_time_end
        if not UtilClient.is_unset(request.proc_time_start):
            query['ProcTimeStart'] = request.proc_time_start
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.user):
            query['User'] = request.user
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePropertyProcDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribePropertyProcDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_property_proc_detail_with_options_async(
        self,
        request: sas_20181203_models.DescribePropertyProcDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribePropertyProcDetailResponse:
        """
        @summary Queries the fingerprints of processes on a specified server.
        
        @param request: DescribePropertyProcDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePropertyProcDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cmdline):
            query['Cmdline'] = request.cmdline
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.extend):
            query['Extend'] = request.extend
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.proc_time_end):
            query['ProcTimeEnd'] = request.proc_time_end
        if not UtilClient.is_unset(request.proc_time_start):
            query['ProcTimeStart'] = request.proc_time_start
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.user):
            query['User'] = request.user
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePropertyProcDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribePropertyProcDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_property_proc_detail(
        self,
        request: sas_20181203_models.DescribePropertyProcDetailRequest,
    ) -> sas_20181203_models.DescribePropertyProcDetailResponse:
        """
        @summary Queries the fingerprints of processes on a specified server.
        
        @param request: DescribePropertyProcDetailRequest
        @return: DescribePropertyProcDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_property_proc_detail_with_options(request, runtime)

    async def describe_property_proc_detail_async(
        self,
        request: sas_20181203_models.DescribePropertyProcDetailRequest,
    ) -> sas_20181203_models.DescribePropertyProcDetailResponse:
        """
        @summary Queries the fingerprints of processes on a specified server.
        
        @param request: DescribePropertyProcDetailRequest
        @return: DescribePropertyProcDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_property_proc_detail_with_options_async(request, runtime)

    def describe_property_proc_item_with_options(
        self,
        request: sas_20181203_models.DescribePropertyProcItemRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribePropertyProcItemResponse:
        """
        @summary Queries information about all processes.
        
        @param request: DescribePropertyProcItemRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePropertyProcItemResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.force_flush):
            query['ForceFlush'] = request.force_flush
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePropertyProcItem',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribePropertyProcItemResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_property_proc_item_with_options_async(
        self,
        request: sas_20181203_models.DescribePropertyProcItemRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribePropertyProcItemResponse:
        """
        @summary Queries information about all processes.
        
        @param request: DescribePropertyProcItemRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePropertyProcItemResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.force_flush):
            query['ForceFlush'] = request.force_flush
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePropertyProcItem',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribePropertyProcItemResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_property_proc_item(
        self,
        request: sas_20181203_models.DescribePropertyProcItemRequest,
    ) -> sas_20181203_models.DescribePropertyProcItemResponse:
        """
        @summary Queries information about all processes.
        
        @param request: DescribePropertyProcItemRequest
        @return: DescribePropertyProcItemResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_property_proc_item_with_options(request, runtime)

    async def describe_property_proc_item_async(
        self,
        request: sas_20181203_models.DescribePropertyProcItemRequest,
    ) -> sas_20181203_models.DescribePropertyProcItemResponse:
        """
        @summary Queries information about all processes.
        
        @param request: DescribePropertyProcItemRequest
        @return: DescribePropertyProcItemResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_property_proc_item_with_options_async(request, runtime)

    def describe_property_sca_detail_with_options(
        self,
        request: sas_20181203_models.DescribePropertyScaDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribePropertyScaDetailResponse:
        """
        @summary Queries middleware fingerprints.
        
        @param request: DescribePropertyScaDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePropertyScaDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.biz):
            query['Biz'] = request.biz
        if not UtilClient.is_unset(request.biz_type):
            query['BizType'] = request.biz_type
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.pid):
            query['Pid'] = request.pid
        if not UtilClient.is_unset(request.port):
            query['Port'] = request.port
        if not UtilClient.is_unset(request.process_started_end):
            query['ProcessStartedEnd'] = request.process_started_end
        if not UtilClient.is_unset(request.process_started_start):
            query['ProcessStartedStart'] = request.process_started_start
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.sca_name):
            query['ScaName'] = request.sca_name
        if not UtilClient.is_unset(request.sca_name_pattern):
            query['ScaNamePattern'] = request.sca_name_pattern
        if not UtilClient.is_unset(request.sca_version):
            query['ScaVersion'] = request.sca_version
        if not UtilClient.is_unset(request.search_info):
            query['SearchInfo'] = request.search_info
        if not UtilClient.is_unset(request.search_info_sub):
            query['SearchInfoSub'] = request.search_info_sub
        if not UtilClient.is_unset(request.search_item):
            query['SearchItem'] = request.search_item
        if not UtilClient.is_unset(request.search_item_sub):
            query['SearchItemSub'] = request.search_item_sub
        if not UtilClient.is_unset(request.user):
            query['User'] = request.user
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePropertyScaDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribePropertyScaDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_property_sca_detail_with_options_async(
        self,
        request: sas_20181203_models.DescribePropertyScaDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribePropertyScaDetailResponse:
        """
        @summary Queries middleware fingerprints.
        
        @param request: DescribePropertyScaDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePropertyScaDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.biz):
            query['Biz'] = request.biz
        if not UtilClient.is_unset(request.biz_type):
            query['BizType'] = request.biz_type
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.pid):
            query['Pid'] = request.pid
        if not UtilClient.is_unset(request.port):
            query['Port'] = request.port
        if not UtilClient.is_unset(request.process_started_end):
            query['ProcessStartedEnd'] = request.process_started_end
        if not UtilClient.is_unset(request.process_started_start):
            query['ProcessStartedStart'] = request.process_started_start
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.sca_name):
            query['ScaName'] = request.sca_name
        if not UtilClient.is_unset(request.sca_name_pattern):
            query['ScaNamePattern'] = request.sca_name_pattern
        if not UtilClient.is_unset(request.sca_version):
            query['ScaVersion'] = request.sca_version
        if not UtilClient.is_unset(request.search_info):
            query['SearchInfo'] = request.search_info
        if not UtilClient.is_unset(request.search_info_sub):
            query['SearchInfoSub'] = request.search_info_sub
        if not UtilClient.is_unset(request.search_item):
            query['SearchItem'] = request.search_item
        if not UtilClient.is_unset(request.search_item_sub):
            query['SearchItemSub'] = request.search_item_sub
        if not UtilClient.is_unset(request.user):
            query['User'] = request.user
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePropertyScaDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribePropertyScaDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_property_sca_detail(
        self,
        request: sas_20181203_models.DescribePropertyScaDetailRequest,
    ) -> sas_20181203_models.DescribePropertyScaDetailResponse:
        """
        @summary Queries middleware fingerprints.
        
        @param request: DescribePropertyScaDetailRequest
        @return: DescribePropertyScaDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_property_sca_detail_with_options(request, runtime)

    async def describe_property_sca_detail_async(
        self,
        request: sas_20181203_models.DescribePropertyScaDetailRequest,
    ) -> sas_20181203_models.DescribePropertyScaDetailResponse:
        """
        @summary Queries middleware fingerprints.
        
        @param request: DescribePropertyScaDetailRequest
        @return: DescribePropertyScaDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_property_sca_detail_with_options_async(request, runtime)

    def describe_property_sca_item_with_options(
        self,
        request: sas_20181203_models.DescribePropertyScaItemRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribePropertyScaItemResponse:
        """
        @summary Queries middleware fingerprints.
        
        @param request: DescribePropertyScaItemRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePropertyScaItemResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.biz):
            query['Biz'] = request.biz
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.force_flush):
            query['ForceFlush'] = request.force_flush
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.search_info):
            query['SearchInfo'] = request.search_info
        if not UtilClient.is_unset(request.search_item):
            query['SearchItem'] = request.search_item
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePropertyScaItem',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribePropertyScaItemResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_property_sca_item_with_options_async(
        self,
        request: sas_20181203_models.DescribePropertyScaItemRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribePropertyScaItemResponse:
        """
        @summary Queries middleware fingerprints.
        
        @param request: DescribePropertyScaItemRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePropertyScaItemResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.biz):
            query['Biz'] = request.biz
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.force_flush):
            query['ForceFlush'] = request.force_flush
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.search_info):
            query['SearchInfo'] = request.search_info
        if not UtilClient.is_unset(request.search_item):
            query['SearchItem'] = request.search_item
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePropertyScaItem',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribePropertyScaItemResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_property_sca_item(
        self,
        request: sas_20181203_models.DescribePropertyScaItemRequest,
    ) -> sas_20181203_models.DescribePropertyScaItemResponse:
        """
        @summary Queries middleware fingerprints.
        
        @param request: DescribePropertyScaItemRequest
        @return: DescribePropertyScaItemResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_property_sca_item_with_options(request, runtime)

    async def describe_property_sca_item_async(
        self,
        request: sas_20181203_models.DescribePropertyScaItemRequest,
    ) -> sas_20181203_models.DescribePropertyScaItemResponse:
        """
        @summary Queries middleware fingerprints.
        
        @param request: DescribePropertyScaItemRequest
        @return: DescribePropertyScaItemResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_property_sca_item_with_options_async(request, runtime)

    def describe_property_sca_process_detail_with_options(
        self,
        request: sas_20181203_models.DescribePropertyScaProcessDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribePropertyScaProcessDetailResponse:
        """
        @summary Queries the Java processes that are collected by the asset fingerprints feature of Security Center in your assets.
        
        @param request: DescribePropertyScaProcessDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePropertyScaProcessDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.biz_type):
            query['BizType'] = request.biz_type
        if not UtilClient.is_unset(request.cmdline):
            query['Cmdline'] = request.cmdline
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.pid):
            query['Pid'] = request.pid
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePropertyScaProcessDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribePropertyScaProcessDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_property_sca_process_detail_with_options_async(
        self,
        request: sas_20181203_models.DescribePropertyScaProcessDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribePropertyScaProcessDetailResponse:
        """
        @summary Queries the Java processes that are collected by the asset fingerprints feature of Security Center in your assets.
        
        @param request: DescribePropertyScaProcessDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePropertyScaProcessDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.biz_type):
            query['BizType'] = request.biz_type
        if not UtilClient.is_unset(request.cmdline):
            query['Cmdline'] = request.cmdline
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.pid):
            query['Pid'] = request.pid
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePropertyScaProcessDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribePropertyScaProcessDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_property_sca_process_detail(
        self,
        request: sas_20181203_models.DescribePropertyScaProcessDetailRequest,
    ) -> sas_20181203_models.DescribePropertyScaProcessDetailResponse:
        """
        @summary Queries the Java processes that are collected by the asset fingerprints feature of Security Center in your assets.
        
        @param request: DescribePropertyScaProcessDetailRequest
        @return: DescribePropertyScaProcessDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_property_sca_process_detail_with_options(request, runtime)

    async def describe_property_sca_process_detail_async(
        self,
        request: sas_20181203_models.DescribePropertyScaProcessDetailRequest,
    ) -> sas_20181203_models.DescribePropertyScaProcessDetailResponse:
        """
        @summary Queries the Java processes that are collected by the asset fingerprints feature of Security Center in your assets.
        
        @param request: DescribePropertyScaProcessDetailRequest
        @return: DescribePropertyScaProcessDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_property_sca_process_detail_with_options_async(request, runtime)

    def describe_property_schedule_config_with_options(
        self,
        request: sas_20181203_models.DescribePropertyScheduleConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribePropertyScheduleConfigResponse:
        """
        @summary Queries the configurations of scheduled tasks of asset fingerprint collection.
        
        @param request: DescribePropertyScheduleConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePropertyScheduleConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePropertyScheduleConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribePropertyScheduleConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_property_schedule_config_with_options_async(
        self,
        request: sas_20181203_models.DescribePropertyScheduleConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribePropertyScheduleConfigResponse:
        """
        @summary Queries the configurations of scheduled tasks of asset fingerprint collection.
        
        @param request: DescribePropertyScheduleConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePropertyScheduleConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePropertyScheduleConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribePropertyScheduleConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_property_schedule_config(
        self,
        request: sas_20181203_models.DescribePropertyScheduleConfigRequest,
    ) -> sas_20181203_models.DescribePropertyScheduleConfigResponse:
        """
        @summary Queries the configurations of scheduled tasks of asset fingerprint collection.
        
        @param request: DescribePropertyScheduleConfigRequest
        @return: DescribePropertyScheduleConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_property_schedule_config_with_options(request, runtime)

    async def describe_property_schedule_config_async(
        self,
        request: sas_20181203_models.DescribePropertyScheduleConfigRequest,
    ) -> sas_20181203_models.DescribePropertyScheduleConfigResponse:
        """
        @summary Queries the configurations of scheduled tasks of asset fingerprint collection.
        
        @param request: DescribePropertyScheduleConfigRequest
        @return: DescribePropertyScheduleConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_property_schedule_config_with_options_async(request, runtime)

    def describe_property_software_detail_with_options(
        self,
        request: sas_20181203_models.DescribePropertySoftwareDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribePropertySoftwareDetailResponse:
        """
        @summary Queries the details of a software asset.
        
        @param request: DescribePropertySoftwareDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePropertySoftwareDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.extend):
            query['Extend'] = request.extend
        if not UtilClient.is_unset(request.install_time_end):
            query['InstallTimeEnd'] = request.install_time_end
        if not UtilClient.is_unset(request.install_time_start):
            query['InstallTimeStart'] = request.install_time_start
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.path):
            query['Path'] = request.path
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.software_version):
            query['SoftwareVersion'] = request.software_version
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePropertySoftwareDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribePropertySoftwareDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_property_software_detail_with_options_async(
        self,
        request: sas_20181203_models.DescribePropertySoftwareDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribePropertySoftwareDetailResponse:
        """
        @summary Queries the details of a software asset.
        
        @param request: DescribePropertySoftwareDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePropertySoftwareDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.extend):
            query['Extend'] = request.extend
        if not UtilClient.is_unset(request.install_time_end):
            query['InstallTimeEnd'] = request.install_time_end
        if not UtilClient.is_unset(request.install_time_start):
            query['InstallTimeStart'] = request.install_time_start
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.path):
            query['Path'] = request.path
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.software_version):
            query['SoftwareVersion'] = request.software_version
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePropertySoftwareDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribePropertySoftwareDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_property_software_detail(
        self,
        request: sas_20181203_models.DescribePropertySoftwareDetailRequest,
    ) -> sas_20181203_models.DescribePropertySoftwareDetailResponse:
        """
        @summary Queries the details of a software asset.
        
        @param request: DescribePropertySoftwareDetailRequest
        @return: DescribePropertySoftwareDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_property_software_detail_with_options(request, runtime)

    async def describe_property_software_detail_async(
        self,
        request: sas_20181203_models.DescribePropertySoftwareDetailRequest,
    ) -> sas_20181203_models.DescribePropertySoftwareDetailResponse:
        """
        @summary Queries the details of a software asset.
        
        @param request: DescribePropertySoftwareDetailRequest
        @return: DescribePropertySoftwareDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_property_software_detail_with_options_async(request, runtime)

    def describe_property_software_item_with_options(
        self,
        request: sas_20181203_models.DescribePropertySoftwareItemRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribePropertySoftwareItemResponse:
        """
        @summary Queries information about all software assets.
        
        @param request: DescribePropertySoftwareItemRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePropertySoftwareItemResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.force_flush):
            query['ForceFlush'] = request.force_flush
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePropertySoftwareItem',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribePropertySoftwareItemResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_property_software_item_with_options_async(
        self,
        request: sas_20181203_models.DescribePropertySoftwareItemRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribePropertySoftwareItemResponse:
        """
        @summary Queries information about all software assets.
        
        @param request: DescribePropertySoftwareItemRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePropertySoftwareItemResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.force_flush):
            query['ForceFlush'] = request.force_flush
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePropertySoftwareItem',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribePropertySoftwareItemResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_property_software_item(
        self,
        request: sas_20181203_models.DescribePropertySoftwareItemRequest,
    ) -> sas_20181203_models.DescribePropertySoftwareItemResponse:
        """
        @summary Queries information about all software assets.
        
        @param request: DescribePropertySoftwareItemRequest
        @return: DescribePropertySoftwareItemResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_property_software_item_with_options(request, runtime)

    async def describe_property_software_item_async(
        self,
        request: sas_20181203_models.DescribePropertySoftwareItemRequest,
    ) -> sas_20181203_models.DescribePropertySoftwareItemResponse:
        """
        @summary Queries information about all software assets.
        
        @param request: DescribePropertySoftwareItemRequest
        @return: DescribePropertySoftwareItemResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_property_software_item_with_options_async(request, runtime)

    def describe_property_type_sca_item_with_options(
        self,
        request: sas_20181203_models.DescribePropertyTypeScaItemRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribePropertyTypeScaItemResponse:
        """
        @summary Queries middleware types.
        
        @param request: DescribePropertyTypeScaItemRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePropertyTypeScaItemResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePropertyTypeScaItem',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribePropertyTypeScaItemResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_property_type_sca_item_with_options_async(
        self,
        request: sas_20181203_models.DescribePropertyTypeScaItemRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribePropertyTypeScaItemResponse:
        """
        @summary Queries middleware types.
        
        @param request: DescribePropertyTypeScaItemRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePropertyTypeScaItemResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePropertyTypeScaItem',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribePropertyTypeScaItemResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_property_type_sca_item(
        self,
        request: sas_20181203_models.DescribePropertyTypeScaItemRequest,
    ) -> sas_20181203_models.DescribePropertyTypeScaItemResponse:
        """
        @summary Queries middleware types.
        
        @param request: DescribePropertyTypeScaItemRequest
        @return: DescribePropertyTypeScaItemResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_property_type_sca_item_with_options(request, runtime)

    async def describe_property_type_sca_item_async(
        self,
        request: sas_20181203_models.DescribePropertyTypeScaItemRequest,
    ) -> sas_20181203_models.DescribePropertyTypeScaItemResponse:
        """
        @summary Queries middleware types.
        
        @param request: DescribePropertyTypeScaItemRequest
        @return: DescribePropertyTypeScaItemResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_property_type_sca_item_with_options_async(request, runtime)

    def describe_property_usage_top_with_options(
        self,
        request: sas_20181203_models.DescribePropertyUsageTopRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribePropertyUsageTopResponse:
        """
        @summary Uses the asset fingerprints feature to obtain the statistics on top five most frequently detected ports, processes, software, accounts, or middleware.
        
        @description Only users who purchase the Enterprise or Ultimate edition of Security Center can call this operation.
        
        @param request: DescribePropertyUsageTopRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePropertyUsageTopResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePropertyUsageTop',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribePropertyUsageTopResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_property_usage_top_with_options_async(
        self,
        request: sas_20181203_models.DescribePropertyUsageTopRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribePropertyUsageTopResponse:
        """
        @summary Uses the asset fingerprints feature to obtain the statistics on top five most frequently detected ports, processes, software, accounts, or middleware.
        
        @description Only users who purchase the Enterprise or Ultimate edition of Security Center can call this operation.
        
        @param request: DescribePropertyUsageTopRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePropertyUsageTopResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePropertyUsageTop',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribePropertyUsageTopResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_property_usage_top(
        self,
        request: sas_20181203_models.DescribePropertyUsageTopRequest,
    ) -> sas_20181203_models.DescribePropertyUsageTopResponse:
        """
        @summary Uses the asset fingerprints feature to obtain the statistics on top five most frequently detected ports, processes, software, accounts, or middleware.
        
        @description Only users who purchase the Enterprise or Ultimate edition of Security Center can call this operation.
        
        @param request: DescribePropertyUsageTopRequest
        @return: DescribePropertyUsageTopResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_property_usage_top_with_options(request, runtime)

    async def describe_property_usage_top_async(
        self,
        request: sas_20181203_models.DescribePropertyUsageTopRequest,
    ) -> sas_20181203_models.DescribePropertyUsageTopResponse:
        """
        @summary Uses the asset fingerprints feature to obtain the statistics on top five most frequently detected ports, processes, software, accounts, or middleware.
        
        @description Only users who purchase the Enterprise or Ultimate edition of Security Center can call this operation.
        
        @param request: DescribePropertyUsageTopRequest
        @return: DescribePropertyUsageTopResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_property_usage_top_with_options_async(request, runtime)

    def describe_property_user_detail_with_options(
        self,
        request: sas_20181203_models.DescribePropertyUserDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribePropertyUserDetailResponse:
        """
        @summary Queries the asset fingerprints for an account to which a server belongs.
        
        @param request: DescribePropertyUserDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePropertyUserDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.extend):
            query['Extend'] = request.extend
        if not UtilClient.is_unset(request.is_root):
            query['IsRoot'] = request.is_root
        if not UtilClient.is_unset(request.last_login_time_end):
            query['LastLoginTimeEnd'] = request.last_login_time_end
        if not UtilClient.is_unset(request.last_login_time_start):
            query['LastLoginTimeStart'] = request.last_login_time_start
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.user):
            query['User'] = request.user
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePropertyUserDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribePropertyUserDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_property_user_detail_with_options_async(
        self,
        request: sas_20181203_models.DescribePropertyUserDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribePropertyUserDetailResponse:
        """
        @summary Queries the asset fingerprints for an account to which a server belongs.
        
        @param request: DescribePropertyUserDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePropertyUserDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.extend):
            query['Extend'] = request.extend
        if not UtilClient.is_unset(request.is_root):
            query['IsRoot'] = request.is_root
        if not UtilClient.is_unset(request.last_login_time_end):
            query['LastLoginTimeEnd'] = request.last_login_time_end
        if not UtilClient.is_unset(request.last_login_time_start):
            query['LastLoginTimeStart'] = request.last_login_time_start
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.user):
            query['User'] = request.user
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePropertyUserDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribePropertyUserDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_property_user_detail(
        self,
        request: sas_20181203_models.DescribePropertyUserDetailRequest,
    ) -> sas_20181203_models.DescribePropertyUserDetailResponse:
        """
        @summary Queries the asset fingerprints for an account to which a server belongs.
        
        @param request: DescribePropertyUserDetailRequest
        @return: DescribePropertyUserDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_property_user_detail_with_options(request, runtime)

    async def describe_property_user_detail_async(
        self,
        request: sas_20181203_models.DescribePropertyUserDetailRequest,
    ) -> sas_20181203_models.DescribePropertyUserDetailResponse:
        """
        @summary Queries the asset fingerprints for an account to which a server belongs.
        
        @param request: DescribePropertyUserDetailRequest
        @return: DescribePropertyUserDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_property_user_detail_with_options_async(request, runtime)

    def describe_property_user_item_with_options(
        self,
        request: sas_20181203_models.DescribePropertyUserItemRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribePropertyUserItemResponse:
        """
        @summary Queries information about an account.
        
        @param request: DescribePropertyUserItemRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePropertyUserItemResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.force_flush):
            query['ForceFlush'] = request.force_flush
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.user):
            query['User'] = request.user
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePropertyUserItem',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribePropertyUserItemResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_property_user_item_with_options_async(
        self,
        request: sas_20181203_models.DescribePropertyUserItemRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribePropertyUserItemResponse:
        """
        @summary Queries information about an account.
        
        @param request: DescribePropertyUserItemRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribePropertyUserItemResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.force_flush):
            query['ForceFlush'] = request.force_flush
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.user):
            query['User'] = request.user
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribePropertyUserItem',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribePropertyUserItemResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_property_user_item(
        self,
        request: sas_20181203_models.DescribePropertyUserItemRequest,
    ) -> sas_20181203_models.DescribePropertyUserItemResponse:
        """
        @summary Queries information about an account.
        
        @param request: DescribePropertyUserItemRequest
        @return: DescribePropertyUserItemResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_property_user_item_with_options(request, runtime)

    async def describe_property_user_item_async(
        self,
        request: sas_20181203_models.DescribePropertyUserItemRequest,
    ) -> sas_20181203_models.DescribePropertyUserItemResponse:
        """
        @summary Queries information about an account.
        
        @param request: DescribePropertyUserItemRequest
        @return: DescribePropertyUserItemResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_property_user_item_with_options_async(request, runtime)

    def describe_quara_file_download_info_with_options(
        self,
        request: sas_20181203_models.DescribeQuaraFileDownloadInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeQuaraFileDownloadInfoResponse:
        """
        @summary Queries the download information about a quarantined file.
        
        @param request: DescribeQuaraFileDownloadInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeQuaraFileDownloadInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.quara_file_id):
            query['QuaraFileId'] = request.quara_file_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeQuaraFileDownloadInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeQuaraFileDownloadInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_quara_file_download_info_with_options_async(
        self,
        request: sas_20181203_models.DescribeQuaraFileDownloadInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeQuaraFileDownloadInfoResponse:
        """
        @summary Queries the download information about a quarantined file.
        
        @param request: DescribeQuaraFileDownloadInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeQuaraFileDownloadInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.quara_file_id):
            query['QuaraFileId'] = request.quara_file_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeQuaraFileDownloadInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeQuaraFileDownloadInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_quara_file_download_info(
        self,
        request: sas_20181203_models.DescribeQuaraFileDownloadInfoRequest,
    ) -> sas_20181203_models.DescribeQuaraFileDownloadInfoResponse:
        """
        @summary Queries the download information about a quarantined file.
        
        @param request: DescribeQuaraFileDownloadInfoRequest
        @return: DescribeQuaraFileDownloadInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_quara_file_download_info_with_options(request, runtime)

    async def describe_quara_file_download_info_async(
        self,
        request: sas_20181203_models.DescribeQuaraFileDownloadInfoRequest,
    ) -> sas_20181203_models.DescribeQuaraFileDownloadInfoResponse:
        """
        @summary Queries the download information about a quarantined file.
        
        @param request: DescribeQuaraFileDownloadInfoRequest
        @return: DescribeQuaraFileDownloadInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_quara_file_download_info_with_options_async(request, runtime)

    def describe_report_export_with_options(
        self,
        request: sas_20181203_models.DescribeReportExportRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeReportExportResponse:
        """
        @summary Queries the information about a report export task.
        
        @param request: DescribeReportExportRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeReportExportResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.export_id):
            query['ExportId'] = request.export_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeReportExport',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeReportExportResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_report_export_with_options_async(
        self,
        request: sas_20181203_models.DescribeReportExportRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeReportExportResponse:
        """
        @summary Queries the information about a report export task.
        
        @param request: DescribeReportExportRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeReportExportResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.export_id):
            query['ExportId'] = request.export_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeReportExport',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeReportExportResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_report_export(
        self,
        request: sas_20181203_models.DescribeReportExportRequest,
    ) -> sas_20181203_models.DescribeReportExportResponse:
        """
        @summary Queries the information about a report export task.
        
        @param request: DescribeReportExportRequest
        @return: DescribeReportExportResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_report_export_with_options(request, runtime)

    async def describe_report_export_async(
        self,
        request: sas_20181203_models.DescribeReportExportRequest,
    ) -> sas_20181203_models.DescribeReportExportResponse:
        """
        @summary Queries the information about a report export task.
        
        @param request: DescribeReportExportRequest
        @return: DescribeReportExportResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_report_export_with_options_async(request, runtime)

    def describe_report_recipient_status_with_options(
        self,
        request: sas_20181203_models.DescribeReportRecipientStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeReportRecipientStatusResponse:
        """
        @summary Queries the status of a report recipient by using the security report feature of the System Configuration module in the Security Center console.
        
        @param request: DescribeReportRecipientStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeReportRecipientStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.recipients):
            query['Recipients'] = request.recipients
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeReportRecipientStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeReportRecipientStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_report_recipient_status_with_options_async(
        self,
        request: sas_20181203_models.DescribeReportRecipientStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeReportRecipientStatusResponse:
        """
        @summary Queries the status of a report recipient by using the security report feature of the System Configuration module in the Security Center console.
        
        @param request: DescribeReportRecipientStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeReportRecipientStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.recipients):
            query['Recipients'] = request.recipients
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeReportRecipientStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeReportRecipientStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_report_recipient_status(
        self,
        request: sas_20181203_models.DescribeReportRecipientStatusRequest,
    ) -> sas_20181203_models.DescribeReportRecipientStatusResponse:
        """
        @summary Queries the status of a report recipient by using the security report feature of the System Configuration module in the Security Center console.
        
        @param request: DescribeReportRecipientStatusRequest
        @return: DescribeReportRecipientStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_report_recipient_status_with_options(request, runtime)

    async def describe_report_recipient_status_async(
        self,
        request: sas_20181203_models.DescribeReportRecipientStatusRequest,
    ) -> sas_20181203_models.DescribeReportRecipientStatusResponse:
        """
        @summary Queries the status of a report recipient by using the security report feature of the System Configuration module in the Security Center console.
        
        @param request: DescribeReportRecipientStatusRequest
        @return: DescribeReportRecipientStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_report_recipient_status_with_options_async(request, runtime)

    def describe_restore_jobs_with_options(
        self,
        request: sas_20181203_models.DescribeRestoreJobsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeRestoreJobsResponse:
        """
        @summary Queries the details about restoration tasks.
        
        @description If the data on your servers is encrypted by ransomware, you can create a restoration task to restore the data on your servers by using backup data in Security Center.
        >  After you enable an anti-ransomware policy, the data on your servers is backed up based on the policy. For more information about anti-ransomware policies, see [Manage protection policies](https://help.aliyun.com/document_detail/164781.html).
        
        @param request: DescribeRestoreJobsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRestoreJobsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.machine_remark):
            query['MachineRemark'] = request.machine_remark
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRestoreJobs',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeRestoreJobsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_restore_jobs_with_options_async(
        self,
        request: sas_20181203_models.DescribeRestoreJobsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeRestoreJobsResponse:
        """
        @summary Queries the details about restoration tasks.
        
        @description If the data on your servers is encrypted by ransomware, you can create a restoration task to restore the data on your servers by using backup data in Security Center.
        >  After you enable an anti-ransomware policy, the data on your servers is backed up based on the policy. For more information about anti-ransomware policies, see [Manage protection policies](https://help.aliyun.com/document_detail/164781.html).
        
        @param request: DescribeRestoreJobsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRestoreJobsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.machine_remark):
            query['MachineRemark'] = request.machine_remark
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRestoreJobs',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeRestoreJobsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_restore_jobs(
        self,
        request: sas_20181203_models.DescribeRestoreJobsRequest,
    ) -> sas_20181203_models.DescribeRestoreJobsResponse:
        """
        @summary Queries the details about restoration tasks.
        
        @description If the data on your servers is encrypted by ransomware, you can create a restoration task to restore the data on your servers by using backup data in Security Center.
        >  After you enable an anti-ransomware policy, the data on your servers is backed up based on the policy. For more information about anti-ransomware policies, see [Manage protection policies](https://help.aliyun.com/document_detail/164781.html).
        
        @param request: DescribeRestoreJobsRequest
        @return: DescribeRestoreJobsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_restore_jobs_with_options(request, runtime)

    async def describe_restore_jobs_async(
        self,
        request: sas_20181203_models.DescribeRestoreJobsRequest,
    ) -> sas_20181203_models.DescribeRestoreJobsResponse:
        """
        @summary Queries the details about restoration tasks.
        
        @description If the data on your servers is encrypted by ransomware, you can create a restoration task to restore the data on your servers by using backup data in Security Center.
        >  After you enable an anti-ransomware policy, the data on your servers is backed up based on the policy. For more information about anti-ransomware policies, see [Manage protection policies](https://help.aliyun.com/document_detail/164781.html).
        
        @param request: DescribeRestoreJobsRequest
        @return: DescribeRestoreJobsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_restore_jobs_with_options_async(request, runtime)

    def describe_restore_plans_with_options(
        self,
        request: sas_20181203_models.DescribeRestorePlansRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeRestorePlansResponse:
        """
        @summary Queries restoration tasks.
        
        @param request: DescribeRestorePlansRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRestorePlansResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.instance_name):
            query['InstanceName'] = request.instance_name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRestorePlans',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeRestorePlansResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_restore_plans_with_options_async(
        self,
        request: sas_20181203_models.DescribeRestorePlansRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeRestorePlansResponse:
        """
        @summary Queries restoration tasks.
        
        @param request: DescribeRestorePlansRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRestorePlansResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.instance_name):
            query['InstanceName'] = request.instance_name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRestorePlans',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeRestorePlansResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_restore_plans(
        self,
        request: sas_20181203_models.DescribeRestorePlansRequest,
    ) -> sas_20181203_models.DescribeRestorePlansResponse:
        """
        @summary Queries restoration tasks.
        
        @param request: DescribeRestorePlansRequest
        @return: DescribeRestorePlansResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_restore_plans_with_options(request, runtime)

    async def describe_restore_plans_async(
        self,
        request: sas_20181203_models.DescribeRestorePlansRequest,
    ) -> sas_20181203_models.DescribeRestorePlansResponse:
        """
        @summary Queries restoration tasks.
        
        @param request: DescribeRestorePlansRequest
        @return: DescribeRestorePlansResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_restore_plans_with_options_async(request, runtime)

    def describe_risk_check_item_result_with_options(
        self,
        request: sas_20181203_models.DescribeRiskCheckItemResultRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeRiskCheckItemResultResponse:
        """
        @deprecated OpenAPI DescribeRiskCheckItemResult is deprecated
        
        @summary Queries the assets that are affected by the risk item detected in configuration assessment based on a specified check item.
        
        @description This operation is phased out. You can use the ListCheckInstanceResult operation.
        
        @param request: DescribeRiskCheckItemResultRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRiskCheckItemResultResponse
        Deprecated
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.item_id):
            query['ItemId'] = request.item_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRiskCheckItemResult',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeRiskCheckItemResultResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_risk_check_item_result_with_options_async(
        self,
        request: sas_20181203_models.DescribeRiskCheckItemResultRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeRiskCheckItemResultResponse:
        """
        @deprecated OpenAPI DescribeRiskCheckItemResult is deprecated
        
        @summary Queries the assets that are affected by the risk item detected in configuration assessment based on a specified check item.
        
        @description This operation is phased out. You can use the ListCheckInstanceResult operation.
        
        @param request: DescribeRiskCheckItemResultRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRiskCheckItemResultResponse
        Deprecated
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.item_id):
            query['ItemId'] = request.item_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRiskCheckItemResult',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeRiskCheckItemResultResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_risk_check_item_result(
        self,
        request: sas_20181203_models.DescribeRiskCheckItemResultRequest,
    ) -> sas_20181203_models.DescribeRiskCheckItemResultResponse:
        """
        @deprecated OpenAPI DescribeRiskCheckItemResult is deprecated
        
        @summary Queries the assets that are affected by the risk item detected in configuration assessment based on a specified check item.
        
        @description This operation is phased out. You can use the ListCheckInstanceResult operation.
        
        @param request: DescribeRiskCheckItemResultRequest
        @return: DescribeRiskCheckItemResultResponse
        Deprecated
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_risk_check_item_result_with_options(request, runtime)

    async def describe_risk_check_item_result_async(
        self,
        request: sas_20181203_models.DescribeRiskCheckItemResultRequest,
    ) -> sas_20181203_models.DescribeRiskCheckItemResultResponse:
        """
        @deprecated OpenAPI DescribeRiskCheckItemResult is deprecated
        
        @summary Queries the assets that are affected by the risk item detected in configuration assessment based on a specified check item.
        
        @description This operation is phased out. You can use the ListCheckInstanceResult operation.
        
        @param request: DescribeRiskCheckItemResultRequest
        @return: DescribeRiskCheckItemResultResponse
        Deprecated
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_risk_check_item_result_with_options_async(request, runtime)

    def describe_risk_check_result_with_options(
        self,
        request: sas_20181203_models.DescribeRiskCheckResultRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeRiskCheckResultResponse:
        """
        @deprecated OpenAPI DescribeRiskCheckResult is deprecated
        
        @summary Queries the check results of cloud service configurations by check item type or name.
        
        @description This operation is phased out. You can use the [ListCheckResult](~~ListCheckResult~~) operation.
        
        @param request: DescribeRiskCheckResultRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRiskCheckResultResponse
        Deprecated
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.asset_type):
            query['AssetType'] = request.asset_type
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.item_ids):
            query['ItemIds'] = request.item_ids
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.query_flag):
            query['QueryFlag'] = request.query_flag
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.risk_level):
            query['RiskLevel'] = request.risk_level
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRiskCheckResult',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeRiskCheckResultResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_risk_check_result_with_options_async(
        self,
        request: sas_20181203_models.DescribeRiskCheckResultRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeRiskCheckResultResponse:
        """
        @deprecated OpenAPI DescribeRiskCheckResult is deprecated
        
        @summary Queries the check results of cloud service configurations by check item type or name.
        
        @description This operation is phased out. You can use the [ListCheckResult](~~ListCheckResult~~) operation.
        
        @param request: DescribeRiskCheckResultRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRiskCheckResultResponse
        Deprecated
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.asset_type):
            query['AssetType'] = request.asset_type
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.item_ids):
            query['ItemIds'] = request.item_ids
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.query_flag):
            query['QueryFlag'] = request.query_flag
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.risk_level):
            query['RiskLevel'] = request.risk_level
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRiskCheckResult',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeRiskCheckResultResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_risk_check_result(
        self,
        request: sas_20181203_models.DescribeRiskCheckResultRequest,
    ) -> sas_20181203_models.DescribeRiskCheckResultResponse:
        """
        @deprecated OpenAPI DescribeRiskCheckResult is deprecated
        
        @summary Queries the check results of cloud service configurations by check item type or name.
        
        @description This operation is phased out. You can use the [ListCheckResult](~~ListCheckResult~~) operation.
        
        @param request: DescribeRiskCheckResultRequest
        @return: DescribeRiskCheckResultResponse
        Deprecated
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_risk_check_result_with_options(request, runtime)

    async def describe_risk_check_result_async(
        self,
        request: sas_20181203_models.DescribeRiskCheckResultRequest,
    ) -> sas_20181203_models.DescribeRiskCheckResultResponse:
        """
        @deprecated OpenAPI DescribeRiskCheckResult is deprecated
        
        @summary Queries the check results of cloud service configurations by check item type or name.
        
        @description This operation is phased out. You can use the [ListCheckResult](~~ListCheckResult~~) operation.
        
        @param request: DescribeRiskCheckResultRequest
        @return: DescribeRiskCheckResultResponse
        Deprecated
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_risk_check_result_with_options_async(request, runtime)

    def describe_risk_check_summary_with_options(
        self,
        request: sas_20181203_models.DescribeRiskCheckSummaryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeRiskCheckSummaryResponse:
        """
        @deprecated OpenAPI DescribeRiskCheckSummary is deprecated
        
        @summary Queries the summary information about the check results of cloud service configurations. The information includes the number of risk items, the risk rate, the number of affected assets, the check time, and the statistics for each type of check item.
        
        @description This operation is phased out. You can use the GetCheckSummary operation.
        
        @param request: DescribeRiskCheckSummaryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRiskCheckSummaryResponse
        Deprecated
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRiskCheckSummary',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeRiskCheckSummaryResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_risk_check_summary_with_options_async(
        self,
        request: sas_20181203_models.DescribeRiskCheckSummaryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeRiskCheckSummaryResponse:
        """
        @deprecated OpenAPI DescribeRiskCheckSummary is deprecated
        
        @summary Queries the summary information about the check results of cloud service configurations. The information includes the number of risk items, the risk rate, the number of affected assets, the check time, and the statistics for each type of check item.
        
        @description This operation is phased out. You can use the GetCheckSummary operation.
        
        @param request: DescribeRiskCheckSummaryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRiskCheckSummaryResponse
        Deprecated
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRiskCheckSummary',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeRiskCheckSummaryResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_risk_check_summary(
        self,
        request: sas_20181203_models.DescribeRiskCheckSummaryRequest,
    ) -> sas_20181203_models.DescribeRiskCheckSummaryResponse:
        """
        @deprecated OpenAPI DescribeRiskCheckSummary is deprecated
        
        @summary Queries the summary information about the check results of cloud service configurations. The information includes the number of risk items, the risk rate, the number of affected assets, the check time, and the statistics for each type of check item.
        
        @description This operation is phased out. You can use the GetCheckSummary operation.
        
        @param request: DescribeRiskCheckSummaryRequest
        @return: DescribeRiskCheckSummaryResponse
        Deprecated
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_risk_check_summary_with_options(request, runtime)

    async def describe_risk_check_summary_async(
        self,
        request: sas_20181203_models.DescribeRiskCheckSummaryRequest,
    ) -> sas_20181203_models.DescribeRiskCheckSummaryResponse:
        """
        @deprecated OpenAPI DescribeRiskCheckSummary is deprecated
        
        @summary Queries the summary information about the check results of cloud service configurations. The information includes the number of risk items, the risk rate, the number of affected assets, the check time, and the statistics for each type of check item.
        
        @description This operation is phased out. You can use the GetCheckSummary operation.
        
        @param request: DescribeRiskCheckSummaryRequest
        @return: DescribeRiskCheckSummaryResponse
        Deprecated
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_risk_check_summary_with_options_async(request, runtime)

    def describe_risk_item_type_with_options(
        self,
        request: sas_20181203_models.DescribeRiskItemTypeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeRiskItemTypeResponse:
        """
        @deprecated OpenAPI DescribeRiskItemType is deprecated
        
        @summary Queries the types of check items in configuration assessment.
        
        @description This operation is phased out. You can use the ListCheckStandard operation instead.
        
        @param request: DescribeRiskItemTypeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRiskItemTypeResponse
        Deprecated
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRiskItemType',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeRiskItemTypeResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_risk_item_type_with_options_async(
        self,
        request: sas_20181203_models.DescribeRiskItemTypeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeRiskItemTypeResponse:
        """
        @deprecated OpenAPI DescribeRiskItemType is deprecated
        
        @summary Queries the types of check items in configuration assessment.
        
        @description This operation is phased out. You can use the ListCheckStandard operation instead.
        
        @param request: DescribeRiskItemTypeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRiskItemTypeResponse
        Deprecated
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRiskItemType',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeRiskItemTypeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_risk_item_type(
        self,
        request: sas_20181203_models.DescribeRiskItemTypeRequest,
    ) -> sas_20181203_models.DescribeRiskItemTypeResponse:
        """
        @deprecated OpenAPI DescribeRiskItemType is deprecated
        
        @summary Queries the types of check items in configuration assessment.
        
        @description This operation is phased out. You can use the ListCheckStandard operation instead.
        
        @param request: DescribeRiskItemTypeRequest
        @return: DescribeRiskItemTypeResponse
        Deprecated
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_risk_item_type_with_options(request, runtime)

    async def describe_risk_item_type_async(
        self,
        request: sas_20181203_models.DescribeRiskItemTypeRequest,
    ) -> sas_20181203_models.DescribeRiskItemTypeResponse:
        """
        @deprecated OpenAPI DescribeRiskItemType is deprecated
        
        @summary Queries the types of check items in configuration assessment.
        
        @description This operation is phased out. You can use the ListCheckStandard operation instead.
        
        @param request: DescribeRiskItemTypeRequest
        @return: DescribeRiskItemTypeResponse
        Deprecated
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_risk_item_type_with_options_async(request, runtime)

    def describe_risk_list_check_result_with_options(
        self,
        request: sas_20181203_models.DescribeRiskListCheckResultRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeRiskListCheckResultResponse:
        """
        @deprecated OpenAPI DescribeRiskListCheckResult is deprecated
        
        @summary Queries the number of risk items detected in the configuration assessment of one or more cloud services by using the instance IDs of the cloud services.
        
        @description This operation is phased out. You can use the ListCheckResult operation. When you call the ListCheckResult operation, set the Statuses parameter to NOT_PASS.
        
        @param request: DescribeRiskListCheckResultRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRiskListCheckResultResponse
        Deprecated
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.instance_ids):
            query['InstanceIds'] = request.instance_ids
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRiskListCheckResult',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeRiskListCheckResultResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_risk_list_check_result_with_options_async(
        self,
        request: sas_20181203_models.DescribeRiskListCheckResultRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeRiskListCheckResultResponse:
        """
        @deprecated OpenAPI DescribeRiskListCheckResult is deprecated
        
        @summary Queries the number of risk items detected in the configuration assessment of one or more cloud services by using the instance IDs of the cloud services.
        
        @description This operation is phased out. You can use the ListCheckResult operation. When you call the ListCheckResult operation, set the Statuses parameter to NOT_PASS.
        
        @param request: DescribeRiskListCheckResultRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRiskListCheckResultResponse
        Deprecated
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.instance_ids):
            query['InstanceIds'] = request.instance_ids
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRiskListCheckResult',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeRiskListCheckResultResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_risk_list_check_result(
        self,
        request: sas_20181203_models.DescribeRiskListCheckResultRequest,
    ) -> sas_20181203_models.DescribeRiskListCheckResultResponse:
        """
        @deprecated OpenAPI DescribeRiskListCheckResult is deprecated
        
        @summary Queries the number of risk items detected in the configuration assessment of one or more cloud services by using the instance IDs of the cloud services.
        
        @description This operation is phased out. You can use the ListCheckResult operation. When you call the ListCheckResult operation, set the Statuses parameter to NOT_PASS.
        
        @param request: DescribeRiskListCheckResultRequest
        @return: DescribeRiskListCheckResultResponse
        Deprecated
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_risk_list_check_result_with_options(request, runtime)

    async def describe_risk_list_check_result_async(
        self,
        request: sas_20181203_models.DescribeRiskListCheckResultRequest,
    ) -> sas_20181203_models.DescribeRiskListCheckResultResponse:
        """
        @deprecated OpenAPI DescribeRiskListCheckResult is deprecated
        
        @summary Queries the number of risk items detected in the configuration assessment of one or more cloud services by using the instance IDs of the cloud services.
        
        @description This operation is phased out. You can use the ListCheckResult operation. When you call the ListCheckResult operation, set the Statuses parameter to NOT_PASS.
        
        @param request: DescribeRiskListCheckResultRequest
        @return: DescribeRiskListCheckResultResponse
        Deprecated
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_risk_list_check_result_with_options_async(request, runtime)

    def describe_risk_type_with_options(
        self,
        request: sas_20181203_models.DescribeRiskTypeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeRiskTypeResponse:
        """
        @summary Queries baseline types.
        
        @param request: DescribeRiskTypeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRiskTypeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRiskType',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeRiskTypeResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_risk_type_with_options_async(
        self,
        request: sas_20181203_models.DescribeRiskTypeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeRiskTypeResponse:
        """
        @summary Queries baseline types.
        
        @param request: DescribeRiskTypeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRiskTypeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRiskType',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeRiskTypeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_risk_type(
        self,
        request: sas_20181203_models.DescribeRiskTypeRequest,
    ) -> sas_20181203_models.DescribeRiskTypeResponse:
        """
        @summary Queries baseline types.
        
        @param request: DescribeRiskTypeRequest
        @return: DescribeRiskTypeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_risk_type_with_options(request, runtime)

    async def describe_risk_type_async(
        self,
        request: sas_20181203_models.DescribeRiskTypeRequest,
    ) -> sas_20181203_models.DescribeRiskTypeResponse:
        """
        @summary Queries baseline types.
        
        @param request: DescribeRiskTypeRequest
        @return: DescribeRiskTypeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_risk_type_with_options_async(request, runtime)

    def describe_risks_with_options(
        self,
        request: sas_20181203_models.DescribeRisksRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeRisksResponse:
        """
        @summary Queries the information about baselines based on baseline IDs or names.
        
        @param request: DescribeRisksRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRisksResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.limit):
            query['Limit'] = request.limit
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.risk_id):
            query['RiskId'] = request.risk_id
        if not UtilClient.is_unset(request.risk_name):
            query['RiskName'] = request.risk_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRisks',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeRisksResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_risks_with_options_async(
        self,
        request: sas_20181203_models.DescribeRisksRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeRisksResponse:
        """
        @summary Queries the information about baselines based on baseline IDs or names.
        
        @param request: DescribeRisksRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeRisksResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.limit):
            query['Limit'] = request.limit
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.risk_id):
            query['RiskId'] = request.risk_id
        if not UtilClient.is_unset(request.risk_name):
            query['RiskName'] = request.risk_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeRisks',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeRisksResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_risks(
        self,
        request: sas_20181203_models.DescribeRisksRequest,
    ) -> sas_20181203_models.DescribeRisksResponse:
        """
        @summary Queries the information about baselines based on baseline IDs or names.
        
        @param request: DescribeRisksRequest
        @return: DescribeRisksResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_risks_with_options(request, runtime)

    async def describe_risks_async(
        self,
        request: sas_20181203_models.DescribeRisksRequest,
    ) -> sas_20181203_models.DescribeRisksResponse:
        """
        @summary Queries the information about baselines based on baseline IDs or names.
        
        @param request: DescribeRisksRequest
        @return: DescribeRisksResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_risks_with_options_async(request, runtime)

    def describe_sas_pm_agent_list_with_options(
        self,
        request: sas_20181203_models.DescribeSasPmAgentListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSasPmAgentListResponse:
        """
        @summary Queries the servers on which you want to install Cloud Assistant or the CloudMonitor agent.
        
        @param request: DescribeSasPmAgentListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSasPmAgentListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSasPmAgentList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSasPmAgentListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_sas_pm_agent_list_with_options_async(
        self,
        request: sas_20181203_models.DescribeSasPmAgentListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSasPmAgentListResponse:
        """
        @summary Queries the servers on which you want to install Cloud Assistant or the CloudMonitor agent.
        
        @param request: DescribeSasPmAgentListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSasPmAgentListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSasPmAgentList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSasPmAgentListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_sas_pm_agent_list(
        self,
        request: sas_20181203_models.DescribeSasPmAgentListRequest,
    ) -> sas_20181203_models.DescribeSasPmAgentListResponse:
        """
        @summary Queries the servers on which you want to install Cloud Assistant or the CloudMonitor agent.
        
        @param request: DescribeSasPmAgentListRequest
        @return: DescribeSasPmAgentListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_sas_pm_agent_list_with_options(request, runtime)

    async def describe_sas_pm_agent_list_async(
        self,
        request: sas_20181203_models.DescribeSasPmAgentListRequest,
    ) -> sas_20181203_models.DescribeSasPmAgentListResponse:
        """
        @summary Queries the servers on which you want to install Cloud Assistant or the CloudMonitor agent.
        
        @param request: DescribeSasPmAgentListRequest
        @return: DescribeSasPmAgentListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_sas_pm_agent_list_with_options_async(request, runtime)

    def describe_scan_task_progress_with_options(
        self,
        request: sas_20181203_models.DescribeScanTaskProgressRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeScanTaskProgressResponse:
        """
        @summary Queries the progress of a virus scan task.
        
        @param request: DescribeScanTaskProgressRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeScanTaskProgressResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.task_id):
            query['TaskId'] = request.task_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeScanTaskProgress',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeScanTaskProgressResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_scan_task_progress_with_options_async(
        self,
        request: sas_20181203_models.DescribeScanTaskProgressRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeScanTaskProgressResponse:
        """
        @summary Queries the progress of a virus scan task.
        
        @param request: DescribeScanTaskProgressRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeScanTaskProgressResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.task_id):
            query['TaskId'] = request.task_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeScanTaskProgress',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeScanTaskProgressResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_scan_task_progress(
        self,
        request: sas_20181203_models.DescribeScanTaskProgressRequest,
    ) -> sas_20181203_models.DescribeScanTaskProgressResponse:
        """
        @summary Queries the progress of a virus scan task.
        
        @param request: DescribeScanTaskProgressRequest
        @return: DescribeScanTaskProgressResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_scan_task_progress_with_options(request, runtime)

    async def describe_scan_task_progress_async(
        self,
        request: sas_20181203_models.DescribeScanTaskProgressRequest,
    ) -> sas_20181203_models.DescribeScanTaskProgressResponse:
        """
        @summary Queries the progress of a virus scan task.
        
        @param request: DescribeScanTaskProgressRequest
        @return: DescribeScanTaskProgressResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_scan_task_progress_with_options_async(request, runtime)

    def describe_scan_task_statistics_with_options(
        self,
        request: sas_20181203_models.DescribeScanTaskStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeScanTaskStatisticsResponse:
        """
        @summary Queries the statistics of virus detection tasks.
        
        @param request: DescribeScanTaskStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeScanTaskStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.levels):
            query['Levels'] = request.levels
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeScanTaskStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeScanTaskStatisticsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_scan_task_statistics_with_options_async(
        self,
        request: sas_20181203_models.DescribeScanTaskStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeScanTaskStatisticsResponse:
        """
        @summary Queries the statistics of virus detection tasks.
        
        @param request: DescribeScanTaskStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeScanTaskStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.levels):
            query['Levels'] = request.levels
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeScanTaskStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeScanTaskStatisticsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_scan_task_statistics(
        self,
        request: sas_20181203_models.DescribeScanTaskStatisticsRequest,
    ) -> sas_20181203_models.DescribeScanTaskStatisticsResponse:
        """
        @summary Queries the statistics of virus detection tasks.
        
        @param request: DescribeScanTaskStatisticsRequest
        @return: DescribeScanTaskStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_scan_task_statistics_with_options(request, runtime)

    async def describe_scan_task_statistics_async(
        self,
        request: sas_20181203_models.DescribeScanTaskStatisticsRequest,
    ) -> sas_20181203_models.DescribeScanTaskStatisticsResponse:
        """
        @summary Queries the statistics of virus detection tasks.
        
        @param request: DescribeScanTaskStatisticsRequest
        @return: DescribeScanTaskStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_scan_task_statistics_with_options_async(request, runtime)

    def describe_screen_score_thread_with_options(
        self,
        request: sas_20181203_models.DescribeScreenScoreThreadRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeScreenScoreThreadResponse:
        """
        @summary Queries the trends of the scores on the security dashboard.
        
        @param request: DescribeScreenScoreThreadRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeScreenScoreThreadResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeScreenScoreThread',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeScreenScoreThreadResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_screen_score_thread_with_options_async(
        self,
        request: sas_20181203_models.DescribeScreenScoreThreadRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeScreenScoreThreadResponse:
        """
        @summary Queries the trends of the scores on the security dashboard.
        
        @param request: DescribeScreenScoreThreadRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeScreenScoreThreadResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeScreenScoreThread',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeScreenScoreThreadResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_screen_score_thread(
        self,
        request: sas_20181203_models.DescribeScreenScoreThreadRequest,
    ) -> sas_20181203_models.DescribeScreenScoreThreadResponse:
        """
        @summary Queries the trends of the scores on the security dashboard.
        
        @param request: DescribeScreenScoreThreadRequest
        @return: DescribeScreenScoreThreadResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_screen_score_thread_with_options(request, runtime)

    async def describe_screen_score_thread_async(
        self,
        request: sas_20181203_models.DescribeScreenScoreThreadRequest,
    ) -> sas_20181203_models.DescribeScreenScoreThreadResponse:
        """
        @summary Queries the trends of the scores on the security dashboard.
        
        @param request: DescribeScreenScoreThreadRequest
        @return: DescribeScreenScoreThreadResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_screen_score_thread_with_options_async(request, runtime)

    def describe_search_condition_with_options(
        self,
        request: sas_20181203_models.DescribeSearchConditionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSearchConditionResponse:
        """
        @summary Queries the filter conditions that are used to search for assets.
        
        @param request: DescribeSearchConditionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSearchConditionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSearchCondition',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSearchConditionResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_search_condition_with_options_async(
        self,
        request: sas_20181203_models.DescribeSearchConditionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSearchConditionResponse:
        """
        @summary Queries the filter conditions that are used to search for assets.
        
        @param request: DescribeSearchConditionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSearchConditionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSearchCondition',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSearchConditionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_search_condition(
        self,
        request: sas_20181203_models.DescribeSearchConditionRequest,
    ) -> sas_20181203_models.DescribeSearchConditionResponse:
        """
        @summary Queries the filter conditions that are used to search for assets.
        
        @param request: DescribeSearchConditionRequest
        @return: DescribeSearchConditionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_search_condition_with_options(request, runtime)

    async def describe_search_condition_async(
        self,
        request: sas_20181203_models.DescribeSearchConditionRequest,
    ) -> sas_20181203_models.DescribeSearchConditionResponse:
        """
        @summary Queries the filter conditions that are used to search for assets.
        
        @param request: DescribeSearchConditionRequest
        @return: DescribeSearchConditionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_search_condition_with_options_async(request, runtime)

    def describe_secure_suggestion_with_options(
        self,
        request: sas_20181203_models.DescribeSecureSuggestionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSecureSuggestionResponse:
        """
        @summary Queries suggestions on how to handle the risks that affect the security score.
        
        @param request: DescribeSecureSuggestionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSecureSuggestionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cal_type):
            query['CalType'] = request.cal_type
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSecureSuggestion',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSecureSuggestionResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_secure_suggestion_with_options_async(
        self,
        request: sas_20181203_models.DescribeSecureSuggestionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSecureSuggestionResponse:
        """
        @summary Queries suggestions on how to handle the risks that affect the security score.
        
        @param request: DescribeSecureSuggestionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSecureSuggestionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cal_type):
            query['CalType'] = request.cal_type
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSecureSuggestion',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSecureSuggestionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_secure_suggestion(
        self,
        request: sas_20181203_models.DescribeSecureSuggestionRequest,
    ) -> sas_20181203_models.DescribeSecureSuggestionResponse:
        """
        @summary Queries suggestions on how to handle the risks that affect the security score.
        
        @param request: DescribeSecureSuggestionRequest
        @return: DescribeSecureSuggestionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_secure_suggestion_with_options(request, runtime)

    async def describe_secure_suggestion_async(
        self,
        request: sas_20181203_models.DescribeSecureSuggestionRequest,
    ) -> sas_20181203_models.DescribeSecureSuggestionResponse:
        """
        @summary Queries suggestions on how to handle the risks that affect the security score.
        
        @param request: DescribeSecureSuggestionRequest
        @return: DescribeSecureSuggestionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_secure_suggestion_with_options_async(request, runtime)

    def describe_security_check_schedule_config_with_options(
        self,
        request: sas_20181203_models.DescribeSecurityCheckScheduleConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSecurityCheckScheduleConfigResponse:
        """
        @deprecated OpenAPI DescribeSecurityCheckScheduleConfig is deprecated
        
        @summary Queries the day of a week when custom check tasks are performed and the time range during which the custom check tasks are performed.
        
        @description This operation is phased out. You can use the GetCheckConfig operation.
        
        @param request: DescribeSecurityCheckScheduleConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSecurityCheckScheduleConfigResponse
        Deprecated
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSecurityCheckScheduleConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSecurityCheckScheduleConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_security_check_schedule_config_with_options_async(
        self,
        request: sas_20181203_models.DescribeSecurityCheckScheduleConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSecurityCheckScheduleConfigResponse:
        """
        @deprecated OpenAPI DescribeSecurityCheckScheduleConfig is deprecated
        
        @summary Queries the day of a week when custom check tasks are performed and the time range during which the custom check tasks are performed.
        
        @description This operation is phased out. You can use the GetCheckConfig operation.
        
        @param request: DescribeSecurityCheckScheduleConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSecurityCheckScheduleConfigResponse
        Deprecated
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSecurityCheckScheduleConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSecurityCheckScheduleConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_security_check_schedule_config(
        self,
        request: sas_20181203_models.DescribeSecurityCheckScheduleConfigRequest,
    ) -> sas_20181203_models.DescribeSecurityCheckScheduleConfigResponse:
        """
        @deprecated OpenAPI DescribeSecurityCheckScheduleConfig is deprecated
        
        @summary Queries the day of a week when custom check tasks are performed and the time range during which the custom check tasks are performed.
        
        @description This operation is phased out. You can use the GetCheckConfig operation.
        
        @param request: DescribeSecurityCheckScheduleConfigRequest
        @return: DescribeSecurityCheckScheduleConfigResponse
        Deprecated
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_security_check_schedule_config_with_options(request, runtime)

    async def describe_security_check_schedule_config_async(
        self,
        request: sas_20181203_models.DescribeSecurityCheckScheduleConfigRequest,
    ) -> sas_20181203_models.DescribeSecurityCheckScheduleConfigResponse:
        """
        @deprecated OpenAPI DescribeSecurityCheckScheduleConfig is deprecated
        
        @summary Queries the day of a week when custom check tasks are performed and the time range during which the custom check tasks are performed.
        
        @description This operation is phased out. You can use the GetCheckConfig operation.
        
        @param request: DescribeSecurityCheckScheduleConfigRequest
        @return: DescribeSecurityCheckScheduleConfigResponse
        Deprecated
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_security_check_schedule_config_with_options_async(request, runtime)

    def describe_security_event_mark_miss_list_with_options(
        self,
        request: sas_20181203_models.DescribeSecurityEventMarkMissListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSecurityEventMarkMissListResponse:
        """
        @summary Queries the list of whitelist rules.
        
        @param request: DescribeSecurityEventMarkMissListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSecurityEventMarkMissListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.event_name):
            query['EventName'] = request.event_name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSecurityEventMarkMissList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSecurityEventMarkMissListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_security_event_mark_miss_list_with_options_async(
        self,
        request: sas_20181203_models.DescribeSecurityEventMarkMissListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSecurityEventMarkMissListResponse:
        """
        @summary Queries the list of whitelist rules.
        
        @param request: DescribeSecurityEventMarkMissListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSecurityEventMarkMissListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.event_name):
            query['EventName'] = request.event_name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSecurityEventMarkMissList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSecurityEventMarkMissListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_security_event_mark_miss_list(
        self,
        request: sas_20181203_models.DescribeSecurityEventMarkMissListRequest,
    ) -> sas_20181203_models.DescribeSecurityEventMarkMissListResponse:
        """
        @summary Queries the list of whitelist rules.
        
        @param request: DescribeSecurityEventMarkMissListRequest
        @return: DescribeSecurityEventMarkMissListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_security_event_mark_miss_list_with_options(request, runtime)

    async def describe_security_event_mark_miss_list_async(
        self,
        request: sas_20181203_models.DescribeSecurityEventMarkMissListRequest,
    ) -> sas_20181203_models.DescribeSecurityEventMarkMissListResponse:
        """
        @summary Queries the list of whitelist rules.
        
        @param request: DescribeSecurityEventMarkMissListRequest
        @return: DescribeSecurityEventMarkMissListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_security_event_mark_miss_list_with_options_async(request, runtime)

    def describe_security_event_operation_status_with_options(
        self,
        request: sas_20181203_models.DescribeSecurityEventOperationStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSecurityEventOperationStatusResponse:
        """
        @summary Queries the alert events that are triggered by the same IP address rule or of the same alert type as a specific alert event if you want to handle the specific alert event in batch operation mode.
        
        @param request: DescribeSecurityEventOperationStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSecurityEventOperationStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.security_event_ids):
            query['SecurityEventIds'] = request.security_event_ids
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.task_id):
            query['TaskId'] = request.task_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSecurityEventOperationStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSecurityEventOperationStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_security_event_operation_status_with_options_async(
        self,
        request: sas_20181203_models.DescribeSecurityEventOperationStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSecurityEventOperationStatusResponse:
        """
        @summary Queries the alert events that are triggered by the same IP address rule or of the same alert type as a specific alert event if you want to handle the specific alert event in batch operation mode.
        
        @param request: DescribeSecurityEventOperationStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSecurityEventOperationStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.security_event_ids):
            query['SecurityEventIds'] = request.security_event_ids
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.task_id):
            query['TaskId'] = request.task_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSecurityEventOperationStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSecurityEventOperationStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_security_event_operation_status(
        self,
        request: sas_20181203_models.DescribeSecurityEventOperationStatusRequest,
    ) -> sas_20181203_models.DescribeSecurityEventOperationStatusResponse:
        """
        @summary Queries the alert events that are triggered by the same IP address rule or of the same alert type as a specific alert event if you want to handle the specific alert event in batch operation mode.
        
        @param request: DescribeSecurityEventOperationStatusRequest
        @return: DescribeSecurityEventOperationStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_security_event_operation_status_with_options(request, runtime)

    async def describe_security_event_operation_status_async(
        self,
        request: sas_20181203_models.DescribeSecurityEventOperationStatusRequest,
    ) -> sas_20181203_models.DescribeSecurityEventOperationStatusResponse:
        """
        @summary Queries the alert events that are triggered by the same IP address rule or of the same alert type as a specific alert event if you want to handle the specific alert event in batch operation mode.
        
        @param request: DescribeSecurityEventOperationStatusRequest
        @return: DescribeSecurityEventOperationStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_security_event_operation_status_with_options_async(request, runtime)

    def describe_security_event_operations_with_options(
        self,
        request: sas_20181203_models.DescribeSecurityEventOperationsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSecurityEventOperationsResponse:
        """
        @summary Queries the operations that you can perform to handle an alert.
        
        @param request: DescribeSecurityEventOperationsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSecurityEventOperationsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.security_event_id):
            query['SecurityEventId'] = request.security_event_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSecurityEventOperations',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSecurityEventOperationsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_security_event_operations_with_options_async(
        self,
        request: sas_20181203_models.DescribeSecurityEventOperationsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSecurityEventOperationsResponse:
        """
        @summary Queries the operations that you can perform to handle an alert.
        
        @param request: DescribeSecurityEventOperationsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSecurityEventOperationsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.security_event_id):
            query['SecurityEventId'] = request.security_event_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSecurityEventOperations',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSecurityEventOperationsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_security_event_operations(
        self,
        request: sas_20181203_models.DescribeSecurityEventOperationsRequest,
    ) -> sas_20181203_models.DescribeSecurityEventOperationsResponse:
        """
        @summary Queries the operations that you can perform to handle an alert.
        
        @param request: DescribeSecurityEventOperationsRequest
        @return: DescribeSecurityEventOperationsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_security_event_operations_with_options(request, runtime)

    async def describe_security_event_operations_async(
        self,
        request: sas_20181203_models.DescribeSecurityEventOperationsRequest,
    ) -> sas_20181203_models.DescribeSecurityEventOperationsResponse:
        """
        @summary Queries the operations that you can perform to handle an alert.
        
        @param request: DescribeSecurityEventOperationsRequest
        @return: DescribeSecurityEventOperationsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_security_event_operations_with_options_async(request, runtime)

    def describe_security_stat_info_with_options(
        self,
        request: sas_20181203_models.DescribeSecurityStatInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSecurityStatInfoResponse:
        """
        @summary Queries the statistics of each security check item and the daily statistics in the trend chart based on each security check item.
        
        @param request: DescribeSecurityStatInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSecurityStatInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSecurityStatInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSecurityStatInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_security_stat_info_with_options_async(
        self,
        request: sas_20181203_models.DescribeSecurityStatInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSecurityStatInfoResponse:
        """
        @summary Queries the statistics of each security check item and the daily statistics in the trend chart based on each security check item.
        
        @param request: DescribeSecurityStatInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSecurityStatInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSecurityStatInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSecurityStatInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_security_stat_info(
        self,
        request: sas_20181203_models.DescribeSecurityStatInfoRequest,
    ) -> sas_20181203_models.DescribeSecurityStatInfoResponse:
        """
        @summary Queries the statistics of each security check item and the daily statistics in the trend chart based on each security check item.
        
        @param request: DescribeSecurityStatInfoRequest
        @return: DescribeSecurityStatInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_security_stat_info_with_options(request, runtime)

    async def describe_security_stat_info_async(
        self,
        request: sas_20181203_models.DescribeSecurityStatInfoRequest,
    ) -> sas_20181203_models.DescribeSecurityStatInfoResponse:
        """
        @summary Queries the statistics of each security check item and the daily statistics in the trend chart based on each security check item.
        
        @param request: DescribeSecurityStatInfoRequest
        @return: DescribeSecurityStatInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_security_stat_info_with_options_async(request, runtime)

    def describe_service_linked_role_status_with_options(
        self,
        request: sas_20181203_models.DescribeServiceLinkedRoleStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeServiceLinkedRoleStatusResponse:
        """
        @summary Checks whether a service-linked role is created for Security Center.
        
        @param request: DescribeServiceLinkedRoleStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeServiceLinkedRoleStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.service_linked_role):
            query['ServiceLinkedRole'] = request.service_linked_role
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeServiceLinkedRoleStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeServiceLinkedRoleStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_service_linked_role_status_with_options_async(
        self,
        request: sas_20181203_models.DescribeServiceLinkedRoleStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeServiceLinkedRoleStatusResponse:
        """
        @summary Checks whether a service-linked role is created for Security Center.
        
        @param request: DescribeServiceLinkedRoleStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeServiceLinkedRoleStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.service_linked_role):
            query['ServiceLinkedRole'] = request.service_linked_role
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeServiceLinkedRoleStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeServiceLinkedRoleStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_service_linked_role_status(
        self,
        request: sas_20181203_models.DescribeServiceLinkedRoleStatusRequest,
    ) -> sas_20181203_models.DescribeServiceLinkedRoleStatusResponse:
        """
        @summary Checks whether a service-linked role is created for Security Center.
        
        @param request: DescribeServiceLinkedRoleStatusRequest
        @return: DescribeServiceLinkedRoleStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_service_linked_role_status_with_options(request, runtime)

    async def describe_service_linked_role_status_async(
        self,
        request: sas_20181203_models.DescribeServiceLinkedRoleStatusRequest,
    ) -> sas_20181203_models.DescribeServiceLinkedRoleStatusResponse:
        """
        @summary Checks whether a service-linked role is created for Security Center.
        
        @param request: DescribeServiceLinkedRoleStatusRequest
        @return: DescribeServiceLinkedRoleStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_service_linked_role_status_with_options_async(request, runtime)

    def describe_similar_event_scenarios_with_options(
        self,
        request: sas_20181203_models.DescribeSimilarEventScenariosRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSimilarEventScenariosResponse:
        """
        @summary Queries the scenarios in which alerts triggered by the same rule or rules of the same type are handled.
        
        @param request: DescribeSimilarEventScenariosRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSimilarEventScenariosResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.security_event_id):
            query['SecurityEventId'] = request.security_event_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSimilarEventScenarios',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSimilarEventScenariosResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_similar_event_scenarios_with_options_async(
        self,
        request: sas_20181203_models.DescribeSimilarEventScenariosRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSimilarEventScenariosResponse:
        """
        @summary Queries the scenarios in which alerts triggered by the same rule or rules of the same type are handled.
        
        @param request: DescribeSimilarEventScenariosRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSimilarEventScenariosResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.security_event_id):
            query['SecurityEventId'] = request.security_event_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSimilarEventScenarios',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSimilarEventScenariosResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_similar_event_scenarios(
        self,
        request: sas_20181203_models.DescribeSimilarEventScenariosRequest,
    ) -> sas_20181203_models.DescribeSimilarEventScenariosResponse:
        """
        @summary Queries the scenarios in which alerts triggered by the same rule or rules of the same type are handled.
        
        @param request: DescribeSimilarEventScenariosRequest
        @return: DescribeSimilarEventScenariosResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_similar_event_scenarios_with_options(request, runtime)

    async def describe_similar_event_scenarios_async(
        self,
        request: sas_20181203_models.DescribeSimilarEventScenariosRequest,
    ) -> sas_20181203_models.DescribeSimilarEventScenariosResponse:
        """
        @summary Queries the scenarios in which alerts triggered by the same rule or rules of the same type are handled.
        
        @param request: DescribeSimilarEventScenariosRequest
        @return: DescribeSimilarEventScenariosResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_similar_event_scenarios_with_options_async(request, runtime)

    def describe_similar_security_events_with_options(
        self,
        request: sas_20181203_models.DescribeSimilarSecurityEventsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSimilarSecurityEventsResponse:
        """
        @summary Queries alert events that are triggered by the same rule or of the same alert type.
        
        @param request: DescribeSimilarSecurityEventsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSimilarSecurityEventsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.task_id):
            query['TaskId'] = request.task_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSimilarSecurityEvents',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSimilarSecurityEventsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_similar_security_events_with_options_async(
        self,
        request: sas_20181203_models.DescribeSimilarSecurityEventsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSimilarSecurityEventsResponse:
        """
        @summary Queries alert events that are triggered by the same rule or of the same alert type.
        
        @param request: DescribeSimilarSecurityEventsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSimilarSecurityEventsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.task_id):
            query['TaskId'] = request.task_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSimilarSecurityEvents',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSimilarSecurityEventsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_similar_security_events(
        self,
        request: sas_20181203_models.DescribeSimilarSecurityEventsRequest,
    ) -> sas_20181203_models.DescribeSimilarSecurityEventsResponse:
        """
        @summary Queries alert events that are triggered by the same rule or of the same alert type.
        
        @param request: DescribeSimilarSecurityEventsRequest
        @return: DescribeSimilarSecurityEventsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_similar_security_events_with_options(request, runtime)

    async def describe_similar_security_events_async(
        self,
        request: sas_20181203_models.DescribeSimilarSecurityEventsRequest,
    ) -> sas_20181203_models.DescribeSimilarSecurityEventsResponse:
        """
        @summary Queries alert events that are triggered by the same rule or of the same alert type.
        
        @param request: DescribeSimilarSecurityEventsRequest
        @return: DescribeSimilarSecurityEventsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_similar_security_events_with_options_async(request, runtime)

    def describe_snapshots_with_options(
        self,
        request: sas_20181203_models.DescribeSnapshotsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSnapshotsResponse:
        """
        @summary Queries the backup snapshots that are created for anti-ransomware.
        
        @param request: DescribeSnapshotsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSnapshotsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.api_version):
            query['ApiVersion'] = request.api_version
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.is_ali_yun_ecs):
            query['IsAliYunEcs'] = request.is_ali_yun_ecs
        if not UtilClient.is_unset(request.machine_region):
            query['MachineRegion'] = request.machine_region
        if not UtilClient.is_unset(request.machine_remark):
            query['MachineRemark'] = request.machine_remark
        if not UtilClient.is_unset(request.next_token):
            query['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.status_list):
            query['StatusList'] = request.status_list
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSnapshots',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSnapshotsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_snapshots_with_options_async(
        self,
        request: sas_20181203_models.DescribeSnapshotsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSnapshotsResponse:
        """
        @summary Queries the backup snapshots that are created for anti-ransomware.
        
        @param request: DescribeSnapshotsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSnapshotsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.api_version):
            query['ApiVersion'] = request.api_version
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.is_ali_yun_ecs):
            query['IsAliYunEcs'] = request.is_ali_yun_ecs
        if not UtilClient.is_unset(request.machine_region):
            query['MachineRegion'] = request.machine_region
        if not UtilClient.is_unset(request.machine_remark):
            query['MachineRemark'] = request.machine_remark
        if not UtilClient.is_unset(request.next_token):
            query['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.status_list):
            query['StatusList'] = request.status_list
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSnapshots',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSnapshotsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_snapshots(
        self,
        request: sas_20181203_models.DescribeSnapshotsRequest,
    ) -> sas_20181203_models.DescribeSnapshotsResponse:
        """
        @summary Queries the backup snapshots that are created for anti-ransomware.
        
        @param request: DescribeSnapshotsRequest
        @return: DescribeSnapshotsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_snapshots_with_options(request, runtime)

    async def describe_snapshots_async(
        self,
        request: sas_20181203_models.DescribeSnapshotsRequest,
    ) -> sas_20181203_models.DescribeSnapshotsResponse:
        """
        @summary Queries the backup snapshots that are created for anti-ransomware.
        
        @param request: DescribeSnapshotsRequest
        @return: DescribeSnapshotsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_snapshots_with_options_async(request, runtime)

    def describe_soar_playbook_task_detail_with_options(
        self,
        request: sas_20181203_models.DescribeSoarPlaybookTaskDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSoarPlaybookTaskDetailResponse:
        """
        @summary Query the execution details of a remediation task playbook
        
        @description This API is only supported by the Enterprise and Flagship editions of Cloud Security Center, other versions do not support it.
        
        @param request: DescribeSoarPlaybookTaskDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSoarPlaybookTaskDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.playbook_id):
            query['PlaybookId'] = request.playbook_id
        if not UtilClient.is_unset(request.record_id):
            query['RecordId'] = request.record_id
        if not UtilClient.is_unset(request.request_uuid):
            query['RequestUuid'] = request.request_uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSoarPlaybookTaskDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSoarPlaybookTaskDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_soar_playbook_task_detail_with_options_async(
        self,
        request: sas_20181203_models.DescribeSoarPlaybookTaskDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSoarPlaybookTaskDetailResponse:
        """
        @summary Query the execution details of a remediation task playbook
        
        @description This API is only supported by the Enterprise and Flagship editions of Cloud Security Center, other versions do not support it.
        
        @param request: DescribeSoarPlaybookTaskDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSoarPlaybookTaskDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.playbook_id):
            query['PlaybookId'] = request.playbook_id
        if not UtilClient.is_unset(request.record_id):
            query['RecordId'] = request.record_id
        if not UtilClient.is_unset(request.request_uuid):
            query['RequestUuid'] = request.request_uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSoarPlaybookTaskDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSoarPlaybookTaskDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_soar_playbook_task_detail(
        self,
        request: sas_20181203_models.DescribeSoarPlaybookTaskDetailRequest,
    ) -> sas_20181203_models.DescribeSoarPlaybookTaskDetailResponse:
        """
        @summary Query the execution details of a remediation task playbook
        
        @description This API is only supported by the Enterprise and Flagship editions of Cloud Security Center, other versions do not support it.
        
        @param request: DescribeSoarPlaybookTaskDetailRequest
        @return: DescribeSoarPlaybookTaskDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_soar_playbook_task_detail_with_options(request, runtime)

    async def describe_soar_playbook_task_detail_async(
        self,
        request: sas_20181203_models.DescribeSoarPlaybookTaskDetailRequest,
    ) -> sas_20181203_models.DescribeSoarPlaybookTaskDetailResponse:
        """
        @summary Query the execution details of a remediation task playbook
        
        @description This API is only supported by the Enterprise and Flagship editions of Cloud Security Center, other versions do not support it.
        
        @param request: DescribeSoarPlaybookTaskDetailRequest
        @return: DescribeSoarPlaybookTaskDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_soar_playbook_task_detail_with_options_async(request, runtime)

    def describe_soar_strategies_with_options(
        self,
        request: sas_20181203_models.DescribeSoarStrategiesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSoarStrategiesResponse:
        """
        @summary Queries the policy templates on the Playbook page.
        
        @description Only the Enterprise and Ultimate editions of Security Center support this API operation.
        
        @param request: DescribeSoarStrategiesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSoarStrategiesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSoarStrategies',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSoarStrategiesResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_soar_strategies_with_options_async(
        self,
        request: sas_20181203_models.DescribeSoarStrategiesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSoarStrategiesResponse:
        """
        @summary Queries the policy templates on the Playbook page.
        
        @description Only the Enterprise and Ultimate editions of Security Center support this API operation.
        
        @param request: DescribeSoarStrategiesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSoarStrategiesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSoarStrategies',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSoarStrategiesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_soar_strategies(
        self,
        request: sas_20181203_models.DescribeSoarStrategiesRequest,
    ) -> sas_20181203_models.DescribeSoarStrategiesResponse:
        """
        @summary Queries the policy templates on the Playbook page.
        
        @description Only the Enterprise and Ultimate editions of Security Center support this API operation.
        
        @param request: DescribeSoarStrategiesRequest
        @return: DescribeSoarStrategiesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_soar_strategies_with_options(request, runtime)

    async def describe_soar_strategies_async(
        self,
        request: sas_20181203_models.DescribeSoarStrategiesRequest,
    ) -> sas_20181203_models.DescribeSoarStrategiesResponse:
        """
        @summary Queries the policy templates on the Playbook page.
        
        @description Only the Enterprise and Ultimate editions of Security Center support this API operation.
        
        @param request: DescribeSoarStrategiesRequest
        @return: DescribeSoarStrategiesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_soar_strategies_with_options_async(request, runtime)

    def describe_soar_strategy_param_with_options(
        self,
        request: sas_20181203_models.DescribeSoarStrategyParamRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSoarStrategyParamResponse:
        """
        @summary Queries the parameters of a policy on the Playbook page.
        
        @description Only the Enterprise and Ultimate editions of Security Center support this API operation.
        
        @param request: DescribeSoarStrategyParamRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSoarStrategyParamResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSoarStrategyParam',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSoarStrategyParamResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_soar_strategy_param_with_options_async(
        self,
        request: sas_20181203_models.DescribeSoarStrategyParamRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSoarStrategyParamResponse:
        """
        @summary Queries the parameters of a policy on the Playbook page.
        
        @description Only the Enterprise and Ultimate editions of Security Center support this API operation.
        
        @param request: DescribeSoarStrategyParamRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSoarStrategyParamResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSoarStrategyParam',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSoarStrategyParamResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_soar_strategy_param(
        self,
        request: sas_20181203_models.DescribeSoarStrategyParamRequest,
    ) -> sas_20181203_models.DescribeSoarStrategyParamResponse:
        """
        @summary Queries the parameters of a policy on the Playbook page.
        
        @description Only the Enterprise and Ultimate editions of Security Center support this API operation.
        
        @param request: DescribeSoarStrategyParamRequest
        @return: DescribeSoarStrategyParamResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_soar_strategy_param_with_options(request, runtime)

    async def describe_soar_strategy_param_async(
        self,
        request: sas_20181203_models.DescribeSoarStrategyParamRequest,
    ) -> sas_20181203_models.DescribeSoarStrategyParamResponse:
        """
        @summary Queries the parameters of a policy on the Playbook page.
        
        @description Only the Enterprise and Ultimate editions of Security Center support this API operation.
        
        @param request: DescribeSoarStrategyParamRequest
        @return: DescribeSoarStrategyParamResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_soar_strategy_param_with_options_async(request, runtime)

    def describe_soar_strategy_task_detail_with_options(
        self,
        request: sas_20181203_models.DescribeSoarStrategyTaskDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSoarStrategyTaskDetailResponse:
        """
        @summary Queries the details of a policy task on the Playbook page, including the execution status of the task and the process information of the task.
        
        @description Only the Enterprise and Ultimate editions of Security Center support this API operation.
        
        @param request: DescribeSoarStrategyTaskDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSoarStrategyTaskDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.strategy_task_id):
            query['StrategyTaskId'] = request.strategy_task_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSoarStrategyTaskDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSoarStrategyTaskDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_soar_strategy_task_detail_with_options_async(
        self,
        request: sas_20181203_models.DescribeSoarStrategyTaskDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSoarStrategyTaskDetailResponse:
        """
        @summary Queries the details of a policy task on the Playbook page, including the execution status of the task and the process information of the task.
        
        @description Only the Enterprise and Ultimate editions of Security Center support this API operation.
        
        @param request: DescribeSoarStrategyTaskDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSoarStrategyTaskDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.strategy_task_id):
            query['StrategyTaskId'] = request.strategy_task_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSoarStrategyTaskDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSoarStrategyTaskDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_soar_strategy_task_detail(
        self,
        request: sas_20181203_models.DescribeSoarStrategyTaskDetailRequest,
    ) -> sas_20181203_models.DescribeSoarStrategyTaskDetailResponse:
        """
        @summary Queries the details of a policy task on the Playbook page, including the execution status of the task and the process information of the task.
        
        @description Only the Enterprise and Ultimate editions of Security Center support this API operation.
        
        @param request: DescribeSoarStrategyTaskDetailRequest
        @return: DescribeSoarStrategyTaskDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_soar_strategy_task_detail_with_options(request, runtime)

    async def describe_soar_strategy_task_detail_async(
        self,
        request: sas_20181203_models.DescribeSoarStrategyTaskDetailRequest,
    ) -> sas_20181203_models.DescribeSoarStrategyTaskDetailResponse:
        """
        @summary Queries the details of a policy task on the Playbook page, including the execution status of the task and the process information of the task.
        
        @description Only the Enterprise and Ultimate editions of Security Center support this API operation.
        
        @param request: DescribeSoarStrategyTaskDetailRequest
        @return: DescribeSoarStrategyTaskDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_soar_strategy_task_detail_with_options_async(request, runtime)

    def describe_soar_strategy_task_params_with_options(
        self,
        request: sas_20181203_models.DescribeSoarStrategyTaskParamsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSoarStrategyTaskParamsResponse:
        """
        @summary Get the input parameters for a specific task
        
        @description Only the Enterprise and Flagship editions of Cloud Security Center support this API call, other versions do not support it.
        
        @param request: DescribeSoarStrategyTaskParamsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSoarStrategyTaskParamsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSoarStrategyTaskParams',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSoarStrategyTaskParamsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_soar_strategy_task_params_with_options_async(
        self,
        request: sas_20181203_models.DescribeSoarStrategyTaskParamsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSoarStrategyTaskParamsResponse:
        """
        @summary Get the input parameters for a specific task
        
        @description Only the Enterprise and Flagship editions of Cloud Security Center support this API call, other versions do not support it.
        
        @param request: DescribeSoarStrategyTaskParamsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSoarStrategyTaskParamsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSoarStrategyTaskParams',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSoarStrategyTaskParamsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_soar_strategy_task_params(
        self,
        request: sas_20181203_models.DescribeSoarStrategyTaskParamsRequest,
    ) -> sas_20181203_models.DescribeSoarStrategyTaskParamsResponse:
        """
        @summary Get the input parameters for a specific task
        
        @description Only the Enterprise and Flagship editions of Cloud Security Center support this API call, other versions do not support it.
        
        @param request: DescribeSoarStrategyTaskParamsRequest
        @return: DescribeSoarStrategyTaskParamsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_soar_strategy_task_params_with_options(request, runtime)

    async def describe_soar_strategy_task_params_async(
        self,
        request: sas_20181203_models.DescribeSoarStrategyTaskParamsRequest,
    ) -> sas_20181203_models.DescribeSoarStrategyTaskParamsResponse:
        """
        @summary Get the input parameters for a specific task
        
        @description Only the Enterprise and Flagship editions of Cloud Security Center support this API call, other versions do not support it.
        
        @param request: DescribeSoarStrategyTaskParamsRequest
        @return: DescribeSoarStrategyTaskParamsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_soar_strategy_task_params_with_options_async(request, runtime)

    def describe_soar_strategy_task_result_with_options(
        self,
        request: sas_20181203_models.DescribeSoarStrategyTaskResultRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSoarStrategyTaskResultResponse:
        """
        @summary Get the list of task execution results
        
        @description This API is only supported by the Enterprise and Flagship editions of Cloud Security Center, other versions do not support it.
        
        @param request: DescribeSoarStrategyTaskResultRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSoarStrategyTaskResultResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSoarStrategyTaskResult',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSoarStrategyTaskResultResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_soar_strategy_task_result_with_options_async(
        self,
        request: sas_20181203_models.DescribeSoarStrategyTaskResultRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSoarStrategyTaskResultResponse:
        """
        @summary Get the list of task execution results
        
        @description This API is only supported by the Enterprise and Flagship editions of Cloud Security Center, other versions do not support it.
        
        @param request: DescribeSoarStrategyTaskResultRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSoarStrategyTaskResultResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSoarStrategyTaskResult',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSoarStrategyTaskResultResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_soar_strategy_task_result(
        self,
        request: sas_20181203_models.DescribeSoarStrategyTaskResultRequest,
    ) -> sas_20181203_models.DescribeSoarStrategyTaskResultResponse:
        """
        @summary Get the list of task execution results
        
        @description This API is only supported by the Enterprise and Flagship editions of Cloud Security Center, other versions do not support it.
        
        @param request: DescribeSoarStrategyTaskResultRequest
        @return: DescribeSoarStrategyTaskResultResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_soar_strategy_task_result_with_options(request, runtime)

    async def describe_soar_strategy_task_result_async(
        self,
        request: sas_20181203_models.DescribeSoarStrategyTaskResultRequest,
    ) -> sas_20181203_models.DescribeSoarStrategyTaskResultResponse:
        """
        @summary Get the list of task execution results
        
        @description This API is only supported by the Enterprise and Flagship editions of Cloud Security Center, other versions do not support it.
        
        @param request: DescribeSoarStrategyTaskResultRequest
        @return: DescribeSoarStrategyTaskResultResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_soar_strategy_task_result_with_options_async(request, runtime)

    def describe_soar_strategy_tasks_with_options(
        self,
        request: sas_20181203_models.DescribeSoarStrategyTasksRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSoarStrategyTasksResponse:
        """
        @summary Queries a list of policy tasks on the Playbook page.
        
        @description Only the Enterprise and Ultimate editions of Security Center support this API operation.
        
        @param request: DescribeSoarStrategyTasksRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSoarStrategyTasksResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSoarStrategyTasks',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSoarStrategyTasksResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_soar_strategy_tasks_with_options_async(
        self,
        request: sas_20181203_models.DescribeSoarStrategyTasksRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSoarStrategyTasksResponse:
        """
        @summary Queries a list of policy tasks on the Playbook page.
        
        @description Only the Enterprise and Ultimate editions of Security Center support this API operation.
        
        @param request: DescribeSoarStrategyTasksRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSoarStrategyTasksResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSoarStrategyTasks',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSoarStrategyTasksResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_soar_strategy_tasks(
        self,
        request: sas_20181203_models.DescribeSoarStrategyTasksRequest,
    ) -> sas_20181203_models.DescribeSoarStrategyTasksResponse:
        """
        @summary Queries a list of policy tasks on the Playbook page.
        
        @description Only the Enterprise and Ultimate editions of Security Center support this API operation.
        
        @param request: DescribeSoarStrategyTasksRequest
        @return: DescribeSoarStrategyTasksResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_soar_strategy_tasks_with_options(request, runtime)

    async def describe_soar_strategy_tasks_async(
        self,
        request: sas_20181203_models.DescribeSoarStrategyTasksRequest,
    ) -> sas_20181203_models.DescribeSoarStrategyTasksResponse:
        """
        @summary Queries a list of policy tasks on the Playbook page.
        
        @description Only the Enterprise and Ultimate editions of Security Center support this API operation.
        
        @param request: DescribeSoarStrategyTasksRequest
        @return: DescribeSoarStrategyTasksResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_soar_strategy_tasks_with_options_async(request, runtime)

    def describe_soar_subscribed_strategy_with_options(
        self,
        request: sas_20181203_models.DescribeSoarSubscribedStrategyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSoarSubscribedStrategyResponse:
        """
        @summary Queries a list of policies created on the Playbook page of Security Center.
        
        @description Only the Enterprise and Ultimate editions of Security Center support this API operation.
        
        @param request: DescribeSoarSubscribedStrategyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSoarSubscribedStrategyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSoarSubscribedStrategy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSoarSubscribedStrategyResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_soar_subscribed_strategy_with_options_async(
        self,
        request: sas_20181203_models.DescribeSoarSubscribedStrategyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSoarSubscribedStrategyResponse:
        """
        @summary Queries a list of policies created on the Playbook page of Security Center.
        
        @description Only the Enterprise and Ultimate editions of Security Center support this API operation.
        
        @param request: DescribeSoarSubscribedStrategyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSoarSubscribedStrategyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSoarSubscribedStrategy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSoarSubscribedStrategyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_soar_subscribed_strategy(
        self,
        request: sas_20181203_models.DescribeSoarSubscribedStrategyRequest,
    ) -> sas_20181203_models.DescribeSoarSubscribedStrategyResponse:
        """
        @summary Queries a list of policies created on the Playbook page of Security Center.
        
        @description Only the Enterprise and Ultimate editions of Security Center support this API operation.
        
        @param request: DescribeSoarSubscribedStrategyRequest
        @return: DescribeSoarSubscribedStrategyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_soar_subscribed_strategy_with_options(request, runtime)

    async def describe_soar_subscribed_strategy_async(
        self,
        request: sas_20181203_models.DescribeSoarSubscribedStrategyRequest,
    ) -> sas_20181203_models.DescribeSoarSubscribedStrategyResponse:
        """
        @summary Queries a list of policies created on the Playbook page of Security Center.
        
        @description Only the Enterprise and Ultimate editions of Security Center support this API operation.
        
        @param request: DescribeSoarSubscribedStrategyRequest
        @return: DescribeSoarSubscribedStrategyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_soar_subscribed_strategy_with_options_async(request, runtime)

    def describe_strategy_with_options(
        self,
        request: sas_20181203_models.DescribeStrategyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeStrategyResponse:
        """
        @summary Queries the details about baseline check policies.
        
        @param request: DescribeStrategyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeStrategyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.custom_type):
            query['CustomType'] = request.custom_type
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.strategy_ids):
            query['StrategyIds'] = request.strategy_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeStrategy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeStrategyResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_strategy_with_options_async(
        self,
        request: sas_20181203_models.DescribeStrategyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeStrategyResponse:
        """
        @summary Queries the details about baseline check policies.
        
        @param request: DescribeStrategyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeStrategyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.custom_type):
            query['CustomType'] = request.custom_type
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.strategy_ids):
            query['StrategyIds'] = request.strategy_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeStrategy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeStrategyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_strategy(
        self,
        request: sas_20181203_models.DescribeStrategyRequest,
    ) -> sas_20181203_models.DescribeStrategyResponse:
        """
        @summary Queries the details about baseline check policies.
        
        @param request: DescribeStrategyRequest
        @return: DescribeStrategyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_strategy_with_options(request, runtime)

    async def describe_strategy_async(
        self,
        request: sas_20181203_models.DescribeStrategyRequest,
    ) -> sas_20181203_models.DescribeStrategyResponse:
        """
        @summary Queries the details about baseline check policies.
        
        @param request: DescribeStrategyRequest
        @return: DescribeStrategyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_strategy_with_options_async(request, runtime)

    def describe_strategy_detail_with_options(
        self,
        request: sas_20181203_models.DescribeStrategyDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeStrategyDetailResponse:
        """
        @summary Queries the information about a baseline check policy.
        
        @param request: DescribeStrategyDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeStrategyDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeStrategyDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeStrategyDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_strategy_detail_with_options_async(
        self,
        request: sas_20181203_models.DescribeStrategyDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeStrategyDetailResponse:
        """
        @summary Queries the information about a baseline check policy.
        
        @param request: DescribeStrategyDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeStrategyDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeStrategyDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeStrategyDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_strategy_detail(
        self,
        request: sas_20181203_models.DescribeStrategyDetailRequest,
    ) -> sas_20181203_models.DescribeStrategyDetailResponse:
        """
        @summary Queries the information about a baseline check policy.
        
        @param request: DescribeStrategyDetailRequest
        @return: DescribeStrategyDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_strategy_detail_with_options(request, runtime)

    async def describe_strategy_detail_async(
        self,
        request: sas_20181203_models.DescribeStrategyDetailRequest,
    ) -> sas_20181203_models.DescribeStrategyDetailResponse:
        """
        @summary Queries the information about a baseline check policy.
        
        @param request: DescribeStrategyDetailRequest
        @return: DescribeStrategyDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_strategy_detail_with_options_async(request, runtime)

    def describe_strategy_exec_detail_with_options(
        self,
        request: sas_20181203_models.DescribeStrategyExecDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeStrategyExecDetailResponse:
        """
        @summary Queries the results of the last baseline check by using a specified baseline check policy.
        
        @param request: DescribeStrategyExecDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeStrategyExecDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeStrategyExecDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeStrategyExecDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_strategy_exec_detail_with_options_async(
        self,
        request: sas_20181203_models.DescribeStrategyExecDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeStrategyExecDetailResponse:
        """
        @summary Queries the results of the last baseline check by using a specified baseline check policy.
        
        @param request: DescribeStrategyExecDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeStrategyExecDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeStrategyExecDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeStrategyExecDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_strategy_exec_detail(
        self,
        request: sas_20181203_models.DescribeStrategyExecDetailRequest,
    ) -> sas_20181203_models.DescribeStrategyExecDetailResponse:
        """
        @summary Queries the results of the last baseline check by using a specified baseline check policy.
        
        @param request: DescribeStrategyExecDetailRequest
        @return: DescribeStrategyExecDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_strategy_exec_detail_with_options(request, runtime)

    async def describe_strategy_exec_detail_async(
        self,
        request: sas_20181203_models.DescribeStrategyExecDetailRequest,
    ) -> sas_20181203_models.DescribeStrategyExecDetailResponse:
        """
        @summary Queries the results of the last baseline check by using a specified baseline check policy.
        
        @param request: DescribeStrategyExecDetailRequest
        @return: DescribeStrategyExecDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_strategy_exec_detail_with_options_async(request, runtime)

    def describe_strategy_target_with_options(
        self,
        request: sas_20181203_models.DescribeStrategyTargetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeStrategyTargetResponse:
        """
        @summary Queries the information about the assets to which a baseline check policy is applied.
        
        @param request: DescribeStrategyTargetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeStrategyTargetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config):
            query['Config'] = request.config
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeStrategyTarget',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeStrategyTargetResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_strategy_target_with_options_async(
        self,
        request: sas_20181203_models.DescribeStrategyTargetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeStrategyTargetResponse:
        """
        @summary Queries the information about the assets to which a baseline check policy is applied.
        
        @param request: DescribeStrategyTargetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeStrategyTargetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config):
            query['Config'] = request.config
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeStrategyTarget',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeStrategyTargetResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_strategy_target(
        self,
        request: sas_20181203_models.DescribeStrategyTargetRequest,
    ) -> sas_20181203_models.DescribeStrategyTargetResponse:
        """
        @summary Queries the information about the assets to which a baseline check policy is applied.
        
        @param request: DescribeStrategyTargetRequest
        @return: DescribeStrategyTargetResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_strategy_target_with_options(request, runtime)

    async def describe_strategy_target_async(
        self,
        request: sas_20181203_models.DescribeStrategyTargetRequest,
    ) -> sas_20181203_models.DescribeStrategyTargetResponse:
        """
        @summary Queries the information about the assets to which a baseline check policy is applied.
        
        @param request: DescribeStrategyTargetRequest
        @return: DescribeStrategyTargetResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_strategy_target_with_options_async(request, runtime)

    def describe_strict_event_name_with_options(
        self,
        request: sas_20181203_models.DescribeStrictEventNameRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeStrictEventNameResponse:
        """
        @summary Strict mode supports alarm queries
        
        @param request: DescribeStrictEventNameRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeStrictEventNameResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeStrictEventName',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeStrictEventNameResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_strict_event_name_with_options_async(
        self,
        request: sas_20181203_models.DescribeStrictEventNameRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeStrictEventNameResponse:
        """
        @summary Strict mode supports alarm queries
        
        @param request: DescribeStrictEventNameRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeStrictEventNameResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeStrictEventName',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeStrictEventNameResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_strict_event_name(
        self,
        request: sas_20181203_models.DescribeStrictEventNameRequest,
    ) -> sas_20181203_models.DescribeStrictEventNameResponse:
        """
        @summary Strict mode supports alarm queries
        
        @param request: DescribeStrictEventNameRequest
        @return: DescribeStrictEventNameResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_strict_event_name_with_options(request, runtime)

    async def describe_strict_event_name_async(
        self,
        request: sas_20181203_models.DescribeStrictEventNameRequest,
    ) -> sas_20181203_models.DescribeStrictEventNameResponse:
        """
        @summary Strict mode supports alarm queries
        
        @param request: DescribeStrictEventNameRequest
        @return: DescribeStrictEventNameResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_strict_event_name_with_options_async(request, runtime)

    def describe_summary_info_with_options(
        self,
        request: sas_20181203_models.DescribeSummaryInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSummaryInfoResponse:
        """
        @summary Queries the security information about your assets. The information includes the security score and the numbers of protected and unprotected assets.
        
        @param request: DescribeSummaryInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSummaryInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSummaryInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSummaryInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_summary_info_with_options_async(
        self,
        request: sas_20181203_models.DescribeSummaryInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSummaryInfoResponse:
        """
        @summary Queries the security information about your assets. The information includes the security score and the numbers of protected and unprotected assets.
        
        @param request: DescribeSummaryInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSummaryInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSummaryInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSummaryInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_summary_info(
        self,
        request: sas_20181203_models.DescribeSummaryInfoRequest,
    ) -> sas_20181203_models.DescribeSummaryInfoResponse:
        """
        @summary Queries the security information about your assets. The information includes the security score and the numbers of protected and unprotected assets.
        
        @param request: DescribeSummaryInfoRequest
        @return: DescribeSummaryInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_summary_info_with_options(request, runtime)

    async def describe_summary_info_async(
        self,
        request: sas_20181203_models.DescribeSummaryInfoRequest,
    ) -> sas_20181203_models.DescribeSummaryInfoResponse:
        """
        @summary Queries the security information about your assets. The information includes the security score and the numbers of protected and unprotected assets.
        
        @param request: DescribeSummaryInfoRequest
        @return: DescribeSummaryInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_summary_info_with_options_async(request, runtime)

    def describe_supervison_info_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSupervisonInfoResponse:
        """
        @summary Queries the time when a system vulnerability was last detected.
        
        @param request: DescribeSupervisonInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSupervisonInfoResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeSupervisonInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSupervisonInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_supervison_info_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSupervisonInfoResponse:
        """
        @summary Queries the time when a system vulnerability was last detected.
        
        @param request: DescribeSupervisonInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSupervisonInfoResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeSupervisonInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSupervisonInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_supervison_info(self) -> sas_20181203_models.DescribeSupervisonInfoResponse:
        """
        @summary Queries the time when a system vulnerability was last detected.
        
        @return: DescribeSupervisonInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_supervison_info_with_options(runtime)

    async def describe_supervison_info_async(self) -> sas_20181203_models.DescribeSupervisonInfoResponse:
        """
        @summary Queries the time when a system vulnerability was last detected.
        
        @return: DescribeSupervisonInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_supervison_info_with_options_async(runtime)

    def describe_support_region_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSupportRegionResponse:
        """
        @summary Queries the regions in which the anti-ransomware feature is supported.
        
        @param request: DescribeSupportRegionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSupportRegionResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeSupportRegion',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSupportRegionResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_support_region_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSupportRegionResponse:
        """
        @summary Queries the regions in which the anti-ransomware feature is supported.
        
        @param request: DescribeSupportRegionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSupportRegionResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeSupportRegion',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSupportRegionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_support_region(self) -> sas_20181203_models.DescribeSupportRegionResponse:
        """
        @summary Queries the regions in which the anti-ransomware feature is supported.
        
        @return: DescribeSupportRegionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_support_region_with_options(runtime)

    async def describe_support_region_async(self) -> sas_20181203_models.DescribeSupportRegionResponse:
        """
        @summary Queries the regions in which the anti-ransomware feature is supported.
        
        @return: DescribeSupportRegionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_support_region_with_options_async(runtime)

    def describe_susp_event_detail_with_options(
        self,
        request: sas_20181203_models.DescribeSuspEventDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSuspEventDetailResponse:
        """
        @summary Queries the details of an exception. An alert event consists of an alert and exceptions. Each alert event is associated with multiple exceptions.
        
        @param request: DescribeSuspEventDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSuspEventDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.suspicious_event_id):
            query['SuspiciousEventId'] = request.suspicious_event_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSuspEventDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSuspEventDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_susp_event_detail_with_options_async(
        self,
        request: sas_20181203_models.DescribeSuspEventDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSuspEventDetailResponse:
        """
        @summary Queries the details of an exception. An alert event consists of an alert and exceptions. Each alert event is associated with multiple exceptions.
        
        @param request: DescribeSuspEventDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSuspEventDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.suspicious_event_id):
            query['SuspiciousEventId'] = request.suspicious_event_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSuspEventDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSuspEventDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_susp_event_detail(
        self,
        request: sas_20181203_models.DescribeSuspEventDetailRequest,
    ) -> sas_20181203_models.DescribeSuspEventDetailResponse:
        """
        @summary Queries the details of an exception. An alert event consists of an alert and exceptions. Each alert event is associated with multiple exceptions.
        
        @param request: DescribeSuspEventDetailRequest
        @return: DescribeSuspEventDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_susp_event_detail_with_options(request, runtime)

    async def describe_susp_event_detail_async(
        self,
        request: sas_20181203_models.DescribeSuspEventDetailRequest,
    ) -> sas_20181203_models.DescribeSuspEventDetailResponse:
        """
        @summary Queries the details of an exception. An alert event consists of an alert and exceptions. Each alert event is associated with multiple exceptions.
        
        @param request: DescribeSuspEventDetailRequest
        @return: DescribeSuspEventDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_susp_event_detail_with_options_async(request, runtime)

    def describe_susp_event_export_info_with_options(
        self,
        request: sas_20181203_models.DescribeSuspEventExportInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSuspEventExportInfoResponse:
        """
        @summary Queries the information about an export task of exceptions.
        
        @param request: DescribeSuspEventExportInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSuspEventExportInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.export_id):
            query['ExportId'] = request.export_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSuspEventExportInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSuspEventExportInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_susp_event_export_info_with_options_async(
        self,
        request: sas_20181203_models.DescribeSuspEventExportInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSuspEventExportInfoResponse:
        """
        @summary Queries the information about an export task of exceptions.
        
        @param request: DescribeSuspEventExportInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSuspEventExportInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.export_id):
            query['ExportId'] = request.export_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSuspEventExportInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSuspEventExportInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_susp_event_export_info(
        self,
        request: sas_20181203_models.DescribeSuspEventExportInfoRequest,
    ) -> sas_20181203_models.DescribeSuspEventExportInfoResponse:
        """
        @summary Queries the information about an export task of exceptions.
        
        @param request: DescribeSuspEventExportInfoRequest
        @return: DescribeSuspEventExportInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_susp_event_export_info_with_options(request, runtime)

    async def describe_susp_event_export_info_async(
        self,
        request: sas_20181203_models.DescribeSuspEventExportInfoRequest,
    ) -> sas_20181203_models.DescribeSuspEventExportInfoResponse:
        """
        @summary Queries the information about an export task of exceptions.
        
        @param request: DescribeSuspEventExportInfoRequest
        @return: DescribeSuspEventExportInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_susp_event_export_info_with_options_async(request, runtime)

    def describe_susp_event_quara_files_with_options(
        self,
        request: sas_20181203_models.DescribeSuspEventQuaraFilesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSuspEventQuaraFilesResponse:
        """
        @summary Queries quarantined files by page.
        
        @param request: DescribeSuspEventQuaraFilesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSuspEventQuaraFilesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.grouping_id):
            query['GroupingId'] = request.grouping_id
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.quara_tag):
            query['QuaraTag'] = request.quara_tag
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSuspEventQuaraFiles',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSuspEventQuaraFilesResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_susp_event_quara_files_with_options_async(
        self,
        request: sas_20181203_models.DescribeSuspEventQuaraFilesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSuspEventQuaraFilesResponse:
        """
        @summary Queries quarantined files by page.
        
        @param request: DescribeSuspEventQuaraFilesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSuspEventQuaraFilesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.grouping_id):
            query['GroupingId'] = request.grouping_id
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.quara_tag):
            query['QuaraTag'] = request.quara_tag
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSuspEventQuaraFiles',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSuspEventQuaraFilesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_susp_event_quara_files(
        self,
        request: sas_20181203_models.DescribeSuspEventQuaraFilesRequest,
    ) -> sas_20181203_models.DescribeSuspEventQuaraFilesResponse:
        """
        @summary Queries quarantined files by page.
        
        @param request: DescribeSuspEventQuaraFilesRequest
        @return: DescribeSuspEventQuaraFilesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_susp_event_quara_files_with_options(request, runtime)

    async def describe_susp_event_quara_files_async(
        self,
        request: sas_20181203_models.DescribeSuspEventQuaraFilesRequest,
    ) -> sas_20181203_models.DescribeSuspEventQuaraFilesResponse:
        """
        @summary Queries quarantined files by page.
        
        @param request: DescribeSuspEventQuaraFilesRequest
        @return: DescribeSuspEventQuaraFilesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_susp_event_quara_files_with_options_async(request, runtime)

    def describe_susp_event_user_setting_with_options(
        self,
        request: sas_20181203_models.DescribeSuspEventUserSettingRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSuspEventUserSettingResponse:
        """
        @summary Queries the user settings for exceptions.
        
        @param request: DescribeSuspEventUserSettingRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSuspEventUserSettingResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSuspEventUserSetting',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSuspEventUserSettingResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_susp_event_user_setting_with_options_async(
        self,
        request: sas_20181203_models.DescribeSuspEventUserSettingRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSuspEventUserSettingResponse:
        """
        @summary Queries the user settings for exceptions.
        
        @param request: DescribeSuspEventUserSettingRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSuspEventUserSettingResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSuspEventUserSetting',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSuspEventUserSettingResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_susp_event_user_setting(
        self,
        request: sas_20181203_models.DescribeSuspEventUserSettingRequest,
    ) -> sas_20181203_models.DescribeSuspEventUserSettingResponse:
        """
        @summary Queries the user settings for exceptions.
        
        @param request: DescribeSuspEventUserSettingRequest
        @return: DescribeSuspEventUserSettingResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_susp_event_user_setting_with_options(request, runtime)

    async def describe_susp_event_user_setting_async(
        self,
        request: sas_20181203_models.DescribeSuspEventUserSettingRequest,
    ) -> sas_20181203_models.DescribeSuspEventUserSettingResponse:
        """
        @summary Queries the user settings for exceptions.
        
        @param request: DescribeSuspEventUserSettingRequest
        @return: DescribeSuspEventUserSettingResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_susp_event_user_setting_with_options_async(request, runtime)

    def describe_susp_events_with_options(
        self,
        tmp_req: sas_20181203_models.DescribeSuspEventsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSuspEventsResponse:
        """
        @summary Queries a list of alert events that are generated without aggregation.
        
        @param tmp_req: DescribeSuspEventsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSuspEventsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.DescribeSuspEventsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.source_ali_uids):
            request.source_ali_uids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.source_ali_uids, 'SourceAliUids', 'simple')
        query = {}
        if not UtilClient.is_unset(request.alarm_unique_info):
            query['AlarmUniqueInfo'] = request.alarm_unique_info
        if not UtilClient.is_unset(request.assets_type_list):
            query['AssetsTypeList'] = request.assets_type_list
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.container_field_name):
            query['ContainerFieldName'] = request.container_field_name
        if not UtilClient.is_unset(request.container_field_value):
            query['ContainerFieldValue'] = request.container_field_value
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.dealed):
            query['Dealed'] = request.dealed
        if not UtilClient.is_unset(request.event_names):
            query['EventNames'] = request.event_names
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.levels):
            query['Levels'] = request.levels
        if not UtilClient.is_unset(request.multi_account_action_type):
            query['MultiAccountActionType'] = request.multi_account_action_type
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.operate_error_code_list):
            query['OperateErrorCodeList'] = request.operate_error_code_list
        if not UtilClient.is_unset(request.operate_time_end):
            query['OperateTimeEnd'] = request.operate_time_end
        if not UtilClient.is_unset(request.operate_time_start):
            query['OperateTimeStart'] = request.operate_time_start
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.parent_event_types):
            query['ParentEventTypes'] = request.parent_event_types
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.sort_column):
            query['SortColumn'] = request.sort_column
        if not UtilClient.is_unset(request.sort_type):
            query['SortType'] = request.sort_type
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.source_ali_uids_shrink):
            query['SourceAliUids'] = request.source_ali_uids_shrink
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        if not UtilClient.is_unset(request.strict_mode):
            query['StrictMode'] = request.strict_mode
        if not UtilClient.is_unset(request.support_operate_code_list):
            query['SupportOperateCodeList'] = request.support_operate_code_list
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        if not UtilClient.is_unset(request.time_end):
            query['TimeEnd'] = request.time_end
        if not UtilClient.is_unset(request.time_start):
            query['TimeStart'] = request.time_start
        if not UtilClient.is_unset(request.unique_info):
            query['UniqueInfo'] = request.unique_info
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        body = {}
        if not UtilClient.is_unset(request.tactic_id):
            body['TacticId'] = request.tactic_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DescribeSuspEvents',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSuspEventsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_susp_events_with_options_async(
        self,
        tmp_req: sas_20181203_models.DescribeSuspEventsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSuspEventsResponse:
        """
        @summary Queries a list of alert events that are generated without aggregation.
        
        @param tmp_req: DescribeSuspEventsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSuspEventsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.DescribeSuspEventsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.source_ali_uids):
            request.source_ali_uids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.source_ali_uids, 'SourceAliUids', 'simple')
        query = {}
        if not UtilClient.is_unset(request.alarm_unique_info):
            query['AlarmUniqueInfo'] = request.alarm_unique_info
        if not UtilClient.is_unset(request.assets_type_list):
            query['AssetsTypeList'] = request.assets_type_list
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.container_field_name):
            query['ContainerFieldName'] = request.container_field_name
        if not UtilClient.is_unset(request.container_field_value):
            query['ContainerFieldValue'] = request.container_field_value
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.dealed):
            query['Dealed'] = request.dealed
        if not UtilClient.is_unset(request.event_names):
            query['EventNames'] = request.event_names
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.levels):
            query['Levels'] = request.levels
        if not UtilClient.is_unset(request.multi_account_action_type):
            query['MultiAccountActionType'] = request.multi_account_action_type
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.operate_error_code_list):
            query['OperateErrorCodeList'] = request.operate_error_code_list
        if not UtilClient.is_unset(request.operate_time_end):
            query['OperateTimeEnd'] = request.operate_time_end
        if not UtilClient.is_unset(request.operate_time_start):
            query['OperateTimeStart'] = request.operate_time_start
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.parent_event_types):
            query['ParentEventTypes'] = request.parent_event_types
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.sort_column):
            query['SortColumn'] = request.sort_column
        if not UtilClient.is_unset(request.sort_type):
            query['SortType'] = request.sort_type
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.source_ali_uids_shrink):
            query['SourceAliUids'] = request.source_ali_uids_shrink
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        if not UtilClient.is_unset(request.strict_mode):
            query['StrictMode'] = request.strict_mode
        if not UtilClient.is_unset(request.support_operate_code_list):
            query['SupportOperateCodeList'] = request.support_operate_code_list
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        if not UtilClient.is_unset(request.time_end):
            query['TimeEnd'] = request.time_end
        if not UtilClient.is_unset(request.time_start):
            query['TimeStart'] = request.time_start
        if not UtilClient.is_unset(request.unique_info):
            query['UniqueInfo'] = request.unique_info
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        body = {}
        if not UtilClient.is_unset(request.tactic_id):
            body['TacticId'] = request.tactic_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DescribeSuspEvents',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSuspEventsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_susp_events(
        self,
        request: sas_20181203_models.DescribeSuspEventsRequest,
    ) -> sas_20181203_models.DescribeSuspEventsResponse:
        """
        @summary Queries a list of alert events that are generated without aggregation.
        
        @param request: DescribeSuspEventsRequest
        @return: DescribeSuspEventsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_susp_events_with_options(request, runtime)

    async def describe_susp_events_async(
        self,
        request: sas_20181203_models.DescribeSuspEventsRequest,
    ) -> sas_20181203_models.DescribeSuspEventsResponse:
        """
        @summary Queries a list of alert events that are generated without aggregation.
        
        @param request: DescribeSuspEventsRequest
        @return: DescribeSuspEventsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_susp_events_with_options_async(request, runtime)

    def describe_suspicious_overall_config_with_options(
        self,
        request: sas_20181203_models.DescribeSuspiciousOverallConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSuspiciousOverallConfigResponse:
        """
        @summary Queries the configuration of a specified feature.
        
        @param request: DescribeSuspiciousOverallConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSuspiciousOverallConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSuspiciousOverallConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSuspiciousOverallConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_suspicious_overall_config_with_options_async(
        self,
        request: sas_20181203_models.DescribeSuspiciousOverallConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSuspiciousOverallConfigResponse:
        """
        @summary Queries the configuration of a specified feature.
        
        @param request: DescribeSuspiciousOverallConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSuspiciousOverallConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSuspiciousOverallConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSuspiciousOverallConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_suspicious_overall_config(
        self,
        request: sas_20181203_models.DescribeSuspiciousOverallConfigRequest,
    ) -> sas_20181203_models.DescribeSuspiciousOverallConfigResponse:
        """
        @summary Queries the configuration of a specified feature.
        
        @param request: DescribeSuspiciousOverallConfigRequest
        @return: DescribeSuspiciousOverallConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_suspicious_overall_config_with_options(request, runtime)

    async def describe_suspicious_overall_config_async(
        self,
        request: sas_20181203_models.DescribeSuspiciousOverallConfigRequest,
    ) -> sas_20181203_models.DescribeSuspiciousOverallConfigResponse:
        """
        @summary Queries the configuration of a specified feature.
        
        @param request: DescribeSuspiciousOverallConfigRequest
        @return: DescribeSuspiciousOverallConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_suspicious_overall_config_with_options_async(request, runtime)

    def describe_suspicious_uuidconfig_with_options(
        self,
        request: sas_20181203_models.DescribeSuspiciousUUIDConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSuspiciousUUIDConfigResponse:
        """
        @summary Queries the UUIDs of servers on which proactive defense of a specified type takes effect.
        
        @param request: DescribeSuspiciousUUIDConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSuspiciousUUIDConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSuspiciousUUIDConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSuspiciousUUIDConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_suspicious_uuidconfig_with_options_async(
        self,
        request: sas_20181203_models.DescribeSuspiciousUUIDConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSuspiciousUUIDConfigResponse:
        """
        @summary Queries the UUIDs of servers on which proactive defense of a specified type takes effect.
        
        @param request: DescribeSuspiciousUUIDConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSuspiciousUUIDConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSuspiciousUUIDConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSuspiciousUUIDConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_suspicious_uuidconfig(
        self,
        request: sas_20181203_models.DescribeSuspiciousUUIDConfigRequest,
    ) -> sas_20181203_models.DescribeSuspiciousUUIDConfigResponse:
        """
        @summary Queries the UUIDs of servers on which proactive defense of a specified type takes effect.
        
        @param request: DescribeSuspiciousUUIDConfigRequest
        @return: DescribeSuspiciousUUIDConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_suspicious_uuidconfig_with_options(request, runtime)

    async def describe_suspicious_uuidconfig_async(
        self,
        request: sas_20181203_models.DescribeSuspiciousUUIDConfigRequest,
    ) -> sas_20181203_models.DescribeSuspiciousUUIDConfigResponse:
        """
        @summary Queries the UUIDs of servers on which proactive defense of a specified type takes effect.
        
        @param request: DescribeSuspiciousUUIDConfigRequest
        @return: DescribeSuspiciousUUIDConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_suspicious_uuidconfig_with_options_async(request, runtime)

    def describe_sync_asset_task_list_with_options(
        self,
        request: sas_20181203_models.DescribeSyncAssetTaskListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSyncAssetTaskListResponse:
        """
        @summary Queries a list of IDC scan tasks.
        
        @param request: DescribeSyncAssetTaskListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSyncAssetTaskListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.task_name):
            query['TaskName'] = request.task_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSyncAssetTaskList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSyncAssetTaskListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_sync_asset_task_list_with_options_async(
        self,
        request: sas_20181203_models.DescribeSyncAssetTaskListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSyncAssetTaskListResponse:
        """
        @summary Queries a list of IDC scan tasks.
        
        @param request: DescribeSyncAssetTaskListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSyncAssetTaskListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.task_name):
            query['TaskName'] = request.task_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSyncAssetTaskList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSyncAssetTaskListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_sync_asset_task_list(
        self,
        request: sas_20181203_models.DescribeSyncAssetTaskListRequest,
    ) -> sas_20181203_models.DescribeSyncAssetTaskListResponse:
        """
        @summary Queries a list of IDC scan tasks.
        
        @param request: DescribeSyncAssetTaskListRequest
        @return: DescribeSyncAssetTaskListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_sync_asset_task_list_with_options(request, runtime)

    async def describe_sync_asset_task_list_async(
        self,
        request: sas_20181203_models.DescribeSyncAssetTaskListRequest,
    ) -> sas_20181203_models.DescribeSyncAssetTaskListResponse:
        """
        @summary Queries a list of IDC scan tasks.
        
        @param request: DescribeSyncAssetTaskListRequest
        @return: DescribeSyncAssetTaskListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_sync_asset_task_list_with_options_async(request, runtime)

    def describe_sync_asset_task_log_detail_with_options(
        self,
        request: sas_20181203_models.DescribeSyncAssetTaskLogDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSyncAssetTaskLogDetailResponse:
        """
        @summary Queries the details of an IDC scan task.
        
        @param request: DescribeSyncAssetTaskLogDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSyncAssetTaskLogDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.root_task_id):
            query['RootTaskId'] = request.root_task_id
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.task_name):
            query['TaskName'] = request.task_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSyncAssetTaskLogDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSyncAssetTaskLogDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_sync_asset_task_log_detail_with_options_async(
        self,
        request: sas_20181203_models.DescribeSyncAssetTaskLogDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeSyncAssetTaskLogDetailResponse:
        """
        @summary Queries the details of an IDC scan task.
        
        @param request: DescribeSyncAssetTaskLogDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeSyncAssetTaskLogDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.root_task_id):
            query['RootTaskId'] = request.root_task_id
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.task_name):
            query['TaskName'] = request.task_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeSyncAssetTaskLogDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeSyncAssetTaskLogDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_sync_asset_task_log_detail(
        self,
        request: sas_20181203_models.DescribeSyncAssetTaskLogDetailRequest,
    ) -> sas_20181203_models.DescribeSyncAssetTaskLogDetailResponse:
        """
        @summary Queries the details of an IDC scan task.
        
        @param request: DescribeSyncAssetTaskLogDetailRequest
        @return: DescribeSyncAssetTaskLogDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_sync_asset_task_log_detail_with_options(request, runtime)

    async def describe_sync_asset_task_log_detail_async(
        self,
        request: sas_20181203_models.DescribeSyncAssetTaskLogDetailRequest,
    ) -> sas_20181203_models.DescribeSyncAssetTaskLogDetailResponse:
        """
        @summary Queries the details of an IDC scan task.
        
        @param request: DescribeSyncAssetTaskLogDetailRequest
        @return: DescribeSyncAssetTaskLogDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_sync_asset_task_log_detail_with_options_async(request, runtime)

    def describe_target_with_options(
        self,
        request: sas_20181203_models.DescribeTargetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeTargetResponse:
        """
        @summary Queries the servers on which vulnerability scan is enabled.
        
        @param request: DescribeTargetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeTargetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config):
            query['Config'] = request.config
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeTarget',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeTargetResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_target_with_options_async(
        self,
        request: sas_20181203_models.DescribeTargetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeTargetResponse:
        """
        @summary Queries the servers on which vulnerability scan is enabled.
        
        @param request: DescribeTargetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeTargetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config):
            query['Config'] = request.config
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeTarget',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeTargetResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_target(
        self,
        request: sas_20181203_models.DescribeTargetRequest,
    ) -> sas_20181203_models.DescribeTargetResponse:
        """
        @summary Queries the servers on which vulnerability scan is enabled.
        
        @param request: DescribeTargetRequest
        @return: DescribeTargetResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_target_with_options(request, runtime)

    async def describe_target_async(
        self,
        request: sas_20181203_models.DescribeTargetRequest,
    ) -> sas_20181203_models.DescribeTargetResponse:
        """
        @summary Queries the servers on which vulnerability scan is enabled.
        
        @param request: DescribeTargetRequest
        @return: DescribeTargetResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_target_with_options_async(request, runtime)

    def describe_task_error_log_with_options(
        self,
        request: sas_20181203_models.DescribeTaskErrorLogRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeTaskErrorLogResponse:
        """
        @summary Queries the error logs on a task that failed to fix image vulnerabilities.
        
        @param request: DescribeTaskErrorLogRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeTaskErrorLogResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.build_task_id):
            query['BuildTaskId'] = request.build_task_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeTaskErrorLog',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeTaskErrorLogResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_task_error_log_with_options_async(
        self,
        request: sas_20181203_models.DescribeTaskErrorLogRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeTaskErrorLogResponse:
        """
        @summary Queries the error logs on a task that failed to fix image vulnerabilities.
        
        @param request: DescribeTaskErrorLogRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeTaskErrorLogResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.build_task_id):
            query['BuildTaskId'] = request.build_task_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeTaskErrorLog',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeTaskErrorLogResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_task_error_log(
        self,
        request: sas_20181203_models.DescribeTaskErrorLogRequest,
    ) -> sas_20181203_models.DescribeTaskErrorLogResponse:
        """
        @summary Queries the error logs on a task that failed to fix image vulnerabilities.
        
        @param request: DescribeTaskErrorLogRequest
        @return: DescribeTaskErrorLogResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_task_error_log_with_options(request, runtime)

    async def describe_task_error_log_async(
        self,
        request: sas_20181203_models.DescribeTaskErrorLogRequest,
    ) -> sas_20181203_models.DescribeTaskErrorLogResponse:
        """
        @summary Queries the error logs on a task that failed to fix image vulnerabilities.
        
        @param request: DescribeTaskErrorLogRequest
        @return: DescribeTaskErrorLogResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_task_error_log_with_options_async(request, runtime)

    def describe_total_statistics_with_options(
        self,
        request: sas_20181203_models.DescribeTotalStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeTotalStatisticsResponse:
        """
        @summary Queries event statistics.
        
        @param request: DescribeTotalStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeTotalStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeTotalStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeTotalStatisticsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_total_statistics_with_options_async(
        self,
        request: sas_20181203_models.DescribeTotalStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeTotalStatisticsResponse:
        """
        @summary Queries event statistics.
        
        @param request: DescribeTotalStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeTotalStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeTotalStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeTotalStatisticsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_total_statistics(
        self,
        request: sas_20181203_models.DescribeTotalStatisticsRequest,
    ) -> sas_20181203_models.DescribeTotalStatisticsResponse:
        """
        @summary Queries event statistics.
        
        @param request: DescribeTotalStatisticsRequest
        @return: DescribeTotalStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_total_statistics_with_options(request, runtime)

    async def describe_total_statistics_async(
        self,
        request: sas_20181203_models.DescribeTotalStatisticsRequest,
    ) -> sas_20181203_models.DescribeTotalStatisticsResponse:
        """
        @summary Queries event statistics.
        
        @param request: DescribeTotalStatisticsRequest
        @return: DescribeTotalStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_total_statistics_with_options_async(request, runtime)

    def describe_trace_info_detail_with_options(
        self,
        request: sas_20181203_models.DescribeTraceInfoDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeTraceInfoDetailResponse:
        """
        @summary Queries the trace information about alerts.
        
        @param request: DescribeTraceInfoDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeTraceInfoDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.incident_time):
            query['IncidentTime'] = request.incident_time
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        if not UtilClient.is_unset(request.vertex_id):
            query['VertexId'] = request.vertex_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeTraceInfoDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeTraceInfoDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_trace_info_detail_with_options_async(
        self,
        request: sas_20181203_models.DescribeTraceInfoDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeTraceInfoDetailResponse:
        """
        @summary Queries the trace information about alerts.
        
        @param request: DescribeTraceInfoDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeTraceInfoDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.incident_time):
            query['IncidentTime'] = request.incident_time
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        if not UtilClient.is_unset(request.vertex_id):
            query['VertexId'] = request.vertex_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeTraceInfoDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeTraceInfoDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_trace_info_detail(
        self,
        request: sas_20181203_models.DescribeTraceInfoDetailRequest,
    ) -> sas_20181203_models.DescribeTraceInfoDetailResponse:
        """
        @summary Queries the trace information about alerts.
        
        @param request: DescribeTraceInfoDetailRequest
        @return: DescribeTraceInfoDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_trace_info_detail_with_options(request, runtime)

    async def describe_trace_info_detail_async(
        self,
        request: sas_20181203_models.DescribeTraceInfoDetailRequest,
    ) -> sas_20181203_models.DescribeTraceInfoDetailResponse:
        """
        @summary Queries the trace information about alerts.
        
        @param request: DescribeTraceInfoDetailRequest
        @return: DescribeTraceInfoDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_trace_info_detail_with_options_async(request, runtime)

    def describe_trace_info_node_with_options(
        self,
        request: sas_20181203_models.DescribeTraceInfoNodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeTraceInfoNodeResponse:
        """
        @summary Queries the details about a trace node.
        
        @param request: DescribeTraceInfoNodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeTraceInfoNodeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.event_name):
            query['EventName'] = request.event_name
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.incident_time):
            query['IncidentTime'] = request.incident_time
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        if not UtilClient.is_unset(request.vertex_id):
            query['VertexId'] = request.vertex_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeTraceInfoNode',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeTraceInfoNodeResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_trace_info_node_with_options_async(
        self,
        request: sas_20181203_models.DescribeTraceInfoNodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeTraceInfoNodeResponse:
        """
        @summary Queries the details about a trace node.
        
        @param request: DescribeTraceInfoNodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeTraceInfoNodeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.event_name):
            query['EventName'] = request.event_name
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.incident_time):
            query['IncidentTime'] = request.incident_time
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        if not UtilClient.is_unset(request.vertex_id):
            query['VertexId'] = request.vertex_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeTraceInfoNode',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeTraceInfoNodeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_trace_info_node(
        self,
        request: sas_20181203_models.DescribeTraceInfoNodeRequest,
    ) -> sas_20181203_models.DescribeTraceInfoNodeResponse:
        """
        @summary Queries the details about a trace node.
        
        @param request: DescribeTraceInfoNodeRequest
        @return: DescribeTraceInfoNodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_trace_info_node_with_options(request, runtime)

    async def describe_trace_info_node_async(
        self,
        request: sas_20181203_models.DescribeTraceInfoNodeRequest,
    ) -> sas_20181203_models.DescribeTraceInfoNodeResponse:
        """
        @summary Queries the details about a trace node.
        
        @param request: DescribeTraceInfoNodeRequest
        @return: DescribeTraceInfoNodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_trace_info_node_with_options_async(request, runtime)

    def describe_uni_backup_database_with_options(
        self,
        request: sas_20181203_models.DescribeUniBackupDatabaseRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeUniBackupDatabaseResponse:
        """
        @summary Queries the information about databases for which anti-ransomware policies are created.
        
        @param request: DescribeUniBackupDatabaseRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeUniBackupDatabaseResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.database_type):
            query['DatabaseType'] = request.database_type
        if not UtilClient.is_unset(request.instance_name):
            query['InstanceName'] = request.instance_name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.query_type):
            query['QueryType'] = request.query_type
        if not UtilClient.is_unset(request.uni_region_id):
            query['UniRegionId'] = request.uni_region_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeUniBackupDatabase',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeUniBackupDatabaseResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_uni_backup_database_with_options_async(
        self,
        request: sas_20181203_models.DescribeUniBackupDatabaseRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeUniBackupDatabaseResponse:
        """
        @summary Queries the information about databases for which anti-ransomware policies are created.
        
        @param request: DescribeUniBackupDatabaseRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeUniBackupDatabaseResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.database_type):
            query['DatabaseType'] = request.database_type
        if not UtilClient.is_unset(request.instance_name):
            query['InstanceName'] = request.instance_name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.query_type):
            query['QueryType'] = request.query_type
        if not UtilClient.is_unset(request.uni_region_id):
            query['UniRegionId'] = request.uni_region_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeUniBackupDatabase',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeUniBackupDatabaseResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_uni_backup_database(
        self,
        request: sas_20181203_models.DescribeUniBackupDatabaseRequest,
    ) -> sas_20181203_models.DescribeUniBackupDatabaseResponse:
        """
        @summary Queries the information about databases for which anti-ransomware policies are created.
        
        @param request: DescribeUniBackupDatabaseRequest
        @return: DescribeUniBackupDatabaseResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_uni_backup_database_with_options(request, runtime)

    async def describe_uni_backup_database_async(
        self,
        request: sas_20181203_models.DescribeUniBackupDatabaseRequest,
    ) -> sas_20181203_models.DescribeUniBackupDatabaseResponse:
        """
        @summary Queries the information about databases for which anti-ransomware policies are created.
        
        @param request: DescribeUniBackupDatabaseRequest
        @return: DescribeUniBackupDatabaseResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_uni_backup_database_with_options_async(request, runtime)

    def describe_uni_backup_policies_with_options(
        self,
        request: sas_20181203_models.DescribeUniBackupPoliciesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeUniBackupPoliciesResponse:
        """
        @summary Queries the anti-ransomware policies that are created for databases.
        
        @param request: DescribeUniBackupPoliciesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeUniBackupPoliciesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.policy_name):
            query['PolicyName'] = request.policy_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeUniBackupPolicies',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeUniBackupPoliciesResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_uni_backup_policies_with_options_async(
        self,
        request: sas_20181203_models.DescribeUniBackupPoliciesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeUniBackupPoliciesResponse:
        """
        @summary Queries the anti-ransomware policies that are created for databases.
        
        @param request: DescribeUniBackupPoliciesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeUniBackupPoliciesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.policy_name):
            query['PolicyName'] = request.policy_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeUniBackupPolicies',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeUniBackupPoliciesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_uni_backup_policies(
        self,
        request: sas_20181203_models.DescribeUniBackupPoliciesRequest,
    ) -> sas_20181203_models.DescribeUniBackupPoliciesResponse:
        """
        @summary Queries the anti-ransomware policies that are created for databases.
        
        @param request: DescribeUniBackupPoliciesRequest
        @return: DescribeUniBackupPoliciesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_uni_backup_policies_with_options(request, runtime)

    async def describe_uni_backup_policies_async(
        self,
        request: sas_20181203_models.DescribeUniBackupPoliciesRequest,
    ) -> sas_20181203_models.DescribeUniBackupPoliciesResponse:
        """
        @summary Queries the anti-ransomware policies that are created for databases.
        
        @param request: DescribeUniBackupPoliciesRequest
        @return: DescribeUniBackupPoliciesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_uni_backup_policies_with_options_async(request, runtime)

    def describe_uni_backup_policy_detail_with_options(
        self,
        request: sas_20181203_models.DescribeUniBackupPolicyDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeUniBackupPolicyDetailResponse:
        """
        @summary Queries the details of an anti-ransomware policy for databases.
        
        @param request: DescribeUniBackupPolicyDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeUniBackupPolicyDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.policy_id):
            query['PolicyId'] = request.policy_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeUniBackupPolicyDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeUniBackupPolicyDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_uni_backup_policy_detail_with_options_async(
        self,
        request: sas_20181203_models.DescribeUniBackupPolicyDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeUniBackupPolicyDetailResponse:
        """
        @summary Queries the details of an anti-ransomware policy for databases.
        
        @param request: DescribeUniBackupPolicyDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeUniBackupPolicyDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.policy_id):
            query['PolicyId'] = request.policy_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeUniBackupPolicyDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeUniBackupPolicyDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_uni_backup_policy_detail(
        self,
        request: sas_20181203_models.DescribeUniBackupPolicyDetailRequest,
    ) -> sas_20181203_models.DescribeUniBackupPolicyDetailResponse:
        """
        @summary Queries the details of an anti-ransomware policy for databases.
        
        @param request: DescribeUniBackupPolicyDetailRequest
        @return: DescribeUniBackupPolicyDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_uni_backup_policy_detail_with_options(request, runtime)

    async def describe_uni_backup_policy_detail_async(
        self,
        request: sas_20181203_models.DescribeUniBackupPolicyDetailRequest,
    ) -> sas_20181203_models.DescribeUniBackupPolicyDetailResponse:
        """
        @summary Queries the details of an anti-ransomware policy for databases.
        
        @param request: DescribeUniBackupPolicyDetailRequest
        @return: DescribeUniBackupPolicyDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_uni_backup_policy_detail_with_options_async(request, runtime)

    def describe_uni_backup_statistics_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeUniBackupStatisticsResponse:
        """
        @summary Queries the statistics on backups based on anti-ransomware policies.
        
        @param request: DescribeUniBackupStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeUniBackupStatisticsResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeUniBackupStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeUniBackupStatisticsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_uni_backup_statistics_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeUniBackupStatisticsResponse:
        """
        @summary Queries the statistics on backups based on anti-ransomware policies.
        
        @param request: DescribeUniBackupStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeUniBackupStatisticsResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeUniBackupStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeUniBackupStatisticsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_uni_backup_statistics(self) -> sas_20181203_models.DescribeUniBackupStatisticsResponse:
        """
        @summary Queries the statistics on backups based on anti-ransomware policies.
        
        @return: DescribeUniBackupStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_uni_backup_statistics_with_options(runtime)

    async def describe_uni_backup_statistics_async(self) -> sas_20181203_models.DescribeUniBackupStatisticsResponse:
        """
        @summary Queries the statistics on backups based on anti-ransomware policies.
        
        @return: DescribeUniBackupStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_uni_backup_statistics_with_options_async(runtime)

    def describe_uni_recoverable_list_with_options(
        self,
        request: sas_20181203_models.DescribeUniRecoverableListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeUniRecoverableListResponse:
        """
        @summary Queries the backup snapshots from which the data of a database can be restored.
        
        @param request: DescribeUniRecoverableListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeUniRecoverableListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.database):
            query['Database'] = request.database
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.policy_id):
            query['PolicyId'] = request.policy_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeUniRecoverableList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeUniRecoverableListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_uni_recoverable_list_with_options_async(
        self,
        request: sas_20181203_models.DescribeUniRecoverableListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeUniRecoverableListResponse:
        """
        @summary Queries the backup snapshots from which the data of a database can be restored.
        
        @param request: DescribeUniRecoverableListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeUniRecoverableListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.database):
            query['Database'] = request.database
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.policy_id):
            query['PolicyId'] = request.policy_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeUniRecoverableList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeUniRecoverableListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_uni_recoverable_list(
        self,
        request: sas_20181203_models.DescribeUniRecoverableListRequest,
    ) -> sas_20181203_models.DescribeUniRecoverableListResponse:
        """
        @summary Queries the backup snapshots from which the data of a database can be restored.
        
        @param request: DescribeUniRecoverableListRequest
        @return: DescribeUniRecoverableListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_uni_recoverable_list_with_options(request, runtime)

    async def describe_uni_recoverable_list_async(
        self,
        request: sas_20181203_models.DescribeUniRecoverableListRequest,
    ) -> sas_20181203_models.DescribeUniRecoverableListResponse:
        """
        @summary Queries the backup snapshots from which the data of a database can be restored.
        
        @param request: DescribeUniRecoverableListRequest
        @return: DescribeUniRecoverableListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_uni_recoverable_list_with_options_async(request, runtime)

    def describe_uni_support_region_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeUniSupportRegionResponse:
        """
        @summary Queries the region that is supported by anti-ransomware for databases.
        
        @param request: DescribeUniSupportRegionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeUniSupportRegionResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeUniSupportRegion',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeUniSupportRegionResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_uni_support_region_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeUniSupportRegionResponse:
        """
        @summary Queries the region that is supported by anti-ransomware for databases.
        
        @param request: DescribeUniSupportRegionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeUniSupportRegionResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeUniSupportRegion',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeUniSupportRegionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_uni_support_region(self) -> sas_20181203_models.DescribeUniSupportRegionResponse:
        """
        @summary Queries the region that is supported by anti-ransomware for databases.
        
        @return: DescribeUniSupportRegionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_uni_support_region_with_options(runtime)

    async def describe_uni_support_region_async(self) -> sas_20181203_models.DescribeUniSupportRegionResponse:
        """
        @summary Queries the region that is supported by anti-ransomware for databases.
        
        @return: DescribeUniSupportRegionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_uni_support_region_with_options_async(runtime)

    def describe_user_backup_machines_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeUserBackupMachinesResponse:
        """
        @summary Queries the information about the servers to which an anti-ransomware policy is applied.
        
        @param request: DescribeUserBackupMachinesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeUserBackupMachinesResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeUserBackupMachines',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeUserBackupMachinesResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_user_backup_machines_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeUserBackupMachinesResponse:
        """
        @summary Queries the information about the servers to which an anti-ransomware policy is applied.
        
        @param request: DescribeUserBackupMachinesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeUserBackupMachinesResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeUserBackupMachines',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeUserBackupMachinesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_user_backup_machines(self) -> sas_20181203_models.DescribeUserBackupMachinesResponse:
        """
        @summary Queries the information about the servers to which an anti-ransomware policy is applied.
        
        @return: DescribeUserBackupMachinesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_user_backup_machines_with_options(runtime)

    async def describe_user_backup_machines_async(self) -> sas_20181203_models.DescribeUserBackupMachinesResponse:
        """
        @summary Queries the information about the servers to which an anti-ransomware policy is applied.
        
        @return: DescribeUserBackupMachinesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_user_backup_machines_with_options_async(runtime)

    def describe_user_baseline_authorization_with_options(
        self,
        request: sas_20181203_models.DescribeUserBaselineAuthorizationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeUserBaselineAuthorizationResponse:
        """
        @summary The source IP address of the request.
        
        @param request: DescribeUserBaselineAuthorizationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeUserBaselineAuthorizationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeUserBaselineAuthorization',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeUserBaselineAuthorizationResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_user_baseline_authorization_with_options_async(
        self,
        request: sas_20181203_models.DescribeUserBaselineAuthorizationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeUserBaselineAuthorizationResponse:
        """
        @summary The source IP address of the request.
        
        @param request: DescribeUserBaselineAuthorizationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeUserBaselineAuthorizationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeUserBaselineAuthorization',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeUserBaselineAuthorizationResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_user_baseline_authorization(
        self,
        request: sas_20181203_models.DescribeUserBaselineAuthorizationRequest,
    ) -> sas_20181203_models.DescribeUserBaselineAuthorizationResponse:
        """
        @summary The source IP address of the request.
        
        @param request: DescribeUserBaselineAuthorizationRequest
        @return: DescribeUserBaselineAuthorizationResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_user_baseline_authorization_with_options(request, runtime)

    async def describe_user_baseline_authorization_async(
        self,
        request: sas_20181203_models.DescribeUserBaselineAuthorizationRequest,
    ) -> sas_20181203_models.DescribeUserBaselineAuthorizationResponse:
        """
        @summary The source IP address of the request.
        
        @param request: DescribeUserBaselineAuthorizationRequest
        @return: DescribeUserBaselineAuthorizationResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_user_baseline_authorization_with_options_async(request, runtime)

    def describe_user_setting_with_options(
        self,
        request: sas_20181203_models.DescribeUserSettingRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeUserSettingResponse:
        """
        @summary Queries the settings of a custom baseline check policy.
        
        @param request: DescribeUserSettingRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeUserSettingResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeUserSetting',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeUserSettingResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_user_setting_with_options_async(
        self,
        request: sas_20181203_models.DescribeUserSettingRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeUserSettingResponse:
        """
        @summary Queries the settings of a custom baseline check policy.
        
        @param request: DescribeUserSettingRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeUserSettingResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeUserSetting',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeUserSettingResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_user_setting(
        self,
        request: sas_20181203_models.DescribeUserSettingRequest,
    ) -> sas_20181203_models.DescribeUserSettingResponse:
        """
        @summary Queries the settings of a custom baseline check policy.
        
        @param request: DescribeUserSettingRequest
        @return: DescribeUserSettingResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_user_setting_with_options(request, runtime)

    async def describe_user_setting_async(
        self,
        request: sas_20181203_models.DescribeUserSettingRequest,
    ) -> sas_20181203_models.DescribeUserSettingResponse:
        """
        @summary Queries the settings of a custom baseline check policy.
        
        @param request: DescribeUserSettingRequest
        @return: DescribeUserSettingResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_user_setting_with_options_async(request, runtime)

    def describe_uuids_by_vul_names_with_options(
        self,
        request: sas_20181203_models.DescribeUuidsByVulNamesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeUuidsByVulNamesResponse:
        """
        @summary Queries a list of assets that support fixing based on vulnerability names.
        
        @param request: DescribeUuidsByVulNamesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeUuidsByVulNamesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.dealed):
            query['Dealed'] = request.dealed
        if not UtilClient.is_unset(request.field_name):
            query['FieldName'] = request.field_name
        if not UtilClient.is_unset(request.field_value):
            query['FieldValue'] = request.field_value
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.level):
            query['Level'] = request.level
        if not UtilClient.is_unset(request.necessity):
            query['Necessity'] = request.necessity
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.search_tags):
            query['SearchTags'] = request.search_tags
        if not UtilClient.is_unset(request.status_list):
            query['StatusList'] = request.status_list
        if not UtilClient.is_unset(request.tag):
            query['Tag'] = request.tag
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.vpc_instance_ids):
            query['VpcInstanceIds'] = request.vpc_instance_ids
        if not UtilClient.is_unset(request.vul_names):
            query['VulNames'] = request.vul_names
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeUuidsByVulNames',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeUuidsByVulNamesResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_uuids_by_vul_names_with_options_async(
        self,
        request: sas_20181203_models.DescribeUuidsByVulNamesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeUuidsByVulNamesResponse:
        """
        @summary Queries a list of assets that support fixing based on vulnerability names.
        
        @param request: DescribeUuidsByVulNamesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeUuidsByVulNamesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.dealed):
            query['Dealed'] = request.dealed
        if not UtilClient.is_unset(request.field_name):
            query['FieldName'] = request.field_name
        if not UtilClient.is_unset(request.field_value):
            query['FieldValue'] = request.field_value
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.level):
            query['Level'] = request.level
        if not UtilClient.is_unset(request.necessity):
            query['Necessity'] = request.necessity
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.search_tags):
            query['SearchTags'] = request.search_tags
        if not UtilClient.is_unset(request.status_list):
            query['StatusList'] = request.status_list
        if not UtilClient.is_unset(request.tag):
            query['Tag'] = request.tag
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.vpc_instance_ids):
            query['VpcInstanceIds'] = request.vpc_instance_ids
        if not UtilClient.is_unset(request.vul_names):
            query['VulNames'] = request.vul_names
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeUuidsByVulNames',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeUuidsByVulNamesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_uuids_by_vul_names(
        self,
        request: sas_20181203_models.DescribeUuidsByVulNamesRequest,
    ) -> sas_20181203_models.DescribeUuidsByVulNamesResponse:
        """
        @summary Queries a list of assets that support fixing based on vulnerability names.
        
        @param request: DescribeUuidsByVulNamesRequest
        @return: DescribeUuidsByVulNamesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_uuids_by_vul_names_with_options(request, runtime)

    async def describe_uuids_by_vul_names_async(
        self,
        request: sas_20181203_models.DescribeUuidsByVulNamesRequest,
    ) -> sas_20181203_models.DescribeUuidsByVulNamesResponse:
        """
        @summary Queries a list of assets that support fixing based on vulnerability names.
        
        @param request: DescribeUuidsByVulNamesRequest
        @return: DescribeUuidsByVulNamesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_uuids_by_vul_names_with_options_async(request, runtime)

    def describe_vendor_list_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeVendorListResponse:
        """
        @summary Queries the service providers whose assets can be added to Security Center.
        
        @param request: DescribeVendorListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVendorListResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeVendorList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeVendorListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_vendor_list_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeVendorListResponse:
        """
        @summary Queries the service providers whose assets can be added to Security Center.
        
        @param request: DescribeVendorListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVendorListResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeVendorList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeVendorListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_vendor_list(self) -> sas_20181203_models.DescribeVendorListResponse:
        """
        @summary Queries the service providers whose assets can be added to Security Center.
        
        @return: DescribeVendorListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_vendor_list_with_options(runtime)

    async def describe_vendor_list_async(self) -> sas_20181203_models.DescribeVendorListResponse:
        """
        @summary Queries the service providers whose assets can be added to Security Center.
        
        @return: DescribeVendorListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_vendor_list_with_options_async(runtime)

    def describe_version_config_with_options(
        self,
        request: sas_20181203_models.DescribeVersionConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeVersionConfigResponse:
        """
        @summary Queries the details about the edition of purchased Security Center.
        
        @param request: DescribeVersionConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVersionConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVersionConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeVersionConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_version_config_with_options_async(
        self,
        request: sas_20181203_models.DescribeVersionConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeVersionConfigResponse:
        """
        @summary Queries the details about the edition of purchased Security Center.
        
        @param request: DescribeVersionConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVersionConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVersionConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeVersionConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_version_config(
        self,
        request: sas_20181203_models.DescribeVersionConfigRequest,
    ) -> sas_20181203_models.DescribeVersionConfigResponse:
        """
        @summary Queries the details about the edition of purchased Security Center.
        
        @param request: DescribeVersionConfigRequest
        @return: DescribeVersionConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_version_config_with_options(request, runtime)

    async def describe_version_config_async(
        self,
        request: sas_20181203_models.DescribeVersionConfigRequest,
    ) -> sas_20181203_models.DescribeVersionConfigResponse:
        """
        @summary Queries the details about the edition of purchased Security Center.
        
        @param request: DescribeVersionConfigRequest
        @return: DescribeVersionConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_version_config_with_options_async(request, runtime)

    def describe_vol_dingding_message_with_options(
        self,
        request: sas_20181203_models.DescribeVolDingdingMessageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeVolDingdingMessageResponse:
        """
        @summary Queries the QR code address of a DingTalk group.
        
        @param request: DescribeVolDingdingMessageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVolDingdingMessageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVolDingdingMessage',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeVolDingdingMessageResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_vol_dingding_message_with_options_async(
        self,
        request: sas_20181203_models.DescribeVolDingdingMessageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeVolDingdingMessageResponse:
        """
        @summary Queries the QR code address of a DingTalk group.
        
        @param request: DescribeVolDingdingMessageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVolDingdingMessageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVolDingdingMessage',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeVolDingdingMessageResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_vol_dingding_message(
        self,
        request: sas_20181203_models.DescribeVolDingdingMessageRequest,
    ) -> sas_20181203_models.DescribeVolDingdingMessageResponse:
        """
        @summary Queries the QR code address of a DingTalk group.
        
        @param request: DescribeVolDingdingMessageRequest
        @return: DescribeVolDingdingMessageResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_vol_dingding_message_with_options(request, runtime)

    async def describe_vol_dingding_message_async(
        self,
        request: sas_20181203_models.DescribeVolDingdingMessageRequest,
    ) -> sas_20181203_models.DescribeVolDingdingMessageResponse:
        """
        @summary Queries the QR code address of a DingTalk group.
        
        @param request: DescribeVolDingdingMessageRequest
        @return: DescribeVolDingdingMessageResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_vol_dingding_message_with_options_async(request, runtime)

    def describe_vpc_honey_pot_criteria_with_options(
        self,
        request: sas_20181203_models.DescribeVpcHoneyPotCriteriaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeVpcHoneyPotCriteriaResponse:
        """
        @summary Queries the search conditions that can be used to query honeypots.
        
        @param request: DescribeVpcHoneyPotCriteriaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVpcHoneyPotCriteriaResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVpcHoneyPotCriteria',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeVpcHoneyPotCriteriaResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_vpc_honey_pot_criteria_with_options_async(
        self,
        request: sas_20181203_models.DescribeVpcHoneyPotCriteriaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeVpcHoneyPotCriteriaResponse:
        """
        @summary Queries the search conditions that can be used to query honeypots.
        
        @param request: DescribeVpcHoneyPotCriteriaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVpcHoneyPotCriteriaResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVpcHoneyPotCriteria',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeVpcHoneyPotCriteriaResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_vpc_honey_pot_criteria(
        self,
        request: sas_20181203_models.DescribeVpcHoneyPotCriteriaRequest,
    ) -> sas_20181203_models.DescribeVpcHoneyPotCriteriaResponse:
        """
        @summary Queries the search conditions that can be used to query honeypots.
        
        @param request: DescribeVpcHoneyPotCriteriaRequest
        @return: DescribeVpcHoneyPotCriteriaResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_vpc_honey_pot_criteria_with_options(request, runtime)

    async def describe_vpc_honey_pot_criteria_async(
        self,
        request: sas_20181203_models.DescribeVpcHoneyPotCriteriaRequest,
    ) -> sas_20181203_models.DescribeVpcHoneyPotCriteriaResponse:
        """
        @summary Queries the search conditions that can be used to query honeypots.
        
        @param request: DescribeVpcHoneyPotCriteriaRequest
        @return: DescribeVpcHoneyPotCriteriaResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_vpc_honey_pot_criteria_with_options_async(request, runtime)

    def describe_vpc_honey_pot_list_with_options(
        self,
        request: sas_20181203_models.DescribeVpcHoneyPotListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeVpcHoneyPotListResponse:
        """
        @summary Queries virtual private clouds (VPCs) on which honeypots are deployed.
        
        @description If you specify only the Action request parameter in your request, Security Center returns the list of all VPCs regardless of whether a honeypot is deployed on a VPC.
        
        @param request: DescribeVpcHoneyPotListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVpcHoneyPotListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.honey_pot_existence):
            query['HoneyPotExistence'] = request.honey_pot_existence
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.vpc_id):
            query['VpcId'] = request.vpc_id
        if not UtilClient.is_unset(request.vpc_name):
            query['VpcName'] = request.vpc_name
        if not UtilClient.is_unset(request.vpc_region_id):
            query['VpcRegionId'] = request.vpc_region_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVpcHoneyPotList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeVpcHoneyPotListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_vpc_honey_pot_list_with_options_async(
        self,
        request: sas_20181203_models.DescribeVpcHoneyPotListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeVpcHoneyPotListResponse:
        """
        @summary Queries virtual private clouds (VPCs) on which honeypots are deployed.
        
        @description If you specify only the Action request parameter in your request, Security Center returns the list of all VPCs regardless of whether a honeypot is deployed on a VPC.
        
        @param request: DescribeVpcHoneyPotListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVpcHoneyPotListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.honey_pot_existence):
            query['HoneyPotExistence'] = request.honey_pot_existence
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.vpc_id):
            query['VpcId'] = request.vpc_id
        if not UtilClient.is_unset(request.vpc_name):
            query['VpcName'] = request.vpc_name
        if not UtilClient.is_unset(request.vpc_region_id):
            query['VpcRegionId'] = request.vpc_region_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVpcHoneyPotList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeVpcHoneyPotListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_vpc_honey_pot_list(
        self,
        request: sas_20181203_models.DescribeVpcHoneyPotListRequest,
    ) -> sas_20181203_models.DescribeVpcHoneyPotListResponse:
        """
        @summary Queries virtual private clouds (VPCs) on which honeypots are deployed.
        
        @description If you specify only the Action request parameter in your request, Security Center returns the list of all VPCs regardless of whether a honeypot is deployed on a VPC.
        
        @param request: DescribeVpcHoneyPotListRequest
        @return: DescribeVpcHoneyPotListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_vpc_honey_pot_list_with_options(request, runtime)

    async def describe_vpc_honey_pot_list_async(
        self,
        request: sas_20181203_models.DescribeVpcHoneyPotListRequest,
    ) -> sas_20181203_models.DescribeVpcHoneyPotListResponse:
        """
        @summary Queries virtual private clouds (VPCs) on which honeypots are deployed.
        
        @description If you specify only the Action request parameter in your request, Security Center returns the list of all VPCs regardless of whether a honeypot is deployed on a VPC.
        
        @param request: DescribeVpcHoneyPotListRequest
        @return: DescribeVpcHoneyPotListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_vpc_honey_pot_list_with_options_async(request, runtime)

    def describe_vpc_list_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeVpcListResponse:
        """
        @summary Queries the information about virtual private clouds (VPCs).
        
        @param request: DescribeVpcListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVpcListResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeVpcList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeVpcListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_vpc_list_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeVpcListResponse:
        """
        @summary Queries the information about virtual private clouds (VPCs).
        
        @param request: DescribeVpcListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVpcListResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeVpcList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeVpcListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_vpc_list(self) -> sas_20181203_models.DescribeVpcListResponse:
        """
        @summary Queries the information about virtual private clouds (VPCs).
        
        @return: DescribeVpcListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_vpc_list_with_options(runtime)

    async def describe_vpc_list_async(self) -> sas_20181203_models.DescribeVpcListResponse:
        """
        @summary Queries the information about virtual private clouds (VPCs).
        
        @return: DescribeVpcListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_vpc_list_with_options_async(runtime)

    def describe_vul_check_task_status_detail_with_options(
        self,
        request: sas_20181203_models.DescribeVulCheckTaskStatusDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeVulCheckTaskStatusDetailResponse:
        """
        @summary Queries the status information about vulnerability scan tasks on a server.
        
        @param request: DescribeVulCheckTaskStatusDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVulCheckTaskStatusDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.task_ids):
            query['TaskIds'] = request.task_ids
        if not UtilClient.is_unset(request.types):
            query['Types'] = request.types
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVulCheckTaskStatusDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeVulCheckTaskStatusDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_vul_check_task_status_detail_with_options_async(
        self,
        request: sas_20181203_models.DescribeVulCheckTaskStatusDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeVulCheckTaskStatusDetailResponse:
        """
        @summary Queries the status information about vulnerability scan tasks on a server.
        
        @param request: DescribeVulCheckTaskStatusDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVulCheckTaskStatusDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.task_ids):
            query['TaskIds'] = request.task_ids
        if not UtilClient.is_unset(request.types):
            query['Types'] = request.types
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVulCheckTaskStatusDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeVulCheckTaskStatusDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_vul_check_task_status_detail(
        self,
        request: sas_20181203_models.DescribeVulCheckTaskStatusDetailRequest,
    ) -> sas_20181203_models.DescribeVulCheckTaskStatusDetailResponse:
        """
        @summary Queries the status information about vulnerability scan tasks on a server.
        
        @param request: DescribeVulCheckTaskStatusDetailRequest
        @return: DescribeVulCheckTaskStatusDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_vul_check_task_status_detail_with_options(request, runtime)

    async def describe_vul_check_task_status_detail_async(
        self,
        request: sas_20181203_models.DescribeVulCheckTaskStatusDetailRequest,
    ) -> sas_20181203_models.DescribeVulCheckTaskStatusDetailResponse:
        """
        @summary Queries the status information about vulnerability scan tasks on a server.
        
        @param request: DescribeVulCheckTaskStatusDetailRequest
        @return: DescribeVulCheckTaskStatusDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_vul_check_task_status_detail_with_options_async(request, runtime)

    def describe_vul_config_with_options(
        self,
        request: sas_20181203_models.DescribeVulConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeVulConfigResponse:
        """
        @summary Queries the configurations of vulnerability management.
        
        @param request: DescribeVulConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVulConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVulConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeVulConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_vul_config_with_options_async(
        self,
        request: sas_20181203_models.DescribeVulConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeVulConfigResponse:
        """
        @summary Queries the configurations of vulnerability management.
        
        @param request: DescribeVulConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVulConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVulConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeVulConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_vul_config(
        self,
        request: sas_20181203_models.DescribeVulConfigRequest,
    ) -> sas_20181203_models.DescribeVulConfigResponse:
        """
        @summary Queries the configurations of vulnerability management.
        
        @param request: DescribeVulConfigRequest
        @return: DescribeVulConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_vul_config_with_options(request, runtime)

    async def describe_vul_config_async(
        self,
        request: sas_20181203_models.DescribeVulConfigRequest,
    ) -> sas_20181203_models.DescribeVulConfigResponse:
        """
        @summary Queries the configurations of vulnerability management.
        
        @param request: DescribeVulConfigRequest
        @return: DescribeVulConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_vul_config_with_options_async(request, runtime)

    def describe_vul_defend_count_statistics_with_options(
        self,
        request: sas_20181203_models.DescribeVulDefendCountStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeVulDefendCountStatisticsResponse:
        """
        @summary Queries the vulnerability defense statistics in Security Center.
        
        @param request: DescribeVulDefendCountStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVulDefendCountStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.vul_type):
            query['VulType'] = request.vul_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVulDefendCountStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeVulDefendCountStatisticsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_vul_defend_count_statistics_with_options_async(
        self,
        request: sas_20181203_models.DescribeVulDefendCountStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeVulDefendCountStatisticsResponse:
        """
        @summary Queries the vulnerability defense statistics in Security Center.
        
        @param request: DescribeVulDefendCountStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVulDefendCountStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.vul_type):
            query['VulType'] = request.vul_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVulDefendCountStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeVulDefendCountStatisticsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_vul_defend_count_statistics(
        self,
        request: sas_20181203_models.DescribeVulDefendCountStatisticsRequest,
    ) -> sas_20181203_models.DescribeVulDefendCountStatisticsResponse:
        """
        @summary Queries the vulnerability defense statistics in Security Center.
        
        @param request: DescribeVulDefendCountStatisticsRequest
        @return: DescribeVulDefendCountStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_vul_defend_count_statistics_with_options(request, runtime)

    async def describe_vul_defend_count_statistics_async(
        self,
        request: sas_20181203_models.DescribeVulDefendCountStatisticsRequest,
    ) -> sas_20181203_models.DescribeVulDefendCountStatisticsResponse:
        """
        @summary Queries the vulnerability defense statistics in Security Center.
        
        @param request: DescribeVulDefendCountStatisticsRequest
        @return: DescribeVulDefendCountStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_vul_defend_count_statistics_with_options_async(request, runtime)

    def describe_vul_details_with_options(
        self,
        request: sas_20181203_models.DescribeVulDetailsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeVulDetailsResponse:
        """
        @summary Queries the details about a vulnerability.
        
        @param request: DescribeVulDetailsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVulDetailsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.alias_name):
            query['AliasName'] = request.alias_name
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVulDetails',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeVulDetailsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_vul_details_with_options_async(
        self,
        request: sas_20181203_models.DescribeVulDetailsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeVulDetailsResponse:
        """
        @summary Queries the details about a vulnerability.
        
        @param request: DescribeVulDetailsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVulDetailsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.alias_name):
            query['AliasName'] = request.alias_name
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVulDetails',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeVulDetailsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_vul_details(
        self,
        request: sas_20181203_models.DescribeVulDetailsRequest,
    ) -> sas_20181203_models.DescribeVulDetailsResponse:
        """
        @summary Queries the details about a vulnerability.
        
        @param request: DescribeVulDetailsRequest
        @return: DescribeVulDetailsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_vul_details_with_options(request, runtime)

    async def describe_vul_details_async(
        self,
        request: sas_20181203_models.DescribeVulDetailsRequest,
    ) -> sas_20181203_models.DescribeVulDetailsResponse:
        """
        @summary Queries the details about a vulnerability.
        
        @param request: DescribeVulDetailsRequest
        @return: DescribeVulDetailsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_vul_details_with_options_async(request, runtime)

    def describe_vul_export_info_with_options(
        self,
        request: sas_20181203_models.DescribeVulExportInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeVulExportInfoResponse:
        """
        @summary Queries the progress of a task that exports vulnerabilities.
        
        @description If the value of ExportStatus is success, the URL at which you can download the exported Excel file is returned.
        
        @param request: DescribeVulExportInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVulExportInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.export_id):
            query['ExportId'] = request.export_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVulExportInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeVulExportInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_vul_export_info_with_options_async(
        self,
        request: sas_20181203_models.DescribeVulExportInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeVulExportInfoResponse:
        """
        @summary Queries the progress of a task that exports vulnerabilities.
        
        @description If the value of ExportStatus is success, the URL at which you can download the exported Excel file is returned.
        
        @param request: DescribeVulExportInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVulExportInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.export_id):
            query['ExportId'] = request.export_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVulExportInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeVulExportInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_vul_export_info(
        self,
        request: sas_20181203_models.DescribeVulExportInfoRequest,
    ) -> sas_20181203_models.DescribeVulExportInfoResponse:
        """
        @summary Queries the progress of a task that exports vulnerabilities.
        
        @description If the value of ExportStatus is success, the URL at which you can download the exported Excel file is returned.
        
        @param request: DescribeVulExportInfoRequest
        @return: DescribeVulExportInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_vul_export_info_with_options(request, runtime)

    async def describe_vul_export_info_async(
        self,
        request: sas_20181203_models.DescribeVulExportInfoRequest,
    ) -> sas_20181203_models.DescribeVulExportInfoResponse:
        """
        @summary Queries the progress of a task that exports vulnerabilities.
        
        @description If the value of ExportStatus is success, the URL at which you can download the exported Excel file is returned.
        
        @param request: DescribeVulExportInfoRequest
        @return: DescribeVulExportInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_vul_export_info_with_options_async(request, runtime)

    def describe_vul_fix_statistics_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeVulFixStatisticsResponse:
        """
        @summary Queries the statistics of vulnerability fixes.
        
        @param request: DescribeVulFixStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVulFixStatisticsResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeVulFixStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeVulFixStatisticsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_vul_fix_statistics_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeVulFixStatisticsResponse:
        """
        @summary Queries the statistics of vulnerability fixes.
        
        @param request: DescribeVulFixStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVulFixStatisticsResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeVulFixStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeVulFixStatisticsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_vul_fix_statistics(self) -> sas_20181203_models.DescribeVulFixStatisticsResponse:
        """
        @summary Queries the statistics of vulnerability fixes.
        
        @return: DescribeVulFixStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_vul_fix_statistics_with_options(runtime)

    async def describe_vul_fix_statistics_async(self) -> sas_20181203_models.DescribeVulFixStatisticsResponse:
        """
        @summary Queries the statistics of vulnerability fixes.
        
        @return: DescribeVulFixStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_vul_fix_statistics_with_options_async(runtime)

    def describe_vul_list_with_options(
        self,
        request: sas_20181203_models.DescribeVulListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeVulListResponse:
        """
        @summary Queries vulnerabilities by type.
        
        @param request: DescribeVulListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVulListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.alias_name):
            query['AliasName'] = request.alias_name
        if not UtilClient.is_unset(request.attach_types):
            query['AttachTypes'] = request.attach_types
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.dealed):
            query['Dealed'] = request.dealed
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.ids):
            query['Ids'] = request.ids
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.necessity):
            query['Necessity'] = request.necessity
        if not UtilClient.is_unset(request.next_token):
            query['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.rasp_defend):
            query['RaspDefend'] = request.rasp_defend
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.status_list):
            query['StatusList'] = request.status_list
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.use_next_token):
            query['UseNextToken'] = request.use_next_token
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        if not UtilClient.is_unset(request.vpc_instance_ids):
            query['VpcInstanceIds'] = request.vpc_instance_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVulList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeVulListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_vul_list_with_options_async(
        self,
        request: sas_20181203_models.DescribeVulListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeVulListResponse:
        """
        @summary Queries vulnerabilities by type.
        
        @param request: DescribeVulListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVulListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.alias_name):
            query['AliasName'] = request.alias_name
        if not UtilClient.is_unset(request.attach_types):
            query['AttachTypes'] = request.attach_types
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.dealed):
            query['Dealed'] = request.dealed
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.ids):
            query['Ids'] = request.ids
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.necessity):
            query['Necessity'] = request.necessity
        if not UtilClient.is_unset(request.next_token):
            query['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.rasp_defend):
            query['RaspDefend'] = request.rasp_defend
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.status_list):
            query['StatusList'] = request.status_list
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.use_next_token):
            query['UseNextToken'] = request.use_next_token
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        if not UtilClient.is_unset(request.vpc_instance_ids):
            query['VpcInstanceIds'] = request.vpc_instance_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVulList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeVulListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_vul_list(
        self,
        request: sas_20181203_models.DescribeVulListRequest,
    ) -> sas_20181203_models.DescribeVulListResponse:
        """
        @summary Queries vulnerabilities by type.
        
        @param request: DescribeVulListRequest
        @return: DescribeVulListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_vul_list_with_options(request, runtime)

    async def describe_vul_list_async(
        self,
        request: sas_20181203_models.DescribeVulListRequest,
    ) -> sas_20181203_models.DescribeVulListResponse:
        """
        @summary Queries vulnerabilities by type.
        
        @param request: DescribeVulListRequest
        @return: DescribeVulListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_vul_list_with_options_async(request, runtime)

    def describe_vul_list_page_with_options(
        self,
        request: sas_20181203_models.DescribeVulListPageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeVulListPageResponse:
        """
        @summary Queries the vulnerabilities that can be detected.
        
        @param request: DescribeVulListPageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVulListPageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.cve_id):
            query['CveId'] = request.cve_id
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.rasp_defend):
            query['RaspDefend'] = request.rasp_defend
        if not UtilClient.is_unset(request.vul_name_like):
            query['VulNameLike'] = request.vul_name_like
        if not UtilClient.is_unset(request.vul_type):
            query['VulType'] = request.vul_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVulListPage',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeVulListPageResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_vul_list_page_with_options_async(
        self,
        request: sas_20181203_models.DescribeVulListPageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeVulListPageResponse:
        """
        @summary Queries the vulnerabilities that can be detected.
        
        @param request: DescribeVulListPageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVulListPageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.cve_id):
            query['CveId'] = request.cve_id
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.rasp_defend):
            query['RaspDefend'] = request.rasp_defend
        if not UtilClient.is_unset(request.vul_name_like):
            query['VulNameLike'] = request.vul_name_like
        if not UtilClient.is_unset(request.vul_type):
            query['VulType'] = request.vul_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVulListPage',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeVulListPageResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_vul_list_page(
        self,
        request: sas_20181203_models.DescribeVulListPageRequest,
    ) -> sas_20181203_models.DescribeVulListPageResponse:
        """
        @summary Queries the vulnerabilities that can be detected.
        
        @param request: DescribeVulListPageRequest
        @return: DescribeVulListPageResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_vul_list_page_with_options(request, runtime)

    async def describe_vul_list_page_async(
        self,
        request: sas_20181203_models.DescribeVulListPageRequest,
    ) -> sas_20181203_models.DescribeVulListPageResponse:
        """
        @summary Queries the vulnerabilities that can be detected.
        
        @param request: DescribeVulListPageRequest
        @return: DescribeVulListPageResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_vul_list_page_with_options_async(request, runtime)

    def describe_vul_meta_count_statistics_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeVulMetaCountStatisticsResponse:
        """
        @summary Queries the statistics of vulnerabilities in Security Center.
        
        @param request: DescribeVulMetaCountStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVulMetaCountStatisticsResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeVulMetaCountStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeVulMetaCountStatisticsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_vul_meta_count_statistics_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeVulMetaCountStatisticsResponse:
        """
        @summary Queries the statistics of vulnerabilities in Security Center.
        
        @param request: DescribeVulMetaCountStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVulMetaCountStatisticsResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeVulMetaCountStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeVulMetaCountStatisticsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_vul_meta_count_statistics(self) -> sas_20181203_models.DescribeVulMetaCountStatisticsResponse:
        """
        @summary Queries the statistics of vulnerabilities in Security Center.
        
        @return: DescribeVulMetaCountStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_vul_meta_count_statistics_with_options(runtime)

    async def describe_vul_meta_count_statistics_async(self) -> sas_20181203_models.DescribeVulMetaCountStatisticsResponse:
        """
        @summary Queries the statistics of vulnerabilities in Security Center.
        
        @return: DescribeVulMetaCountStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_vul_meta_count_statistics_with_options_async(runtime)

    def describe_vul_num_statistics_with_options(
        self,
        request: sas_20181203_models.DescribeVulNumStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeVulNumStatisticsResponse:
        """
        @summary Queries the statistics of vulnerabilities.
        
        @param request: DescribeVulNumStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVulNumStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVulNumStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeVulNumStatisticsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_vul_num_statistics_with_options_async(
        self,
        request: sas_20181203_models.DescribeVulNumStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeVulNumStatisticsResponse:
        """
        @summary Queries the statistics of vulnerabilities.
        
        @param request: DescribeVulNumStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVulNumStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVulNumStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeVulNumStatisticsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_vul_num_statistics(
        self,
        request: sas_20181203_models.DescribeVulNumStatisticsRequest,
    ) -> sas_20181203_models.DescribeVulNumStatisticsResponse:
        """
        @summary Queries the statistics of vulnerabilities.
        
        @param request: DescribeVulNumStatisticsRequest
        @return: DescribeVulNumStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_vul_num_statistics_with_options(request, runtime)

    async def describe_vul_num_statistics_async(
        self,
        request: sas_20181203_models.DescribeVulNumStatisticsRequest,
    ) -> sas_20181203_models.DescribeVulNumStatisticsResponse:
        """
        @summary Queries the statistics of vulnerabilities.
        
        @param request: DescribeVulNumStatisticsRequest
        @return: DescribeVulNumStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_vul_num_statistics_with_options_async(request, runtime)

    def describe_vul_target_config_with_options(
        self,
        request: sas_20181203_models.DescribeVulTargetConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeVulTargetConfigResponse:
        """
        @summary Queries the configurations of the vulnerability scan feature for a server.
        
        @param request: DescribeVulTargetConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVulTargetConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVulTargetConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeVulTargetConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_vul_target_config_with_options_async(
        self,
        request: sas_20181203_models.DescribeVulTargetConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeVulTargetConfigResponse:
        """
        @summary Queries the configurations of the vulnerability scan feature for a server.
        
        @param request: DescribeVulTargetConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVulTargetConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVulTargetConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeVulTargetConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_vul_target_config(
        self,
        request: sas_20181203_models.DescribeVulTargetConfigRequest,
    ) -> sas_20181203_models.DescribeVulTargetConfigResponse:
        """
        @summary Queries the configurations of the vulnerability scan feature for a server.
        
        @param request: DescribeVulTargetConfigRequest
        @return: DescribeVulTargetConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_vul_target_config_with_options(request, runtime)

    async def describe_vul_target_config_async(
        self,
        request: sas_20181203_models.DescribeVulTargetConfigRequest,
    ) -> sas_20181203_models.DescribeVulTargetConfigResponse:
        """
        @summary Queries the configurations of the vulnerability scan feature for a server.
        
        @param request: DescribeVulTargetConfigRequest
        @return: DescribeVulTargetConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_vul_target_config_with_options_async(request, runtime)

    def describe_vul_target_statistics_with_options(
        self,
        request: sas_20181203_models.DescribeVulTargetStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeVulTargetStatisticsResponse:
        """
        @summary Queries the configurations of the vulnerability scan feature.
        
        @param request: DescribeVulTargetStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVulTargetStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVulTargetStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeVulTargetStatisticsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_vul_target_statistics_with_options_async(
        self,
        request: sas_20181203_models.DescribeVulTargetStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeVulTargetStatisticsResponse:
        """
        @summary Queries the configurations of the vulnerability scan feature.
        
        @param request: DescribeVulTargetStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVulTargetStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVulTargetStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeVulTargetStatisticsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_vul_target_statistics(
        self,
        request: sas_20181203_models.DescribeVulTargetStatisticsRequest,
    ) -> sas_20181203_models.DescribeVulTargetStatisticsResponse:
        """
        @summary Queries the configurations of the vulnerability scan feature.
        
        @param request: DescribeVulTargetStatisticsRequest
        @return: DescribeVulTargetStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_vul_target_statistics_with_options(request, runtime)

    async def describe_vul_target_statistics_async(
        self,
        request: sas_20181203_models.DescribeVulTargetStatisticsRequest,
    ) -> sas_20181203_models.DescribeVulTargetStatisticsResponse:
        """
        @summary Queries the configurations of the vulnerability scan feature.
        
        @param request: DescribeVulTargetStatisticsRequest
        @return: DescribeVulTargetStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_vul_target_statistics_with_options_async(request, runtime)

    def describe_vul_whitelist_with_options(
        self,
        request: sas_20181203_models.DescribeVulWhitelistRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeVulWhitelistResponse:
        """
        @summary Queries the whitelist of vulnerabilities by page.
        
        @param request: DescribeVulWhitelistRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVulWhitelistResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVulWhitelist',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeVulWhitelistResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_vul_whitelist_with_options_async(
        self,
        request: sas_20181203_models.DescribeVulWhitelistRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeVulWhitelistResponse:
        """
        @summary Queries the whitelist of vulnerabilities by page.
        
        @param request: DescribeVulWhitelistRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeVulWhitelistResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeVulWhitelist',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeVulWhitelistResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_vul_whitelist(
        self,
        request: sas_20181203_models.DescribeVulWhitelistRequest,
    ) -> sas_20181203_models.DescribeVulWhitelistResponse:
        """
        @summary Queries the whitelist of vulnerabilities by page.
        
        @param request: DescribeVulWhitelistRequest
        @return: DescribeVulWhitelistResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_vul_whitelist_with_options(request, runtime)

    async def describe_vul_whitelist_async(
        self,
        request: sas_20181203_models.DescribeVulWhitelistRequest,
    ) -> sas_20181203_models.DescribeVulWhitelistResponse:
        """
        @summary Queries the whitelist of vulnerabilities by page.
        
        @param request: DescribeVulWhitelistRequest
        @return: DescribeVulWhitelistResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_vul_whitelist_with_options_async(request, runtime)

    def describe_warning_export_info_with_options(
        self,
        request: sas_20181203_models.DescribeWarningExportInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWarningExportInfoResponse:
        """
        @summary Queries the progress of a export task for a baseline check result.
        
        @param request: DescribeWarningExportInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWarningExportInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.export_id):
            query['ExportId'] = request.export_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeWarningExportInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWarningExportInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_warning_export_info_with_options_async(
        self,
        request: sas_20181203_models.DescribeWarningExportInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWarningExportInfoResponse:
        """
        @summary Queries the progress of a export task for a baseline check result.
        
        @param request: DescribeWarningExportInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWarningExportInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.export_id):
            query['ExportId'] = request.export_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeWarningExportInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWarningExportInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_warning_export_info(
        self,
        request: sas_20181203_models.DescribeWarningExportInfoRequest,
    ) -> sas_20181203_models.DescribeWarningExportInfoResponse:
        """
        @summary Queries the progress of a export task for a baseline check result.
        
        @param request: DescribeWarningExportInfoRequest
        @return: DescribeWarningExportInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_warning_export_info_with_options(request, runtime)

    async def describe_warning_export_info_async(
        self,
        request: sas_20181203_models.DescribeWarningExportInfoRequest,
    ) -> sas_20181203_models.DescribeWarningExportInfoResponse:
        """
        @summary Queries the progress of a export task for a baseline check result.
        
        @param request: DescribeWarningExportInfoRequest
        @return: DescribeWarningExportInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_warning_export_info_with_options_async(request, runtime)

    def describe_warning_machines_with_options(
        self,
        request: sas_20181203_models.DescribeWarningMachinesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWarningMachinesResponse:
        """
        @summary Queries information about servers on which a baseline check is performed. The information includes the IDs of the servers, the statistics of a risk item, and the status of the risk item.
        
        @param request: DescribeWarningMachinesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWarningMachinesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.container_field_name):
            query['ContainerFieldName'] = request.container_field_name
        if not UtilClient.is_unset(request.container_field_value):
            query['ContainerFieldValue'] = request.container_field_value
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.have_risk):
            query['HaveRisk'] = request.have_risk
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.machine_name):
            query['MachineName'] = request.machine_name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.risk_id):
            query['RiskId'] = request.risk_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeWarningMachines',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWarningMachinesResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_warning_machines_with_options_async(
        self,
        request: sas_20181203_models.DescribeWarningMachinesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWarningMachinesResponse:
        """
        @summary Queries information about servers on which a baseline check is performed. The information includes the IDs of the servers, the statistics of a risk item, and the status of the risk item.
        
        @param request: DescribeWarningMachinesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWarningMachinesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.container_field_name):
            query['ContainerFieldName'] = request.container_field_name
        if not UtilClient.is_unset(request.container_field_value):
            query['ContainerFieldValue'] = request.container_field_value
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.have_risk):
            query['HaveRisk'] = request.have_risk
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.machine_name):
            query['MachineName'] = request.machine_name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.risk_id):
            query['RiskId'] = request.risk_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeWarningMachines',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWarningMachinesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_warning_machines(
        self,
        request: sas_20181203_models.DescribeWarningMachinesRequest,
    ) -> sas_20181203_models.DescribeWarningMachinesResponse:
        """
        @summary Queries information about servers on which a baseline check is performed. The information includes the IDs of the servers, the statistics of a risk item, and the status of the risk item.
        
        @param request: DescribeWarningMachinesRequest
        @return: DescribeWarningMachinesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_warning_machines_with_options(request, runtime)

    async def describe_warning_machines_async(
        self,
        request: sas_20181203_models.DescribeWarningMachinesRequest,
    ) -> sas_20181203_models.DescribeWarningMachinesResponse:
        """
        @summary Queries information about servers on which a baseline check is performed. The information includes the IDs of the servers, the statistics of a risk item, and the status of the risk item.
        
        @param request: DescribeWarningMachinesRequest
        @return: DescribeWarningMachinesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_warning_machines_with_options_async(request, runtime)

    def describe_web_lock_bind_list_with_options(
        self,
        request: sas_20181203_models.DescribeWebLockBindListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWebLockBindListResponse:
        """
        @summary Queries the information about the servers that have web tamper proofing enabled.
        
        @param request: DescribeWebLockBindListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWebLockBindListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeWebLockBindList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWebLockBindListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_web_lock_bind_list_with_options_async(
        self,
        request: sas_20181203_models.DescribeWebLockBindListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWebLockBindListResponse:
        """
        @summary Queries the information about the servers that have web tamper proofing enabled.
        
        @param request: DescribeWebLockBindListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWebLockBindListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeWebLockBindList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWebLockBindListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_web_lock_bind_list(
        self,
        request: sas_20181203_models.DescribeWebLockBindListRequest,
    ) -> sas_20181203_models.DescribeWebLockBindListResponse:
        """
        @summary Queries the information about the servers that have web tamper proofing enabled.
        
        @param request: DescribeWebLockBindListRequest
        @return: DescribeWebLockBindListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_web_lock_bind_list_with_options(request, runtime)

    async def describe_web_lock_bind_list_async(
        self,
        request: sas_20181203_models.DescribeWebLockBindListRequest,
    ) -> sas_20181203_models.DescribeWebLockBindListResponse:
        """
        @summary Queries the information about the servers that have web tamper proofing enabled.
        
        @param request: DescribeWebLockBindListRequest
        @return: DescribeWebLockBindListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_web_lock_bind_list_with_options_async(request, runtime)

    def describe_web_lock_config_list_with_options(
        self,
        request: sas_20181203_models.DescribeWebLockConfigListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWebLockConfigListResponse:
        """
        @summary Queries the configurations of web tamper proofing for a specified server.
        
        @param request: DescribeWebLockConfigListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWebLockConfigListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeWebLockConfigList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWebLockConfigListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_web_lock_config_list_with_options_async(
        self,
        request: sas_20181203_models.DescribeWebLockConfigListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWebLockConfigListResponse:
        """
        @summary Queries the configurations of web tamper proofing for a specified server.
        
        @param request: DescribeWebLockConfigListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWebLockConfigListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeWebLockConfigList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWebLockConfigListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_web_lock_config_list(
        self,
        request: sas_20181203_models.DescribeWebLockConfigListRequest,
    ) -> sas_20181203_models.DescribeWebLockConfigListResponse:
        """
        @summary Queries the configurations of web tamper proofing for a specified server.
        
        @param request: DescribeWebLockConfigListRequest
        @return: DescribeWebLockConfigListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_web_lock_config_list_with_options(request, runtime)

    async def describe_web_lock_config_list_async(
        self,
        request: sas_20181203_models.DescribeWebLockConfigListRequest,
    ) -> sas_20181203_models.DescribeWebLockConfigListResponse:
        """
        @summary Queries the configurations of web tamper proofing for a specified server.
        
        @param request: DescribeWebLockConfigListRequest
        @return: DescribeWebLockConfigListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_web_lock_config_list_with_options_async(request, runtime)

    def describe_web_lock_exclusive_file_type_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWebLockExclusiveFileTypeResponse:
        """
        @summary Queries the types of files that are excluded from web tamper proofing.
        
        @param request: DescribeWebLockExclusiveFileTypeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWebLockExclusiveFileTypeResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeWebLockExclusiveFileType',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWebLockExclusiveFileTypeResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_web_lock_exclusive_file_type_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWebLockExclusiveFileTypeResponse:
        """
        @summary Queries the types of files that are excluded from web tamper proofing.
        
        @param request: DescribeWebLockExclusiveFileTypeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWebLockExclusiveFileTypeResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeWebLockExclusiveFileType',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWebLockExclusiveFileTypeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_web_lock_exclusive_file_type(self) -> sas_20181203_models.DescribeWebLockExclusiveFileTypeResponse:
        """
        @summary Queries the types of files that are excluded from web tamper proofing.
        
        @return: DescribeWebLockExclusiveFileTypeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_web_lock_exclusive_file_type_with_options(runtime)

    async def describe_web_lock_exclusive_file_type_async(self) -> sas_20181203_models.DescribeWebLockExclusiveFileTypeResponse:
        """
        @summary Queries the types of files that are excluded from web tamper proofing.
        
        @return: DescribeWebLockExclusiveFileTypeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_web_lock_exclusive_file_type_with_options_async(runtime)

    def describe_web_lock_file_change_statistics_with_options(
        self,
        request: sas_20181203_models.DescribeWebLockFileChangeStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWebLockFileChangeStatisticsResponse:
        """
        @summary Queries the statistics on changes to the files that are protected by web tamper proofing.
        
        @param request: DescribeWebLockFileChangeStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWebLockFileChangeStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeWebLockFileChangeStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWebLockFileChangeStatisticsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_web_lock_file_change_statistics_with_options_async(
        self,
        request: sas_20181203_models.DescribeWebLockFileChangeStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWebLockFileChangeStatisticsResponse:
        """
        @summary Queries the statistics on changes to the files that are protected by web tamper proofing.
        
        @param request: DescribeWebLockFileChangeStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWebLockFileChangeStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeWebLockFileChangeStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWebLockFileChangeStatisticsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_web_lock_file_change_statistics(
        self,
        request: sas_20181203_models.DescribeWebLockFileChangeStatisticsRequest,
    ) -> sas_20181203_models.DescribeWebLockFileChangeStatisticsResponse:
        """
        @summary Queries the statistics on changes to the files that are protected by web tamper proofing.
        
        @param request: DescribeWebLockFileChangeStatisticsRequest
        @return: DescribeWebLockFileChangeStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_web_lock_file_change_statistics_with_options(request, runtime)

    async def describe_web_lock_file_change_statistics_async(
        self,
        request: sas_20181203_models.DescribeWebLockFileChangeStatisticsRequest,
    ) -> sas_20181203_models.DescribeWebLockFileChangeStatisticsResponse:
        """
        @summary Queries the statistics on changes to the files that are protected by web tamper proofing.
        
        @param request: DescribeWebLockFileChangeStatisticsRequest
        @return: DescribeWebLockFileChangeStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_web_lock_file_change_statistics_with_options_async(request, runtime)

    def describe_web_lock_file_events_with_options(
        self,
        request: sas_20181203_models.DescribeWebLockFileEventsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWebLockFileEventsResponse:
        """
        @summary Queries events on web tamper proofing.
        
        @param request: DescribeWebLockFileEventsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWebLockFileEventsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.dealed):
            query['Dealed'] = request.dealed
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.process_name):
            query['ProcessName'] = request.process_name
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.ts_begin):
            query['TsBegin'] = request.ts_begin
        if not UtilClient.is_unset(request.ts_end):
            query['TsEnd'] = request.ts_end
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeWebLockFileEvents',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWebLockFileEventsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_web_lock_file_events_with_options_async(
        self,
        request: sas_20181203_models.DescribeWebLockFileEventsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWebLockFileEventsResponse:
        """
        @summary Queries events on web tamper proofing.
        
        @param request: DescribeWebLockFileEventsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWebLockFileEventsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.dealed):
            query['Dealed'] = request.dealed
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.process_name):
            query['ProcessName'] = request.process_name
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.ts_begin):
            query['TsBegin'] = request.ts_begin
        if not UtilClient.is_unset(request.ts_end):
            query['TsEnd'] = request.ts_end
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeWebLockFileEvents',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWebLockFileEventsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_web_lock_file_events(
        self,
        request: sas_20181203_models.DescribeWebLockFileEventsRequest,
    ) -> sas_20181203_models.DescribeWebLockFileEventsResponse:
        """
        @summary Queries events on web tamper proofing.
        
        @param request: DescribeWebLockFileEventsRequest
        @return: DescribeWebLockFileEventsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_web_lock_file_events_with_options(request, runtime)

    async def describe_web_lock_file_events_async(
        self,
        request: sas_20181203_models.DescribeWebLockFileEventsRequest,
    ) -> sas_20181203_models.DescribeWebLockFileEventsResponse:
        """
        @summary Queries events on web tamper proofing.
        
        @param request: DescribeWebLockFileEventsRequest
        @return: DescribeWebLockFileEventsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_web_lock_file_events_with_options_async(request, runtime)

    def describe_web_lock_file_type_summary_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWebLockFileTypeSummaryResponse:
        """
        @summary The number of attempts.
        
        @param request: DescribeWebLockFileTypeSummaryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWebLockFileTypeSummaryResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeWebLockFileTypeSummary',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWebLockFileTypeSummaryResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_web_lock_file_type_summary_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWebLockFileTypeSummaryResponse:
        """
        @summary The number of attempts.
        
        @param request: DescribeWebLockFileTypeSummaryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWebLockFileTypeSummaryResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeWebLockFileTypeSummary',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWebLockFileTypeSummaryResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_web_lock_file_type_summary(self) -> sas_20181203_models.DescribeWebLockFileTypeSummaryResponse:
        """
        @summary The number of attempts.
        
        @return: DescribeWebLockFileTypeSummaryResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_web_lock_file_type_summary_with_options(runtime)

    async def describe_web_lock_file_type_summary_async(self) -> sas_20181203_models.DescribeWebLockFileTypeSummaryResponse:
        """
        @summary The number of attempts.
        
        @return: DescribeWebLockFileTypeSummaryResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_web_lock_file_type_summary_with_options_async(runtime)

    def describe_web_lock_inclusive_file_type_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWebLockInclusiveFileTypeResponse:
        """
        @summary Queries the types of files that can be protected by web tamper proofing.
        
        @param request: DescribeWebLockInclusiveFileTypeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWebLockInclusiveFileTypeResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeWebLockInclusiveFileType',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWebLockInclusiveFileTypeResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_web_lock_inclusive_file_type_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWebLockInclusiveFileTypeResponse:
        """
        @summary Queries the types of files that can be protected by web tamper proofing.
        
        @param request: DescribeWebLockInclusiveFileTypeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWebLockInclusiveFileTypeResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeWebLockInclusiveFileType',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWebLockInclusiveFileTypeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_web_lock_inclusive_file_type(self) -> sas_20181203_models.DescribeWebLockInclusiveFileTypeResponse:
        """
        @summary Queries the types of files that can be protected by web tamper proofing.
        
        @return: DescribeWebLockInclusiveFileTypeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_web_lock_inclusive_file_type_with_options(runtime)

    async def describe_web_lock_inclusive_file_type_async(self) -> sas_20181203_models.DescribeWebLockInclusiveFileTypeResponse:
        """
        @summary Queries the types of files that can be protected by web tamper proofing.
        
        @return: DescribeWebLockInclusiveFileTypeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_web_lock_inclusive_file_type_with_options_async(runtime)

    def describe_web_lock_process_block_statistics_with_options(
        self,
        request: sas_20181203_models.DescribeWebLockProcessBlockStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWebLockProcessBlockStatisticsResponse:
        """
        @summary Queries the statistics on processes for web tamper proofing.
        
        @param request: DescribeWebLockProcessBlockStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWebLockProcessBlockStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeWebLockProcessBlockStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWebLockProcessBlockStatisticsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_web_lock_process_block_statistics_with_options_async(
        self,
        request: sas_20181203_models.DescribeWebLockProcessBlockStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWebLockProcessBlockStatisticsResponse:
        """
        @summary Queries the statistics on processes for web tamper proofing.
        
        @param request: DescribeWebLockProcessBlockStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWebLockProcessBlockStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeWebLockProcessBlockStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWebLockProcessBlockStatisticsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_web_lock_process_block_statistics(
        self,
        request: sas_20181203_models.DescribeWebLockProcessBlockStatisticsRequest,
    ) -> sas_20181203_models.DescribeWebLockProcessBlockStatisticsResponse:
        """
        @summary Queries the statistics on processes for web tamper proofing.
        
        @param request: DescribeWebLockProcessBlockStatisticsRequest
        @return: DescribeWebLockProcessBlockStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_web_lock_process_block_statistics_with_options(request, runtime)

    async def describe_web_lock_process_block_statistics_async(
        self,
        request: sas_20181203_models.DescribeWebLockProcessBlockStatisticsRequest,
    ) -> sas_20181203_models.DescribeWebLockProcessBlockStatisticsResponse:
        """
        @summary Queries the statistics on processes for web tamper proofing.
        
        @param request: DescribeWebLockProcessBlockStatisticsRequest
        @return: DescribeWebLockProcessBlockStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_web_lock_process_block_statistics_with_options_async(request, runtime)

    def describe_web_lock_process_list_with_options(
        self,
        request: sas_20181203_models.DescribeWebLockProcessListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWebLockProcessListResponse:
        """
        @summary Queries the processes for web tamper proofing.
        
        @param request: DescribeWebLockProcessListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWebLockProcessListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.process_name):
            query['ProcessName'] = request.process_name
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeWebLockProcessList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWebLockProcessListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_web_lock_process_list_with_options_async(
        self,
        request: sas_20181203_models.DescribeWebLockProcessListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWebLockProcessListResponse:
        """
        @summary Queries the processes for web tamper proofing.
        
        @param request: DescribeWebLockProcessListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWebLockProcessListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.process_name):
            query['ProcessName'] = request.process_name
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeWebLockProcessList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWebLockProcessListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_web_lock_process_list(
        self,
        request: sas_20181203_models.DescribeWebLockProcessListRequest,
    ) -> sas_20181203_models.DescribeWebLockProcessListResponse:
        """
        @summary Queries the processes for web tamper proofing.
        
        @param request: DescribeWebLockProcessListRequest
        @return: DescribeWebLockProcessListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_web_lock_process_list_with_options(request, runtime)

    async def describe_web_lock_process_list_async(
        self,
        request: sas_20181203_models.DescribeWebLockProcessListRequest,
    ) -> sas_20181203_models.DescribeWebLockProcessListResponse:
        """
        @summary Queries the processes for web tamper proofing.
        
        @param request: DescribeWebLockProcessListRequest
        @return: DescribeWebLockProcessListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_web_lock_process_list_with_options_async(request, runtime)

    def describe_web_lock_status_with_options(
        self,
        request: sas_20181203_models.DescribeWebLockStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWebLockStatusResponse:
        """
        @summary Queries the status of web tamper proofing.
        
        @param request: DescribeWebLockStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWebLockStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeWebLockStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWebLockStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_web_lock_status_with_options_async(
        self,
        request: sas_20181203_models.DescribeWebLockStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWebLockStatusResponse:
        """
        @summary Queries the status of web tamper proofing.
        
        @param request: DescribeWebLockStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWebLockStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeWebLockStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWebLockStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_web_lock_status(
        self,
        request: sas_20181203_models.DescribeWebLockStatusRequest,
    ) -> sas_20181203_models.DescribeWebLockStatusResponse:
        """
        @summary Queries the status of web tamper proofing.
        
        @param request: DescribeWebLockStatusRequest
        @return: DescribeWebLockStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_web_lock_status_with_options(request, runtime)

    async def describe_web_lock_status_async(
        self,
        request: sas_20181203_models.DescribeWebLockStatusRequest,
    ) -> sas_20181203_models.DescribeWebLockStatusResponse:
        """
        @summary Queries the status of web tamper proofing.
        
        @param request: DescribeWebLockStatusRequest
        @return: DescribeWebLockStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_web_lock_status_with_options_async(request, runtime)

    def describe_web_lock_total_file_change_count_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWebLockTotalFileChangeCountResponse:
        """
        @summary Queries the number of times that the files protected by web tamper proofing are changed.
        
        @param request: DescribeWebLockTotalFileChangeCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWebLockTotalFileChangeCountResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeWebLockTotalFileChangeCount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWebLockTotalFileChangeCountResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_web_lock_total_file_change_count_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWebLockTotalFileChangeCountResponse:
        """
        @summary Queries the number of times that the files protected by web tamper proofing are changed.
        
        @param request: DescribeWebLockTotalFileChangeCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWebLockTotalFileChangeCountResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='DescribeWebLockTotalFileChangeCount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWebLockTotalFileChangeCountResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_web_lock_total_file_change_count(self) -> sas_20181203_models.DescribeWebLockTotalFileChangeCountResponse:
        """
        @summary Queries the number of times that the files protected by web tamper proofing are changed.
        
        @return: DescribeWebLockTotalFileChangeCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_web_lock_total_file_change_count_with_options(runtime)

    async def describe_web_lock_total_file_change_count_async(self) -> sas_20181203_models.DescribeWebLockTotalFileChangeCountResponse:
        """
        @summary Queries the number of times that the files protected by web tamper proofing are changed.
        
        @return: DescribeWebLockTotalFileChangeCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_web_lock_total_file_change_count_with_options_async(runtime)

    def describe_web_path_with_options(
        self,
        request: sas_20181203_models.DescribeWebPathRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWebPathResponse:
        """
        @summary Queries the custom web directories that are scanned based on the alerting feature.
        
        @param request: DescribeWebPathRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWebPathResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeWebPath',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWebPathResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_web_path_with_options_async(
        self,
        request: sas_20181203_models.DescribeWebPathRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWebPathResponse:
        """
        @summary Queries the custom web directories that are scanned based on the alerting feature.
        
        @param request: DescribeWebPathRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWebPathResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeWebPath',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWebPathResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_web_path(
        self,
        request: sas_20181203_models.DescribeWebPathRequest,
    ) -> sas_20181203_models.DescribeWebPathResponse:
        """
        @summary Queries the custom web directories that are scanned based on the alerting feature.
        
        @param request: DescribeWebPathRequest
        @return: DescribeWebPathResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_web_path_with_options(request, runtime)

    async def describe_web_path_async(
        self,
        request: sas_20181203_models.DescribeWebPathRequest,
    ) -> sas_20181203_models.DescribeWebPathResponse:
        """
        @summary Queries the custom web directories that are scanned based on the alerting feature.
        
        @param request: DescribeWebPathRequest
        @return: DescribeWebPathResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_web_path_with_options_async(request, runtime)

    def describe_white_list_asset_with_options(
        self,
        request: sas_20181203_models.DescribeWhiteListAssetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWhiteListAssetResponse:
        """
        @summary Queries the information about servers that can be added or are added to application whitelist policies.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
        
        @param request: DescribeWhiteListAssetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWhiteListAssetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.last_max_id):
            query['LastMaxId'] = request.last_max_id
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeWhiteListAsset',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWhiteListAssetResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_white_list_asset_with_options_async(
        self,
        request: sas_20181203_models.DescribeWhiteListAssetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWhiteListAssetResponse:
        """
        @summary Queries the information about servers that can be added or are added to application whitelist policies.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
        
        @param request: DescribeWhiteListAssetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWhiteListAssetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.last_max_id):
            query['LastMaxId'] = request.last_max_id
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeWhiteListAsset',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWhiteListAssetResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_white_list_asset(
        self,
        request: sas_20181203_models.DescribeWhiteListAssetRequest,
    ) -> sas_20181203_models.DescribeWhiteListAssetResponse:
        """
        @summary Queries the information about servers that can be added or are added to application whitelist policies.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
        
        @param request: DescribeWhiteListAssetRequest
        @return: DescribeWhiteListAssetResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_white_list_asset_with_options(request, runtime)

    async def describe_white_list_asset_async(
        self,
        request: sas_20181203_models.DescribeWhiteListAssetRequest,
    ) -> sas_20181203_models.DescribeWhiteListAssetResponse:
        """
        @summary Queries the information about servers that can be added or are added to application whitelist policies.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
        
        @param request: DescribeWhiteListAssetRequest
        @return: DescribeWhiteListAssetResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_white_list_asset_with_options_async(request, runtime)

    def describe_white_list_authorize_with_options(
        self,
        request: sas_20181203_models.DescribeWhiteListAuthorizeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWhiteListAuthorizeResponse:
        """
        @summary Queries the available quota for the application whitelist feature.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
        
        @param request: DescribeWhiteListAuthorizeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWhiteListAuthorizeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeWhiteListAuthorize',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWhiteListAuthorizeResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_white_list_authorize_with_options_async(
        self,
        request: sas_20181203_models.DescribeWhiteListAuthorizeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWhiteListAuthorizeResponse:
        """
        @summary Queries the available quota for the application whitelist feature.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
        
        @param request: DescribeWhiteListAuthorizeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWhiteListAuthorizeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeWhiteListAuthorize',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWhiteListAuthorizeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_white_list_authorize(
        self,
        request: sas_20181203_models.DescribeWhiteListAuthorizeRequest,
    ) -> sas_20181203_models.DescribeWhiteListAuthorizeResponse:
        """
        @summary Queries the available quota for the application whitelist feature.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
        
        @param request: DescribeWhiteListAuthorizeRequest
        @return: DescribeWhiteListAuthorizeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_white_list_authorize_with_options(request, runtime)

    async def describe_white_list_authorize_async(
        self,
        request: sas_20181203_models.DescribeWhiteListAuthorizeRequest,
    ) -> sas_20181203_models.DescribeWhiteListAuthorizeResponse:
        """
        @summary Queries the available quota for the application whitelist feature.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
        
        @param request: DescribeWhiteListAuthorizeRequest
        @return: DescribeWhiteListAuthorizeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_white_list_authorize_with_options_async(request, runtime)

    def describe_white_list_effective_assets_with_options(
        self,
        request: sas_20181203_models.DescribeWhiteListEffectiveAssetsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWhiteListEffectiveAssetsResponse:
        """
        @summary Queries the servers on which an application whitelist policy takes effect.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in-use, you can call this operation.
        
        @param request: DescribeWhiteListEffectiveAssetsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWhiteListEffectiveAssetsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.need_statistics):
            query['NeedStatistics'] = request.need_statistics
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeWhiteListEffectiveAssets',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWhiteListEffectiveAssetsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_white_list_effective_assets_with_options_async(
        self,
        request: sas_20181203_models.DescribeWhiteListEffectiveAssetsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWhiteListEffectiveAssetsResponse:
        """
        @summary Queries the servers on which an application whitelist policy takes effect.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in-use, you can call this operation.
        
        @param request: DescribeWhiteListEffectiveAssetsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWhiteListEffectiveAssetsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.need_statistics):
            query['NeedStatistics'] = request.need_statistics
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeWhiteListEffectiveAssets',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWhiteListEffectiveAssetsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_white_list_effective_assets(
        self,
        request: sas_20181203_models.DescribeWhiteListEffectiveAssetsRequest,
    ) -> sas_20181203_models.DescribeWhiteListEffectiveAssetsResponse:
        """
        @summary Queries the servers on which an application whitelist policy takes effect.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in-use, you can call this operation.
        
        @param request: DescribeWhiteListEffectiveAssetsRequest
        @return: DescribeWhiteListEffectiveAssetsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_white_list_effective_assets_with_options(request, runtime)

    async def describe_white_list_effective_assets_async(
        self,
        request: sas_20181203_models.DescribeWhiteListEffectiveAssetsRequest,
    ) -> sas_20181203_models.DescribeWhiteListEffectiveAssetsResponse:
        """
        @summary Queries the servers on which an application whitelist policy takes effect.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in-use, you can call this operation.
        
        @param request: DescribeWhiteListEffectiveAssetsRequest
        @return: DescribeWhiteListEffectiveAssetsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_white_list_effective_assets_with_options_async(request, runtime)

    def describe_white_list_process_with_options(
        self,
        request: sas_20181203_models.DescribeWhiteListProcessRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWhiteListProcessResponse:
        """
        @summary Queries the information about the processes that are detected in an application whitelist policy.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
        
        @param request: DescribeWhiteListProcessRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWhiteListProcessResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.desc):
            query['Desc'] = request.desc
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.order_by):
            query['OrderBy'] = request.order_by
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.process_name):
            query['ProcessName'] = request.process_name
        if not UtilClient.is_unset(request.process_type):
            query['ProcessType'] = request.process_type
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeWhiteListProcess',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWhiteListProcessResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_white_list_process_with_options_async(
        self,
        request: sas_20181203_models.DescribeWhiteListProcessRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWhiteListProcessResponse:
        """
        @summary Queries the information about the processes that are detected in an application whitelist policy.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
        
        @param request: DescribeWhiteListProcessRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWhiteListProcessResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.desc):
            query['Desc'] = request.desc
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.order_by):
            query['OrderBy'] = request.order_by
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.process_name):
            query['ProcessName'] = request.process_name
        if not UtilClient.is_unset(request.process_type):
            query['ProcessType'] = request.process_type
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeWhiteListProcess',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWhiteListProcessResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_white_list_process(
        self,
        request: sas_20181203_models.DescribeWhiteListProcessRequest,
    ) -> sas_20181203_models.DescribeWhiteListProcessResponse:
        """
        @summary Queries the information about the processes that are detected in an application whitelist policy.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
        
        @param request: DescribeWhiteListProcessRequest
        @return: DescribeWhiteListProcessResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_white_list_process_with_options(request, runtime)

    async def describe_white_list_process_async(
        self,
        request: sas_20181203_models.DescribeWhiteListProcessRequest,
    ) -> sas_20181203_models.DescribeWhiteListProcessResponse:
        """
        @summary Queries the information about the processes that are detected in an application whitelist policy.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
        
        @param request: DescribeWhiteListProcessRequest
        @return: DescribeWhiteListProcessResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_white_list_process_with_options_async(request, runtime)

    def describe_white_list_strategy_list_with_options(
        self,
        request: sas_20181203_models.DescribeWhiteListStrategyListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWhiteListStrategyListResponse:
        """
        @summary Queries a list of application whitelist policies.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
        
        @param request: DescribeWhiteListStrategyListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWhiteListStrategyListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.strategy_ids):
            query['StrategyIds'] = request.strategy_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeWhiteListStrategyList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWhiteListStrategyListResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_white_list_strategy_list_with_options_async(
        self,
        request: sas_20181203_models.DescribeWhiteListStrategyListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWhiteListStrategyListResponse:
        """
        @summary Queries a list of application whitelist policies.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
        
        @param request: DescribeWhiteListStrategyListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWhiteListStrategyListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.strategy_ids):
            query['StrategyIds'] = request.strategy_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeWhiteListStrategyList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWhiteListStrategyListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_white_list_strategy_list(
        self,
        request: sas_20181203_models.DescribeWhiteListStrategyListRequest,
    ) -> sas_20181203_models.DescribeWhiteListStrategyListResponse:
        """
        @summary Queries a list of application whitelist policies.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
        
        @param request: DescribeWhiteListStrategyListRequest
        @return: DescribeWhiteListStrategyListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_white_list_strategy_list_with_options(request, runtime)

    async def describe_white_list_strategy_list_async(
        self,
        request: sas_20181203_models.DescribeWhiteListStrategyListRequest,
    ) -> sas_20181203_models.DescribeWhiteListStrategyListResponse:
        """
        @summary Queries a list of application whitelist policies.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
        
        @param request: DescribeWhiteListStrategyListRequest
        @return: DescribeWhiteListStrategyListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_white_list_strategy_list_with_options_async(request, runtime)

    def describe_white_list_strategy_statistics_with_options(
        self,
        request: sas_20181203_models.DescribeWhiteListStrategyStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWhiteListStrategyStatisticsResponse:
        """
        @summary Queries the statistics of application whitelist policies.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
        
        @param request: DescribeWhiteListStrategyStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWhiteListStrategyStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.strategy_ids):
            query['StrategyIds'] = request.strategy_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeWhiteListStrategyStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWhiteListStrategyStatisticsResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_white_list_strategy_statistics_with_options_async(
        self,
        request: sas_20181203_models.DescribeWhiteListStrategyStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWhiteListStrategyStatisticsResponse:
        """
        @summary Queries the statistics of application whitelist policies.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
        
        @param request: DescribeWhiteListStrategyStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWhiteListStrategyStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.strategy_ids):
            query['StrategyIds'] = request.strategy_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeWhiteListStrategyStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWhiteListStrategyStatisticsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_white_list_strategy_statistics(
        self,
        request: sas_20181203_models.DescribeWhiteListStrategyStatisticsRequest,
    ) -> sas_20181203_models.DescribeWhiteListStrategyStatisticsResponse:
        """
        @summary Queries the statistics of application whitelist policies.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
        
        @param request: DescribeWhiteListStrategyStatisticsRequest
        @return: DescribeWhiteListStrategyStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_white_list_strategy_statistics_with_options(request, runtime)

    async def describe_white_list_strategy_statistics_async(
        self,
        request: sas_20181203_models.DescribeWhiteListStrategyStatisticsRequest,
    ) -> sas_20181203_models.DescribeWhiteListStrategyStatisticsResponse:
        """
        @summary Queries the statistics of application whitelist policies.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
        
        @param request: DescribeWhiteListStrategyStatisticsRequest
        @return: DescribeWhiteListStrategyStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_white_list_strategy_statistics_with_options_async(request, runtime)

    def describe_white_list_strategy_uuid_count_with_options(
        self,
        request: sas_20181203_models.DescribeWhiteListStrategyUuidCountRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWhiteListStrategyUuidCountResponse:
        """
        @summary Queries the number of the servers on which an application whitelist policy takes effect.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in-use, you can call this operation.
        
        @param request: DescribeWhiteListStrategyUuidCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWhiteListStrategyUuidCountResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeWhiteListStrategyUuidCount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWhiteListStrategyUuidCountResponse(),
            self.call_api(params, req, runtime)
        )

    async def describe_white_list_strategy_uuid_count_with_options_async(
        self,
        request: sas_20181203_models.DescribeWhiteListStrategyUuidCountRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DescribeWhiteListStrategyUuidCountResponse:
        """
        @summary Queries the number of the servers on which an application whitelist policy takes effect.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in-use, you can call this operation.
        
        @param request: DescribeWhiteListStrategyUuidCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DescribeWhiteListStrategyUuidCountResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DescribeWhiteListStrategyUuidCount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DescribeWhiteListStrategyUuidCountResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def describe_white_list_strategy_uuid_count(
        self,
        request: sas_20181203_models.DescribeWhiteListStrategyUuidCountRequest,
    ) -> sas_20181203_models.DescribeWhiteListStrategyUuidCountResponse:
        """
        @summary Queries the number of the servers on which an application whitelist policy takes effect.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in-use, you can call this operation.
        
        @param request: DescribeWhiteListStrategyUuidCountRequest
        @return: DescribeWhiteListStrategyUuidCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.describe_white_list_strategy_uuid_count_with_options(request, runtime)

    async def describe_white_list_strategy_uuid_count_async(
        self,
        request: sas_20181203_models.DescribeWhiteListStrategyUuidCountRequest,
    ) -> sas_20181203_models.DescribeWhiteListStrategyUuidCountResponse:
        """
        @summary Queries the number of the servers on which an application whitelist policy takes effect.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in-use, you can call this operation.
        
        @param request: DescribeWhiteListStrategyUuidCountRequest
        @return: DescribeWhiteListStrategyUuidCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.describe_white_list_strategy_uuid_count_with_options_async(request, runtime)

    def ding_talk_online_test_with_options(
        self,
        request: sas_20181203_models.DingTalkOnlineTestRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DingTalkOnlineTestResponse:
        """
        @summary Tests whether DingTalk notification configurations are valid.
        
        @param request: DingTalkOnlineTestRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DingTalkOnlineTestResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DingTalkOnlineTest',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DingTalkOnlineTestResponse(),
            self.call_api(params, req, runtime)
        )

    async def ding_talk_online_test_with_options_async(
        self,
        request: sas_20181203_models.DingTalkOnlineTestRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DingTalkOnlineTestResponse:
        """
        @summary Tests whether DingTalk notification configurations are valid.
        
        @param request: DingTalkOnlineTestRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DingTalkOnlineTestResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DingTalkOnlineTest',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DingTalkOnlineTestResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def ding_talk_online_test(
        self,
        request: sas_20181203_models.DingTalkOnlineTestRequest,
    ) -> sas_20181203_models.DingTalkOnlineTestResponse:
        """
        @summary Tests whether DingTalk notification configurations are valid.
        
        @param request: DingTalkOnlineTestRequest
        @return: DingTalkOnlineTestResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.ding_talk_online_test_with_options(request, runtime)

    async def ding_talk_online_test_async(
        self,
        request: sas_20181203_models.DingTalkOnlineTestRequest,
    ) -> sas_20181203_models.DingTalkOnlineTestResponse:
        """
        @summary Tests whether DingTalk notification configurations are valid.
        
        @param request: DingTalkOnlineTestRequest
        @return: DingTalkOnlineTestResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.ding_talk_online_test_with_options_async(request, runtime)

    def disable_brute_force_record_with_options(
        self,
        request: sas_20181203_models.DisableBruteForceRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DisableBruteForceRecordResponse:
        """
        @summary Disables an IP address blocking policy that is in effect.
        
        @param request: DisableBruteForceRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DisableBruteForceRecordResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.block_ip):
            query['BlockIp'] = request.block_ip
        if not UtilClient.is_unset(request.bound):
            query['Bound'] = request.bound
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.port):
            query['Port'] = request.port
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DisableBruteForceRecord',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DisableBruteForceRecordResponse(),
            self.call_api(params, req, runtime)
        )

    async def disable_brute_force_record_with_options_async(
        self,
        request: sas_20181203_models.DisableBruteForceRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DisableBruteForceRecordResponse:
        """
        @summary Disables an IP address blocking policy that is in effect.
        
        @param request: DisableBruteForceRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DisableBruteForceRecordResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.block_ip):
            query['BlockIp'] = request.block_ip
        if not UtilClient.is_unset(request.bound):
            query['Bound'] = request.bound
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.port):
            query['Port'] = request.port
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DisableBruteForceRecord',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DisableBruteForceRecordResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def disable_brute_force_record(
        self,
        request: sas_20181203_models.DisableBruteForceRecordRequest,
    ) -> sas_20181203_models.DisableBruteForceRecordResponse:
        """
        @summary Disables an IP address blocking policy that is in effect.
        
        @param request: DisableBruteForceRecordRequest
        @return: DisableBruteForceRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.disable_brute_force_record_with_options(request, runtime)

    async def disable_brute_force_record_async(
        self,
        request: sas_20181203_models.DisableBruteForceRecordRequest,
    ) -> sas_20181203_models.DisableBruteForceRecordResponse:
        """
        @summary Disables an IP address blocking policy that is in effect.
        
        @param request: DisableBruteForceRecordRequest
        @return: DisableBruteForceRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.disable_brute_force_record_with_options_async(request, runtime)

    def disable_custom_block_record_with_options(
        self,
        request: sas_20181203_models.DisableCustomBlockRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DisableCustomBlockRecordResponse:
        """
        @summary Disables a custom IP address blocking policy for servers.
        
        @param request: DisableCustomBlockRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DisableCustomBlockRecordResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.block_ip):
            query['BlockIp'] = request.block_ip
        if not UtilClient.is_unset(request.bound):
            query['Bound'] = request.bound
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DisableCustomBlockRecord',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DisableCustomBlockRecordResponse(),
            self.call_api(params, req, runtime)
        )

    async def disable_custom_block_record_with_options_async(
        self,
        request: sas_20181203_models.DisableCustomBlockRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.DisableCustomBlockRecordResponse:
        """
        @summary Disables a custom IP address blocking policy for servers.
        
        @param request: DisableCustomBlockRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DisableCustomBlockRecordResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.block_ip):
            query['BlockIp'] = request.block_ip
        if not UtilClient.is_unset(request.bound):
            query['Bound'] = request.bound
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DisableCustomBlockRecord',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.DisableCustomBlockRecordResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def disable_custom_block_record(
        self,
        request: sas_20181203_models.DisableCustomBlockRecordRequest,
    ) -> sas_20181203_models.DisableCustomBlockRecordResponse:
        """
        @summary Disables a custom IP address blocking policy for servers.
        
        @param request: DisableCustomBlockRecordRequest
        @return: DisableCustomBlockRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.disable_custom_block_record_with_options(request, runtime)

    async def disable_custom_block_record_async(
        self,
        request: sas_20181203_models.DisableCustomBlockRecordRequest,
    ) -> sas_20181203_models.DisableCustomBlockRecordResponse:
        """
        @summary Disables a custom IP address blocking policy for servers.
        
        @param request: DisableCustomBlockRecordRequest
        @return: DisableCustomBlockRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.disable_custom_block_record_with_options_async(request, runtime)

    def enable_brute_force_record_with_options(
        self,
        request: sas_20181203_models.EnableBruteForceRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.EnableBruteForceRecordResponse:
        """
        @summary Enables an IP address blocking policy for a specified server.
        
        @param request: EnableBruteForceRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: EnableBruteForceRecordResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.block_ip):
            query['BlockIp'] = request.block_ip
        if not UtilClient.is_unset(request.bound):
            query['Bound'] = request.bound
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.port):
            query['Port'] = request.port
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='EnableBruteForceRecord',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.EnableBruteForceRecordResponse(),
            self.call_api(params, req, runtime)
        )

    async def enable_brute_force_record_with_options_async(
        self,
        request: sas_20181203_models.EnableBruteForceRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.EnableBruteForceRecordResponse:
        """
        @summary Enables an IP address blocking policy for a specified server.
        
        @param request: EnableBruteForceRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: EnableBruteForceRecordResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.block_ip):
            query['BlockIp'] = request.block_ip
        if not UtilClient.is_unset(request.bound):
            query['Bound'] = request.bound
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.port):
            query['Port'] = request.port
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='EnableBruteForceRecord',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.EnableBruteForceRecordResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def enable_brute_force_record(
        self,
        request: sas_20181203_models.EnableBruteForceRecordRequest,
    ) -> sas_20181203_models.EnableBruteForceRecordResponse:
        """
        @summary Enables an IP address blocking policy for a specified server.
        
        @param request: EnableBruteForceRecordRequest
        @return: EnableBruteForceRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.enable_brute_force_record_with_options(request, runtime)

    async def enable_brute_force_record_async(
        self,
        request: sas_20181203_models.EnableBruteForceRecordRequest,
    ) -> sas_20181203_models.EnableBruteForceRecordResponse:
        """
        @summary Enables an IP address blocking policy for a specified server.
        
        @param request: EnableBruteForceRecordRequest
        @return: EnableBruteForceRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.enable_brute_force_record_with_options_async(request, runtime)

    def enable_custom_block_record_with_options(
        self,
        request: sas_20181203_models.EnableCustomBlockRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.EnableCustomBlockRecordResponse:
        """
        @summary Enables a custom IP address blocking policy.
        
        @param request: EnableCustomBlockRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: EnableCustomBlockRecordResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.block_ip):
            query['BlockIp'] = request.block_ip
        if not UtilClient.is_unset(request.bound):
            query['Bound'] = request.bound
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='EnableCustomBlockRecord',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.EnableCustomBlockRecordResponse(),
            self.call_api(params, req, runtime)
        )

    async def enable_custom_block_record_with_options_async(
        self,
        request: sas_20181203_models.EnableCustomBlockRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.EnableCustomBlockRecordResponse:
        """
        @summary Enables a custom IP address blocking policy.
        
        @param request: EnableCustomBlockRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: EnableCustomBlockRecordResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.block_ip):
            query['BlockIp'] = request.block_ip
        if not UtilClient.is_unset(request.bound):
            query['Bound'] = request.bound
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='EnableCustomBlockRecord',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.EnableCustomBlockRecordResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def enable_custom_block_record(
        self,
        request: sas_20181203_models.EnableCustomBlockRecordRequest,
    ) -> sas_20181203_models.EnableCustomBlockRecordResponse:
        """
        @summary Enables a custom IP address blocking policy.
        
        @param request: EnableCustomBlockRecordRequest
        @return: EnableCustomBlockRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.enable_custom_block_record_with_options(request, runtime)

    async def enable_custom_block_record_async(
        self,
        request: sas_20181203_models.EnableCustomBlockRecordRequest,
    ) -> sas_20181203_models.EnableCustomBlockRecordResponse:
        """
        @summary Enables a custom IP address blocking policy.
        
        @param request: EnableCustomBlockRecordRequest
        @return: EnableCustomBlockRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.enable_custom_block_record_with_options_async(request, runtime)

    def enable_custom_instance_block_record_with_options(
        self,
        request: sas_20181203_models.EnableCustomInstanceBlockRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.EnableCustomInstanceBlockRecordResponse:
        """
        @summary Enables a custom rule for an instance.
        
        @param request: EnableCustomInstanceBlockRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: EnableCustomInstanceBlockRecordResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.block_ip):
            query['BlockIp'] = request.block_ip
        if not UtilClient.is_unset(request.bound):
            query['Bound'] = request.bound
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='EnableCustomInstanceBlockRecord',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.EnableCustomInstanceBlockRecordResponse(),
            self.call_api(params, req, runtime)
        )

    async def enable_custom_instance_block_record_with_options_async(
        self,
        request: sas_20181203_models.EnableCustomInstanceBlockRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.EnableCustomInstanceBlockRecordResponse:
        """
        @summary Enables a custom rule for an instance.
        
        @param request: EnableCustomInstanceBlockRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: EnableCustomInstanceBlockRecordResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.block_ip):
            query['BlockIp'] = request.block_ip
        if not UtilClient.is_unset(request.bound):
            query['Bound'] = request.bound
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='EnableCustomInstanceBlockRecord',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.EnableCustomInstanceBlockRecordResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def enable_custom_instance_block_record(
        self,
        request: sas_20181203_models.EnableCustomInstanceBlockRecordRequest,
    ) -> sas_20181203_models.EnableCustomInstanceBlockRecordResponse:
        """
        @summary Enables a custom rule for an instance.
        
        @param request: EnableCustomInstanceBlockRecordRequest
        @return: EnableCustomInstanceBlockRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.enable_custom_instance_block_record_with_options(request, runtime)

    async def enable_custom_instance_block_record_async(
        self,
        request: sas_20181203_models.EnableCustomInstanceBlockRecordRequest,
    ) -> sas_20181203_models.EnableCustomInstanceBlockRecordResponse:
        """
        @summary Enables a custom rule for an instance.
        
        @param request: EnableCustomInstanceBlockRecordRequest
        @return: EnableCustomInstanceBlockRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.enable_custom_instance_block_record_with_options_async(request, runtime)

    def enable_service_access_resource_directory_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.EnableServiceAccessResourceDirectoryResponse:
        """
        @summary Enable the multi-account management feature of Security Center.
        
        @description You must use the management account of your resource directory or a delegated administrator account of Security Center to call this operation.
        
        @param request: EnableServiceAccessResourceDirectoryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: EnableServiceAccessResourceDirectoryResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='EnableServiceAccessResourceDirectory',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.EnableServiceAccessResourceDirectoryResponse(),
            self.call_api(params, req, runtime)
        )

    async def enable_service_access_resource_directory_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.EnableServiceAccessResourceDirectoryResponse:
        """
        @summary Enable the multi-account management feature of Security Center.
        
        @description You must use the management account of your resource directory or a delegated administrator account of Security Center to call this operation.
        
        @param request: EnableServiceAccessResourceDirectoryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: EnableServiceAccessResourceDirectoryResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='EnableServiceAccessResourceDirectory',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.EnableServiceAccessResourceDirectoryResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def enable_service_access_resource_directory(self) -> sas_20181203_models.EnableServiceAccessResourceDirectoryResponse:
        """
        @summary Enable the multi-account management feature of Security Center.
        
        @description You must use the management account of your resource directory or a delegated administrator account of Security Center to call this operation.
        
        @return: EnableServiceAccessResourceDirectoryResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.enable_service_access_resource_directory_with_options(runtime)

    async def enable_service_access_resource_directory_async(self) -> sas_20181203_models.EnableServiceAccessResourceDirectoryResponse:
        """
        @summary Enable the multi-account management feature of Security Center.
        
        @description You must use the management account of your resource directory or a delegated administrator account of Security Center to call this operation.
        
        @return: EnableServiceAccessResourceDirectoryResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.enable_service_access_resource_directory_with_options_async(runtime)

    def exec_strategy_with_options(
        self,
        request: sas_20181203_models.ExecStrategyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ExecStrategyResponse:
        """
        @summary Performs a baseline check on servers to which a specified baseline check policy is applied.
        
        @param request: ExecStrategyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ExecStrategyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.exec_action):
            query['ExecAction'] = request.exec_action
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ExecStrategy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ExecStrategyResponse(),
            self.call_api(params, req, runtime)
        )

    async def exec_strategy_with_options_async(
        self,
        request: sas_20181203_models.ExecStrategyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ExecStrategyResponse:
        """
        @summary Performs a baseline check on servers to which a specified baseline check policy is applied.
        
        @param request: ExecStrategyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ExecStrategyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.exec_action):
            query['ExecAction'] = request.exec_action
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ExecStrategy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ExecStrategyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def exec_strategy(
        self,
        request: sas_20181203_models.ExecStrategyRequest,
    ) -> sas_20181203_models.ExecStrategyResponse:
        """
        @summary Performs a baseline check on servers to which a specified baseline check policy is applied.
        
        @param request: ExecStrategyRequest
        @return: ExecStrategyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.exec_strategy_with_options(request, runtime)

    async def exec_strategy_async(
        self,
        request: sas_20181203_models.ExecStrategyRequest,
    ) -> sas_20181203_models.ExecStrategyResponse:
        """
        @summary Performs a baseline check on servers to which a specified baseline check policy is applied.
        
        @param request: ExecStrategyRequest
        @return: ExecStrategyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.exec_strategy_with_options_async(request, runtime)

    def export_customize_report_with_options(
        self,
        request: sas_20181203_models.ExportCustomizeReportRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ExportCustomizeReportResponse:
        """
        @summary Exports a security report.
        
        @param request: ExportCustomizeReportRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ExportCustomizeReportResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.export_type):
            query['ExportType'] = request.export_type
        if not UtilClient.is_unset(request.report_id):
            query['ReportId'] = request.report_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ExportCustomizeReport',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ExportCustomizeReportResponse(),
            self.call_api(params, req, runtime)
        )

    async def export_customize_report_with_options_async(
        self,
        request: sas_20181203_models.ExportCustomizeReportRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ExportCustomizeReportResponse:
        """
        @summary Exports a security report.
        
        @param request: ExportCustomizeReportRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ExportCustomizeReportResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.export_type):
            query['ExportType'] = request.export_type
        if not UtilClient.is_unset(request.report_id):
            query['ReportId'] = request.report_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ExportCustomizeReport',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ExportCustomizeReportResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def export_customize_report(
        self,
        request: sas_20181203_models.ExportCustomizeReportRequest,
    ) -> sas_20181203_models.ExportCustomizeReportResponse:
        """
        @summary Exports a security report.
        
        @param request: ExportCustomizeReportRequest
        @return: ExportCustomizeReportResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.export_customize_report_with_options(request, runtime)

    async def export_customize_report_async(
        self,
        request: sas_20181203_models.ExportCustomizeReportRequest,
    ) -> sas_20181203_models.ExportCustomizeReportResponse:
        """
        @summary Exports a security report.
        
        @param request: ExportCustomizeReportRequest
        @return: ExportCustomizeReportResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.export_customize_report_with_options_async(request, runtime)

    def export_record_with_options(
        self,
        request: sas_20181203_models.ExportRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ExportRecordResponse:
        """
        @summary Exports the check results on the Host, Cloud Platform Configuration Assessment, Image Security, Attack Awareness, and AK leak detection pages to Excel files.
        
        @description You can call the operation to export the following check result lists:
        The list of servers on the Host page.
        The lists of image system vulnerabilities, image application vulnerabilities, image baseline check results, and malicious image samples on the Image Security page.
        The list of attack analysis data on the Attack Awareness page.
        The list of check results for AccessKey pair leaks on the AK leak detection page.
        
        @param request: ExportRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ExportRecordResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.export_file_type):
            query['ExportFileType'] = request.export_file_type
        if not UtilClient.is_unset(request.export_type):
            query['ExportType'] = request.export_type
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.params):
            query['Params'] = request.params
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ExportRecord',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ExportRecordResponse(),
            self.call_api(params, req, runtime)
        )

    async def export_record_with_options_async(
        self,
        request: sas_20181203_models.ExportRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ExportRecordResponse:
        """
        @summary Exports the check results on the Host, Cloud Platform Configuration Assessment, Image Security, Attack Awareness, and AK leak detection pages to Excel files.
        
        @description You can call the operation to export the following check result lists:
        The list of servers on the Host page.
        The lists of image system vulnerabilities, image application vulnerabilities, image baseline check results, and malicious image samples on the Image Security page.
        The list of attack analysis data on the Attack Awareness page.
        The list of check results for AccessKey pair leaks on the AK leak detection page.
        
        @param request: ExportRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ExportRecordResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.export_file_type):
            query['ExportFileType'] = request.export_file_type
        if not UtilClient.is_unset(request.export_type):
            query['ExportType'] = request.export_type
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.params):
            query['Params'] = request.params
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ExportRecord',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ExportRecordResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def export_record(
        self,
        request: sas_20181203_models.ExportRecordRequest,
    ) -> sas_20181203_models.ExportRecordResponse:
        """
        @summary Exports the check results on the Host, Cloud Platform Configuration Assessment, Image Security, Attack Awareness, and AK leak detection pages to Excel files.
        
        @description You can call the operation to export the following check result lists:
        The list of servers on the Host page.
        The lists of image system vulnerabilities, image application vulnerabilities, image baseline check results, and malicious image samples on the Image Security page.
        The list of attack analysis data on the Attack Awareness page.
        The list of check results for AccessKey pair leaks on the AK leak detection page.
        
        @param request: ExportRecordRequest
        @return: ExportRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.export_record_with_options(request, runtime)

    async def export_record_async(
        self,
        request: sas_20181203_models.ExportRecordRequest,
    ) -> sas_20181203_models.ExportRecordResponse:
        """
        @summary Exports the check results on the Host, Cloud Platform Configuration Assessment, Image Security, Attack Awareness, and AK leak detection pages to Excel files.
        
        @description You can call the operation to export the following check result lists:
        The list of servers on the Host page.
        The lists of image system vulnerabilities, image application vulnerabilities, image baseline check results, and malicious image samples on the Image Security page.
        The list of attack analysis data on the Attack Awareness page.
        The list of check results for AccessKey pair leaks on the AK leak detection page.
        
        @param request: ExportRecordRequest
        @return: ExportRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.export_record_with_options_async(request, runtime)

    def export_susp_events_with_options(
        self,
        request: sas_20181203_models.ExportSuspEventsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ExportSuspEventsResponse:
        """
        @summary Exports the information about exceptions to a file.
        
        @param request: ExportSuspEventsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ExportSuspEventsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.assets_type_list):
            query['AssetsTypeList'] = request.assets_type_list
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.container_field_name):
            query['ContainerFieldName'] = request.container_field_name
        if not UtilClient.is_unset(request.container_field_value):
            query['ContainerFieldValue'] = request.container_field_value
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.dealed):
            query['Dealed'] = request.dealed
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.levels):
            query['Levels'] = request.levels
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.operate_error_code_list):
            query['OperateErrorCodeList'] = request.operate_error_code_list
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.parent_event_types):
            query['ParentEventTypes'] = request.parent_event_types
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        if not UtilClient.is_unset(request.time_end):
            query['TimeEnd'] = request.time_end
        if not UtilClient.is_unset(request.time_start):
            query['TimeStart'] = request.time_start
        if not UtilClient.is_unset(request.unique_info):
            query['UniqueInfo'] = request.unique_info
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ExportSuspEvents',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ExportSuspEventsResponse(),
            self.call_api(params, req, runtime)
        )

    async def export_susp_events_with_options_async(
        self,
        request: sas_20181203_models.ExportSuspEventsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ExportSuspEventsResponse:
        """
        @summary Exports the information about exceptions to a file.
        
        @param request: ExportSuspEventsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ExportSuspEventsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.assets_type_list):
            query['AssetsTypeList'] = request.assets_type_list
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.container_field_name):
            query['ContainerFieldName'] = request.container_field_name
        if not UtilClient.is_unset(request.container_field_value):
            query['ContainerFieldValue'] = request.container_field_value
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.dealed):
            query['Dealed'] = request.dealed
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.levels):
            query['Levels'] = request.levels
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.operate_error_code_list):
            query['OperateErrorCodeList'] = request.operate_error_code_list
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.parent_event_types):
            query['ParentEventTypes'] = request.parent_event_types
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        if not UtilClient.is_unset(request.time_end):
            query['TimeEnd'] = request.time_end
        if not UtilClient.is_unset(request.time_start):
            query['TimeStart'] = request.time_start
        if not UtilClient.is_unset(request.unique_info):
            query['UniqueInfo'] = request.unique_info
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ExportSuspEvents',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ExportSuspEventsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def export_susp_events(
        self,
        request: sas_20181203_models.ExportSuspEventsRequest,
    ) -> sas_20181203_models.ExportSuspEventsResponse:
        """
        @summary Exports the information about exceptions to a file.
        
        @param request: ExportSuspEventsRequest
        @return: ExportSuspEventsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.export_susp_events_with_options(request, runtime)

    async def export_susp_events_async(
        self,
        request: sas_20181203_models.ExportSuspEventsRequest,
    ) -> sas_20181203_models.ExportSuspEventsResponse:
        """
        @summary Exports the information about exceptions to a file.
        
        @param request: ExportSuspEventsRequest
        @return: ExportSuspEventsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.export_susp_events_with_options_async(request, runtime)

    def export_vul_with_options(
        self,
        request: sas_20181203_models.ExportVulRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ExportVulResponse:
        """
        @summary Exports vulnerabilities.
        
        @description You can call the ExportVul operation to export the following types of vulnerabilities: Linux software vulnerabilities, Windows system vulnerabilities, Web-CMS vulnerabilities, application vulnerabilities, and urgent vulnerabilities.
        You can use this operation together with the DescribeVulExportInfo operation. After you call the ExportVul operation to create a vulnerability export task, you can call the DescribeVulExportInfo operation to query the progress of the task by specifying the ID of the task.
        ### Limits
        You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
        
        @param request: ExportVulRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ExportVulResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.alias_name):
            query['AliasName'] = request.alias_name
        if not UtilClient.is_unset(request.attach_types):
            query['AttachTypes'] = request.attach_types
        if not UtilClient.is_unset(request.container_name):
            query['ContainerName'] = request.container_name
        if not UtilClient.is_unset(request.create_ts_end):
            query['CreateTsEnd'] = request.create_ts_end
        if not UtilClient.is_unset(request.create_ts_start):
            query['CreateTsStart'] = request.create_ts_start
        if not UtilClient.is_unset(request.cve_id):
            query['CveId'] = request.cve_id
        if not UtilClient.is_unset(request.dealed):
            query['Dealed'] = request.dealed
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.image_name):
            query['ImageName'] = request.image_name
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.necessity):
            query['Necessity'] = request.necessity
        if not UtilClient.is_unset(request.path):
            query['Path'] = request.path
        if not UtilClient.is_unset(request.rasp_defend):
            query['RaspDefend'] = request.rasp_defend
        if not UtilClient.is_unset(request.search_tags):
            query['SearchTags'] = request.search_tags
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        if not UtilClient.is_unset(request.vpc_instance_ids):
            query['VpcInstanceIds'] = request.vpc_instance_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ExportVul',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ExportVulResponse(),
            self.call_api(params, req, runtime)
        )

    async def export_vul_with_options_async(
        self,
        request: sas_20181203_models.ExportVulRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ExportVulResponse:
        """
        @summary Exports vulnerabilities.
        
        @description You can call the ExportVul operation to export the following types of vulnerabilities: Linux software vulnerabilities, Windows system vulnerabilities, Web-CMS vulnerabilities, application vulnerabilities, and urgent vulnerabilities.
        You can use this operation together with the DescribeVulExportInfo operation. After you call the ExportVul operation to create a vulnerability export task, you can call the DescribeVulExportInfo operation to query the progress of the task by specifying the ID of the task.
        ### Limits
        You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
        
        @param request: ExportVulRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ExportVulResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.alias_name):
            query['AliasName'] = request.alias_name
        if not UtilClient.is_unset(request.attach_types):
            query['AttachTypes'] = request.attach_types
        if not UtilClient.is_unset(request.container_name):
            query['ContainerName'] = request.container_name
        if not UtilClient.is_unset(request.create_ts_end):
            query['CreateTsEnd'] = request.create_ts_end
        if not UtilClient.is_unset(request.create_ts_start):
            query['CreateTsStart'] = request.create_ts_start
        if not UtilClient.is_unset(request.cve_id):
            query['CveId'] = request.cve_id
        if not UtilClient.is_unset(request.dealed):
            query['Dealed'] = request.dealed
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.image_name):
            query['ImageName'] = request.image_name
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.necessity):
            query['Necessity'] = request.necessity
        if not UtilClient.is_unset(request.path):
            query['Path'] = request.path
        if not UtilClient.is_unset(request.rasp_defend):
            query['RaspDefend'] = request.rasp_defend
        if not UtilClient.is_unset(request.search_tags):
            query['SearchTags'] = request.search_tags
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        if not UtilClient.is_unset(request.vpc_instance_ids):
            query['VpcInstanceIds'] = request.vpc_instance_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ExportVul',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ExportVulResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def export_vul(
        self,
        request: sas_20181203_models.ExportVulRequest,
    ) -> sas_20181203_models.ExportVulResponse:
        """
        @summary Exports vulnerabilities.
        
        @description You can call the ExportVul operation to export the following types of vulnerabilities: Linux software vulnerabilities, Windows system vulnerabilities, Web-CMS vulnerabilities, application vulnerabilities, and urgent vulnerabilities.
        You can use this operation together with the DescribeVulExportInfo operation. After you call the ExportVul operation to create a vulnerability export task, you can call the DescribeVulExportInfo operation to query the progress of the task by specifying the ID of the task.
        ### Limits
        You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
        
        @param request: ExportVulRequest
        @return: ExportVulResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.export_vul_with_options(request, runtime)

    async def export_vul_async(
        self,
        request: sas_20181203_models.ExportVulRequest,
    ) -> sas_20181203_models.ExportVulResponse:
        """
        @summary Exports vulnerabilities.
        
        @description You can call the ExportVul operation to export the following types of vulnerabilities: Linux software vulnerabilities, Windows system vulnerabilities, Web-CMS vulnerabilities, application vulnerabilities, and urgent vulnerabilities.
        You can use this operation together with the DescribeVulExportInfo operation. After you call the ExportVul operation to create a vulnerability export task, you can call the DescribeVulExportInfo operation to query the progress of the task by specifying the ID of the task.
        ### Limits
        You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
        
        @param request: ExportVulRequest
        @return: ExportVulResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.export_vul_with_options_async(request, runtime)

    def export_warning_with_options(
        self,
        request: sas_20181203_models.ExportWarningRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ExportWarningResponse:
        """
        @deprecated OpenAPI ExportWarning is deprecated, please use Sas::2018-12-03::ExportRecord instead.
        
        @summary Exports baseline check results.
        
        @param request: ExportWarningRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ExportWarningResponse
        Deprecated
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.dealed):
            query['Dealed'] = request.dealed
        if not UtilClient.is_unset(request.export_type):
            query['ExportType'] = request.export_type
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.is_cleartext_pwd):
            query['IsCleartextPwd'] = request.is_cleartext_pwd
        if not UtilClient.is_unset(request.is_summary_export):
            query['IsSummaryExport'] = request.is_summary_export
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.risk_ids):
            query['RiskIds'] = request.risk_ids
        if not UtilClient.is_unset(request.risk_levels):
            query['RiskLevels'] = request.risk_levels
        if not UtilClient.is_unset(request.risk_name):
            query['RiskName'] = request.risk_name
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.status_list):
            query['StatusList'] = request.status_list
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        if not UtilClient.is_unset(request.sub_type_names):
            query['SubTypeNames'] = request.sub_type_names
        if not UtilClient.is_unset(request.type_name):
            query['TypeName'] = request.type_name
        if not UtilClient.is_unset(request.type_names):
            query['TypeNames'] = request.type_names
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ExportWarning',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ExportWarningResponse(),
            self.call_api(params, req, runtime)
        )

    async def export_warning_with_options_async(
        self,
        request: sas_20181203_models.ExportWarningRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ExportWarningResponse:
        """
        @deprecated OpenAPI ExportWarning is deprecated, please use Sas::2018-12-03::ExportRecord instead.
        
        @summary Exports baseline check results.
        
        @param request: ExportWarningRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ExportWarningResponse
        Deprecated
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.dealed):
            query['Dealed'] = request.dealed
        if not UtilClient.is_unset(request.export_type):
            query['ExportType'] = request.export_type
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.is_cleartext_pwd):
            query['IsCleartextPwd'] = request.is_cleartext_pwd
        if not UtilClient.is_unset(request.is_summary_export):
            query['IsSummaryExport'] = request.is_summary_export
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.risk_ids):
            query['RiskIds'] = request.risk_ids
        if not UtilClient.is_unset(request.risk_levels):
            query['RiskLevels'] = request.risk_levels
        if not UtilClient.is_unset(request.risk_name):
            query['RiskName'] = request.risk_name
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.status_list):
            query['StatusList'] = request.status_list
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        if not UtilClient.is_unset(request.sub_type_names):
            query['SubTypeNames'] = request.sub_type_names
        if not UtilClient.is_unset(request.type_name):
            query['TypeName'] = request.type_name
        if not UtilClient.is_unset(request.type_names):
            query['TypeNames'] = request.type_names
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ExportWarning',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ExportWarningResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def export_warning(
        self,
        request: sas_20181203_models.ExportWarningRequest,
    ) -> sas_20181203_models.ExportWarningResponse:
        """
        @deprecated OpenAPI ExportWarning is deprecated, please use Sas::2018-12-03::ExportRecord instead.
        
        @summary Exports baseline check results.
        
        @param request: ExportWarningRequest
        @return: ExportWarningResponse
        Deprecated
        """
        runtime = util_models.RuntimeOptions()
        return self.export_warning_with_options(request, runtime)

    async def export_warning_async(
        self,
        request: sas_20181203_models.ExportWarningRequest,
    ) -> sas_20181203_models.ExportWarningResponse:
        """
        @deprecated OpenAPI ExportWarning is deprecated, please use Sas::2018-12-03::ExportRecord instead.
        
        @summary Exports baseline check results.
        
        @param request: ExportWarningRequest
        @return: ExportWarningResponse
        Deprecated
        """
        runtime = util_models.RuntimeOptions()
        return await self.export_warning_with_options_async(request, runtime)

    def find_container_network_connect_with_options(
        self,
        tmp_req: sas_20181203_models.FindContainerNetworkConnectRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.FindContainerNetworkConnectResponse:
        """
        @summary 容器网络连接
        
        @param tmp_req: FindContainerNetworkConnectRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: FindContainerNetworkConnectResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.FindContainerNetworkConnectShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.dst_node):
            request.dst_node_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.dst_node, 'DstNode', 'json')
        if not UtilClient.is_unset(tmp_req.src_node):
            request.src_node_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.src_node, 'SrcNode', 'json')
        query = {}
        if not UtilClient.is_unset(request.criteria_type):
            query['CriteriaType'] = request.criteria_type
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.dst_node_shrink):
            query['DstNode'] = request.dst_node_shrink
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.src_node_shrink):
            query['SrcNode'] = request.src_node_shrink
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='FindContainerNetworkConnect',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.FindContainerNetworkConnectResponse(),
            self.call_api(params, req, runtime)
        )

    async def find_container_network_connect_with_options_async(
        self,
        tmp_req: sas_20181203_models.FindContainerNetworkConnectRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.FindContainerNetworkConnectResponse:
        """
        @summary 容器网络连接
        
        @param tmp_req: FindContainerNetworkConnectRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: FindContainerNetworkConnectResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.FindContainerNetworkConnectShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.dst_node):
            request.dst_node_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.dst_node, 'DstNode', 'json')
        if not UtilClient.is_unset(tmp_req.src_node):
            request.src_node_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.src_node, 'SrcNode', 'json')
        query = {}
        if not UtilClient.is_unset(request.criteria_type):
            query['CriteriaType'] = request.criteria_type
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.dst_node_shrink):
            query['DstNode'] = request.dst_node_shrink
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.src_node_shrink):
            query['SrcNode'] = request.src_node_shrink
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='FindContainerNetworkConnect',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.FindContainerNetworkConnectResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def find_container_network_connect(
        self,
        request: sas_20181203_models.FindContainerNetworkConnectRequest,
    ) -> sas_20181203_models.FindContainerNetworkConnectResponse:
        """
        @summary 容器网络连接
        
        @param request: FindContainerNetworkConnectRequest
        @return: FindContainerNetworkConnectResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.find_container_network_connect_with_options(request, runtime)

    async def find_container_network_connect_async(
        self,
        request: sas_20181203_models.FindContainerNetworkConnectRequest,
    ) -> sas_20181203_models.FindContainerNetworkConnectResponse:
        """
        @summary 容器网络连接
        
        @param request: FindContainerNetworkConnectRequest
        @return: FindContainerNetworkConnectResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.find_container_network_connect_with_options_async(request, runtime)

    def finish_guid_task_with_options(
        self,
        request: sas_20181203_models.FinishGuidTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.FinishGuidTaskResponse:
        """
        @summary Completes guidance tasks for beginners to earn rewards.
        
        @param request: FinishGuidTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: FinishGuidTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.task_type_name):
            query['TaskTypeName'] = request.task_type_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='FinishGuidTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.FinishGuidTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def finish_guid_task_with_options_async(
        self,
        request: sas_20181203_models.FinishGuidTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.FinishGuidTaskResponse:
        """
        @summary Completes guidance tasks for beginners to earn rewards.
        
        @param request: FinishGuidTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: FinishGuidTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.task_type_name):
            query['TaskTypeName'] = request.task_type_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='FinishGuidTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.FinishGuidTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def finish_guid_task(
        self,
        request: sas_20181203_models.FinishGuidTaskRequest,
    ) -> sas_20181203_models.FinishGuidTaskResponse:
        """
        @summary Completes guidance tasks for beginners to earn rewards.
        
        @param request: FinishGuidTaskRequest
        @return: FinishGuidTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.finish_guid_task_with_options(request, runtime)

    async def finish_guid_task_async(
        self,
        request: sas_20181203_models.FinishGuidTaskRequest,
    ) -> sas_20181203_models.FinishGuidTaskResponse:
        """
        @summary Completes guidance tasks for beginners to earn rewards.
        
        @param request: FinishGuidTaskRequest
        @return: FinishGuidTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.finish_guid_task_with_options_async(request, runtime)

    def fix_check_warnings_with_options(
        self,
        request: sas_20181203_models.FixCheckWarningsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.FixCheckWarningsResponse:
        """
        @summary Fixes a baseline risk item.
        
        @param request: FixCheckWarningsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: FixCheckWarningsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_params):
            query['CheckParams'] = request.check_params
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.retention_days):
            query['RetentionDays'] = request.retention_days
        if not UtilClient.is_unset(request.risk_id):
            query['RiskId'] = request.risk_id
        if not UtilClient.is_unset(request.snapshot_name):
            query['SnapshotName'] = request.snapshot_name
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='FixCheckWarnings',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.FixCheckWarningsResponse(),
            self.call_api(params, req, runtime)
        )

    async def fix_check_warnings_with_options_async(
        self,
        request: sas_20181203_models.FixCheckWarningsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.FixCheckWarningsResponse:
        """
        @summary Fixes a baseline risk item.
        
        @param request: FixCheckWarningsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: FixCheckWarningsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_params):
            query['CheckParams'] = request.check_params
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.retention_days):
            query['RetentionDays'] = request.retention_days
        if not UtilClient.is_unset(request.risk_id):
            query['RiskId'] = request.risk_id
        if not UtilClient.is_unset(request.snapshot_name):
            query['SnapshotName'] = request.snapshot_name
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='FixCheckWarnings',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.FixCheckWarningsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def fix_check_warnings(
        self,
        request: sas_20181203_models.FixCheckWarningsRequest,
    ) -> sas_20181203_models.FixCheckWarningsResponse:
        """
        @summary Fixes a baseline risk item.
        
        @param request: FixCheckWarningsRequest
        @return: FixCheckWarningsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.fix_check_warnings_with_options(request, runtime)

    async def fix_check_warnings_async(
        self,
        request: sas_20181203_models.FixCheckWarningsRequest,
    ) -> sas_20181203_models.FixCheckWarningsResponse:
        """
        @summary Fixes a baseline risk item.
        
        @param request: FixCheckWarningsRequest
        @return: FixCheckWarningsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.fix_check_warnings_with_options_async(request, runtime)

    def generate_dynamic_dict_with_options(
        self,
        request: sas_20181203_models.GenerateDynamicDictRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GenerateDynamicDictResponse:
        """
        @summary Generates a custom dictionary of weak passwords for the baseline check feature.
        
        @param request: GenerateDynamicDictRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GenerateDynamicDictResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.arg_keywords):
            query['ArgKeywords'] = request.arg_keywords
        if not UtilClient.is_unset(request.domains):
            query['Domains'] = request.domains
        if not UtilClient.is_unset(request.names):
            query['Names'] = request.names
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GenerateDynamicDict',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GenerateDynamicDictResponse(),
            self.call_api(params, req, runtime)
        )

    async def generate_dynamic_dict_with_options_async(
        self,
        request: sas_20181203_models.GenerateDynamicDictRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GenerateDynamicDictResponse:
        """
        @summary Generates a custom dictionary of weak passwords for the baseline check feature.
        
        @param request: GenerateDynamicDictRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GenerateDynamicDictResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.arg_keywords):
            query['ArgKeywords'] = request.arg_keywords
        if not UtilClient.is_unset(request.domains):
            query['Domains'] = request.domains
        if not UtilClient.is_unset(request.names):
            query['Names'] = request.names
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GenerateDynamicDict',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GenerateDynamicDictResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def generate_dynamic_dict(
        self,
        request: sas_20181203_models.GenerateDynamicDictRequest,
    ) -> sas_20181203_models.GenerateDynamicDictResponse:
        """
        @summary Generates a custom dictionary of weak passwords for the baseline check feature.
        
        @param request: GenerateDynamicDictRequest
        @return: GenerateDynamicDictResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.generate_dynamic_dict_with_options(request, runtime)

    async def generate_dynamic_dict_async(
        self,
        request: sas_20181203_models.GenerateDynamicDictRequest,
    ) -> sas_20181203_models.GenerateDynamicDictResponse:
        """
        @summary Generates a custom dictionary of weak passwords for the baseline check feature.
        
        @param request: GenerateDynamicDictRequest
        @return: GenerateDynamicDictResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.generate_dynamic_dict_with_options_async(request, runtime)

    def generate_k8s_access_info_with_options(
        self,
        request: sas_20181203_models.GenerateK8sAccessInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GenerateK8sAccessInfoResponse:
        """
        @summary Generates a command that is used to add a self-managed Kubernetes cluster.
        
        @param request: GenerateK8sAccessInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GenerateK8sAccessInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.aliyun_yundun_gateway_api_name):
            query['AliyunYundunGatewayApiName'] = request.aliyun_yundun_gateway_api_name
        if not UtilClient.is_unset(request.aliyun_yundun_gateway_pop_name):
            query['AliyunYundunGatewayPopName'] = request.aliyun_yundun_gateway_pop_name
        if not UtilClient.is_unset(request.aliyun_yundun_gateway_project_name):
            query['AliyunYundunGatewayProjectName'] = request.aliyun_yundun_gateway_project_name
        if not UtilClient.is_unset(request.audit_log_store):
            query['AuditLogStore'] = request.audit_log_store
        if not UtilClient.is_unset(request.audit_project):
            query['AuditProject'] = request.audit_project
        if not UtilClient.is_unset(request.audit_region_id):
            query['AuditRegionId'] = request.audit_region_id
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.cpu_arch):
            query['CpuArch'] = request.cpu_arch
        if not UtilClient.is_unset(request.expire_date):
            query['ExpireDate'] = request.expire_date
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.vendor):
            query['Vendor'] = request.vendor
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GenerateK8sAccessInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GenerateK8sAccessInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def generate_k8s_access_info_with_options_async(
        self,
        request: sas_20181203_models.GenerateK8sAccessInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GenerateK8sAccessInfoResponse:
        """
        @summary Generates a command that is used to add a self-managed Kubernetes cluster.
        
        @param request: GenerateK8sAccessInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GenerateK8sAccessInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.aliyun_yundun_gateway_api_name):
            query['AliyunYundunGatewayApiName'] = request.aliyun_yundun_gateway_api_name
        if not UtilClient.is_unset(request.aliyun_yundun_gateway_pop_name):
            query['AliyunYundunGatewayPopName'] = request.aliyun_yundun_gateway_pop_name
        if not UtilClient.is_unset(request.aliyun_yundun_gateway_project_name):
            query['AliyunYundunGatewayProjectName'] = request.aliyun_yundun_gateway_project_name
        if not UtilClient.is_unset(request.audit_log_store):
            query['AuditLogStore'] = request.audit_log_store
        if not UtilClient.is_unset(request.audit_project):
            query['AuditProject'] = request.audit_project
        if not UtilClient.is_unset(request.audit_region_id):
            query['AuditRegionId'] = request.audit_region_id
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.cpu_arch):
            query['CpuArch'] = request.cpu_arch
        if not UtilClient.is_unset(request.expire_date):
            query['ExpireDate'] = request.expire_date
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.vendor):
            query['Vendor'] = request.vendor
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GenerateK8sAccessInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GenerateK8sAccessInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def generate_k8s_access_info(
        self,
        request: sas_20181203_models.GenerateK8sAccessInfoRequest,
    ) -> sas_20181203_models.GenerateK8sAccessInfoResponse:
        """
        @summary Generates a command that is used to add a self-managed Kubernetes cluster.
        
        @param request: GenerateK8sAccessInfoRequest
        @return: GenerateK8sAccessInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.generate_k8s_access_info_with_options(request, runtime)

    async def generate_k8s_access_info_async(
        self,
        request: sas_20181203_models.GenerateK8sAccessInfoRequest,
    ) -> sas_20181203_models.GenerateK8sAccessInfoResponse:
        """
        @summary Generates a command that is used to add a self-managed Kubernetes cluster.
        
        @param request: GenerateK8sAccessInfoRequest
        @return: GenerateK8sAccessInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.generate_k8s_access_info_with_options_async(request, runtime)

    def generate_once_task_with_options(
        self,
        request: sas_20181203_models.GenerateOnceTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GenerateOnceTaskResponse:
        """
        @summary Creates a one-time scan task.
        
        @param request: GenerateOnceTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GenerateOnceTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.param):
            query['Param'] = request.param
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.task_name):
            query['TaskName'] = request.task_name
        if not UtilClient.is_unset(request.task_type):
            query['TaskType'] = request.task_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GenerateOnceTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GenerateOnceTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def generate_once_task_with_options_async(
        self,
        request: sas_20181203_models.GenerateOnceTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GenerateOnceTaskResponse:
        """
        @summary Creates a one-time scan task.
        
        @param request: GenerateOnceTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GenerateOnceTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.param):
            query['Param'] = request.param
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.task_name):
            query['TaskName'] = request.task_name
        if not UtilClient.is_unset(request.task_type):
            query['TaskType'] = request.task_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GenerateOnceTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GenerateOnceTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def generate_once_task(
        self,
        request: sas_20181203_models.GenerateOnceTaskRequest,
    ) -> sas_20181203_models.GenerateOnceTaskResponse:
        """
        @summary Creates a one-time scan task.
        
        @param request: GenerateOnceTaskRequest
        @return: GenerateOnceTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.generate_once_task_with_options(request, runtime)

    async def generate_once_task_async(
        self,
        request: sas_20181203_models.GenerateOnceTaskRequest,
    ) -> sas_20181203_models.GenerateOnceTaskResponse:
        """
        @summary Creates a one-time scan task.
        
        @param request: GenerateOnceTaskRequest
        @return: GenerateOnceTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.generate_once_task_with_options_async(request, runtime)

    def get_account_label_with_options(
        self,
        request: sas_20181203_models.GetAccountLabelRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetAccountLabelResponse:
        """
        @summary Obtains account tags.
        
        @param request: GetAccountLabelRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAccountLabelResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.label_list):
            query['LabelList'] = request.label_list
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetAccountLabel',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetAccountLabelResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_account_label_with_options_async(
        self,
        request: sas_20181203_models.GetAccountLabelRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetAccountLabelResponse:
        """
        @summary Obtains account tags.
        
        @param request: GetAccountLabelRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAccountLabelResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.label_list):
            query['LabelList'] = request.label_list
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetAccountLabel',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetAccountLabelResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_account_label(
        self,
        request: sas_20181203_models.GetAccountLabelRequest,
    ) -> sas_20181203_models.GetAccountLabelResponse:
        """
        @summary Obtains account tags.
        
        @param request: GetAccountLabelRequest
        @return: GetAccountLabelResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_account_label_with_options(request, runtime)

    async def get_account_label_async(
        self,
        request: sas_20181203_models.GetAccountLabelRequest,
    ) -> sas_20181203_models.GetAccountLabelResponse:
        """
        @summary Obtains account tags.
        
        @param request: GetAccountLabelRequest
        @return: GetAccountLabelResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_account_label_with_options_async(request, runtime)

    def get_aegis_container_plugin_rule_with_options(
        self,
        request: sas_20181203_models.GetAegisContainerPluginRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetAegisContainerPluginRuleResponse:
        """
        @summary Queries the details of a defense rule against container escapes.
        
        @description Only the Ultimate edition of Security Center supports this operation.
        
        @param request: GetAegisContainerPluginRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAegisContainerPluginRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.rule_type):
            query['RuleType'] = request.rule_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetAegisContainerPluginRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetAegisContainerPluginRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_aegis_container_plugin_rule_with_options_async(
        self,
        request: sas_20181203_models.GetAegisContainerPluginRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetAegisContainerPluginRuleResponse:
        """
        @summary Queries the details of a defense rule against container escapes.
        
        @description Only the Ultimate edition of Security Center supports this operation.
        
        @param request: GetAegisContainerPluginRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAegisContainerPluginRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.rule_type):
            query['RuleType'] = request.rule_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetAegisContainerPluginRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetAegisContainerPluginRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_aegis_container_plugin_rule(
        self,
        request: sas_20181203_models.GetAegisContainerPluginRuleRequest,
    ) -> sas_20181203_models.GetAegisContainerPluginRuleResponse:
        """
        @summary Queries the details of a defense rule against container escapes.
        
        @description Only the Ultimate edition of Security Center supports this operation.
        
        @param request: GetAegisContainerPluginRuleRequest
        @return: GetAegisContainerPluginRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_aegis_container_plugin_rule_with_options(request, runtime)

    async def get_aegis_container_plugin_rule_async(
        self,
        request: sas_20181203_models.GetAegisContainerPluginRuleRequest,
    ) -> sas_20181203_models.GetAegisContainerPluginRuleResponse:
        """
        @summary Queries the details of a defense rule against container escapes.
        
        @description Only the Ultimate edition of Security Center supports this operation.
        
        @param request: GetAegisContainerPluginRuleRequest
        @return: GetAegisContainerPluginRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_aegis_container_plugin_rule_with_options_async(request, runtime)

    def get_aegis_container_plugin_rule_criteria_with_options(
        self,
        request: sas_20181203_models.GetAegisContainerPluginRuleCriteriaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetAegisContainerPluginRuleCriteriaResponse:
        """
        @summary Queries search conditions that can be used to search for container file protection rules.
        
        @param request: GetAegisContainerPluginRuleCriteriaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAegisContainerPluginRuleCriteriaResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.value):
            query['Value'] = request.value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetAegisContainerPluginRuleCriteria',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetAegisContainerPluginRuleCriteriaResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_aegis_container_plugin_rule_criteria_with_options_async(
        self,
        request: sas_20181203_models.GetAegisContainerPluginRuleCriteriaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetAegisContainerPluginRuleCriteriaResponse:
        """
        @summary Queries search conditions that can be used to search for container file protection rules.
        
        @param request: GetAegisContainerPluginRuleCriteriaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAegisContainerPluginRuleCriteriaResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.value):
            query['Value'] = request.value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetAegisContainerPluginRuleCriteria',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetAegisContainerPluginRuleCriteriaResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_aegis_container_plugin_rule_criteria(
        self,
        request: sas_20181203_models.GetAegisContainerPluginRuleCriteriaRequest,
    ) -> sas_20181203_models.GetAegisContainerPluginRuleCriteriaResponse:
        """
        @summary Queries search conditions that can be used to search for container file protection rules.
        
        @param request: GetAegisContainerPluginRuleCriteriaRequest
        @return: GetAegisContainerPluginRuleCriteriaResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_aegis_container_plugin_rule_criteria_with_options(request, runtime)

    async def get_aegis_container_plugin_rule_criteria_async(
        self,
        request: sas_20181203_models.GetAegisContainerPluginRuleCriteriaRequest,
    ) -> sas_20181203_models.GetAegisContainerPluginRuleCriteriaResponse:
        """
        @summary Queries search conditions that can be used to search for container file protection rules.
        
        @param request: GetAegisContainerPluginRuleCriteriaRequest
        @return: GetAegisContainerPluginRuleCriteriaResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_aegis_container_plugin_rule_criteria_with_options_async(request, runtime)

    def get_agentless_task_count_with_options(
        self,
        request: sas_20181203_models.GetAgentlessTaskCountRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetAgentlessTaskCountResponse:
        """
        @summary Queries the number of agentless detection tasks.
        
        @param request: GetAgentlessTaskCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAgentlessTaskCountResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.target):
            query['Target'] = request.target
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetAgentlessTaskCount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetAgentlessTaskCountResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_agentless_task_count_with_options_async(
        self,
        request: sas_20181203_models.GetAgentlessTaskCountRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetAgentlessTaskCountResponse:
        """
        @summary Queries the number of agentless detection tasks.
        
        @param request: GetAgentlessTaskCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAgentlessTaskCountResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.target):
            query['Target'] = request.target
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetAgentlessTaskCount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetAgentlessTaskCountResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_agentless_task_count(
        self,
        request: sas_20181203_models.GetAgentlessTaskCountRequest,
    ) -> sas_20181203_models.GetAgentlessTaskCountResponse:
        """
        @summary Queries the number of agentless detection tasks.
        
        @param request: GetAgentlessTaskCountRequest
        @return: GetAgentlessTaskCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_agentless_task_count_with_options(request, runtime)

    async def get_agentless_task_count_async(
        self,
        request: sas_20181203_models.GetAgentlessTaskCountRequest,
    ) -> sas_20181203_models.GetAgentlessTaskCountResponse:
        """
        @summary Queries the number of agentless detection tasks.
        
        @param request: GetAgentlessTaskCountRequest
        @return: GetAgentlessTaskCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_agentless_task_count_with_options_async(request, runtime)

    def get_alarm_machine_count_with_options(
        self,
        request: sas_20181203_models.GetAlarmMachineCountRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetAlarmMachineCountResponse:
        """
        @summary Queries the number of servers on which alerts are generated.
        
        @param request: GetAlarmMachineCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAlarmMachineCountResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetAlarmMachineCount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetAlarmMachineCountResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_alarm_machine_count_with_options_async(
        self,
        request: sas_20181203_models.GetAlarmMachineCountRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetAlarmMachineCountResponse:
        """
        @summary Queries the number of servers on which alerts are generated.
        
        @param request: GetAlarmMachineCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAlarmMachineCountResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetAlarmMachineCount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetAlarmMachineCountResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_alarm_machine_count(
        self,
        request: sas_20181203_models.GetAlarmMachineCountRequest,
    ) -> sas_20181203_models.GetAlarmMachineCountResponse:
        """
        @summary Queries the number of servers on which alerts are generated.
        
        @param request: GetAlarmMachineCountRequest
        @return: GetAlarmMachineCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_alarm_machine_count_with_options(request, runtime)

    async def get_alarm_machine_count_async(
        self,
        request: sas_20181203_models.GetAlarmMachineCountRequest,
    ) -> sas_20181203_models.GetAlarmMachineCountResponse:
        """
        @summary Queries the number of servers on which alerts are generated.
        
        @param request: GetAlarmMachineCountRequest
        @return: GetAlarmMachineCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_alarm_machine_count_with_options_async(request, runtime)

    def get_app_network_with_options(
        self,
        request: sas_20181203_models.GetAppNetworkRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetAppNetworkResponse:
        """
        @summary Queries the network topology between containerized applications.
        
        @param request: GetAppNetworkRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAppNetworkResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetAppNetwork',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetAppNetworkResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_app_network_with_options_async(
        self,
        request: sas_20181203_models.GetAppNetworkRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetAppNetworkResponse:
        """
        @summary Queries the network topology between containerized applications.
        
        @param request: GetAppNetworkRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAppNetworkResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetAppNetwork',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetAppNetworkResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_app_network(
        self,
        request: sas_20181203_models.GetAppNetworkRequest,
    ) -> sas_20181203_models.GetAppNetworkResponse:
        """
        @summary Queries the network topology between containerized applications.
        
        @param request: GetAppNetworkRequest
        @return: GetAppNetworkResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_app_network_with_options(request, runtime)

    async def get_app_network_async(
        self,
        request: sas_20181203_models.GetAppNetworkRequest,
    ) -> sas_20181203_models.GetAppNetworkResponse:
        """
        @summary Queries the network topology between containerized applications.
        
        @param request: GetAppNetworkRequest
        @return: GetAppNetworkResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_app_network_with_options_async(request, runtime)

    def get_asset_detail_by_uuid_with_options(
        self,
        request: sas_20181203_models.GetAssetDetailByUuidRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetAssetDetailByUuidResponse:
        """
        @summary Queries the details of a server and the extended information about the server by using the UUID of the server.
        
        @param request: GetAssetDetailByUuidRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAssetDetailByUuidResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetAssetDetailByUuid',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetAssetDetailByUuidResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_asset_detail_by_uuid_with_options_async(
        self,
        request: sas_20181203_models.GetAssetDetailByUuidRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetAssetDetailByUuidResponse:
        """
        @summary Queries the details of a server and the extended information about the server by using the UUID of the server.
        
        @param request: GetAssetDetailByUuidRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAssetDetailByUuidResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetAssetDetailByUuid',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetAssetDetailByUuidResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_asset_detail_by_uuid(
        self,
        request: sas_20181203_models.GetAssetDetailByUuidRequest,
    ) -> sas_20181203_models.GetAssetDetailByUuidResponse:
        """
        @summary Queries the details of a server and the extended information about the server by using the UUID of the server.
        
        @param request: GetAssetDetailByUuidRequest
        @return: GetAssetDetailByUuidResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_asset_detail_by_uuid_with_options(request, runtime)

    async def get_asset_detail_by_uuid_async(
        self,
        request: sas_20181203_models.GetAssetDetailByUuidRequest,
    ) -> sas_20181203_models.GetAssetDetailByUuidResponse:
        """
        @summary Queries the details of a server and the extended information about the server by using the UUID of the server.
        
        @param request: GetAssetDetailByUuidRequest
        @return: GetAssetDetailByUuidResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_asset_detail_by_uuid_with_options_async(request, runtime)

    def get_asset_selection_config_with_options(
        self,
        request: sas_20181203_models.GetAssetSelectionConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetAssetSelectionConfigResponse:
        """
        @summary Queries asset selection configurations.
        
        @param request: GetAssetSelectionConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAssetSelectionConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.business_type):
            query['BusinessType'] = request.business_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetAssetSelectionConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetAssetSelectionConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_asset_selection_config_with_options_async(
        self,
        request: sas_20181203_models.GetAssetSelectionConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetAssetSelectionConfigResponse:
        """
        @summary Queries asset selection configurations.
        
        @param request: GetAssetSelectionConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAssetSelectionConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.business_type):
            query['BusinessType'] = request.business_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetAssetSelectionConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetAssetSelectionConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_asset_selection_config(
        self,
        request: sas_20181203_models.GetAssetSelectionConfigRequest,
    ) -> sas_20181203_models.GetAssetSelectionConfigResponse:
        """
        @summary Queries asset selection configurations.
        
        @param request: GetAssetSelectionConfigRequest
        @return: GetAssetSelectionConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_asset_selection_config_with_options(request, runtime)

    async def get_asset_selection_config_async(
        self,
        request: sas_20181203_models.GetAssetSelectionConfigRequest,
    ) -> sas_20181203_models.GetAssetSelectionConfigResponse:
        """
        @summary Queries asset selection configurations.
        
        @param request: GetAssetSelectionConfigRequest
        @return: GetAssetSelectionConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_asset_selection_config_with_options_async(request, runtime)

    def get_assets_property_detail_with_options(
        self,
        request: sas_20181203_models.GetAssetsPropertyDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetAssetsPropertyDetailResponse:
        """
        @summary Queries the details about the asset fingerprints of the startup item, kernel module, or website type.
        
        @param request: GetAssetsPropertyDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAssetsPropertyDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.biz):
            query['Biz'] = request.biz
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.item_name):
            query['ItemName'] = request.item_name
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.search_criteria_list):
            query['SearchCriteriaList'] = request.search_criteria_list
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetAssetsPropertyDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetAssetsPropertyDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_assets_property_detail_with_options_async(
        self,
        request: sas_20181203_models.GetAssetsPropertyDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetAssetsPropertyDetailResponse:
        """
        @summary Queries the details about the asset fingerprints of the startup item, kernel module, or website type.
        
        @param request: GetAssetsPropertyDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAssetsPropertyDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.biz):
            query['Biz'] = request.biz
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.item_name):
            query['ItemName'] = request.item_name
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.search_criteria_list):
            query['SearchCriteriaList'] = request.search_criteria_list
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetAssetsPropertyDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetAssetsPropertyDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_assets_property_detail(
        self,
        request: sas_20181203_models.GetAssetsPropertyDetailRequest,
    ) -> sas_20181203_models.GetAssetsPropertyDetailResponse:
        """
        @summary Queries the details about the asset fingerprints of the startup item, kernel module, or website type.
        
        @param request: GetAssetsPropertyDetailRequest
        @return: GetAssetsPropertyDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_assets_property_detail_with_options(request, runtime)

    async def get_assets_property_detail_async(
        self,
        request: sas_20181203_models.GetAssetsPropertyDetailRequest,
    ) -> sas_20181203_models.GetAssetsPropertyDetailResponse:
        """
        @summary Queries the details about the asset fingerprints of the startup item, kernel module, or website type.
        
        @param request: GetAssetsPropertyDetailRequest
        @return: GetAssetsPropertyDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_assets_property_detail_with_options_async(request, runtime)

    def get_assets_property_item_with_options(
        self,
        request: sas_20181203_models.GetAssetsPropertyItemRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetAssetsPropertyItemResponse:
        """
        @summary Queries the aggregation information about the asset fingerprints of the startup item, kernel module, or website type.
        
        @param request: GetAssetsPropertyItemRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAssetsPropertyItemResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.biz):
            query['Biz'] = request.biz
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.force_flush):
            query['ForceFlush'] = request.force_flush
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.search_info):
            query['SearchInfo'] = request.search_info
        if not UtilClient.is_unset(request.search_item):
            query['SearchItem'] = request.search_item
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetAssetsPropertyItem',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetAssetsPropertyItemResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_assets_property_item_with_options_async(
        self,
        request: sas_20181203_models.GetAssetsPropertyItemRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetAssetsPropertyItemResponse:
        """
        @summary Queries the aggregation information about the asset fingerprints of the startup item, kernel module, or website type.
        
        @param request: GetAssetsPropertyItemRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAssetsPropertyItemResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.biz):
            query['Biz'] = request.biz
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.force_flush):
            query['ForceFlush'] = request.force_flush
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.search_info):
            query['SearchInfo'] = request.search_info
        if not UtilClient.is_unset(request.search_item):
            query['SearchItem'] = request.search_item
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetAssetsPropertyItem',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetAssetsPropertyItemResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_assets_property_item(
        self,
        request: sas_20181203_models.GetAssetsPropertyItemRequest,
    ) -> sas_20181203_models.GetAssetsPropertyItemResponse:
        """
        @summary Queries the aggregation information about the asset fingerprints of the startup item, kernel module, or website type.
        
        @param request: GetAssetsPropertyItemRequest
        @return: GetAssetsPropertyItemResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_assets_property_item_with_options(request, runtime)

    async def get_assets_property_item_async(
        self,
        request: sas_20181203_models.GetAssetsPropertyItemRequest,
    ) -> sas_20181203_models.GetAssetsPropertyItemResponse:
        """
        @summary Queries the aggregation information about the asset fingerprints of the startup item, kernel module, or website type.
        
        @param request: GetAssetsPropertyItemRequest
        @return: GetAssetsPropertyItemResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_assets_property_item_with_options_async(request, runtime)

    def get_attack_path_event_detail_with_options(
        self,
        request: sas_20181203_models.GetAttackPathEventDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetAttackPathEventDetailResponse:
        """
        @summary Query Attack Path Event Details.
        
        @param request: GetAttackPathEventDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAttackPathEventDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.event_id):
            query['EventId'] = request.event_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetAttackPathEventDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetAttackPathEventDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_attack_path_event_detail_with_options_async(
        self,
        request: sas_20181203_models.GetAttackPathEventDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetAttackPathEventDetailResponse:
        """
        @summary Query Attack Path Event Details.
        
        @param request: GetAttackPathEventDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAttackPathEventDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.event_id):
            query['EventId'] = request.event_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetAttackPathEventDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetAttackPathEventDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_attack_path_event_detail(
        self,
        request: sas_20181203_models.GetAttackPathEventDetailRequest,
    ) -> sas_20181203_models.GetAttackPathEventDetailResponse:
        """
        @summary Query Attack Path Event Details.
        
        @param request: GetAttackPathEventDetailRequest
        @return: GetAttackPathEventDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_attack_path_event_detail_with_options(request, runtime)

    async def get_attack_path_event_detail_async(
        self,
        request: sas_20181203_models.GetAttackPathEventDetailRequest,
    ) -> sas_20181203_models.GetAttackPathEventDetailResponse:
        """
        @summary Query Attack Path Event Details.
        
        @param request: GetAttackPathEventDetailRequest
        @return: GetAttackPathEventDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_attack_path_event_detail_with_options_async(request, runtime)

    def get_attack_path_event_statistics_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetAttackPathEventStatisticsResponse:
        """
        @summary Query Attack Path Event Statistics.
        
        @param request: GetAttackPathEventStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAttackPathEventStatisticsResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetAttackPathEventStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetAttackPathEventStatisticsResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_attack_path_event_statistics_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetAttackPathEventStatisticsResponse:
        """
        @summary Query Attack Path Event Statistics.
        
        @param request: GetAttackPathEventStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAttackPathEventStatisticsResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetAttackPathEventStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetAttackPathEventStatisticsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_attack_path_event_statistics(self) -> sas_20181203_models.GetAttackPathEventStatisticsResponse:
        """
        @summary Query Attack Path Event Statistics.
        
        @return: GetAttackPathEventStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_attack_path_event_statistics_with_options(runtime)

    async def get_attack_path_event_statistics_async(self) -> sas_20181203_models.GetAttackPathEventStatisticsResponse:
        """
        @summary Query Attack Path Event Statistics.
        
        @return: GetAttackPathEventStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_attack_path_event_statistics_with_options_async(runtime)

    def get_attack_path_sensitive_asset_config_with_options(
        self,
        request: sas_20181203_models.GetAttackPathSensitiveAssetConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetAttackPathSensitiveAssetConfigResponse:
        """
        @summary Query Attack Path Sensitive Assets.
        
        @param request: GetAttackPathSensitiveAssetConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAttackPathSensitiveAssetConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.attack_path_sensitive_asset_config_id):
            query['AttackPathSensitiveAssetConfigId'] = request.attack_path_sensitive_asset_config_id
        if not UtilClient.is_unset(request.config_type):
            query['ConfigType'] = request.config_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetAttackPathSensitiveAssetConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetAttackPathSensitiveAssetConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_attack_path_sensitive_asset_config_with_options_async(
        self,
        request: sas_20181203_models.GetAttackPathSensitiveAssetConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetAttackPathSensitiveAssetConfigResponse:
        """
        @summary Query Attack Path Sensitive Assets.
        
        @param request: GetAttackPathSensitiveAssetConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAttackPathSensitiveAssetConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.attack_path_sensitive_asset_config_id):
            query['AttackPathSensitiveAssetConfigId'] = request.attack_path_sensitive_asset_config_id
        if not UtilClient.is_unset(request.config_type):
            query['ConfigType'] = request.config_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetAttackPathSensitiveAssetConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetAttackPathSensitiveAssetConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_attack_path_sensitive_asset_config(
        self,
        request: sas_20181203_models.GetAttackPathSensitiveAssetConfigRequest,
    ) -> sas_20181203_models.GetAttackPathSensitiveAssetConfigResponse:
        """
        @summary Query Attack Path Sensitive Assets.
        
        @param request: GetAttackPathSensitiveAssetConfigRequest
        @return: GetAttackPathSensitiveAssetConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_attack_path_sensitive_asset_config_with_options(request, runtime)

    async def get_attack_path_sensitive_asset_config_async(
        self,
        request: sas_20181203_models.GetAttackPathSensitiveAssetConfigRequest,
    ) -> sas_20181203_models.GetAttackPathSensitiveAssetConfigResponse:
        """
        @summary Query Attack Path Sensitive Assets.
        
        @param request: GetAttackPathSensitiveAssetConfigRequest
        @return: GetAttackPathSensitiveAssetConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_attack_path_sensitive_asset_config_with_options_async(request, runtime)

    def get_attack_path_whitelist_with_options(
        self,
        request: sas_20181203_models.GetAttackPathWhitelistRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetAttackPathWhitelistResponse:
        """
        @summary Query Attack Path Whitelist Details.
        
        @param request: GetAttackPathWhitelistRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAttackPathWhitelistResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.attack_path_whitelist_id):
            query['AttackPathWhitelistId'] = request.attack_path_whitelist_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetAttackPathWhitelist',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetAttackPathWhitelistResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_attack_path_whitelist_with_options_async(
        self,
        request: sas_20181203_models.GetAttackPathWhitelistRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetAttackPathWhitelistResponse:
        """
        @summary Query Attack Path Whitelist Details.
        
        @param request: GetAttackPathWhitelistRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAttackPathWhitelistResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.attack_path_whitelist_id):
            query['AttackPathWhitelistId'] = request.attack_path_whitelist_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetAttackPathWhitelist',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetAttackPathWhitelistResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_attack_path_whitelist(
        self,
        request: sas_20181203_models.GetAttackPathWhitelistRequest,
    ) -> sas_20181203_models.GetAttackPathWhitelistResponse:
        """
        @summary Query Attack Path Whitelist Details.
        
        @param request: GetAttackPathWhitelistRequest
        @return: GetAttackPathWhitelistResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_attack_path_whitelist_with_options(request, runtime)

    async def get_attack_path_whitelist_async(
        self,
        request: sas_20181203_models.GetAttackPathWhitelistRequest,
    ) -> sas_20181203_models.GetAttackPathWhitelistResponse:
        """
        @summary Query Attack Path Whitelist Details.
        
        @param request: GetAttackPathWhitelistRequest
        @return: GetAttackPathWhitelistResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_attack_path_whitelist_with_options_async(request, runtime)

    def get_attack_type_list_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetAttackTypeListResponse:
        """
        @summary Queries a list of attack types on the Attack Analysis page.
        
        @param request: GetAttackTypeListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAttackTypeListResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetAttackTypeList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetAttackTypeListResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_attack_type_list_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetAttackTypeListResponse:
        """
        @summary Queries a list of attack types on the Attack Analysis page.
        
        @param request: GetAttackTypeListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAttackTypeListResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetAttackTypeList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetAttackTypeListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_attack_type_list(self) -> sas_20181203_models.GetAttackTypeListResponse:
        """
        @summary Queries a list of attack types on the Attack Analysis page.
        
        @return: GetAttackTypeListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_attack_type_list_with_options(runtime)

    async def get_attack_type_list_async(self) -> sas_20181203_models.GetAttackTypeListResponse:
        """
        @summary Queries a list of attack types on the Attack Analysis page.
        
        @return: GetAttackTypeListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_attack_type_list_with_options_async(runtime)

    def get_auth_summary_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetAuthSummaryResponse:
        """
        @summary Queries the statistics of asset protection quota.
        
        @param request: GetAuthSummaryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAuthSummaryResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetAuthSummary',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetAuthSummaryResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_auth_summary_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetAuthSummaryResponse:
        """
        @summary Queries the statistics of asset protection quota.
        
        @param request: GetAuthSummaryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAuthSummaryResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetAuthSummary',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetAuthSummaryResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_auth_summary(self) -> sas_20181203_models.GetAuthSummaryResponse:
        """
        @summary Queries the statistics of asset protection quota.
        
        @return: GetAuthSummaryResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_auth_summary_with_options(runtime)

    async def get_auth_summary_async(self) -> sas_20181203_models.GetAuthSummaryResponse:
        """
        @summary Queries the statistics of asset protection quota.
        
        @return: GetAuthSummaryResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_auth_summary_with_options_async(runtime)

    def get_auth_version_statistic_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetAuthVersionStatisticResponse:
        """
        @summary Queries the statistics about the numbers of assets protected by each edition of Security Center.
        
        @param request: GetAuthVersionStatisticRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAuthVersionStatisticResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetAuthVersionStatistic',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetAuthVersionStatisticResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_auth_version_statistic_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetAuthVersionStatisticResponse:
        """
        @summary Queries the statistics about the numbers of assets protected by each edition of Security Center.
        
        @param request: GetAuthVersionStatisticRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAuthVersionStatisticResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetAuthVersionStatistic',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetAuthVersionStatisticResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_auth_version_statistic(self) -> sas_20181203_models.GetAuthVersionStatisticResponse:
        """
        @summary Queries the statistics about the numbers of assets protected by each edition of Security Center.
        
        @return: GetAuthVersionStatisticResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_auth_version_statistic_with_options(runtime)

    async def get_auth_version_statistic_async(self) -> sas_20181203_models.GetAuthVersionStatisticResponse:
        """
        @summary Queries the statistics about the numbers of assets protected by each edition of Security Center.
        
        @return: GetAuthVersionStatisticResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_auth_version_statistic_with_options_async(runtime)

    def get_backup_auto_config_status_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetBackupAutoConfigStatusResponse:
        """
        @summary Checks whether the managed anti-ransomware feature can automatically configure an anti-ransomware policy for servers.
        
        @param request: GetBackupAutoConfigStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetBackupAutoConfigStatusResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetBackupAutoConfigStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetBackupAutoConfigStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_backup_auto_config_status_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetBackupAutoConfigStatusResponse:
        """
        @summary Checks whether the managed anti-ransomware feature can automatically configure an anti-ransomware policy for servers.
        
        @param request: GetBackupAutoConfigStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetBackupAutoConfigStatusResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetBackupAutoConfigStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetBackupAutoConfigStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_backup_auto_config_status(self) -> sas_20181203_models.GetBackupAutoConfigStatusResponse:
        """
        @summary Checks whether the managed anti-ransomware feature can automatically configure an anti-ransomware policy for servers.
        
        @return: GetBackupAutoConfigStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_backup_auto_config_status_with_options(runtime)

    async def get_backup_auto_config_status_async(self) -> sas_20181203_models.GetBackupAutoConfigStatusResponse:
        """
        @summary Checks whether the managed anti-ransomware feature can automatically configure an anti-ransomware policy for servers.
        
        @return: GetBackupAutoConfigStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_backup_auto_config_status_with_options_async(runtime)

    def get_backup_storage_count_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetBackupStorageCountResponse:
        """
        @summary Queries the anti-ransomware capacity that is used.
        
        @param request: GetBackupStorageCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetBackupStorageCountResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetBackupStorageCount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetBackupStorageCountResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_backup_storage_count_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetBackupStorageCountResponse:
        """
        @summary Queries the anti-ransomware capacity that is used.
        
        @param request: GetBackupStorageCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetBackupStorageCountResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetBackupStorageCount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetBackupStorageCountResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_backup_storage_count(self) -> sas_20181203_models.GetBackupStorageCountResponse:
        """
        @summary Queries the anti-ransomware capacity that is used.
        
        @return: GetBackupStorageCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_backup_storage_count_with_options(runtime)

    async def get_backup_storage_count_async(self) -> sas_20181203_models.GetBackupStorageCountResponse:
        """
        @summary Queries the anti-ransomware capacity that is used.
        
        @return: GetBackupStorageCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_backup_storage_count_with_options_async(runtime)

    def get_build_risk_define_rule_config_with_options(
        self,
        request: sas_20181203_models.GetBuildRiskDefineRuleConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetBuildRiskDefineRuleConfigResponse:
        """
        @summary Queries configurations for scanning image build command risks.
        
        @param request: GetBuildRiskDefineRuleConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetBuildRiskDefineRuleConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetBuildRiskDefineRuleConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetBuildRiskDefineRuleConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_build_risk_define_rule_config_with_options_async(
        self,
        request: sas_20181203_models.GetBuildRiskDefineRuleConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetBuildRiskDefineRuleConfigResponse:
        """
        @summary Queries configurations for scanning image build command risks.
        
        @param request: GetBuildRiskDefineRuleConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetBuildRiskDefineRuleConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetBuildRiskDefineRuleConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetBuildRiskDefineRuleConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_build_risk_define_rule_config(
        self,
        request: sas_20181203_models.GetBuildRiskDefineRuleConfigRequest,
    ) -> sas_20181203_models.GetBuildRiskDefineRuleConfigResponse:
        """
        @summary Queries configurations for scanning image build command risks.
        
        @param request: GetBuildRiskDefineRuleConfigRequest
        @return: GetBuildRiskDefineRuleConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_build_risk_define_rule_config_with_options(request, runtime)

    async def get_build_risk_define_rule_config_async(
        self,
        request: sas_20181203_models.GetBuildRiskDefineRuleConfigRequest,
    ) -> sas_20181203_models.GetBuildRiskDefineRuleConfigResponse:
        """
        @summary Queries configurations for scanning image build command risks.
        
        @param request: GetBuildRiskDefineRuleConfigRequest
        @return: GetBuildRiskDefineRuleConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_build_risk_define_rule_config_with_options_async(request, runtime)

    def get_can_try_sas_with_options(
        self,
        request: sas_20181203_models.GetCanTrySasRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetCanTrySasResponse:
        """
        @summary Checks whether the current user is qualified for the trial use of Security Center.
        
        @param request: GetCanTrySasRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCanTrySasResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.from_ecs):
            body['FromEcs'] = request.from_ecs
        if not UtilClient.is_unset(request.lang):
            body['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetCanTrySas',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetCanTrySasResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_can_try_sas_with_options_async(
        self,
        request: sas_20181203_models.GetCanTrySasRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetCanTrySasResponse:
        """
        @summary Checks whether the current user is qualified for the trial use of Security Center.
        
        @param request: GetCanTrySasRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCanTrySasResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.from_ecs):
            body['FromEcs'] = request.from_ecs
        if not UtilClient.is_unset(request.lang):
            body['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetCanTrySas',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetCanTrySasResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_can_try_sas(
        self,
        request: sas_20181203_models.GetCanTrySasRequest,
    ) -> sas_20181203_models.GetCanTrySasResponse:
        """
        @summary Checks whether the current user is qualified for the trial use of Security Center.
        
        @param request: GetCanTrySasRequest
        @return: GetCanTrySasResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_can_try_sas_with_options(request, runtime)

    async def get_can_try_sas_async(
        self,
        request: sas_20181203_models.GetCanTrySasRequest,
    ) -> sas_20181203_models.GetCanTrySasResponse:
        """
        @summary Checks whether the current user is qualified for the trial use of Security Center.
        
        @param request: GetCanTrySasRequest
        @return: GetCanTrySasResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_can_try_sas_with_options_async(request, runtime)

    def get_check_config_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetCheckConfigResponse:
        """
        @summary Queries the information about an automatic configuration check on cloud services.
        
        @param request: GetCheckConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCheckConfigResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetCheckConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetCheckConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_check_config_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetCheckConfigResponse:
        """
        @summary Queries the information about an automatic configuration check on cloud services.
        
        @param request: GetCheckConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCheckConfigResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetCheckConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetCheckConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_check_config(self) -> sas_20181203_models.GetCheckConfigResponse:
        """
        @summary Queries the information about an automatic configuration check on cloud services.
        
        @return: GetCheckConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_check_config_with_options(runtime)

    async def get_check_config_async(self) -> sas_20181203_models.GetCheckConfigResponse:
        """
        @summary Queries the information about an automatic configuration check on cloud services.
        
        @return: GetCheckConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_check_config_with_options_async(runtime)

    def get_check_count_statistic_with_options(
        self,
        request: sas_20181203_models.GetCheckCountStatisticRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetCheckCountStatisticResponse:
        """
        @summary Queries statistics on the number of risk items in cloud security posture management (CSPM) for cloud services.
        
        @param request: GetCheckCountStatisticRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCheckCountStatisticResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.statistic_type):
            query['StatisticType'] = request.statistic_type
        if not UtilClient.is_unset(request.task_sources):
            query['TaskSources'] = request.task_sources
        if not UtilClient.is_unset(request.vendors):
            query['Vendors'] = request.vendors
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCheckCountStatistic',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetCheckCountStatisticResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_check_count_statistic_with_options_async(
        self,
        request: sas_20181203_models.GetCheckCountStatisticRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetCheckCountStatisticResponse:
        """
        @summary Queries statistics on the number of risk items in cloud security posture management (CSPM) for cloud services.
        
        @param request: GetCheckCountStatisticRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCheckCountStatisticResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.statistic_type):
            query['StatisticType'] = request.statistic_type
        if not UtilClient.is_unset(request.task_sources):
            query['TaskSources'] = request.task_sources
        if not UtilClient.is_unset(request.vendors):
            query['Vendors'] = request.vendors
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCheckCountStatistic',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetCheckCountStatisticResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_check_count_statistic(
        self,
        request: sas_20181203_models.GetCheckCountStatisticRequest,
    ) -> sas_20181203_models.GetCheckCountStatisticResponse:
        """
        @summary Queries statistics on the number of risk items in cloud security posture management (CSPM) for cloud services.
        
        @param request: GetCheckCountStatisticRequest
        @return: GetCheckCountStatisticResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_check_count_statistic_with_options(request, runtime)

    async def get_check_count_statistic_async(
        self,
        request: sas_20181203_models.GetCheckCountStatisticRequest,
    ) -> sas_20181203_models.GetCheckCountStatisticResponse:
        """
        @summary Queries statistics on the number of risk items in cloud security posture management (CSPM) for cloud services.
        
        @param request: GetCheckCountStatisticRequest
        @return: GetCheckCountStatisticResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_check_count_statistic_with_options_async(request, runtime)

    def get_check_detail_with_options(
        self,
        request: sas_20181203_models.GetCheckDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetCheckDetailResponse:
        """
        @summary Queries the details about a check item that is used for configuration assessment.
        
        @param request: GetCheckDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCheckDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_id):
            query['CheckId'] = request.check_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCheckDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetCheckDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_check_detail_with_options_async(
        self,
        request: sas_20181203_models.GetCheckDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetCheckDetailResponse:
        """
        @summary Queries the details about a check item that is used for configuration assessment.
        
        @param request: GetCheckDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCheckDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_id):
            query['CheckId'] = request.check_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCheckDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetCheckDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_check_detail(
        self,
        request: sas_20181203_models.GetCheckDetailRequest,
    ) -> sas_20181203_models.GetCheckDetailResponse:
        """
        @summary Queries the details about a check item that is used for configuration assessment.
        
        @param request: GetCheckDetailRequest
        @return: GetCheckDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_check_detail_with_options(request, runtime)

    async def get_check_detail_async(
        self,
        request: sas_20181203_models.GetCheckDetailRequest,
    ) -> sas_20181203_models.GetCheckDetailResponse:
        """
        @summary Queries the details about a check item that is used for configuration assessment.
        
        @param request: GetCheckDetailRequest
        @return: GetCheckDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_check_detail_with_options_async(request, runtime)

    def get_check_process_with_options(
        self,
        request: sas_20181203_models.GetCheckProcessRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetCheckProcessResponse:
        """
        @summary Queries the progress of a configuration check task on cloud services.
        
        @param request: GetCheckProcessRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCheckProcessResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.task_id):
            query['TaskId'] = request.task_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCheckProcess',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetCheckProcessResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_check_process_with_options_async(
        self,
        request: sas_20181203_models.GetCheckProcessRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetCheckProcessResponse:
        """
        @summary Queries the progress of a configuration check task on cloud services.
        
        @param request: GetCheckProcessRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCheckProcessResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.task_id):
            query['TaskId'] = request.task_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCheckProcess',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetCheckProcessResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_check_process(
        self,
        request: sas_20181203_models.GetCheckProcessRequest,
    ) -> sas_20181203_models.GetCheckProcessResponse:
        """
        @summary Queries the progress of a configuration check task on cloud services.
        
        @param request: GetCheckProcessRequest
        @return: GetCheckProcessResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_check_process_with_options(request, runtime)

    async def get_check_process_async(
        self,
        request: sas_20181203_models.GetCheckProcessRequest,
    ) -> sas_20181203_models.GetCheckProcessResponse:
        """
        @summary Queries the progress of a configuration check task on cloud services.
        
        @param request: GetCheckProcessRequest
        @return: GetCheckProcessResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_check_process_with_options_async(request, runtime)

    def get_check_risk_statistics_with_options(
        self,
        request: sas_20181203_models.GetCheckRiskStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetCheckRiskStatisticsResponse:
        """
        @summary Queries the statistics on risk scenarios and check items that are used in the risk scenarios, including the statistics on low-risk, medium-risk, and high-risk items by baseline type.
        
        @param request: GetCheckRiskStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCheckRiskStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCheckRiskStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetCheckRiskStatisticsResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_check_risk_statistics_with_options_async(
        self,
        request: sas_20181203_models.GetCheckRiskStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetCheckRiskStatisticsResponse:
        """
        @summary Queries the statistics on risk scenarios and check items that are used in the risk scenarios, including the statistics on low-risk, medium-risk, and high-risk items by baseline type.
        
        @param request: GetCheckRiskStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCheckRiskStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCheckRiskStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetCheckRiskStatisticsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_check_risk_statistics(
        self,
        request: sas_20181203_models.GetCheckRiskStatisticsRequest,
    ) -> sas_20181203_models.GetCheckRiskStatisticsResponse:
        """
        @summary Queries the statistics on risk scenarios and check items that are used in the risk scenarios, including the statistics on low-risk, medium-risk, and high-risk items by baseline type.
        
        @param request: GetCheckRiskStatisticsRequest
        @return: GetCheckRiskStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_check_risk_statistics_with_options(request, runtime)

    async def get_check_risk_statistics_async(
        self,
        request: sas_20181203_models.GetCheckRiskStatisticsRequest,
    ) -> sas_20181203_models.GetCheckRiskStatisticsResponse:
        """
        @summary Queries the statistics on risk scenarios and check items that are used in the risk scenarios, including the statistics on low-risk, medium-risk, and high-risk items by baseline type.
        
        @param request: GetCheckRiskStatisticsRequest
        @return: GetCheckRiskStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_check_risk_statistics_with_options_async(request, runtime)

    def get_check_sale_with_options(
        self,
        request: sas_20181203_models.GetCheckSaleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetCheckSaleResponse:
        """
        @summary Queries the sales information about the configuration assessment feature, including the purchased quota and the consumed quota.
        
        @param request: GetCheckSaleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCheckSaleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCheckSale',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetCheckSaleResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_check_sale_with_options_async(
        self,
        request: sas_20181203_models.GetCheckSaleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetCheckSaleResponse:
        """
        @summary Queries the sales information about the configuration assessment feature, including the purchased quota and the consumed quota.
        
        @param request: GetCheckSaleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCheckSaleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCheckSale',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetCheckSaleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_check_sale(
        self,
        request: sas_20181203_models.GetCheckSaleRequest,
    ) -> sas_20181203_models.GetCheckSaleResponse:
        """
        @summary Queries the sales information about the configuration assessment feature, including the purchased quota and the consumed quota.
        
        @param request: GetCheckSaleRequest
        @return: GetCheckSaleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_check_sale_with_options(request, runtime)

    async def get_check_sale_async(
        self,
        request: sas_20181203_models.GetCheckSaleRequest,
    ) -> sas_20181203_models.GetCheckSaleResponse:
        """
        @summary Queries the sales information about the configuration assessment feature, including the purchased quota and the consumed quota.
        
        @param request: GetCheckSaleRequest
        @return: GetCheckSaleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_check_sale_with_options_async(request, runtime)

    def get_check_structure_with_options(
        self,
        request: sas_20181203_models.GetCheckStructureRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetCheckStructureResponse:
        """
        @summary Obtains the structure information about check items provided by the configuration assessment feature.
        
        @description You must purchase the configuration assessment feature before you can use the feature.
        
        @param request: GetCheckStructureRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCheckStructureResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        if not UtilClient.is_unset(request.task_sources):
            query['TaskSources'] = request.task_sources
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCheckStructure',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetCheckStructureResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_check_structure_with_options_async(
        self,
        request: sas_20181203_models.GetCheckStructureRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetCheckStructureResponse:
        """
        @summary Obtains the structure information about check items provided by the configuration assessment feature.
        
        @description You must purchase the configuration assessment feature before you can use the feature.
        
        @param request: GetCheckStructureRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCheckStructureResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        if not UtilClient.is_unset(request.task_sources):
            query['TaskSources'] = request.task_sources
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCheckStructure',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetCheckStructureResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_check_structure(
        self,
        request: sas_20181203_models.GetCheckStructureRequest,
    ) -> sas_20181203_models.GetCheckStructureResponse:
        """
        @summary Obtains the structure information about check items provided by the configuration assessment feature.
        
        @description You must purchase the configuration assessment feature before you can use the feature.
        
        @param request: GetCheckStructureRequest
        @return: GetCheckStructureResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_check_structure_with_options(request, runtime)

    async def get_check_structure_async(
        self,
        request: sas_20181203_models.GetCheckStructureRequest,
    ) -> sas_20181203_models.GetCheckStructureResponse:
        """
        @summary Obtains the structure information about check items provided by the configuration assessment feature.
        
        @description You must purchase the configuration assessment feature before you can use the feature.
        
        @param request: GetCheckStructureRequest
        @return: GetCheckStructureResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_check_structure_with_options_async(request, runtime)

    def get_check_summary_with_options(
        self,
        request: sas_20181203_models.GetCheckSummaryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetCheckSummaryResponse:
        """
        @summary Queries the summary information about the configuration checks on cloud services.
        
        @param request: GetCheckSummaryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCheckSummaryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.is_item_statistic):
            query['IsItemStatistic'] = request.is_item_statistic
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.task_sources):
            query['TaskSources'] = request.task_sources
        if not UtilClient.is_unset(request.vendors):
            query['Vendors'] = request.vendors
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCheckSummary',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetCheckSummaryResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_check_summary_with_options_async(
        self,
        request: sas_20181203_models.GetCheckSummaryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetCheckSummaryResponse:
        """
        @summary Queries the summary information about the configuration checks on cloud services.
        
        @param request: GetCheckSummaryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCheckSummaryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.is_item_statistic):
            query['IsItemStatistic'] = request.is_item_statistic
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.task_sources):
            query['TaskSources'] = request.task_sources
        if not UtilClient.is_unset(request.vendors):
            query['Vendors'] = request.vendors
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCheckSummary',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetCheckSummaryResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_check_summary(
        self,
        request: sas_20181203_models.GetCheckSummaryRequest,
    ) -> sas_20181203_models.GetCheckSummaryResponse:
        """
        @summary Queries the summary information about the configuration checks on cloud services.
        
        @param request: GetCheckSummaryRequest
        @return: GetCheckSummaryResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_check_summary_with_options(request, runtime)

    async def get_check_summary_async(
        self,
        request: sas_20181203_models.GetCheckSummaryRequest,
    ) -> sas_20181203_models.GetCheckSummaryResponse:
        """
        @summary Queries the summary information about the configuration checks on cloud services.
        
        @param request: GetCheckSummaryRequest
        @return: GetCheckSummaryResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_check_summary_with_options_async(request, runtime)

    def get_check_time_dimension_statistic_with_options(
        self,
        request: sas_20181203_models.GetCheckTimeDimensionStatisticRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetCheckTimeDimensionStatisticResponse:
        """
        @summary Get time trend statistics data
        
        @param request: GetCheckTimeDimensionStatisticRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCheckTimeDimensionStatisticResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.end_time_stamp):
            query['EndTimeStamp'] = request.end_time_stamp
        if not UtilClient.is_unset(request.start_time_stamp):
            query['StartTimeStamp'] = request.start_time_stamp
        if not UtilClient.is_unset(request.statistic_type):
            query['StatisticType'] = request.statistic_type
        if not UtilClient.is_unset(request.vendors):
            query['Vendors'] = request.vendors
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCheckTimeDimensionStatistic',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetCheckTimeDimensionStatisticResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_check_time_dimension_statistic_with_options_async(
        self,
        request: sas_20181203_models.GetCheckTimeDimensionStatisticRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetCheckTimeDimensionStatisticResponse:
        """
        @summary Get time trend statistics data
        
        @param request: GetCheckTimeDimensionStatisticRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCheckTimeDimensionStatisticResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.end_time_stamp):
            query['EndTimeStamp'] = request.end_time_stamp
        if not UtilClient.is_unset(request.start_time_stamp):
            query['StartTimeStamp'] = request.start_time_stamp
        if not UtilClient.is_unset(request.statistic_type):
            query['StatisticType'] = request.statistic_type
        if not UtilClient.is_unset(request.vendors):
            query['Vendors'] = request.vendors
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCheckTimeDimensionStatistic',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetCheckTimeDimensionStatisticResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_check_time_dimension_statistic(
        self,
        request: sas_20181203_models.GetCheckTimeDimensionStatisticRequest,
    ) -> sas_20181203_models.GetCheckTimeDimensionStatisticResponse:
        """
        @summary Get time trend statistics data
        
        @param request: GetCheckTimeDimensionStatisticRequest
        @return: GetCheckTimeDimensionStatisticResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_check_time_dimension_statistic_with_options(request, runtime)

    async def get_check_time_dimension_statistic_async(
        self,
        request: sas_20181203_models.GetCheckTimeDimensionStatisticRequest,
    ) -> sas_20181203_models.GetCheckTimeDimensionStatisticResponse:
        """
        @summary Get time trend statistics data
        
        @param request: GetCheckTimeDimensionStatisticRequest
        @return: GetCheckTimeDimensionStatisticResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_check_time_dimension_statistic_with_options_async(request, runtime)

    def get_client_ratio_statistic_with_options(
        self,
        request: sas_20181203_models.GetClientRatioStatisticRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetClientRatioStatisticResponse:
        """
        @summary Queries the installation rate and online rate of the agent.
        
        @param request: GetClientRatioStatisticRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetClientRatioStatisticResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.statistic_types):
            query['StatisticTypes'] = request.statistic_types
        if not UtilClient.is_unset(request.time_end):
            query['TimeEnd'] = request.time_end
        if not UtilClient.is_unset(request.time_start):
            query['TimeStart'] = request.time_start
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetClientRatioStatistic',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetClientRatioStatisticResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_client_ratio_statistic_with_options_async(
        self,
        request: sas_20181203_models.GetClientRatioStatisticRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetClientRatioStatisticResponse:
        """
        @summary Queries the installation rate and online rate of the agent.
        
        @param request: GetClientRatioStatisticRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetClientRatioStatisticResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.statistic_types):
            query['StatisticTypes'] = request.statistic_types
        if not UtilClient.is_unset(request.time_end):
            query['TimeEnd'] = request.time_end
        if not UtilClient.is_unset(request.time_start):
            query['TimeStart'] = request.time_start
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetClientRatioStatistic',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetClientRatioStatisticResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_client_ratio_statistic(
        self,
        request: sas_20181203_models.GetClientRatioStatisticRequest,
    ) -> sas_20181203_models.GetClientRatioStatisticResponse:
        """
        @summary Queries the installation rate and online rate of the agent.
        
        @param request: GetClientRatioStatisticRequest
        @return: GetClientRatioStatisticResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_client_ratio_statistic_with_options(request, runtime)

    async def get_client_ratio_statistic_async(
        self,
        request: sas_20181203_models.GetClientRatioStatisticRequest,
    ) -> sas_20181203_models.GetClientRatioStatisticResponse:
        """
        @summary Queries the installation rate and online rate of the agent.
        
        @param request: GetClientRatioStatisticRequest
        @return: GetClientRatioStatisticResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_client_ratio_statistic_with_options_async(request, runtime)

    def get_client_user_define_rule_with_options(
        self,
        request: sas_20181203_models.GetClientUserDefineRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetClientUserDefineRuleResponse:
        """
        @summary Queries the information about a custom defense rule.
        
        @param request: GetClientUserDefineRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetClientUserDefineRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetClientUserDefineRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetClientUserDefineRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_client_user_define_rule_with_options_async(
        self,
        request: sas_20181203_models.GetClientUserDefineRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetClientUserDefineRuleResponse:
        """
        @summary Queries the information about a custom defense rule.
        
        @param request: GetClientUserDefineRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetClientUserDefineRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetClientUserDefineRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetClientUserDefineRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_client_user_define_rule(
        self,
        request: sas_20181203_models.GetClientUserDefineRuleRequest,
    ) -> sas_20181203_models.GetClientUserDefineRuleResponse:
        """
        @summary Queries the information about a custom defense rule.
        
        @param request: GetClientUserDefineRuleRequest
        @return: GetClientUserDefineRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_client_user_define_rule_with_options(request, runtime)

    async def get_client_user_define_rule_async(
        self,
        request: sas_20181203_models.GetClientUserDefineRuleRequest,
    ) -> sas_20181203_models.GetClientUserDefineRuleResponse:
        """
        @summary Queries the information about a custom defense rule.
        
        @param request: GetClientUserDefineRuleRequest
        @return: GetClientUserDefineRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_client_user_define_rule_with_options_async(request, runtime)

    def get_cloud_asset_criteria_with_options(
        self,
        request: sas_20181203_models.GetCloudAssetCriteriaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetCloudAssetCriteriaResponse:
        """
        @summary Queries the filter conditions that are used to search for cloud assets.
        
        @param request: GetCloudAssetCriteriaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCloudAssetCriteriaResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cloud_asset_types):
            query['CloudAssetTypes'] = request.cloud_asset_types
        if not UtilClient.is_unset(request.value):
            query['Value'] = request.value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCloudAssetCriteria',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetCloudAssetCriteriaResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_cloud_asset_criteria_with_options_async(
        self,
        request: sas_20181203_models.GetCloudAssetCriteriaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetCloudAssetCriteriaResponse:
        """
        @summary Queries the filter conditions that are used to search for cloud assets.
        
        @param request: GetCloudAssetCriteriaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCloudAssetCriteriaResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cloud_asset_types):
            query['CloudAssetTypes'] = request.cloud_asset_types
        if not UtilClient.is_unset(request.value):
            query['Value'] = request.value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCloudAssetCriteria',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetCloudAssetCriteriaResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_cloud_asset_criteria(
        self,
        request: sas_20181203_models.GetCloudAssetCriteriaRequest,
    ) -> sas_20181203_models.GetCloudAssetCriteriaResponse:
        """
        @summary Queries the filter conditions that are used to search for cloud assets.
        
        @param request: GetCloudAssetCriteriaRequest
        @return: GetCloudAssetCriteriaResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_cloud_asset_criteria_with_options(request, runtime)

    async def get_cloud_asset_criteria_async(
        self,
        request: sas_20181203_models.GetCloudAssetCriteriaRequest,
    ) -> sas_20181203_models.GetCloudAssetCriteriaResponse:
        """
        @summary Queries the filter conditions that are used to search for cloud assets.
        
        @param request: GetCloudAssetCriteriaRequest
        @return: GetCloudAssetCriteriaResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_cloud_asset_criteria_with_options_async(request, runtime)

    def get_cloud_asset_detail_with_options(
        self,
        request: sas_20181203_models.GetCloudAssetDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetCloudAssetDetailResponse:
        """
        @summary Obtains the details of cloud assets.
        
        @param request: GetCloudAssetDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCloudAssetDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.asset_sub_type):
            query['AssetSubType'] = request.asset_sub_type
        if not UtilClient.is_unset(request.asset_type):
            query['AssetType'] = request.asset_type
        if not UtilClient.is_unset(request.cloud_asset_instances):
            query['CloudAssetInstances'] = request.cloud_asset_instances
        if not UtilClient.is_unset(request.vendor):
            query['Vendor'] = request.vendor
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCloudAssetDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetCloudAssetDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_cloud_asset_detail_with_options_async(
        self,
        request: sas_20181203_models.GetCloudAssetDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetCloudAssetDetailResponse:
        """
        @summary Obtains the details of cloud assets.
        
        @param request: GetCloudAssetDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCloudAssetDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.asset_sub_type):
            query['AssetSubType'] = request.asset_sub_type
        if not UtilClient.is_unset(request.asset_type):
            query['AssetType'] = request.asset_type
        if not UtilClient.is_unset(request.cloud_asset_instances):
            query['CloudAssetInstances'] = request.cloud_asset_instances
        if not UtilClient.is_unset(request.vendor):
            query['Vendor'] = request.vendor
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCloudAssetDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetCloudAssetDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_cloud_asset_detail(
        self,
        request: sas_20181203_models.GetCloudAssetDetailRequest,
    ) -> sas_20181203_models.GetCloudAssetDetailResponse:
        """
        @summary Obtains the details of cloud assets.
        
        @param request: GetCloudAssetDetailRequest
        @return: GetCloudAssetDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_cloud_asset_detail_with_options(request, runtime)

    async def get_cloud_asset_detail_async(
        self,
        request: sas_20181203_models.GetCloudAssetDetailRequest,
    ) -> sas_20181203_models.GetCloudAssetDetailResponse:
        """
        @summary Obtains the details of cloud assets.
        
        @param request: GetCloudAssetDetailRequest
        @return: GetCloudAssetDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_cloud_asset_detail_with_options_async(request, runtime)

    def get_cloud_asset_summary_with_options(
        self,
        request: sas_20181203_models.GetCloudAssetSummaryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetCloudAssetSummaryResponse:
        """
        @summary The total number of instances that are at risk.
        
        @param request: GetCloudAssetSummaryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCloudAssetSummaryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cloud_asset_types):
            query['CloudAssetTypes'] = request.cloud_asset_types
        if not UtilClient.is_unset(request.vendors):
            query['Vendors'] = request.vendors
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCloudAssetSummary',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetCloudAssetSummaryResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_cloud_asset_summary_with_options_async(
        self,
        request: sas_20181203_models.GetCloudAssetSummaryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetCloudAssetSummaryResponse:
        """
        @summary The total number of instances that are at risk.
        
        @param request: GetCloudAssetSummaryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCloudAssetSummaryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cloud_asset_types):
            query['CloudAssetTypes'] = request.cloud_asset_types
        if not UtilClient.is_unset(request.vendors):
            query['Vendors'] = request.vendors
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCloudAssetSummary',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetCloudAssetSummaryResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_cloud_asset_summary(
        self,
        request: sas_20181203_models.GetCloudAssetSummaryRequest,
    ) -> sas_20181203_models.GetCloudAssetSummaryResponse:
        """
        @summary The total number of instances that are at risk.
        
        @param request: GetCloudAssetSummaryRequest
        @return: GetCloudAssetSummaryResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_cloud_asset_summary_with_options(request, runtime)

    async def get_cloud_asset_summary_async(
        self,
        request: sas_20181203_models.GetCloudAssetSummaryRequest,
    ) -> sas_20181203_models.GetCloudAssetSummaryResponse:
        """
        @summary The total number of instances that are at risk.
        
        @param request: GetCloudAssetSummaryRequest
        @return: GetCloudAssetSummaryResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_cloud_asset_summary_with_options_async(request, runtime)

    def get_cluster_check_item_warning_statistics_with_options(
        self,
        request: sas_20181203_models.GetClusterCheckItemWarningStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetClusterCheckItemWarningStatisticsResponse:
        """
        @summary Queries the statistics on baseline risk items of container clusters.
        
        @param request: GetClusterCheckItemWarningStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetClusterCheckItemWarningStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetClusterCheckItemWarningStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetClusterCheckItemWarningStatisticsResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_cluster_check_item_warning_statistics_with_options_async(
        self,
        request: sas_20181203_models.GetClusterCheckItemWarningStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetClusterCheckItemWarningStatisticsResponse:
        """
        @summary Queries the statistics on baseline risk items of container clusters.
        
        @param request: GetClusterCheckItemWarningStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetClusterCheckItemWarningStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetClusterCheckItemWarningStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetClusterCheckItemWarningStatisticsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_cluster_check_item_warning_statistics(
        self,
        request: sas_20181203_models.GetClusterCheckItemWarningStatisticsRequest,
    ) -> sas_20181203_models.GetClusterCheckItemWarningStatisticsResponse:
        """
        @summary Queries the statistics on baseline risk items of container clusters.
        
        @param request: GetClusterCheckItemWarningStatisticsRequest
        @return: GetClusterCheckItemWarningStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_cluster_check_item_warning_statistics_with_options(request, runtime)

    async def get_cluster_check_item_warning_statistics_async(
        self,
        request: sas_20181203_models.GetClusterCheckItemWarningStatisticsRequest,
    ) -> sas_20181203_models.GetClusterCheckItemWarningStatisticsResponse:
        """
        @summary Queries the statistics on baseline risk items of container clusters.
        
        @param request: GetClusterCheckItemWarningStatisticsRequest
        @return: GetClusterCheckItemWarningStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_cluster_check_item_warning_statistics_with_options_async(request, runtime)

    def get_cluster_rule_summary_with_options(
        self,
        request: sas_20181203_models.GetClusterRuleSummaryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetClusterRuleSummaryResponse:
        """
        @summary Queries the overall information about cluster defense rules that are configured for the container firewall feature.
        
        @param request: GetClusterRuleSummaryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetClusterRuleSummaryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetClusterRuleSummary',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetClusterRuleSummaryResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_cluster_rule_summary_with_options_async(
        self,
        request: sas_20181203_models.GetClusterRuleSummaryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetClusterRuleSummaryResponse:
        """
        @summary Queries the overall information about cluster defense rules that are configured for the container firewall feature.
        
        @param request: GetClusterRuleSummaryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetClusterRuleSummaryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetClusterRuleSummary',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetClusterRuleSummaryResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_cluster_rule_summary(
        self,
        request: sas_20181203_models.GetClusterRuleSummaryRequest,
    ) -> sas_20181203_models.GetClusterRuleSummaryResponse:
        """
        @summary Queries the overall information about cluster defense rules that are configured for the container firewall feature.
        
        @param request: GetClusterRuleSummaryRequest
        @return: GetClusterRuleSummaryResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_cluster_rule_summary_with_options(request, runtime)

    async def get_cluster_rule_summary_async(
        self,
        request: sas_20181203_models.GetClusterRuleSummaryRequest,
    ) -> sas_20181203_models.GetClusterRuleSummaryResponse:
        """
        @summary Queries the overall information about cluster defense rules that are configured for the container firewall feature.
        
        @param request: GetClusterRuleSummaryRequest
        @return: GetClusterRuleSummaryResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_cluster_rule_summary_with_options_async(request, runtime)

    def get_cluster_strategy_count_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetClusterStrategyCountResponse:
        """
        @summary Queries the number of policies in each cluster.
        
        @param request: GetClusterStrategyCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetClusterStrategyCountResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetClusterStrategyCount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetClusterStrategyCountResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_cluster_strategy_count_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetClusterStrategyCountResponse:
        """
        @summary Queries the number of policies in each cluster.
        
        @param request: GetClusterStrategyCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetClusterStrategyCountResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetClusterStrategyCount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetClusterStrategyCountResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_cluster_strategy_count(self) -> sas_20181203_models.GetClusterStrategyCountResponse:
        """
        @summary Queries the number of policies in each cluster.
        
        @return: GetClusterStrategyCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_cluster_strategy_count_with_options(runtime)

    async def get_cluster_strategy_count_async(self) -> sas_20181203_models.GetClusterStrategyCountResponse:
        """
        @summary Queries the number of policies in each cluster.
        
        @return: GetClusterStrategyCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_cluster_strategy_count_with_options_async(runtime)

    def get_cluster_susp_event_statistics_with_options(
        self,
        request: sas_20181203_models.GetClusterSuspEventStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetClusterSuspEventStatisticsResponse:
        """
        @summary Queries the statistics on alert events that are generated for containers.
        
        @param request: GetClusterSuspEventStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetClusterSuspEventStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetClusterSuspEventStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetClusterSuspEventStatisticsResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_cluster_susp_event_statistics_with_options_async(
        self,
        request: sas_20181203_models.GetClusterSuspEventStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetClusterSuspEventStatisticsResponse:
        """
        @summary Queries the statistics on alert events that are generated for containers.
        
        @param request: GetClusterSuspEventStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetClusterSuspEventStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetClusterSuspEventStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetClusterSuspEventStatisticsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_cluster_susp_event_statistics(
        self,
        request: sas_20181203_models.GetClusterSuspEventStatisticsRequest,
    ) -> sas_20181203_models.GetClusterSuspEventStatisticsResponse:
        """
        @summary Queries the statistics on alert events that are generated for containers.
        
        @param request: GetClusterSuspEventStatisticsRequest
        @return: GetClusterSuspEventStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_cluster_susp_event_statistics_with_options(request, runtime)

    async def get_cluster_susp_event_statistics_async(
        self,
        request: sas_20181203_models.GetClusterSuspEventStatisticsRequest,
    ) -> sas_20181203_models.GetClusterSuspEventStatisticsResponse:
        """
        @summary Queries the statistics on alert events that are generated for containers.
        
        @param request: GetClusterSuspEventStatisticsRequest
        @return: GetClusterSuspEventStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_cluster_susp_event_statistics_with_options_async(request, runtime)

    def get_common_switch_config_with_options(
        self,
        request: sas_20181203_models.GetCommonSwitchConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetCommonSwitchConfigResponse:
        """
        @summary Queries the configuration of a common switch.
        
        @param request: GetCommonSwitchConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCommonSwitchConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCommonSwitchConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetCommonSwitchConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_common_switch_config_with_options_async(
        self,
        request: sas_20181203_models.GetCommonSwitchConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetCommonSwitchConfigResponse:
        """
        @summary Queries the configuration of a common switch.
        
        @param request: GetCommonSwitchConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCommonSwitchConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCommonSwitchConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetCommonSwitchConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_common_switch_config(
        self,
        request: sas_20181203_models.GetCommonSwitchConfigRequest,
    ) -> sas_20181203_models.GetCommonSwitchConfigResponse:
        """
        @summary Queries the configuration of a common switch.
        
        @param request: GetCommonSwitchConfigRequest
        @return: GetCommonSwitchConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_common_switch_config_with_options(request, runtime)

    async def get_common_switch_config_async(
        self,
        request: sas_20181203_models.GetCommonSwitchConfigRequest,
    ) -> sas_20181203_models.GetCommonSwitchConfigResponse:
        """
        @summary Queries the configuration of a common switch.
        
        @param request: GetCommonSwitchConfigRequest
        @return: GetCommonSwitchConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_common_switch_config_with_options_async(request, runtime)

    def get_console_func_gray_status_with_options(
        self,
        request: sas_20181203_models.GetConsoleFuncGrayStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetConsoleFuncGrayStatusResponse:
        """
        @summary Query whether the core function\\"s gray switch is hit
        
        @param request: GetConsoleFuncGrayStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetConsoleFuncGrayStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.condition):
            query['Condition'] = request.condition
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetConsoleFuncGrayStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetConsoleFuncGrayStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_console_func_gray_status_with_options_async(
        self,
        request: sas_20181203_models.GetConsoleFuncGrayStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetConsoleFuncGrayStatusResponse:
        """
        @summary Query whether the core function\\"s gray switch is hit
        
        @param request: GetConsoleFuncGrayStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetConsoleFuncGrayStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.condition):
            query['Condition'] = request.condition
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetConsoleFuncGrayStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetConsoleFuncGrayStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_console_func_gray_status(
        self,
        request: sas_20181203_models.GetConsoleFuncGrayStatusRequest,
    ) -> sas_20181203_models.GetConsoleFuncGrayStatusResponse:
        """
        @summary Query whether the core function\\"s gray switch is hit
        
        @param request: GetConsoleFuncGrayStatusRequest
        @return: GetConsoleFuncGrayStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_console_func_gray_status_with_options(request, runtime)

    async def get_console_func_gray_status_async(
        self,
        request: sas_20181203_models.GetConsoleFuncGrayStatusRequest,
    ) -> sas_20181203_models.GetConsoleFuncGrayStatusResponse:
        """
        @summary Query whether the core function\\"s gray switch is hit
        
        @param request: GetConsoleFuncGrayStatusRequest
        @return: GetConsoleFuncGrayStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_console_func_gray_status_with_options_async(request, runtime)

    def get_container_defense_rule_detail_with_options(
        self,
        request: sas_20181203_models.GetContainerDefenseRuleDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetContainerDefenseRuleDetailResponse:
        """
        @summary Queries the details of a rule for non-image program defense.
        
        @param request: GetContainerDefenseRuleDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetContainerDefenseRuleDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.rule_id):
            query['RuleId'] = request.rule_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetContainerDefenseRuleDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetContainerDefenseRuleDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_container_defense_rule_detail_with_options_async(
        self,
        request: sas_20181203_models.GetContainerDefenseRuleDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetContainerDefenseRuleDetailResponse:
        """
        @summary Queries the details of a rule for non-image program defense.
        
        @param request: GetContainerDefenseRuleDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetContainerDefenseRuleDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.rule_id):
            query['RuleId'] = request.rule_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetContainerDefenseRuleDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetContainerDefenseRuleDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_container_defense_rule_detail(
        self,
        request: sas_20181203_models.GetContainerDefenseRuleDetailRequest,
    ) -> sas_20181203_models.GetContainerDefenseRuleDetailResponse:
        """
        @summary Queries the details of a rule for non-image program defense.
        
        @param request: GetContainerDefenseRuleDetailRequest
        @return: GetContainerDefenseRuleDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_container_defense_rule_detail_with_options(request, runtime)

    async def get_container_defense_rule_detail_async(
        self,
        request: sas_20181203_models.GetContainerDefenseRuleDetailRequest,
    ) -> sas_20181203_models.GetContainerDefenseRuleDetailResponse:
        """
        @summary Queries the details of a rule for non-image program defense.
        
        @param request: GetContainerDefenseRuleDetailRequest
        @return: GetContainerDefenseRuleDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_container_defense_rule_detail_with_options_async(request, runtime)

    def get_current_version_publish_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetCurrentVersionPublishResponse:
        """
        @summary Queries the publish details of the Security Center agent.
        
        @param request: GetCurrentVersionPublishRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCurrentVersionPublishResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetCurrentVersionPublish',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetCurrentVersionPublishResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_current_version_publish_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetCurrentVersionPublishResponse:
        """
        @summary Queries the publish details of the Security Center agent.
        
        @param request: GetCurrentVersionPublishRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCurrentVersionPublishResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetCurrentVersionPublish',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetCurrentVersionPublishResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_current_version_publish(self) -> sas_20181203_models.GetCurrentVersionPublishResponse:
        """
        @summary Queries the publish details of the Security Center agent.
        
        @return: GetCurrentVersionPublishResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_current_version_publish_with_options(runtime)

    async def get_current_version_publish_async(self) -> sas_20181203_models.GetCurrentVersionPublishResponse:
        """
        @summary Queries the publish details of the Security Center agent.
        
        @return: GetCurrentVersionPublishResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_current_version_publish_with_options_async(runtime)

    def get_data_trend_with_options(
        self,
        request: sas_20181203_models.GetDataTrendRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetDataTrendResponse:
        """
        @summary Queries the security operations trends of the vulnerabilities, alerts, and baseline risks.
        
        @param request: GetDataTrendRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDataTrendResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.biz_types):
            query['BizTypes'] = request.biz_types
        if not UtilClient.is_unset(request.end_timestamp):
            query['EndTimestamp'] = request.end_timestamp
        if not UtilClient.is_unset(request.interval):
            query['Interval'] = request.interval
        if not UtilClient.is_unset(request.start_timestamp):
            query['StartTimestamp'] = request.start_timestamp
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetDataTrend',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetDataTrendResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_data_trend_with_options_async(
        self,
        request: sas_20181203_models.GetDataTrendRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetDataTrendResponse:
        """
        @summary Queries the security operations trends of the vulnerabilities, alerts, and baseline risks.
        
        @param request: GetDataTrendRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDataTrendResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.biz_types):
            query['BizTypes'] = request.biz_types
        if not UtilClient.is_unset(request.end_timestamp):
            query['EndTimestamp'] = request.end_timestamp
        if not UtilClient.is_unset(request.interval):
            query['Interval'] = request.interval
        if not UtilClient.is_unset(request.start_timestamp):
            query['StartTimestamp'] = request.start_timestamp
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetDataTrend',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetDataTrendResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_data_trend(
        self,
        request: sas_20181203_models.GetDataTrendRequest,
    ) -> sas_20181203_models.GetDataTrendResponse:
        """
        @summary Queries the security operations trends of the vulnerabilities, alerts, and baseline risks.
        
        @param request: GetDataTrendRequest
        @return: GetDataTrendResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_data_trend_with_options(request, runtime)

    async def get_data_trend_async(
        self,
        request: sas_20181203_models.GetDataTrendRequest,
    ) -> sas_20181203_models.GetDataTrendResponse:
        """
        @summary Queries the security operations trends of the vulnerabilities, alerts, and baseline risks.
        
        @param request: GetDataTrendRequest
        @return: GetDataTrendResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_data_trend_with_options_async(request, runtime)

    def get_defence_count_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetDefenceCountResponse:
        """
        @summary Queries the numbers of handled alerts of the precision defense type and the web tamper proofing type.
        
        @param request: GetDefenceCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDefenceCountResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetDefenceCount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetDefenceCountResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_defence_count_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetDefenceCountResponse:
        """
        @summary Queries the numbers of handled alerts of the precision defense type and the web tamper proofing type.
        
        @param request: GetDefenceCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDefenceCountResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetDefenceCount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetDefenceCountResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_defence_count(self) -> sas_20181203_models.GetDefenceCountResponse:
        """
        @summary Queries the numbers of handled alerts of the precision defense type and the web tamper proofing type.
        
        @return: GetDefenceCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_defence_count_with_options(runtime)

    async def get_defence_count_async(self) -> sas_20181203_models.GetDefenceCountResponse:
        """
        @summary Queries the numbers of handled alerts of the precision defense type and the web tamper proofing type.
        
        @return: GetDefenceCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_defence_count_with_options_async(runtime)

    def get_dockerhub_image_risk_rank_info_with_options(
        self,
        request: sas_20181203_models.GetDockerhubImageRiskRankInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetDockerhubImageRiskRankInfoResponse:
        """
        @summary Queries the ranking of images in each dimension.
        
        @param request: GetDockerhubImageRiskRankInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDockerhubImageRiskRankInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.types):
            query['Types'] = request.types
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetDockerhubImageRiskRankInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetDockerhubImageRiskRankInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_dockerhub_image_risk_rank_info_with_options_async(
        self,
        request: sas_20181203_models.GetDockerhubImageRiskRankInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetDockerhubImageRiskRankInfoResponse:
        """
        @summary Queries the ranking of images in each dimension.
        
        @param request: GetDockerhubImageRiskRankInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDockerhubImageRiskRankInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.types):
            query['Types'] = request.types
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetDockerhubImageRiskRankInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetDockerhubImageRiskRankInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_dockerhub_image_risk_rank_info(
        self,
        request: sas_20181203_models.GetDockerhubImageRiskRankInfoRequest,
    ) -> sas_20181203_models.GetDockerhubImageRiskRankInfoResponse:
        """
        @summary Queries the ranking of images in each dimension.
        
        @param request: GetDockerhubImageRiskRankInfoRequest
        @return: GetDockerhubImageRiskRankInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_dockerhub_image_risk_rank_info_with_options(request, runtime)

    async def get_dockerhub_image_risk_rank_info_async(
        self,
        request: sas_20181203_models.GetDockerhubImageRiskRankInfoRequest,
    ) -> sas_20181203_models.GetDockerhubImageRiskRankInfoResponse:
        """
        @summary Queries the ranking of images in each dimension.
        
        @param request: GetDockerhubImageRiskRankInfoRequest
        @return: GetDockerhubImageRiskRankInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_dockerhub_image_risk_rank_info_with_options_async(request, runtime)

    def get_dockerhub_image_risk_statistic_with_options(
        self,
        request: sas_20181203_models.GetDockerhubImageRiskStatisticRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetDockerhubImageRiskStatisticResponse:
        """
        @summary Query the statistical counts of images across various dimensions.
        
        @param request: GetDockerhubImageRiskStatisticRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDockerhubImageRiskStatisticResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.types):
            query['Types'] = request.types
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetDockerhubImageRiskStatistic',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetDockerhubImageRiskStatisticResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_dockerhub_image_risk_statistic_with_options_async(
        self,
        request: sas_20181203_models.GetDockerhubImageRiskStatisticRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetDockerhubImageRiskStatisticResponse:
        """
        @summary Query the statistical counts of images across various dimensions.
        
        @param request: GetDockerhubImageRiskStatisticRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDockerhubImageRiskStatisticResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.types):
            query['Types'] = request.types
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetDockerhubImageRiskStatistic',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetDockerhubImageRiskStatisticResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_dockerhub_image_risk_statistic(
        self,
        request: sas_20181203_models.GetDockerhubImageRiskStatisticRequest,
    ) -> sas_20181203_models.GetDockerhubImageRiskStatisticResponse:
        """
        @summary Query the statistical counts of images across various dimensions.
        
        @param request: GetDockerhubImageRiskStatisticRequest
        @return: GetDockerhubImageRiskStatisticResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_dockerhub_image_risk_statistic_with_options(request, runtime)

    async def get_dockerhub_image_risk_statistic_async(
        self,
        request: sas_20181203_models.GetDockerhubImageRiskStatisticRequest,
    ) -> sas_20181203_models.GetDockerhubImageRiskStatisticResponse:
        """
        @summary Query the statistical counts of images across various dimensions.
        
        @param request: GetDockerhubImageRiskStatisticRequest
        @return: GetDockerhubImageRiskStatisticResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_dockerhub_image_risk_statistic_with_options_async(request, runtime)

    def get_file_detect_api_invoke_info_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetFileDetectApiInvokeInfoResponse:
        """
        @summary Obtains the usage information of the malicious file detection SDK.
        
        @param request: GetFileDetectApiInvokeInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetFileDetectApiInvokeInfoResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetFileDetectApiInvokeInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetFileDetectApiInvokeInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_file_detect_api_invoke_info_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetFileDetectApiInvokeInfoResponse:
        """
        @summary Obtains the usage information of the malicious file detection SDK.
        
        @param request: GetFileDetectApiInvokeInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetFileDetectApiInvokeInfoResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetFileDetectApiInvokeInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetFileDetectApiInvokeInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_file_detect_api_invoke_info(self) -> sas_20181203_models.GetFileDetectApiInvokeInfoResponse:
        """
        @summary Obtains the usage information of the malicious file detection SDK.
        
        @return: GetFileDetectApiInvokeInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_file_detect_api_invoke_info_with_options(runtime)

    async def get_file_detect_api_invoke_info_async(self) -> sas_20181203_models.GetFileDetectApiInvokeInfoResponse:
        """
        @summary Obtains the usage information of the malicious file detection SDK.
        
        @return: GetFileDetectApiInvokeInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_file_detect_api_invoke_info_with_options_async(runtime)

    def get_file_detect_report_with_options(
        self,
        request: sas_20181203_models.GetFileDetectReportRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetFileDetectReportResponse:
        """
        @summary Queries the cloud sandbox check results of malicious files.
        
        @param request: GetFileDetectReportRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetFileDetectReportResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.event_id):
            query['EventId'] = request.event_id
        if not UtilClient.is_unset(request.field):
            query['Field'] = request.field
        if not UtilClient.is_unset(request.file_hash):
            query['FileHash'] = request.file_hash
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_type):
            query['SourceType'] = request.source_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetFileDetectReport',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetFileDetectReportResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_file_detect_report_with_options_async(
        self,
        request: sas_20181203_models.GetFileDetectReportRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetFileDetectReportResponse:
        """
        @summary Queries the cloud sandbox check results of malicious files.
        
        @param request: GetFileDetectReportRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetFileDetectReportResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.event_id):
            query['EventId'] = request.event_id
        if not UtilClient.is_unset(request.field):
            query['Field'] = request.field
        if not UtilClient.is_unset(request.file_hash):
            query['FileHash'] = request.file_hash
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_type):
            query['SourceType'] = request.source_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetFileDetectReport',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetFileDetectReportResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_file_detect_report(
        self,
        request: sas_20181203_models.GetFileDetectReportRequest,
    ) -> sas_20181203_models.GetFileDetectReportResponse:
        """
        @summary Queries the cloud sandbox check results of malicious files.
        
        @param request: GetFileDetectReportRequest
        @return: GetFileDetectReportResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_file_detect_report_with_options(request, runtime)

    async def get_file_detect_report_async(
        self,
        request: sas_20181203_models.GetFileDetectReportRequest,
    ) -> sas_20181203_models.GetFileDetectReportResponse:
        """
        @summary Queries the cloud sandbox check results of malicious files.
        
        @param request: GetFileDetectReportRequest
        @return: GetFileDetectReportResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_file_detect_report_with_options_async(request, runtime)

    def get_file_detect_result_with_options(
        self,
        request: sas_20181203_models.GetFileDetectResultRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetFileDetectResultResponse:
        """
        @summary Obtains file detection results.
        
        @description The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.
        
        @param request: GetFileDetectResultRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetFileDetectResultResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.hash_key_list):
            query['HashKeyList'] = request.hash_key_list
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetFileDetectResult',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetFileDetectResultResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_file_detect_result_with_options_async(
        self,
        request: sas_20181203_models.GetFileDetectResultRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetFileDetectResultResponse:
        """
        @summary Obtains file detection results.
        
        @description The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.
        
        @param request: GetFileDetectResultRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetFileDetectResultResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.hash_key_list):
            query['HashKeyList'] = request.hash_key_list
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetFileDetectResult',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetFileDetectResultResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_file_detect_result(
        self,
        request: sas_20181203_models.GetFileDetectResultRequest,
    ) -> sas_20181203_models.GetFileDetectResultResponse:
        """
        @summary Obtains file detection results.
        
        @description The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.
        
        @param request: GetFileDetectResultRequest
        @return: GetFileDetectResultResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_file_detect_result_with_options(request, runtime)

    async def get_file_detect_result_async(
        self,
        request: sas_20181203_models.GetFileDetectResultRequest,
    ) -> sas_20181203_models.GetFileDetectResultResponse:
        """
        @summary Obtains file detection results.
        
        @description The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only MD5 hash values are supported. Before you call this operation, calculate the MD5 hash value of the file.
        
        @param request: GetFileDetectResultRequest
        @return: GetFileDetectResultResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_file_detect_result_with_options_async(request, runtime)

    def get_file_protect_dashboard_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetFileProtectDashboardResponse:
        """
        @summary Queries information about the core file monitoring feature, including the number of effective rules and the installation status of the Security Center agent on servers.
        
        @param request: GetFileProtectDashboardRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetFileProtectDashboardResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetFileProtectDashboard',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetFileProtectDashboardResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_file_protect_dashboard_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetFileProtectDashboardResponse:
        """
        @summary Queries information about the core file monitoring feature, including the number of effective rules and the installation status of the Security Center agent on servers.
        
        @param request: GetFileProtectDashboardRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetFileProtectDashboardResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetFileProtectDashboard',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetFileProtectDashboardResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_file_protect_dashboard(self) -> sas_20181203_models.GetFileProtectDashboardResponse:
        """
        @summary Queries information about the core file monitoring feature, including the number of effective rules and the installation status of the Security Center agent on servers.
        
        @return: GetFileProtectDashboardResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_file_protect_dashboard_with_options(runtime)

    async def get_file_protect_dashboard_async(self) -> sas_20181203_models.GetFileProtectDashboardResponse:
        """
        @summary Queries information about the core file monitoring feature, including the number of effective rules and the installation status of the Security Center agent on servers.
        
        @return: GetFileProtectDashboardResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_file_protect_dashboard_with_options_async(runtime)

    def get_file_protect_event_with_options(
        self,
        request: sas_20181203_models.GetFileProtectEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetFileProtectEventResponse:
        """
        @summary Queries information about core file monitoring events.
        
        @param request: GetFileProtectEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetFileProtectEventResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetFileProtectEvent',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetFileProtectEventResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_file_protect_event_with_options_async(
        self,
        request: sas_20181203_models.GetFileProtectEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetFileProtectEventResponse:
        """
        @summary Queries information about core file monitoring events.
        
        @param request: GetFileProtectEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetFileProtectEventResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetFileProtectEvent',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetFileProtectEventResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_file_protect_event(
        self,
        request: sas_20181203_models.GetFileProtectEventRequest,
    ) -> sas_20181203_models.GetFileProtectEventResponse:
        """
        @summary Queries information about core file monitoring events.
        
        @param request: GetFileProtectEventRequest
        @return: GetFileProtectEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_file_protect_event_with_options(request, runtime)

    async def get_file_protect_event_async(
        self,
        request: sas_20181203_models.GetFileProtectEventRequest,
    ) -> sas_20181203_models.GetFileProtectEventResponse:
        """
        @summary Queries information about core file monitoring events.
        
        @param request: GetFileProtectEventRequest
        @return: GetFileProtectEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_file_protect_event_with_options_async(request, runtime)

    def get_file_protect_event_count_with_options(
        self,
        request: sas_20181203_models.GetFileProtectEventCountRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetFileProtectEventCountResponse:
        """
        @summary Queries the total number of core file monitoring events by filter condition.
        
        @param request: GetFileProtectEventCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetFileProtectEventCountResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetFileProtectEventCount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetFileProtectEventCountResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_file_protect_event_count_with_options_async(
        self,
        request: sas_20181203_models.GetFileProtectEventCountRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetFileProtectEventCountResponse:
        """
        @summary Queries the total number of core file monitoring events by filter condition.
        
        @param request: GetFileProtectEventCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetFileProtectEventCountResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetFileProtectEventCount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetFileProtectEventCountResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_file_protect_event_count(
        self,
        request: sas_20181203_models.GetFileProtectEventCountRequest,
    ) -> sas_20181203_models.GetFileProtectEventCountResponse:
        """
        @summary Queries the total number of core file monitoring events by filter condition.
        
        @param request: GetFileProtectEventCountRequest
        @return: GetFileProtectEventCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_file_protect_event_count_with_options(request, runtime)

    async def get_file_protect_event_count_async(
        self,
        request: sas_20181203_models.GetFileProtectEventCountRequest,
    ) -> sas_20181203_models.GetFileProtectEventCountResponse:
        """
        @summary Queries the total number of core file monitoring events by filter condition.
        
        @param request: GetFileProtectEventCountRequest
        @return: GetFileProtectEventCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_file_protect_event_count_with_options_async(request, runtime)

    def get_file_protect_rule_with_options(
        self,
        request: sas_20181203_models.GetFileProtectRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetFileProtectRuleResponse:
        """
        @summary Queries the information about a core file monitoring rule based on the ID of the rule.
        
        @param request: GetFileProtectRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetFileProtectRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetFileProtectRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetFileProtectRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_file_protect_rule_with_options_async(
        self,
        request: sas_20181203_models.GetFileProtectRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetFileProtectRuleResponse:
        """
        @summary Queries the information about a core file monitoring rule based on the ID of the rule.
        
        @param request: GetFileProtectRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetFileProtectRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetFileProtectRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetFileProtectRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_file_protect_rule(
        self,
        request: sas_20181203_models.GetFileProtectRuleRequest,
    ) -> sas_20181203_models.GetFileProtectRuleResponse:
        """
        @summary Queries the information about a core file monitoring rule based on the ID of the rule.
        
        @param request: GetFileProtectRuleRequest
        @return: GetFileProtectRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_file_protect_rule_with_options(request, runtime)

    async def get_file_protect_rule_async(
        self,
        request: sas_20181203_models.GetFileProtectRuleRequest,
    ) -> sas_20181203_models.GetFileProtectRuleResponse:
        """
        @summary Queries the information about a core file monitoring rule based on the ID of the rule.
        
        @param request: GetFileProtectRuleRequest
        @return: GetFileProtectRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_file_protect_rule_with_options_async(request, runtime)

    def get_file_upload_limit_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetFileUploadLimitResponse:
        """
        @summary Queries the queries per second (QPS) limit on the files uploaded from the client.
        
        @param request: GetFileUploadLimitRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetFileUploadLimitResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetFileUploadLimit',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetFileUploadLimitResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_file_upload_limit_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetFileUploadLimitResponse:
        """
        @summary Queries the queries per second (QPS) limit on the files uploaded from the client.
        
        @param request: GetFileUploadLimitRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetFileUploadLimitResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetFileUploadLimit',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetFileUploadLimitResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_file_upload_limit(self) -> sas_20181203_models.GetFileUploadLimitResponse:
        """
        @summary Queries the queries per second (QPS) limit on the files uploaded from the client.
        
        @return: GetFileUploadLimitResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_file_upload_limit_with_options(runtime)

    async def get_file_upload_limit_async(self) -> sas_20181203_models.GetFileUploadLimitResponse:
        """
        @summary Queries the queries per second (QPS) limit on the files uploaded from the client.
        
        @return: GetFileUploadLimitResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_file_upload_limit_with_options_async(runtime)

    def get_function_trial_status_with_options(
        self,
        request: sas_20181203_models.GetFunctionTrialStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetFunctionTrialStatusResponse:
        """
        @summary Get Trial Status
        
        @param request: GetFunctionTrialStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetFunctionTrialStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.function_name):
            query['FunctionName'] = request.function_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetFunctionTrialStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetFunctionTrialStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_function_trial_status_with_options_async(
        self,
        request: sas_20181203_models.GetFunctionTrialStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetFunctionTrialStatusResponse:
        """
        @summary Get Trial Status
        
        @param request: GetFunctionTrialStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetFunctionTrialStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.function_name):
            query['FunctionName'] = request.function_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetFunctionTrialStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetFunctionTrialStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_function_trial_status(
        self,
        request: sas_20181203_models.GetFunctionTrialStatusRequest,
    ) -> sas_20181203_models.GetFunctionTrialStatusResponse:
        """
        @summary Get Trial Status
        
        @param request: GetFunctionTrialStatusRequest
        @return: GetFunctionTrialStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_function_trial_status_with_options(request, runtime)

    async def get_function_trial_status_async(
        self,
        request: sas_20181203_models.GetFunctionTrialStatusRequest,
    ) -> sas_20181203_models.GetFunctionTrialStatusResponse:
        """
        @summary Get Trial Status
        
        @param request: GetFunctionTrialStatusRequest
        @return: GetFunctionTrialStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_function_trial_status_with_options_async(request, runtime)

    def get_honey_pot_upload_policy_info_with_options(
        self,
        request: sas_20181203_models.GetHoneyPotUploadPolicyInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetHoneyPotUploadPolicyInfoResponse:
        """
        @summary Obtains the URL that is used to upload a file to a honeypot.
        
        @param request: GetHoneyPotUploadPolicyInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetHoneyPotUploadPolicyInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetHoneyPotUploadPolicyInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetHoneyPotUploadPolicyInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_honey_pot_upload_policy_info_with_options_async(
        self,
        request: sas_20181203_models.GetHoneyPotUploadPolicyInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetHoneyPotUploadPolicyInfoResponse:
        """
        @summary Obtains the URL that is used to upload a file to a honeypot.
        
        @param request: GetHoneyPotUploadPolicyInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetHoneyPotUploadPolicyInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetHoneyPotUploadPolicyInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetHoneyPotUploadPolicyInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_honey_pot_upload_policy_info(
        self,
        request: sas_20181203_models.GetHoneyPotUploadPolicyInfoRequest,
    ) -> sas_20181203_models.GetHoneyPotUploadPolicyInfoResponse:
        """
        @summary Obtains the URL that is used to upload a file to a honeypot.
        
        @param request: GetHoneyPotUploadPolicyInfoRequest
        @return: GetHoneyPotUploadPolicyInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_honey_pot_upload_policy_info_with_options(request, runtime)

    async def get_honey_pot_upload_policy_info_async(
        self,
        request: sas_20181203_models.GetHoneyPotUploadPolicyInfoRequest,
    ) -> sas_20181203_models.GetHoneyPotUploadPolicyInfoResponse:
        """
        @summary Obtains the URL that is used to upload a file to a honeypot.
        
        @param request: GetHoneyPotUploadPolicyInfoRequest
        @return: GetHoneyPotUploadPolicyInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_honey_pot_upload_policy_info_with_options_async(request, runtime)

    def get_honeypot_attack_statistics_with_options(
        self,
        request: sas_20181203_models.GetHoneypotAttackStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetHoneypotAttackStatisticsResponse:
        """
        @summary 获取蜜罐攻击统计数据
        
        @param request: GetHoneypotAttackStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetHoneypotAttackStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.end_time_stamp):
            query['EndTimeStamp'] = request.end_time_stamp
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.risk_level_list):
            query['RiskLevelList'] = request.risk_level_list
        if not UtilClient.is_unset(request.src_ip):
            query['SrcIp'] = request.src_ip
        if not UtilClient.is_unset(request.start_time_stamp):
            query['StartTimeStamp'] = request.start_time_stamp
        if not UtilClient.is_unset(request.statistics_type):
            query['StatisticsType'] = request.statistics_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetHoneypotAttackStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetHoneypotAttackStatisticsResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_honeypot_attack_statistics_with_options_async(
        self,
        request: sas_20181203_models.GetHoneypotAttackStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetHoneypotAttackStatisticsResponse:
        """
        @summary 获取蜜罐攻击统计数据
        
        @param request: GetHoneypotAttackStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetHoneypotAttackStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.end_time_stamp):
            query['EndTimeStamp'] = request.end_time_stamp
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.risk_level_list):
            query['RiskLevelList'] = request.risk_level_list
        if not UtilClient.is_unset(request.src_ip):
            query['SrcIp'] = request.src_ip
        if not UtilClient.is_unset(request.start_time_stamp):
            query['StartTimeStamp'] = request.start_time_stamp
        if not UtilClient.is_unset(request.statistics_type):
            query['StatisticsType'] = request.statistics_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetHoneypotAttackStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetHoneypotAttackStatisticsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_honeypot_attack_statistics(
        self,
        request: sas_20181203_models.GetHoneypotAttackStatisticsRequest,
    ) -> sas_20181203_models.GetHoneypotAttackStatisticsResponse:
        """
        @summary 获取蜜罐攻击统计数据
        
        @param request: GetHoneypotAttackStatisticsRequest
        @return: GetHoneypotAttackStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_honeypot_attack_statistics_with_options(request, runtime)

    async def get_honeypot_attack_statistics_async(
        self,
        request: sas_20181203_models.GetHoneypotAttackStatisticsRequest,
    ) -> sas_20181203_models.GetHoneypotAttackStatisticsResponse:
        """
        @summary 获取蜜罐攻击统计数据
        
        @param request: GetHoneypotAttackStatisticsRequest
        @return: GetHoneypotAttackStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_honeypot_attack_statistics_with_options_async(request, runtime)

    def get_honeypot_event_trend_with_options(
        self,
        request: sas_20181203_models.GetHoneypotEventTrendRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetHoneypotEventTrendResponse:
        """
        @summary Obtain attack trend statistics for a single attack source.
        
        @param request: GetHoneypotEventTrendRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetHoneypotEventTrendResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.end_time_stamp):
            query['EndTimeStamp'] = request.end_time_stamp
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.risk_level_list):
            query['RiskLevelList'] = request.risk_level_list
        if not UtilClient.is_unset(request.src_ip):
            query['SrcIp'] = request.src_ip
        if not UtilClient.is_unset(request.start_time_stamp):
            query['StartTimeStamp'] = request.start_time_stamp
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetHoneypotEventTrend',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetHoneypotEventTrendResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_honeypot_event_trend_with_options_async(
        self,
        request: sas_20181203_models.GetHoneypotEventTrendRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetHoneypotEventTrendResponse:
        """
        @summary Obtain attack trend statistics for a single attack source.
        
        @param request: GetHoneypotEventTrendRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetHoneypotEventTrendResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.end_time_stamp):
            query['EndTimeStamp'] = request.end_time_stamp
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.risk_level_list):
            query['RiskLevelList'] = request.risk_level_list
        if not UtilClient.is_unset(request.src_ip):
            query['SrcIp'] = request.src_ip
        if not UtilClient.is_unset(request.start_time_stamp):
            query['StartTimeStamp'] = request.start_time_stamp
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetHoneypotEventTrend',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetHoneypotEventTrendResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_honeypot_event_trend(
        self,
        request: sas_20181203_models.GetHoneypotEventTrendRequest,
    ) -> sas_20181203_models.GetHoneypotEventTrendResponse:
        """
        @summary Obtain attack trend statistics for a single attack source.
        
        @param request: GetHoneypotEventTrendRequest
        @return: GetHoneypotEventTrendResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_honeypot_event_trend_with_options(request, runtime)

    async def get_honeypot_event_trend_async(
        self,
        request: sas_20181203_models.GetHoneypotEventTrendRequest,
    ) -> sas_20181203_models.GetHoneypotEventTrendResponse:
        """
        @summary Obtain attack trend statistics for a single attack source.
        
        @param request: GetHoneypotEventTrendRequest
        @return: GetHoneypotEventTrendResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_honeypot_event_trend_with_options_async(request, runtime)

    def get_honeypot_node_with_options(
        self,
        request: sas_20181203_models.GetHoneypotNodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetHoneypotNodeResponse:
        """
        @summary Queries the details of a specified management node.
        
        @param request: GetHoneypotNodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetHoneypotNodeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.node_id):
            query['NodeId'] = request.node_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetHoneypotNode',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetHoneypotNodeResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_honeypot_node_with_options_async(
        self,
        request: sas_20181203_models.GetHoneypotNodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetHoneypotNodeResponse:
        """
        @summary Queries the details of a specified management node.
        
        @param request: GetHoneypotNodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetHoneypotNodeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.node_id):
            query['NodeId'] = request.node_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetHoneypotNode',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetHoneypotNodeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_honeypot_node(
        self,
        request: sas_20181203_models.GetHoneypotNodeRequest,
    ) -> sas_20181203_models.GetHoneypotNodeResponse:
        """
        @summary Queries the details of a specified management node.
        
        @param request: GetHoneypotNodeRequest
        @return: GetHoneypotNodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_honeypot_node_with_options(request, runtime)

    async def get_honeypot_node_async(
        self,
        request: sas_20181203_models.GetHoneypotNodeRequest,
    ) -> sas_20181203_models.GetHoneypotNodeResponse:
        """
        @summary Queries the details of a specified management node.
        
        @param request: GetHoneypotNodeRequest
        @return: GetHoneypotNodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_honeypot_node_with_options_async(request, runtime)

    def get_honeypot_node_metric_list_with_options(
        self,
        request: sas_20181203_models.GetHoneypotNodeMetricListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetHoneypotNodeMetricListResponse:
        """
        @summary Queries the monitoring data of management nodes to which the cloud honeypot belongs.
        
        @param request: GetHoneypotNodeMetricListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetHoneypotNodeMetricListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.express):
            query['Express'] = request.express
        if not UtilClient.is_unset(request.length):
            query['Length'] = request.length
        if not UtilClient.is_unset(request.metric_name):
            query['MetricName'] = request.metric_name
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        if not UtilClient.is_unset(request.node_id):
            query['NodeId'] = request.node_id
        if not UtilClient.is_unset(request.period):
            query['Period'] = request.period
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetHoneypotNodeMetricList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetHoneypotNodeMetricListResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_honeypot_node_metric_list_with_options_async(
        self,
        request: sas_20181203_models.GetHoneypotNodeMetricListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetHoneypotNodeMetricListResponse:
        """
        @summary Queries the monitoring data of management nodes to which the cloud honeypot belongs.
        
        @param request: GetHoneypotNodeMetricListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetHoneypotNodeMetricListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.express):
            query['Express'] = request.express
        if not UtilClient.is_unset(request.length):
            query['Length'] = request.length
        if not UtilClient.is_unset(request.metric_name):
            query['MetricName'] = request.metric_name
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        if not UtilClient.is_unset(request.node_id):
            query['NodeId'] = request.node_id
        if not UtilClient.is_unset(request.period):
            query['Period'] = request.period
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetHoneypotNodeMetricList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetHoneypotNodeMetricListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_honeypot_node_metric_list(
        self,
        request: sas_20181203_models.GetHoneypotNodeMetricListRequest,
    ) -> sas_20181203_models.GetHoneypotNodeMetricListResponse:
        """
        @summary Queries the monitoring data of management nodes to which the cloud honeypot belongs.
        
        @param request: GetHoneypotNodeMetricListRequest
        @return: GetHoneypotNodeMetricListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_honeypot_node_metric_list_with_options(request, runtime)

    async def get_honeypot_node_metric_list_async(
        self,
        request: sas_20181203_models.GetHoneypotNodeMetricListRequest,
    ) -> sas_20181203_models.GetHoneypotNodeMetricListResponse:
        """
        @summary Queries the monitoring data of management nodes to which the cloud honeypot belongs.
        
        @param request: GetHoneypotNodeMetricListRequest
        @return: GetHoneypotNodeMetricListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_honeypot_node_metric_list_with_options_async(request, runtime)

    def get_honeypot_preset_with_options(
        self,
        request: sas_20181203_models.GetHoneypotPresetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetHoneypotPresetResponse:
        """
        @summary Queries the configurations of a specified honeypot template.
        
        @param request: GetHoneypotPresetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetHoneypotPresetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.honeypot_preset_id):
            query['HoneypotPresetId'] = request.honeypot_preset_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetHoneypotPreset',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetHoneypotPresetResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_honeypot_preset_with_options_async(
        self,
        request: sas_20181203_models.GetHoneypotPresetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetHoneypotPresetResponse:
        """
        @summary Queries the configurations of a specified honeypot template.
        
        @param request: GetHoneypotPresetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetHoneypotPresetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.honeypot_preset_id):
            query['HoneypotPresetId'] = request.honeypot_preset_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetHoneypotPreset',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetHoneypotPresetResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_honeypot_preset(
        self,
        request: sas_20181203_models.GetHoneypotPresetRequest,
    ) -> sas_20181203_models.GetHoneypotPresetResponse:
        """
        @summary Queries the configurations of a specified honeypot template.
        
        @param request: GetHoneypotPresetRequest
        @return: GetHoneypotPresetResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_honeypot_preset_with_options(request, runtime)

    async def get_honeypot_preset_async(
        self,
        request: sas_20181203_models.GetHoneypotPresetRequest,
    ) -> sas_20181203_models.GetHoneypotPresetResponse:
        """
        @summary Queries the configurations of a specified honeypot template.
        
        @param request: GetHoneypotPresetRequest
        @return: GetHoneypotPresetResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_honeypot_preset_with_options_async(request, runtime)

    def get_honeypot_probe_with_options(
        self,
        request: sas_20181203_models.GetHoneypotProbeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetHoneypotProbeResponse:
        """
        @summary Queries the details about a specified probe.
        
        @param request: GetHoneypotProbeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetHoneypotProbeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.probe_id):
            query['ProbeId'] = request.probe_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetHoneypotProbe',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetHoneypotProbeResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_honeypot_probe_with_options_async(
        self,
        request: sas_20181203_models.GetHoneypotProbeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetHoneypotProbeResponse:
        """
        @summary Queries the details about a specified probe.
        
        @param request: GetHoneypotProbeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetHoneypotProbeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.probe_id):
            query['ProbeId'] = request.probe_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetHoneypotProbe',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetHoneypotProbeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_honeypot_probe(
        self,
        request: sas_20181203_models.GetHoneypotProbeRequest,
    ) -> sas_20181203_models.GetHoneypotProbeResponse:
        """
        @summary Queries the details about a specified probe.
        
        @param request: GetHoneypotProbeRequest
        @return: GetHoneypotProbeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_honeypot_probe_with_options(request, runtime)

    async def get_honeypot_probe_async(
        self,
        request: sas_20181203_models.GetHoneypotProbeRequest,
    ) -> sas_20181203_models.GetHoneypotProbeResponse:
        """
        @summary Queries the details about a specified probe.
        
        @param request: GetHoneypotProbeRequest
        @return: GetHoneypotProbeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_honeypot_probe_with_options_async(request, runtime)

    def get_honeypot_statistics_with_options(
        self,
        request: sas_20181203_models.GetHoneypotStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetHoneypotStatisticsResponse:
        """
        @summary 获取蜜罐使用量的统计数据
        
        @param request: GetHoneypotStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetHoneypotStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetHoneypotStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetHoneypotStatisticsResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_honeypot_statistics_with_options_async(
        self,
        request: sas_20181203_models.GetHoneypotStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetHoneypotStatisticsResponse:
        """
        @summary 获取蜜罐使用量的统计数据
        
        @param request: GetHoneypotStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetHoneypotStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetHoneypotStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetHoneypotStatisticsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_honeypot_statistics(
        self,
        request: sas_20181203_models.GetHoneypotStatisticsRequest,
    ) -> sas_20181203_models.GetHoneypotStatisticsResponse:
        """
        @summary 获取蜜罐使用量的统计数据
        
        @param request: GetHoneypotStatisticsRequest
        @return: GetHoneypotStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_honeypot_statistics_with_options(request, runtime)

    async def get_honeypot_statistics_async(
        self,
        request: sas_20181203_models.GetHoneypotStatisticsRequest,
    ) -> sas_20181203_models.GetHoneypotStatisticsResponse:
        """
        @summary 获取蜜罐使用量的统计数据
        
        @param request: GetHoneypotStatisticsRequest
        @return: GetHoneypotStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_honeypot_statistics_with_options_async(request, runtime)

    def get_image_event_operation_with_options(
        self,
        request: sas_20181203_models.GetImageEventOperationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetImageEventOperationResponse:
        """
        @summary Queries alert handling rules.
        
        @param request: GetImageEventOperationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetImageEventOperationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetImageEventOperation',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetImageEventOperationResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_image_event_operation_with_options_async(
        self,
        request: sas_20181203_models.GetImageEventOperationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetImageEventOperationResponse:
        """
        @summary Queries alert handling rules.
        
        @param request: GetImageEventOperationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetImageEventOperationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetImageEventOperation',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetImageEventOperationResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_image_event_operation(
        self,
        request: sas_20181203_models.GetImageEventOperationRequest,
    ) -> sas_20181203_models.GetImageEventOperationResponse:
        """
        @summary Queries alert handling rules.
        
        @param request: GetImageEventOperationRequest
        @return: GetImageEventOperationResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_image_event_operation_with_options(request, runtime)

    async def get_image_event_operation_async(
        self,
        request: sas_20181203_models.GetImageEventOperationRequest,
    ) -> sas_20181203_models.GetImageEventOperationResponse:
        """
        @summary Queries alert handling rules.
        
        @param request: GetImageEventOperationRequest
        @return: GetImageEventOperationResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_image_event_operation_with_options_async(request, runtime)

    def get_image_scan_num_in_period_with_options(
        self,
        request: sas_20181203_models.GetImageScanNumInPeriodRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetImageScanNumInPeriodResponse:
        """
        @summary Queries the number of image scans that are performed within the last several days.
        
        @param request: GetImageScanNumInPeriodRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetImageScanNumInPeriodResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.past_day):
            query['PastDay'] = request.past_day
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetImageScanNumInPeriod',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetImageScanNumInPeriodResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_image_scan_num_in_period_with_options_async(
        self,
        request: sas_20181203_models.GetImageScanNumInPeriodRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetImageScanNumInPeriodResponse:
        """
        @summary Queries the number of image scans that are performed within the last several days.
        
        @param request: GetImageScanNumInPeriodRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetImageScanNumInPeriodResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.past_day):
            query['PastDay'] = request.past_day
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetImageScanNumInPeriod',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetImageScanNumInPeriodResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_image_scan_num_in_period(
        self,
        request: sas_20181203_models.GetImageScanNumInPeriodRequest,
    ) -> sas_20181203_models.GetImageScanNumInPeriodResponse:
        """
        @summary Queries the number of image scans that are performed within the last several days.
        
        @param request: GetImageScanNumInPeriodRequest
        @return: GetImageScanNumInPeriodResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_image_scan_num_in_period_with_options(request, runtime)

    async def get_image_scan_num_in_period_async(
        self,
        request: sas_20181203_models.GetImageScanNumInPeriodRequest,
    ) -> sas_20181203_models.GetImageScanNumInPeriodResponse:
        """
        @summary Queries the number of image scans that are performed within the last several days.
        
        @param request: GetImageScanNumInPeriodRequest
        @return: GetImageScanNumInPeriodResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_image_scan_num_in_period_with_options_async(request, runtime)

    def get_install_code_for_uuid_with_options(
        self,
        request: sas_20181203_models.GetInstallCodeForUuidRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetInstallCodeForUuidResponse:
        """
        @summary Query Asset Installation Code
        
        @param request: GetInstallCodeForUuidRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetInstallCodeForUuidResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetInstallCodeForUuid',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetInstallCodeForUuidResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_install_code_for_uuid_with_options_async(
        self,
        request: sas_20181203_models.GetInstallCodeForUuidRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetInstallCodeForUuidResponse:
        """
        @summary Query Asset Installation Code
        
        @param request: GetInstallCodeForUuidRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetInstallCodeForUuidResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetInstallCodeForUuid',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetInstallCodeForUuidResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_install_code_for_uuid(
        self,
        request: sas_20181203_models.GetInstallCodeForUuidRequest,
    ) -> sas_20181203_models.GetInstallCodeForUuidResponse:
        """
        @summary Query Asset Installation Code
        
        @param request: GetInstallCodeForUuidRequest
        @return: GetInstallCodeForUuidResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_install_code_for_uuid_with_options(request, runtime)

    async def get_install_code_for_uuid_async(
        self,
        request: sas_20181203_models.GetInstallCodeForUuidRequest,
    ) -> sas_20181203_models.GetInstallCodeForUuidResponse:
        """
        @summary Query Asset Installation Code
        
        @param request: GetInstallCodeForUuidRequest
        @return: GetInstallCodeForUuidResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_install_code_for_uuid_with_options_async(request, runtime)

    def get_instance_alarm_statistics_with_options(
        self,
        request: sas_20181203_models.GetInstanceAlarmStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetInstanceAlarmStatisticsResponse:
        """
        @summary Count the number of security events for a single instance
        
        @param request: GetInstanceAlarmStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetInstanceAlarmStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetInstanceAlarmStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetInstanceAlarmStatisticsResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_instance_alarm_statistics_with_options_async(
        self,
        request: sas_20181203_models.GetInstanceAlarmStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetInstanceAlarmStatisticsResponse:
        """
        @summary Count the number of security events for a single instance
        
        @param request: GetInstanceAlarmStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetInstanceAlarmStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetInstanceAlarmStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetInstanceAlarmStatisticsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_instance_alarm_statistics(
        self,
        request: sas_20181203_models.GetInstanceAlarmStatisticsRequest,
    ) -> sas_20181203_models.GetInstanceAlarmStatisticsResponse:
        """
        @summary Count the number of security events for a single instance
        
        @param request: GetInstanceAlarmStatisticsRequest
        @return: GetInstanceAlarmStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_instance_alarm_statistics_with_options(request, runtime)

    async def get_instance_alarm_statistics_async(
        self,
        request: sas_20181203_models.GetInstanceAlarmStatisticsRequest,
    ) -> sas_20181203_models.GetInstanceAlarmStatisticsResponse:
        """
        @summary Count the number of security events for a single instance
        
        @param request: GetInstanceAlarmStatisticsRequest
        @return: GetInstanceAlarmStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_instance_alarm_statistics_with_options_async(request, runtime)

    def get_interception_rule_detail_with_options(
        self,
        request: sas_20181203_models.GetInterceptionRuleDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetInterceptionRuleDetailResponse:
        """
        @summary Queries the details of a microsegmentation defense rule.
        
        @param request: GetInterceptionRuleDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetInterceptionRuleDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.rule_id):
            query['RuleId'] = request.rule_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetInterceptionRuleDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetInterceptionRuleDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_interception_rule_detail_with_options_async(
        self,
        request: sas_20181203_models.GetInterceptionRuleDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetInterceptionRuleDetailResponse:
        """
        @summary Queries the details of a microsegmentation defense rule.
        
        @param request: GetInterceptionRuleDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetInterceptionRuleDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.rule_id):
            query['RuleId'] = request.rule_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetInterceptionRuleDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetInterceptionRuleDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_interception_rule_detail(
        self,
        request: sas_20181203_models.GetInterceptionRuleDetailRequest,
    ) -> sas_20181203_models.GetInterceptionRuleDetailResponse:
        """
        @summary Queries the details of a microsegmentation defense rule.
        
        @param request: GetInterceptionRuleDetailRequest
        @return: GetInterceptionRuleDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_interception_rule_detail_with_options(request, runtime)

    async def get_interception_rule_detail_async(
        self,
        request: sas_20181203_models.GetInterceptionRuleDetailRequest,
    ) -> sas_20181203_models.GetInterceptionRuleDetailResponse:
        """
        @summary Queries the details of a microsegmentation defense rule.
        
        @param request: GetInterceptionRuleDetailRequest
        @return: GetInterceptionRuleDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_interception_rule_detail_with_options_async(request, runtime)

    def get_interception_summary_with_options(
        self,
        request: sas_20181203_models.GetInterceptionSummaryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetInterceptionSummaryResponse:
        """
        @summary Queries the statistics of the container firewall feature.
        
        @param request: GetInterceptionSummaryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetInterceptionSummaryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetInterceptionSummary',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetInterceptionSummaryResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_interception_summary_with_options_async(
        self,
        request: sas_20181203_models.GetInterceptionSummaryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetInterceptionSummaryResponse:
        """
        @summary Queries the statistics of the container firewall feature.
        
        @param request: GetInterceptionSummaryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetInterceptionSummaryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetInterceptionSummary',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetInterceptionSummaryResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_interception_summary(
        self,
        request: sas_20181203_models.GetInterceptionSummaryRequest,
    ) -> sas_20181203_models.GetInterceptionSummaryResponse:
        """
        @summary Queries the statistics of the container firewall feature.
        
        @param request: GetInterceptionSummaryRequest
        @return: GetInterceptionSummaryResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_interception_summary_with_options(request, runtime)

    async def get_interception_summary_async(
        self,
        request: sas_20181203_models.GetInterceptionSummaryRequest,
    ) -> sas_20181203_models.GetInterceptionSummaryResponse:
        """
        @summary Queries the statistics of the container firewall feature.
        
        @param request: GetInterceptionSummaryRequest
        @return: GetInterceptionSummaryResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_interception_summary_with_options_async(request, runtime)

    def get_interception_target_detail_with_options(
        self,
        request: sas_20181203_models.GetInterceptionTargetDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetInterceptionTargetDetailResponse:
        """
        @summary Queries the information about a specified network object that is protected by the container firewall feature.
        
        @param request: GetInterceptionTargetDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetInterceptionTargetDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.target_id):
            query['TargetId'] = request.target_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetInterceptionTargetDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetInterceptionTargetDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_interception_target_detail_with_options_async(
        self,
        request: sas_20181203_models.GetInterceptionTargetDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetInterceptionTargetDetailResponse:
        """
        @summary Queries the information about a specified network object that is protected by the container firewall feature.
        
        @param request: GetInterceptionTargetDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetInterceptionTargetDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.target_id):
            query['TargetId'] = request.target_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetInterceptionTargetDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetInterceptionTargetDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_interception_target_detail(
        self,
        request: sas_20181203_models.GetInterceptionTargetDetailRequest,
    ) -> sas_20181203_models.GetInterceptionTargetDetailResponse:
        """
        @summary Queries the information about a specified network object that is protected by the container firewall feature.
        
        @param request: GetInterceptionTargetDetailRequest
        @return: GetInterceptionTargetDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_interception_target_detail_with_options(request, runtime)

    async def get_interception_target_detail_async(
        self,
        request: sas_20181203_models.GetInterceptionTargetDetailRequest,
    ) -> sas_20181203_models.GetInterceptionTargetDetailResponse:
        """
        @summary Queries the information about a specified network object that is protected by the container firewall feature.
        
        @param request: GetInterceptionTargetDetailRequest
        @return: GetInterceptionTargetDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_interception_target_detail_with_options_async(request, runtime)

    def get_last_once_task_info_with_options(
        self,
        request: sas_20181203_models.GetLastOnceTaskInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetLastOnceTaskInfoResponse:
        """
        @summary Queries information about the latest scan task to determine whether the task is complete.
        
        @param request: GetLastOnceTaskInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetLastOnceTaskInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.task_name):
            query['TaskName'] = request.task_name
        if not UtilClient.is_unset(request.task_type):
            query['TaskType'] = request.task_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetLastOnceTaskInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetLastOnceTaskInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_last_once_task_info_with_options_async(
        self,
        request: sas_20181203_models.GetLastOnceTaskInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetLastOnceTaskInfoResponse:
        """
        @summary Queries information about the latest scan task to determine whether the task is complete.
        
        @param request: GetLastOnceTaskInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetLastOnceTaskInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.task_name):
            query['TaskName'] = request.task_name
        if not UtilClient.is_unset(request.task_type):
            query['TaskType'] = request.task_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetLastOnceTaskInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetLastOnceTaskInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_last_once_task_info(
        self,
        request: sas_20181203_models.GetLastOnceTaskInfoRequest,
    ) -> sas_20181203_models.GetLastOnceTaskInfoResponse:
        """
        @summary Queries information about the latest scan task to determine whether the task is complete.
        
        @param request: GetLastOnceTaskInfoRequest
        @return: GetLastOnceTaskInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_last_once_task_info_with_options(request, runtime)

    async def get_last_once_task_info_async(
        self,
        request: sas_20181203_models.GetLastOnceTaskInfoRequest,
    ) -> sas_20181203_models.GetLastOnceTaskInfoResponse:
        """
        @summary Queries information about the latest scan task to determine whether the task is complete.
        
        @param request: GetLastOnceTaskInfoRequest
        @return: GetLastOnceTaskInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_last_once_task_info_with_options_async(request, runtime)

    def get_local_default_region_with_options(
        self,
        request: sas_20181203_models.GetLocalDefaultRegionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetLocalDefaultRegionResponse:
        """
        @summary Obtains the default region for synchronizing assets outside Alibaba Cloud.
        
        @param request: GetLocalDefaultRegionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetLocalDefaultRegionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.vendor):
            query['Vendor'] = request.vendor
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetLocalDefaultRegion',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetLocalDefaultRegionResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_local_default_region_with_options_async(
        self,
        request: sas_20181203_models.GetLocalDefaultRegionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetLocalDefaultRegionResponse:
        """
        @summary Obtains the default region for synchronizing assets outside Alibaba Cloud.
        
        @param request: GetLocalDefaultRegionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetLocalDefaultRegionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.vendor):
            query['Vendor'] = request.vendor
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetLocalDefaultRegion',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetLocalDefaultRegionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_local_default_region(
        self,
        request: sas_20181203_models.GetLocalDefaultRegionRequest,
    ) -> sas_20181203_models.GetLocalDefaultRegionResponse:
        """
        @summary Obtains the default region for synchronizing assets outside Alibaba Cloud.
        
        @param request: GetLocalDefaultRegionRequest
        @return: GetLocalDefaultRegionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_local_default_region_with_options(request, runtime)

    async def get_local_default_region_async(
        self,
        request: sas_20181203_models.GetLocalDefaultRegionRequest,
    ) -> sas_20181203_models.GetLocalDefaultRegionResponse:
        """
        @summary Obtains the default region for synchronizing assets outside Alibaba Cloud.
        
        @param request: GetLocalDefaultRegionRequest
        @return: GetLocalDefaultRegionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_local_default_region_with_options_async(request, runtime)

    def get_log_meta_with_options(
        self,
        request: sas_20181203_models.GetLogMetaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetLogMetaResponse:
        """
        @summary Queries the status of a data shipping task of a log.
        
        @param request: GetLogMetaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetLogMetaResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.log_store):
            query['LogStore'] = request.log_store
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetLogMeta',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetLogMetaResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_log_meta_with_options_async(
        self,
        request: sas_20181203_models.GetLogMetaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetLogMetaResponse:
        """
        @summary Queries the status of a data shipping task of a log.
        
        @param request: GetLogMetaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetLogMetaResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.log_store):
            query['LogStore'] = request.log_store
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetLogMeta',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetLogMetaResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_log_meta(
        self,
        request: sas_20181203_models.GetLogMetaRequest,
    ) -> sas_20181203_models.GetLogMetaResponse:
        """
        @summary Queries the status of a data shipping task of a log.
        
        @param request: GetLogMetaRequest
        @return: GetLogMetaResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_log_meta_with_options(request, runtime)

    async def get_log_meta_async(
        self,
        request: sas_20181203_models.GetLogMetaRequest,
    ) -> sas_20181203_models.GetLogMetaResponse:
        """
        @summary Queries the status of a data shipping task of a log.
        
        @param request: GetLogMetaRequest
        @return: GetLogMetaResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_log_meta_with_options_async(request, runtime)

    def get_malicious_file_whitelist_config_with_options(
        self,
        request: sas_20181203_models.GetMaliciousFileWhitelistConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetMaliciousFileWhitelistConfigResponse:
        """
        @summary Queries an alert whitelist rule of sensitive files that are detected by using the agentless detection feature.
        
        @param request: GetMaliciousFileWhitelistConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetMaliciousFileWhitelistConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetMaliciousFileWhitelistConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetMaliciousFileWhitelistConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_malicious_file_whitelist_config_with_options_async(
        self,
        request: sas_20181203_models.GetMaliciousFileWhitelistConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetMaliciousFileWhitelistConfigResponse:
        """
        @summary Queries an alert whitelist rule of sensitive files that are detected by using the agentless detection feature.
        
        @param request: GetMaliciousFileWhitelistConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetMaliciousFileWhitelistConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetMaliciousFileWhitelistConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetMaliciousFileWhitelistConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_malicious_file_whitelist_config(
        self,
        request: sas_20181203_models.GetMaliciousFileWhitelistConfigRequest,
    ) -> sas_20181203_models.GetMaliciousFileWhitelistConfigResponse:
        """
        @summary Queries an alert whitelist rule of sensitive files that are detected by using the agentless detection feature.
        
        @param request: GetMaliciousFileWhitelistConfigRequest
        @return: GetMaliciousFileWhitelistConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_malicious_file_whitelist_config_with_options(request, runtime)

    async def get_malicious_file_whitelist_config_async(
        self,
        request: sas_20181203_models.GetMaliciousFileWhitelistConfigRequest,
    ) -> sas_20181203_models.GetMaliciousFileWhitelistConfigResponse:
        """
        @summary Queries an alert whitelist rule of sensitive files that are detected by using the agentless detection feature.
        
        @param request: GetMaliciousFileWhitelistConfigRequest
        @return: GetMaliciousFileWhitelistConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_malicious_file_whitelist_config_with_options_async(request, runtime)

    def get_module_config_with_options(
        self,
        request: sas_20181203_models.GetModuleConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetModuleConfigResponse:
        """
        @summary Queries the configurations of a module.
        
        @param request: GetModuleConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetModuleConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetModuleConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetModuleConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_module_config_with_options_async(
        self,
        request: sas_20181203_models.GetModuleConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetModuleConfigResponse:
        """
        @summary Queries the configurations of a module.
        
        @param request: GetModuleConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetModuleConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetModuleConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetModuleConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_module_config(
        self,
        request: sas_20181203_models.GetModuleConfigRequest,
    ) -> sas_20181203_models.GetModuleConfigResponse:
        """
        @summary Queries the configurations of a module.
        
        @param request: GetModuleConfigRequest
        @return: GetModuleConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_module_config_with_options(request, runtime)

    async def get_module_config_async(
        self,
        request: sas_20181203_models.GetModuleConfigRequest,
    ) -> sas_20181203_models.GetModuleConfigResponse:
        """
        @summary Queries the configurations of a module.
        
        @param request: GetModuleConfigRequest
        @return: GetModuleConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_module_config_with_options_async(request, runtime)

    def get_module_config_status_with_options(
        self,
        tmp_req: sas_20181203_models.GetModuleConfigStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetModuleConfigStatusResponse:
        """
        @summary Checks whether the purchased Security Center features are enabled and whether related configurations take effect.
        
        @param tmp_req: GetModuleConfigStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetModuleConfigStatusResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.GetModuleConfigStatusShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.module_names):
            request.module_names_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.module_names, 'ModuleNames', 'json')
        query = {}
        if not UtilClient.is_unset(request.module_names_shrink):
            query['ModuleNames'] = request.module_names_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetModuleConfigStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetModuleConfigStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_module_config_status_with_options_async(
        self,
        tmp_req: sas_20181203_models.GetModuleConfigStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetModuleConfigStatusResponse:
        """
        @summary Checks whether the purchased Security Center features are enabled and whether related configurations take effect.
        
        @param tmp_req: GetModuleConfigStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetModuleConfigStatusResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.GetModuleConfigStatusShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.module_names):
            request.module_names_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.module_names, 'ModuleNames', 'json')
        query = {}
        if not UtilClient.is_unset(request.module_names_shrink):
            query['ModuleNames'] = request.module_names_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetModuleConfigStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetModuleConfigStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_module_config_status(
        self,
        request: sas_20181203_models.GetModuleConfigStatusRequest,
    ) -> sas_20181203_models.GetModuleConfigStatusResponse:
        """
        @summary Checks whether the purchased Security Center features are enabled and whether related configurations take effect.
        
        @param request: GetModuleConfigStatusRequest
        @return: GetModuleConfigStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_module_config_status_with_options(request, runtime)

    async def get_module_config_status_async(
        self,
        request: sas_20181203_models.GetModuleConfigStatusRequest,
    ) -> sas_20181203_models.GetModuleConfigStatusResponse:
        """
        @summary Checks whether the purchased Security Center features are enabled and whether related configurations take effect.
        
        @param request: GetModuleConfigStatusRequest
        @return: GetModuleConfigStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_module_config_status_with_options_async(request, runtime)

    def get_module_trial_auth_info_with_options(
        self,
        request: sas_20181203_models.GetModuleTrialAuthInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetModuleTrialAuthInfoResponse:
        """
        @summary Queries the qualification information about the trial use of Security Center value-added features, including vulnerability fixing and threat analysis and response.
        
        @param request: GetModuleTrialAuthInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetModuleTrialAuthInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.module_code):
            query['ModuleCode'] = request.module_code
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetModuleTrialAuthInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetModuleTrialAuthInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_module_trial_auth_info_with_options_async(
        self,
        request: sas_20181203_models.GetModuleTrialAuthInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetModuleTrialAuthInfoResponse:
        """
        @summary Queries the qualification information about the trial use of Security Center value-added features, including vulnerability fixing and threat analysis and response.
        
        @param request: GetModuleTrialAuthInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetModuleTrialAuthInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.module_code):
            query['ModuleCode'] = request.module_code
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetModuleTrialAuthInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetModuleTrialAuthInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_module_trial_auth_info(
        self,
        request: sas_20181203_models.GetModuleTrialAuthInfoRequest,
    ) -> sas_20181203_models.GetModuleTrialAuthInfoResponse:
        """
        @summary Queries the qualification information about the trial use of Security Center value-added features, including vulnerability fixing and threat analysis and response.
        
        @param request: GetModuleTrialAuthInfoRequest
        @return: GetModuleTrialAuthInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_module_trial_auth_info_with_options(request, runtime)

    async def get_module_trial_auth_info_async(
        self,
        request: sas_20181203_models.GetModuleTrialAuthInfoRequest,
    ) -> sas_20181203_models.GetModuleTrialAuthInfoResponse:
        """
        @summary Queries the qualification information about the trial use of Security Center value-added features, including vulnerability fixing and threat analysis and response.
        
        @param request: GetModuleTrialAuthInfoRequest
        @return: GetModuleTrialAuthInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_module_trial_auth_info_with_options_async(request, runtime)

    def get_object_scan_event_with_options(
        self,
        request: sas_20181203_models.GetObjectScanEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetObjectScanEventResponse:
        """
        @summary Queries the details of an alert event that is generated for a malicious object.
        
        @param request: GetObjectScanEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetObjectScanEventResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.event_id):
            query['EventId'] = request.event_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetObjectScanEvent',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetObjectScanEventResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_object_scan_event_with_options_async(
        self,
        request: sas_20181203_models.GetObjectScanEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetObjectScanEventResponse:
        """
        @summary Queries the details of an alert event that is generated for a malicious object.
        
        @param request: GetObjectScanEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetObjectScanEventResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.event_id):
            query['EventId'] = request.event_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetObjectScanEvent',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetObjectScanEventResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_object_scan_event(
        self,
        request: sas_20181203_models.GetObjectScanEventRequest,
    ) -> sas_20181203_models.GetObjectScanEventResponse:
        """
        @summary Queries the details of an alert event that is generated for a malicious object.
        
        @param request: GetObjectScanEventRequest
        @return: GetObjectScanEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_object_scan_event_with_options(request, runtime)

    async def get_object_scan_event_async(
        self,
        request: sas_20181203_models.GetObjectScanEventRequest,
    ) -> sas_20181203_models.GetObjectScanEventResponse:
        """
        @summary Queries the details of an alert event that is generated for a malicious object.
        
        @param request: GetObjectScanEventRequest
        @return: GetObjectScanEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_object_scan_event_with_options_async(request, runtime)

    def get_once_task_result_info_with_options(
        self,
        request: sas_20181203_models.GetOnceTaskResultInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetOnceTaskResultInfoResponse:
        """
        @summary Queries the execution result of a one-time scan task, such as asset fingerprint collection, vulnerability scan, and image security scan.
        
        @param request: GetOnceTaskResultInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOnceTaskResultInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.task_id):
            query['TaskId'] = request.task_id
        if not UtilClient.is_unset(request.task_name):
            query['TaskName'] = request.task_name
        if not UtilClient.is_unset(request.task_type):
            query['TaskType'] = request.task_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetOnceTaskResultInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetOnceTaskResultInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_once_task_result_info_with_options_async(
        self,
        request: sas_20181203_models.GetOnceTaskResultInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetOnceTaskResultInfoResponse:
        """
        @summary Queries the execution result of a one-time scan task, such as asset fingerprint collection, vulnerability scan, and image security scan.
        
        @param request: GetOnceTaskResultInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOnceTaskResultInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.task_id):
            query['TaskId'] = request.task_id
        if not UtilClient.is_unset(request.task_name):
            query['TaskName'] = request.task_name
        if not UtilClient.is_unset(request.task_type):
            query['TaskType'] = request.task_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetOnceTaskResultInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetOnceTaskResultInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_once_task_result_info(
        self,
        request: sas_20181203_models.GetOnceTaskResultInfoRequest,
    ) -> sas_20181203_models.GetOnceTaskResultInfoResponse:
        """
        @summary Queries the execution result of a one-time scan task, such as asset fingerprint collection, vulnerability scan, and image security scan.
        
        @param request: GetOnceTaskResultInfoRequest
        @return: GetOnceTaskResultInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_once_task_result_info_with_options(request, runtime)

    async def get_once_task_result_info_async(
        self,
        request: sas_20181203_models.GetOnceTaskResultInfoRequest,
    ) -> sas_20181203_models.GetOnceTaskResultInfoResponse:
        """
        @summary Queries the execution result of a one-time scan task, such as asset fingerprint collection, vulnerability scan, and image security scan.
        
        @param request: GetOnceTaskResultInfoRequest
        @return: GetOnceTaskResultInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_once_task_result_info_with_options_async(request, runtime)

    def get_opa_cluster_base_line_list_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetOpaClusterBaseLineListResponse:
        """
        @summary Queries the baselines that are supported by at-risk image blocking.
        
        @param request: GetOpaClusterBaseLineListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOpaClusterBaseLineListResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetOpaClusterBaseLineList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetOpaClusterBaseLineListResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_opa_cluster_base_line_list_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetOpaClusterBaseLineListResponse:
        """
        @summary Queries the baselines that are supported by at-risk image blocking.
        
        @param request: GetOpaClusterBaseLineListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOpaClusterBaseLineListResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetOpaClusterBaseLineList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetOpaClusterBaseLineListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_opa_cluster_base_line_list(self) -> sas_20181203_models.GetOpaClusterBaseLineListResponse:
        """
        @summary Queries the baselines that are supported by at-risk image blocking.
        
        @return: GetOpaClusterBaseLineListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_opa_cluster_base_line_list_with_options(runtime)

    async def get_opa_cluster_base_line_list_async(self) -> sas_20181203_models.GetOpaClusterBaseLineListResponse:
        """
        @summary Queries the baselines that are supported by at-risk image blocking.
        
        @return: GetOpaClusterBaseLineListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_opa_cluster_base_line_list_with_options_async(runtime)

    def get_opa_cluster_image_list_with_options(
        self,
        request: sas_20181203_models.GetOpaClusterImageListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetOpaClusterImageListResponse:
        """
        @summary 查询集群镜像
        
        @param request: GetOpaClusterImageListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOpaClusterImageListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.image_name):
            query['ImageName'] = request.image_name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetOpaClusterImageList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetOpaClusterImageListResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_opa_cluster_image_list_with_options_async(
        self,
        request: sas_20181203_models.GetOpaClusterImageListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetOpaClusterImageListResponse:
        """
        @summary 查询集群镜像
        
        @param request: GetOpaClusterImageListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOpaClusterImageListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.image_name):
            query['ImageName'] = request.image_name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetOpaClusterImageList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetOpaClusterImageListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_opa_cluster_image_list(
        self,
        request: sas_20181203_models.GetOpaClusterImageListRequest,
    ) -> sas_20181203_models.GetOpaClusterImageListResponse:
        """
        @summary 查询集群镜像
        
        @param request: GetOpaClusterImageListRequest
        @return: GetOpaClusterImageListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_opa_cluster_image_list_with_options(request, runtime)

    async def get_opa_cluster_image_list_async(
        self,
        request: sas_20181203_models.GetOpaClusterImageListRequest,
    ) -> sas_20181203_models.GetOpaClusterImageListResponse:
        """
        @summary 查询集群镜像
        
        @param request: GetOpaClusterImageListRequest
        @return: GetOpaClusterImageListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_opa_cluster_image_list_with_options_async(request, runtime)

    def get_opa_cluster_label_list_with_options(
        self,
        request: sas_20181203_models.GetOpaClusterLabelListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetOpaClusterLabelListResponse:
        """
        @summary Queries information about the tags that are added to containers based on the feature of proactive defense for containers.
        
        @param request: GetOpaClusterLabelListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOpaClusterLabelListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.tag_name):
            query['TagName'] = request.tag_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetOpaClusterLabelList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetOpaClusterLabelListResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_opa_cluster_label_list_with_options_async(
        self,
        request: sas_20181203_models.GetOpaClusterLabelListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetOpaClusterLabelListResponse:
        """
        @summary Queries information about the tags that are added to containers based on the feature of proactive defense for containers.
        
        @param request: GetOpaClusterLabelListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOpaClusterLabelListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.tag_name):
            query['TagName'] = request.tag_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetOpaClusterLabelList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetOpaClusterLabelListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_opa_cluster_label_list(
        self,
        request: sas_20181203_models.GetOpaClusterLabelListRequest,
    ) -> sas_20181203_models.GetOpaClusterLabelListResponse:
        """
        @summary Queries information about the tags that are added to containers based on the feature of proactive defense for containers.
        
        @param request: GetOpaClusterLabelListRequest
        @return: GetOpaClusterLabelListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_opa_cluster_label_list_with_options(request, runtime)

    async def get_opa_cluster_label_list_async(
        self,
        request: sas_20181203_models.GetOpaClusterLabelListRequest,
    ) -> sas_20181203_models.GetOpaClusterLabelListResponse:
        """
        @summary Queries information about the tags that are added to containers based on the feature of proactive defense for containers.
        
        @param request: GetOpaClusterLabelListRequest
        @return: GetOpaClusterLabelListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_opa_cluster_label_list_with_options_async(request, runtime)

    def get_opa_cluster_namespace_list_with_options(
        self,
        request: sas_20181203_models.GetOpaClusterNamespaceListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetOpaClusterNamespaceListResponse:
        """
        @summary Queries information about the namespaces of clusters for which the rules of the at-risk image blocking type are configured in proactive defense for containers.
        
        @param request: GetOpaClusterNamespaceListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOpaClusterNamespaceListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.name_space_name):
            query['NameSpaceName'] = request.name_space_name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetOpaClusterNamespaceList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetOpaClusterNamespaceListResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_opa_cluster_namespace_list_with_options_async(
        self,
        request: sas_20181203_models.GetOpaClusterNamespaceListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetOpaClusterNamespaceListResponse:
        """
        @summary Queries information about the namespaces of clusters for which the rules of the at-risk image blocking type are configured in proactive defense for containers.
        
        @param request: GetOpaClusterNamespaceListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOpaClusterNamespaceListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.name_space_name):
            query['NameSpaceName'] = request.name_space_name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetOpaClusterNamespaceList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetOpaClusterNamespaceListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_opa_cluster_namespace_list(
        self,
        request: sas_20181203_models.GetOpaClusterNamespaceListRequest,
    ) -> sas_20181203_models.GetOpaClusterNamespaceListResponse:
        """
        @summary Queries information about the namespaces of clusters for which the rules of the at-risk image blocking type are configured in proactive defense for containers.
        
        @param request: GetOpaClusterNamespaceListRequest
        @return: GetOpaClusterNamespaceListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_opa_cluster_namespace_list_with_options(request, runtime)

    async def get_opa_cluster_namespace_list_async(
        self,
        request: sas_20181203_models.GetOpaClusterNamespaceListRequest,
    ) -> sas_20181203_models.GetOpaClusterNamespaceListResponse:
        """
        @summary Queries information about the namespaces of clusters for which the rules of the at-risk image blocking type are configured in proactive defense for containers.
        
        @param request: GetOpaClusterNamespaceListRequest
        @return: GetOpaClusterNamespaceListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_opa_cluster_namespace_list_with_options_async(request, runtime)

    def get_opa_plugin_status_with_options(
        self,
        request: sas_20181203_models.GetOpaPluginStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetOpaPluginStatusResponse:
        """
        @summary Queries the installation status of the components that are required for clusters protected by proactive defense for containers.
        
        @param request: GetOpaPluginStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOpaPluginStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_ids):
            query['ClusterIds'] = request.cluster_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetOpaPluginStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetOpaPluginStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_opa_plugin_status_with_options_async(
        self,
        request: sas_20181203_models.GetOpaPluginStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetOpaPluginStatusResponse:
        """
        @summary Queries the installation status of the components that are required for clusters protected by proactive defense for containers.
        
        @param request: GetOpaPluginStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOpaPluginStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_ids):
            query['ClusterIds'] = request.cluster_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetOpaPluginStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetOpaPluginStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_opa_plugin_status(
        self,
        request: sas_20181203_models.GetOpaPluginStatusRequest,
    ) -> sas_20181203_models.GetOpaPluginStatusResponse:
        """
        @summary Queries the installation status of the components that are required for clusters protected by proactive defense for containers.
        
        @param request: GetOpaPluginStatusRequest
        @return: GetOpaPluginStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_opa_plugin_status_with_options(request, runtime)

    async def get_opa_plugin_status_async(
        self,
        request: sas_20181203_models.GetOpaPluginStatusRequest,
    ) -> sas_20181203_models.GetOpaPluginStatusResponse:
        """
        @summary Queries the installation status of the components that are required for clusters protected by proactive defense for containers.
        
        @param request: GetOpaPluginStatusRequest
        @return: GetOpaPluginStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_opa_plugin_status_with_options_async(request, runtime)

    def get_opa_strategy_detail_new_with_options(
        self,
        request: sas_20181203_models.GetOpaStrategyDetailNewRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetOpaStrategyDetailNewResponse:
        """
        @summary Queries the details of the rule that is used to block at-risk images.
        
        @param request: GetOpaStrategyDetailNewRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOpaStrategyDetailNewResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetOpaStrategyDetailNew',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetOpaStrategyDetailNewResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_opa_strategy_detail_new_with_options_async(
        self,
        request: sas_20181203_models.GetOpaStrategyDetailNewRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetOpaStrategyDetailNewResponse:
        """
        @summary Queries the details of the rule that is used to block at-risk images.
        
        @param request: GetOpaStrategyDetailNewRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOpaStrategyDetailNewResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetOpaStrategyDetailNew',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetOpaStrategyDetailNewResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_opa_strategy_detail_new(
        self,
        request: sas_20181203_models.GetOpaStrategyDetailNewRequest,
    ) -> sas_20181203_models.GetOpaStrategyDetailNewResponse:
        """
        @summary Queries the details of the rule that is used to block at-risk images.
        
        @param request: GetOpaStrategyDetailNewRequest
        @return: GetOpaStrategyDetailNewResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_opa_strategy_detail_new_with_options(request, runtime)

    async def get_opa_strategy_detail_new_async(
        self,
        request: sas_20181203_models.GetOpaStrategyDetailNewRequest,
    ) -> sas_20181203_models.GetOpaStrategyDetailNewResponse:
        """
        @summary Queries the details of the rule that is used to block at-risk images.
        
        @param request: GetOpaStrategyDetailNewRequest
        @return: GetOpaStrategyDetailNewResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_opa_strategy_detail_new_with_options_async(request, runtime)

    def get_opa_strategy_template_summary_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetOpaStrategyTemplateSummaryResponse:
        """
        @summary Queries the usage statistics about the templates provided in the feature of proactive defense for containers for rules of the at-risk image blocking type.
        
        @param request: GetOpaStrategyTemplateSummaryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOpaStrategyTemplateSummaryResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetOpaStrategyTemplateSummary',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetOpaStrategyTemplateSummaryResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_opa_strategy_template_summary_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetOpaStrategyTemplateSummaryResponse:
        """
        @summary Queries the usage statistics about the templates provided in the feature of proactive defense for containers for rules of the at-risk image blocking type.
        
        @param request: GetOpaStrategyTemplateSummaryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOpaStrategyTemplateSummaryResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetOpaStrategyTemplateSummary',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetOpaStrategyTemplateSummaryResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_opa_strategy_template_summary(self) -> sas_20181203_models.GetOpaStrategyTemplateSummaryResponse:
        """
        @summary Queries the usage statistics about the templates provided in the feature of proactive defense for containers for rules of the at-risk image blocking type.
        
        @return: GetOpaStrategyTemplateSummaryResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_opa_strategy_template_summary_with_options(runtime)

    async def get_opa_strategy_template_summary_async(self) -> sas_20181203_models.GetOpaStrategyTemplateSummaryResponse:
        """
        @summary Queries the usage statistics about the templates provided in the feature of proactive defense for containers for rules of the at-risk image blocking type.
        
        @return: GetOpaStrategyTemplateSummaryResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_opa_strategy_template_summary_with_options_async(runtime)

    def get_oss_bucket_scan_statistic_with_options(
        self,
        request: sas_20181203_models.GetOssBucketScanStatisticRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetOssBucketScanStatisticResponse:
        """
        @summary Queries the statistics about an Object Storage Service (OSS) bucket check.
        
        @param request: GetOssBucketScanStatisticRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOssBucketScanStatisticResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.bucket_name_list):
            query['BucketNameList'] = request.bucket_name_list
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetOssBucketScanStatistic',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetOssBucketScanStatisticResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_oss_bucket_scan_statistic_with_options_async(
        self,
        request: sas_20181203_models.GetOssBucketScanStatisticRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetOssBucketScanStatisticResponse:
        """
        @summary Queries the statistics about an Object Storage Service (OSS) bucket check.
        
        @param request: GetOssBucketScanStatisticRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOssBucketScanStatisticResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.bucket_name_list):
            query['BucketNameList'] = request.bucket_name_list
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetOssBucketScanStatistic',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetOssBucketScanStatisticResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_oss_bucket_scan_statistic(
        self,
        request: sas_20181203_models.GetOssBucketScanStatisticRequest,
    ) -> sas_20181203_models.GetOssBucketScanStatisticResponse:
        """
        @summary Queries the statistics about an Object Storage Service (OSS) bucket check.
        
        @param request: GetOssBucketScanStatisticRequest
        @return: GetOssBucketScanStatisticResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_oss_bucket_scan_statistic_with_options(request, runtime)

    async def get_oss_bucket_scan_statistic_async(
        self,
        request: sas_20181203_models.GetOssBucketScanStatisticRequest,
    ) -> sas_20181203_models.GetOssBucketScanStatisticResponse:
        """
        @summary Queries the statistics about an Object Storage Service (OSS) bucket check.
        
        @param request: GetOssBucketScanStatisticRequest
        @return: GetOssBucketScanStatisticResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_oss_bucket_scan_statistic_with_options_async(request, runtime)

    def get_oss_scan_config_with_options(
        self,
        request: sas_20181203_models.GetOssScanConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetOssScanConfigResponse:
        """
        @summary Queries the configurations of an Object Storage Service (OSS) bucket check policy.
        
        @param request: GetOssScanConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOssScanConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.bucket_name):
            query['BucketName'] = request.bucket_name
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetOssScanConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetOssScanConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_oss_scan_config_with_options_async(
        self,
        request: sas_20181203_models.GetOssScanConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetOssScanConfigResponse:
        """
        @summary Queries the configurations of an Object Storage Service (OSS) bucket check policy.
        
        @param request: GetOssScanConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetOssScanConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.bucket_name):
            query['BucketName'] = request.bucket_name
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetOssScanConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetOssScanConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_oss_scan_config(
        self,
        request: sas_20181203_models.GetOssScanConfigRequest,
    ) -> sas_20181203_models.GetOssScanConfigResponse:
        """
        @summary Queries the configurations of an Object Storage Service (OSS) bucket check policy.
        
        @param request: GetOssScanConfigRequest
        @return: GetOssScanConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_oss_scan_config_with_options(request, runtime)

    async def get_oss_scan_config_async(
        self,
        request: sas_20181203_models.GetOssScanConfigRequest,
    ) -> sas_20181203_models.GetOssScanConfigResponse:
        """
        @summary Queries the configurations of an Object Storage Service (OSS) bucket check policy.
        
        @param request: GetOssScanConfigRequest
        @return: GetOssScanConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_oss_scan_config_with_options_async(request, runtime)

    def get_property_schedule_config_with_options(
        self,
        request: sas_20181203_models.GetPropertyScheduleConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetPropertyScheduleConfigResponse:
        """
        @summary Queries the configurations for the collection frequency of asset fingerprints.
        
        @param request: GetPropertyScheduleConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetPropertyScheduleConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetPropertyScheduleConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetPropertyScheduleConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_property_schedule_config_with_options_async(
        self,
        request: sas_20181203_models.GetPropertyScheduleConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetPropertyScheduleConfigResponse:
        """
        @summary Queries the configurations for the collection frequency of asset fingerprints.
        
        @param request: GetPropertyScheduleConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetPropertyScheduleConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetPropertyScheduleConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetPropertyScheduleConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_property_schedule_config(
        self,
        request: sas_20181203_models.GetPropertyScheduleConfigRequest,
    ) -> sas_20181203_models.GetPropertyScheduleConfigResponse:
        """
        @summary Queries the configurations for the collection frequency of asset fingerprints.
        
        @param request: GetPropertyScheduleConfigRequest
        @return: GetPropertyScheduleConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_property_schedule_config_with_options(request, runtime)

    async def get_property_schedule_config_async(
        self,
        request: sas_20181203_models.GetPropertyScheduleConfigRequest,
    ) -> sas_20181203_models.GetPropertyScheduleConfigResponse:
        """
        @summary Queries the configurations for the collection frequency of asset fingerprints.
        
        @param request: GetPropertyScheduleConfigRequest
        @return: GetPropertyScheduleConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_property_schedule_config_with_options_async(request, runtime)

    def get_publish_cron_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetPublishCronResponse:
        """
        @summary Get Publish Time Configuration
        
        @param request: GetPublishCronRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetPublishCronResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetPublishCron',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetPublishCronResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_publish_cron_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetPublishCronResponse:
        """
        @summary Get Publish Time Configuration
        
        @param request: GetPublishCronRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetPublishCronResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetPublishCron',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetPublishCronResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_publish_cron(self) -> sas_20181203_models.GetPublishCronResponse:
        """
        @summary Get Publish Time Configuration
        
        @return: GetPublishCronResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_publish_cron_with_options(runtime)

    async def get_publish_cron_async(self) -> sas_20181203_models.GetPublishCronResponse:
        """
        @summary Get Publish Time Configuration
        
        @return: GetPublishCronResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_publish_cron_with_options_async(runtime)

    def get_rd_tree_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetRdTreeResponse:
        """
        @summary Queries the organizational structure of a resource directory by using the multi-account management feature.
        
        @description You can call this operation only by using the management account of a resource directory or a delegated administrator account of Security Center.
        
        @param request: GetRdTreeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetRdTreeResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetRdTree',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetRdTreeResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_rd_tree_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetRdTreeResponse:
        """
        @summary Queries the organizational structure of a resource directory by using the multi-account management feature.
        
        @description You can call this operation only by using the management account of a resource directory or a delegated administrator account of Security Center.
        
        @param request: GetRdTreeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetRdTreeResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetRdTree',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetRdTreeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_rd_tree(self) -> sas_20181203_models.GetRdTreeResponse:
        """
        @summary Queries the organizational structure of a resource directory by using the multi-account management feature.
        
        @description You can call this operation only by using the management account of a resource directory or a delegated administrator account of Security Center.
        
        @return: GetRdTreeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_rd_tree_with_options(runtime)

    async def get_rd_tree_async(self) -> sas_20181203_models.GetRdTreeResponse:
        """
        @summary Queries the organizational structure of a resource directory by using the multi-account management feature.
        
        @description You can call this operation only by using the management account of a resource directory or a delegated administrator account of Security Center.
        
        @return: GetRdTreeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_rd_tree_with_options_async(runtime)

    def get_registry_scan_day_num_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetRegistryScanDayNumResponse:
        """
        @summary Query Image Scan Period.
        
        @param request: GetRegistryScanDayNumRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetRegistryScanDayNumResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetRegistryScanDayNum',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetRegistryScanDayNumResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_registry_scan_day_num_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetRegistryScanDayNumResponse:
        """
        @summary Query Image Scan Period.
        
        @param request: GetRegistryScanDayNumRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetRegistryScanDayNumResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetRegistryScanDayNum',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetRegistryScanDayNumResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_registry_scan_day_num(self) -> sas_20181203_models.GetRegistryScanDayNumResponse:
        """
        @summary Query Image Scan Period.
        
        @return: GetRegistryScanDayNumResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_registry_scan_day_num_with_options(runtime)

    async def get_registry_scan_day_num_async(self) -> sas_20181203_models.GetRegistryScanDayNumResponse:
        """
        @summary Query Image Scan Period.
        
        @return: GetRegistryScanDayNumResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_registry_scan_day_num_with_options_async(runtime)

    def get_rules_count_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetRulesCountResponse:
        """
        @summary Queries the numbers of system defense rules and custom defense rules.
        
        @param request: GetRulesCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetRulesCountResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetRulesCount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetRulesCountResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_rules_count_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetRulesCountResponse:
        """
        @summary Queries the numbers of system defense rules and custom defense rules.
        
        @param request: GetRulesCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetRulesCountResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetRulesCount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetRulesCountResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_rules_count(self) -> sas_20181203_models.GetRulesCountResponse:
        """
        @summary Queries the numbers of system defense rules and custom defense rules.
        
        @return: GetRulesCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_rules_count_with_options(runtime)

    async def get_rules_count_async(self) -> sas_20181203_models.GetRulesCountResponse:
        """
        @summary Queries the numbers of system defense rules and custom defense rules.
        
        @return: GetRulesCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_rules_count_with_options_async(runtime)

    def get_sas_container_web_defense_rule_with_options(
        self,
        request: sas_20181203_models.GetSasContainerWebDefenseRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetSasContainerWebDefenseRuleResponse:
        """
        @summary Get Container File Defense Rule Details.
        
        @param request: GetSasContainerWebDefenseRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSasContainerWebDefenseRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.rule_id):
            query['RuleId'] = request.rule_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetSasContainerWebDefenseRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetSasContainerWebDefenseRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_sas_container_web_defense_rule_with_options_async(
        self,
        request: sas_20181203_models.GetSasContainerWebDefenseRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetSasContainerWebDefenseRuleResponse:
        """
        @summary Get Container File Defense Rule Details.
        
        @param request: GetSasContainerWebDefenseRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSasContainerWebDefenseRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.rule_id):
            query['RuleId'] = request.rule_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetSasContainerWebDefenseRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetSasContainerWebDefenseRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_sas_container_web_defense_rule(
        self,
        request: sas_20181203_models.GetSasContainerWebDefenseRuleRequest,
    ) -> sas_20181203_models.GetSasContainerWebDefenseRuleResponse:
        """
        @summary Get Container File Defense Rule Details.
        
        @param request: GetSasContainerWebDefenseRuleRequest
        @return: GetSasContainerWebDefenseRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_sas_container_web_defense_rule_with_options(request, runtime)

    async def get_sas_container_web_defense_rule_async(
        self,
        request: sas_20181203_models.GetSasContainerWebDefenseRuleRequest,
    ) -> sas_20181203_models.GetSasContainerWebDefenseRuleResponse:
        """
        @summary Get Container File Defense Rule Details.
        
        @param request: GetSasContainerWebDefenseRuleRequest
        @return: GetSasContainerWebDefenseRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_sas_container_web_defense_rule_with_options_async(request, runtime)

    def get_sas_container_web_defense_rule_application_with_options(
        self,
        request: sas_20181203_models.GetSasContainerWebDefenseRuleApplicationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetSasContainerWebDefenseRuleApplicationResponse:
        """
        @summary Queries the applications that are specified in a rule for container tamper-proofing.
        
        @param request: GetSasContainerWebDefenseRuleApplicationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSasContainerWebDefenseRuleApplicationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.rule_id):
            query['RuleId'] = request.rule_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetSasContainerWebDefenseRuleApplication',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetSasContainerWebDefenseRuleApplicationResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_sas_container_web_defense_rule_application_with_options_async(
        self,
        request: sas_20181203_models.GetSasContainerWebDefenseRuleApplicationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetSasContainerWebDefenseRuleApplicationResponse:
        """
        @summary Queries the applications that are specified in a rule for container tamper-proofing.
        
        @param request: GetSasContainerWebDefenseRuleApplicationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSasContainerWebDefenseRuleApplicationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.rule_id):
            query['RuleId'] = request.rule_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetSasContainerWebDefenseRuleApplication',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetSasContainerWebDefenseRuleApplicationResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_sas_container_web_defense_rule_application(
        self,
        request: sas_20181203_models.GetSasContainerWebDefenseRuleApplicationRequest,
    ) -> sas_20181203_models.GetSasContainerWebDefenseRuleApplicationResponse:
        """
        @summary Queries the applications that are specified in a rule for container tamper-proofing.
        
        @param request: GetSasContainerWebDefenseRuleApplicationRequest
        @return: GetSasContainerWebDefenseRuleApplicationResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_sas_container_web_defense_rule_application_with_options(request, runtime)

    async def get_sas_container_web_defense_rule_application_async(
        self,
        request: sas_20181203_models.GetSasContainerWebDefenseRuleApplicationRequest,
    ) -> sas_20181203_models.GetSasContainerWebDefenseRuleApplicationResponse:
        """
        @summary Queries the applications that are specified in a rule for container tamper-proofing.
        
        @param request: GetSasContainerWebDefenseRuleApplicationRequest
        @return: GetSasContainerWebDefenseRuleApplicationResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_sas_container_web_defense_rule_application_with_options_async(request, runtime)

    def get_sas_container_web_defense_rule_criteria_with_options(
        self,
        request: sas_20181203_models.GetSasContainerWebDefenseRuleCriteriaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetSasContainerWebDefenseRuleCriteriaResponse:
        """
        @summary Queries search conditions that can be used to search for container file protection rules.
        
        @param request: GetSasContainerWebDefenseRuleCriteriaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSasContainerWebDefenseRuleCriteriaResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.value):
            query['Value'] = request.value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetSasContainerWebDefenseRuleCriteria',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetSasContainerWebDefenseRuleCriteriaResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_sas_container_web_defense_rule_criteria_with_options_async(
        self,
        request: sas_20181203_models.GetSasContainerWebDefenseRuleCriteriaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetSasContainerWebDefenseRuleCriteriaResponse:
        """
        @summary Queries search conditions that can be used to search for container file protection rules.
        
        @param request: GetSasContainerWebDefenseRuleCriteriaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSasContainerWebDefenseRuleCriteriaResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.value):
            query['Value'] = request.value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetSasContainerWebDefenseRuleCriteria',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetSasContainerWebDefenseRuleCriteriaResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_sas_container_web_defense_rule_criteria(
        self,
        request: sas_20181203_models.GetSasContainerWebDefenseRuleCriteriaRequest,
    ) -> sas_20181203_models.GetSasContainerWebDefenseRuleCriteriaResponse:
        """
        @summary Queries search conditions that can be used to search for container file protection rules.
        
        @param request: GetSasContainerWebDefenseRuleCriteriaRequest
        @return: GetSasContainerWebDefenseRuleCriteriaResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_sas_container_web_defense_rule_criteria_with_options(request, runtime)

    async def get_sas_container_web_defense_rule_criteria_async(
        self,
        request: sas_20181203_models.GetSasContainerWebDefenseRuleCriteriaRequest,
    ) -> sas_20181203_models.GetSasContainerWebDefenseRuleCriteriaResponse:
        """
        @summary Queries search conditions that can be used to search for container file protection rules.
        
        @param request: GetSasContainerWebDefenseRuleCriteriaRequest
        @return: GetSasContainerWebDefenseRuleCriteriaResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_sas_container_web_defense_rule_criteria_with_options_async(request, runtime)

    def get_security_score_rule_with_options(
        self,
        request: sas_20181203_models.GetSecurityScoreRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetSecurityScoreRuleResponse:
        """
        @summary Queries the details of the deduction modules of the security score feature, including custom settings.
        
        @param request: GetSecurityScoreRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSecurityScoreRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cal_type):
            query['CalType'] = request.cal_type
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetSecurityScoreRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetSecurityScoreRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_security_score_rule_with_options_async(
        self,
        request: sas_20181203_models.GetSecurityScoreRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetSecurityScoreRuleResponse:
        """
        @summary Queries the details of the deduction modules of the security score feature, including custom settings.
        
        @param request: GetSecurityScoreRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSecurityScoreRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cal_type):
            query['CalType'] = request.cal_type
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetSecurityScoreRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetSecurityScoreRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_security_score_rule(
        self,
        request: sas_20181203_models.GetSecurityScoreRuleRequest,
    ) -> sas_20181203_models.GetSecurityScoreRuleResponse:
        """
        @summary Queries the details of the deduction modules of the security score feature, including custom settings.
        
        @param request: GetSecurityScoreRuleRequest
        @return: GetSecurityScoreRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_security_score_rule_with_options(request, runtime)

    async def get_security_score_rule_async(
        self,
        request: sas_20181203_models.GetSecurityScoreRuleRequest,
    ) -> sas_20181203_models.GetSecurityScoreRuleResponse:
        """
        @summary Queries the details of the deduction modules of the security score feature, including custom settings.
        
        @param request: GetSecurityScoreRuleRequest
        @return: GetSecurityScoreRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_security_score_rule_with_options_async(request, runtime)

    def get_sensitive_define_rule_config_with_options(
        self,
        request: sas_20181203_models.GetSensitiveDefineRuleConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetSensitiveDefineRuleConfigResponse:
        """
        @summary Queries the check rules of sensitive files.
        
        @param request: GetSensitiveDefineRuleConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSensitiveDefineRuleConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetSensitiveDefineRuleConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetSensitiveDefineRuleConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_sensitive_define_rule_config_with_options_async(
        self,
        request: sas_20181203_models.GetSensitiveDefineRuleConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetSensitiveDefineRuleConfigResponse:
        """
        @summary Queries the check rules of sensitive files.
        
        @param request: GetSensitiveDefineRuleConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSensitiveDefineRuleConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetSensitiveDefineRuleConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetSensitiveDefineRuleConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_sensitive_define_rule_config(
        self,
        request: sas_20181203_models.GetSensitiveDefineRuleConfigRequest,
    ) -> sas_20181203_models.GetSensitiveDefineRuleConfigResponse:
        """
        @summary Queries the check rules of sensitive files.
        
        @param request: GetSensitiveDefineRuleConfigRequest
        @return: GetSensitiveDefineRuleConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_sensitive_define_rule_config_with_options(request, runtime)

    async def get_sensitive_define_rule_config_async(
        self,
        request: sas_20181203_models.GetSensitiveDefineRuleConfigRequest,
    ) -> sas_20181203_models.GetSensitiveDefineRuleConfigResponse:
        """
        @summary Queries the check rules of sensitive files.
        
        @param request: GetSensitiveDefineRuleConfigRequest
        @return: GetSensitiveDefineRuleConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_sensitive_define_rule_config_with_options_async(request, runtime)

    def get_serverless_app_auth_detail_with_options(
        self,
        request: sas_20181203_models.GetServerlessAppAuthDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetServerlessAppAuthDetailResponse:
        """
        @summary Get Serverless Application Authorization Details
        
        @param request: GetServerlessAppAuthDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetServerlessAppAuthDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_id):
            query['AppId'] = request.app_id
        if not UtilClient.is_unset(request.app_region_id):
            query['AppRegionId'] = request.app_region_id
        if not UtilClient.is_unset(request.machine_type):
            query['MachineType'] = request.machine_type
        if not UtilClient.is_unset(request.vendor_type):
            query['VendorType'] = request.vendor_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetServerlessAppAuthDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetServerlessAppAuthDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_serverless_app_auth_detail_with_options_async(
        self,
        request: sas_20181203_models.GetServerlessAppAuthDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetServerlessAppAuthDetailResponse:
        """
        @summary Get Serverless Application Authorization Details
        
        @param request: GetServerlessAppAuthDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetServerlessAppAuthDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_id):
            query['AppId'] = request.app_id
        if not UtilClient.is_unset(request.app_region_id):
            query['AppRegionId'] = request.app_region_id
        if not UtilClient.is_unset(request.machine_type):
            query['MachineType'] = request.machine_type
        if not UtilClient.is_unset(request.vendor_type):
            query['VendorType'] = request.vendor_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetServerlessAppAuthDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetServerlessAppAuthDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_serverless_app_auth_detail(
        self,
        request: sas_20181203_models.GetServerlessAppAuthDetailRequest,
    ) -> sas_20181203_models.GetServerlessAppAuthDetailResponse:
        """
        @summary Get Serverless Application Authorization Details
        
        @param request: GetServerlessAppAuthDetailRequest
        @return: GetServerlessAppAuthDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_serverless_app_auth_detail_with_options(request, runtime)

    async def get_serverless_app_auth_detail_async(
        self,
        request: sas_20181203_models.GetServerlessAppAuthDetailRequest,
    ) -> sas_20181203_models.GetServerlessAppAuthDetailResponse:
        """
        @summary Get Serverless Application Authorization Details
        
        @param request: GetServerlessAppAuthDetailRequest
        @return: GetServerlessAppAuthDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_serverless_app_auth_detail_with_options_async(request, runtime)

    def get_serverless_auth_summary_with_options(
        self,
        request: sas_20181203_models.GetServerlessAuthSummaryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetServerlessAuthSummaryResponse:
        """
        @summary Get Serverless Authorization Overview
        
        @param request: GetServerlessAuthSummaryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetServerlessAuthSummaryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_region_id):
            query['AppRegionId'] = request.app_region_id
        if not UtilClient.is_unset(request.machine_type):
            query['MachineType'] = request.machine_type
        if not UtilClient.is_unset(request.vendor_type):
            query['VendorType'] = request.vendor_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetServerlessAuthSummary',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetServerlessAuthSummaryResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_serverless_auth_summary_with_options_async(
        self,
        request: sas_20181203_models.GetServerlessAuthSummaryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetServerlessAuthSummaryResponse:
        """
        @summary Get Serverless Authorization Overview
        
        @param request: GetServerlessAuthSummaryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetServerlessAuthSummaryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_region_id):
            query['AppRegionId'] = request.app_region_id
        if not UtilClient.is_unset(request.machine_type):
            query['MachineType'] = request.machine_type
        if not UtilClient.is_unset(request.vendor_type):
            query['VendorType'] = request.vendor_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetServerlessAuthSummary',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetServerlessAuthSummaryResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_serverless_auth_summary(
        self,
        request: sas_20181203_models.GetServerlessAuthSummaryRequest,
    ) -> sas_20181203_models.GetServerlessAuthSummaryResponse:
        """
        @summary Get Serverless Authorization Overview
        
        @param request: GetServerlessAuthSummaryRequest
        @return: GetServerlessAuthSummaryResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_serverless_auth_summary_with_options(request, runtime)

    async def get_serverless_auth_summary_async(
        self,
        request: sas_20181203_models.GetServerlessAuthSummaryRequest,
    ) -> sas_20181203_models.GetServerlessAuthSummaryResponse:
        """
        @summary Get Serverless Authorization Overview
        
        @param request: GetServerlessAuthSummaryRequest
        @return: GetServerlessAuthSummaryResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_serverless_auth_summary_with_options_async(request, runtime)

    def get_service_trail_with_options(
        self,
        request: sas_20181203_models.GetServiceTrailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetServiceTrailResponse:
        """
        @summary Queries the service trail that was delivered to ActionTrail.
        
        @param request: GetServiceTrailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetServiceTrailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetServiceTrail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetServiceTrailResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_service_trail_with_options_async(
        self,
        request: sas_20181203_models.GetServiceTrailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetServiceTrailResponse:
        """
        @summary Queries the service trail that was delivered to ActionTrail.
        
        @param request: GetServiceTrailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetServiceTrailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetServiceTrail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetServiceTrailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_service_trail(
        self,
        request: sas_20181203_models.GetServiceTrailRequest,
    ) -> sas_20181203_models.GetServiceTrailResponse:
        """
        @summary Queries the service trail that was delivered to ActionTrail.
        
        @param request: GetServiceTrailRequest
        @return: GetServiceTrailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_service_trail_with_options(request, runtime)

    async def get_service_trail_async(
        self,
        request: sas_20181203_models.GetServiceTrailRequest,
    ) -> sas_20181203_models.GetServiceTrailResponse:
        """
        @summary Queries the service trail that was delivered to ActionTrail.
        
        @param request: GetServiceTrailRequest
        @return: GetServiceTrailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_service_trail_with_options_async(request, runtime)

    def get_strategy_template_detail_with_options(
        self,
        request: sas_20181203_models.GetStrategyTemplateDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetStrategyTemplateDetailResponse:
        """
        @summary Queries the usage details of templates provided in the feature of proactive defense for containers for rules.
        
        @param request: GetStrategyTemplateDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetStrategyTemplateDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetStrategyTemplateDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetStrategyTemplateDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_strategy_template_detail_with_options_async(
        self,
        request: sas_20181203_models.GetStrategyTemplateDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetStrategyTemplateDetailResponse:
        """
        @summary Queries the usage details of templates provided in the feature of proactive defense for containers for rules.
        
        @param request: GetStrategyTemplateDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetStrategyTemplateDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetStrategyTemplateDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetStrategyTemplateDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_strategy_template_detail(
        self,
        request: sas_20181203_models.GetStrategyTemplateDetailRequest,
    ) -> sas_20181203_models.GetStrategyTemplateDetailResponse:
        """
        @summary Queries the usage details of templates provided in the feature of proactive defense for containers for rules.
        
        @param request: GetStrategyTemplateDetailRequest
        @return: GetStrategyTemplateDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_strategy_template_detail_with_options(request, runtime)

    async def get_strategy_template_detail_async(
        self,
        request: sas_20181203_models.GetStrategyTemplateDetailRequest,
    ) -> sas_20181203_models.GetStrategyTemplateDetailResponse:
        """
        @summary Queries the usage details of templates provided in the feature of proactive defense for containers for rules.
        
        @param request: GetStrategyTemplateDetailRequest
        @return: GetStrategyTemplateDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_strategy_template_detail_with_options_async(request, runtime)

    def get_supported_modules_with_options(
        self,
        request: sas_20181203_models.GetSupportedModulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetSupportedModulesResponse:
        """
        @summary Get the list of modules supported by authorization.
        
        @param request: GetSupportedModulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSupportedModulesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetSupportedModules',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetSupportedModulesResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_supported_modules_with_options_async(
        self,
        request: sas_20181203_models.GetSupportedModulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetSupportedModulesResponse:
        """
        @summary Get the list of modules supported by authorization.
        
        @param request: GetSupportedModulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSupportedModulesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetSupportedModules',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetSupportedModulesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_supported_modules(
        self,
        request: sas_20181203_models.GetSupportedModulesRequest,
    ) -> sas_20181203_models.GetSupportedModulesResponse:
        """
        @summary Get the list of modules supported by authorization.
        
        @param request: GetSupportedModulesRequest
        @return: GetSupportedModulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_supported_modules_with_options(request, runtime)

    async def get_supported_modules_async(
        self,
        request: sas_20181203_models.GetSupportedModulesRequest,
    ) -> sas_20181203_models.GetSupportedModulesResponse:
        """
        @summary Get the list of modules supported by authorization.
        
        @param request: GetSupportedModulesRequest
        @return: GetSupportedModulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_supported_modules_with_options_async(request, runtime)

    def get_suspicious_statistics_with_options(
        self,
        request: sas_20181203_models.GetSuspiciousStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetSuspiciousStatisticsResponse:
        """
        @summary Queries the statistics on alerts in one or more asset groups.
        
        @param request: GetSuspiciousStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSuspiciousStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.group_id_list):
            query['GroupIdList'] = request.group_id_list
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetSuspiciousStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetSuspiciousStatisticsResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_suspicious_statistics_with_options_async(
        self,
        request: sas_20181203_models.GetSuspiciousStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetSuspiciousStatisticsResponse:
        """
        @summary Queries the statistics on alerts in one or more asset groups.
        
        @param request: GetSuspiciousStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSuspiciousStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.group_id_list):
            query['GroupIdList'] = request.group_id_list
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetSuspiciousStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetSuspiciousStatisticsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_suspicious_statistics(
        self,
        request: sas_20181203_models.GetSuspiciousStatisticsRequest,
    ) -> sas_20181203_models.GetSuspiciousStatisticsResponse:
        """
        @summary Queries the statistics on alerts in one or more asset groups.
        
        @param request: GetSuspiciousStatisticsRequest
        @return: GetSuspiciousStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_suspicious_statistics_with_options(request, runtime)

    async def get_suspicious_statistics_async(
        self,
        request: sas_20181203_models.GetSuspiciousStatisticsRequest,
    ) -> sas_20181203_models.GetSuspiciousStatisticsResponse:
        """
        @summary Queries the statistics on alerts in one or more asset groups.
        
        @param request: GetSuspiciousStatisticsRequest
        @return: GetSuspiciousStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_suspicious_statistics_with_options_async(request, runtime)

    def get_switch_region_detail_with_options(
        self,
        request: sas_20181203_models.GetSwitchRegionDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetSwitchRegionDetailResponse:
        """
        @summary Queries the details of a migration operation. For example, you can query the progress and status of a migration operation after you migrate a server from a region in the Chinese mainland to the Singapore region.
        
        @param request: GetSwitchRegionDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSwitchRegionDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetSwitchRegionDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetSwitchRegionDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_switch_region_detail_with_options_async(
        self,
        request: sas_20181203_models.GetSwitchRegionDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetSwitchRegionDetailResponse:
        """
        @summary Queries the details of a migration operation. For example, you can query the progress and status of a migration operation after you migrate a server from a region in the Chinese mainland to the Singapore region.
        
        @param request: GetSwitchRegionDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSwitchRegionDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetSwitchRegionDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetSwitchRegionDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_switch_region_detail(
        self,
        request: sas_20181203_models.GetSwitchRegionDetailRequest,
    ) -> sas_20181203_models.GetSwitchRegionDetailResponse:
        """
        @summary Queries the details of a migration operation. For example, you can query the progress and status of a migration operation after you migrate a server from a region in the Chinese mainland to the Singapore region.
        
        @param request: GetSwitchRegionDetailRequest
        @return: GetSwitchRegionDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_switch_region_detail_with_options(request, runtime)

    async def get_switch_region_detail_async(
        self,
        request: sas_20181203_models.GetSwitchRegionDetailRequest,
    ) -> sas_20181203_models.GetSwitchRegionDetailResponse:
        """
        @summary Queries the details of a migration operation. For example, you can query the progress and status of a migration operation after you migrate a server from a region in the Chinese mainland to the Singapore region.
        
        @param request: GetSwitchRegionDetailRequest
        @return: GetSwitchRegionDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_switch_region_detail_with_options_async(request, runtime)

    def get_tenant_check_available_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetTenantCheckAvailableResponse:
        """
        @summary Checks whether you can submit a free quick scan task, which includes vulnerability detection in the free category and free check items of Cloud Security Posture Management (CSPM).
        
        @param request: GetTenantCheckAvailableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetTenantCheckAvailableResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetTenantCheckAvailable',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetTenantCheckAvailableResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_tenant_check_available_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetTenantCheckAvailableResponse:
        """
        @summary Checks whether you can submit a free quick scan task, which includes vulnerability detection in the free category and free check items of Cloud Security Posture Management (CSPM).
        
        @param request: GetTenantCheckAvailableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetTenantCheckAvailableResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetTenantCheckAvailable',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetTenantCheckAvailableResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_tenant_check_available(self) -> sas_20181203_models.GetTenantCheckAvailableResponse:
        """
        @summary Checks whether you can submit a free quick scan task, which includes vulnerability detection in the free category and free check items of Cloud Security Posture Management (CSPM).
        
        @return: GetTenantCheckAvailableResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_tenant_check_available_with_options(runtime)

    async def get_tenant_check_available_async(self) -> sas_20181203_models.GetTenantCheckAvailableResponse:
        """
        @summary Checks whether you can submit a free quick scan task, which includes vulnerability detection in the free category and free check items of Cloud Security Posture Management (CSPM).
        
        @return: GetTenantCheckAvailableResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_tenant_check_available_with_options_async(runtime)

    def get_user_lang_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetUserLangResponse:
        """
        @summary Queries the language settings of log analysis.
        
        @param request: GetUserLangRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetUserLangResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetUserLang',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetUserLangResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_user_lang_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetUserLangResponse:
        """
        @summary Queries the language settings of log analysis.
        
        @param request: GetUserLangRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetUserLangResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetUserLang',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetUserLangResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_user_lang(self) -> sas_20181203_models.GetUserLangResponse:
        """
        @summary Queries the language settings of log analysis.
        
        @return: GetUserLangResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_user_lang_with_options(runtime)

    async def get_user_lang_async(self) -> sas_20181203_models.GetUserLangResponse:
        """
        @summary Queries the language settings of log analysis.
        
        @return: GetUserLangResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_user_lang_with_options_async(runtime)

    def get_virus_scan_config_with_options(
        self,
        request: sas_20181203_models.GetVirusScanConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetVirusScanConfigResponse:
        """
        @summary Queries the configurations of a periodic virus scan task.
        
        @param request: GetVirusScanConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetVirusScanConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.task_type):
            query['TaskType'] = request.task_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetVirusScanConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetVirusScanConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_virus_scan_config_with_options_async(
        self,
        request: sas_20181203_models.GetVirusScanConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetVirusScanConfigResponse:
        """
        @summary Queries the configurations of a periodic virus scan task.
        
        @param request: GetVirusScanConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetVirusScanConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.task_type):
            query['TaskType'] = request.task_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetVirusScanConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetVirusScanConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_virus_scan_config(
        self,
        request: sas_20181203_models.GetVirusScanConfigRequest,
    ) -> sas_20181203_models.GetVirusScanConfigResponse:
        """
        @summary Queries the configurations of a periodic virus scan task.
        
        @param request: GetVirusScanConfigRequest
        @return: GetVirusScanConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_virus_scan_config_with_options(request, runtime)

    async def get_virus_scan_config_async(
        self,
        request: sas_20181203_models.GetVirusScanConfigRequest,
    ) -> sas_20181203_models.GetVirusScanConfigResponse:
        """
        @summary Queries the configurations of a periodic virus scan task.
        
        @param request: GetVirusScanConfigRequest
        @return: GetVirusScanConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_virus_scan_config_with_options_async(request, runtime)

    def get_virus_scan_latest_task_statistic_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetVirusScanLatestTaskStatisticResponse:
        """
        @summary Queries the information about the latest virus scan task.
        
        @param request: GetVirusScanLatestTaskStatisticRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetVirusScanLatestTaskStatisticResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetVirusScanLatestTaskStatistic',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetVirusScanLatestTaskStatisticResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_virus_scan_latest_task_statistic_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetVirusScanLatestTaskStatisticResponse:
        """
        @summary Queries the information about the latest virus scan task.
        
        @param request: GetVirusScanLatestTaskStatisticRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetVirusScanLatestTaskStatisticResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='GetVirusScanLatestTaskStatistic',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetVirusScanLatestTaskStatisticResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_virus_scan_latest_task_statistic(self) -> sas_20181203_models.GetVirusScanLatestTaskStatisticResponse:
        """
        @summary Queries the information about the latest virus scan task.
        
        @return: GetVirusScanLatestTaskStatisticResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_virus_scan_latest_task_statistic_with_options(runtime)

    async def get_virus_scan_latest_task_statistic_async(self) -> sas_20181203_models.GetVirusScanLatestTaskStatisticResponse:
        """
        @summary Queries the information about the latest virus scan task.
        
        @return: GetVirusScanLatestTaskStatisticResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_virus_scan_latest_task_statistic_with_options_async(runtime)

    def get_vul_statistics_with_options(
        self,
        request: sas_20181203_models.GetVulStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetVulStatisticsResponse:
        """
        @summary Queries the statistics on vulnerabilities in asset groups.
        
        @param request: GetVulStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetVulStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.group_id_list):
            query['GroupIdList'] = request.group_id_list
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type_list):
            query['TypeList'] = request.type_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetVulStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetVulStatisticsResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_vul_statistics_with_options_async(
        self,
        request: sas_20181203_models.GetVulStatisticsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetVulStatisticsResponse:
        """
        @summary Queries the statistics on vulnerabilities in asset groups.
        
        @param request: GetVulStatisticsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetVulStatisticsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.group_id_list):
            query['GroupIdList'] = request.group_id_list
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type_list):
            query['TypeList'] = request.type_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetVulStatistics',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetVulStatisticsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_vul_statistics(
        self,
        request: sas_20181203_models.GetVulStatisticsRequest,
    ) -> sas_20181203_models.GetVulStatisticsResponse:
        """
        @summary Queries the statistics on vulnerabilities in asset groups.
        
        @param request: GetVulStatisticsRequest
        @return: GetVulStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_vul_statistics_with_options(request, runtime)

    async def get_vul_statistics_async(
        self,
        request: sas_20181203_models.GetVulStatisticsRequest,
    ) -> sas_20181203_models.GetVulStatisticsResponse:
        """
        @summary Queries the statistics on vulnerabilities in asset groups.
        
        @param request: GetVulStatisticsRequest
        @return: GetVulStatisticsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_vul_statistics_with_options_async(request, runtime)

    def get_vul_whitelist_with_options(
        self,
        request: sas_20181203_models.GetVulWhitelistRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetVulWhitelistResponse:
        """
        @summary Queries information about a vulnerability whitelist.
        
        @param request: GetVulWhitelistRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetVulWhitelistResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.vul_whitelist_id):
            query['VulWhitelistId'] = request.vul_whitelist_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetVulWhitelist',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetVulWhitelistResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_vul_whitelist_with_options_async(
        self,
        request: sas_20181203_models.GetVulWhitelistRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GetVulWhitelistResponse:
        """
        @summary Queries information about a vulnerability whitelist.
        
        @param request: GetVulWhitelistRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetVulWhitelistResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.vul_whitelist_id):
            query['VulWhitelistId'] = request.vul_whitelist_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetVulWhitelist',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GetVulWhitelistResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_vul_whitelist(
        self,
        request: sas_20181203_models.GetVulWhitelistRequest,
    ) -> sas_20181203_models.GetVulWhitelistResponse:
        """
        @summary Queries information about a vulnerability whitelist.
        
        @param request: GetVulWhitelistRequest
        @return: GetVulWhitelistResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_vul_whitelist_with_options(request, runtime)

    async def get_vul_whitelist_async(
        self,
        request: sas_20181203_models.GetVulWhitelistRequest,
    ) -> sas_20181203_models.GetVulWhitelistResponse:
        """
        @summary Queries information about a vulnerability whitelist.
        
        @param request: GetVulWhitelistRequest
        @return: GetVulWhitelistResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_vul_whitelist_with_options_async(request, runtime)

    def grant_switch_agreement_with_options(
        self,
        request: sas_20181203_models.GrantSwitchAgreementRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GrantSwitchAgreementResponse:
        """
        @summary Authorization for Switching Migration
        
        @param request: GrantSwitchAgreementRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GrantSwitchAgreementResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.is_agree):
            query['IsAgree'] = request.is_agree
        if not UtilClient.is_unset(request.is_immediate):
            query['IsImmediate'] = request.is_immediate
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GrantSwitchAgreement',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GrantSwitchAgreementResponse(),
            self.call_api(params, req, runtime)
        )

    async def grant_switch_agreement_with_options_async(
        self,
        request: sas_20181203_models.GrantSwitchAgreementRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.GrantSwitchAgreementResponse:
        """
        @summary Authorization for Switching Migration
        
        @param request: GrantSwitchAgreementRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GrantSwitchAgreementResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.is_agree):
            query['IsAgree'] = request.is_agree
        if not UtilClient.is_unset(request.is_immediate):
            query['IsImmediate'] = request.is_immediate
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GrantSwitchAgreement',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.GrantSwitchAgreementResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def grant_switch_agreement(
        self,
        request: sas_20181203_models.GrantSwitchAgreementRequest,
    ) -> sas_20181203_models.GrantSwitchAgreementResponse:
        """
        @summary Authorization for Switching Migration
        
        @param request: GrantSwitchAgreementRequest
        @return: GrantSwitchAgreementResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.grant_switch_agreement_with_options(request, runtime)

    async def grant_switch_agreement_async(
        self,
        request: sas_20181203_models.GrantSwitchAgreementRequest,
    ) -> sas_20181203_models.GrantSwitchAgreementResponse:
        """
        @summary Authorization for Switching Migration
        
        @param request: GrantSwitchAgreementRequest
        @return: GrantSwitchAgreementResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.grant_switch_agreement_with_options_async(request, runtime)

    def handle_malicious_files_with_options(
        self,
        request: sas_20181203_models.HandleMaliciousFilesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.HandleMaliciousFilesResponse:
        """
        @summary Handle Malicious Files
        
        @param request: HandleMaliciousFilesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: HandleMaliciousFilesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.file_id_list):
            query['FileIdList'] = request.file_id_list
        if not UtilClient.is_unset(request.operation):
            query['Operation'] = request.operation
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='HandleMaliciousFiles',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.HandleMaliciousFilesResponse(),
            self.call_api(params, req, runtime)
        )

    async def handle_malicious_files_with_options_async(
        self,
        request: sas_20181203_models.HandleMaliciousFilesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.HandleMaliciousFilesResponse:
        """
        @summary Handle Malicious Files
        
        @param request: HandleMaliciousFilesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: HandleMaliciousFilesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.file_id_list):
            query['FileIdList'] = request.file_id_list
        if not UtilClient.is_unset(request.operation):
            query['Operation'] = request.operation
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='HandleMaliciousFiles',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.HandleMaliciousFilesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def handle_malicious_files(
        self,
        request: sas_20181203_models.HandleMaliciousFilesRequest,
    ) -> sas_20181203_models.HandleMaliciousFilesResponse:
        """
        @summary Handle Malicious Files
        
        @param request: HandleMaliciousFilesRequest
        @return: HandleMaliciousFilesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.handle_malicious_files_with_options(request, runtime)

    async def handle_malicious_files_async(
        self,
        request: sas_20181203_models.HandleMaliciousFilesRequest,
    ) -> sas_20181203_models.HandleMaliciousFilesResponse:
        """
        @summary Handle Malicious Files
        
        @param request: HandleMaliciousFilesRequest
        @return: HandleMaliciousFilesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.handle_malicious_files_with_options_async(request, runtime)

    def handle_security_events_with_options(
        self,
        request: sas_20181203_models.HandleSecurityEventsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.HandleSecurityEventsResponse:
        """
        @summary Handles alert events.
        
        @param request: HandleSecurityEventsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: HandleSecurityEventsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.mark_batch):
            query['MarkBatch'] = request.mark_batch
        if not UtilClient.is_unset(request.mark_miss_param):
            query['MarkMissParam'] = request.mark_miss_param
        if not UtilClient.is_unset(request.operation_code):
            query['OperationCode'] = request.operation_code
        if not UtilClient.is_unset(request.operation_params):
            query['OperationParams'] = request.operation_params
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.security_event_ids):
            query['SecurityEventIds'] = request.security_event_ids
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='HandleSecurityEvents',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.HandleSecurityEventsResponse(),
            self.call_api(params, req, runtime)
        )

    async def handle_security_events_with_options_async(
        self,
        request: sas_20181203_models.HandleSecurityEventsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.HandleSecurityEventsResponse:
        """
        @summary Handles alert events.
        
        @param request: HandleSecurityEventsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: HandleSecurityEventsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.mark_batch):
            query['MarkBatch'] = request.mark_batch
        if not UtilClient.is_unset(request.mark_miss_param):
            query['MarkMissParam'] = request.mark_miss_param
        if not UtilClient.is_unset(request.operation_code):
            query['OperationCode'] = request.operation_code
        if not UtilClient.is_unset(request.operation_params):
            query['OperationParams'] = request.operation_params
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.security_event_ids):
            query['SecurityEventIds'] = request.security_event_ids
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='HandleSecurityEvents',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.HandleSecurityEventsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def handle_security_events(
        self,
        request: sas_20181203_models.HandleSecurityEventsRequest,
    ) -> sas_20181203_models.HandleSecurityEventsResponse:
        """
        @summary Handles alert events.
        
        @param request: HandleSecurityEventsRequest
        @return: HandleSecurityEventsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.handle_security_events_with_options(request, runtime)

    async def handle_security_events_async(
        self,
        request: sas_20181203_models.HandleSecurityEventsRequest,
    ) -> sas_20181203_models.HandleSecurityEventsResponse:
        """
        @summary Handles alert events.
        
        @param request: HandleSecurityEventsRequest
        @return: HandleSecurityEventsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.handle_security_events_with_options_async(request, runtime)

    def handle_similar_security_events_with_options(
        self,
        request: sas_20181203_models.HandleSimilarSecurityEventsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.HandleSimilarSecurityEventsResponse:
        """
        @summary Handles multiple alert events that are triggered by the same IP address rule or IP address rules of the same type at a time.
        
        @param request: HandleSimilarSecurityEventsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: HandleSimilarSecurityEventsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.mark_miss_param):
            query['MarkMissParam'] = request.mark_miss_param
        if not UtilClient.is_unset(request.operation_code):
            query['OperationCode'] = request.operation_code
        if not UtilClient.is_unset(request.operation_params):
            query['OperationParams'] = request.operation_params
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.task_id):
            query['TaskId'] = request.task_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='HandleSimilarSecurityEvents',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.HandleSimilarSecurityEventsResponse(),
            self.call_api(params, req, runtime)
        )

    async def handle_similar_security_events_with_options_async(
        self,
        request: sas_20181203_models.HandleSimilarSecurityEventsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.HandleSimilarSecurityEventsResponse:
        """
        @summary Handles multiple alert events that are triggered by the same IP address rule or IP address rules of the same type at a time.
        
        @param request: HandleSimilarSecurityEventsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: HandleSimilarSecurityEventsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.mark_miss_param):
            query['MarkMissParam'] = request.mark_miss_param
        if not UtilClient.is_unset(request.operation_code):
            query['OperationCode'] = request.operation_code
        if not UtilClient.is_unset(request.operation_params):
            query['OperationParams'] = request.operation_params
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.task_id):
            query['TaskId'] = request.task_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='HandleSimilarSecurityEvents',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.HandleSimilarSecurityEventsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def handle_similar_security_events(
        self,
        request: sas_20181203_models.HandleSimilarSecurityEventsRequest,
    ) -> sas_20181203_models.HandleSimilarSecurityEventsResponse:
        """
        @summary Handles multiple alert events that are triggered by the same IP address rule or IP address rules of the same type at a time.
        
        @param request: HandleSimilarSecurityEventsRequest
        @return: HandleSimilarSecurityEventsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.handle_similar_security_events_with_options(request, runtime)

    async def handle_similar_security_events_async(
        self,
        request: sas_20181203_models.HandleSimilarSecurityEventsRequest,
    ) -> sas_20181203_models.HandleSimilarSecurityEventsResponse:
        """
        @summary Handles multiple alert events that are triggered by the same IP address rule or IP address rules of the same type at a time.
        
        @param request: HandleSimilarSecurityEventsRequest
        @return: HandleSimilarSecurityEventsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.handle_similar_security_events_with_options_async(request, runtime)

    def ignore_check_items_with_options(
        self,
        request: sas_20181203_models.IgnoreCheckItemsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.IgnoreCheckItemsResponse:
        """
        @summary Adds risk items to the whitelist or removes risk items from the whitelist by specifying servers and risk items.
        
        @param request: IgnoreCheckItemsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: IgnoreCheckItemsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_and_risk_type_list):
            query['CheckAndRiskTypeList'] = request.check_and_risk_type_list
        if not UtilClient.is_unset(request.check_ids):
            query['CheckIds'] = request.check_ids
        if not UtilClient.is_unset(request.container_items):
            query['ContainerItems'] = request.container_items
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reason):
            query['Reason'] = request.reason
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='IgnoreCheckItems',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.IgnoreCheckItemsResponse(),
            self.call_api(params, req, runtime)
        )

    async def ignore_check_items_with_options_async(
        self,
        request: sas_20181203_models.IgnoreCheckItemsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.IgnoreCheckItemsResponse:
        """
        @summary Adds risk items to the whitelist or removes risk items from the whitelist by specifying servers and risk items.
        
        @param request: IgnoreCheckItemsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: IgnoreCheckItemsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_and_risk_type_list):
            query['CheckAndRiskTypeList'] = request.check_and_risk_type_list
        if not UtilClient.is_unset(request.check_ids):
            query['CheckIds'] = request.check_ids
        if not UtilClient.is_unset(request.container_items):
            query['ContainerItems'] = request.container_items
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reason):
            query['Reason'] = request.reason
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='IgnoreCheckItems',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.IgnoreCheckItemsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def ignore_check_items(
        self,
        request: sas_20181203_models.IgnoreCheckItemsRequest,
    ) -> sas_20181203_models.IgnoreCheckItemsResponse:
        """
        @summary Adds risk items to the whitelist or removes risk items from the whitelist by specifying servers and risk items.
        
        @param request: IgnoreCheckItemsRequest
        @return: IgnoreCheckItemsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.ignore_check_items_with_options(request, runtime)

    async def ignore_check_items_async(
        self,
        request: sas_20181203_models.IgnoreCheckItemsRequest,
    ) -> sas_20181203_models.IgnoreCheckItemsResponse:
        """
        @summary Adds risk items to the whitelist or removes risk items from the whitelist by specifying servers and risk items.
        
        @param request: IgnoreCheckItemsRequest
        @return: IgnoreCheckItemsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.ignore_check_items_with_options_async(request, runtime)

    def ignore_hc_check_warnings_with_options(
        self,
        request: sas_20181203_models.IgnoreHcCheckWarningsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.IgnoreHcCheckWarningsResponse:
        """
        @deprecated OpenAPI IgnoreHcCheckWarnings is deprecated, please use Sas::2018-12-03::IgnoreCheckItems instead.
        
        @summary Ignores multiple baseline risk items at a time or cancels the ignore action that is performed on multiple baseline risk items at a time.
        
        @param request: IgnoreHcCheckWarningsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: IgnoreHcCheckWarningsResponse
        Deprecated
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_ids):
            query['CheckIds'] = request.check_ids
        if not UtilClient.is_unset(request.check_warning_ids):
            query['CheckWarningIds'] = request.check_warning_ids
        if not UtilClient.is_unset(request.reason):
            query['Reason'] = request.reason
        if not UtilClient.is_unset(request.risk_id):
            query['RiskId'] = request.risk_id
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='IgnoreHcCheckWarnings',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.IgnoreHcCheckWarningsResponse(),
            self.call_api(params, req, runtime)
        )

    async def ignore_hc_check_warnings_with_options_async(
        self,
        request: sas_20181203_models.IgnoreHcCheckWarningsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.IgnoreHcCheckWarningsResponse:
        """
        @deprecated OpenAPI IgnoreHcCheckWarnings is deprecated, please use Sas::2018-12-03::IgnoreCheckItems instead.
        
        @summary Ignores multiple baseline risk items at a time or cancels the ignore action that is performed on multiple baseline risk items at a time.
        
        @param request: IgnoreHcCheckWarningsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: IgnoreHcCheckWarningsResponse
        Deprecated
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_ids):
            query['CheckIds'] = request.check_ids
        if not UtilClient.is_unset(request.check_warning_ids):
            query['CheckWarningIds'] = request.check_warning_ids
        if not UtilClient.is_unset(request.reason):
            query['Reason'] = request.reason
        if not UtilClient.is_unset(request.risk_id):
            query['RiskId'] = request.risk_id
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='IgnoreHcCheckWarnings',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.IgnoreHcCheckWarningsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def ignore_hc_check_warnings(
        self,
        request: sas_20181203_models.IgnoreHcCheckWarningsRequest,
    ) -> sas_20181203_models.IgnoreHcCheckWarningsResponse:
        """
        @deprecated OpenAPI IgnoreHcCheckWarnings is deprecated, please use Sas::2018-12-03::IgnoreCheckItems instead.
        
        @summary Ignores multiple baseline risk items at a time or cancels the ignore action that is performed on multiple baseline risk items at a time.
        
        @param request: IgnoreHcCheckWarningsRequest
        @return: IgnoreHcCheckWarningsResponse
        Deprecated
        """
        runtime = util_models.RuntimeOptions()
        return self.ignore_hc_check_warnings_with_options(request, runtime)

    async def ignore_hc_check_warnings_async(
        self,
        request: sas_20181203_models.IgnoreHcCheckWarningsRequest,
    ) -> sas_20181203_models.IgnoreHcCheckWarningsResponse:
        """
        @deprecated OpenAPI IgnoreHcCheckWarnings is deprecated, please use Sas::2018-12-03::IgnoreCheckItems instead.
        
        @summary Ignores multiple baseline risk items at a time or cancels the ignore action that is performed on multiple baseline risk items at a time.
        
        @param request: IgnoreHcCheckWarningsRequest
        @return: IgnoreHcCheckWarningsResponse
        Deprecated
        """
        runtime = util_models.RuntimeOptions()
        return await self.ignore_hc_check_warnings_with_options_async(request, runtime)

    def ignore_idc_probe_scan_result_with_options(
        self,
        request: sas_20181203_models.IgnoreIdcProbeScanResultRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.IgnoreIdcProbeScanResultResponse:
        """
        @summary Adds the result scanned by an IDC probe to the whitelist or ignores the scan result.
        
        @param request: IgnoreIdcProbeScanResultRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: IgnoreIdcProbeScanResultResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.ignore_action):
            query['IgnoreAction'] = request.ignore_action
        if not UtilClient.is_unset(request.scan_result_ids):
            query['ScanResultIds'] = request.scan_result_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='IgnoreIdcProbeScanResult',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.IgnoreIdcProbeScanResultResponse(),
            self.call_api(params, req, runtime)
        )

    async def ignore_idc_probe_scan_result_with_options_async(
        self,
        request: sas_20181203_models.IgnoreIdcProbeScanResultRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.IgnoreIdcProbeScanResultResponse:
        """
        @summary Adds the result scanned by an IDC probe to the whitelist or ignores the scan result.
        
        @param request: IgnoreIdcProbeScanResultRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: IgnoreIdcProbeScanResultResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.ignore_action):
            query['IgnoreAction'] = request.ignore_action
        if not UtilClient.is_unset(request.scan_result_ids):
            query['ScanResultIds'] = request.scan_result_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='IgnoreIdcProbeScanResult',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.IgnoreIdcProbeScanResultResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def ignore_idc_probe_scan_result(
        self,
        request: sas_20181203_models.IgnoreIdcProbeScanResultRequest,
    ) -> sas_20181203_models.IgnoreIdcProbeScanResultResponse:
        """
        @summary Adds the result scanned by an IDC probe to the whitelist or ignores the scan result.
        
        @param request: IgnoreIdcProbeScanResultRequest
        @return: IgnoreIdcProbeScanResultResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.ignore_idc_probe_scan_result_with_options(request, runtime)

    async def ignore_idc_probe_scan_result_async(
        self,
        request: sas_20181203_models.IgnoreIdcProbeScanResultRequest,
    ) -> sas_20181203_models.IgnoreIdcProbeScanResultResponse:
        """
        @summary Adds the result scanned by an IDC probe to the whitelist or ignores the scan result.
        
        @param request: IgnoreIdcProbeScanResultRequest
        @return: IgnoreIdcProbeScanResultResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.ignore_idc_probe_scan_result_with_options_async(request, runtime)

    def install_aegis_for_lingjun_with_options(
        self,
        tmp_req: sas_20181203_models.InstallAegisForLingjunRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.InstallAegisForLingjunResponse:
        """
        @summary Install Aegis client on Lingjun bare metal.
        
        @param tmp_req: InstallAegisForLingjunRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: InstallAegisForLingjunResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.InstallAegisForLingjunShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.uuids):
            request.uuids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.uuids, 'Uuids', 'json')
        query = {}
        if not UtilClient.is_unset(request.uuids_shrink):
            query['Uuids'] = request.uuids_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='InstallAegisForLingjun',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.InstallAegisForLingjunResponse(),
            self.call_api(params, req, runtime)
        )

    async def install_aegis_for_lingjun_with_options_async(
        self,
        tmp_req: sas_20181203_models.InstallAegisForLingjunRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.InstallAegisForLingjunResponse:
        """
        @summary Install Aegis client on Lingjun bare metal.
        
        @param tmp_req: InstallAegisForLingjunRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: InstallAegisForLingjunResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.InstallAegisForLingjunShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.uuids):
            request.uuids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.uuids, 'Uuids', 'json')
        query = {}
        if not UtilClient.is_unset(request.uuids_shrink):
            query['Uuids'] = request.uuids_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='InstallAegisForLingjun',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.InstallAegisForLingjunResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def install_aegis_for_lingjun(
        self,
        request: sas_20181203_models.InstallAegisForLingjunRequest,
    ) -> sas_20181203_models.InstallAegisForLingjunResponse:
        """
        @summary Install Aegis client on Lingjun bare metal.
        
        @param request: InstallAegisForLingjunRequest
        @return: InstallAegisForLingjunResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.install_aegis_for_lingjun_with_options(request, runtime)

    async def install_aegis_for_lingjun_async(
        self,
        request: sas_20181203_models.InstallAegisForLingjunRequest,
    ) -> sas_20181203_models.InstallAegisForLingjunResponse:
        """
        @summary Install Aegis client on Lingjun bare metal.
        
        @param request: InstallAegisForLingjunRequest
        @return: InstallAegisForLingjunResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.install_aegis_for_lingjun_with_options_async(request, runtime)

    def install_backup_client_with_options(
        self,
        request: sas_20181203_models.InstallBackupClientRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.InstallBackupClientResponse:
        """
        @summary Installs the anti-ransomware agent.
        
        @param request: InstallBackupClientRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: InstallBackupClientResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.policy_version):
            query['PolicyVersion'] = request.policy_version
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='InstallBackupClient',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.InstallBackupClientResponse(),
            self.call_api(params, req, runtime)
        )

    async def install_backup_client_with_options_async(
        self,
        request: sas_20181203_models.InstallBackupClientRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.InstallBackupClientResponse:
        """
        @summary Installs the anti-ransomware agent.
        
        @param request: InstallBackupClientRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: InstallBackupClientResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.policy_version):
            query['PolicyVersion'] = request.policy_version
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='InstallBackupClient',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.InstallBackupClientResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def install_backup_client(
        self,
        request: sas_20181203_models.InstallBackupClientRequest,
    ) -> sas_20181203_models.InstallBackupClientResponse:
        """
        @summary Installs the anti-ransomware agent.
        
        @param request: InstallBackupClientRequest
        @return: InstallBackupClientResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.install_backup_client_with_options(request, runtime)

    async def install_backup_client_async(
        self,
        request: sas_20181203_models.InstallBackupClientRequest,
    ) -> sas_20181203_models.InstallBackupClientResponse:
        """
        @summary Installs the anti-ransomware agent.
        
        @param request: InstallBackupClientRequest
        @return: InstallBackupClientResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.install_backup_client_with_options_async(request, runtime)

    def install_cloud_monitor_with_options(
        self,
        request: sas_20181203_models.InstallCloudMonitorRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.InstallCloudMonitorResponse:
        """
        @summary Installs the CloudMonitor agent on specified servers.
        
        @description > Before you call this operation, make sure that the Security Center agent on your servers is online and the servers can access Alibaba Cloud services.
        
        @param request: InstallCloudMonitorRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: InstallCloudMonitorResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.agent_access_key):
            query['AgentAccessKey'] = request.agent_access_key
        if not UtilClient.is_unset(request.agent_secret_key):
            query['AgentSecretKey'] = request.agent_secret_key
        if not UtilClient.is_unset(request.argus_version):
            query['ArgusVersion'] = request.argus_version
        if not UtilClient.is_unset(request.instance_id_list):
            query['InstanceIdList'] = request.instance_id_list
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='InstallCloudMonitor',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.InstallCloudMonitorResponse(),
            self.call_api(params, req, runtime)
        )

    async def install_cloud_monitor_with_options_async(
        self,
        request: sas_20181203_models.InstallCloudMonitorRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.InstallCloudMonitorResponse:
        """
        @summary Installs the CloudMonitor agent on specified servers.
        
        @description > Before you call this operation, make sure that the Security Center agent on your servers is online and the servers can access Alibaba Cloud services.
        
        @param request: InstallCloudMonitorRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: InstallCloudMonitorResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.agent_access_key):
            query['AgentAccessKey'] = request.agent_access_key
        if not UtilClient.is_unset(request.agent_secret_key):
            query['AgentSecretKey'] = request.agent_secret_key
        if not UtilClient.is_unset(request.argus_version):
            query['ArgusVersion'] = request.argus_version
        if not UtilClient.is_unset(request.instance_id_list):
            query['InstanceIdList'] = request.instance_id_list
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='InstallCloudMonitor',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.InstallCloudMonitorResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def install_cloud_monitor(
        self,
        request: sas_20181203_models.InstallCloudMonitorRequest,
    ) -> sas_20181203_models.InstallCloudMonitorResponse:
        """
        @summary Installs the CloudMonitor agent on specified servers.
        
        @description > Before you call this operation, make sure that the Security Center agent on your servers is online and the servers can access Alibaba Cloud services.
        
        @param request: InstallCloudMonitorRequest
        @return: InstallCloudMonitorResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.install_cloud_monitor_with_options(request, runtime)

    async def install_cloud_monitor_async(
        self,
        request: sas_20181203_models.InstallCloudMonitorRequest,
    ) -> sas_20181203_models.InstallCloudMonitorResponse:
        """
        @summary Installs the CloudMonitor agent on specified servers.
        
        @description > Before you call this operation, make sure that the Security Center agent on your servers is online and the servers can access Alibaba Cloud services.
        
        @param request: InstallCloudMonitorRequest
        @return: InstallCloudMonitorResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.install_cloud_monitor_with_options_async(request, runtime)

    def install_hybrid_proxy_with_options(
        self,
        request: sas_20181203_models.InstallHybridProxyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.InstallHybridProxyResponse:
        """
        @summary Installs the Security Center agent on a proxy server in a hybrid cloud.
        
        @param request: InstallHybridProxyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: InstallHybridProxyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.install_code):
            query['InstallCode'] = request.install_code
        if not UtilClient.is_unset(request.yundun_uuids):
            query['YundunUuids'] = request.yundun_uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='InstallHybridProxy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.InstallHybridProxyResponse(),
            self.call_api(params, req, runtime)
        )

    async def install_hybrid_proxy_with_options_async(
        self,
        request: sas_20181203_models.InstallHybridProxyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.InstallHybridProxyResponse:
        """
        @summary Installs the Security Center agent on a proxy server in a hybrid cloud.
        
        @param request: InstallHybridProxyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: InstallHybridProxyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.install_code):
            query['InstallCode'] = request.install_code
        if not UtilClient.is_unset(request.yundun_uuids):
            query['YundunUuids'] = request.yundun_uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='InstallHybridProxy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.InstallHybridProxyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def install_hybrid_proxy(
        self,
        request: sas_20181203_models.InstallHybridProxyRequest,
    ) -> sas_20181203_models.InstallHybridProxyResponse:
        """
        @summary Installs the Security Center agent on a proxy server in a hybrid cloud.
        
        @param request: InstallHybridProxyRequest
        @return: InstallHybridProxyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.install_hybrid_proxy_with_options(request, runtime)

    async def install_hybrid_proxy_async(
        self,
        request: sas_20181203_models.InstallHybridProxyRequest,
    ) -> sas_20181203_models.InstallHybridProxyResponse:
        """
        @summary Installs the Security Center agent on a proxy server in a hybrid cloud.
        
        @param request: InstallHybridProxyRequest
        @return: InstallHybridProxyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.install_hybrid_proxy_with_options_async(request, runtime)

    def install_pm_agent_with_options(
        self,
        request: sas_20181203_models.InstallPmAgentRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.InstallPmAgentResponse:
        """
        @summary Installs the CloudMonitor agent on a server that is not deployed on Alibaba Cloud.
        
        @param request: InstallPmAgentRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: InstallPmAgentResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='InstallPmAgent',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.InstallPmAgentResponse(),
            self.call_api(params, req, runtime)
        )

    async def install_pm_agent_with_options_async(
        self,
        request: sas_20181203_models.InstallPmAgentRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.InstallPmAgentResponse:
        """
        @summary Installs the CloudMonitor agent on a server that is not deployed on Alibaba Cloud.
        
        @param request: InstallPmAgentRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: InstallPmAgentResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='InstallPmAgent',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.InstallPmAgentResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def install_pm_agent(
        self,
        request: sas_20181203_models.InstallPmAgentRequest,
    ) -> sas_20181203_models.InstallPmAgentResponse:
        """
        @summary Installs the CloudMonitor agent on a server that is not deployed on Alibaba Cloud.
        
        @param request: InstallPmAgentRequest
        @return: InstallPmAgentResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.install_pm_agent_with_options(request, runtime)

    async def install_pm_agent_async(
        self,
        request: sas_20181203_models.InstallPmAgentRequest,
    ) -> sas_20181203_models.InstallPmAgentResponse:
        """
        @summary Installs the CloudMonitor agent on a server that is not deployed on Alibaba Cloud.
        
        @param request: InstallPmAgentRequest
        @return: InstallPmAgentResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.install_pm_agent_with_options_async(request, runtime)

    def install_uni_backup_agent_with_options(
        self,
        request: sas_20181203_models.InstallUniBackupAgentRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.InstallUniBackupAgentResponse:
        """
        @summary Installs the anti-ransomware agent for databases.
        
        @param request: InstallUniBackupAgentRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: InstallUniBackupAgentResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.policy_id):
            query['PolicyId'] = request.policy_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='InstallUniBackupAgent',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.InstallUniBackupAgentResponse(),
            self.call_api(params, req, runtime)
        )

    async def install_uni_backup_agent_with_options_async(
        self,
        request: sas_20181203_models.InstallUniBackupAgentRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.InstallUniBackupAgentResponse:
        """
        @summary Installs the anti-ransomware agent for databases.
        
        @param request: InstallUniBackupAgentRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: InstallUniBackupAgentResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.policy_id):
            query['PolicyId'] = request.policy_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='InstallUniBackupAgent',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.InstallUniBackupAgentResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def install_uni_backup_agent(
        self,
        request: sas_20181203_models.InstallUniBackupAgentRequest,
    ) -> sas_20181203_models.InstallUniBackupAgentResponse:
        """
        @summary Installs the anti-ransomware agent for databases.
        
        @param request: InstallUniBackupAgentRequest
        @return: InstallUniBackupAgentResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.install_uni_backup_agent_with_options(request, runtime)

    async def install_uni_backup_agent_async(
        self,
        request: sas_20181203_models.InstallUniBackupAgentRequest,
    ) -> sas_20181203_models.InstallUniBackupAgentResponse:
        """
        @summary Installs the anti-ransomware agent for databases.
        
        @param request: InstallUniBackupAgentRequest
        @return: InstallUniBackupAgentResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.install_uni_backup_agent_with_options_async(request, runtime)

    def join_web_lock_process_white_list_with_options(
        self,
        request: sas_20181203_models.JoinWebLockProcessWhiteListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.JoinWebLockProcessWhiteListResponse:
        """
        @summary Adds processes to the process whitelist of web tamper proofing.
        
        @param request: JoinWebLockProcessWhiteListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: JoinWebLockProcessWhiteListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.process_paths):
            query['ProcessPaths'] = request.process_paths
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='JoinWebLockProcessWhiteList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.JoinWebLockProcessWhiteListResponse(),
            self.call_api(params, req, runtime)
        )

    async def join_web_lock_process_white_list_with_options_async(
        self,
        request: sas_20181203_models.JoinWebLockProcessWhiteListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.JoinWebLockProcessWhiteListResponse:
        """
        @summary Adds processes to the process whitelist of web tamper proofing.
        
        @param request: JoinWebLockProcessWhiteListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: JoinWebLockProcessWhiteListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.process_paths):
            query['ProcessPaths'] = request.process_paths
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='JoinWebLockProcessWhiteList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.JoinWebLockProcessWhiteListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def join_web_lock_process_white_list(
        self,
        request: sas_20181203_models.JoinWebLockProcessWhiteListRequest,
    ) -> sas_20181203_models.JoinWebLockProcessWhiteListResponse:
        """
        @summary Adds processes to the process whitelist of web tamper proofing.
        
        @param request: JoinWebLockProcessWhiteListRequest
        @return: JoinWebLockProcessWhiteListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.join_web_lock_process_white_list_with_options(request, runtime)

    async def join_web_lock_process_white_list_async(
        self,
        request: sas_20181203_models.JoinWebLockProcessWhiteListRequest,
    ) -> sas_20181203_models.JoinWebLockProcessWhiteListResponse:
        """
        @summary Adds processes to the process whitelist of web tamper proofing.
        
        @param request: JoinWebLockProcessWhiteListRequest
        @return: JoinWebLockProcessWhiteListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.join_web_lock_process_white_list_with_options_async(request, runtime)

    def list_accounts_in_resource_directory_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListAccountsInResourceDirectoryResponse:
        """
        @summary Queries members in the resource directory that is involved when the multi-account management feature is enabled.
        
        @description You must use the management account of your resource directory or a delegated administrator account of Security Center to call this operation.
        
        @param request: ListAccountsInResourceDirectoryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAccountsInResourceDirectoryResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='ListAccountsInResourceDirectory',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListAccountsInResourceDirectoryResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_accounts_in_resource_directory_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListAccountsInResourceDirectoryResponse:
        """
        @summary Queries members in the resource directory that is involved when the multi-account management feature is enabled.
        
        @description You must use the management account of your resource directory or a delegated administrator account of Security Center to call this operation.
        
        @param request: ListAccountsInResourceDirectoryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAccountsInResourceDirectoryResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='ListAccountsInResourceDirectory',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListAccountsInResourceDirectoryResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_accounts_in_resource_directory(self) -> sas_20181203_models.ListAccountsInResourceDirectoryResponse:
        """
        @summary Queries members in the resource directory that is involved when the multi-account management feature is enabled.
        
        @description You must use the management account of your resource directory or a delegated administrator account of Security Center to call this operation.
        
        @return: ListAccountsInResourceDirectoryResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_accounts_in_resource_directory_with_options(runtime)

    async def list_accounts_in_resource_directory_async(self) -> sas_20181203_models.ListAccountsInResourceDirectoryResponse:
        """
        @summary Queries members in the resource directory that is involved when the multi-account management feature is enabled.
        
        @description You must use the management account of your resource directory or a delegated administrator account of Security Center to call this operation.
        
        @return: ListAccountsInResourceDirectoryResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_accounts_in_resource_directory_with_options_async(runtime)

    def list_aegis_container_plugin_rule_with_options(
        self,
        request: sas_20181203_models.ListAegisContainerPluginRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListAegisContainerPluginRuleResponse:
        """
        @summary Queries defense rules against container escapes.
        
        @param request: ListAegisContainerPluginRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAegisContainerPluginRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.criteria):
            query['Criteria'] = request.criteria
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.rule_type):
            query['RuleType'] = request.rule_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListAegisContainerPluginRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListAegisContainerPluginRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_aegis_container_plugin_rule_with_options_async(
        self,
        request: sas_20181203_models.ListAegisContainerPluginRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListAegisContainerPluginRuleResponse:
        """
        @summary Queries defense rules against container escapes.
        
        @param request: ListAegisContainerPluginRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAegisContainerPluginRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.criteria):
            query['Criteria'] = request.criteria
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.rule_type):
            query['RuleType'] = request.rule_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListAegisContainerPluginRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListAegisContainerPluginRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_aegis_container_plugin_rule(
        self,
        request: sas_20181203_models.ListAegisContainerPluginRuleRequest,
    ) -> sas_20181203_models.ListAegisContainerPluginRuleResponse:
        """
        @summary Queries defense rules against container escapes.
        
        @param request: ListAegisContainerPluginRuleRequest
        @return: ListAegisContainerPluginRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_aegis_container_plugin_rule_with_options(request, runtime)

    async def list_aegis_container_plugin_rule_async(
        self,
        request: sas_20181203_models.ListAegisContainerPluginRuleRequest,
    ) -> sas_20181203_models.ListAegisContainerPluginRuleResponse:
        """
        @summary Queries defense rules against container escapes.
        
        @param request: ListAegisContainerPluginRuleRequest
        @return: ListAegisContainerPluginRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_aegis_container_plugin_rule_with_options_async(request, runtime)

    def list_aegis_for_lingjun_status_with_options(
        self,
        tmp_req: sas_20181203_models.ListAegisForLingjunStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListAegisForLingjunStatusResponse:
        """
        @summary Query the Aegis client installation result for Lingjun bare metal.
        
        @param tmp_req: ListAegisForLingjunStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAegisForLingjunStatusResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.ListAegisForLingjunStatusShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.uuids):
            request.uuids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.uuids, 'Uuids', 'json')
        query = {}
        if not UtilClient.is_unset(request.uuids_shrink):
            query['Uuids'] = request.uuids_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListAegisForLingjunStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListAegisForLingjunStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_aegis_for_lingjun_status_with_options_async(
        self,
        tmp_req: sas_20181203_models.ListAegisForLingjunStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListAegisForLingjunStatusResponse:
        """
        @summary Query the Aegis client installation result for Lingjun bare metal.
        
        @param tmp_req: ListAegisForLingjunStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAegisForLingjunStatusResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.ListAegisForLingjunStatusShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.uuids):
            request.uuids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.uuids, 'Uuids', 'json')
        query = {}
        if not UtilClient.is_unset(request.uuids_shrink):
            query['Uuids'] = request.uuids_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListAegisForLingjunStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListAegisForLingjunStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_aegis_for_lingjun_status(
        self,
        request: sas_20181203_models.ListAegisForLingjunStatusRequest,
    ) -> sas_20181203_models.ListAegisForLingjunStatusResponse:
        """
        @summary Query the Aegis client installation result for Lingjun bare metal.
        
        @param request: ListAegisForLingjunStatusRequest
        @return: ListAegisForLingjunStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_aegis_for_lingjun_status_with_options(request, runtime)

    async def list_aegis_for_lingjun_status_async(
        self,
        request: sas_20181203_models.ListAegisForLingjunStatusRequest,
    ) -> sas_20181203_models.ListAegisForLingjunStatusResponse:
        """
        @summary Query the Aegis client installation result for Lingjun bare metal.
        
        @param request: ListAegisForLingjunStatusRequest
        @return: ListAegisForLingjunStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_aegis_for_lingjun_status_with_options_async(request, runtime)

    def list_agentless_asset_with_options(
        self,
        request: sas_20181203_models.ListAgentlessAssetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListAgentlessAssetResponse:
        """
        @summary Query agentless detection assets.
        
        @param request: ListAgentlessAssetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAgentlessAssetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.disk_type):
            query['DiskType'] = request.disk_type
        if not UtilClient.is_unset(request.instance_id):
            query['InstanceId'] = request.instance_id
        if not UtilClient.is_unset(request.instance_name):
            query['InstanceName'] = request.instance_name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.platform):
            query['Platform'] = request.platform
        if not UtilClient.is_unset(request.scan_region_id):
            query['ScanRegionId'] = request.scan_region_id
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListAgentlessAsset',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListAgentlessAssetResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_agentless_asset_with_options_async(
        self,
        request: sas_20181203_models.ListAgentlessAssetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListAgentlessAssetResponse:
        """
        @summary Query agentless detection assets.
        
        @param request: ListAgentlessAssetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAgentlessAssetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.disk_type):
            query['DiskType'] = request.disk_type
        if not UtilClient.is_unset(request.instance_id):
            query['InstanceId'] = request.instance_id
        if not UtilClient.is_unset(request.instance_name):
            query['InstanceName'] = request.instance_name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.platform):
            query['Platform'] = request.platform
        if not UtilClient.is_unset(request.scan_region_id):
            query['ScanRegionId'] = request.scan_region_id
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListAgentlessAsset',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListAgentlessAssetResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_agentless_asset(
        self,
        request: sas_20181203_models.ListAgentlessAssetRequest,
    ) -> sas_20181203_models.ListAgentlessAssetResponse:
        """
        @summary Query agentless detection assets.
        
        @param request: ListAgentlessAssetRequest
        @return: ListAgentlessAssetResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_agentless_asset_with_options(request, runtime)

    async def list_agentless_asset_async(
        self,
        request: sas_20181203_models.ListAgentlessAssetRequest,
    ) -> sas_20181203_models.ListAgentlessAssetResponse:
        """
        @summary Query agentless detection assets.
        
        @param request: ListAgentlessAssetRequest
        @return: ListAgentlessAssetResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_agentless_asset_with_options_async(request, runtime)

    def list_agentless_malicious_files_with_options(
        self,
        request: sas_20181203_models.ListAgentlessMaliciousFilesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListAgentlessMaliciousFilesResponse:
        """
        @summary Queries malicious files that are detected by agentless detection tasks.
        
        @param request: ListAgentlessMaliciousFilesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAgentlessMaliciousFilesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.dealed):
            query['Dealed'] = request.dealed
        if not UtilClient.is_unset(request.event_id):
            query['EventId'] = request.event_id
        if not UtilClient.is_unset(request.fuzzy_malicious_name):
            query['FuzzyMaliciousName'] = request.fuzzy_malicious_name
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.levels):
            query['Levels'] = request.levels
        if not UtilClient.is_unset(request.malicious_md_5):
            query['MaliciousMd5'] = request.malicious_md_5
        if not UtilClient.is_unset(request.malicious_type):
            query['MaliciousType'] = request.malicious_type
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.scan_range):
            query['ScanRange'] = request.scan_range
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListAgentlessMaliciousFiles',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListAgentlessMaliciousFilesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_agentless_malicious_files_with_options_async(
        self,
        request: sas_20181203_models.ListAgentlessMaliciousFilesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListAgentlessMaliciousFilesResponse:
        """
        @summary Queries malicious files that are detected by agentless detection tasks.
        
        @param request: ListAgentlessMaliciousFilesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAgentlessMaliciousFilesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.dealed):
            query['Dealed'] = request.dealed
        if not UtilClient.is_unset(request.event_id):
            query['EventId'] = request.event_id
        if not UtilClient.is_unset(request.fuzzy_malicious_name):
            query['FuzzyMaliciousName'] = request.fuzzy_malicious_name
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.levels):
            query['Levels'] = request.levels
        if not UtilClient.is_unset(request.malicious_md_5):
            query['MaliciousMd5'] = request.malicious_md_5
        if not UtilClient.is_unset(request.malicious_type):
            query['MaliciousType'] = request.malicious_type
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.scan_range):
            query['ScanRange'] = request.scan_range
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListAgentlessMaliciousFiles',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListAgentlessMaliciousFilesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_agentless_malicious_files(
        self,
        request: sas_20181203_models.ListAgentlessMaliciousFilesRequest,
    ) -> sas_20181203_models.ListAgentlessMaliciousFilesResponse:
        """
        @summary Queries malicious files that are detected by agentless detection tasks.
        
        @param request: ListAgentlessMaliciousFilesRequest
        @return: ListAgentlessMaliciousFilesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_agentless_malicious_files_with_options(request, runtime)

    async def list_agentless_malicious_files_async(
        self,
        request: sas_20181203_models.ListAgentlessMaliciousFilesRequest,
    ) -> sas_20181203_models.ListAgentlessMaliciousFilesResponse:
        """
        @summary Queries malicious files that are detected by agentless detection tasks.
        
        @param request: ListAgentlessMaliciousFilesRequest
        @return: ListAgentlessMaliciousFilesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_agentless_malicious_files_with_options_async(request, runtime)

    def list_agentless_region_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListAgentlessRegionResponse:
        """
        @summary Queries the regions that are supported by the agentless detection feature.
        
        @param request: ListAgentlessRegionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAgentlessRegionResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='ListAgentlessRegion',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListAgentlessRegionResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_agentless_region_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListAgentlessRegionResponse:
        """
        @summary Queries the regions that are supported by the agentless detection feature.
        
        @param request: ListAgentlessRegionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAgentlessRegionResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='ListAgentlessRegion',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListAgentlessRegionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_agentless_region(self) -> sas_20181203_models.ListAgentlessRegionResponse:
        """
        @summary Queries the regions that are supported by the agentless detection feature.
        
        @return: ListAgentlessRegionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_agentless_region_with_options(runtime)

    async def list_agentless_region_async(self) -> sas_20181203_models.ListAgentlessRegionResponse:
        """
        @summary Queries the regions that are supported by the agentless detection feature.
        
        @return: ListAgentlessRegionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_agentless_region_with_options_async(runtime)

    def list_agentless_relate_malicious_with_options(
        self,
        request: sas_20181203_models.ListAgentlessRelateMaliciousRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListAgentlessRelateMaliciousResponse:
        """
        @summary Obtains the risks associated with an agentless detection event.
        
        @param request: ListAgentlessRelateMaliciousRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAgentlessRelateMaliciousResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.event_id):
            query['EventId'] = request.event_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.scenario):
            query['Scenario'] = request.scenario
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListAgentlessRelateMalicious',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListAgentlessRelateMaliciousResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_agentless_relate_malicious_with_options_async(
        self,
        request: sas_20181203_models.ListAgentlessRelateMaliciousRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListAgentlessRelateMaliciousResponse:
        """
        @summary Obtains the risks associated with an agentless detection event.
        
        @param request: ListAgentlessRelateMaliciousRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAgentlessRelateMaliciousResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.event_id):
            query['EventId'] = request.event_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.scenario):
            query['Scenario'] = request.scenario
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListAgentlessRelateMalicious',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListAgentlessRelateMaliciousResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_agentless_relate_malicious(
        self,
        request: sas_20181203_models.ListAgentlessRelateMaliciousRequest,
    ) -> sas_20181203_models.ListAgentlessRelateMaliciousResponse:
        """
        @summary Obtains the risks associated with an agentless detection event.
        
        @param request: ListAgentlessRelateMaliciousRequest
        @return: ListAgentlessRelateMaliciousResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_agentless_relate_malicious_with_options(request, runtime)

    async def list_agentless_relate_malicious_async(
        self,
        request: sas_20181203_models.ListAgentlessRelateMaliciousRequest,
    ) -> sas_20181203_models.ListAgentlessRelateMaliciousResponse:
        """
        @summary Obtains the risks associated with an agentless detection event.
        
        @param request: ListAgentlessRelateMaliciousRequest
        @return: ListAgentlessRelateMaliciousResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_agentless_relate_malicious_with_options_async(request, runtime)

    def list_agentless_risk_uuid_with_options(
        self,
        request: sas_20181203_models.ListAgentlessRiskUuidRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListAgentlessRiskUuidResponse:
        """
        @summary Queries at-risk hosts that are detected by the agentless detection feature.
        
        @param request: ListAgentlessRiskUuidRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAgentlessRiskUuidResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.instance_id):
            query['InstanceId'] = request.instance_id
        if not UtilClient.is_unset(request.instance_name):
            query['InstanceName'] = request.instance_name
        if not UtilClient.is_unset(request.internet_ip):
            query['InternetIp'] = request.internet_ip
        if not UtilClient.is_unset(request.intranet_ip):
            query['IntranetIp'] = request.intranet_ip
        if not UtilClient.is_unset(request.machine_name):
            query['MachineName'] = request.machine_name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.risk):
            query['Risk'] = request.risk
        if not UtilClient.is_unset(request.target_name):
            query['TargetName'] = request.target_name
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListAgentlessRiskUuid',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListAgentlessRiskUuidResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_agentless_risk_uuid_with_options_async(
        self,
        request: sas_20181203_models.ListAgentlessRiskUuidRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListAgentlessRiskUuidResponse:
        """
        @summary Queries at-risk hosts that are detected by the agentless detection feature.
        
        @param request: ListAgentlessRiskUuidRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAgentlessRiskUuidResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.instance_id):
            query['InstanceId'] = request.instance_id
        if not UtilClient.is_unset(request.instance_name):
            query['InstanceName'] = request.instance_name
        if not UtilClient.is_unset(request.internet_ip):
            query['InternetIp'] = request.internet_ip
        if not UtilClient.is_unset(request.intranet_ip):
            query['IntranetIp'] = request.intranet_ip
        if not UtilClient.is_unset(request.machine_name):
            query['MachineName'] = request.machine_name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.risk):
            query['Risk'] = request.risk
        if not UtilClient.is_unset(request.target_name):
            query['TargetName'] = request.target_name
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListAgentlessRiskUuid',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListAgentlessRiskUuidResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_agentless_risk_uuid(
        self,
        request: sas_20181203_models.ListAgentlessRiskUuidRequest,
    ) -> sas_20181203_models.ListAgentlessRiskUuidResponse:
        """
        @summary Queries at-risk hosts that are detected by the agentless detection feature.
        
        @param request: ListAgentlessRiskUuidRequest
        @return: ListAgentlessRiskUuidResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_agentless_risk_uuid_with_options(request, runtime)

    async def list_agentless_risk_uuid_async(
        self,
        request: sas_20181203_models.ListAgentlessRiskUuidRequest,
    ) -> sas_20181203_models.ListAgentlessRiskUuidResponse:
        """
        @summary Queries at-risk hosts that are detected by the agentless detection feature.
        
        @param request: ListAgentlessRiskUuidRequest
        @return: ListAgentlessRiskUuidResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_agentless_risk_uuid_with_options_async(request, runtime)

    def list_agentless_task_with_options(
        self,
        request: sas_20181203_models.ListAgentlessTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListAgentlessTaskResponse:
        """
        @summary Queries agentless detection tasks.
        
        @param request: ListAgentlessTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAgentlessTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.internet_ip):
            query['InternetIp'] = request.internet_ip
        if not UtilClient.is_unset(request.intranet_ip):
            query['IntranetIp'] = request.intranet_ip
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.machine_name):
            query['MachineName'] = request.machine_name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.root_task):
            query['RootTask'] = request.root_task
        if not UtilClient.is_unset(request.root_task_id):
            query['RootTaskId'] = request.root_task_id
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        if not UtilClient.is_unset(request.target_name):
            query['TargetName'] = request.target_name
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        if not UtilClient.is_unset(request.task_id):
            query['TaskId'] = request.task_id
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListAgentlessTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListAgentlessTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_agentless_task_with_options_async(
        self,
        request: sas_20181203_models.ListAgentlessTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListAgentlessTaskResponse:
        """
        @summary Queries agentless detection tasks.
        
        @param request: ListAgentlessTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAgentlessTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.internet_ip):
            query['InternetIp'] = request.internet_ip
        if not UtilClient.is_unset(request.intranet_ip):
            query['IntranetIp'] = request.intranet_ip
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.machine_name):
            query['MachineName'] = request.machine_name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.root_task):
            query['RootTask'] = request.root_task
        if not UtilClient.is_unset(request.root_task_id):
            query['RootTaskId'] = request.root_task_id
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        if not UtilClient.is_unset(request.target_name):
            query['TargetName'] = request.target_name
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        if not UtilClient.is_unset(request.task_id):
            query['TaskId'] = request.task_id
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListAgentlessTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListAgentlessTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_agentless_task(
        self,
        request: sas_20181203_models.ListAgentlessTaskRequest,
    ) -> sas_20181203_models.ListAgentlessTaskResponse:
        """
        @summary Queries agentless detection tasks.
        
        @param request: ListAgentlessTaskRequest
        @return: ListAgentlessTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_agentless_task_with_options(request, runtime)

    async def list_agentless_task_async(
        self,
        request: sas_20181203_models.ListAgentlessTaskRequest,
    ) -> sas_20181203_models.ListAgentlessTaskResponse:
        """
        @summary Queries agentless detection tasks.
        
        @param request: ListAgentlessTaskRequest
        @return: ListAgentlessTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_agentless_task_with_options_async(request, runtime)

    def list_asset_clean_config_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListAssetCleanConfigResponse:
        """
        @summary Queries the configurations for cleaning offline hosts whose provider cannot be identified.
        
        @param request: ListAssetCleanConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAssetCleanConfigResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='ListAssetCleanConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListAssetCleanConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_asset_clean_config_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListAssetCleanConfigResponse:
        """
        @summary Queries the configurations for cleaning offline hosts whose provider cannot be identified.
        
        @param request: ListAssetCleanConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAssetCleanConfigResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='ListAssetCleanConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListAssetCleanConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_asset_clean_config(self) -> sas_20181203_models.ListAssetCleanConfigResponse:
        """
        @summary Queries the configurations for cleaning offline hosts whose provider cannot be identified.
        
        @return: ListAssetCleanConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_asset_clean_config_with_options(runtime)

    async def list_asset_clean_config_async(self) -> sas_20181203_models.ListAssetCleanConfigResponse:
        """
        @summary Queries the configurations for cleaning offline hosts whose provider cannot be identified.
        
        @return: ListAssetCleanConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_asset_clean_config_with_options_async(runtime)

    def list_asset_info_publish_with_options(
        self,
        request: sas_20181203_models.ListAssetInfoPublishRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListAssetInfoPublishResponse:
        """
        @summary Queries the custom upgrade information about assets.
        
        @param request: ListAssetInfoPublishRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAssetInfoPublishResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListAssetInfoPublish',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListAssetInfoPublishResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_asset_info_publish_with_options_async(
        self,
        request: sas_20181203_models.ListAssetInfoPublishRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListAssetInfoPublishResponse:
        """
        @summary Queries the custom upgrade information about assets.
        
        @param request: ListAssetInfoPublishRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAssetInfoPublishResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListAssetInfoPublish',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListAssetInfoPublishResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_asset_info_publish(
        self,
        request: sas_20181203_models.ListAssetInfoPublishRequest,
    ) -> sas_20181203_models.ListAssetInfoPublishResponse:
        """
        @summary Queries the custom upgrade information about assets.
        
        @param request: ListAssetInfoPublishRequest
        @return: ListAssetInfoPublishResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_asset_info_publish_with_options(request, runtime)

    async def list_asset_info_publish_async(
        self,
        request: sas_20181203_models.ListAssetInfoPublishRequest,
    ) -> sas_20181203_models.ListAssetInfoPublishResponse:
        """
        @summary Queries the custom upgrade information about assets.
        
        @param request: ListAssetInfoPublishRequest
        @return: ListAssetInfoPublishResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_asset_info_publish_with_options_async(request, runtime)

    def list_asset_refresh_task_config_with_options(
        self,
        request: sas_20181203_models.ListAssetRefreshTaskConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListAssetRefreshTaskConfigResponse:
        """
        @summary Queries the configurations of asset synchronization.
        
        @param request: ListAssetRefreshTaskConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAssetRefreshTaskConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.refresh_config_type):
            query['RefreshConfigType'] = request.refresh_config_type
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        if not UtilClient.is_unset(request.target_id):
            query['TargetId'] = request.target_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListAssetRefreshTaskConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListAssetRefreshTaskConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_asset_refresh_task_config_with_options_async(
        self,
        request: sas_20181203_models.ListAssetRefreshTaskConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListAssetRefreshTaskConfigResponse:
        """
        @summary Queries the configurations of asset synchronization.
        
        @param request: ListAssetRefreshTaskConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAssetRefreshTaskConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.refresh_config_type):
            query['RefreshConfigType'] = request.refresh_config_type
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        if not UtilClient.is_unset(request.target_id):
            query['TargetId'] = request.target_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListAssetRefreshTaskConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListAssetRefreshTaskConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_asset_refresh_task_config(
        self,
        request: sas_20181203_models.ListAssetRefreshTaskConfigRequest,
    ) -> sas_20181203_models.ListAssetRefreshTaskConfigResponse:
        """
        @summary Queries the configurations of asset synchronization.
        
        @param request: ListAssetRefreshTaskConfigRequest
        @return: ListAssetRefreshTaskConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_asset_refresh_task_config_with_options(request, runtime)

    async def list_asset_refresh_task_config_async(
        self,
        request: sas_20181203_models.ListAssetRefreshTaskConfigRequest,
    ) -> sas_20181203_models.ListAssetRefreshTaskConfigResponse:
        """
        @summary Queries the configurations of asset synchronization.
        
        @param request: ListAssetRefreshTaskConfigRequest
        @return: ListAssetRefreshTaskConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_asset_refresh_task_config_with_options_async(request, runtime)

    def list_asset_selection_selected_target_with_options(
        self,
        request: sas_20181203_models.ListAssetSelectionSelectedTargetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListAssetSelectionSelectedTargetResponse:
        """
        @summary Queries the selected assets.
        
        @param request: ListAssetSelectionSelectedTargetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAssetSelectionSelectedTargetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.selection_key):
            query['SelectionKey'] = request.selection_key
        if not UtilClient.is_unset(request.target_list):
            query['TargetList'] = request.target_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListAssetSelectionSelectedTarget',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListAssetSelectionSelectedTargetResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_asset_selection_selected_target_with_options_async(
        self,
        request: sas_20181203_models.ListAssetSelectionSelectedTargetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListAssetSelectionSelectedTargetResponse:
        """
        @summary Queries the selected assets.
        
        @param request: ListAssetSelectionSelectedTargetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAssetSelectionSelectedTargetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.selection_key):
            query['SelectionKey'] = request.selection_key
        if not UtilClient.is_unset(request.target_list):
            query['TargetList'] = request.target_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListAssetSelectionSelectedTarget',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListAssetSelectionSelectedTargetResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_asset_selection_selected_target(
        self,
        request: sas_20181203_models.ListAssetSelectionSelectedTargetRequest,
    ) -> sas_20181203_models.ListAssetSelectionSelectedTargetResponse:
        """
        @summary Queries the selected assets.
        
        @param request: ListAssetSelectionSelectedTargetRequest
        @return: ListAssetSelectionSelectedTargetResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_asset_selection_selected_target_with_options(request, runtime)

    async def list_asset_selection_selected_target_async(
        self,
        request: sas_20181203_models.ListAssetSelectionSelectedTargetRequest,
    ) -> sas_20181203_models.ListAssetSelectionSelectedTargetResponse:
        """
        @summary Queries the selected assets.
        
        @param request: ListAssetSelectionSelectedTargetRequest
        @return: ListAssetSelectionSelectedTargetResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_asset_selection_selected_target_with_options_async(request, runtime)

    def list_asset_selection_target_with_options(
        self,
        request: sas_20181203_models.ListAssetSelectionTargetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListAssetSelectionTargetResponse:
        """
        @summary Queries the required asset.
        
        @param request: ListAssetSelectionTargetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAssetSelectionTargetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.selection_key):
            query['SelectionKey'] = request.selection_key
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListAssetSelectionTarget',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListAssetSelectionTargetResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_asset_selection_target_with_options_async(
        self,
        request: sas_20181203_models.ListAssetSelectionTargetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListAssetSelectionTargetResponse:
        """
        @summary Queries the required asset.
        
        @param request: ListAssetSelectionTargetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAssetSelectionTargetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.selection_key):
            query['SelectionKey'] = request.selection_key
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListAssetSelectionTarget',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListAssetSelectionTargetResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_asset_selection_target(
        self,
        request: sas_20181203_models.ListAssetSelectionTargetRequest,
    ) -> sas_20181203_models.ListAssetSelectionTargetResponse:
        """
        @summary Queries the required asset.
        
        @param request: ListAssetSelectionTargetRequest
        @return: ListAssetSelectionTargetResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_asset_selection_target_with_options(request, runtime)

    async def list_asset_selection_target_async(
        self,
        request: sas_20181203_models.ListAssetSelectionTargetRequest,
    ) -> sas_20181203_models.ListAssetSelectionTargetResponse:
        """
        @summary Queries the required asset.
        
        @param request: ListAssetSelectionTargetRequest
        @return: ListAssetSelectionTargetResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_asset_selection_target_with_options_async(request, runtime)

    def list_attack_path_event_with_options(
        self,
        request: sas_20181203_models.ListAttackPathEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListAttackPathEventResponse:
        """
        @summary Query Attack Path Events.
        
        @param request: ListAttackPathEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAttackPathEventResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.attack_path_asset_list):
            query['AttackPathAssetList'] = request.attack_path_asset_list
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.path_name_desc):
            query['PathNameDesc'] = request.path_name_desc
        if not UtilClient.is_unset(request.path_type):
            query['PathType'] = request.path_type
        if not UtilClient.is_unset(request.risk_level_list):
            query['RiskLevelList'] = request.risk_level_list
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListAttackPathEvent',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListAttackPathEventResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_attack_path_event_with_options_async(
        self,
        request: sas_20181203_models.ListAttackPathEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListAttackPathEventResponse:
        """
        @summary Query Attack Path Events.
        
        @param request: ListAttackPathEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAttackPathEventResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.attack_path_asset_list):
            query['AttackPathAssetList'] = request.attack_path_asset_list
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.path_name_desc):
            query['PathNameDesc'] = request.path_name_desc
        if not UtilClient.is_unset(request.path_type):
            query['PathType'] = request.path_type
        if not UtilClient.is_unset(request.risk_level_list):
            query['RiskLevelList'] = request.risk_level_list
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListAttackPathEvent',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListAttackPathEventResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_attack_path_event(
        self,
        request: sas_20181203_models.ListAttackPathEventRequest,
    ) -> sas_20181203_models.ListAttackPathEventResponse:
        """
        @summary Query Attack Path Events.
        
        @param request: ListAttackPathEventRequest
        @return: ListAttackPathEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_attack_path_event_with_options(request, runtime)

    async def list_attack_path_event_async(
        self,
        request: sas_20181203_models.ListAttackPathEventRequest,
    ) -> sas_20181203_models.ListAttackPathEventResponse:
        """
        @summary Query Attack Path Events.
        
        @param request: ListAttackPathEventRequest
        @return: ListAttackPathEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_attack_path_event_with_options_async(request, runtime)

    def list_attack_path_whitelist_with_options(
        self,
        request: sas_20181203_models.ListAttackPathWhitelistRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListAttackPathWhitelistResponse:
        """
        @summary Query Attack Path Whitelist List.
        
        @param request: ListAttackPathWhitelistRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAttackPathWhitelistResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.path_name_desc):
            query['PathNameDesc'] = request.path_name_desc
        if not UtilClient.is_unset(request.path_type):
            query['PathType'] = request.path_type
        if not UtilClient.is_unset(request.whitelist_name):
            query['WhitelistName'] = request.whitelist_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListAttackPathWhitelist',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListAttackPathWhitelistResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_attack_path_whitelist_with_options_async(
        self,
        request: sas_20181203_models.ListAttackPathWhitelistRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListAttackPathWhitelistResponse:
        """
        @summary Query Attack Path Whitelist List.
        
        @param request: ListAttackPathWhitelistRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAttackPathWhitelistResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.path_name_desc):
            query['PathNameDesc'] = request.path_name_desc
        if not UtilClient.is_unset(request.path_type):
            query['PathType'] = request.path_type
        if not UtilClient.is_unset(request.whitelist_name):
            query['WhitelistName'] = request.whitelist_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListAttackPathWhitelist',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListAttackPathWhitelistResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_attack_path_whitelist(
        self,
        request: sas_20181203_models.ListAttackPathWhitelistRequest,
    ) -> sas_20181203_models.ListAttackPathWhitelistResponse:
        """
        @summary Query Attack Path Whitelist List.
        
        @param request: ListAttackPathWhitelistRequest
        @return: ListAttackPathWhitelistResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_attack_path_whitelist_with_options(request, runtime)

    async def list_attack_path_whitelist_async(
        self,
        request: sas_20181203_models.ListAttackPathWhitelistRequest,
    ) -> sas_20181203_models.ListAttackPathWhitelistResponse:
        """
        @summary Query Attack Path Whitelist List.
        
        @param request: ListAttackPathWhitelistRequest
        @return: ListAttackPathWhitelistResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_attack_path_whitelist_with_options_async(request, runtime)

    def list_auto_tag_rules_with_options(
        self,
        request: sas_20181203_models.ListAutoTagRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListAutoTagRulesResponse:
        """
        @summary Queries asset auto-tagging rules that are created by using the feature of asset management rules. You can create rules on the System Configuration > Feature Settings > Multi-cloud Configuration Management > Asset Management Rule page in the Security Center console.
        
        @param request: ListAutoTagRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAutoTagRulesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListAutoTagRules',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListAutoTagRulesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_auto_tag_rules_with_options_async(
        self,
        request: sas_20181203_models.ListAutoTagRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListAutoTagRulesResponse:
        """
        @summary Queries asset auto-tagging rules that are created by using the feature of asset management rules. You can create rules on the System Configuration > Feature Settings > Multi-cloud Configuration Management > Asset Management Rule page in the Security Center console.
        
        @param request: ListAutoTagRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAutoTagRulesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListAutoTagRules',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListAutoTagRulesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_auto_tag_rules(
        self,
        request: sas_20181203_models.ListAutoTagRulesRequest,
    ) -> sas_20181203_models.ListAutoTagRulesResponse:
        """
        @summary Queries asset auto-tagging rules that are created by using the feature of asset management rules. You can create rules on the System Configuration > Feature Settings > Multi-cloud Configuration Management > Asset Management Rule page in the Security Center console.
        
        @param request: ListAutoTagRulesRequest
        @return: ListAutoTagRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_auto_tag_rules_with_options(request, runtime)

    async def list_auto_tag_rules_async(
        self,
        request: sas_20181203_models.ListAutoTagRulesRequest,
    ) -> sas_20181203_models.ListAutoTagRulesResponse:
        """
        @summary Queries asset auto-tagging rules that are created by using the feature of asset management rules. You can create rules on the System Configuration > Feature Settings > Multi-cloud Configuration Management > Asset Management Rule page in the Security Center console.
        
        @param request: ListAutoTagRulesRequest
        @return: ListAutoTagRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_auto_tag_rules_with_options_async(request, runtime)

    def list_available_attack_path_with_options(
        self,
        request: sas_20181203_models.ListAvailableAttackPathRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListAvailableAttackPathResponse:
        """
        @summary Query Attack Path List.
        
        @param request: ListAvailableAttackPathRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAvailableAttackPathResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListAvailableAttackPath',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListAvailableAttackPathResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_available_attack_path_with_options_async(
        self,
        request: sas_20181203_models.ListAvailableAttackPathRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListAvailableAttackPathResponse:
        """
        @summary Query Attack Path List.
        
        @param request: ListAvailableAttackPathRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAvailableAttackPathResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListAvailableAttackPath',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListAvailableAttackPathResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_available_attack_path(
        self,
        request: sas_20181203_models.ListAvailableAttackPathRequest,
    ) -> sas_20181203_models.ListAvailableAttackPathResponse:
        """
        @summary Query Attack Path List.
        
        @param request: ListAvailableAttackPathRequest
        @return: ListAvailableAttackPathResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_available_attack_path_with_options(request, runtime)

    async def list_available_attack_path_async(
        self,
        request: sas_20181203_models.ListAvailableAttackPathRequest,
    ) -> sas_20181203_models.ListAvailableAttackPathResponse:
        """
        @summary Query Attack Path List.
        
        @param request: ListAvailableAttackPathRequest
        @return: ListAvailableAttackPathResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_available_attack_path_with_options_async(request, runtime)

    def list_available_honeypot_with_options(
        self,
        request: sas_20181203_models.ListAvailableHoneypotRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListAvailableHoneypotResponse:
        """
        @summary Queries the information about available honeypot templates.
        
        @param request: ListAvailableHoneypotRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAvailableHoneypotResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.node_id):
            query['NodeId'] = request.node_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListAvailableHoneypot',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListAvailableHoneypotResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_available_honeypot_with_options_async(
        self,
        request: sas_20181203_models.ListAvailableHoneypotRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListAvailableHoneypotResponse:
        """
        @summary Queries the information about available honeypot templates.
        
        @param request: ListAvailableHoneypotRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAvailableHoneypotResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.node_id):
            query['NodeId'] = request.node_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListAvailableHoneypot',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListAvailableHoneypotResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_available_honeypot(
        self,
        request: sas_20181203_models.ListAvailableHoneypotRequest,
    ) -> sas_20181203_models.ListAvailableHoneypotResponse:
        """
        @summary Queries the information about available honeypot templates.
        
        @param request: ListAvailableHoneypotRequest
        @return: ListAvailableHoneypotResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_available_honeypot_with_options(request, runtime)

    async def list_available_honeypot_async(
        self,
        request: sas_20181203_models.ListAvailableHoneypotRequest,
    ) -> sas_20181203_models.ListAvailableHoneypotResponse:
        """
        @summary Queries the information about available honeypot templates.
        
        @param request: ListAvailableHoneypotRequest
        @return: ListAvailableHoneypotResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_available_honeypot_with_options_async(request, runtime)

    def list_backup_record_with_options(
        self,
        request: sas_20181203_models.ListBackupRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListBackupRecordResponse:
        """
        @summary Queries backup records.
        
        @param request: ListBackupRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListBackupRecordResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.backup_end_time):
            query['BackupEndTime'] = request.backup_end_time
        if not UtilClient.is_unset(request.backup_start_time):
            query['BackupStartTime'] = request.backup_start_time
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.machine_remark):
            query['MachineRemark'] = request.machine_remark
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.status_list):
            query['StatusList'] = request.status_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListBackupRecord',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListBackupRecordResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_backup_record_with_options_async(
        self,
        request: sas_20181203_models.ListBackupRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListBackupRecordResponse:
        """
        @summary Queries backup records.
        
        @param request: ListBackupRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListBackupRecordResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.backup_end_time):
            query['BackupEndTime'] = request.backup_end_time
        if not UtilClient.is_unset(request.backup_start_time):
            query['BackupStartTime'] = request.backup_start_time
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.machine_remark):
            query['MachineRemark'] = request.machine_remark
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.status_list):
            query['StatusList'] = request.status_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListBackupRecord',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListBackupRecordResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_backup_record(
        self,
        request: sas_20181203_models.ListBackupRecordRequest,
    ) -> sas_20181203_models.ListBackupRecordResponse:
        """
        @summary Queries backup records.
        
        @param request: ListBackupRecordRequest
        @return: ListBackupRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_backup_record_with_options(request, runtime)

    async def list_backup_record_async(
        self,
        request: sas_20181203_models.ListBackupRecordRequest,
    ) -> sas_20181203_models.ListBackupRecordResponse:
        """
        @summary Queries backup records.
        
        @param request: ListBackupRecordRequest
        @return: ListBackupRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_backup_record_with_options_async(request, runtime)

    def list_baseline_check_white_record_with_options(
        self,
        tmp_req: sas_20181203_models.ListBaselineCheckWhiteRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListBaselineCheckWhiteRecordResponse:
        """
        @summary Queries the whitelist rules for a baseline check item.
        
        @param tmp_req: ListBaselineCheckWhiteRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListBaselineCheckWhiteRecordResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.ListBaselineCheckWhiteRecordShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.check_ids):
            request.check_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.check_ids, 'CheckIds', 'json')
        if not UtilClient.is_unset(tmp_req.record_ids):
            request.record_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.record_ids, 'RecordIds', 'json')
        query = {}
        if not UtilClient.is_unset(request.check_ids_shrink):
            query['CheckIds'] = request.check_ids_shrink
        if not UtilClient.is_unset(request.check_item_fuzzy):
            query['CheckItemFuzzy'] = request.check_item_fuzzy
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.record_ids_shrink):
            query['RecordIds'] = request.record_ids_shrink
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListBaselineCheckWhiteRecord',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListBaselineCheckWhiteRecordResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_baseline_check_white_record_with_options_async(
        self,
        tmp_req: sas_20181203_models.ListBaselineCheckWhiteRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListBaselineCheckWhiteRecordResponse:
        """
        @summary Queries the whitelist rules for a baseline check item.
        
        @param tmp_req: ListBaselineCheckWhiteRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListBaselineCheckWhiteRecordResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.ListBaselineCheckWhiteRecordShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.check_ids):
            request.check_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.check_ids, 'CheckIds', 'json')
        if not UtilClient.is_unset(tmp_req.record_ids):
            request.record_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.record_ids, 'RecordIds', 'json')
        query = {}
        if not UtilClient.is_unset(request.check_ids_shrink):
            query['CheckIds'] = request.check_ids_shrink
        if not UtilClient.is_unset(request.check_item_fuzzy):
            query['CheckItemFuzzy'] = request.check_item_fuzzy
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.record_ids_shrink):
            query['RecordIds'] = request.record_ids_shrink
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListBaselineCheckWhiteRecord',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListBaselineCheckWhiteRecordResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_baseline_check_white_record(
        self,
        request: sas_20181203_models.ListBaselineCheckWhiteRecordRequest,
    ) -> sas_20181203_models.ListBaselineCheckWhiteRecordResponse:
        """
        @summary Queries the whitelist rules for a baseline check item.
        
        @param request: ListBaselineCheckWhiteRecordRequest
        @return: ListBaselineCheckWhiteRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_baseline_check_white_record_with_options(request, runtime)

    async def list_baseline_check_white_record_async(
        self,
        request: sas_20181203_models.ListBaselineCheckWhiteRecordRequest,
    ) -> sas_20181203_models.ListBaselineCheckWhiteRecordResponse:
        """
        @summary Queries the whitelist rules for a baseline check item.
        
        @param request: ListBaselineCheckWhiteRecordRequest
        @return: ListBaselineCheckWhiteRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_baseline_check_white_record_with_options_async(request, runtime)

    def list_check_instance_result_with_options(
        self,
        request: sas_20181203_models.ListCheckInstanceResultRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListCheckInstanceResultResponse:
        """
        @summary Queries the instances that failed a specified check item of configuration assessment.
        
        @param request: ListCheckInstanceResultRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCheckInstanceResultResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_id):
            query['CheckId'] = request.check_id
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.instance_id_key):
            query['InstanceIdKey'] = request.instance_id_key
        if not UtilClient.is_unset(request.instance_ids):
            query['InstanceIds'] = request.instance_ids
        if not UtilClient.is_unset(request.instance_name_key):
            query['InstanceNameKey'] = request.instance_name_key
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.region_id_key):
            query['RegionIdKey'] = request.region_id_key
        if not UtilClient.is_unset(request.sort_types):
            query['SortTypes'] = request.sort_types
        if not UtilClient.is_unset(request.statuses):
            query['Statuses'] = request.statuses
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCheckInstanceResult',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListCheckInstanceResultResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_check_instance_result_with_options_async(
        self,
        request: sas_20181203_models.ListCheckInstanceResultRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListCheckInstanceResultResponse:
        """
        @summary Queries the instances that failed a specified check item of configuration assessment.
        
        @param request: ListCheckInstanceResultRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCheckInstanceResultResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_id):
            query['CheckId'] = request.check_id
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.instance_id_key):
            query['InstanceIdKey'] = request.instance_id_key
        if not UtilClient.is_unset(request.instance_ids):
            query['InstanceIds'] = request.instance_ids
        if not UtilClient.is_unset(request.instance_name_key):
            query['InstanceNameKey'] = request.instance_name_key
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.region_id_key):
            query['RegionIdKey'] = request.region_id_key
        if not UtilClient.is_unset(request.sort_types):
            query['SortTypes'] = request.sort_types
        if not UtilClient.is_unset(request.statuses):
            query['Statuses'] = request.statuses
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCheckInstanceResult',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListCheckInstanceResultResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_check_instance_result(
        self,
        request: sas_20181203_models.ListCheckInstanceResultRequest,
    ) -> sas_20181203_models.ListCheckInstanceResultResponse:
        """
        @summary Queries the instances that failed a specified check item of configuration assessment.
        
        @param request: ListCheckInstanceResultRequest
        @return: ListCheckInstanceResultResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_check_instance_result_with_options(request, runtime)

    async def list_check_instance_result_async(
        self,
        request: sas_20181203_models.ListCheckInstanceResultRequest,
    ) -> sas_20181203_models.ListCheckInstanceResultResponse:
        """
        @summary Queries the instances that failed a specified check item of configuration assessment.
        
        @param request: ListCheckInstanceResultRequest
        @return: ListCheckInstanceResultResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_check_instance_result_with_options_async(request, runtime)

    def list_check_item_with_options(
        self,
        request: sas_20181203_models.ListCheckItemRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListCheckItemResponse:
        """
        @summary Queries the check items that can be customized.
        
        @param request: ListCheckItemRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCheckItemResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.task_sources):
            query['TaskSources'] = request.task_sources
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCheckItem',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListCheckItemResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_check_item_with_options_async(
        self,
        request: sas_20181203_models.ListCheckItemRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListCheckItemResponse:
        """
        @summary Queries the check items that can be customized.
        
        @param request: ListCheckItemRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCheckItemResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.task_sources):
            query['TaskSources'] = request.task_sources
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCheckItem',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListCheckItemResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_check_item(
        self,
        request: sas_20181203_models.ListCheckItemRequest,
    ) -> sas_20181203_models.ListCheckItemResponse:
        """
        @summary Queries the check items that can be customized.
        
        @param request: ListCheckItemRequest
        @return: ListCheckItemResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_check_item_with_options(request, runtime)

    async def list_check_item_async(
        self,
        request: sas_20181203_models.ListCheckItemRequest,
    ) -> sas_20181203_models.ListCheckItemResponse:
        """
        @summary Queries the check items that can be customized.
        
        @param request: ListCheckItemRequest
        @return: ListCheckItemResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_check_item_with_options_async(request, runtime)

    def list_check_item_warning_machine_with_options(
        self,
        request: sas_20181203_models.ListCheckItemWarningMachineRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListCheckItemWarningMachineResponse:
        """
        @summary Queries the servers that are affected by baseline risks.
        
        @param request: ListCheckItemWarningMachineRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCheckItemWarningMachineResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_id):
            query['CheckId'] = request.check_id
        if not UtilClient.is_unset(request.container_field_name):
            query['ContainerFieldName'] = request.container_field_name
        if not UtilClient.is_unset(request.container_field_value):
            query['ContainerFieldValue'] = request.container_field_value
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.risk_type):
            query['RiskType'] = request.risk_type
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCheckItemWarningMachine',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListCheckItemWarningMachineResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_check_item_warning_machine_with_options_async(
        self,
        request: sas_20181203_models.ListCheckItemWarningMachineRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListCheckItemWarningMachineResponse:
        """
        @summary Queries the servers that are affected by baseline risks.
        
        @param request: ListCheckItemWarningMachineRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCheckItemWarningMachineResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_id):
            query['CheckId'] = request.check_id
        if not UtilClient.is_unset(request.container_field_name):
            query['ContainerFieldName'] = request.container_field_name
        if not UtilClient.is_unset(request.container_field_value):
            query['ContainerFieldValue'] = request.container_field_value
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.risk_type):
            query['RiskType'] = request.risk_type
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCheckItemWarningMachine',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListCheckItemWarningMachineResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_check_item_warning_machine(
        self,
        request: sas_20181203_models.ListCheckItemWarningMachineRequest,
    ) -> sas_20181203_models.ListCheckItemWarningMachineResponse:
        """
        @summary Queries the servers that are affected by baseline risks.
        
        @param request: ListCheckItemWarningMachineRequest
        @return: ListCheckItemWarningMachineResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_check_item_warning_machine_with_options(request, runtime)

    async def list_check_item_warning_machine_async(
        self,
        request: sas_20181203_models.ListCheckItemWarningMachineRequest,
    ) -> sas_20181203_models.ListCheckItemWarningMachineResponse:
        """
        @summary Queries the servers that are affected by baseline risks.
        
        @param request: ListCheckItemWarningMachineRequest
        @return: ListCheckItemWarningMachineResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_check_item_warning_machine_with_options_async(request, runtime)

    def list_check_item_warning_summary_with_options(
        self,
        request: sas_20181203_models.ListCheckItemWarningSummaryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListCheckItemWarningSummaryResponse:
        """
        @summary Queries the risk statistics of check items by page.
        
        @param request: ListCheckItemWarningSummaryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCheckItemWarningSummaryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_item_fuzzy):
            query['CheckItemFuzzy'] = request.check_item_fuzzy
        if not UtilClient.is_unset(request.check_level):
            query['CheckLevel'] = request.check_level
        if not UtilClient.is_unset(request.check_type):
            query['CheckType'] = request.check_type
        if not UtilClient.is_unset(request.check_warning_status):
            query['CheckWarningStatus'] = request.check_warning_status
        if not UtilClient.is_unset(request.check_warning_status_list):
            query['CheckWarningStatusList'] = request.check_warning_status_list
        if not UtilClient.is_unset(request.container_field_name):
            query['ContainerFieldName'] = request.container_field_name
        if not UtilClient.is_unset(request.container_field_value):
            query['ContainerFieldValue'] = request.container_field_value
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.risk_type):
            query['RiskType'] = request.risk_type
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCheckItemWarningSummary',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListCheckItemWarningSummaryResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_check_item_warning_summary_with_options_async(
        self,
        request: sas_20181203_models.ListCheckItemWarningSummaryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListCheckItemWarningSummaryResponse:
        """
        @summary Queries the risk statistics of check items by page.
        
        @param request: ListCheckItemWarningSummaryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCheckItemWarningSummaryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_item_fuzzy):
            query['CheckItemFuzzy'] = request.check_item_fuzzy
        if not UtilClient.is_unset(request.check_level):
            query['CheckLevel'] = request.check_level
        if not UtilClient.is_unset(request.check_type):
            query['CheckType'] = request.check_type
        if not UtilClient.is_unset(request.check_warning_status):
            query['CheckWarningStatus'] = request.check_warning_status
        if not UtilClient.is_unset(request.check_warning_status_list):
            query['CheckWarningStatusList'] = request.check_warning_status_list
        if not UtilClient.is_unset(request.container_field_name):
            query['ContainerFieldName'] = request.container_field_name
        if not UtilClient.is_unset(request.container_field_value):
            query['ContainerFieldValue'] = request.container_field_value
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.risk_type):
            query['RiskType'] = request.risk_type
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCheckItemWarningSummary',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListCheckItemWarningSummaryResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_check_item_warning_summary(
        self,
        request: sas_20181203_models.ListCheckItemWarningSummaryRequest,
    ) -> sas_20181203_models.ListCheckItemWarningSummaryResponse:
        """
        @summary Queries the risk statistics of check items by page.
        
        @param request: ListCheckItemWarningSummaryRequest
        @return: ListCheckItemWarningSummaryResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_check_item_warning_summary_with_options(request, runtime)

    async def list_check_item_warning_summary_async(
        self,
        request: sas_20181203_models.ListCheckItemWarningSummaryRequest,
    ) -> sas_20181203_models.ListCheckItemWarningSummaryResponse:
        """
        @summary Queries the risk statistics of check items by page.
        
        @param request: ListCheckItemWarningSummaryRequest
        @return: ListCheckItemWarningSummaryResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_check_item_warning_summary_with_options_async(request, runtime)

    def list_check_result_with_options(
        self,
        request: sas_20181203_models.ListCheckResultRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListCheckResultResponse:
        """
        @summary Queries the details of the risk items that are detected in the configuration checks on cloud services.
        
        @param request: ListCheckResultRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCheckResultResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_ids):
            query['CheckIds'] = request.check_ids
        if not UtilClient.is_unset(request.check_key):
            query['CheckKey'] = request.check_key
        if not UtilClient.is_unset(request.check_types):
            query['CheckTypes'] = request.check_types
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.custom_param):
            query['CustomParam'] = request.custom_param
        if not UtilClient.is_unset(request.instance_ids):
            query['InstanceIds'] = request.instance_ids
        if not UtilClient.is_unset(request.instance_types):
            query['InstanceTypes'] = request.instance_types
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.operation_types):
            query['OperationTypes'] = request.operation_types
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        if not UtilClient.is_unset(request.requirement_ids):
            query['RequirementIds'] = request.requirement_ids
        if not UtilClient.is_unset(request.risk_levels):
            query['RiskLevels'] = request.risk_levels
        if not UtilClient.is_unset(request.sort_types):
            query['SortTypes'] = request.sort_types
        if not UtilClient.is_unset(request.standard_ids):
            query['StandardIds'] = request.standard_ids
        if not UtilClient.is_unset(request.statuses):
            query['Statuses'] = request.statuses
        if not UtilClient.is_unset(request.task_sources):
            query['TaskSources'] = request.task_sources
        if not UtilClient.is_unset(request.types):
            query['Types'] = request.types
        if not UtilClient.is_unset(request.vendors):
            query['Vendors'] = request.vendors
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCheckResult',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListCheckResultResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_check_result_with_options_async(
        self,
        request: sas_20181203_models.ListCheckResultRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListCheckResultResponse:
        """
        @summary Queries the details of the risk items that are detected in the configuration checks on cloud services.
        
        @param request: ListCheckResultRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCheckResultResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_ids):
            query['CheckIds'] = request.check_ids
        if not UtilClient.is_unset(request.check_key):
            query['CheckKey'] = request.check_key
        if not UtilClient.is_unset(request.check_types):
            query['CheckTypes'] = request.check_types
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.custom_param):
            query['CustomParam'] = request.custom_param
        if not UtilClient.is_unset(request.instance_ids):
            query['InstanceIds'] = request.instance_ids
        if not UtilClient.is_unset(request.instance_types):
            query['InstanceTypes'] = request.instance_types
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.operation_types):
            query['OperationTypes'] = request.operation_types
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        if not UtilClient.is_unset(request.requirement_ids):
            query['RequirementIds'] = request.requirement_ids
        if not UtilClient.is_unset(request.risk_levels):
            query['RiskLevels'] = request.risk_levels
        if not UtilClient.is_unset(request.sort_types):
            query['SortTypes'] = request.sort_types
        if not UtilClient.is_unset(request.standard_ids):
            query['StandardIds'] = request.standard_ids
        if not UtilClient.is_unset(request.statuses):
            query['Statuses'] = request.statuses
        if not UtilClient.is_unset(request.task_sources):
            query['TaskSources'] = request.task_sources
        if not UtilClient.is_unset(request.types):
            query['Types'] = request.types
        if not UtilClient.is_unset(request.vendors):
            query['Vendors'] = request.vendors
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCheckResult',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListCheckResultResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_check_result(
        self,
        request: sas_20181203_models.ListCheckResultRequest,
    ) -> sas_20181203_models.ListCheckResultResponse:
        """
        @summary Queries the details of the risk items that are detected in the configuration checks on cloud services.
        
        @param request: ListCheckResultRequest
        @return: ListCheckResultResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_check_result_with_options(request, runtime)

    async def list_check_result_async(
        self,
        request: sas_20181203_models.ListCheckResultRequest,
    ) -> sas_20181203_models.ListCheckResultResponse:
        """
        @summary Queries the details of the risk items that are detected in the configuration checks on cloud services.
        
        @param request: ListCheckResultRequest
        @return: ListCheckResultResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_check_result_with_options_async(request, runtime)

    def list_check_rule_with_options(
        self,
        request: sas_20181203_models.ListCheckRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListCheckRuleResponse:
        """
        @summary Display cloud product configuration check rules
        
        @param request: ListCheckRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCheckRuleResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCheckRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListCheckRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_check_rule_with_options_async(
        self,
        request: sas_20181203_models.ListCheckRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListCheckRuleResponse:
        """
        @summary Display cloud product configuration check rules
        
        @param request: ListCheckRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCheckRuleResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCheckRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListCheckRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_check_rule(
        self,
        request: sas_20181203_models.ListCheckRuleRequest,
    ) -> sas_20181203_models.ListCheckRuleResponse:
        """
        @summary Display cloud product configuration check rules
        
        @param request: ListCheckRuleRequest
        @return: ListCheckRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_check_rule_with_options(request, runtime)

    async def list_check_rule_async(
        self,
        request: sas_20181203_models.ListCheckRuleRequest,
    ) -> sas_20181203_models.ListCheckRuleResponse:
        """
        @summary Display cloud product configuration check rules
        
        @param request: ListCheckRuleRequest
        @return: ListCheckRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_check_rule_with_options_async(request, runtime)

    def list_check_rule_instance_with_options(
        self,
        request: sas_20181203_models.ListCheckRuleInstanceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListCheckRuleInstanceResponse:
        """
        @summary List all effective machines under the rule
        
        @param request: ListCheckRuleInstanceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCheckRuleInstanceResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCheckRuleInstance',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListCheckRuleInstanceResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_check_rule_instance_with_options_async(
        self,
        request: sas_20181203_models.ListCheckRuleInstanceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListCheckRuleInstanceResponse:
        """
        @summary List all effective machines under the rule
        
        @param request: ListCheckRuleInstanceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCheckRuleInstanceResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCheckRuleInstance',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListCheckRuleInstanceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_check_rule_instance(
        self,
        request: sas_20181203_models.ListCheckRuleInstanceRequest,
    ) -> sas_20181203_models.ListCheckRuleInstanceResponse:
        """
        @summary List all effective machines under the rule
        
        @param request: ListCheckRuleInstanceRequest
        @return: ListCheckRuleInstanceResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_check_rule_instance_with_options(request, runtime)

    async def list_check_rule_instance_async(
        self,
        request: sas_20181203_models.ListCheckRuleInstanceRequest,
    ) -> sas_20181203_models.ListCheckRuleInstanceResponse:
        """
        @summary List all effective machines under the rule
        
        @param request: ListCheckRuleInstanceRequest
        @return: ListCheckRuleInstanceResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_check_rule_instance_with_options_async(request, runtime)

    def list_check_standard_with_options(
        self,
        request: sas_20181203_models.ListCheckStandardRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListCheckStandardResponse:
        """
        @summary Queries the standards of configuration checks.
        
        @param request: ListCheckStandardRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCheckStandardResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.instance_ids):
            query['InstanceIds'] = request.instance_ids
        if not UtilClient.is_unset(request.instance_sub_types):
            query['InstanceSubTypes'] = request.instance_sub_types
        if not UtilClient.is_unset(request.instance_types):
            query['InstanceTypes'] = request.instance_types
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.task_sources):
            query['TaskSources'] = request.task_sources
        if not UtilClient.is_unset(request.vendors):
            query['Vendors'] = request.vendors
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCheckStandard',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListCheckStandardResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_check_standard_with_options_async(
        self,
        request: sas_20181203_models.ListCheckStandardRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListCheckStandardResponse:
        """
        @summary Queries the standards of configuration checks.
        
        @param request: ListCheckStandardRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCheckStandardResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.instance_ids):
            query['InstanceIds'] = request.instance_ids
        if not UtilClient.is_unset(request.instance_sub_types):
            query['InstanceSubTypes'] = request.instance_sub_types
        if not UtilClient.is_unset(request.instance_types):
            query['InstanceTypes'] = request.instance_types
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.task_sources):
            query['TaskSources'] = request.task_sources
        if not UtilClient.is_unset(request.vendors):
            query['Vendors'] = request.vendors
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCheckStandard',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListCheckStandardResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_check_standard(
        self,
        request: sas_20181203_models.ListCheckStandardRequest,
    ) -> sas_20181203_models.ListCheckStandardResponse:
        """
        @summary Queries the standards of configuration checks.
        
        @param request: ListCheckStandardRequest
        @return: ListCheckStandardResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_check_standard_with_options(request, runtime)

    async def list_check_standard_async(
        self,
        request: sas_20181203_models.ListCheckStandardRequest,
    ) -> sas_20181203_models.ListCheckStandardResponse:
        """
        @summary Queries the standards of configuration checks.
        
        @param request: ListCheckStandardRequest
        @return: ListCheckStandardResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_check_standard_with_options_async(request, runtime)

    def list_check_types_with_options(
        self,
        request: sas_20181203_models.ListCheckTypesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListCheckTypesResponse:
        """
        @summary Queries the types of check items that meet the specified conditions based on the ID of a baseline.
        
        @param request: ListCheckTypesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCheckTypesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.risk_id):
            query['RiskId'] = request.risk_id
        if not UtilClient.is_unset(request.show_checks):
            query['ShowChecks'] = request.show_checks
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCheckTypes',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListCheckTypesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_check_types_with_options_async(
        self,
        request: sas_20181203_models.ListCheckTypesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListCheckTypesResponse:
        """
        @summary Queries the types of check items that meet the specified conditions based on the ID of a baseline.
        
        @param request: ListCheckTypesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCheckTypesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.risk_id):
            query['RiskId'] = request.risk_id
        if not UtilClient.is_unset(request.show_checks):
            query['ShowChecks'] = request.show_checks
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCheckTypes',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListCheckTypesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_check_types(
        self,
        request: sas_20181203_models.ListCheckTypesRequest,
    ) -> sas_20181203_models.ListCheckTypesResponse:
        """
        @summary Queries the types of check items that meet the specified conditions based on the ID of a baseline.
        
        @param request: ListCheckTypesRequest
        @return: ListCheckTypesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_check_types_with_options(request, runtime)

    async def list_check_types_async(
        self,
        request: sas_20181203_models.ListCheckTypesRequest,
    ) -> sas_20181203_models.ListCheckTypesResponse:
        """
        @summary Queries the types of check items that meet the specified conditions based on the ID of a baseline.
        
        @param request: ListCheckTypesRequest
        @return: ListCheckTypesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_check_types_with_options_async(request, runtime)

    def list_client_alert_mode_with_options(
        self,
        request: sas_20181203_models.ListClientAlertModeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListClientAlertModeResponse:
        """
        @summary Queries the alert settings of assets. By default, the balanced mode is enabled. A detected list of assets can be returned only in strict mode.
        
        @param request: ListClientAlertModeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListClientAlertModeResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListClientAlertMode',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListClientAlertModeResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_client_alert_mode_with_options_async(
        self,
        request: sas_20181203_models.ListClientAlertModeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListClientAlertModeResponse:
        """
        @summary Queries the alert settings of assets. By default, the balanced mode is enabled. A detected list of assets can be returned only in strict mode.
        
        @param request: ListClientAlertModeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListClientAlertModeResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListClientAlertMode',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListClientAlertModeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_client_alert_mode(
        self,
        request: sas_20181203_models.ListClientAlertModeRequest,
    ) -> sas_20181203_models.ListClientAlertModeResponse:
        """
        @summary Queries the alert settings of assets. By default, the balanced mode is enabled. A detected list of assets can be returned only in strict mode.
        
        @param request: ListClientAlertModeRequest
        @return: ListClientAlertModeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_client_alert_mode_with_options(request, runtime)

    async def list_client_alert_mode_async(
        self,
        request: sas_20181203_models.ListClientAlertModeRequest,
    ) -> sas_20181203_models.ListClientAlertModeResponse:
        """
        @summary Queries the alert settings of assets. By default, the balanced mode is enabled. A detected list of assets can be returned only in strict mode.
        
        @param request: ListClientAlertModeRequest
        @return: ListClientAlertModeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_client_alert_mode_with_options_async(request, runtime)

    def list_client_user_define_rule_types_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListClientUserDefineRuleTypesResponse:
        """
        @summary Queries the supported types of custom defense rules.
        
        @param request: ListClientUserDefineRuleTypesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListClientUserDefineRuleTypesResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='ListClientUserDefineRuleTypes',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListClientUserDefineRuleTypesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_client_user_define_rule_types_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListClientUserDefineRuleTypesResponse:
        """
        @summary Queries the supported types of custom defense rules.
        
        @param request: ListClientUserDefineRuleTypesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListClientUserDefineRuleTypesResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='ListClientUserDefineRuleTypes',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListClientUserDefineRuleTypesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_client_user_define_rule_types(self) -> sas_20181203_models.ListClientUserDefineRuleTypesResponse:
        """
        @summary Queries the supported types of custom defense rules.
        
        @return: ListClientUserDefineRuleTypesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_client_user_define_rule_types_with_options(runtime)

    async def list_client_user_define_rule_types_async(self) -> sas_20181203_models.ListClientUserDefineRuleTypesResponse:
        """
        @summary Queries the supported types of custom defense rules.
        
        @return: ListClientUserDefineRuleTypesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_client_user_define_rule_types_with_options_async(runtime)

    def list_client_user_define_rules_with_options(
        self,
        request: sas_20181203_models.ListClientUserDefineRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListClientUserDefineRulesResponse:
        """
        @summary Queries custom defense rules.
        
        @param request: ListClientUserDefineRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListClientUserDefineRulesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListClientUserDefineRules',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListClientUserDefineRulesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_client_user_define_rules_with_options_async(
        self,
        request: sas_20181203_models.ListClientUserDefineRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListClientUserDefineRulesResponse:
        """
        @summary Queries custom defense rules.
        
        @param request: ListClientUserDefineRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListClientUserDefineRulesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListClientUserDefineRules',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListClientUserDefineRulesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_client_user_define_rules(
        self,
        request: sas_20181203_models.ListClientUserDefineRulesRequest,
    ) -> sas_20181203_models.ListClientUserDefineRulesResponse:
        """
        @summary Queries custom defense rules.
        
        @param request: ListClientUserDefineRulesRequest
        @return: ListClientUserDefineRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_client_user_define_rules_with_options(request, runtime)

    async def list_client_user_define_rules_async(
        self,
        request: sas_20181203_models.ListClientUserDefineRulesRequest,
    ) -> sas_20181203_models.ListClientUserDefineRulesResponse:
        """
        @summary Queries custom defense rules.
        
        @param request: ListClientUserDefineRulesRequest
        @return: ListClientUserDefineRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_client_user_define_rules_with_options_async(request, runtime)

    def list_cloud_asset_instances_with_options(
        self,
        request: sas_20181203_models.ListCloudAssetInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListCloudAssetInstancesResponse:
        """
        @summary Queries cloud service assets.
        
        @param request: ListCloudAssetInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCloudAssetInstancesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cloud_asset_types):
            query['CloudAssetTypes'] = request.cloud_asset_types
        if not UtilClient.is_unset(request.criteria):
            query['Criteria'] = request.criteria
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.logical_exp):
            query['LogicalExp'] = request.logical_exp
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCloudAssetInstances',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListCloudAssetInstancesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_cloud_asset_instances_with_options_async(
        self,
        request: sas_20181203_models.ListCloudAssetInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListCloudAssetInstancesResponse:
        """
        @summary Queries cloud service assets.
        
        @param request: ListCloudAssetInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCloudAssetInstancesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cloud_asset_types):
            query['CloudAssetTypes'] = request.cloud_asset_types
        if not UtilClient.is_unset(request.criteria):
            query['Criteria'] = request.criteria
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.logical_exp):
            query['LogicalExp'] = request.logical_exp
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCloudAssetInstances',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListCloudAssetInstancesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_cloud_asset_instances(
        self,
        request: sas_20181203_models.ListCloudAssetInstancesRequest,
    ) -> sas_20181203_models.ListCloudAssetInstancesResponse:
        """
        @summary Queries cloud service assets.
        
        @param request: ListCloudAssetInstancesRequest
        @return: ListCloudAssetInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_cloud_asset_instances_with_options(request, runtime)

    async def list_cloud_asset_instances_async(
        self,
        request: sas_20181203_models.ListCloudAssetInstancesRequest,
    ) -> sas_20181203_models.ListCloudAssetInstancesResponse:
        """
        @summary Queries cloud service assets.
        
        @param request: ListCloudAssetInstancesRequest
        @return: ListCloudAssetInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_cloud_asset_instances_with_options_async(request, runtime)

    def list_cloud_vendor_regions_with_options(
        self,
        request: sas_20181203_models.ListCloudVendorRegionsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListCloudVendorRegionsResponse:
        """
        @summary Queries the synchronization region configurations of other clouds on a site.
        
        @param request: ListCloudVendorRegionsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCloudVendorRegionsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.vendor):
            query['Vendor'] = request.vendor
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCloudVendorRegions',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListCloudVendorRegionsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_cloud_vendor_regions_with_options_async(
        self,
        request: sas_20181203_models.ListCloudVendorRegionsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListCloudVendorRegionsResponse:
        """
        @summary Queries the synchronization region configurations of other clouds on a site.
        
        @param request: ListCloudVendorRegionsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCloudVendorRegionsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.vendor):
            query['Vendor'] = request.vendor
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCloudVendorRegions',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListCloudVendorRegionsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_cloud_vendor_regions(
        self,
        request: sas_20181203_models.ListCloudVendorRegionsRequest,
    ) -> sas_20181203_models.ListCloudVendorRegionsResponse:
        """
        @summary Queries the synchronization region configurations of other clouds on a site.
        
        @param request: ListCloudVendorRegionsRequest
        @return: ListCloudVendorRegionsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_cloud_vendor_regions_with_options(request, runtime)

    async def list_cloud_vendor_regions_async(
        self,
        request: sas_20181203_models.ListCloudVendorRegionsRequest,
    ) -> sas_20181203_models.ListCloudVendorRegionsResponse:
        """
        @summary Queries the synchronization region configurations of other clouds on a site.
        
        @param request: ListCloudVendorRegionsRequest
        @return: ListCloudVendorRegionsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_cloud_vendor_regions_with_options_async(request, runtime)

    def list_cluster_cnnf_status_detail_with_options(
        self,
        request: sas_20181203_models.ListClusterCnnfStatusDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListClusterCnnfStatusDetailResponse:
        """
        @summary Queries the protection status of the container firewall.
        
        @param request: ListClusterCnnfStatusDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListClusterCnnfStatusDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_ids):
            query['ClusterIds'] = request.cluster_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListClusterCnnfStatusDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListClusterCnnfStatusDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_cluster_cnnf_status_detail_with_options_async(
        self,
        request: sas_20181203_models.ListClusterCnnfStatusDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListClusterCnnfStatusDetailResponse:
        """
        @summary Queries the protection status of the container firewall.
        
        @param request: ListClusterCnnfStatusDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListClusterCnnfStatusDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_ids):
            query['ClusterIds'] = request.cluster_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListClusterCnnfStatusDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListClusterCnnfStatusDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_cluster_cnnf_status_detail(
        self,
        request: sas_20181203_models.ListClusterCnnfStatusDetailRequest,
    ) -> sas_20181203_models.ListClusterCnnfStatusDetailResponse:
        """
        @summary Queries the protection status of the container firewall.
        
        @param request: ListClusterCnnfStatusDetailRequest
        @return: ListClusterCnnfStatusDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_cluster_cnnf_status_detail_with_options(request, runtime)

    async def list_cluster_cnnf_status_detail_async(
        self,
        request: sas_20181203_models.ListClusterCnnfStatusDetailRequest,
    ) -> sas_20181203_models.ListClusterCnnfStatusDetailResponse:
        """
        @summary Queries the protection status of the container firewall.
        
        @param request: ListClusterCnnfStatusDetailRequest
        @return: ListClusterCnnfStatusDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_cluster_cnnf_status_detail_with_options_async(request, runtime)

    def list_cluster_interception_config_with_options(
        self,
        request: sas_20181203_models.ListClusterInterceptionConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListClusterInterceptionConfigResponse:
        """
        @summary Queries the defense rules that are created for a cluster.
        
        @param request: ListClusterInterceptionConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListClusterInterceptionConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_cnnfstatus):
            query['ClusterCNNFStatus'] = request.cluster_cnnfstatus
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListClusterInterceptionConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListClusterInterceptionConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_cluster_interception_config_with_options_async(
        self,
        request: sas_20181203_models.ListClusterInterceptionConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListClusterInterceptionConfigResponse:
        """
        @summary Queries the defense rules that are created for a cluster.
        
        @param request: ListClusterInterceptionConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListClusterInterceptionConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_cnnfstatus):
            query['ClusterCNNFStatus'] = request.cluster_cnnfstatus
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListClusterInterceptionConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListClusterInterceptionConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_cluster_interception_config(
        self,
        request: sas_20181203_models.ListClusterInterceptionConfigRequest,
    ) -> sas_20181203_models.ListClusterInterceptionConfigResponse:
        """
        @summary Queries the defense rules that are created for a cluster.
        
        @param request: ListClusterInterceptionConfigRequest
        @return: ListClusterInterceptionConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_cluster_interception_config_with_options(request, runtime)

    async def list_cluster_interception_config_async(
        self,
        request: sas_20181203_models.ListClusterInterceptionConfigRequest,
    ) -> sas_20181203_models.ListClusterInterceptionConfigResponse:
        """
        @summary Queries the defense rules that are created for a cluster.
        
        @param request: ListClusterInterceptionConfigRequest
        @return: ListClusterInterceptionConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_cluster_interception_config_with_options_async(request, runtime)

    def list_cluster_plugin_info_with_options(
        self,
        request: sas_20181203_models.ListClusterPluginInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListClusterPluginInfoResponse:
        """
        @summary Queries the status of plug-ins on clusters.
        
        @param request: ListClusterPluginInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListClusterPluginInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_ids):
            query['ClusterIds'] = request.cluster_ids
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.plugin_name):
            query['PluginName'] = request.plugin_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListClusterPluginInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListClusterPluginInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_cluster_plugin_info_with_options_async(
        self,
        request: sas_20181203_models.ListClusterPluginInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListClusterPluginInfoResponse:
        """
        @summary Queries the status of plug-ins on clusters.
        
        @param request: ListClusterPluginInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListClusterPluginInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_ids):
            query['ClusterIds'] = request.cluster_ids
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.plugin_name):
            query['PluginName'] = request.plugin_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListClusterPluginInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListClusterPluginInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_cluster_plugin_info(
        self,
        request: sas_20181203_models.ListClusterPluginInfoRequest,
    ) -> sas_20181203_models.ListClusterPluginInfoResponse:
        """
        @summary Queries the status of plug-ins on clusters.
        
        @param request: ListClusterPluginInfoRequest
        @return: ListClusterPluginInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_cluster_plugin_info_with_options(request, runtime)

    async def list_cluster_plugin_info_async(
        self,
        request: sas_20181203_models.ListClusterPluginInfoRequest,
    ) -> sas_20181203_models.ListClusterPluginInfoResponse:
        """
        @summary Queries the status of plug-ins on clusters.
        
        @param request: ListClusterPluginInfoRequest
        @return: ListClusterPluginInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_cluster_plugin_info_with_options_async(request, runtime)

    def list_compress_file_detect_result_with_options(
        self,
        request: sas_20181203_models.ListCompressFileDetectResultRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListCompressFileDetectResultResponse:
        """
        @summary Queries the detection results of the files extracted from a package.
        
        @description You can call this operation to query the detection results of files only if the files are pushed to the cloud for detection and in the form of packages. You can repeatedly query the detection results of files within 5 hours because the results are retained for 5 hours. For more information about how to push a file to the cloud for detection, see the CreateFileDetect operation. For more information about how to query file detection results, see the GetFileDetectResult operation.
        The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only hexadecimal MD5 hash values of complete file content are supported. You must calculate the required MD5 hash value before you call this operation.
        To calculate the hexadecimal MD5 hash value for a file, you can perform the following steps:
        1\\. Use the MD5 algorithm to encrypt data and generate a 128-bit hash value. You can use a tool such as MessageDigest for Java and the hashlib module for Python.
        2\\. Convert the hash value to a hexadecimal string. You can use a tool such as Codec for Java and the hex() function for Python.
        
        @param request: ListCompressFileDetectResultRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCompressFileDetectResultResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.hash_key):
            query['HashKey'] = request.hash_key
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCompressFileDetectResult',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListCompressFileDetectResultResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_compress_file_detect_result_with_options_async(
        self,
        request: sas_20181203_models.ListCompressFileDetectResultRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListCompressFileDetectResultResponse:
        """
        @summary Queries the detection results of the files extracted from a package.
        
        @description You can call this operation to query the detection results of files only if the files are pushed to the cloud for detection and in the form of packages. You can repeatedly query the detection results of files within 5 hours because the results are retained for 5 hours. For more information about how to push a file to the cloud for detection, see the CreateFileDetect operation. For more information about how to query file detection results, see the GetFileDetectResult operation.
        The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only hexadecimal MD5 hash values of complete file content are supported. You must calculate the required MD5 hash value before you call this operation.
        To calculate the hexadecimal MD5 hash value for a file, you can perform the following steps:
        1\\. Use the MD5 algorithm to encrypt data and generate a 128-bit hash value. You can use a tool such as MessageDigest for Java and the hashlib module for Python.
        2\\. Convert the hash value to a hexadecimal string. You can use a tool such as Codec for Java and the hex() function for Python.
        
        @param request: ListCompressFileDetectResultRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCompressFileDetectResultResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.hash_key):
            query['HashKey'] = request.hash_key
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCompressFileDetectResult',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListCompressFileDetectResultResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_compress_file_detect_result(
        self,
        request: sas_20181203_models.ListCompressFileDetectResultRequest,
    ) -> sas_20181203_models.ListCompressFileDetectResultResponse:
        """
        @summary Queries the detection results of the files extracted from a package.
        
        @description You can call this operation to query the detection results of files only if the files are pushed to the cloud for detection and in the form of packages. You can repeatedly query the detection results of files within 5 hours because the results are retained for 5 hours. For more information about how to push a file to the cloud for detection, see the CreateFileDetect operation. For more information about how to query file detection results, see the GetFileDetectResult operation.
        The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only hexadecimal MD5 hash values of complete file content are supported. You must calculate the required MD5 hash value before you call this operation.
        To calculate the hexadecimal MD5 hash value for a file, you can perform the following steps:
        1\\. Use the MD5 algorithm to encrypt data and generate a 128-bit hash value. You can use a tool such as MessageDigest for Java and the hashlib module for Python.
        2\\. Convert the hash value to a hexadecimal string. You can use a tool such as Codec for Java and the hex() function for Python.
        
        @param request: ListCompressFileDetectResultRequest
        @return: ListCompressFileDetectResultResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_compress_file_detect_result_with_options(request, runtime)

    async def list_compress_file_detect_result_async(
        self,
        request: sas_20181203_models.ListCompressFileDetectResultRequest,
    ) -> sas_20181203_models.ListCompressFileDetectResultResponse:
        """
        @summary Queries the detection results of the files extracted from a package.
        
        @description You can call this operation to query the detection results of files only if the files are pushed to the cloud for detection and in the form of packages. You can repeatedly query the detection results of files within 5 hours because the results are retained for 5 hours. For more information about how to push a file to the cloud for detection, see the CreateFileDetect operation. For more information about how to query file detection results, see the GetFileDetectResult operation.
        The HashKey parameter is included in all API operations that are related to the file detection feature. The parameter specifies the unique identifier of a file. Only hexadecimal MD5 hash values of complete file content are supported. You must calculate the required MD5 hash value before you call this operation.
        To calculate the hexadecimal MD5 hash value for a file, you can perform the following steps:
        1\\. Use the MD5 algorithm to encrypt data and generate a 128-bit hash value. You can use a tool such as MessageDigest for Java and the hashlib module for Python.
        2\\. Convert the hash value to a hexadecimal string. You can use a tool such as Codec for Java and the hex() function for Python.
        
        @param request: ListCompressFileDetectResultRequest
        @return: ListCompressFileDetectResultResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_compress_file_detect_result_with_options_async(request, runtime)

    def list_container_defense_rule_with_options(
        self,
        request: sas_20181203_models.ListContainerDefenseRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListContainerDefenseRuleResponse:
        """
        @summary Queries a list of rules for non-image program defense.
        
        @param request: ListContainerDefenseRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListContainerDefenseRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.conditions):
            query['Conditions'] = request.conditions
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.is_default_rule):
            query['IsDefaultRule'] = request.is_default_rule
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.rule_type):
            query['RuleType'] = request.rule_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListContainerDefenseRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListContainerDefenseRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_container_defense_rule_with_options_async(
        self,
        request: sas_20181203_models.ListContainerDefenseRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListContainerDefenseRuleResponse:
        """
        @summary Queries a list of rules for non-image program defense.
        
        @param request: ListContainerDefenseRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListContainerDefenseRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.conditions):
            query['Conditions'] = request.conditions
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.is_default_rule):
            query['IsDefaultRule'] = request.is_default_rule
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.rule_type):
            query['RuleType'] = request.rule_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListContainerDefenseRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListContainerDefenseRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_container_defense_rule(
        self,
        request: sas_20181203_models.ListContainerDefenseRuleRequest,
    ) -> sas_20181203_models.ListContainerDefenseRuleResponse:
        """
        @summary Queries a list of rules for non-image program defense.
        
        @param request: ListContainerDefenseRuleRequest
        @return: ListContainerDefenseRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_container_defense_rule_with_options(request, runtime)

    async def list_container_defense_rule_async(
        self,
        request: sas_20181203_models.ListContainerDefenseRuleRequest,
    ) -> sas_20181203_models.ListContainerDefenseRuleResponse:
        """
        @summary Queries a list of rules for non-image program defense.
        
        @param request: ListContainerDefenseRuleRequest
        @return: ListContainerDefenseRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_container_defense_rule_with_options_async(request, runtime)

    def list_container_defense_rule_clusters_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListContainerDefenseRuleClustersResponse:
        """
        @summary Queries a list of clusters that are included in a rule for non-image program defense.
        
        @param request: ListContainerDefenseRuleClustersRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListContainerDefenseRuleClustersResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='ListContainerDefenseRuleClusters',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListContainerDefenseRuleClustersResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_container_defense_rule_clusters_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListContainerDefenseRuleClustersResponse:
        """
        @summary Queries a list of clusters that are included in a rule for non-image program defense.
        
        @param request: ListContainerDefenseRuleClustersRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListContainerDefenseRuleClustersResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='ListContainerDefenseRuleClusters',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListContainerDefenseRuleClustersResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_container_defense_rule_clusters(self) -> sas_20181203_models.ListContainerDefenseRuleClustersResponse:
        """
        @summary Queries a list of clusters that are included in a rule for non-image program defense.
        
        @return: ListContainerDefenseRuleClustersResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_container_defense_rule_clusters_with_options(runtime)

    async def list_container_defense_rule_clusters_async(self) -> sas_20181203_models.ListContainerDefenseRuleClustersResponse:
        """
        @summary Queries a list of clusters that are included in a rule for non-image program defense.
        
        @return: ListContainerDefenseRuleClustersResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_container_defense_rule_clusters_with_options_async(runtime)

    def list_criteria_strategy_with_options(
        self,
        request: sas_20181203_models.ListCriteriaStrategyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListCriteriaStrategyResponse:
        """
        @summary Queries the IDs and names of rules configured for proactive defense for containers.
        
        @param request: ListCriteriaStrategyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCriteriaStrategyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.image_name):
            query['ImageName'] = request.image_name
        if not UtilClient.is_unset(request.label):
            query['Label'] = request.label
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        if not UtilClient.is_unset(request.strategy_name):
            query['StrategyName'] = request.strategy_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCriteriaStrategy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListCriteriaStrategyResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_criteria_strategy_with_options_async(
        self,
        request: sas_20181203_models.ListCriteriaStrategyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListCriteriaStrategyResponse:
        """
        @summary Queries the IDs and names of rules configured for proactive defense for containers.
        
        @param request: ListCriteriaStrategyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCriteriaStrategyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.image_name):
            query['ImageName'] = request.image_name
        if not UtilClient.is_unset(request.label):
            query['Label'] = request.label
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        if not UtilClient.is_unset(request.strategy_name):
            query['StrategyName'] = request.strategy_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCriteriaStrategy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListCriteriaStrategyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_criteria_strategy(
        self,
        request: sas_20181203_models.ListCriteriaStrategyRequest,
    ) -> sas_20181203_models.ListCriteriaStrategyResponse:
        """
        @summary Queries the IDs and names of rules configured for proactive defense for containers.
        
        @param request: ListCriteriaStrategyRequest
        @return: ListCriteriaStrategyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_criteria_strategy_with_options(request, runtime)

    async def list_criteria_strategy_async(
        self,
        request: sas_20181203_models.ListCriteriaStrategyRequest,
    ) -> sas_20181203_models.ListCriteriaStrategyResponse:
        """
        @summary Queries the IDs and names of rules configured for proactive defense for containers.
        
        @param request: ListCriteriaStrategyRequest
        @return: ListCriteriaStrategyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_criteria_strategy_with_options_async(request, runtime)

    def list_dockerhub_image_with_options(
        self,
        request: sas_20181203_models.ListDockerhubImageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListDockerhubImageResponse:
        """
        @summary Queries the risk overview of official Docker Hub images.
        
        @param request: ListDockerhubImageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDockerhubImageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.query):
            query['Query'] = request.query
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDockerhubImage',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListDockerhubImageResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_dockerhub_image_with_options_async(
        self,
        request: sas_20181203_models.ListDockerhubImageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListDockerhubImageResponse:
        """
        @summary Queries the risk overview of official Docker Hub images.
        
        @param request: ListDockerhubImageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDockerhubImageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.query):
            query['Query'] = request.query
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDockerhubImage',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListDockerhubImageResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_dockerhub_image(
        self,
        request: sas_20181203_models.ListDockerhubImageRequest,
    ) -> sas_20181203_models.ListDockerhubImageResponse:
        """
        @summary Queries the risk overview of official Docker Hub images.
        
        @param request: ListDockerhubImageRequest
        @return: ListDockerhubImageResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_dockerhub_image_with_options(request, runtime)

    async def list_dockerhub_image_async(
        self,
        request: sas_20181203_models.ListDockerhubImageRequest,
    ) -> sas_20181203_models.ListDockerhubImageResponse:
        """
        @summary Queries the risk overview of official Docker Hub images.
        
        @param request: ListDockerhubImageRequest
        @return: ListDockerhubImageResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_dockerhub_image_with_options_async(request, runtime)

    def list_file_protect_event_with_options(
        self,
        request: sas_20181203_models.ListFileProtectEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListFileProtectEventResponse:
        """
        @summary Queries core file monitoring rules that meet the specified filter condition.
        
        @param request: ListFileProtectEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListFileProtectEventResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.alert_levels):
            query['AlertLevels'] = request.alert_levels
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.instance_id):
            query['InstanceId'] = request.instance_id
        if not UtilClient.is_unset(request.instance_name):
            query['InstanceName'] = request.instance_name
        if not UtilClient.is_unset(request.internet_ip):
            query['InternetIp'] = request.internet_ip
        if not UtilClient.is_unset(request.intranet_ip):
            query['IntranetIp'] = request.intranet_ip
        if not UtilClient.is_unset(request.operation):
            query['Operation'] = request.operation
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListFileProtectEvent',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListFileProtectEventResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_file_protect_event_with_options_async(
        self,
        request: sas_20181203_models.ListFileProtectEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListFileProtectEventResponse:
        """
        @summary Queries core file monitoring rules that meet the specified filter condition.
        
        @param request: ListFileProtectEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListFileProtectEventResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.alert_levels):
            query['AlertLevels'] = request.alert_levels
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.instance_id):
            query['InstanceId'] = request.instance_id
        if not UtilClient.is_unset(request.instance_name):
            query['InstanceName'] = request.instance_name
        if not UtilClient.is_unset(request.internet_ip):
            query['InternetIp'] = request.internet_ip
        if not UtilClient.is_unset(request.intranet_ip):
            query['IntranetIp'] = request.intranet_ip
        if not UtilClient.is_unset(request.operation):
            query['Operation'] = request.operation
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListFileProtectEvent',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListFileProtectEventResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_file_protect_event(
        self,
        request: sas_20181203_models.ListFileProtectEventRequest,
    ) -> sas_20181203_models.ListFileProtectEventResponse:
        """
        @summary Queries core file monitoring rules that meet the specified filter condition.
        
        @param request: ListFileProtectEventRequest
        @return: ListFileProtectEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_file_protect_event_with_options(request, runtime)

    async def list_file_protect_event_async(
        self,
        request: sas_20181203_models.ListFileProtectEventRequest,
    ) -> sas_20181203_models.ListFileProtectEventResponse:
        """
        @summary Queries core file monitoring rules that meet the specified filter condition.
        
        @param request: ListFileProtectEventRequest
        @return: ListFileProtectEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_file_protect_event_with_options_async(request, runtime)

    def list_file_protect_plugin_status_with_options(
        self,
        request: sas_20181203_models.ListFileProtectPluginStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListFileProtectPluginStatusResponse:
        """
        @summary Queries information about the Security Center agent installed on servers on which core file monitoring rules take effect. The information includes the installation status of the Security Center agent and whether the core file monitoring feature is supported.
        
        @param request: ListFileProtectPluginStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListFileProtectPluginStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.switch_id):
            query['SwitchId'] = request.switch_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListFileProtectPluginStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListFileProtectPluginStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_file_protect_plugin_status_with_options_async(
        self,
        request: sas_20181203_models.ListFileProtectPluginStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListFileProtectPluginStatusResponse:
        """
        @summary Queries information about the Security Center agent installed on servers on which core file monitoring rules take effect. The information includes the installation status of the Security Center agent and whether the core file monitoring feature is supported.
        
        @param request: ListFileProtectPluginStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListFileProtectPluginStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.switch_id):
            query['SwitchId'] = request.switch_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListFileProtectPluginStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListFileProtectPluginStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_file_protect_plugin_status(
        self,
        request: sas_20181203_models.ListFileProtectPluginStatusRequest,
    ) -> sas_20181203_models.ListFileProtectPluginStatusResponse:
        """
        @summary Queries information about the Security Center agent installed on servers on which core file monitoring rules take effect. The information includes the installation status of the Security Center agent and whether the core file monitoring feature is supported.
        
        @param request: ListFileProtectPluginStatusRequest
        @return: ListFileProtectPluginStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_file_protect_plugin_status_with_options(request, runtime)

    async def list_file_protect_plugin_status_async(
        self,
        request: sas_20181203_models.ListFileProtectPluginStatusRequest,
    ) -> sas_20181203_models.ListFileProtectPluginStatusResponse:
        """
        @summary Queries information about the Security Center agent installed on servers on which core file monitoring rules take effect. The information includes the installation status of the Security Center agent and whether the core file monitoring feature is supported.
        
        @param request: ListFileProtectPluginStatusRequest
        @return: ListFileProtectPluginStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_file_protect_plugin_status_with_options_async(request, runtime)

    def list_file_protect_rule_with_options(
        self,
        request: sas_20181203_models.ListFileProtectRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListFileProtectRuleResponse:
        """
        @summary Queries core file monitoring rules.
        
        @param request: ListFileProtectRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListFileProtectRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.alert_level):
            query['AlertLevel'] = request.alert_level
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.platform):
            query['Platform'] = request.platform
        if not UtilClient.is_unset(request.rule_action):
            query['RuleAction'] = request.rule_action
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListFileProtectRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListFileProtectRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_file_protect_rule_with_options_async(
        self,
        request: sas_20181203_models.ListFileProtectRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListFileProtectRuleResponse:
        """
        @summary Queries core file monitoring rules.
        
        @param request: ListFileProtectRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListFileProtectRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.alert_level):
            query['AlertLevel'] = request.alert_level
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.platform):
            query['Platform'] = request.platform
        if not UtilClient.is_unset(request.rule_action):
            query['RuleAction'] = request.rule_action
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListFileProtectRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListFileProtectRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_file_protect_rule(
        self,
        request: sas_20181203_models.ListFileProtectRuleRequest,
    ) -> sas_20181203_models.ListFileProtectRuleResponse:
        """
        @summary Queries core file monitoring rules.
        
        @param request: ListFileProtectRuleRequest
        @return: ListFileProtectRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_file_protect_rule_with_options(request, runtime)

    async def list_file_protect_rule_async(
        self,
        request: sas_20181203_models.ListFileProtectRuleRequest,
    ) -> sas_20181203_models.ListFileProtectRuleResponse:
        """
        @summary Queries core file monitoring rules.
        
        @param request: ListFileProtectRuleRequest
        @return: ListFileProtectRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_file_protect_rule_with_options_async(request, runtime)

    def list_groups_with_options(
        self,
        request: sas_20181203_models.ListGroupsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListGroupsResponse:
        """
        @summary Queries the server groups.
        
        @param request: ListGroupsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListGroupsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.next_token):
            query['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.use_next_token):
            query['UseNextToken'] = request.use_next_token
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListGroups',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListGroupsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_groups_with_options_async(
        self,
        request: sas_20181203_models.ListGroupsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListGroupsResponse:
        """
        @summary Queries the server groups.
        
        @param request: ListGroupsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListGroupsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.next_token):
            query['NextToken'] = request.next_token
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.use_next_token):
            query['UseNextToken'] = request.use_next_token
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListGroups',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListGroupsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_groups(
        self,
        request: sas_20181203_models.ListGroupsRequest,
    ) -> sas_20181203_models.ListGroupsResponse:
        """
        @summary Queries the server groups.
        
        @param request: ListGroupsRequest
        @return: ListGroupsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_groups_with_options(request, runtime)

    async def list_groups_async(
        self,
        request: sas_20181203_models.ListGroupsRequest,
    ) -> sas_20181203_models.ListGroupsResponse:
        """
        @summary Queries the server groups.
        
        @param request: ListGroupsRequest
        @return: ListGroupsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_groups_with_options_async(request, runtime)

    def list_honeypot_with_options(
        self,
        request: sas_20181203_models.ListHoneypotRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListHoneypotResponse:
        """
        @summary Queries the information about honeypots.
        
        @param request: ListHoneypotRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListHoneypotResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.honeypot_ids):
            query['HoneypotIds'] = request.honeypot_ids
        if not UtilClient.is_unset(request.honeypot_name):
            query['HoneypotName'] = request.honeypot_name
        if not UtilClient.is_unset(request.node_id):
            query['NodeId'] = request.node_id
        if not UtilClient.is_unset(request.node_name):
            query['NodeName'] = request.node_name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListHoneypot',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListHoneypotResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_honeypot_with_options_async(
        self,
        request: sas_20181203_models.ListHoneypotRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListHoneypotResponse:
        """
        @summary Queries the information about honeypots.
        
        @param request: ListHoneypotRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListHoneypotResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.honeypot_ids):
            query['HoneypotIds'] = request.honeypot_ids
        if not UtilClient.is_unset(request.honeypot_name):
            query['HoneypotName'] = request.honeypot_name
        if not UtilClient.is_unset(request.node_id):
            query['NodeId'] = request.node_id
        if not UtilClient.is_unset(request.node_name):
            query['NodeName'] = request.node_name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListHoneypot',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListHoneypotResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_honeypot(
        self,
        request: sas_20181203_models.ListHoneypotRequest,
    ) -> sas_20181203_models.ListHoneypotResponse:
        """
        @summary Queries the information about honeypots.
        
        @param request: ListHoneypotRequest
        @return: ListHoneypotResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_honeypot_with_options(request, runtime)

    async def list_honeypot_async(
        self,
        request: sas_20181203_models.ListHoneypotRequest,
    ) -> sas_20181203_models.ListHoneypotResponse:
        """
        @summary Queries the information about honeypots.
        
        @param request: ListHoneypotRequest
        @return: ListHoneypotResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_honeypot_with_options_async(request, runtime)

    def list_honeypot_alarm_events_with_options(
        self,
        request: sas_20181203_models.ListHoneypotAlarmEventsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListHoneypotAlarmEventsResponse:
        """
        @summary Queries the information about alert events that are generated.
        
        @param request: ListHoneypotAlarmEventsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListHoneypotAlarmEventsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListHoneypotAlarmEvents',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListHoneypotAlarmEventsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_honeypot_alarm_events_with_options_async(
        self,
        request: sas_20181203_models.ListHoneypotAlarmEventsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListHoneypotAlarmEventsResponse:
        """
        @summary Queries the information about alert events that are generated.
        
        @param request: ListHoneypotAlarmEventsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListHoneypotAlarmEventsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListHoneypotAlarmEvents',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListHoneypotAlarmEventsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_honeypot_alarm_events(
        self,
        request: sas_20181203_models.ListHoneypotAlarmEventsRequest,
    ) -> sas_20181203_models.ListHoneypotAlarmEventsResponse:
        """
        @summary Queries the information about alert events that are generated.
        
        @param request: ListHoneypotAlarmEventsRequest
        @return: ListHoneypotAlarmEventsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_honeypot_alarm_events_with_options(request, runtime)

    async def list_honeypot_alarm_events_async(
        self,
        request: sas_20181203_models.ListHoneypotAlarmEventsRequest,
    ) -> sas_20181203_models.ListHoneypotAlarmEventsResponse:
        """
        @summary Queries the information about alert events that are generated.
        
        @param request: ListHoneypotAlarmEventsRequest
        @return: ListHoneypotAlarmEventsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_honeypot_alarm_events_with_options_async(request, runtime)

    def list_honeypot_attacker_portrait_with_options(
        self,
        request: sas_20181203_models.ListHoneypotAttackerPortraitRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListHoneypotAttackerPortraitResponse:
        """
        @summary Queries the attacker profile based on the source IP address of the attack.
        
        @param request: ListHoneypotAttackerPortraitRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListHoneypotAttackerPortraitResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.end_time_stamp):
            query['EndTimeStamp'] = request.end_time_stamp
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.src_ip):
            query['SrcIp'] = request.src_ip
        if not UtilClient.is_unset(request.start_time_stamp):
            query['StartTimeStamp'] = request.start_time_stamp
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListHoneypotAttackerPortrait',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListHoneypotAttackerPortraitResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_honeypot_attacker_portrait_with_options_async(
        self,
        request: sas_20181203_models.ListHoneypotAttackerPortraitRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListHoneypotAttackerPortraitResponse:
        """
        @summary Queries the attacker profile based on the source IP address of the attack.
        
        @param request: ListHoneypotAttackerPortraitRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListHoneypotAttackerPortraitResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.end_time_stamp):
            query['EndTimeStamp'] = request.end_time_stamp
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.src_ip):
            query['SrcIp'] = request.src_ip
        if not UtilClient.is_unset(request.start_time_stamp):
            query['StartTimeStamp'] = request.start_time_stamp
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListHoneypotAttackerPortrait',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListHoneypotAttackerPortraitResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_honeypot_attacker_portrait(
        self,
        request: sas_20181203_models.ListHoneypotAttackerPortraitRequest,
    ) -> sas_20181203_models.ListHoneypotAttackerPortraitResponse:
        """
        @summary Queries the attacker profile based on the source IP address of the attack.
        
        @param request: ListHoneypotAttackerPortraitRequest
        @return: ListHoneypotAttackerPortraitResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_honeypot_attacker_portrait_with_options(request, runtime)

    async def list_honeypot_attacker_portrait_async(
        self,
        request: sas_20181203_models.ListHoneypotAttackerPortraitRequest,
    ) -> sas_20181203_models.ListHoneypotAttackerPortraitResponse:
        """
        @summary Queries the attacker profile based on the source IP address of the attack.
        
        @param request: ListHoneypotAttackerPortraitRequest
        @return: ListHoneypotAttackerPortraitResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_honeypot_attacker_portrait_with_options_async(request, runtime)

    def list_honeypot_attacker_source_with_options(
        self,
        request: sas_20181203_models.ListHoneypotAttackerSourceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListHoneypotAttackerSourceResponse:
        """
        @summary Queries the attack source IP addresses that are used to attack a honeypot.
        
        @param request: ListHoneypotAttackerSourceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListHoneypotAttackerSourceResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.end_time_stamp):
            query['EndTimeStamp'] = request.end_time_stamp
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.risk_level_list):
            query['RiskLevelList'] = request.risk_level_list
        if not UtilClient.is_unset(request.src_ip):
            query['SrcIp'] = request.src_ip
        if not UtilClient.is_unset(request.start_time_stamp):
            query['StartTimeStamp'] = request.start_time_stamp
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListHoneypotAttackerSource',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListHoneypotAttackerSourceResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_honeypot_attacker_source_with_options_async(
        self,
        request: sas_20181203_models.ListHoneypotAttackerSourceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListHoneypotAttackerSourceResponse:
        """
        @summary Queries the attack source IP addresses that are used to attack a honeypot.
        
        @param request: ListHoneypotAttackerSourceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListHoneypotAttackerSourceResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.end_time_stamp):
            query['EndTimeStamp'] = request.end_time_stamp
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.risk_level_list):
            query['RiskLevelList'] = request.risk_level_list
        if not UtilClient.is_unset(request.src_ip):
            query['SrcIp'] = request.src_ip
        if not UtilClient.is_unset(request.start_time_stamp):
            query['StartTimeStamp'] = request.start_time_stamp
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListHoneypotAttackerSource',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListHoneypotAttackerSourceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_honeypot_attacker_source(
        self,
        request: sas_20181203_models.ListHoneypotAttackerSourceRequest,
    ) -> sas_20181203_models.ListHoneypotAttackerSourceResponse:
        """
        @summary Queries the attack source IP addresses that are used to attack a honeypot.
        
        @param request: ListHoneypotAttackerSourceRequest
        @return: ListHoneypotAttackerSourceResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_honeypot_attacker_source_with_options(request, runtime)

    async def list_honeypot_attacker_source_async(
        self,
        request: sas_20181203_models.ListHoneypotAttackerSourceRequest,
    ) -> sas_20181203_models.ListHoneypotAttackerSourceResponse:
        """
        @summary Queries the attack source IP addresses that are used to attack a honeypot.
        
        @param request: ListHoneypotAttackerSourceRequest
        @return: ListHoneypotAttackerSourceResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_honeypot_attacker_source_with_options_async(request, runtime)

    def list_honeypot_event_flows_with_options(
        self,
        request: sas_20181203_models.ListHoneypotEventFlowsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListHoneypotEventFlowsResponse:
        """
        @summary Queries the details of an intrusion event in a honeypot.
        
        @param request: ListHoneypotEventFlowsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListHoneypotEventFlowsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.dealed):
            query['Dealed'] = request.dealed
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.request_id):
            query['RequestId'] = request.request_id
        if not UtilClient.is_unset(request.security_event_id):
            query['SecurityEventId'] = request.security_event_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListHoneypotEventFlows',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListHoneypotEventFlowsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_honeypot_event_flows_with_options_async(
        self,
        request: sas_20181203_models.ListHoneypotEventFlowsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListHoneypotEventFlowsResponse:
        """
        @summary Queries the details of an intrusion event in a honeypot.
        
        @param request: ListHoneypotEventFlowsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListHoneypotEventFlowsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.dealed):
            query['Dealed'] = request.dealed
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.request_id):
            query['RequestId'] = request.request_id
        if not UtilClient.is_unset(request.security_event_id):
            query['SecurityEventId'] = request.security_event_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListHoneypotEventFlows',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListHoneypotEventFlowsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_honeypot_event_flows(
        self,
        request: sas_20181203_models.ListHoneypotEventFlowsRequest,
    ) -> sas_20181203_models.ListHoneypotEventFlowsResponse:
        """
        @summary Queries the details of an intrusion event in a honeypot.
        
        @param request: ListHoneypotEventFlowsRequest
        @return: ListHoneypotEventFlowsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_honeypot_event_flows_with_options(request, runtime)

    async def list_honeypot_event_flows_async(
        self,
        request: sas_20181203_models.ListHoneypotEventFlowsRequest,
    ) -> sas_20181203_models.ListHoneypotEventFlowsResponse:
        """
        @summary Queries the details of an intrusion event in a honeypot.
        
        @param request: ListHoneypotEventFlowsRequest
        @return: ListHoneypotEventFlowsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_honeypot_event_flows_with_options_async(request, runtime)

    def list_honeypot_events_with_options(
        self,
        request: sas_20181203_models.ListHoneypotEventsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListHoneypotEventsResponse:
        """
        @summary Queries the intrusion events detected by honeypots.
        
        @param request: ListHoneypotEventsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListHoneypotEventsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListHoneypotEvents',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListHoneypotEventsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_honeypot_events_with_options_async(
        self,
        request: sas_20181203_models.ListHoneypotEventsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListHoneypotEventsResponse:
        """
        @summary Queries the intrusion events detected by honeypots.
        
        @param request: ListHoneypotEventsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListHoneypotEventsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListHoneypotEvents',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListHoneypotEventsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_honeypot_events(
        self,
        request: sas_20181203_models.ListHoneypotEventsRequest,
    ) -> sas_20181203_models.ListHoneypotEventsResponse:
        """
        @summary Queries the intrusion events detected by honeypots.
        
        @param request: ListHoneypotEventsRequest
        @return: ListHoneypotEventsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_honeypot_events_with_options(request, runtime)

    async def list_honeypot_events_async(
        self,
        request: sas_20181203_models.ListHoneypotEventsRequest,
    ) -> sas_20181203_models.ListHoneypotEventsResponse:
        """
        @summary Queries the intrusion events detected by honeypots.
        
        @param request: ListHoneypotEventsRequest
        @return: ListHoneypotEventsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_honeypot_events_with_options_async(request, runtime)

    def list_honeypot_node_with_options(
        self,
        request: sas_20181203_models.ListHoneypotNodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListHoneypotNodeResponse:
        """
        @summary Queries the information about management nodes.
        
        @param request: ListHoneypotNodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListHoneypotNodeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.node_id):
            query['NodeId'] = request.node_id
        if not UtilClient.is_unset(request.node_name):
            query['NodeName'] = request.node_name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListHoneypotNode',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListHoneypotNodeResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_honeypot_node_with_options_async(
        self,
        request: sas_20181203_models.ListHoneypotNodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListHoneypotNodeResponse:
        """
        @summary Queries the information about management nodes.
        
        @param request: ListHoneypotNodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListHoneypotNodeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.node_id):
            query['NodeId'] = request.node_id
        if not UtilClient.is_unset(request.node_name):
            query['NodeName'] = request.node_name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListHoneypotNode',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListHoneypotNodeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_honeypot_node(
        self,
        request: sas_20181203_models.ListHoneypotNodeRequest,
    ) -> sas_20181203_models.ListHoneypotNodeResponse:
        """
        @summary Queries the information about management nodes.
        
        @param request: ListHoneypotNodeRequest
        @return: ListHoneypotNodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_honeypot_node_with_options(request, runtime)

    async def list_honeypot_node_async(
        self,
        request: sas_20181203_models.ListHoneypotNodeRequest,
    ) -> sas_20181203_models.ListHoneypotNodeResponse:
        """
        @summary Queries the information about management nodes.
        
        @param request: ListHoneypotNodeRequest
        @return: ListHoneypotNodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_honeypot_node_with_options_async(request, runtime)

    def list_honeypot_preset_with_options(
        self,
        request: sas_20181203_models.ListHoneypotPresetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListHoneypotPresetResponse:
        """
        @summary Queries honeypot templates.
        
        @param request: ListHoneypotPresetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListHoneypotPresetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.honeypot_image_name):
            query['HoneypotImageName'] = request.honeypot_image_name
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.node_id):
            query['NodeId'] = request.node_id
        if not UtilClient.is_unset(request.node_name):
            query['NodeName'] = request.node_name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.preset_name):
            query['PresetName'] = request.preset_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListHoneypotPreset',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListHoneypotPresetResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_honeypot_preset_with_options_async(
        self,
        request: sas_20181203_models.ListHoneypotPresetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListHoneypotPresetResponse:
        """
        @summary Queries honeypot templates.
        
        @param request: ListHoneypotPresetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListHoneypotPresetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.honeypot_image_name):
            query['HoneypotImageName'] = request.honeypot_image_name
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.node_id):
            query['NodeId'] = request.node_id
        if not UtilClient.is_unset(request.node_name):
            query['NodeName'] = request.node_name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.preset_name):
            query['PresetName'] = request.preset_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListHoneypotPreset',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListHoneypotPresetResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_honeypot_preset(
        self,
        request: sas_20181203_models.ListHoneypotPresetRequest,
    ) -> sas_20181203_models.ListHoneypotPresetResponse:
        """
        @summary Queries honeypot templates.
        
        @param request: ListHoneypotPresetRequest
        @return: ListHoneypotPresetResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_honeypot_preset_with_options(request, runtime)

    async def list_honeypot_preset_async(
        self,
        request: sas_20181203_models.ListHoneypotPresetRequest,
    ) -> sas_20181203_models.ListHoneypotPresetResponse:
        """
        @summary Queries honeypot templates.
        
        @param request: ListHoneypotPresetRequest
        @return: ListHoneypotPresetResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_honeypot_preset_with_options_async(request, runtime)

    def list_honeypot_probe_with_options(
        self,
        request: sas_20181203_models.ListHoneypotProbeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListHoneypotProbeResponse:
        """
        @summary Queries probes.
        
        @param request: ListHoneypotProbeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListHoneypotProbeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.display_name):
            query['DisplayName'] = request.display_name
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.probe_status):
            query['ProbeStatus'] = request.probe_status
        if not UtilClient.is_unset(request.probe_type):
            query['ProbeType'] = request.probe_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListHoneypotProbe',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListHoneypotProbeResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_honeypot_probe_with_options_async(
        self,
        request: sas_20181203_models.ListHoneypotProbeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListHoneypotProbeResponse:
        """
        @summary Queries probes.
        
        @param request: ListHoneypotProbeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListHoneypotProbeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.display_name):
            query['DisplayName'] = request.display_name
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.probe_status):
            query['ProbeStatus'] = request.probe_status
        if not UtilClient.is_unset(request.probe_type):
            query['ProbeType'] = request.probe_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListHoneypotProbe',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListHoneypotProbeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_honeypot_probe(
        self,
        request: sas_20181203_models.ListHoneypotProbeRequest,
    ) -> sas_20181203_models.ListHoneypotProbeResponse:
        """
        @summary Queries probes.
        
        @param request: ListHoneypotProbeRequest
        @return: ListHoneypotProbeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_honeypot_probe_with_options(request, runtime)

    async def list_honeypot_probe_async(
        self,
        request: sas_20181203_models.ListHoneypotProbeRequest,
    ) -> sas_20181203_models.ListHoneypotProbeResponse:
        """
        @summary Queries probes.
        
        @param request: ListHoneypotProbeRequest
        @return: ListHoneypotProbeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_honeypot_probe_with_options_async(request, runtime)

    def list_honeypot_probe_uuid_with_options(
        self,
        request: sas_20181203_models.ListHoneypotProbeUuidRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListHoneypotProbeUuidResponse:
        """
        @summary 查询已安装的探针
        
        @param request: ListHoneypotProbeUuidRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListHoneypotProbeUuidResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.control_node_id):
            query['ControlNodeId'] = request.control_node_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.probe_type):
            query['ProbeType'] = request.probe_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListHoneypotProbeUuid',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListHoneypotProbeUuidResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_honeypot_probe_uuid_with_options_async(
        self,
        request: sas_20181203_models.ListHoneypotProbeUuidRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListHoneypotProbeUuidResponse:
        """
        @summary 查询已安装的探针
        
        @param request: ListHoneypotProbeUuidRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListHoneypotProbeUuidResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.control_node_id):
            query['ControlNodeId'] = request.control_node_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.probe_type):
            query['ProbeType'] = request.probe_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListHoneypotProbeUuid',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListHoneypotProbeUuidResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_honeypot_probe_uuid(
        self,
        request: sas_20181203_models.ListHoneypotProbeUuidRequest,
    ) -> sas_20181203_models.ListHoneypotProbeUuidResponse:
        """
        @summary 查询已安装的探针
        
        @param request: ListHoneypotProbeUuidRequest
        @return: ListHoneypotProbeUuidResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_honeypot_probe_uuid_with_options(request, runtime)

    async def list_honeypot_probe_uuid_async(
        self,
        request: sas_20181203_models.ListHoneypotProbeUuidRequest,
    ) -> sas_20181203_models.ListHoneypotProbeUuidResponse:
        """
        @summary 查询已安装的探针
        
        @param request: ListHoneypotProbeUuidRequest
        @return: ListHoneypotProbeUuidResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_honeypot_probe_uuid_with_options_async(request, runtime)

    def list_image_build_risk_item_with_options(
        self,
        request: sas_20181203_models.ListImageBuildRiskItemRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListImageBuildRiskItemResponse:
        """
        @summary Queries the types of risky image build commands.
        
        @param request: ListImageBuildRiskItemRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListImageBuildRiskItemResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListImageBuildRiskItem',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListImageBuildRiskItemResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_image_build_risk_item_with_options_async(
        self,
        request: sas_20181203_models.ListImageBuildRiskItemRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListImageBuildRiskItemResponse:
        """
        @summary Queries the types of risky image build commands.
        
        @param request: ListImageBuildRiskItemRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListImageBuildRiskItemResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListImageBuildRiskItem',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListImageBuildRiskItemResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_image_build_risk_item(
        self,
        request: sas_20181203_models.ListImageBuildRiskItemRequest,
    ) -> sas_20181203_models.ListImageBuildRiskItemResponse:
        """
        @summary Queries the types of risky image build commands.
        
        @param request: ListImageBuildRiskItemRequest
        @return: ListImageBuildRiskItemResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_image_build_risk_item_with_options(request, runtime)

    async def list_image_build_risk_item_async(
        self,
        request: sas_20181203_models.ListImageBuildRiskItemRequest,
    ) -> sas_20181203_models.ListImageBuildRiskItemResponse:
        """
        @summary Queries the types of risky image build commands.
        
        @param request: ListImageBuildRiskItemRequest
        @return: ListImageBuildRiskItemResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_image_build_risk_item_with_options_async(request, runtime)

    def list_image_registry_extra_with_options(
        self,
        request: sas_20181203_models.ListImageRegistryExtraRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListImageRegistryExtraResponse:
        """
        @summary Query Image Registry Extended Information.
        
        @param request: ListImageRegistryExtraRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListImageRegistryExtraResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.registry_id):
            query['RegistryId'] = request.registry_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListImageRegistryExtra',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListImageRegistryExtraResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_image_registry_extra_with_options_async(
        self,
        request: sas_20181203_models.ListImageRegistryExtraRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListImageRegistryExtraResponse:
        """
        @summary Query Image Registry Extended Information.
        
        @param request: ListImageRegistryExtraRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListImageRegistryExtraResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.registry_id):
            query['RegistryId'] = request.registry_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListImageRegistryExtra',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListImageRegistryExtraResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_image_registry_extra(
        self,
        request: sas_20181203_models.ListImageRegistryExtraRequest,
    ) -> sas_20181203_models.ListImageRegistryExtraResponse:
        """
        @summary Query Image Registry Extended Information.
        
        @param request: ListImageRegistryExtraRequest
        @return: ListImageRegistryExtraResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_image_registry_extra_with_options(request, runtime)

    async def list_image_registry_extra_async(
        self,
        request: sas_20181203_models.ListImageRegistryExtraRequest,
    ) -> sas_20181203_models.ListImageRegistryExtraResponse:
        """
        @summary Query Image Registry Extended Information.
        
        @param request: ListImageRegistryExtraRequest
        @return: ListImageRegistryExtraResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_image_registry_extra_with_options_async(request, runtime)

    def list_image_registry_region_with_options(
        self,
        request: sas_20181203_models.ListImageRegistryRegionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListImageRegistryRegionResponse:
        """
        @summary The region ID of the image.
        
        @param request: ListImageRegistryRegionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListImageRegistryRegionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListImageRegistryRegion',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListImageRegistryRegionResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_image_registry_region_with_options_async(
        self,
        request: sas_20181203_models.ListImageRegistryRegionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListImageRegistryRegionResponse:
        """
        @summary The region ID of the image.
        
        @param request: ListImageRegistryRegionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListImageRegistryRegionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListImageRegistryRegion',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListImageRegistryRegionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_image_registry_region(
        self,
        request: sas_20181203_models.ListImageRegistryRegionRequest,
    ) -> sas_20181203_models.ListImageRegistryRegionResponse:
        """
        @summary The region ID of the image.
        
        @param request: ListImageRegistryRegionRequest
        @return: ListImageRegistryRegionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_image_registry_region_with_options(request, runtime)

    async def list_image_registry_region_async(
        self,
        request: sas_20181203_models.ListImageRegistryRegionRequest,
    ) -> sas_20181203_models.ListImageRegistryRegionResponse:
        """
        @summary The region ID of the image.
        
        @param request: ListImageRegistryRegionRequest
        @return: ListImageRegistryRegionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_image_registry_region_with_options_async(request, runtime)

    def list_image_risk_with_options(
        self,
        request: sas_20181203_models.ListImageRiskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListImageRiskResponse:
        """
        @summary Queries security information about a container image.
        
        @param request: ListImageRiskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListImageRiskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_name):
            query['AppName'] = request.app_name
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.image_name):
            query['ImageName'] = request.image_name
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListImageRisk',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListImageRiskResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_image_risk_with_options_async(
        self,
        request: sas_20181203_models.ListImageRiskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListImageRiskResponse:
        """
        @summary Queries security information about a container image.
        
        @param request: ListImageRiskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListImageRiskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_name):
            query['AppName'] = request.app_name
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.image_name):
            query['ImageName'] = request.image_name
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListImageRisk',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListImageRiskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_image_risk(
        self,
        request: sas_20181203_models.ListImageRiskRequest,
    ) -> sas_20181203_models.ListImageRiskResponse:
        """
        @summary Queries security information about a container image.
        
        @param request: ListImageRiskRequest
        @return: ListImageRiskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_image_risk_with_options(request, runtime)

    async def list_image_risk_async(
        self,
        request: sas_20181203_models.ListImageRiskRequest,
    ) -> sas_20181203_models.ListImageRiskResponse:
        """
        @summary Queries security information about a container image.
        
        @param request: ListImageRiskRequest
        @return: ListImageRiskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_image_risk_with_options_async(request, runtime)

    def list_instance_catalog_with_options(
        self,
        request: sas_20181203_models.ListInstanceCatalogRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListInstanceCatalogResponse:
        """
        @summary Queries the asset types and asset subtypes for configuration assessment.
        
        @param request: ListInstanceCatalogRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListInstanceCatalogResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.only_custom):
            query['OnlyCustom'] = request.only_custom
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        if not UtilClient.is_unset(request.requirement_ids):
            query['RequirementIds'] = request.requirement_ids
        if not UtilClient.is_unset(request.standard_ids):
            query['StandardIds'] = request.standard_ids
        if not UtilClient.is_unset(request.task_sources):
            query['TaskSources'] = request.task_sources
        if not UtilClient.is_unset(request.types):
            query['Types'] = request.types
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListInstanceCatalog',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListInstanceCatalogResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_instance_catalog_with_options_async(
        self,
        request: sas_20181203_models.ListInstanceCatalogRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListInstanceCatalogResponse:
        """
        @summary Queries the asset types and asset subtypes for configuration assessment.
        
        @param request: ListInstanceCatalogRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListInstanceCatalogResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.only_custom):
            query['OnlyCustom'] = request.only_custom
        if not UtilClient.is_unset(request.region_id):
            query['RegionId'] = request.region_id
        if not UtilClient.is_unset(request.requirement_ids):
            query['RequirementIds'] = request.requirement_ids
        if not UtilClient.is_unset(request.standard_ids):
            query['StandardIds'] = request.standard_ids
        if not UtilClient.is_unset(request.task_sources):
            query['TaskSources'] = request.task_sources
        if not UtilClient.is_unset(request.types):
            query['Types'] = request.types
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListInstanceCatalog',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListInstanceCatalogResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_instance_catalog(
        self,
        request: sas_20181203_models.ListInstanceCatalogRequest,
    ) -> sas_20181203_models.ListInstanceCatalogResponse:
        """
        @summary Queries the asset types and asset subtypes for configuration assessment.
        
        @param request: ListInstanceCatalogRequest
        @return: ListInstanceCatalogResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_instance_catalog_with_options(request, runtime)

    async def list_instance_catalog_async(
        self,
        request: sas_20181203_models.ListInstanceCatalogRequest,
    ) -> sas_20181203_models.ListInstanceCatalogResponse:
        """
        @summary Queries the asset types and asset subtypes for configuration assessment.
        
        @param request: ListInstanceCatalogRequest
        @return: ListInstanceCatalogResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_instance_catalog_with_options_async(request, runtime)

    def list_instance_risk_levels_with_options(
        self,
        request: sas_20181203_models.ListInstanceRiskLevelsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListInstanceRiskLevelsResponse:
        """
        @summary Queries the risk levels of instances.
        
        @param request: ListInstanceRiskLevelsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListInstanceRiskLevelsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.instance_list):
            query['InstanceList'] = request.instance_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListInstanceRiskLevels',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListInstanceRiskLevelsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_instance_risk_levels_with_options_async(
        self,
        request: sas_20181203_models.ListInstanceRiskLevelsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListInstanceRiskLevelsResponse:
        """
        @summary Queries the risk levels of instances.
        
        @param request: ListInstanceRiskLevelsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListInstanceRiskLevelsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.instance_list):
            query['InstanceList'] = request.instance_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListInstanceRiskLevels',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListInstanceRiskLevelsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_instance_risk_levels(
        self,
        request: sas_20181203_models.ListInstanceRiskLevelsRequest,
    ) -> sas_20181203_models.ListInstanceRiskLevelsResponse:
        """
        @summary Queries the risk levels of instances.
        
        @param request: ListInstanceRiskLevelsRequest
        @return: ListInstanceRiskLevelsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_instance_risk_levels_with_options(request, runtime)

    async def list_instance_risk_levels_async(
        self,
        request: sas_20181203_models.ListInstanceRiskLevelsRequest,
    ) -> sas_20181203_models.ListInstanceRiskLevelsResponse:
        """
        @summary Queries the risk levels of instances.
        
        @param request: ListInstanceRiskLevelsRequest
        @return: ListInstanceRiskLevelsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_instance_risk_levels_with_options_async(request, runtime)

    def list_instance_risk_num_with_options(
        self,
        request: sas_20181203_models.ListInstanceRiskNumRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListInstanceRiskNumResponse:
        """
        @summary Queries the statistics about risks in instances.
        
        @param request: ListInstanceRiskNumRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListInstanceRiskNumResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.instance_list):
            query['InstanceList'] = request.instance_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListInstanceRiskNum',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListInstanceRiskNumResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_instance_risk_num_with_options_async(
        self,
        request: sas_20181203_models.ListInstanceRiskNumRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListInstanceRiskNumResponse:
        """
        @summary Queries the statistics about risks in instances.
        
        @param request: ListInstanceRiskNumRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListInstanceRiskNumResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.instance_list):
            query['InstanceList'] = request.instance_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListInstanceRiskNum',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListInstanceRiskNumResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_instance_risk_num(
        self,
        request: sas_20181203_models.ListInstanceRiskNumRequest,
    ) -> sas_20181203_models.ListInstanceRiskNumResponse:
        """
        @summary Queries the statistics about risks in instances.
        
        @param request: ListInstanceRiskNumRequest
        @return: ListInstanceRiskNumResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_instance_risk_num_with_options(request, runtime)

    async def list_instance_risk_num_async(
        self,
        request: sas_20181203_models.ListInstanceRiskNumRequest,
    ) -> sas_20181203_models.ListInstanceRiskNumResponse:
        """
        @summary Queries the statistics about risks in instances.
        
        @param request: ListInstanceRiskNumRequest
        @return: ListInstanceRiskNumResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_instance_risk_num_with_options_async(request, runtime)

    def list_interception_history_with_options(
        self,
        request: sas_20181203_models.ListInterceptionHistoryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListInterceptionHistoryResponse:
        """
        @summary Queries the alerts generated by defense rules.
        
        @param request: ListInterceptionHistoryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListInterceptionHistoryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.history_name):
            query['HistoryName'] = request.history_name
        if not UtilClient.is_unset(request.interception_types):
            query['InterceptionTypes'] = request.interception_types
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListInterceptionHistory',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListInterceptionHistoryResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_interception_history_with_options_async(
        self,
        request: sas_20181203_models.ListInterceptionHistoryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListInterceptionHistoryResponse:
        """
        @summary Queries the alerts generated by defense rules.
        
        @param request: ListInterceptionHistoryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListInterceptionHistoryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.history_name):
            query['HistoryName'] = request.history_name
        if not UtilClient.is_unset(request.interception_types):
            query['InterceptionTypes'] = request.interception_types
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListInterceptionHistory',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListInterceptionHistoryResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_interception_history(
        self,
        request: sas_20181203_models.ListInterceptionHistoryRequest,
    ) -> sas_20181203_models.ListInterceptionHistoryResponse:
        """
        @summary Queries the alerts generated by defense rules.
        
        @param request: ListInterceptionHistoryRequest
        @return: ListInterceptionHistoryResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_interception_history_with_options(request, runtime)

    async def list_interception_history_async(
        self,
        request: sas_20181203_models.ListInterceptionHistoryRequest,
    ) -> sas_20181203_models.ListInterceptionHistoryResponse:
        """
        @summary Queries the alerts generated by defense rules.
        
        @param request: ListInterceptionHistoryRequest
        @return: ListInterceptionHistoryResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_interception_history_with_options_async(request, runtime)

    def list_interception_rule_page_with_options(
        self,
        request: sas_20181203_models.ListInterceptionRulePageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListInterceptionRulePageResponse:
        """
        @summary Queries defense rules that are configured for the container firewall feature.
        
        @param request: ListInterceptionRulePageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListInterceptionRulePageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.criteria):
            query['Criteria'] = request.criteria
        if not UtilClient.is_unset(request.criteria_type):
            query['CriteriaType'] = request.criteria_type
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListInterceptionRulePage',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListInterceptionRulePageResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_interception_rule_page_with_options_async(
        self,
        request: sas_20181203_models.ListInterceptionRulePageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListInterceptionRulePageResponse:
        """
        @summary Queries defense rules that are configured for the container firewall feature.
        
        @param request: ListInterceptionRulePageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListInterceptionRulePageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.criteria):
            query['Criteria'] = request.criteria
        if not UtilClient.is_unset(request.criteria_type):
            query['CriteriaType'] = request.criteria_type
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListInterceptionRulePage',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListInterceptionRulePageResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_interception_rule_page(
        self,
        request: sas_20181203_models.ListInterceptionRulePageRequest,
    ) -> sas_20181203_models.ListInterceptionRulePageResponse:
        """
        @summary Queries defense rules that are configured for the container firewall feature.
        
        @param request: ListInterceptionRulePageRequest
        @return: ListInterceptionRulePageResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_interception_rule_page_with_options(request, runtime)

    async def list_interception_rule_page_async(
        self,
        request: sas_20181203_models.ListInterceptionRulePageRequest,
    ) -> sas_20181203_models.ListInterceptionRulePageResponse:
        """
        @summary Queries defense rules that are configured for the container firewall feature.
        
        @param request: ListInterceptionRulePageRequest
        @return: ListInterceptionRulePageResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_interception_rule_page_with_options_async(request, runtime)

    def list_interception_target_page_with_options(
        self,
        request: sas_20181203_models.ListInterceptionTargetPageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListInterceptionTargetPageResponse:
        """
        @summary Queries the network objects that are protected by the container firewall feature.
        
        @param request: ListInterceptionTargetPageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListInterceptionTargetPageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_name):
            query['AppName'] = request.app_name
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.image_list):
            query['ImageList'] = request.image_list
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.tag_list):
            query['TagList'] = request.tag_list
        if not UtilClient.is_unset(request.target_name):
            query['TargetName'] = request.target_name
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListInterceptionTargetPage',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListInterceptionTargetPageResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_interception_target_page_with_options_async(
        self,
        request: sas_20181203_models.ListInterceptionTargetPageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListInterceptionTargetPageResponse:
        """
        @summary Queries the network objects that are protected by the container firewall feature.
        
        @param request: ListInterceptionTargetPageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListInterceptionTargetPageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_name):
            query['AppName'] = request.app_name
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.image_list):
            query['ImageList'] = request.image_list
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.tag_list):
            query['TagList'] = request.tag_list
        if not UtilClient.is_unset(request.target_name):
            query['TargetName'] = request.target_name
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListInterceptionTargetPage',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListInterceptionTargetPageResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_interception_target_page(
        self,
        request: sas_20181203_models.ListInterceptionTargetPageRequest,
    ) -> sas_20181203_models.ListInterceptionTargetPageResponse:
        """
        @summary Queries the network objects that are protected by the container firewall feature.
        
        @param request: ListInterceptionTargetPageRequest
        @return: ListInterceptionTargetPageResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_interception_target_page_with_options(request, runtime)

    async def list_interception_target_page_async(
        self,
        request: sas_20181203_models.ListInterceptionTargetPageRequest,
    ) -> sas_20181203_models.ListInterceptionTargetPageResponse:
        """
        @summary Queries the network objects that are protected by the container firewall feature.
        
        @param request: ListInterceptionTargetPageRequest
        @return: ListInterceptionTargetPageResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_interception_target_page_with_options_async(request, runtime)

    def list_k8s_access_info_with_options(
        self,
        request: sas_20181203_models.ListK8sAccessInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListK8sAccessInfoResponse:
        """
        @summary Queries the information about Kubernetes clusters that are added to Security Center.
        
        @description You can use this operation to query the access information about Kubernetes clusters.
        
        @param request: ListK8sAccessInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListK8sAccessInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.aliyun_yundun_gateway_api_name):
            query['AliyunYundunGatewayApiName'] = request.aliyun_yundun_gateway_api_name
        if not UtilClient.is_unset(request.aliyun_yundun_gateway_pop_name):
            query['AliyunYundunGatewayPopName'] = request.aliyun_yundun_gateway_pop_name
        if not UtilClient.is_unset(request.aliyun_yundun_gateway_project_name):
            query['AliyunYundunGatewayProjectName'] = request.aliyun_yundun_gateway_project_name
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListK8sAccessInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListK8sAccessInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_k8s_access_info_with_options_async(
        self,
        request: sas_20181203_models.ListK8sAccessInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListK8sAccessInfoResponse:
        """
        @summary Queries the information about Kubernetes clusters that are added to Security Center.
        
        @description You can use this operation to query the access information about Kubernetes clusters.
        
        @param request: ListK8sAccessInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListK8sAccessInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.aliyun_yundun_gateway_api_name):
            query['AliyunYundunGatewayApiName'] = request.aliyun_yundun_gateway_api_name
        if not UtilClient.is_unset(request.aliyun_yundun_gateway_pop_name):
            query['AliyunYundunGatewayPopName'] = request.aliyun_yundun_gateway_pop_name
        if not UtilClient.is_unset(request.aliyun_yundun_gateway_project_name):
            query['AliyunYundunGatewayProjectName'] = request.aliyun_yundun_gateway_project_name
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListK8sAccessInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListK8sAccessInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_k8s_access_info(
        self,
        request: sas_20181203_models.ListK8sAccessInfoRequest,
    ) -> sas_20181203_models.ListK8sAccessInfoResponse:
        """
        @summary Queries the information about Kubernetes clusters that are added to Security Center.
        
        @description You can use this operation to query the access information about Kubernetes clusters.
        
        @param request: ListK8sAccessInfoRequest
        @return: ListK8sAccessInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_k8s_access_info_with_options(request, runtime)

    async def list_k8s_access_info_async(
        self,
        request: sas_20181203_models.ListK8sAccessInfoRequest,
    ) -> sas_20181203_models.ListK8sAccessInfoResponse:
        """
        @summary Queries the information about Kubernetes clusters that are added to Security Center.
        
        @description You can use this operation to query the access information about Kubernetes clusters.
        
        @param request: ListK8sAccessInfoRequest
        @return: ListK8sAccessInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_k8s_access_info_with_options_async(request, runtime)

    def list_log_shipper_regions_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListLogShipperRegionsResponse:
        """
        @summary Queries the regions supported by the log delivery feature that uses the pay-as-you-go billing method.
        
        @param request: ListLogShipperRegionsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListLogShipperRegionsResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='ListLogShipperRegions',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListLogShipperRegionsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_log_shipper_regions_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListLogShipperRegionsResponse:
        """
        @summary Queries the regions supported by the log delivery feature that uses the pay-as-you-go billing method.
        
        @param request: ListLogShipperRegionsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListLogShipperRegionsResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='ListLogShipperRegions',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListLogShipperRegionsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_log_shipper_regions(self) -> sas_20181203_models.ListLogShipperRegionsResponse:
        """
        @summary Queries the regions supported by the log delivery feature that uses the pay-as-you-go billing method.
        
        @return: ListLogShipperRegionsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_log_shipper_regions_with_options(runtime)

    async def list_log_shipper_regions_async(self) -> sas_20181203_models.ListLogShipperRegionsResponse:
        """
        @summary Queries the regions supported by the log delivery feature that uses the pay-as-you-go billing method.
        
        @return: ListLogShipperRegionsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_log_shipper_regions_with_options_async(runtime)

    def list_machine_apps_with_options(
        self,
        request: sas_20181203_models.ListMachineAppsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListMachineAppsResponse:
        """
        @summary Paginate to query the application list.
        
        @param request: ListMachineAppsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListMachineAppsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_id):
            query['AppId'] = request.app_id
        if not UtilClient.is_unset(request.app_name):
            query['AppName'] = request.app_name
        if not UtilClient.is_unset(request.app_region_id):
            query['AppRegionId'] = request.app_region_id
        if not UtilClient.is_unset(request.auth_version):
            query['AuthVersion'] = request.auth_version
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.resource_directory_uid):
            query['ResourceDirectoryUid'] = request.resource_directory_uid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListMachineApps',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListMachineAppsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_machine_apps_with_options_async(
        self,
        request: sas_20181203_models.ListMachineAppsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListMachineAppsResponse:
        """
        @summary Paginate to query the application list.
        
        @param request: ListMachineAppsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListMachineAppsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_id):
            query['AppId'] = request.app_id
        if not UtilClient.is_unset(request.app_name):
            query['AppName'] = request.app_name
        if not UtilClient.is_unset(request.app_region_id):
            query['AppRegionId'] = request.app_region_id
        if not UtilClient.is_unset(request.auth_version):
            query['AuthVersion'] = request.auth_version
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.resource_directory_uid):
            query['ResourceDirectoryUid'] = request.resource_directory_uid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListMachineApps',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListMachineAppsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_machine_apps(
        self,
        request: sas_20181203_models.ListMachineAppsRequest,
    ) -> sas_20181203_models.ListMachineAppsResponse:
        """
        @summary Paginate to query the application list.
        
        @param request: ListMachineAppsRequest
        @return: ListMachineAppsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_machine_apps_with_options(request, runtime)

    async def list_machine_apps_async(
        self,
        request: sas_20181203_models.ListMachineAppsRequest,
    ) -> sas_20181203_models.ListMachineAppsResponse:
        """
        @summary Paginate to query the application list.
        
        @param request: ListMachineAppsRequest
        @return: ListMachineAppsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_machine_apps_with_options_async(request, runtime)

    def list_malicious_file_whitelist_configs_with_options(
        self,
        request: sas_20181203_models.ListMaliciousFileWhitelistConfigsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListMaliciousFileWhitelistConfigsResponse:
        """
        @summary Queries the alert whitelist rules of sensitive files that are detected by using the agentless detection feature.
        
        @param request: ListMaliciousFileWhitelistConfigsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListMaliciousFileWhitelistConfigsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.event_name):
            query['EventName'] = request.event_name
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListMaliciousFileWhitelistConfigs',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListMaliciousFileWhitelistConfigsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_malicious_file_whitelist_configs_with_options_async(
        self,
        request: sas_20181203_models.ListMaliciousFileWhitelistConfigsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListMaliciousFileWhitelistConfigsResponse:
        """
        @summary Queries the alert whitelist rules of sensitive files that are detected by using the agentless detection feature.
        
        @param request: ListMaliciousFileWhitelistConfigsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListMaliciousFileWhitelistConfigsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.event_name):
            query['EventName'] = request.event_name
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListMaliciousFileWhitelistConfigs',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListMaliciousFileWhitelistConfigsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_malicious_file_whitelist_configs(
        self,
        request: sas_20181203_models.ListMaliciousFileWhitelistConfigsRequest,
    ) -> sas_20181203_models.ListMaliciousFileWhitelistConfigsResponse:
        """
        @summary Queries the alert whitelist rules of sensitive files that are detected by using the agentless detection feature.
        
        @param request: ListMaliciousFileWhitelistConfigsRequest
        @return: ListMaliciousFileWhitelistConfigsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_malicious_file_whitelist_configs_with_options(request, runtime)

    async def list_malicious_file_whitelist_configs_async(
        self,
        request: sas_20181203_models.ListMaliciousFileWhitelistConfigsRequest,
    ) -> sas_20181203_models.ListMaliciousFileWhitelistConfigsResponse:
        """
        @summary Queries the alert whitelist rules of sensitive files that are detected by using the agentless detection feature.
        
        @param request: ListMaliciousFileWhitelistConfigsRequest
        @return: ListMaliciousFileWhitelistConfigsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_malicious_file_whitelist_configs_with_options_async(request, runtime)

    def list_object_scan_event_with_options(
        self,
        request: sas_20181203_models.ListObjectScanEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListObjectScanEventResponse:
        """
        @summary Queries alerts that are generated for malicious files.
        
        @param request: ListObjectScanEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListObjectScanEventResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.bucket_name):
            query['BucketName'] = request.bucket_name
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.event_name):
            query['EventName'] = request.event_name
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.md_5):
            query['Md5'] = request.md_5
        if not UtilClient.is_unset(request.oss_key):
            query['OssKey'] = request.oss_key
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.parent_event_id):
            query['ParentEventId'] = request.parent_event_id
        if not UtilClient.is_unset(request.risk_level):
            query['RiskLevel'] = request.risk_level
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.time_end):
            query['TimeEnd'] = request.time_end
        if not UtilClient.is_unset(request.time_start):
            query['TimeStart'] = request.time_start
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListObjectScanEvent',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListObjectScanEventResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_object_scan_event_with_options_async(
        self,
        request: sas_20181203_models.ListObjectScanEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListObjectScanEventResponse:
        """
        @summary Queries alerts that are generated for malicious files.
        
        @param request: ListObjectScanEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListObjectScanEventResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.bucket_name):
            query['BucketName'] = request.bucket_name
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.event_name):
            query['EventName'] = request.event_name
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.md_5):
            query['Md5'] = request.md_5
        if not UtilClient.is_unset(request.oss_key):
            query['OssKey'] = request.oss_key
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.parent_event_id):
            query['ParentEventId'] = request.parent_event_id
        if not UtilClient.is_unset(request.risk_level):
            query['RiskLevel'] = request.risk_level
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.time_end):
            query['TimeEnd'] = request.time_end
        if not UtilClient.is_unset(request.time_start):
            query['TimeStart'] = request.time_start
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListObjectScanEvent',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListObjectScanEventResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_object_scan_event(
        self,
        request: sas_20181203_models.ListObjectScanEventRequest,
    ) -> sas_20181203_models.ListObjectScanEventResponse:
        """
        @summary Queries alerts that are generated for malicious files.
        
        @param request: ListObjectScanEventRequest
        @return: ListObjectScanEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_object_scan_event_with_options(request, runtime)

    async def list_object_scan_event_async(
        self,
        request: sas_20181203_models.ListObjectScanEventRequest,
    ) -> sas_20181203_models.ListObjectScanEventResponse:
        """
        @summary Queries alerts that are generated for malicious files.
        
        @param request: ListObjectScanEventRequest
        @return: ListObjectScanEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_object_scan_event_with_options_async(request, runtime)

    def list_opa_cluster_strategy_new_with_options(
        self,
        request: sas_20181203_models.ListOpaClusterStrategyNewRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListOpaClusterStrategyNewResponse:
        """
        @summary Queries at-risk image blocking rules.
        
        @param request: ListOpaClusterStrategyNewRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListOpaClusterStrategyNewResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.image_name):
            query['ImageName'] = request.image_name
        if not UtilClient.is_unset(request.label):
            query['Label'] = request.label
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.strategy_name):
            query['StrategyName'] = request.strategy_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListOpaClusterStrategyNew',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListOpaClusterStrategyNewResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_opa_cluster_strategy_new_with_options_async(
        self,
        request: sas_20181203_models.ListOpaClusterStrategyNewRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListOpaClusterStrategyNewResponse:
        """
        @summary Queries at-risk image blocking rules.
        
        @param request: ListOpaClusterStrategyNewRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListOpaClusterStrategyNewResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.image_name):
            query['ImageName'] = request.image_name
        if not UtilClient.is_unset(request.label):
            query['Label'] = request.label
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.strategy_name):
            query['StrategyName'] = request.strategy_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListOpaClusterStrategyNew',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListOpaClusterStrategyNewResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_opa_cluster_strategy_new(
        self,
        request: sas_20181203_models.ListOpaClusterStrategyNewRequest,
    ) -> sas_20181203_models.ListOpaClusterStrategyNewResponse:
        """
        @summary Queries at-risk image blocking rules.
        
        @param request: ListOpaClusterStrategyNewRequest
        @return: ListOpaClusterStrategyNewResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_opa_cluster_strategy_new_with_options(request, runtime)

    async def list_opa_cluster_strategy_new_async(
        self,
        request: sas_20181203_models.ListOpaClusterStrategyNewRequest,
    ) -> sas_20181203_models.ListOpaClusterStrategyNewResponse:
        """
        @summary Queries at-risk image blocking rules.
        
        @param request: ListOpaClusterStrategyNewRequest
        @return: ListOpaClusterStrategyNewResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_opa_cluster_strategy_new_with_options_async(request, runtime)

    def list_operation_check_with_options(
        self,
        request: sas_20181203_models.ListOperationCheckRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListOperationCheckResponse:
        """
        @summary Query the list of instance results under the operation check item
        
        @description This interface is only available to users who have purchased the cloud platform configuration check authorization or enabled the pay-as-you-go service for cloud platform configuration checks.
        
        @param request: ListOperationCheckRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListOperationCheckResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListOperationCheck',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListOperationCheckResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_operation_check_with_options_async(
        self,
        request: sas_20181203_models.ListOperationCheckRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListOperationCheckResponse:
        """
        @summary Query the list of instance results under the operation check item
        
        @description This interface is only available to users who have purchased the cloud platform configuration check authorization or enabled the pay-as-you-go service for cloud platform configuration checks.
        
        @param request: ListOperationCheckRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListOperationCheckResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListOperationCheck',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListOperationCheckResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_operation_check(
        self,
        request: sas_20181203_models.ListOperationCheckRequest,
    ) -> sas_20181203_models.ListOperationCheckResponse:
        """
        @summary Query the list of instance results under the operation check item
        
        @description This interface is only available to users who have purchased the cloud platform configuration check authorization or enabled the pay-as-you-go service for cloud platform configuration checks.
        
        @param request: ListOperationCheckRequest
        @return: ListOperationCheckResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_operation_check_with_options(request, runtime)

    async def list_operation_check_async(
        self,
        request: sas_20181203_models.ListOperationCheckRequest,
    ) -> sas_20181203_models.ListOperationCheckResponse:
        """
        @summary Query the list of instance results under the operation check item
        
        @description This interface is only available to users who have purchased the cloud platform configuration check authorization or enabled the pay-as-you-go service for cloud platform configuration checks.
        
        @param request: ListOperationCheckRequest
        @return: ListOperationCheckResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_operation_check_with_options_async(request, runtime)

    def list_operation_process_with_options(
        self,
        request: sas_20181203_models.ListOperationProcessRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListOperationProcessResponse:
        """
        @summary Queries a list of operation tasks.
        
        @description You can query only operation tasks.
        
        @param request: ListOperationProcessRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListOperationProcessResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.status_codes):
            query['StatusCodes'] = request.status_codes
        if not UtilClient.is_unset(request.task_ids):
            query['TaskIds'] = request.task_ids
        if not UtilClient.is_unset(request.task_sources):
            query['TaskSources'] = request.task_sources
        if not UtilClient.is_unset(request.task_types):
            query['TaskTypes'] = request.task_types
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListOperationProcess',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListOperationProcessResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_operation_process_with_options_async(
        self,
        request: sas_20181203_models.ListOperationProcessRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListOperationProcessResponse:
        """
        @summary Queries a list of operation tasks.
        
        @description You can query only operation tasks.
        
        @param request: ListOperationProcessRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListOperationProcessResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.status_codes):
            query['StatusCodes'] = request.status_codes
        if not UtilClient.is_unset(request.task_ids):
            query['TaskIds'] = request.task_ids
        if not UtilClient.is_unset(request.task_sources):
            query['TaskSources'] = request.task_sources
        if not UtilClient.is_unset(request.task_types):
            query['TaskTypes'] = request.task_types
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListOperationProcess',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListOperationProcessResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_operation_process(
        self,
        request: sas_20181203_models.ListOperationProcessRequest,
    ) -> sas_20181203_models.ListOperationProcessResponse:
        """
        @summary Queries a list of operation tasks.
        
        @description You can query only operation tasks.
        
        @param request: ListOperationProcessRequest
        @return: ListOperationProcessResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_operation_process_with_options(request, runtime)

    async def list_operation_process_async(
        self,
        request: sas_20181203_models.ListOperationProcessRequest,
    ) -> sas_20181203_models.ListOperationProcessResponse:
        """
        @summary Queries a list of operation tasks.
        
        @description You can query only operation tasks.
        
        @param request: ListOperationProcessRequest
        @return: ListOperationProcessResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_operation_process_with_options_async(request, runtime)

    def list_operation_process_detail_with_options(
        self,
        request: sas_20181203_models.ListOperationProcessDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListOperationProcessDetailResponse:
        """
        @summary Query operation task sub-task list.
        
        @description You can query only operation subtasks.
        
        @param request: ListOperationProcessDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListOperationProcessDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.status_codes):
            query['StatusCodes'] = request.status_codes
        if not UtilClient.is_unset(request.task_ids):
            query['TaskIds'] = request.task_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListOperationProcessDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListOperationProcessDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_operation_process_detail_with_options_async(
        self,
        request: sas_20181203_models.ListOperationProcessDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListOperationProcessDetailResponse:
        """
        @summary Query operation task sub-task list.
        
        @description You can query only operation subtasks.
        
        @param request: ListOperationProcessDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListOperationProcessDetailResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.status_codes):
            query['StatusCodes'] = request.status_codes
        if not UtilClient.is_unset(request.task_ids):
            query['TaskIds'] = request.task_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListOperationProcessDetail',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListOperationProcessDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_operation_process_detail(
        self,
        request: sas_20181203_models.ListOperationProcessDetailRequest,
    ) -> sas_20181203_models.ListOperationProcessDetailResponse:
        """
        @summary Query operation task sub-task list.
        
        @description You can query only operation subtasks.
        
        @param request: ListOperationProcessDetailRequest
        @return: ListOperationProcessDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_operation_process_detail_with_options(request, runtime)

    async def list_operation_process_detail_async(
        self,
        request: sas_20181203_models.ListOperationProcessDetailRequest,
    ) -> sas_20181203_models.ListOperationProcessDetailResponse:
        """
        @summary Query operation task sub-task list.
        
        @description You can query only operation subtasks.
        
        @param request: ListOperationProcessDetailRequest
        @return: ListOperationProcessDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_operation_process_detail_with_options_async(request, runtime)

    def list_operation_task_with_options(
        self,
        request: sas_20181203_models.ListOperationTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListOperationTaskResponse:
        """
        @summary Display the list of cloud product configuration check, repair, and rollback tasks
        
        @param request: ListOperationTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListOperationTaskResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListOperationTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListOperationTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_operation_task_with_options_async(
        self,
        request: sas_20181203_models.ListOperationTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListOperationTaskResponse:
        """
        @summary Display the list of cloud product configuration check, repair, and rollback tasks
        
        @param request: ListOperationTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListOperationTaskResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListOperationTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListOperationTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_operation_task(
        self,
        request: sas_20181203_models.ListOperationTaskRequest,
    ) -> sas_20181203_models.ListOperationTaskResponse:
        """
        @summary Display the list of cloud product configuration check, repair, and rollback tasks
        
        @param request: ListOperationTaskRequest
        @return: ListOperationTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_operation_task_with_options(request, runtime)

    async def list_operation_task_async(
        self,
        request: sas_20181203_models.ListOperationTaskRequest,
    ) -> sas_20181203_models.ListOperationTaskResponse:
        """
        @summary Display the list of cloud product configuration check, repair, and rollback tasks
        
        @param request: ListOperationTaskRequest
        @return: ListOperationTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_operation_task_with_options_async(request, runtime)

    def list_oss_bucket_with_options(
        self,
        request: sas_20181203_models.ListOssBucketRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListOssBucketResponse:
        """
        @summary Queries Object Storage Service (OSS) buckets.
        
        @param request: ListOssBucketRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListOssBucketResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.bucket_name):
            query['BucketName'] = request.bucket_name
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListOssBucket',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListOssBucketResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_oss_bucket_with_options_async(
        self,
        request: sas_20181203_models.ListOssBucketRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListOssBucketResponse:
        """
        @summary Queries Object Storage Service (OSS) buckets.
        
        @param request: ListOssBucketRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListOssBucketResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.bucket_name):
            query['BucketName'] = request.bucket_name
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListOssBucket',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListOssBucketResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_oss_bucket(
        self,
        request: sas_20181203_models.ListOssBucketRequest,
    ) -> sas_20181203_models.ListOssBucketResponse:
        """
        @summary Queries Object Storage Service (OSS) buckets.
        
        @param request: ListOssBucketRequest
        @return: ListOssBucketResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_oss_bucket_with_options(request, runtime)

    async def list_oss_bucket_async(
        self,
        request: sas_20181203_models.ListOssBucketRequest,
    ) -> sas_20181203_models.ListOssBucketResponse:
        """
        @summary Queries Object Storage Service (OSS) buckets.
        
        @param request: ListOssBucketRequest
        @return: ListOssBucketResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_oss_bucket_with_options_async(request, runtime)

    def list_oss_bucket_scan_info_with_options(
        self,
        request: sas_20181203_models.ListOssBucketScanInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListOssBucketScanInfoResponse:
        """
        @summary Queries the risk information of an Object Storage Service (OSS) bucket.
        
        @param request: ListOssBucketScanInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListOssBucketScanInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.bucket_name):
            query['BucketName'] = request.bucket_name
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.fuzz_bucket_name):
            query['FuzzBucketName'] = request.fuzz_bucket_name
        if not UtilClient.is_unset(request.has_risk):
            query['HasRisk'] = request.has_risk
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListOssBucketScanInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListOssBucketScanInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_oss_bucket_scan_info_with_options_async(
        self,
        request: sas_20181203_models.ListOssBucketScanInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListOssBucketScanInfoResponse:
        """
        @summary Queries the risk information of an Object Storage Service (OSS) bucket.
        
        @param request: ListOssBucketScanInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListOssBucketScanInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.bucket_name):
            query['BucketName'] = request.bucket_name
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.fuzz_bucket_name):
            query['FuzzBucketName'] = request.fuzz_bucket_name
        if not UtilClient.is_unset(request.has_risk):
            query['HasRisk'] = request.has_risk
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListOssBucketScanInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListOssBucketScanInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_oss_bucket_scan_info(
        self,
        request: sas_20181203_models.ListOssBucketScanInfoRequest,
    ) -> sas_20181203_models.ListOssBucketScanInfoResponse:
        """
        @summary Queries the risk information of an Object Storage Service (OSS) bucket.
        
        @param request: ListOssBucketScanInfoRequest
        @return: ListOssBucketScanInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_oss_bucket_scan_info_with_options(request, runtime)

    async def list_oss_bucket_scan_info_async(
        self,
        request: sas_20181203_models.ListOssBucketScanInfoRequest,
    ) -> sas_20181203_models.ListOssBucketScanInfoResponse:
        """
        @summary Queries the risk information of an Object Storage Service (OSS) bucket.
        
        @param request: ListOssBucketScanInfoRequest
        @return: ListOssBucketScanInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_oss_bucket_scan_info_with_options_async(request, runtime)

    def list_oss_scan_config_with_options(
        self,
        request: sas_20181203_models.ListOssScanConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListOssScanConfigResponse:
        """
        @summary Queries the configuration of an Object Storage Service (OSS) file detection policy.
        
        @param request: ListOssScanConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListOssScanConfigResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListOssScanConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListOssScanConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_oss_scan_config_with_options_async(
        self,
        request: sas_20181203_models.ListOssScanConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListOssScanConfigResponse:
        """
        @summary Queries the configuration of an Object Storage Service (OSS) file detection policy.
        
        @param request: ListOssScanConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListOssScanConfigResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListOssScanConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListOssScanConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_oss_scan_config(
        self,
        request: sas_20181203_models.ListOssScanConfigRequest,
    ) -> sas_20181203_models.ListOssScanConfigResponse:
        """
        @summary Queries the configuration of an Object Storage Service (OSS) file detection policy.
        
        @param request: ListOssScanConfigRequest
        @return: ListOssScanConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_oss_scan_config_with_options(request, runtime)

    async def list_oss_scan_config_async(
        self,
        request: sas_20181203_models.ListOssScanConfigRequest,
    ) -> sas_20181203_models.ListOssScanConfigResponse:
        """
        @summary Queries the configuration of an Object Storage Service (OSS) file detection policy.
        
        @param request: ListOssScanConfigRequest
        @return: ListOssScanConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_oss_scan_config_with_options_async(request, runtime)

    def list_plugin_for_uuid_with_options(
        self,
        tmp_req: sas_20181203_models.ListPluginForUuidRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListPluginForUuidResponse:
        """
        @summary Queries the information about plug-ins on a server.
        
        @param tmp_req: ListPluginForUuidRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListPluginForUuidResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.ListPluginForUuidShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.types):
            request.types_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.types, 'Types', 'simple')
        query = {}
        if not UtilClient.is_unset(request.types_shrink):
            query['Types'] = request.types_shrink
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListPluginForUuid',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListPluginForUuidResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_plugin_for_uuid_with_options_async(
        self,
        tmp_req: sas_20181203_models.ListPluginForUuidRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListPluginForUuidResponse:
        """
        @summary Queries the information about plug-ins on a server.
        
        @param tmp_req: ListPluginForUuidRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListPluginForUuidResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.ListPluginForUuidShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.types):
            request.types_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.types, 'Types', 'simple')
        query = {}
        if not UtilClient.is_unset(request.types_shrink):
            query['Types'] = request.types_shrink
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListPluginForUuid',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListPluginForUuidResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_plugin_for_uuid(
        self,
        request: sas_20181203_models.ListPluginForUuidRequest,
    ) -> sas_20181203_models.ListPluginForUuidResponse:
        """
        @summary Queries the information about plug-ins on a server.
        
        @param request: ListPluginForUuidRequest
        @return: ListPluginForUuidResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_plugin_for_uuid_with_options(request, runtime)

    async def list_plugin_for_uuid_async(
        self,
        request: sas_20181203_models.ListPluginForUuidRequest,
    ) -> sas_20181203_models.ListPluginForUuidResponse:
        """
        @summary Queries the information about plug-ins on a server.
        
        @param request: ListPluginForUuidRequest
        @return: ListPluginForUuidResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_plugin_for_uuid_with_options_async(request, runtime)

    def list_pod_risk_with_options(
        self,
        request: sas_20181203_models.ListPodRiskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListPodRiskResponse:
        """
        @summary Queries the security risks of a pod.
        
        @param request: ListPodRiskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListPodRiskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_name):
            query['AppName'] = request.app_name
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.pod_name):
            query['PodName'] = request.pod_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListPodRisk',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListPodRiskResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_pod_risk_with_options_async(
        self,
        request: sas_20181203_models.ListPodRiskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListPodRiskResponse:
        """
        @summary Queries the security risks of a pod.
        
        @param request: ListPodRiskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListPodRiskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_name):
            query['AppName'] = request.app_name
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.pod_name):
            query['PodName'] = request.pod_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListPodRisk',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListPodRiskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_pod_risk(
        self,
        request: sas_20181203_models.ListPodRiskRequest,
    ) -> sas_20181203_models.ListPodRiskResponse:
        """
        @summary Queries the security risks of a pod.
        
        @param request: ListPodRiskRequest
        @return: ListPodRiskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_pod_risk_with_options(request, runtime)

    async def list_pod_risk_async(
        self,
        request: sas_20181203_models.ListPodRiskRequest,
    ) -> sas_20181203_models.ListPodRiskResponse:
        """
        @summary Queries the security risks of a pod.
        
        @param request: ListPodRiskRequest
        @return: ListPodRiskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_pod_risk_with_options_async(request, runtime)

    def list_private_k8s_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListPrivateK8sResponse:
        """
        @summary Queries the information about the self-managed Kubernetes clusters that are added to Security Center.
        
        @param request: ListPrivateK8sRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListPrivateK8sResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='ListPrivateK8s',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListPrivateK8sResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_private_k8s_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListPrivateK8sResponse:
        """
        @summary Queries the information about the self-managed Kubernetes clusters that are added to Security Center.
        
        @param request: ListPrivateK8sRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListPrivateK8sResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='ListPrivateK8s',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListPrivateK8sResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_private_k8s(self) -> sas_20181203_models.ListPrivateK8sResponse:
        """
        @summary Queries the information about the self-managed Kubernetes clusters that are added to Security Center.
        
        @return: ListPrivateK8sResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_private_k8s_with_options(runtime)

    async def list_private_k8s_async(self) -> sas_20181203_models.ListPrivateK8sResponse:
        """
        @summary Queries the information about the self-managed Kubernetes clusters that are added to Security Center.
        
        @return: ListPrivateK8sResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_private_k8s_with_options_async(runtime)

    def list_private_registry_list_with_options(
        self,
        request: sas_20181203_models.ListPrivateRegistryListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListPrivateRegistryListResponse:
        """
        @summary Queries image repositories.
        
        @param request: ListPrivateRegistryListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListPrivateRegistryListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.registry_type):
            query['RegistryType'] = request.registry_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListPrivateRegistryList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListPrivateRegistryListResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_private_registry_list_with_options_async(
        self,
        request: sas_20181203_models.ListPrivateRegistryListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListPrivateRegistryListResponse:
        """
        @summary Queries image repositories.
        
        @param request: ListPrivateRegistryListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListPrivateRegistryListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.registry_type):
            query['RegistryType'] = request.registry_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListPrivateRegistryList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListPrivateRegistryListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_private_registry_list(
        self,
        request: sas_20181203_models.ListPrivateRegistryListRequest,
    ) -> sas_20181203_models.ListPrivateRegistryListResponse:
        """
        @summary Queries image repositories.
        
        @param request: ListPrivateRegistryListRequest
        @return: ListPrivateRegistryListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_private_registry_list_with_options(request, runtime)

    async def list_private_registry_list_async(
        self,
        request: sas_20181203_models.ListPrivateRegistryListRequest,
    ) -> sas_20181203_models.ListPrivateRegistryListResponse:
        """
        @summary Queries image repositories.
        
        @param request: ListPrivateRegistryListRequest
        @return: ListPrivateRegistryListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_private_registry_list_with_options_async(request, runtime)

    def list_private_registry_type_with_options(
        self,
        request: sas_20181203_models.ListPrivateRegistryTypeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListPrivateRegistryTypeResponse:
        """
        @summary Queries the number of image repositories of each type.
        
        @param request: ListPrivateRegistryTypeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListPrivateRegistryTypeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListPrivateRegistryType',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListPrivateRegistryTypeResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_private_registry_type_with_options_async(
        self,
        request: sas_20181203_models.ListPrivateRegistryTypeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListPrivateRegistryTypeResponse:
        """
        @summary Queries the number of image repositories of each type.
        
        @param request: ListPrivateRegistryTypeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListPrivateRegistryTypeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListPrivateRegistryType',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListPrivateRegistryTypeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_private_registry_type(
        self,
        request: sas_20181203_models.ListPrivateRegistryTypeRequest,
    ) -> sas_20181203_models.ListPrivateRegistryTypeResponse:
        """
        @summary Queries the number of image repositories of each type.
        
        @param request: ListPrivateRegistryTypeRequest
        @return: ListPrivateRegistryTypeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_private_registry_type_with_options(request, runtime)

    async def list_private_registry_type_async(
        self,
        request: sas_20181203_models.ListPrivateRegistryTypeRequest,
    ) -> sas_20181203_models.ListPrivateRegistryTypeResponse:
        """
        @summary Queries the number of image repositories of each type.
        
        @param request: ListPrivateRegistryTypeRequest
        @return: ListPrivateRegistryTypeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_private_registry_type_with_options_async(request, runtime)

    def list_publish_batch_with_options(
        self,
        request: sas_20181203_models.ListPublishBatchRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListPublishBatchResponse:
        """
        @summary Query the details of a release batch for upgrade.
        
        @param request: ListPublishBatchRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListPublishBatchResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.batch_name):
            query['BatchName'] = request.batch_name
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.upgrade_version):
            query['UpgradeVersion'] = request.upgrade_version
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListPublishBatch',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListPublishBatchResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_publish_batch_with_options_async(
        self,
        request: sas_20181203_models.ListPublishBatchRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListPublishBatchResponse:
        """
        @summary Query the details of a release batch for upgrade.
        
        @param request: ListPublishBatchRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListPublishBatchResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.batch_name):
            query['BatchName'] = request.batch_name
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.upgrade_version):
            query['UpgradeVersion'] = request.upgrade_version
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListPublishBatch',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListPublishBatchResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_publish_batch(
        self,
        request: sas_20181203_models.ListPublishBatchRequest,
    ) -> sas_20181203_models.ListPublishBatchResponse:
        """
        @summary Query the details of a release batch for upgrade.
        
        @param request: ListPublishBatchRequest
        @return: ListPublishBatchResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_publish_batch_with_options(request, runtime)

    async def list_publish_batch_async(
        self,
        request: sas_20181203_models.ListPublishBatchRequest,
    ) -> sas_20181203_models.ListPublishBatchResponse:
        """
        @summary Query the details of a release batch for upgrade.
        
        @param request: ListPublishBatchRequest
        @return: ListPublishBatchResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_publish_batch_with_options_async(request, runtime)

    def list_rd_default_sync_list_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListRdDefaultSyncListResponse:
        """
        @summary Queries the automatic management policies of members that are added to Security Center for multi-account management. The members in the automatic control management directory are automatically added to the member list of Security Center.
        
        @description You must use the management account of your resource directory or a delegated administrator account of Security Center to call this operation.
        
        @param request: ListRdDefaultSyncListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListRdDefaultSyncListResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='ListRdDefaultSyncList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListRdDefaultSyncListResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_rd_default_sync_list_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListRdDefaultSyncListResponse:
        """
        @summary Queries the automatic management policies of members that are added to Security Center for multi-account management. The members in the automatic control management directory are automatically added to the member list of Security Center.
        
        @description You must use the management account of your resource directory or a delegated administrator account of Security Center to call this operation.
        
        @param request: ListRdDefaultSyncListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListRdDefaultSyncListResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='ListRdDefaultSyncList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListRdDefaultSyncListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_rd_default_sync_list(self) -> sas_20181203_models.ListRdDefaultSyncListResponse:
        """
        @summary Queries the automatic management policies of members that are added to Security Center for multi-account management. The members in the automatic control management directory are automatically added to the member list of Security Center.
        
        @description You must use the management account of your resource directory or a delegated administrator account of Security Center to call this operation.
        
        @return: ListRdDefaultSyncListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_rd_default_sync_list_with_options(runtime)

    async def list_rd_default_sync_list_async(self) -> sas_20181203_models.ListRdDefaultSyncListResponse:
        """
        @summary Queries the automatic management policies of members that are added to Security Center for multi-account management. The members in the automatic control management directory are automatically added to the member list of Security Center.
        
        @description You must use the management account of your resource directory or a delegated administrator account of Security Center to call this operation.
        
        @return: ListRdDefaultSyncListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_rd_default_sync_list_with_options_async(runtime)

    def list_rule_target_all_with_options(
        self,
        request: sas_20181203_models.ListRuleTargetAllRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListRuleTargetAllResponse:
        """
        @summary Queries the network objects based on which a specified cluster is protected.
        
        @param request: ListRuleTargetAllRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListRuleTargetAllResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListRuleTargetAll',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListRuleTargetAllResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_rule_target_all_with_options_async(
        self,
        request: sas_20181203_models.ListRuleTargetAllRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListRuleTargetAllResponse:
        """
        @summary Queries the network objects based on which a specified cluster is protected.
        
        @param request: ListRuleTargetAllRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListRuleTargetAllResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListRuleTargetAll',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListRuleTargetAllResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_rule_target_all(
        self,
        request: sas_20181203_models.ListRuleTargetAllRequest,
    ) -> sas_20181203_models.ListRuleTargetAllResponse:
        """
        @summary Queries the network objects based on which a specified cluster is protected.
        
        @param request: ListRuleTargetAllRequest
        @return: ListRuleTargetAllResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_rule_target_all_with_options(request, runtime)

    async def list_rule_target_all_async(
        self,
        request: sas_20181203_models.ListRuleTargetAllRequest,
    ) -> sas_20181203_models.ListRuleTargetAllResponse:
        """
        @summary Queries the network objects based on which a specified cluster is protected.
        
        @param request: ListRuleTargetAllRequest
        @return: ListRuleTargetAllResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_rule_target_all_with_options_async(request, runtime)

    def list_sas_container_web_defense_rule_with_options(
        self,
        request: sas_20181203_models.ListSasContainerWebDefenseRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListSasContainerWebDefenseRuleResponse:
        """
        @summary Queries rules for container tamper-proofing.
        
        @param request: ListSasContainerWebDefenseRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListSasContainerWebDefenseRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.criteria):
            query['Criteria'] = request.criteria
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.logical_exp):
            query['LogicalExp'] = request.logical_exp
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListSasContainerWebDefenseRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListSasContainerWebDefenseRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_sas_container_web_defense_rule_with_options_async(
        self,
        request: sas_20181203_models.ListSasContainerWebDefenseRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListSasContainerWebDefenseRuleResponse:
        """
        @summary Queries rules for container tamper-proofing.
        
        @param request: ListSasContainerWebDefenseRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListSasContainerWebDefenseRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.criteria):
            query['Criteria'] = request.criteria
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.logical_exp):
            query['LogicalExp'] = request.logical_exp
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListSasContainerWebDefenseRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListSasContainerWebDefenseRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_sas_container_web_defense_rule(
        self,
        request: sas_20181203_models.ListSasContainerWebDefenseRuleRequest,
    ) -> sas_20181203_models.ListSasContainerWebDefenseRuleResponse:
        """
        @summary Queries rules for container tamper-proofing.
        
        @param request: ListSasContainerWebDefenseRuleRequest
        @return: ListSasContainerWebDefenseRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_sas_container_web_defense_rule_with_options(request, runtime)

    async def list_sas_container_web_defense_rule_async(
        self,
        request: sas_20181203_models.ListSasContainerWebDefenseRuleRequest,
    ) -> sas_20181203_models.ListSasContainerWebDefenseRuleResponse:
        """
        @summary Queries rules for container tamper-proofing.
        
        @param request: ListSasContainerWebDefenseRuleRequest
        @return: ListSasContainerWebDefenseRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_sas_container_web_defense_rule_with_options_async(request, runtime)

    def list_support_attack_path_asset_with_options(
        self,
        request: sas_20181203_models.ListSupportAttackPathAssetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListSupportAttackPathAssetResponse:
        """
        @summary Query the list of supported cloud products for attacks.
        
        @param request: ListSupportAttackPathAssetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListSupportAttackPathAssetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.node_type):
            query['NodeType'] = request.node_type
        if not UtilClient.is_unset(request.path_name):
            query['PathName'] = request.path_name
        if not UtilClient.is_unset(request.path_type):
            query['PathType'] = request.path_type
        if not UtilClient.is_unset(request.support_type):
            query['SupportType'] = request.support_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListSupportAttackPathAsset',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListSupportAttackPathAssetResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_support_attack_path_asset_with_options_async(
        self,
        request: sas_20181203_models.ListSupportAttackPathAssetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListSupportAttackPathAssetResponse:
        """
        @summary Query the list of supported cloud products for attacks.
        
        @param request: ListSupportAttackPathAssetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListSupportAttackPathAssetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.node_type):
            query['NodeType'] = request.node_type
        if not UtilClient.is_unset(request.path_name):
            query['PathName'] = request.path_name
        if not UtilClient.is_unset(request.path_type):
            query['PathType'] = request.path_type
        if not UtilClient.is_unset(request.support_type):
            query['SupportType'] = request.support_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListSupportAttackPathAsset',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListSupportAttackPathAssetResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_support_attack_path_asset(
        self,
        request: sas_20181203_models.ListSupportAttackPathAssetRequest,
    ) -> sas_20181203_models.ListSupportAttackPathAssetResponse:
        """
        @summary Query the list of supported cloud products for attacks.
        
        @param request: ListSupportAttackPathAssetRequest
        @return: ListSupportAttackPathAssetResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_support_attack_path_asset_with_options(request, runtime)

    async def list_support_attack_path_asset_async(
        self,
        request: sas_20181203_models.ListSupportAttackPathAssetRequest,
    ) -> sas_20181203_models.ListSupportAttackPathAssetResponse:
        """
        @summary Query the list of supported cloud products for attacks.
        
        @param request: ListSupportAttackPathAssetRequest
        @return: ListSupportAttackPathAssetResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_support_attack_path_asset_with_options_async(request, runtime)

    def list_support_object_suffix_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListSupportObjectSuffixResponse:
        """
        @summary Queries supported file suffixes.
        
        @param request: ListSupportObjectSuffixRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListSupportObjectSuffixResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='ListSupportObjectSuffix',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListSupportObjectSuffixResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_support_object_suffix_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListSupportObjectSuffixResponse:
        """
        @summary Queries supported file suffixes.
        
        @param request: ListSupportObjectSuffixRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListSupportObjectSuffixResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='ListSupportObjectSuffix',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListSupportObjectSuffixResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_support_object_suffix(self) -> sas_20181203_models.ListSupportObjectSuffixResponse:
        """
        @summary Queries supported file suffixes.
        
        @return: ListSupportObjectSuffixResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_support_object_suffix_with_options(runtime)

    async def list_support_object_suffix_async(self) -> sas_20181203_models.ListSupportObjectSuffixResponse:
        """
        @summary Queries supported file suffixes.
        
        @return: ListSupportObjectSuffixResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_support_object_suffix_with_options_async(runtime)

    def list_system_aggregation_rules_with_options(
        self,
        request: sas_20181203_models.ListSystemAggregationRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListSystemAggregationRulesResponse:
        """
        @summary Queries the details about the aggregation types of system defense rules.
        
        @param request: ListSystemAggregationRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListSystemAggregationRulesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListSystemAggregationRules',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListSystemAggregationRulesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_system_aggregation_rules_with_options_async(
        self,
        request: sas_20181203_models.ListSystemAggregationRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListSystemAggregationRulesResponse:
        """
        @summary Queries the details about the aggregation types of system defense rules.
        
        @param request: ListSystemAggregationRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListSystemAggregationRulesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListSystemAggregationRules',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListSystemAggregationRulesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_system_aggregation_rules(
        self,
        request: sas_20181203_models.ListSystemAggregationRulesRequest,
    ) -> sas_20181203_models.ListSystemAggregationRulesResponse:
        """
        @summary Queries the details about the aggregation types of system defense rules.
        
        @param request: ListSystemAggregationRulesRequest
        @return: ListSystemAggregationRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_system_aggregation_rules_with_options(request, runtime)

    async def list_system_aggregation_rules_async(
        self,
        request: sas_20181203_models.ListSystemAggregationRulesRequest,
    ) -> sas_20181203_models.ListSystemAggregationRulesResponse:
        """
        @summary Queries the details about the aggregation types of system defense rules.
        
        @param request: ListSystemAggregationRulesRequest
        @return: ListSystemAggregationRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_system_aggregation_rules_with_options_async(request, runtime)

    def list_system_client_rule_types_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListSystemClientRuleTypesResponse:
        """
        @summary Queries the types of system rules.
        
        @param request: ListSystemClientRuleTypesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListSystemClientRuleTypesResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='ListSystemClientRuleTypes',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListSystemClientRuleTypesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_system_client_rule_types_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListSystemClientRuleTypesResponse:
        """
        @summary Queries the types of system rules.
        
        @param request: ListSystemClientRuleTypesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListSystemClientRuleTypesResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='ListSystemClientRuleTypes',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListSystemClientRuleTypesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_system_client_rule_types(self) -> sas_20181203_models.ListSystemClientRuleTypesResponse:
        """
        @summary Queries the types of system rules.
        
        @return: ListSystemClientRuleTypesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_system_client_rule_types_with_options(runtime)

    async def list_system_client_rule_types_async(self) -> sas_20181203_models.ListSystemClientRuleTypesResponse:
        """
        @summary Queries the types of system rules.
        
        @return: ListSystemClientRuleTypesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_system_client_rule_types_with_options_async(runtime)

    def list_system_client_rules_with_options(
        self,
        request: sas_20181203_models.ListSystemClientRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListSystemClientRulesResponse:
        """
        @summary Queries system defense rules.
        
        @param request: ListSystemClientRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListSystemClientRulesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.aggregation_ids):
            query['AggregationIds'] = request.aggregation_ids
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.is_container):
            query['IsContainer'] = request.is_container
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.rule_types):
            query['RuleTypes'] = request.rule_types
        if not UtilClient.is_unset(request.system_type):
            query['SystemType'] = request.system_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListSystemClientRules',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListSystemClientRulesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_system_client_rules_with_options_async(
        self,
        request: sas_20181203_models.ListSystemClientRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListSystemClientRulesResponse:
        """
        @summary Queries system defense rules.
        
        @param request: ListSystemClientRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListSystemClientRulesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.aggregation_ids):
            query['AggregationIds'] = request.aggregation_ids
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.is_container):
            query['IsContainer'] = request.is_container
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.rule_types):
            query['RuleTypes'] = request.rule_types
        if not UtilClient.is_unset(request.system_type):
            query['SystemType'] = request.system_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListSystemClientRules',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListSystemClientRulesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_system_client_rules(
        self,
        request: sas_20181203_models.ListSystemClientRulesRequest,
    ) -> sas_20181203_models.ListSystemClientRulesResponse:
        """
        @summary Queries system defense rules.
        
        @param request: ListSystemClientRulesRequest
        @return: ListSystemClientRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_system_client_rules_with_options(request, runtime)

    async def list_system_client_rules_async(
        self,
        request: sas_20181203_models.ListSystemClientRulesRequest,
    ) -> sas_20181203_models.ListSystemClientRulesResponse:
        """
        @summary Queries system defense rules.
        
        @param request: ListSystemClientRulesRequest
        @return: ListSystemClientRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_system_client_rules_with_options_async(request, runtime)

    def list_system_rule_aggregation_types_with_options(
        self,
        request: sas_20181203_models.ListSystemRuleAggregationTypesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListSystemRuleAggregationTypesResponse:
        """
        @summary Queries the aggregation types of system defense rules.
        
        @param request: ListSystemRuleAggregationTypesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListSystemRuleAggregationTypesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListSystemRuleAggregationTypes',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListSystemRuleAggregationTypesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_system_rule_aggregation_types_with_options_async(
        self,
        request: sas_20181203_models.ListSystemRuleAggregationTypesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListSystemRuleAggregationTypesResponse:
        """
        @summary Queries the aggregation types of system defense rules.
        
        @param request: ListSystemRuleAggregationTypesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListSystemRuleAggregationTypesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListSystemRuleAggregationTypes',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListSystemRuleAggregationTypesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_system_rule_aggregation_types(
        self,
        request: sas_20181203_models.ListSystemRuleAggregationTypesRequest,
    ) -> sas_20181203_models.ListSystemRuleAggregationTypesResponse:
        """
        @summary Queries the aggregation types of system defense rules.
        
        @param request: ListSystemRuleAggregationTypesRequest
        @return: ListSystemRuleAggregationTypesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_system_rule_aggregation_types_with_options(request, runtime)

    async def list_system_rule_aggregation_types_async(
        self,
        request: sas_20181203_models.ListSystemRuleAggregationTypesRequest,
    ) -> sas_20181203_models.ListSystemRuleAggregationTypesResponse:
        """
        @summary Queries the aggregation types of system defense rules.
        
        @param request: ListSystemRuleAggregationTypesRequest
        @return: ListSystemRuleAggregationTypesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_system_rule_aggregation_types_with_options_async(request, runtime)

    def list_target_by_batch_with_options(
        self,
        request: sas_20181203_models.ListTargetByBatchRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListTargetByBatchResponse:
        """
        @summary Query Targets by Batch
        
        @param request: ListTargetByBatchRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListTargetByBatchResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.batch_id):
            query['BatchId'] = request.batch_id
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.operation_base):
            query['OperationBase'] = request.operation_base
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListTargetByBatch',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListTargetByBatchResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_target_by_batch_with_options_async(
        self,
        request: sas_20181203_models.ListTargetByBatchRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListTargetByBatchResponse:
        """
        @summary Query Targets by Batch
        
        @param request: ListTargetByBatchRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListTargetByBatchResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.batch_id):
            query['BatchId'] = request.batch_id
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.operation_base):
            query['OperationBase'] = request.operation_base
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListTargetByBatch',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListTargetByBatchResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_target_by_batch(
        self,
        request: sas_20181203_models.ListTargetByBatchRequest,
    ) -> sas_20181203_models.ListTargetByBatchResponse:
        """
        @summary Query Targets by Batch
        
        @param request: ListTargetByBatchRequest
        @return: ListTargetByBatchResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_target_by_batch_with_options(request, runtime)

    async def list_target_by_batch_async(
        self,
        request: sas_20181203_models.ListTargetByBatchRequest,
    ) -> sas_20181203_models.ListTargetByBatchResponse:
        """
        @summary Query Targets by Batch
        
        @param request: ListTargetByBatchRequest
        @return: ListTargetByBatchResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_target_by_batch_with_options_async(request, runtime)

    def list_unfinished_once_task_with_options(
        self,
        request: sas_20181203_models.ListUnfinishedOnceTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListUnfinishedOnceTaskResponse:
        """
        @summary Queries tasks that are not complete by task type.
        
        @param request: ListUnfinishedOnceTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListUnfinishedOnceTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.target):
            query['Target'] = request.target
        if not UtilClient.is_unset(request.task_type):
            query['TaskType'] = request.task_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListUnfinishedOnceTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListUnfinishedOnceTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_unfinished_once_task_with_options_async(
        self,
        request: sas_20181203_models.ListUnfinishedOnceTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListUnfinishedOnceTaskResponse:
        """
        @summary Queries tasks that are not complete by task type.
        
        @param request: ListUnfinishedOnceTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListUnfinishedOnceTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.target):
            query['Target'] = request.target
        if not UtilClient.is_unset(request.task_type):
            query['TaskType'] = request.task_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListUnfinishedOnceTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListUnfinishedOnceTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_unfinished_once_task(
        self,
        request: sas_20181203_models.ListUnfinishedOnceTaskRequest,
    ) -> sas_20181203_models.ListUnfinishedOnceTaskResponse:
        """
        @summary Queries tasks that are not complete by task type.
        
        @param request: ListUnfinishedOnceTaskRequest
        @return: ListUnfinishedOnceTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_unfinished_once_task_with_options(request, runtime)

    async def list_unfinished_once_task_async(
        self,
        request: sas_20181203_models.ListUnfinishedOnceTaskRequest,
    ) -> sas_20181203_models.ListUnfinishedOnceTaskResponse:
        """
        @summary Queries tasks that are not complete by task type.
        
        @param request: ListUnfinishedOnceTaskRequest
        @return: ListUnfinishedOnceTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_unfinished_once_task_with_options_async(request, runtime)

    def list_uninstall_aegis_machines_with_options(
        self,
        request: sas_20181203_models.ListUninstallAegisMachinesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListUninstallAegisMachinesResponse:
        """
        @summary Queries the information about the servers whose Security Center agent is not installed.
        
        @param request: ListUninstallAegisMachinesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListUninstallAegisMachinesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.os):
            query['Os'] = request.os
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.region_id_str):
            query['RegionIdStr'] = request.region_id_str
        if not UtilClient.is_unset(request.region_no):
            query['RegionNo'] = request.region_no
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.vendor):
            query['Vendor'] = request.vendor
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListUninstallAegisMachines',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListUninstallAegisMachinesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_uninstall_aegis_machines_with_options_async(
        self,
        request: sas_20181203_models.ListUninstallAegisMachinesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListUninstallAegisMachinesResponse:
        """
        @summary Queries the information about the servers whose Security Center agent is not installed.
        
        @param request: ListUninstallAegisMachinesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListUninstallAegisMachinesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.os):
            query['Os'] = request.os
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.region_id_str):
            query['RegionIdStr'] = request.region_id_str
        if not UtilClient.is_unset(request.region_no):
            query['RegionNo'] = request.region_no
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.vendor):
            query['Vendor'] = request.vendor
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListUninstallAegisMachines',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListUninstallAegisMachinesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_uninstall_aegis_machines(
        self,
        request: sas_20181203_models.ListUninstallAegisMachinesRequest,
    ) -> sas_20181203_models.ListUninstallAegisMachinesResponse:
        """
        @summary Queries the information about the servers whose Security Center agent is not installed.
        
        @param request: ListUninstallAegisMachinesRequest
        @return: ListUninstallAegisMachinesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_uninstall_aegis_machines_with_options(request, runtime)

    async def list_uninstall_aegis_machines_async(
        self,
        request: sas_20181203_models.ListUninstallAegisMachinesRequest,
    ) -> sas_20181203_models.ListUninstallAegisMachinesResponse:
        """
        @summary Queries the information about the servers whose Security Center agent is not installed.
        
        @param request: ListUninstallAegisMachinesRequest
        @return: ListUninstallAegisMachinesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_uninstall_aegis_machines_with_options_async(request, runtime)

    def list_user_vpc_with_options(
        self,
        request: sas_20181203_models.ListUserVpcRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListUserVpcResponse:
        """
        @summary Get VPC Data
        
        @param request: ListUserVpcRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListUserVpcResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.k_8s_region_id):
            query['K8sRegionId'] = request.k_8s_region_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListUserVpc',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListUserVpcResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_user_vpc_with_options_async(
        self,
        request: sas_20181203_models.ListUserVpcRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListUserVpcResponse:
        """
        @summary Get VPC Data
        
        @param request: ListUserVpcRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListUserVpcResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.k_8s_region_id):
            query['K8sRegionId'] = request.k_8s_region_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListUserVpc',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListUserVpcResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_user_vpc(
        self,
        request: sas_20181203_models.ListUserVpcRequest,
    ) -> sas_20181203_models.ListUserVpcResponse:
        """
        @summary Get VPC Data
        
        @param request: ListUserVpcRequest
        @return: ListUserVpcResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_user_vpc_with_options(request, runtime)

    async def list_user_vpc_async(
        self,
        request: sas_20181203_models.ListUserVpcRequest,
    ) -> sas_20181203_models.ListUserVpcResponse:
        """
        @summary Get VPC Data
        
        @param request: ListUserVpcRequest
        @return: ListUserVpcResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_user_vpc_with_options_async(request, runtime)

    def list_uuids_by_app_id_with_options(
        self,
        request: sas_20181203_models.ListUuidsByAppIdRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListUuidsByAppIdResponse:
        """
        @summary Query the list of instance UUIDs based on the application ID.
        
        @param request: ListUuidsByAppIdRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListUuidsByAppIdResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_id):
            query['AppId'] = request.app_id
        if not UtilClient.is_unset(request.app_region_id):
            query['AppRegionId'] = request.app_region_id
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.resource_directory_uid):
            query['ResourceDirectoryUid'] = request.resource_directory_uid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListUuidsByAppId',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListUuidsByAppIdResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_uuids_by_app_id_with_options_async(
        self,
        request: sas_20181203_models.ListUuidsByAppIdRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListUuidsByAppIdResponse:
        """
        @summary Query the list of instance UUIDs based on the application ID.
        
        @param request: ListUuidsByAppIdRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListUuidsByAppIdResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_id):
            query['AppId'] = request.app_id
        if not UtilClient.is_unset(request.app_region_id):
            query['AppRegionId'] = request.app_region_id
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.resource_directory_uid):
            query['ResourceDirectoryUid'] = request.resource_directory_uid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListUuidsByAppId',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListUuidsByAppIdResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_uuids_by_app_id(
        self,
        request: sas_20181203_models.ListUuidsByAppIdRequest,
    ) -> sas_20181203_models.ListUuidsByAppIdResponse:
        """
        @summary Query the list of instance UUIDs based on the application ID.
        
        @param request: ListUuidsByAppIdRequest
        @return: ListUuidsByAppIdResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_uuids_by_app_id_with_options(request, runtime)

    async def list_uuids_by_app_id_async(
        self,
        request: sas_20181203_models.ListUuidsByAppIdRequest,
    ) -> sas_20181203_models.ListUuidsByAppIdResponse:
        """
        @summary Query the list of instance UUIDs based on the application ID.
        
        @param request: ListUuidsByAppIdRequest
        @return: ListUuidsByAppIdResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_uuids_by_app_id_with_options_async(request, runtime)

    def list_uuids_by_web_path_with_options(
        self,
        request: sas_20181203_models.ListUuidsByWebPathRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListUuidsByWebPathResponse:
        """
        @summary Queries protected assets by using the paths to specific web directories.
        
        @param request: ListUuidsByWebPathRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListUuidsByWebPathResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.web_path):
            query['WebPath'] = request.web_path
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListUuidsByWebPath',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListUuidsByWebPathResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_uuids_by_web_path_with_options_async(
        self,
        request: sas_20181203_models.ListUuidsByWebPathRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListUuidsByWebPathResponse:
        """
        @summary Queries protected assets by using the paths to specific web directories.
        
        @param request: ListUuidsByWebPathRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListUuidsByWebPathResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.web_path):
            query['WebPath'] = request.web_path
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListUuidsByWebPath',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListUuidsByWebPathResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_uuids_by_web_path(
        self,
        request: sas_20181203_models.ListUuidsByWebPathRequest,
    ) -> sas_20181203_models.ListUuidsByWebPathResponse:
        """
        @summary Queries protected assets by using the paths to specific web directories.
        
        @param request: ListUuidsByWebPathRequest
        @return: ListUuidsByWebPathResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_uuids_by_web_path_with_options(request, runtime)

    async def list_uuids_by_web_path_async(
        self,
        request: sas_20181203_models.ListUuidsByWebPathRequest,
    ) -> sas_20181203_models.ListUuidsByWebPathResponse:
        """
        @summary Queries protected assets by using the paths to specific web directories.
        
        @param request: ListUuidsByWebPathRequest
        @return: ListUuidsByWebPathResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_uuids_by_web_path_with_options_async(request, runtime)

    def list_virus_scan_machine_with_options(
        self,
        request: sas_20181203_models.ListVirusScanMachineRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListVirusScanMachineResponse:
        """
        @summary Queries servers on which virus detection and removal tasks are performed.
        
        @param request: ListVirusScanMachineRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListVirusScanMachineResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListVirusScanMachine',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListVirusScanMachineResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_virus_scan_machine_with_options_async(
        self,
        request: sas_20181203_models.ListVirusScanMachineRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListVirusScanMachineResponse:
        """
        @summary Queries servers on which virus detection and removal tasks are performed.
        
        @param request: ListVirusScanMachineRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListVirusScanMachineResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListVirusScanMachine',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListVirusScanMachineResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_virus_scan_machine(
        self,
        request: sas_20181203_models.ListVirusScanMachineRequest,
    ) -> sas_20181203_models.ListVirusScanMachineResponse:
        """
        @summary Queries servers on which virus detection and removal tasks are performed.
        
        @param request: ListVirusScanMachineRequest
        @return: ListVirusScanMachineResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_virus_scan_machine_with_options(request, runtime)

    async def list_virus_scan_machine_async(
        self,
        request: sas_20181203_models.ListVirusScanMachineRequest,
    ) -> sas_20181203_models.ListVirusScanMachineResponse:
        """
        @summary Queries servers on which virus detection and removal tasks are performed.
        
        @param request: ListVirusScanMachineRequest
        @return: ListVirusScanMachineResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_virus_scan_machine_with_options_async(request, runtime)

    def list_virus_scan_machine_event_with_options(
        self,
        request: sas_20181203_models.ListVirusScanMachineEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListVirusScanMachineEventResponse:
        """
        @summary Queries the alert events that are generated for viruses detected on a server.
        
        @param request: ListVirusScanMachineEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListVirusScanMachineEventResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.operate_task_id):
            query['OperateTaskId'] = request.operate_task_id
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListVirusScanMachineEvent',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListVirusScanMachineEventResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_virus_scan_machine_event_with_options_async(
        self,
        request: sas_20181203_models.ListVirusScanMachineEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListVirusScanMachineEventResponse:
        """
        @summary Queries the alert events that are generated for viruses detected on a server.
        
        @param request: ListVirusScanMachineEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListVirusScanMachineEventResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.operate_task_id):
            query['OperateTaskId'] = request.operate_task_id
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListVirusScanMachineEvent',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListVirusScanMachineEventResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_virus_scan_machine_event(
        self,
        request: sas_20181203_models.ListVirusScanMachineEventRequest,
    ) -> sas_20181203_models.ListVirusScanMachineEventResponse:
        """
        @summary Queries the alert events that are generated for viruses detected on a server.
        
        @param request: ListVirusScanMachineEventRequest
        @return: ListVirusScanMachineEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_virus_scan_machine_event_with_options(request, runtime)

    async def list_virus_scan_machine_event_async(
        self,
        request: sas_20181203_models.ListVirusScanMachineEventRequest,
    ) -> sas_20181203_models.ListVirusScanMachineEventResponse:
        """
        @summary Queries the alert events that are generated for viruses detected on a server.
        
        @param request: ListVirusScanMachineEventRequest
        @return: ListVirusScanMachineEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_virus_scan_machine_event_with_options_async(request, runtime)

    def list_virus_scan_task_with_options(
        self,
        request: sas_20181203_models.ListVirusScanTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListVirusScanTaskResponse:
        """
        @summary Queries virus scan tasks based on conditions such as the task type, task status, and server information.
        
        @param request: ListVirusScanTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListVirusScanTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.internet_ip):
            query['InternetIp'] = request.internet_ip
        if not UtilClient.is_unset(request.intranet_ip):
            query['IntranetIp'] = request.intranet_ip
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.machine_name):
            query['MachineName'] = request.machine_name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.root_task):
            query['RootTask'] = request.root_task
        if not UtilClient.is_unset(request.root_task_id):
            query['RootTaskId'] = request.root_task_id
        if not UtilClient.is_unset(request.scan_type):
            query['ScanType'] = request.scan_type
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        if not UtilClient.is_unset(request.status_list):
            query['StatusList'] = request.status_list
        if not UtilClient.is_unset(request.task_id):
            query['TaskId'] = request.task_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListVirusScanTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListVirusScanTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_virus_scan_task_with_options_async(
        self,
        request: sas_20181203_models.ListVirusScanTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListVirusScanTaskResponse:
        """
        @summary Queries virus scan tasks based on conditions such as the task type, task status, and server information.
        
        @param request: ListVirusScanTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListVirusScanTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.internet_ip):
            query['InternetIp'] = request.internet_ip
        if not UtilClient.is_unset(request.intranet_ip):
            query['IntranetIp'] = request.intranet_ip
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.machine_name):
            query['MachineName'] = request.machine_name
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.root_task):
            query['RootTask'] = request.root_task
        if not UtilClient.is_unset(request.root_task_id):
            query['RootTaskId'] = request.root_task_id
        if not UtilClient.is_unset(request.scan_type):
            query['ScanType'] = request.scan_type
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        if not UtilClient.is_unset(request.status_list):
            query['StatusList'] = request.status_list
        if not UtilClient.is_unset(request.task_id):
            query['TaskId'] = request.task_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListVirusScanTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListVirusScanTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_virus_scan_task(
        self,
        request: sas_20181203_models.ListVirusScanTaskRequest,
    ) -> sas_20181203_models.ListVirusScanTaskResponse:
        """
        @summary Queries virus scan tasks based on conditions such as the task type, task status, and server information.
        
        @param request: ListVirusScanTaskRequest
        @return: ListVirusScanTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_virus_scan_task_with_options(request, runtime)

    async def list_virus_scan_task_async(
        self,
        request: sas_20181203_models.ListVirusScanTaskRequest,
    ) -> sas_20181203_models.ListVirusScanTaskResponse:
        """
        @summary Queries virus scan tasks based on conditions such as the task type, task status, and server information.
        
        @param request: ListVirusScanTaskRequest
        @return: ListVirusScanTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_virus_scan_task_with_options_async(request, runtime)

    def list_vul_auto_repair_config_with_options(
        self,
        request: sas_20181203_models.ListVulAutoRepairConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListVulAutoRepairConfigResponse:
        """
        @summary Queries the existing configurations of vulnerabilities that can be automatically fixed.
        
        @param request: ListVulAutoRepairConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListVulAutoRepairConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.alias_name):
            query['AliasName'] = request.alias_name
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListVulAutoRepairConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListVulAutoRepairConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_vul_auto_repair_config_with_options_async(
        self,
        request: sas_20181203_models.ListVulAutoRepairConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListVulAutoRepairConfigResponse:
        """
        @summary Queries the existing configurations of vulnerabilities that can be automatically fixed.
        
        @param request: ListVulAutoRepairConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListVulAutoRepairConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.alias_name):
            query['AliasName'] = request.alias_name
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListVulAutoRepairConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListVulAutoRepairConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_vul_auto_repair_config(
        self,
        request: sas_20181203_models.ListVulAutoRepairConfigRequest,
    ) -> sas_20181203_models.ListVulAutoRepairConfigResponse:
        """
        @summary Queries the existing configurations of vulnerabilities that can be automatically fixed.
        
        @param request: ListVulAutoRepairConfigRequest
        @return: ListVulAutoRepairConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_vul_auto_repair_config_with_options(request, runtime)

    async def list_vul_auto_repair_config_async(
        self,
        request: sas_20181203_models.ListVulAutoRepairConfigRequest,
    ) -> sas_20181203_models.ListVulAutoRepairConfigResponse:
        """
        @summary Queries the existing configurations of vulnerabilities that can be automatically fixed.
        
        @param request: ListVulAutoRepairConfigRequest
        @return: ListVulAutoRepairConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_vul_auto_repair_config_with_options_async(request, runtime)

    def list_vul_global_config_with_options(
        self,
        request: sas_20181203_models.ListVulGlobalConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListVulGlobalConfigResponse:
        """
        @summary Queries the global configurations of vulnerability detection.
        
        @param request: ListVulGlobalConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListVulGlobalConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_key):
            query['ConfigKey'] = request.config_key
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListVulGlobalConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListVulGlobalConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_vul_global_config_with_options_async(
        self,
        request: sas_20181203_models.ListVulGlobalConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ListVulGlobalConfigResponse:
        """
        @summary Queries the global configurations of vulnerability detection.
        
        @param request: ListVulGlobalConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListVulGlobalConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_key):
            query['ConfigKey'] = request.config_key
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListVulGlobalConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ListVulGlobalConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_vul_global_config(
        self,
        request: sas_20181203_models.ListVulGlobalConfigRequest,
    ) -> sas_20181203_models.ListVulGlobalConfigResponse:
        """
        @summary Queries the global configurations of vulnerability detection.
        
        @param request: ListVulGlobalConfigRequest
        @return: ListVulGlobalConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_vul_global_config_with_options(request, runtime)

    async def list_vul_global_config_async(
        self,
        request: sas_20181203_models.ListVulGlobalConfigRequest,
    ) -> sas_20181203_models.ListVulGlobalConfigResponse:
        """
        @summary Queries the global configurations of vulnerability detection.
        
        @param request: ListVulGlobalConfigRequest
        @return: ListVulGlobalConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_vul_global_config_with_options_async(request, runtime)

    def mark_monitor_accounts_with_options(
        self,
        request: sas_20181203_models.MarkMonitorAccountsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.MarkMonitorAccountsResponse:
        """
        @summary Marks members for multi-account management. You can call this operation to mark selected members as followed. In the Security Center console, the drop-down list above the left-side navigation pane displays the followed members.
        
        @param request: MarkMonitorAccountsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: MarkMonitorAccountsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.account_ids):
            query['AccountIds'] = request.account_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='MarkMonitorAccounts',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.MarkMonitorAccountsResponse(),
            self.call_api(params, req, runtime)
        )

    async def mark_monitor_accounts_with_options_async(
        self,
        request: sas_20181203_models.MarkMonitorAccountsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.MarkMonitorAccountsResponse:
        """
        @summary Marks members for multi-account management. You can call this operation to mark selected members as followed. In the Security Center console, the drop-down list above the left-side navigation pane displays the followed members.
        
        @param request: MarkMonitorAccountsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: MarkMonitorAccountsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.account_ids):
            query['AccountIds'] = request.account_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='MarkMonitorAccounts',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.MarkMonitorAccountsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def mark_monitor_accounts(
        self,
        request: sas_20181203_models.MarkMonitorAccountsRequest,
    ) -> sas_20181203_models.MarkMonitorAccountsResponse:
        """
        @summary Marks members for multi-account management. You can call this operation to mark selected members as followed. In the Security Center console, the drop-down list above the left-side navigation pane displays the followed members.
        
        @param request: MarkMonitorAccountsRequest
        @return: MarkMonitorAccountsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.mark_monitor_accounts_with_options(request, runtime)

    async def mark_monitor_accounts_async(
        self,
        request: sas_20181203_models.MarkMonitorAccountsRequest,
    ) -> sas_20181203_models.MarkMonitorAccountsResponse:
        """
        @summary Marks members for multi-account management. You can call this operation to mark selected members as followed. In the Security Center console, the drop-down list above the left-side navigation pane displays the followed members.
        
        @param request: MarkMonitorAccountsRequest
        @return: MarkMonitorAccountsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.mark_monitor_accounts_with_options_async(request, runtime)

    def modify_access_key_leak_deal_with_options(
        self,
        request: sas_20181203_models.ModifyAccessKeyLeakDealRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyAccessKeyLeakDealResponse:
        """
        @summary Handles AccessKey pair leaks.
        
        @param request: ModifyAccessKeyLeakDealRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyAccessKeyLeakDealResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.id_list):
            query['IdList'] = request.id_list
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyAccessKeyLeakDeal',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyAccessKeyLeakDealResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_access_key_leak_deal_with_options_async(
        self,
        request: sas_20181203_models.ModifyAccessKeyLeakDealRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyAccessKeyLeakDealResponse:
        """
        @summary Handles AccessKey pair leaks.
        
        @param request: ModifyAccessKeyLeakDealRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyAccessKeyLeakDealResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.id_list):
            query['IdList'] = request.id_list
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyAccessKeyLeakDeal',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyAccessKeyLeakDealResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_access_key_leak_deal(
        self,
        request: sas_20181203_models.ModifyAccessKeyLeakDealRequest,
    ) -> sas_20181203_models.ModifyAccessKeyLeakDealResponse:
        """
        @summary Handles AccessKey pair leaks.
        
        @param request: ModifyAccessKeyLeakDealRequest
        @return: ModifyAccessKeyLeakDealResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_access_key_leak_deal_with_options(request, runtime)

    async def modify_access_key_leak_deal_async(
        self,
        request: sas_20181203_models.ModifyAccessKeyLeakDealRequest,
    ) -> sas_20181203_models.ModifyAccessKeyLeakDealResponse:
        """
        @summary Handles AccessKey pair leaks.
        
        @param request: ModifyAccessKeyLeakDealRequest
        @return: ModifyAccessKeyLeakDealResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_access_key_leak_deal_with_options_async(request, runtime)

    def modify_anti_brute_force_rule_with_options(
        self,
        tmp_req: sas_20181203_models.ModifyAntiBruteForceRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyAntiBruteForceRuleResponse:
        """
        @summary Modifies a defense rule against brute-force attacks.
        
        @param tmp_req: ModifyAntiBruteForceRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyAntiBruteForceRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.ModifyAntiBruteForceRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.protocol_type):
            request.protocol_type_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.protocol_type, 'ProtocolType', 'json')
        query = {}
        if not UtilClient.is_unset(request.default_rule):
            query['DefaultRule'] = request.default_rule
        if not UtilClient.is_unset(request.fail_count):
            query['FailCount'] = request.fail_count
        if not UtilClient.is_unset(request.forbidden_time):
            query['ForbiddenTime'] = request.forbidden_time
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.protocol_type_shrink):
            query['ProtocolType'] = request.protocol_type_shrink
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.span):
            query['Span'] = request.span
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyAntiBruteForceRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyAntiBruteForceRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_anti_brute_force_rule_with_options_async(
        self,
        tmp_req: sas_20181203_models.ModifyAntiBruteForceRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyAntiBruteForceRuleResponse:
        """
        @summary Modifies a defense rule against brute-force attacks.
        
        @param tmp_req: ModifyAntiBruteForceRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyAntiBruteForceRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.ModifyAntiBruteForceRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.protocol_type):
            request.protocol_type_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.protocol_type, 'ProtocolType', 'json')
        query = {}
        if not UtilClient.is_unset(request.default_rule):
            query['DefaultRule'] = request.default_rule
        if not UtilClient.is_unset(request.fail_count):
            query['FailCount'] = request.fail_count
        if not UtilClient.is_unset(request.forbidden_time):
            query['ForbiddenTime'] = request.forbidden_time
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.protocol_type_shrink):
            query['ProtocolType'] = request.protocol_type_shrink
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.span):
            query['Span'] = request.span
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyAntiBruteForceRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyAntiBruteForceRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_anti_brute_force_rule(
        self,
        request: sas_20181203_models.ModifyAntiBruteForceRuleRequest,
    ) -> sas_20181203_models.ModifyAntiBruteForceRuleResponse:
        """
        @summary Modifies a defense rule against brute-force attacks.
        
        @param request: ModifyAntiBruteForceRuleRequest
        @return: ModifyAntiBruteForceRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_anti_brute_force_rule_with_options(request, runtime)

    async def modify_anti_brute_force_rule_async(
        self,
        request: sas_20181203_models.ModifyAntiBruteForceRuleRequest,
    ) -> sas_20181203_models.ModifyAntiBruteForceRuleResponse:
        """
        @summary Modifies a defense rule against brute-force attacks.
        
        @param request: ModifyAntiBruteForceRuleRequest
        @return: ModifyAntiBruteForceRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_anti_brute_force_rule_with_options_async(request, runtime)

    def modify_app_vul_scan_cycle_with_options(
        self,
        request: sas_20181203_models.ModifyAppVulScanCycleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyAppVulScanCycleResponse:
        """
        @summary Configures a scan cycle for application vulnerabilities.
        
        @param request: ModifyAppVulScanCycleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyAppVulScanCycleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cycle):
            query['Cycle'] = request.cycle
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyAppVulScanCycle',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyAppVulScanCycleResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_app_vul_scan_cycle_with_options_async(
        self,
        request: sas_20181203_models.ModifyAppVulScanCycleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyAppVulScanCycleResponse:
        """
        @summary Configures a scan cycle for application vulnerabilities.
        
        @param request: ModifyAppVulScanCycleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyAppVulScanCycleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cycle):
            query['Cycle'] = request.cycle
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyAppVulScanCycle',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyAppVulScanCycleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_app_vul_scan_cycle(
        self,
        request: sas_20181203_models.ModifyAppVulScanCycleRequest,
    ) -> sas_20181203_models.ModifyAppVulScanCycleResponse:
        """
        @summary Configures a scan cycle for application vulnerabilities.
        
        @param request: ModifyAppVulScanCycleRequest
        @return: ModifyAppVulScanCycleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_app_vul_scan_cycle_with_options(request, runtime)

    async def modify_app_vul_scan_cycle_async(
        self,
        request: sas_20181203_models.ModifyAppVulScanCycleRequest,
    ) -> sas_20181203_models.ModifyAppVulScanCycleResponse:
        """
        @summary Configures a scan cycle for application vulnerabilities.
        
        @param request: ModifyAppVulScanCycleRequest
        @return: ModifyAppVulScanCycleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_app_vul_scan_cycle_with_options_async(request, runtime)

    def modify_asset_clean_config_with_options(
        self,
        request: sas_20181203_models.ModifyAssetCleanConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyAssetCleanConfigResponse:
        """
        @summary Modifies the configurations for cleaning offline hosts whose provider cannot be identified.
        
        @param request: ModifyAssetCleanConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyAssetCleanConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.asset_clean_configs):
            query['AssetCleanConfigs'] = request.asset_clean_configs
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyAssetCleanConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyAssetCleanConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_asset_clean_config_with_options_async(
        self,
        request: sas_20181203_models.ModifyAssetCleanConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyAssetCleanConfigResponse:
        """
        @summary Modifies the configurations for cleaning offline hosts whose provider cannot be identified.
        
        @param request: ModifyAssetCleanConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyAssetCleanConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.asset_clean_configs):
            query['AssetCleanConfigs'] = request.asset_clean_configs
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyAssetCleanConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyAssetCleanConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_asset_clean_config(
        self,
        request: sas_20181203_models.ModifyAssetCleanConfigRequest,
    ) -> sas_20181203_models.ModifyAssetCleanConfigResponse:
        """
        @summary Modifies the configurations for cleaning offline hosts whose provider cannot be identified.
        
        @param request: ModifyAssetCleanConfigRequest
        @return: ModifyAssetCleanConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_asset_clean_config_with_options(request, runtime)

    async def modify_asset_clean_config_async(
        self,
        request: sas_20181203_models.ModifyAssetCleanConfigRequest,
    ) -> sas_20181203_models.ModifyAssetCleanConfigResponse:
        """
        @summary Modifies the configurations for cleaning offline hosts whose provider cannot be identified.
        
        @param request: ModifyAssetCleanConfigRequest
        @return: ModifyAssetCleanConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_asset_clean_config_with_options_async(request, runtime)

    def modify_asset_group_with_options(
        self,
        request: sas_20181203_models.ModifyAssetGroupRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyAssetGroupResponse:
        """
        @summary Changes the server group to which specified servers belong.
        
        @description You can call the ModifyAssetGroup operation to change the server group to which one or more servers belong. After you create a server group by calling the [CreateOrUpdateAssetGroup](~~CreateOrUpdateAssetGroup~~) operation, you can call the ModifyAssetGroup operation to change the server group to which your servers belong.
        ### Limits
        You can call this API operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
        
        @param request: ModifyAssetGroupRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyAssetGroupResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyAssetGroup',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyAssetGroupResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_asset_group_with_options_async(
        self,
        request: sas_20181203_models.ModifyAssetGroupRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyAssetGroupResponse:
        """
        @summary Changes the server group to which specified servers belong.
        
        @description You can call the ModifyAssetGroup operation to change the server group to which one or more servers belong. After you create a server group by calling the [CreateOrUpdateAssetGroup](~~CreateOrUpdateAssetGroup~~) operation, you can call the ModifyAssetGroup operation to change the server group to which your servers belong.
        ### Limits
        You can call this API operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
        
        @param request: ModifyAssetGroupRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyAssetGroupResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.group_id):
            query['GroupId'] = request.group_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyAssetGroup',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyAssetGroupResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_asset_group(
        self,
        request: sas_20181203_models.ModifyAssetGroupRequest,
    ) -> sas_20181203_models.ModifyAssetGroupResponse:
        """
        @summary Changes the server group to which specified servers belong.
        
        @description You can call the ModifyAssetGroup operation to change the server group to which one or more servers belong. After you create a server group by calling the [CreateOrUpdateAssetGroup](~~CreateOrUpdateAssetGroup~~) operation, you can call the ModifyAssetGroup operation to change the server group to which your servers belong.
        ### Limits
        You can call this API operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
        
        @param request: ModifyAssetGroupRequest
        @return: ModifyAssetGroupResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_asset_group_with_options(request, runtime)

    async def modify_asset_group_async(
        self,
        request: sas_20181203_models.ModifyAssetGroupRequest,
    ) -> sas_20181203_models.ModifyAssetGroupResponse:
        """
        @summary Changes the server group to which specified servers belong.
        
        @description You can call the ModifyAssetGroup operation to change the server group to which one or more servers belong. After you create a server group by calling the [CreateOrUpdateAssetGroup](~~CreateOrUpdateAssetGroup~~) operation, you can call the ModifyAssetGroup operation to change the server group to which your servers belong.
        ### Limits
        You can call this API operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
        
        @param request: ModifyAssetGroupRequest
        @return: ModifyAssetGroupResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_asset_group_with_options_async(request, runtime)

    def modify_asset_important_with_options(
        self,
        request: sas_20181203_models.ModifyAssetImportantRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyAssetImportantResponse:
        """
        @summary Modifies the importance of an asset.
        
        @param request: ModifyAssetImportantRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyAssetImportantResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.important_code):
            query['ImportantCode'] = request.important_code
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyAssetImportant',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyAssetImportantResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_asset_important_with_options_async(
        self,
        request: sas_20181203_models.ModifyAssetImportantRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyAssetImportantResponse:
        """
        @summary Modifies the importance of an asset.
        
        @param request: ModifyAssetImportantRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyAssetImportantResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.important_code):
            query['ImportantCode'] = request.important_code
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyAssetImportant',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyAssetImportantResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_asset_important(
        self,
        request: sas_20181203_models.ModifyAssetImportantRequest,
    ) -> sas_20181203_models.ModifyAssetImportantResponse:
        """
        @summary Modifies the importance of an asset.
        
        @param request: ModifyAssetImportantRequest
        @return: ModifyAssetImportantResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_asset_important_with_options(request, runtime)

    async def modify_asset_important_async(
        self,
        request: sas_20181203_models.ModifyAssetImportantRequest,
    ) -> sas_20181203_models.ModifyAssetImportantResponse:
        """
        @summary Modifies the importance of an asset.
        
        @param request: ModifyAssetImportantRequest
        @return: ModifyAssetImportantResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_asset_important_with_options_async(request, runtime)

    def modify_attestor_with_options(
        self,
        request: sas_20181203_models.ModifyAttestorRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyAttestorResponse:
        """
        @summary Modifies the information about a witness that is created by using the container signature feature.
        
        @param request: ModifyAttestorRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyAttestorResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.key_id):
            query['KeyId'] = request.key_id
        if not UtilClient.is_unset(request.key_region_id):
            query['KeyRegionId'] = request.key_region_id
        if not UtilClient.is_unset(request.key_version_id):
            query['KeyVersionId'] = request.key_version_id
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyAttestor',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyAttestorResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_attestor_with_options_async(
        self,
        request: sas_20181203_models.ModifyAttestorRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyAttestorResponse:
        """
        @summary Modifies the information about a witness that is created by using the container signature feature.
        
        @param request: ModifyAttestorRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyAttestorResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.key_id):
            query['KeyId'] = request.key_id
        if not UtilClient.is_unset(request.key_region_id):
            query['KeyRegionId'] = request.key_region_id
        if not UtilClient.is_unset(request.key_version_id):
            query['KeyVersionId'] = request.key_version_id
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyAttestor',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyAttestorResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_attestor(
        self,
        request: sas_20181203_models.ModifyAttestorRequest,
    ) -> sas_20181203_models.ModifyAttestorResponse:
        """
        @summary Modifies the information about a witness that is created by using the container signature feature.
        
        @param request: ModifyAttestorRequest
        @return: ModifyAttestorResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_attestor_with_options(request, runtime)

    async def modify_attestor_async(
        self,
        request: sas_20181203_models.ModifyAttestorRequest,
    ) -> sas_20181203_models.ModifyAttestorResponse:
        """
        @summary Modifies the information about a witness that is created by using the container signature feature.
        
        @param request: ModifyAttestorRequest
        @return: ModifyAttestorResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_attestor_with_options_async(request, runtime)

    def modify_auto_del_config_with_options(
        self,
        request: sas_20181203_models.ModifyAutoDelConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyAutoDelConfigResponse:
        """
        @summary Specifies the number of days after which a detected vulnerability is automatically deleted.
        
        @param request: ModifyAutoDelConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyAutoDelConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.days):
            query['Days'] = request.days
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyAutoDelConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyAutoDelConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_auto_del_config_with_options_async(
        self,
        request: sas_20181203_models.ModifyAutoDelConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyAutoDelConfigResponse:
        """
        @summary Specifies the number of days after which a detected vulnerability is automatically deleted.
        
        @param request: ModifyAutoDelConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyAutoDelConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.days):
            query['Days'] = request.days
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyAutoDelConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyAutoDelConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_auto_del_config(
        self,
        request: sas_20181203_models.ModifyAutoDelConfigRequest,
    ) -> sas_20181203_models.ModifyAutoDelConfigResponse:
        """
        @summary Specifies the number of days after which a detected vulnerability is automatically deleted.
        
        @param request: ModifyAutoDelConfigRequest
        @return: ModifyAutoDelConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_auto_del_config_with_options(request, runtime)

    async def modify_auto_del_config_async(
        self,
        request: sas_20181203_models.ModifyAutoDelConfigRequest,
    ) -> sas_20181203_models.ModifyAutoDelConfigResponse:
        """
        @summary Specifies the number of days after which a detected vulnerability is automatically deleted.
        
        @param request: ModifyAutoDelConfigRequest
        @return: ModifyAutoDelConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_auto_del_config_with_options_async(request, runtime)

    def modify_backup_policy_with_options(
        self,
        tmp_req: sas_20181203_models.ModifyBackupPolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyBackupPolicyResponse:
        """
        @summary Modifies an anti-ransomware policy.
        
        @param tmp_req: ModifyBackupPolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyBackupPolicyResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.ModifyBackupPolicyShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.policy):
            request.policy_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.policy, 'Policy', 'json')
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.policy_shrink):
            query['Policy'] = request.policy_shrink
        if not UtilClient.is_unset(request.policy_region_id):
            query['PolicyRegionId'] = request.policy_region_id
        if not UtilClient.is_unset(request.policy_version):
            query['PolicyVersion'] = request.policy_version
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyBackupPolicy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyBackupPolicyResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_backup_policy_with_options_async(
        self,
        tmp_req: sas_20181203_models.ModifyBackupPolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyBackupPolicyResponse:
        """
        @summary Modifies an anti-ransomware policy.
        
        @param tmp_req: ModifyBackupPolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyBackupPolicyResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.ModifyBackupPolicyShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.policy):
            request.policy_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.policy, 'Policy', 'json')
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.policy_shrink):
            query['Policy'] = request.policy_shrink
        if not UtilClient.is_unset(request.policy_region_id):
            query['PolicyRegionId'] = request.policy_region_id
        if not UtilClient.is_unset(request.policy_version):
            query['PolicyVersion'] = request.policy_version
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyBackupPolicy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyBackupPolicyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_backup_policy(
        self,
        request: sas_20181203_models.ModifyBackupPolicyRequest,
    ) -> sas_20181203_models.ModifyBackupPolicyResponse:
        """
        @summary Modifies an anti-ransomware policy.
        
        @param request: ModifyBackupPolicyRequest
        @return: ModifyBackupPolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_backup_policy_with_options(request, runtime)

    async def modify_backup_policy_async(
        self,
        request: sas_20181203_models.ModifyBackupPolicyRequest,
    ) -> sas_20181203_models.ModifyBackupPolicyResponse:
        """
        @summary Modifies an anti-ransomware policy.
        
        @param request: ModifyBackupPolicyRequest
        @return: ModifyBackupPolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_backup_policy_with_options_async(request, runtime)

    def modify_backup_policy_status_with_options(
        self,
        request: sas_20181203_models.ModifyBackupPolicyStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyBackupPolicyStatusResponse:
        """
        @summary Enables or disables an anti-ransomware policy.
        
        @param request: ModifyBackupPolicyStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyBackupPolicyStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.policy_version):
            query['PolicyVersion'] = request.policy_version
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyBackupPolicyStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyBackupPolicyStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_backup_policy_status_with_options_async(
        self,
        request: sas_20181203_models.ModifyBackupPolicyStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyBackupPolicyStatusResponse:
        """
        @summary Enables or disables an anti-ransomware policy.
        
        @param request: ModifyBackupPolicyStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyBackupPolicyStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.policy_version):
            query['PolicyVersion'] = request.policy_version
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyBackupPolicyStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyBackupPolicyStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_backup_policy_status(
        self,
        request: sas_20181203_models.ModifyBackupPolicyStatusRequest,
    ) -> sas_20181203_models.ModifyBackupPolicyStatusResponse:
        """
        @summary Enables or disables an anti-ransomware policy.
        
        @param request: ModifyBackupPolicyStatusRequest
        @return: ModifyBackupPolicyStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_backup_policy_status_with_options(request, runtime)

    async def modify_backup_policy_status_async(
        self,
        request: sas_20181203_models.ModifyBackupPolicyStatusRequest,
    ) -> sas_20181203_models.ModifyBackupPolicyStatusResponse:
        """
        @summary Enables or disables an anti-ransomware policy.
        
        @param request: ModifyBackupPolicyStatusRequest
        @return: ModifyBackupPolicyStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_backup_policy_status_with_options_async(request, runtime)

    def modify_binary_security_policy_with_options(
        self,
        request: sas_20181203_models.ModifyBinarySecurityPolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyBinarySecurityPolicyResponse:
        """
        @summary Modify Container Image Signature Security Policy.
        
        @param request: ModifyBinarySecurityPolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyBinarySecurityPolicyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.clusters):
            query['Clusters'] = request.clusters
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.policy):
            query['Policy'] = request.policy
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyBinarySecurityPolicy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyBinarySecurityPolicyResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_binary_security_policy_with_options_async(
        self,
        request: sas_20181203_models.ModifyBinarySecurityPolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyBinarySecurityPolicyResponse:
        """
        @summary Modify Container Image Signature Security Policy.
        
        @param request: ModifyBinarySecurityPolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyBinarySecurityPolicyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.clusters):
            query['Clusters'] = request.clusters
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.policy):
            query['Policy'] = request.policy
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyBinarySecurityPolicy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyBinarySecurityPolicyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_binary_security_policy(
        self,
        request: sas_20181203_models.ModifyBinarySecurityPolicyRequest,
    ) -> sas_20181203_models.ModifyBinarySecurityPolicyResponse:
        """
        @summary Modify Container Image Signature Security Policy.
        
        @param request: ModifyBinarySecurityPolicyRequest
        @return: ModifyBinarySecurityPolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_binary_security_policy_with_options(request, runtime)

    async def modify_binary_security_policy_async(
        self,
        request: sas_20181203_models.ModifyBinarySecurityPolicyRequest,
    ) -> sas_20181203_models.ModifyBinarySecurityPolicyResponse:
        """
        @summary Modify Container Image Signature Security Policy.
        
        @param request: ModifyBinarySecurityPolicyRequest
        @return: ModifyBinarySecurityPolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_binary_security_policy_with_options_async(request, runtime)

    def modify_check_rule_with_options(
        self,
        request: sas_20181203_models.ModifyCheckRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyCheckRuleResponse:
        """
        @summary Modify the rule settings for cloud product configuration checks
        
        @param request: ModifyCheckRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyCheckRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.add_instance_list):
            query['AddInstanceList'] = request.add_instance_list
        if not UtilClient.is_unset(request.delete_instance_list):
            query['DeleteInstanceList'] = request.delete_instance_list
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.rule_id):
            query['RuleId'] = request.rule_id
        if not UtilClient.is_unset(request.rule_type):
            query['RuleType'] = request.rule_type
        if not UtilClient.is_unset(request.scope_type):
            query['ScopeType'] = request.scope_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyCheckRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyCheckRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_check_rule_with_options_async(
        self,
        request: sas_20181203_models.ModifyCheckRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyCheckRuleResponse:
        """
        @summary Modify the rule settings for cloud product configuration checks
        
        @param request: ModifyCheckRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyCheckRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.add_instance_list):
            query['AddInstanceList'] = request.add_instance_list
        if not UtilClient.is_unset(request.delete_instance_list):
            query['DeleteInstanceList'] = request.delete_instance_list
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.rule_id):
            query['RuleId'] = request.rule_id
        if not UtilClient.is_unset(request.rule_type):
            query['RuleType'] = request.rule_type
        if not UtilClient.is_unset(request.scope_type):
            query['ScopeType'] = request.scope_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyCheckRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyCheckRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_check_rule(
        self,
        request: sas_20181203_models.ModifyCheckRuleRequest,
    ) -> sas_20181203_models.ModifyCheckRuleResponse:
        """
        @summary Modify the rule settings for cloud product configuration checks
        
        @param request: ModifyCheckRuleRequest
        @return: ModifyCheckRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_check_rule_with_options(request, runtime)

    async def modify_check_rule_async(
        self,
        request: sas_20181203_models.ModifyCheckRuleRequest,
    ) -> sas_20181203_models.ModifyCheckRuleResponse:
        """
        @summary Modify the rule settings for cloud product configuration checks
        
        @param request: ModifyCheckRuleRequest
        @return: ModifyCheckRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_check_rule_with_options_async(request, runtime)

    def modify_clear_logstore_storage_with_options(
        self,
        request: sas_20181203_models.ModifyClearLogstoreStorageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyClearLogstoreStorageResponse:
        """
        @summary Deletes all logs that occupy your log storage.
        
        @description Deleted logs cannot be restored. Before you call this operation to delete all logs and free up log storage, we recommend that you export and save your logs to your computer.
        
        @param request: ModifyClearLogstoreStorageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyClearLogstoreStorageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.user_log_store):
            query['UserLogStore'] = request.user_log_store
        if not UtilClient.is_unset(request.user_project):
            query['UserProject'] = request.user_project
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyClearLogstoreStorage',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyClearLogstoreStorageResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_clear_logstore_storage_with_options_async(
        self,
        request: sas_20181203_models.ModifyClearLogstoreStorageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyClearLogstoreStorageResponse:
        """
        @summary Deletes all logs that occupy your log storage.
        
        @description Deleted logs cannot be restored. Before you call this operation to delete all logs and free up log storage, we recommend that you export and save your logs to your computer.
        
        @param request: ModifyClearLogstoreStorageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyClearLogstoreStorageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.user_log_store):
            query['UserLogStore'] = request.user_log_store
        if not UtilClient.is_unset(request.user_project):
            query['UserProject'] = request.user_project
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyClearLogstoreStorage',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyClearLogstoreStorageResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_clear_logstore_storage(
        self,
        request: sas_20181203_models.ModifyClearLogstoreStorageRequest,
    ) -> sas_20181203_models.ModifyClearLogstoreStorageResponse:
        """
        @summary Deletes all logs that occupy your log storage.
        
        @description Deleted logs cannot be restored. Before you call this operation to delete all logs and free up log storage, we recommend that you export and save your logs to your computer.
        
        @param request: ModifyClearLogstoreStorageRequest
        @return: ModifyClearLogstoreStorageResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_clear_logstore_storage_with_options(request, runtime)

    async def modify_clear_logstore_storage_async(
        self,
        request: sas_20181203_models.ModifyClearLogstoreStorageRequest,
    ) -> sas_20181203_models.ModifyClearLogstoreStorageResponse:
        """
        @summary Deletes all logs that occupy your log storage.
        
        @description Deleted logs cannot be restored. Before you call this operation to delete all logs and free up log storage, we recommend that you export and save your logs to your computer.
        
        @param request: ModifyClearLogstoreStorageRequest
        @return: ModifyClearLogstoreStorageResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_clear_logstore_storage_with_options_async(request, runtime)

    def modify_client_conf_setup_with_options(
        self,
        request: sas_20181203_models.ModifyClientConfSetupRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyClientConfSetupResponse:
        """
        @summary Modifies the resource configurations of the Security Center agent.
        
        @param request: ModifyClientConfSetupRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyClientConfSetupResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.strategy_config):
            query['StrategyConfig'] = request.strategy_config
        if not UtilClient.is_unset(request.strategy_tag):
            query['StrategyTag'] = request.strategy_tag
        if not UtilClient.is_unset(request.strategy_tag_value):
            query['StrategyTagValue'] = request.strategy_tag_value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyClientConfSetup',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyClientConfSetupResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_client_conf_setup_with_options_async(
        self,
        request: sas_20181203_models.ModifyClientConfSetupRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyClientConfSetupResponse:
        """
        @summary Modifies the resource configurations of the Security Center agent.
        
        @param request: ModifyClientConfSetupRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyClientConfSetupResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.strategy_config):
            query['StrategyConfig'] = request.strategy_config
        if not UtilClient.is_unset(request.strategy_tag):
            query['StrategyTag'] = request.strategy_tag
        if not UtilClient.is_unset(request.strategy_tag_value):
            query['StrategyTagValue'] = request.strategy_tag_value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyClientConfSetup',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyClientConfSetupResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_client_conf_setup(
        self,
        request: sas_20181203_models.ModifyClientConfSetupRequest,
    ) -> sas_20181203_models.ModifyClientConfSetupResponse:
        """
        @summary Modifies the resource configurations of the Security Center agent.
        
        @param request: ModifyClientConfSetupRequest
        @return: ModifyClientConfSetupResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_client_conf_setup_with_options(request, runtime)

    async def modify_client_conf_setup_async(
        self,
        request: sas_20181203_models.ModifyClientConfSetupRequest,
    ) -> sas_20181203_models.ModifyClientConfSetupResponse:
        """
        @summary Modifies the resource configurations of the Security Center agent.
        
        @param request: ModifyClientConfSetupRequest
        @return: ModifyClientConfSetupResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_client_conf_setup_with_options_async(request, runtime)

    def modify_client_conf_strategy_with_options(
        self,
        request: sas_20181203_models.ModifyClientConfStrategyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyClientConfStrategyResponse:
        """
        @summary Modifies an agent configuration policy.
        
        @param request: ModifyClientConfStrategyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyClientConfStrategyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.tag):
            query['Tag'] = request.tag
        if not UtilClient.is_unset(request.tag_ext):
            query['TagExt'] = request.tag_ext
        if not UtilClient.is_unset(request.tag_value):
            query['TagValue'] = request.tag_value
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyClientConfStrategy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyClientConfStrategyResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_client_conf_strategy_with_options_async(
        self,
        request: sas_20181203_models.ModifyClientConfStrategyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyClientConfStrategyResponse:
        """
        @summary Modifies an agent configuration policy.
        
        @param request: ModifyClientConfStrategyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyClientConfStrategyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.tag):
            query['Tag'] = request.tag
        if not UtilClient.is_unset(request.tag_ext):
            query['TagExt'] = request.tag_ext
        if not UtilClient.is_unset(request.tag_value):
            query['TagValue'] = request.tag_value
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyClientConfStrategy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyClientConfStrategyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_client_conf_strategy(
        self,
        request: sas_20181203_models.ModifyClientConfStrategyRequest,
    ) -> sas_20181203_models.ModifyClientConfStrategyResponse:
        """
        @summary Modifies an agent configuration policy.
        
        @param request: ModifyClientConfStrategyRequest
        @return: ModifyClientConfStrategyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_client_conf_strategy_with_options(request, runtime)

    async def modify_client_conf_strategy_async(
        self,
        request: sas_20181203_models.ModifyClientConfStrategyRequest,
    ) -> sas_20181203_models.ModifyClientConfStrategyResponse:
        """
        @summary Modifies an agent configuration policy.
        
        @param request: ModifyClientConfStrategyRequest
        @return: ModifyClientConfStrategyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_client_conf_strategy_with_options_async(request, runtime)

    def modify_client_user_define_rule_with_options(
        self,
        request: sas_20181203_models.ModifyClientUserDefineRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyClientUserDefineRuleResponse:
        """
        @summary Modifies a custom defense rule.
        
        @param request: ModifyClientUserDefineRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyClientUserDefineRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.action_type):
            query['ActionType'] = request.action_type
        if not UtilClient.is_unset(request.cmdline):
            query['Cmdline'] = request.cmdline
        if not UtilClient.is_unset(request.domain):
            query['Domain'] = request.domain
        if not UtilClient.is_unset(request.file_path):
            query['FilePath'] = request.file_path
        if not UtilClient.is_unset(request.ip):
            query['IP'] = request.ip
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.md_5list):
            query['Md5List'] = request.md_5list
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.new_file_path):
            query['NewFilePath'] = request.new_file_path
        if not UtilClient.is_unset(request.parent_cmdline):
            query['ParentCmdline'] = request.parent_cmdline
        if not UtilClient.is_unset(request.parent_proc_path):
            query['ParentProcPath'] = request.parent_proc_path
        if not UtilClient.is_unset(request.platform):
            query['Platform'] = request.platform
        if not UtilClient.is_unset(request.port):
            query['Port'] = request.port
        if not UtilClient.is_unset(request.port_str):
            query['PortStr'] = request.port_str
        if not UtilClient.is_unset(request.proc_path):
            query['ProcPath'] = request.proc_path
        if not UtilClient.is_unset(request.registry_content):
            query['RegistryContent'] = request.registry_content
        if not UtilClient.is_unset(request.registry_key):
            query['RegistryKey'] = request.registry_key
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyClientUserDefineRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyClientUserDefineRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_client_user_define_rule_with_options_async(
        self,
        request: sas_20181203_models.ModifyClientUserDefineRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyClientUserDefineRuleResponse:
        """
        @summary Modifies a custom defense rule.
        
        @param request: ModifyClientUserDefineRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyClientUserDefineRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.action_type):
            query['ActionType'] = request.action_type
        if not UtilClient.is_unset(request.cmdline):
            query['Cmdline'] = request.cmdline
        if not UtilClient.is_unset(request.domain):
            query['Domain'] = request.domain
        if not UtilClient.is_unset(request.file_path):
            query['FilePath'] = request.file_path
        if not UtilClient.is_unset(request.ip):
            query['IP'] = request.ip
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.md_5list):
            query['Md5List'] = request.md_5list
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.new_file_path):
            query['NewFilePath'] = request.new_file_path
        if not UtilClient.is_unset(request.parent_cmdline):
            query['ParentCmdline'] = request.parent_cmdline
        if not UtilClient.is_unset(request.parent_proc_path):
            query['ParentProcPath'] = request.parent_proc_path
        if not UtilClient.is_unset(request.platform):
            query['Platform'] = request.platform
        if not UtilClient.is_unset(request.port):
            query['Port'] = request.port
        if not UtilClient.is_unset(request.port_str):
            query['PortStr'] = request.port_str
        if not UtilClient.is_unset(request.proc_path):
            query['ProcPath'] = request.proc_path
        if not UtilClient.is_unset(request.registry_content):
            query['RegistryContent'] = request.registry_content
        if not UtilClient.is_unset(request.registry_key):
            query['RegistryKey'] = request.registry_key
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyClientUserDefineRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyClientUserDefineRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_client_user_define_rule(
        self,
        request: sas_20181203_models.ModifyClientUserDefineRuleRequest,
    ) -> sas_20181203_models.ModifyClientUserDefineRuleResponse:
        """
        @summary Modifies a custom defense rule.
        
        @param request: ModifyClientUserDefineRuleRequest
        @return: ModifyClientUserDefineRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_client_user_define_rule_with_options(request, runtime)

    async def modify_client_user_define_rule_async(
        self,
        request: sas_20181203_models.ModifyClientUserDefineRuleRequest,
    ) -> sas_20181203_models.ModifyClientUserDefineRuleResponse:
        """
        @summary Modifies a custom defense rule.
        
        @param request: ModifyClientUserDefineRuleRequest
        @return: ModifyClientUserDefineRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_client_user_define_rule_with_options_async(request, runtime)

    def modify_cloud_vendor_account_akwith_options(
        self,
        request: sas_20181203_models.ModifyCloudVendorAccountAKRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyCloudVendorAccountAKResponse:
        """
        @summary Modifies the configuration of the AccessKey pair for a third-party account.
        
        @param request: ModifyCloudVendorAccountAKRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyCloudVendorAccountAKResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.auth_ids):
            query['AuthIds'] = request.auth_ids
        if not UtilClient.is_unset(request.auth_modules):
            query['AuthModules'] = request.auth_modules
        if not UtilClient.is_unset(request.ctdr_cloud_user_id):
            query['CtdrCloudUserId'] = request.ctdr_cloud_user_id
        if not UtilClient.is_unset(request.domain):
            query['Domain'] = request.domain
        if not UtilClient.is_unset(request.extend_info):
            query['ExtendInfo'] = request.extend_info
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.regions):
            query['Regions'] = request.regions
        if not UtilClient.is_unset(request.secret_id):
            query['SecretId'] = request.secret_id
        if not UtilClient.is_unset(request.secret_key):
            query['SecretKey'] = request.secret_key
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        if not UtilClient.is_unset(request.subscription_ids):
            query['SubscriptionIds'] = request.subscription_ids
        if not UtilClient.is_unset(request.tenant_id):
            query['TenantId'] = request.tenant_id
        if not UtilClient.is_unset(request.vendor_auth_alias):
            query['VendorAuthAlias'] = request.vendor_auth_alias
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyCloudVendorAccountAK',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyCloudVendorAccountAKResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_cloud_vendor_account_akwith_options_async(
        self,
        request: sas_20181203_models.ModifyCloudVendorAccountAKRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyCloudVendorAccountAKResponse:
        """
        @summary Modifies the configuration of the AccessKey pair for a third-party account.
        
        @param request: ModifyCloudVendorAccountAKRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyCloudVendorAccountAKResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.auth_ids):
            query['AuthIds'] = request.auth_ids
        if not UtilClient.is_unset(request.auth_modules):
            query['AuthModules'] = request.auth_modules
        if not UtilClient.is_unset(request.ctdr_cloud_user_id):
            query['CtdrCloudUserId'] = request.ctdr_cloud_user_id
        if not UtilClient.is_unset(request.domain):
            query['Domain'] = request.domain
        if not UtilClient.is_unset(request.extend_info):
            query['ExtendInfo'] = request.extend_info
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.regions):
            query['Regions'] = request.regions
        if not UtilClient.is_unset(request.secret_id):
            query['SecretId'] = request.secret_id
        if not UtilClient.is_unset(request.secret_key):
            query['SecretKey'] = request.secret_key
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        if not UtilClient.is_unset(request.subscription_ids):
            query['SubscriptionIds'] = request.subscription_ids
        if not UtilClient.is_unset(request.tenant_id):
            query['TenantId'] = request.tenant_id
        if not UtilClient.is_unset(request.vendor_auth_alias):
            query['VendorAuthAlias'] = request.vendor_auth_alias
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyCloudVendorAccountAK',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyCloudVendorAccountAKResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_cloud_vendor_account_ak(
        self,
        request: sas_20181203_models.ModifyCloudVendorAccountAKRequest,
    ) -> sas_20181203_models.ModifyCloudVendorAccountAKResponse:
        """
        @summary Modifies the configuration of the AccessKey pair for a third-party account.
        
        @param request: ModifyCloudVendorAccountAKRequest
        @return: ModifyCloudVendorAccountAKResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_cloud_vendor_account_akwith_options(request, runtime)

    async def modify_cloud_vendor_account_ak_async(
        self,
        request: sas_20181203_models.ModifyCloudVendorAccountAKRequest,
    ) -> sas_20181203_models.ModifyCloudVendorAccountAKResponse:
        """
        @summary Modifies the configuration of the AccessKey pair for a third-party account.
        
        @param request: ModifyCloudVendorAccountAKRequest
        @return: ModifyCloudVendorAccountAKResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_cloud_vendor_account_akwith_options_async(request, runtime)

    def modify_cloud_vendor_trial_config_with_options(
        self,
        request: sas_20181203_models.ModifyCloudVendorTrialConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyCloudVendorTrialConfigResponse:
        """
        @summary Modify the Trail configuration information for the AK
        
        @param request: ModifyCloudVendorTrialConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyCloudVendorTrialConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.auth_id):
            query['AuthId'] = request.auth_id
        if not UtilClient.is_unset(request.auth_info):
            query['AuthInfo'] = request.auth_info
        if not UtilClient.is_unset(request.delete_trail):
            query['DeleteTrail'] = request.delete_trail
        if not UtilClient.is_unset(request.vendor):
            query['Vendor'] = request.vendor
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyCloudVendorTrialConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyCloudVendorTrialConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_cloud_vendor_trial_config_with_options_async(
        self,
        request: sas_20181203_models.ModifyCloudVendorTrialConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyCloudVendorTrialConfigResponse:
        """
        @summary Modify the Trail configuration information for the AK
        
        @param request: ModifyCloudVendorTrialConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyCloudVendorTrialConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.auth_id):
            query['AuthId'] = request.auth_id
        if not UtilClient.is_unset(request.auth_info):
            query['AuthInfo'] = request.auth_info
        if not UtilClient.is_unset(request.delete_trail):
            query['DeleteTrail'] = request.delete_trail
        if not UtilClient.is_unset(request.vendor):
            query['Vendor'] = request.vendor
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyCloudVendorTrialConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyCloudVendorTrialConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_cloud_vendor_trial_config(
        self,
        request: sas_20181203_models.ModifyCloudVendorTrialConfigRequest,
    ) -> sas_20181203_models.ModifyCloudVendorTrialConfigResponse:
        """
        @summary Modify the Trail configuration information for the AK
        
        @param request: ModifyCloudVendorTrialConfigRequest
        @return: ModifyCloudVendorTrialConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_cloud_vendor_trial_config_with_options(request, runtime)

    async def modify_cloud_vendor_trial_config_async(
        self,
        request: sas_20181203_models.ModifyCloudVendorTrialConfigRequest,
    ) -> sas_20181203_models.ModifyCloudVendorTrialConfigResponse:
        """
        @summary Modify the Trail configuration information for the AK
        
        @param request: ModifyCloudVendorTrialConfigRequest
        @return: ModifyCloudVendorTrialConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_cloud_vendor_trial_config_with_options_async(request, runtime)

    def modify_cluster_cnnf_status_user_confirm_with_options(
        self,
        request: sas_20181203_models.ModifyClusterCnnfStatusUserConfirmRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyClusterCnnfStatusUserConfirmResponse:
        """
        @summary Fixes the blocking status of clusters whose status is Normal to be confirmed.
        
        @param request: ModifyClusterCnnfStatusUserConfirmRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyClusterCnnfStatusUserConfirmResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_ids):
            query['ClusterIds'] = request.cluster_ids
        if not UtilClient.is_unset(request.user_confirm):
            query['UserConfirm'] = request.user_confirm
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyClusterCnnfStatusUserConfirm',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyClusterCnnfStatusUserConfirmResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_cluster_cnnf_status_user_confirm_with_options_async(
        self,
        request: sas_20181203_models.ModifyClusterCnnfStatusUserConfirmRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyClusterCnnfStatusUserConfirmResponse:
        """
        @summary Fixes the blocking status of clusters whose status is Normal to be confirmed.
        
        @param request: ModifyClusterCnnfStatusUserConfirmRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyClusterCnnfStatusUserConfirmResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_ids):
            query['ClusterIds'] = request.cluster_ids
        if not UtilClient.is_unset(request.user_confirm):
            query['UserConfirm'] = request.user_confirm
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyClusterCnnfStatusUserConfirm',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyClusterCnnfStatusUserConfirmResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_cluster_cnnf_status_user_confirm(
        self,
        request: sas_20181203_models.ModifyClusterCnnfStatusUserConfirmRequest,
    ) -> sas_20181203_models.ModifyClusterCnnfStatusUserConfirmResponse:
        """
        @summary Fixes the blocking status of clusters whose status is Normal to be confirmed.
        
        @param request: ModifyClusterCnnfStatusUserConfirmRequest
        @return: ModifyClusterCnnfStatusUserConfirmResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_cluster_cnnf_status_user_confirm_with_options(request, runtime)

    async def modify_cluster_cnnf_status_user_confirm_async(
        self,
        request: sas_20181203_models.ModifyClusterCnnfStatusUserConfirmRequest,
    ) -> sas_20181203_models.ModifyClusterCnnfStatusUserConfirmResponse:
        """
        @summary Fixes the blocking status of clusters whose status is Normal to be confirmed.
        
        @param request: ModifyClusterCnnfStatusUserConfirmRequest
        @return: ModifyClusterCnnfStatusUserConfirmResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_cluster_cnnf_status_user_confirm_with_options_async(request, runtime)

    def modify_concern_necessity_with_options(
        self,
        request: sas_20181203_models.ModifyConcernNecessityRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyConcernNecessityResponse:
        """
        @summary Modifies the priority to fix vulnerabilities.
        
        @param request: ModifyConcernNecessityRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyConcernNecessityResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.concern_necessity):
            query['ConcernNecessity'] = request.concern_necessity
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyConcernNecessity',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyConcernNecessityResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_concern_necessity_with_options_async(
        self,
        request: sas_20181203_models.ModifyConcernNecessityRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyConcernNecessityResponse:
        """
        @summary Modifies the priority to fix vulnerabilities.
        
        @param request: ModifyConcernNecessityRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyConcernNecessityResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.concern_necessity):
            query['ConcernNecessity'] = request.concern_necessity
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyConcernNecessity',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyConcernNecessityResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_concern_necessity(
        self,
        request: sas_20181203_models.ModifyConcernNecessityRequest,
    ) -> sas_20181203_models.ModifyConcernNecessityResponse:
        """
        @summary Modifies the priority to fix vulnerabilities.
        
        @param request: ModifyConcernNecessityRequest
        @return: ModifyConcernNecessityResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_concern_necessity_with_options(request, runtime)

    async def modify_concern_necessity_async(
        self,
        request: sas_20181203_models.ModifyConcernNecessityRequest,
    ) -> sas_20181203_models.ModifyConcernNecessityResponse:
        """
        @summary Modifies the priority to fix vulnerabilities.
        
        @param request: ModifyConcernNecessityRequest
        @return: ModifyConcernNecessityResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_concern_necessity_with_options_async(request, runtime)

    def modify_container_defense_rule_with_options(
        self,
        tmp_req: sas_20181203_models.ModifyContainerDefenseRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyContainerDefenseRuleResponse:
        """
        @summary Modifies a rule for non-image program defense.
        
        @param tmp_req: ModifyContainerDefenseRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyContainerDefenseRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.ModifyContainerDefenseRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.whitelist):
            request.whitelist_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.whitelist, 'Whitelist', 'json')
        query = {}
        if not UtilClient.is_unset(request.description):
            query['Description'] = request.description
        if not UtilClient.is_unset(request.rule_action):
            query['RuleAction'] = request.rule_action
        if not UtilClient.is_unset(request.rule_id):
            query['RuleId'] = request.rule_id
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.rule_switch):
            query['RuleSwitch'] = request.rule_switch
        if not UtilClient.is_unset(request.rule_type):
            query['RuleType'] = request.rule_type
        if not UtilClient.is_unset(request.scope):
            query['Scope'] = request.scope
        if not UtilClient.is_unset(request.whitelist_shrink):
            query['Whitelist'] = request.whitelist_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyContainerDefenseRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyContainerDefenseRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_container_defense_rule_with_options_async(
        self,
        tmp_req: sas_20181203_models.ModifyContainerDefenseRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyContainerDefenseRuleResponse:
        """
        @summary Modifies a rule for non-image program defense.
        
        @param tmp_req: ModifyContainerDefenseRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyContainerDefenseRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.ModifyContainerDefenseRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.whitelist):
            request.whitelist_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.whitelist, 'Whitelist', 'json')
        query = {}
        if not UtilClient.is_unset(request.description):
            query['Description'] = request.description
        if not UtilClient.is_unset(request.rule_action):
            query['RuleAction'] = request.rule_action
        if not UtilClient.is_unset(request.rule_id):
            query['RuleId'] = request.rule_id
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.rule_switch):
            query['RuleSwitch'] = request.rule_switch
        if not UtilClient.is_unset(request.rule_type):
            query['RuleType'] = request.rule_type
        if not UtilClient.is_unset(request.scope):
            query['Scope'] = request.scope
        if not UtilClient.is_unset(request.whitelist_shrink):
            query['Whitelist'] = request.whitelist_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyContainerDefenseRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyContainerDefenseRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_container_defense_rule(
        self,
        request: sas_20181203_models.ModifyContainerDefenseRuleRequest,
    ) -> sas_20181203_models.ModifyContainerDefenseRuleResponse:
        """
        @summary Modifies a rule for non-image program defense.
        
        @param request: ModifyContainerDefenseRuleRequest
        @return: ModifyContainerDefenseRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_container_defense_rule_with_options(request, runtime)

    async def modify_container_defense_rule_async(
        self,
        request: sas_20181203_models.ModifyContainerDefenseRuleRequest,
    ) -> sas_20181203_models.ModifyContainerDefenseRuleResponse:
        """
        @summary Modifies a rule for non-image program defense.
        
        @param request: ModifyContainerDefenseRuleRequest
        @return: ModifyContainerDefenseRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_container_defense_rule_with_options_async(request, runtime)

    def modify_container_defense_rule_switch_with_options(
        self,
        request: sas_20181203_models.ModifyContainerDefenseRuleSwitchRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyContainerDefenseRuleSwitchResponse:
        """
        @summary Changes the status of non-image program defense rules.
        
        @param request: ModifyContainerDefenseRuleSwitchRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyContainerDefenseRuleSwitchResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.rule_ids):
            query['RuleIds'] = request.rule_ids
        if not UtilClient.is_unset(request.rule_switch):
            query['RuleSwitch'] = request.rule_switch
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyContainerDefenseRuleSwitch',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyContainerDefenseRuleSwitchResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_container_defense_rule_switch_with_options_async(
        self,
        request: sas_20181203_models.ModifyContainerDefenseRuleSwitchRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyContainerDefenseRuleSwitchResponse:
        """
        @summary Changes the status of non-image program defense rules.
        
        @param request: ModifyContainerDefenseRuleSwitchRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyContainerDefenseRuleSwitchResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.rule_ids):
            query['RuleIds'] = request.rule_ids
        if not UtilClient.is_unset(request.rule_switch):
            query['RuleSwitch'] = request.rule_switch
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyContainerDefenseRuleSwitch',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyContainerDefenseRuleSwitchResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_container_defense_rule_switch(
        self,
        request: sas_20181203_models.ModifyContainerDefenseRuleSwitchRequest,
    ) -> sas_20181203_models.ModifyContainerDefenseRuleSwitchResponse:
        """
        @summary Changes the status of non-image program defense rules.
        
        @param request: ModifyContainerDefenseRuleSwitchRequest
        @return: ModifyContainerDefenseRuleSwitchResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_container_defense_rule_switch_with_options(request, runtime)

    async def modify_container_defense_rule_switch_async(
        self,
        request: sas_20181203_models.ModifyContainerDefenseRuleSwitchRequest,
    ) -> sas_20181203_models.ModifyContainerDefenseRuleSwitchResponse:
        """
        @summary Changes the status of non-image program defense rules.
        
        @param request: ModifyContainerDefenseRuleSwitchRequest
        @return: ModifyContainerDefenseRuleSwitchResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_container_defense_rule_switch_with_options_async(request, runtime)

    def modify_container_plugin_rule_with_options(
        self,
        request: sas_20181203_models.ModifyContainerPluginRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyContainerPluginRuleResponse:
        """
        @summary Modifies the defense rule against container escapes.
        
        @param request: ModifyContainerPluginRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyContainerPluginRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.mode):
            query['Mode'] = request.mode
        if not UtilClient.is_unset(request.rule_id):
            query['RuleId'] = request.rule_id
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.rule_type):
            query['RuleType'] = request.rule_type
        if not UtilClient.is_unset(request.selected_policy):
            query['SelectedPolicy'] = request.selected_policy
        if not UtilClient.is_unset(request.white_images):
            query['WhiteImages'] = request.white_images
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyContainerPluginRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyContainerPluginRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_container_plugin_rule_with_options_async(
        self,
        request: sas_20181203_models.ModifyContainerPluginRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyContainerPluginRuleResponse:
        """
        @summary Modifies the defense rule against container escapes.
        
        @param request: ModifyContainerPluginRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyContainerPluginRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.mode):
            query['Mode'] = request.mode
        if not UtilClient.is_unset(request.rule_id):
            query['RuleId'] = request.rule_id
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.rule_type):
            query['RuleType'] = request.rule_type
        if not UtilClient.is_unset(request.selected_policy):
            query['SelectedPolicy'] = request.selected_policy
        if not UtilClient.is_unset(request.white_images):
            query['WhiteImages'] = request.white_images
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyContainerPluginRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyContainerPluginRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_container_plugin_rule(
        self,
        request: sas_20181203_models.ModifyContainerPluginRuleRequest,
    ) -> sas_20181203_models.ModifyContainerPluginRuleResponse:
        """
        @summary Modifies the defense rule against container escapes.
        
        @param request: ModifyContainerPluginRuleRequest
        @return: ModifyContainerPluginRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_container_plugin_rule_with_options(request, runtime)

    async def modify_container_plugin_rule_async(
        self,
        request: sas_20181203_models.ModifyContainerPluginRuleRequest,
    ) -> sas_20181203_models.ModifyContainerPluginRuleResponse:
        """
        @summary Modifies the defense rule against container escapes.
        
        @param request: ModifyContainerPluginRuleRequest
        @return: ModifyContainerPluginRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_container_plugin_rule_with_options_async(request, runtime)

    def modify_container_scan_config_with_options(
        self,
        request: sas_20181203_models.ModifyContainerScanConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyContainerScanConfigResponse:
        """
        @summary Modifies the configurations of vulnerability scan for a running container.
        
        @param request: ModifyContainerScanConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyContainerScanConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_names):
            query['AppNames'] = request.app_names
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyContainerScanConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyContainerScanConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_container_scan_config_with_options_async(
        self,
        request: sas_20181203_models.ModifyContainerScanConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyContainerScanConfigResponse:
        """
        @summary Modifies the configurations of vulnerability scan for a running container.
        
        @param request: ModifyContainerScanConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyContainerScanConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_names):
            query['AppNames'] = request.app_names
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyContainerScanConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyContainerScanConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_container_scan_config(
        self,
        request: sas_20181203_models.ModifyContainerScanConfigRequest,
    ) -> sas_20181203_models.ModifyContainerScanConfigResponse:
        """
        @summary Modifies the configurations of vulnerability scan for a running container.
        
        @param request: ModifyContainerScanConfigRequest
        @return: ModifyContainerScanConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_container_scan_config_with_options(request, runtime)

    async def modify_container_scan_config_async(
        self,
        request: sas_20181203_models.ModifyContainerScanConfigRequest,
    ) -> sas_20181203_models.ModifyContainerScanConfigResponse:
        """
        @summary Modifies the configurations of vulnerability scan for a running container.
        
        @param request: ModifyContainerScanConfigRequest
        @return: ModifyContainerScanConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_container_scan_config_with_options_async(request, runtime)

    def modify_create_vul_whitelist_with_options(
        self,
        request: sas_20181203_models.ModifyCreateVulWhitelistRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyCreateVulWhitelistResponse:
        """
        @summary Adds vulnerabilities to the whitelist. After you add the vulnerabilities to the whitelist, Security Center no longer generates alerts for the vulnerabilities.
        
        @param request: ModifyCreateVulWhitelistRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyCreateVulWhitelistResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.reason):
            query['Reason'] = request.reason
        if not UtilClient.is_unset(request.target_info):
            query['TargetInfo'] = request.target_info
        if not UtilClient.is_unset(request.whitelist):
            query['Whitelist'] = request.whitelist
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyCreateVulWhitelist',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyCreateVulWhitelistResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_create_vul_whitelist_with_options_async(
        self,
        request: sas_20181203_models.ModifyCreateVulWhitelistRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyCreateVulWhitelistResponse:
        """
        @summary Adds vulnerabilities to the whitelist. After you add the vulnerabilities to the whitelist, Security Center no longer generates alerts for the vulnerabilities.
        
        @param request: ModifyCreateVulWhitelistRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyCreateVulWhitelistResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.reason):
            query['Reason'] = request.reason
        if not UtilClient.is_unset(request.target_info):
            query['TargetInfo'] = request.target_info
        if not UtilClient.is_unset(request.whitelist):
            query['Whitelist'] = request.whitelist
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyCreateVulWhitelist',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyCreateVulWhitelistResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_create_vul_whitelist(
        self,
        request: sas_20181203_models.ModifyCreateVulWhitelistRequest,
    ) -> sas_20181203_models.ModifyCreateVulWhitelistResponse:
        """
        @summary Adds vulnerabilities to the whitelist. After you add the vulnerabilities to the whitelist, Security Center no longer generates alerts for the vulnerabilities.
        
        @param request: ModifyCreateVulWhitelistRequest
        @return: ModifyCreateVulWhitelistResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_create_vul_whitelist_with_options(request, runtime)

    async def modify_create_vul_whitelist_async(
        self,
        request: sas_20181203_models.ModifyCreateVulWhitelistRequest,
    ) -> sas_20181203_models.ModifyCreateVulWhitelistResponse:
        """
        @summary Adds vulnerabilities to the whitelist. After you add the vulnerabilities to the whitelist, Security Center no longer generates alerts for the vulnerabilities.
        
        @param request: ModifyCreateVulWhitelistRequest
        @return: ModifyCreateVulWhitelistResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_create_vul_whitelist_with_options_async(request, runtime)

    def modify_custom_block_record_with_options(
        self,
        request: sas_20181203_models.ModifyCustomBlockRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyCustomBlockRecordResponse:
        """
        @summary Modifies a custom IP address blocking policy.
        
        @param request: ModifyCustomBlockRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyCustomBlockRecordResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.block_ip):
            query['BlockIp'] = request.block_ip
        if not UtilClient.is_unset(request.bound):
            query['Bound'] = request.bound
        if not UtilClient.is_unset(request.expire_time):
            query['ExpireTime'] = request.expire_time
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyCustomBlockRecord',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyCustomBlockRecordResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_custom_block_record_with_options_async(
        self,
        request: sas_20181203_models.ModifyCustomBlockRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyCustomBlockRecordResponse:
        """
        @summary Modifies a custom IP address blocking policy.
        
        @param request: ModifyCustomBlockRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyCustomBlockRecordResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.block_ip):
            query['BlockIp'] = request.block_ip
        if not UtilClient.is_unset(request.bound):
            query['Bound'] = request.bound
        if not UtilClient.is_unset(request.expire_time):
            query['ExpireTime'] = request.expire_time
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyCustomBlockRecord',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyCustomBlockRecordResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_custom_block_record(
        self,
        request: sas_20181203_models.ModifyCustomBlockRecordRequest,
    ) -> sas_20181203_models.ModifyCustomBlockRecordResponse:
        """
        @summary Modifies a custom IP address blocking policy.
        
        @param request: ModifyCustomBlockRecordRequest
        @return: ModifyCustomBlockRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_custom_block_record_with_options(request, runtime)

    async def modify_custom_block_record_async(
        self,
        request: sas_20181203_models.ModifyCustomBlockRecordRequest,
    ) -> sas_20181203_models.ModifyCustomBlockRecordResponse:
        """
        @summary Modifies a custom IP address blocking policy.
        
        @param request: ModifyCustomBlockRecordRequest
        @return: ModifyCustomBlockRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_custom_block_record_with_options_async(request, runtime)

    def modify_cycle_task_with_options(
        self,
        request: sas_20181203_models.ModifyCycleTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyCycleTaskResponse:
        """
        @summary Modifies the execution cycle of periodic tasks, including image scan, urgent vulnerability scan, and virus detection tasks.
        
        @param request: ModifyCycleTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyCycleTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.enable):
            query['Enable'] = request.enable
        if not UtilClient.is_unset(request.first_date_str):
            query['FirstDateStr'] = request.first_date_str
        if not UtilClient.is_unset(request.interval_period):
            query['IntervalPeriod'] = request.interval_period
        if not UtilClient.is_unset(request.param):
            query['Param'] = request.param
        if not UtilClient.is_unset(request.period_unit):
            query['PeriodUnit'] = request.period_unit
        if not UtilClient.is_unset(request.target_end_time):
            query['TargetEndTime'] = request.target_end_time
        if not UtilClient.is_unset(request.target_start_time):
            query['TargetStartTime'] = request.target_start_time
        if not UtilClient.is_unset(request.task_name):
            query['TaskName'] = request.task_name
        if not UtilClient.is_unset(request.task_type):
            query['TaskType'] = request.task_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyCycleTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyCycleTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_cycle_task_with_options_async(
        self,
        request: sas_20181203_models.ModifyCycleTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyCycleTaskResponse:
        """
        @summary Modifies the execution cycle of periodic tasks, including image scan, urgent vulnerability scan, and virus detection tasks.
        
        @param request: ModifyCycleTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyCycleTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.enable):
            query['Enable'] = request.enable
        if not UtilClient.is_unset(request.first_date_str):
            query['FirstDateStr'] = request.first_date_str
        if not UtilClient.is_unset(request.interval_period):
            query['IntervalPeriod'] = request.interval_period
        if not UtilClient.is_unset(request.param):
            query['Param'] = request.param
        if not UtilClient.is_unset(request.period_unit):
            query['PeriodUnit'] = request.period_unit
        if not UtilClient.is_unset(request.target_end_time):
            query['TargetEndTime'] = request.target_end_time
        if not UtilClient.is_unset(request.target_start_time):
            query['TargetStartTime'] = request.target_start_time
        if not UtilClient.is_unset(request.task_name):
            query['TaskName'] = request.task_name
        if not UtilClient.is_unset(request.task_type):
            query['TaskType'] = request.task_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyCycleTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyCycleTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_cycle_task(
        self,
        request: sas_20181203_models.ModifyCycleTaskRequest,
    ) -> sas_20181203_models.ModifyCycleTaskResponse:
        """
        @summary Modifies the execution cycle of periodic tasks, including image scan, urgent vulnerability scan, and virus detection tasks.
        
        @param request: ModifyCycleTaskRequest
        @return: ModifyCycleTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_cycle_task_with_options(request, runtime)

    async def modify_cycle_task_async(
        self,
        request: sas_20181203_models.ModifyCycleTaskRequest,
    ) -> sas_20181203_models.ModifyCycleTaskResponse:
        """
        @summary Modifies the execution cycle of periodic tasks, including image scan, urgent vulnerability scan, and virus detection tasks.
        
        @param request: ModifyCycleTaskRequest
        @return: ModifyCycleTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_cycle_task_with_options_async(request, runtime)

    def modify_ding_talk_status_with_options(
        self,
        request: sas_20181203_models.ModifyDingTalkStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyDingTalkStatusResponse:
        """
        @summary Changes the notification status of a DingTalk chatbot.
        
        @description You can call this operation only if you use Security Center Enterprise.
        
        @param request: ModifyDingTalkStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyDingTalkStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.ids):
            query['Ids'] = request.ids
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyDingTalkStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyDingTalkStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_ding_talk_status_with_options_async(
        self,
        request: sas_20181203_models.ModifyDingTalkStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyDingTalkStatusResponse:
        """
        @summary Changes the notification status of a DingTalk chatbot.
        
        @description You can call this operation only if you use Security Center Enterprise.
        
        @param request: ModifyDingTalkStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyDingTalkStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.ids):
            query['Ids'] = request.ids
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyDingTalkStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyDingTalkStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_ding_talk_status(
        self,
        request: sas_20181203_models.ModifyDingTalkStatusRequest,
    ) -> sas_20181203_models.ModifyDingTalkStatusResponse:
        """
        @summary Changes the notification status of a DingTalk chatbot.
        
        @description You can call this operation only if you use Security Center Enterprise.
        
        @param request: ModifyDingTalkStatusRequest
        @return: ModifyDingTalkStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_ding_talk_status_with_options(request, runtime)

    async def modify_ding_talk_status_async(
        self,
        request: sas_20181203_models.ModifyDingTalkStatusRequest,
    ) -> sas_20181203_models.ModifyDingTalkStatusResponse:
        """
        @summary Changes the notification status of a DingTalk chatbot.
        
        @description You can call this operation only if you use Security Center Enterprise.
        
        @param request: ModifyDingTalkStatusRequest
        @return: ModifyDingTalkStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_ding_talk_status_with_options_async(request, runtime)

    def modify_emg_vul_submit_with_options(
        self,
        request: sas_20181203_models.ModifyEmgVulSubmitRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyEmgVulSubmitResponse:
        """
        @summary Runs a scan task for urgent vulnerabilities.
        
        @param request: ModifyEmgVulSubmitRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyEmgVulSubmitResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.user_agreement):
            query['UserAgreement'] = request.user_agreement
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyEmgVulSubmit',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyEmgVulSubmitResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_emg_vul_submit_with_options_async(
        self,
        request: sas_20181203_models.ModifyEmgVulSubmitRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyEmgVulSubmitResponse:
        """
        @summary Runs a scan task for urgent vulnerabilities.
        
        @param request: ModifyEmgVulSubmitRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyEmgVulSubmitResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.user_agreement):
            query['UserAgreement'] = request.user_agreement
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyEmgVulSubmit',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyEmgVulSubmitResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_emg_vul_submit(
        self,
        request: sas_20181203_models.ModifyEmgVulSubmitRequest,
    ) -> sas_20181203_models.ModifyEmgVulSubmitResponse:
        """
        @summary Runs a scan task for urgent vulnerabilities.
        
        @param request: ModifyEmgVulSubmitRequest
        @return: ModifyEmgVulSubmitResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_emg_vul_submit_with_options(request, runtime)

    async def modify_emg_vul_submit_async(
        self,
        request: sas_20181203_models.ModifyEmgVulSubmitRequest,
    ) -> sas_20181203_models.ModifyEmgVulSubmitResponse:
        """
        @summary Runs a scan task for urgent vulnerabilities.
        
        @param request: ModifyEmgVulSubmitRequest
        @return: ModifyEmgVulSubmitResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_emg_vul_submit_with_options_async(request, runtime)

    def modify_group_property_with_options(
        self,
        request: sas_20181203_models.ModifyGroupPropertyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyGroupPropertyResponse:
        """
        @summary Changes the name of a server group.
        
        @param request: ModifyGroupPropertyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyGroupPropertyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.data):
            query['Data'] = request.data
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyGroupProperty',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyGroupPropertyResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_group_property_with_options_async(
        self,
        request: sas_20181203_models.ModifyGroupPropertyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyGroupPropertyResponse:
        """
        @summary Changes the name of a server group.
        
        @param request: ModifyGroupPropertyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyGroupPropertyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.data):
            query['Data'] = request.data
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyGroupProperty',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyGroupPropertyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_group_property(
        self,
        request: sas_20181203_models.ModifyGroupPropertyRequest,
    ) -> sas_20181203_models.ModifyGroupPropertyResponse:
        """
        @summary Changes the name of a server group.
        
        @param request: ModifyGroupPropertyRequest
        @return: ModifyGroupPropertyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_group_property_with_options(request, runtime)

    async def modify_group_property_async(
        self,
        request: sas_20181203_models.ModifyGroupPropertyRequest,
    ) -> sas_20181203_models.ModifyGroupPropertyResponse:
        """
        @summary Changes the name of a server group.
        
        @param request: ModifyGroupPropertyRequest
        @return: ModifyGroupPropertyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_group_property_with_options_async(request, runtime)

    def modify_hybrid_proxy_cluster_with_options(
        self,
        request: sas_20181203_models.ModifyHybridProxyClusterRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyHybridProxyClusterResponse:
        """
        @summary 修改代理集群
        
        @param request: ModifyHybridProxyClusterRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyHybridProxyClusterResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyHybridProxyCluster',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyHybridProxyClusterResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_hybrid_proxy_cluster_with_options_async(
        self,
        request: sas_20181203_models.ModifyHybridProxyClusterRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyHybridProxyClusterResponse:
        """
        @summary 修改代理集群
        
        @param request: ModifyHybridProxyClusterRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyHybridProxyClusterResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyHybridProxyCluster',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyHybridProxyClusterResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_hybrid_proxy_cluster(
        self,
        request: sas_20181203_models.ModifyHybridProxyClusterRequest,
    ) -> sas_20181203_models.ModifyHybridProxyClusterResponse:
        """
        @summary 修改代理集群
        
        @param request: ModifyHybridProxyClusterRequest
        @return: ModifyHybridProxyClusterResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_hybrid_proxy_cluster_with_options(request, runtime)

    async def modify_hybrid_proxy_cluster_async(
        self,
        request: sas_20181203_models.ModifyHybridProxyClusterRequest,
    ) -> sas_20181203_models.ModifyHybridProxyClusterResponse:
        """
        @summary 修改代理集群
        
        @param request: ModifyHybridProxyClusterRequest
        @return: ModifyHybridProxyClusterResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_hybrid_proxy_cluster_with_options_async(request, runtime)

    def modify_hybrid_proxy_policy_with_options(
        self,
        request: sas_20181203_models.ModifyHybridProxyPolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyHybridProxyPolicyResponse:
        """
        @summary 修改代理策略
        
        @param request: ModifyHybridProxyPolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyHybridProxyPolicyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.policy_info):
            query['PolicyInfo'] = request.policy_info
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyHybridProxyPolicy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyHybridProxyPolicyResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_hybrid_proxy_policy_with_options_async(
        self,
        request: sas_20181203_models.ModifyHybridProxyPolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyHybridProxyPolicyResponse:
        """
        @summary 修改代理策略
        
        @param request: ModifyHybridProxyPolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyHybridProxyPolicyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.policy_info):
            query['PolicyInfo'] = request.policy_info
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyHybridProxyPolicy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyHybridProxyPolicyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_hybrid_proxy_policy(
        self,
        request: sas_20181203_models.ModifyHybridProxyPolicyRequest,
    ) -> sas_20181203_models.ModifyHybridProxyPolicyResponse:
        """
        @summary 修改代理策略
        
        @param request: ModifyHybridProxyPolicyRequest
        @return: ModifyHybridProxyPolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_hybrid_proxy_policy_with_options(request, runtime)

    async def modify_hybrid_proxy_policy_async(
        self,
        request: sas_20181203_models.ModifyHybridProxyPolicyRequest,
    ) -> sas_20181203_models.ModifyHybridProxyPolicyResponse:
        """
        @summary 修改代理策略
        
        @param request: ModifyHybridProxyPolicyRequest
        @return: ModifyHybridProxyPolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_hybrid_proxy_policy_with_options_async(request, runtime)

    def modify_idc_probe_with_options(
        self,
        request: sas_20181203_models.ModifyIdcProbeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyIdcProbeResponse:
        """
        @summary Modifies the configurations of an IDC probe.
        
        @param request: ModifyIdcProbeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyIdcProbeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.idc_name):
            query['IdcName'] = request.idc_name
        if not UtilClient.is_unset(request.idc_region):
            query['IdcRegion'] = request.idc_region
        if not UtilClient.is_unset(request.interval_period):
            query['IntervalPeriod'] = request.interval_period
        if not UtilClient.is_unset(request.ip_segments):
            query['IpSegments'] = request.ip_segments
        if not UtilClient.is_unset(request.linux_port):
            query['LinuxPort'] = request.linux_port
        if not UtilClient.is_unset(request.period_unit):
            query['PeriodUnit'] = request.period_unit
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        if not UtilClient.is_unset(request.win_port):
            query['WinPort'] = request.win_port
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyIdcProbe',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyIdcProbeResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_idc_probe_with_options_async(
        self,
        request: sas_20181203_models.ModifyIdcProbeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyIdcProbeResponse:
        """
        @summary Modifies the configurations of an IDC probe.
        
        @param request: ModifyIdcProbeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyIdcProbeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.idc_name):
            query['IdcName'] = request.idc_name
        if not UtilClient.is_unset(request.idc_region):
            query['IdcRegion'] = request.idc_region
        if not UtilClient.is_unset(request.interval_period):
            query['IntervalPeriod'] = request.interval_period
        if not UtilClient.is_unset(request.ip_segments):
            query['IpSegments'] = request.ip_segments
        if not UtilClient.is_unset(request.linux_port):
            query['LinuxPort'] = request.linux_port
        if not UtilClient.is_unset(request.period_unit):
            query['PeriodUnit'] = request.period_unit
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        if not UtilClient.is_unset(request.win_port):
            query['WinPort'] = request.win_port
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyIdcProbe',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyIdcProbeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_idc_probe(
        self,
        request: sas_20181203_models.ModifyIdcProbeRequest,
    ) -> sas_20181203_models.ModifyIdcProbeResponse:
        """
        @summary Modifies the configurations of an IDC probe.
        
        @param request: ModifyIdcProbeRequest
        @return: ModifyIdcProbeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_idc_probe_with_options(request, runtime)

    async def modify_idc_probe_async(
        self,
        request: sas_20181203_models.ModifyIdcProbeRequest,
    ) -> sas_20181203_models.ModifyIdcProbeResponse:
        """
        @summary Modifies the configurations of an IDC probe.
        
        @param request: ModifyIdcProbeRequest
        @return: ModifyIdcProbeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_idc_probe_with_options_async(request, runtime)

    def modify_image_fix_cycle_config_with_options(
        self,
        request: sas_20181203_models.ModifyImageFixCycleConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyImageFixCycleConfigResponse:
        """
        @summary Modifies the configurations of a scheduled image fix.
        
        @param request: ModifyImageFixCycleConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyImageFixCycleConfigResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.image_fix_cycle):
            body['ImageFixCycle'] = request.image_fix_cycle
        if not UtilClient.is_unset(request.image_fix_switch):
            body['ImageFixSwitch'] = request.image_fix_switch
        if not UtilClient.is_unset(request.image_fix_target):
            body['ImageFixTarget'] = request.image_fix_target
        if not UtilClient.is_unset(request.image_time_range):
            body['ImageTimeRange'] = request.image_time_range
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ModifyImageFixCycleConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyImageFixCycleConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_image_fix_cycle_config_with_options_async(
        self,
        request: sas_20181203_models.ModifyImageFixCycleConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyImageFixCycleConfigResponse:
        """
        @summary Modifies the configurations of a scheduled image fix.
        
        @param request: ModifyImageFixCycleConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyImageFixCycleConfigResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.image_fix_cycle):
            body['ImageFixCycle'] = request.image_fix_cycle
        if not UtilClient.is_unset(request.image_fix_switch):
            body['ImageFixSwitch'] = request.image_fix_switch
        if not UtilClient.is_unset(request.image_fix_target):
            body['ImageFixTarget'] = request.image_fix_target
        if not UtilClient.is_unset(request.image_time_range):
            body['ImageTimeRange'] = request.image_time_range
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ModifyImageFixCycleConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyImageFixCycleConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_image_fix_cycle_config(
        self,
        request: sas_20181203_models.ModifyImageFixCycleConfigRequest,
    ) -> sas_20181203_models.ModifyImageFixCycleConfigResponse:
        """
        @summary Modifies the configurations of a scheduled image fix.
        
        @param request: ModifyImageFixCycleConfigRequest
        @return: ModifyImageFixCycleConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_image_fix_cycle_config_with_options(request, runtime)

    async def modify_image_fix_cycle_config_async(
        self,
        request: sas_20181203_models.ModifyImageFixCycleConfigRequest,
    ) -> sas_20181203_models.ModifyImageFixCycleConfigResponse:
        """
        @summary Modifies the configurations of a scheduled image fix.
        
        @param request: ModifyImageFixCycleConfigRequest
        @return: ModifyImageFixCycleConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_image_fix_cycle_config_with_options_async(request, runtime)

    def modify_image_registry_with_options(
        self,
        request: sas_20181203_models.ModifyImageRegistryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyImageRegistryResponse:
        """
        @summary Modifies the transfer time of an image repository.
        
        @param request: ModifyImageRegistryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyImageRegistryResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.password):
            body['Password'] = request.password
        if not UtilClient.is_unset(request.trans_per_hour):
            body['TransPerHour'] = request.trans_per_hour
        if not UtilClient.is_unset(request.user_name):
            body['UserName'] = request.user_name
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ModifyImageRegistry',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyImageRegistryResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_image_registry_with_options_async(
        self,
        request: sas_20181203_models.ModifyImageRegistryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyImageRegistryResponse:
        """
        @summary Modifies the transfer time of an image repository.
        
        @param request: ModifyImageRegistryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyImageRegistryResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.password):
            body['Password'] = request.password
        if not UtilClient.is_unset(request.trans_per_hour):
            body['TransPerHour'] = request.trans_per_hour
        if not UtilClient.is_unset(request.user_name):
            body['UserName'] = request.user_name
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ModifyImageRegistry',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyImageRegistryResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_image_registry(
        self,
        request: sas_20181203_models.ModifyImageRegistryRequest,
    ) -> sas_20181203_models.ModifyImageRegistryResponse:
        """
        @summary Modifies the transfer time of an image repository.
        
        @param request: ModifyImageRegistryRequest
        @return: ModifyImageRegistryResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_image_registry_with_options(request, runtime)

    async def modify_image_registry_async(
        self,
        request: sas_20181203_models.ModifyImageRegistryRequest,
    ) -> sas_20181203_models.ModifyImageRegistryResponse:
        """
        @summary Modifies the transfer time of an image repository.
        
        @param request: ModifyImageRegistryRequest
        @return: ModifyImageRegistryResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_image_registry_with_options_async(request, runtime)

    def modify_instance_anti_brute_force_rule_with_options(
        self,
        request: sas_20181203_models.ModifyInstanceAntiBruteForceRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyInstanceAntiBruteForceRuleResponse:
        """
        @summary Modifies the defense rule against brute-force attacks that is applied to a specified server.
        
        @param request: ModifyInstanceAntiBruteForceRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyInstanceAntiBruteForceRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.new_rule_id):
            query['NewRuleId'] = request.new_rule_id
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyInstanceAntiBruteForceRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyInstanceAntiBruteForceRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_instance_anti_brute_force_rule_with_options_async(
        self,
        request: sas_20181203_models.ModifyInstanceAntiBruteForceRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyInstanceAntiBruteForceRuleResponse:
        """
        @summary Modifies the defense rule against brute-force attacks that is applied to a specified server.
        
        @param request: ModifyInstanceAntiBruteForceRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyInstanceAntiBruteForceRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.new_rule_id):
            query['NewRuleId'] = request.new_rule_id
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyInstanceAntiBruteForceRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyInstanceAntiBruteForceRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_instance_anti_brute_force_rule(
        self,
        request: sas_20181203_models.ModifyInstanceAntiBruteForceRuleRequest,
    ) -> sas_20181203_models.ModifyInstanceAntiBruteForceRuleResponse:
        """
        @summary Modifies the defense rule against brute-force attacks that is applied to a specified server.
        
        @param request: ModifyInstanceAntiBruteForceRuleRequest
        @return: ModifyInstanceAntiBruteForceRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_instance_anti_brute_force_rule_with_options(request, runtime)

    async def modify_instance_anti_brute_force_rule_async(
        self,
        request: sas_20181203_models.ModifyInstanceAntiBruteForceRuleRequest,
    ) -> sas_20181203_models.ModifyInstanceAntiBruteForceRuleResponse:
        """
        @summary Modifies the defense rule against brute-force attacks that is applied to a specified server.
        
        @param request: ModifyInstanceAntiBruteForceRuleRequest
        @return: ModifyInstanceAntiBruteForceRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_instance_anti_brute_force_rule_with_options_async(request, runtime)

    def modify_interception_rule_with_options(
        self,
        tmp_req: sas_20181203_models.ModifyInterceptionRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyInterceptionRuleResponse:
        """
        @summary Modifies a proactive defense rule for containers.
        
        @param tmp_req: ModifyInterceptionRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyInterceptionRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.ModifyInterceptionRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.dst_target):
            request.dst_target_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.dst_target, 'DstTarget', 'json')
        if not UtilClient.is_unset(tmp_req.src_target):
            request.src_target_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.src_target, 'SrcTarget', 'json')
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.dst_target_shrink):
            query['DstTarget'] = request.dst_target_shrink
        if not UtilClient.is_unset(request.intercept_type):
            query['InterceptType'] = request.intercept_type
        if not UtilClient.is_unset(request.order_index):
            query['OrderIndex'] = request.order_index
        if not UtilClient.is_unset(request.rule_id):
            query['RuleId'] = request.rule_id
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.rule_switch):
            query['RuleSwitch'] = request.rule_switch
        if not UtilClient.is_unset(request.src_target_shrink):
            query['SrcTarget'] = request.src_target_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyInterceptionRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyInterceptionRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_interception_rule_with_options_async(
        self,
        tmp_req: sas_20181203_models.ModifyInterceptionRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyInterceptionRuleResponse:
        """
        @summary Modifies a proactive defense rule for containers.
        
        @param tmp_req: ModifyInterceptionRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyInterceptionRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.ModifyInterceptionRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.dst_target):
            request.dst_target_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.dst_target, 'DstTarget', 'json')
        if not UtilClient.is_unset(tmp_req.src_target):
            request.src_target_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.src_target, 'SrcTarget', 'json')
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.dst_target_shrink):
            query['DstTarget'] = request.dst_target_shrink
        if not UtilClient.is_unset(request.intercept_type):
            query['InterceptType'] = request.intercept_type
        if not UtilClient.is_unset(request.order_index):
            query['OrderIndex'] = request.order_index
        if not UtilClient.is_unset(request.rule_id):
            query['RuleId'] = request.rule_id
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.rule_switch):
            query['RuleSwitch'] = request.rule_switch
        if not UtilClient.is_unset(request.src_target_shrink):
            query['SrcTarget'] = request.src_target_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyInterceptionRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyInterceptionRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_interception_rule(
        self,
        request: sas_20181203_models.ModifyInterceptionRuleRequest,
    ) -> sas_20181203_models.ModifyInterceptionRuleResponse:
        """
        @summary Modifies a proactive defense rule for containers.
        
        @param request: ModifyInterceptionRuleRequest
        @return: ModifyInterceptionRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_interception_rule_with_options(request, runtime)

    async def modify_interception_rule_async(
        self,
        request: sas_20181203_models.ModifyInterceptionRuleRequest,
    ) -> sas_20181203_models.ModifyInterceptionRuleResponse:
        """
        @summary Modifies a proactive defense rule for containers.
        
        @param request: ModifyInterceptionRuleRequest
        @return: ModifyInterceptionRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_interception_rule_with_options_async(request, runtime)

    def modify_interception_rule_switch_with_options(
        self,
        request: sas_20181203_models.ModifyInterceptionRuleSwitchRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyInterceptionRuleSwitchResponse:
        """
        @summary Enables or disables a proactive defense rule for containers.
        
        @param request: ModifyInterceptionRuleSwitchRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyInterceptionRuleSwitchResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.rule_ids):
            query['RuleIds'] = request.rule_ids
        if not UtilClient.is_unset(request.rule_switch):
            query['RuleSwitch'] = request.rule_switch
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyInterceptionRuleSwitch',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyInterceptionRuleSwitchResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_interception_rule_switch_with_options_async(
        self,
        request: sas_20181203_models.ModifyInterceptionRuleSwitchRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyInterceptionRuleSwitchResponse:
        """
        @summary Enables or disables a proactive defense rule for containers.
        
        @param request: ModifyInterceptionRuleSwitchRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyInterceptionRuleSwitchResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.rule_ids):
            query['RuleIds'] = request.rule_ids
        if not UtilClient.is_unset(request.rule_switch):
            query['RuleSwitch'] = request.rule_switch
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyInterceptionRuleSwitch',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyInterceptionRuleSwitchResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_interception_rule_switch(
        self,
        request: sas_20181203_models.ModifyInterceptionRuleSwitchRequest,
    ) -> sas_20181203_models.ModifyInterceptionRuleSwitchResponse:
        """
        @summary Enables or disables a proactive defense rule for containers.
        
        @param request: ModifyInterceptionRuleSwitchRequest
        @return: ModifyInterceptionRuleSwitchResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_interception_rule_switch_with_options(request, runtime)

    async def modify_interception_rule_switch_async(
        self,
        request: sas_20181203_models.ModifyInterceptionRuleSwitchRequest,
    ) -> sas_20181203_models.ModifyInterceptionRuleSwitchResponse:
        """
        @summary Enables or disables a proactive defense rule for containers.
        
        @param request: ModifyInterceptionRuleSwitchRequest
        @return: ModifyInterceptionRuleSwitchResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_interception_rule_switch_with_options_async(request, runtime)

    def modify_interception_target_with_options(
        self,
        request: sas_20181203_models.ModifyInterceptionTargetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyInterceptionTargetResponse:
        """
        @summary Modifies the information about a network object of the container firewall feature.
        
        @param request: ModifyInterceptionTargetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyInterceptionTargetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_name):
            query['AppName'] = request.app_name
        if not UtilClient.is_unset(request.image_list):
            query['ImageList'] = request.image_list
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        if not UtilClient.is_unset(request.tag_list):
            query['TagList'] = request.tag_list
        if not UtilClient.is_unset(request.target_id):
            query['TargetId'] = request.target_id
        if not UtilClient.is_unset(request.target_name):
            query['TargetName'] = request.target_name
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyInterceptionTarget',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyInterceptionTargetResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_interception_target_with_options_async(
        self,
        request: sas_20181203_models.ModifyInterceptionTargetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyInterceptionTargetResponse:
        """
        @summary Modifies the information about a network object of the container firewall feature.
        
        @param request: ModifyInterceptionTargetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyInterceptionTargetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_name):
            query['AppName'] = request.app_name
        if not UtilClient.is_unset(request.image_list):
            query['ImageList'] = request.image_list
        if not UtilClient.is_unset(request.namespace):
            query['Namespace'] = request.namespace
        if not UtilClient.is_unset(request.tag_list):
            query['TagList'] = request.tag_list
        if not UtilClient.is_unset(request.target_id):
            query['TargetId'] = request.target_id
        if not UtilClient.is_unset(request.target_name):
            query['TargetName'] = request.target_name
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyInterceptionTarget',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyInterceptionTargetResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_interception_target(
        self,
        request: sas_20181203_models.ModifyInterceptionTargetRequest,
    ) -> sas_20181203_models.ModifyInterceptionTargetResponse:
        """
        @summary Modifies the information about a network object of the container firewall feature.
        
        @param request: ModifyInterceptionTargetRequest
        @return: ModifyInterceptionTargetResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_interception_target_with_options(request, runtime)

    async def modify_interception_target_async(
        self,
        request: sas_20181203_models.ModifyInterceptionTargetRequest,
    ) -> sas_20181203_models.ModifyInterceptionTargetResponse:
        """
        @summary Modifies the information about a network object of the container firewall feature.
        
        @param request: ModifyInterceptionTargetRequest
        @return: ModifyInterceptionTargetResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_interception_target_with_options_async(request, runtime)

    def modify_log_meta_status_with_options(
        self,
        request: sas_20181203_models.ModifyLogMetaStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyLogMetaStatusResponse:
        """
        @summary Enables or disables the log analysis feature.
        
        @param request: ModifyLogMetaStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyLogMetaStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.log_store):
            query['LogStore'] = request.log_store
        if not UtilClient.is_unset(request.project):
            query['Project'] = request.project
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyLogMetaStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyLogMetaStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_log_meta_status_with_options_async(
        self,
        request: sas_20181203_models.ModifyLogMetaStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyLogMetaStatusResponse:
        """
        @summary Enables or disables the log analysis feature.
        
        @param request: ModifyLogMetaStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyLogMetaStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.log_store):
            query['LogStore'] = request.log_store
        if not UtilClient.is_unset(request.project):
            query['Project'] = request.project
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyLogMetaStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyLogMetaStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_log_meta_status(
        self,
        request: sas_20181203_models.ModifyLogMetaStatusRequest,
    ) -> sas_20181203_models.ModifyLogMetaStatusResponse:
        """
        @summary Enables or disables the log analysis feature.
        
        @param request: ModifyLogMetaStatusRequest
        @return: ModifyLogMetaStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_log_meta_status_with_options(request, runtime)

    async def modify_log_meta_status_async(
        self,
        request: sas_20181203_models.ModifyLogMetaStatusRequest,
    ) -> sas_20181203_models.ModifyLogMetaStatusResponse:
        """
        @summary Enables or disables the log analysis feature.
        
        @param request: ModifyLogMetaStatusRequest
        @return: ModifyLogMetaStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_log_meta_status_with_options_async(request, runtime)

    def modify_login_base_config_with_options(
        self,
        request: sas_20181203_models.ModifyLoginBaseConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyLoginBaseConfigResponse:
        """
        @summary Modifies the logon configuration for a specified asset.
        
        @param request: ModifyLoginBaseConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyLoginBaseConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config):
            query['Config'] = request.config
        if not UtilClient.is_unset(request.target):
            query['Target'] = request.target
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyLoginBaseConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyLoginBaseConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_login_base_config_with_options_async(
        self,
        request: sas_20181203_models.ModifyLoginBaseConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyLoginBaseConfigResponse:
        """
        @summary Modifies the logon configuration for a specified asset.
        
        @param request: ModifyLoginBaseConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyLoginBaseConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config):
            query['Config'] = request.config
        if not UtilClient.is_unset(request.target):
            query['Target'] = request.target
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyLoginBaseConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyLoginBaseConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_login_base_config(
        self,
        request: sas_20181203_models.ModifyLoginBaseConfigRequest,
    ) -> sas_20181203_models.ModifyLoginBaseConfigResponse:
        """
        @summary Modifies the logon configuration for a specified asset.
        
        @param request: ModifyLoginBaseConfigRequest
        @return: ModifyLoginBaseConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_login_base_config_with_options(request, runtime)

    async def modify_login_base_config_async(
        self,
        request: sas_20181203_models.ModifyLoginBaseConfigRequest,
    ) -> sas_20181203_models.ModifyLoginBaseConfigResponse:
        """
        @summary Modifies the logon configuration for a specified asset.
        
        @param request: ModifyLoginBaseConfigRequest
        @return: ModifyLoginBaseConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_login_base_config_with_options_async(request, runtime)

    def modify_login_switch_config_with_options(
        self,
        request: sas_20181203_models.ModifyLoginSwitchConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyLoginSwitchConfigResponse:
        """
        @summary Enables or disables the logon security settings for an asset.
        
        @param request: ModifyLoginSwitchConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyLoginSwitchConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.item):
            query['Item'] = request.item
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyLoginSwitchConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyLoginSwitchConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_login_switch_config_with_options_async(
        self,
        request: sas_20181203_models.ModifyLoginSwitchConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyLoginSwitchConfigResponse:
        """
        @summary Enables or disables the logon security settings for an asset.
        
        @param request: ModifyLoginSwitchConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyLoginSwitchConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.item):
            query['Item'] = request.item
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyLoginSwitchConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyLoginSwitchConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_login_switch_config(
        self,
        request: sas_20181203_models.ModifyLoginSwitchConfigRequest,
    ) -> sas_20181203_models.ModifyLoginSwitchConfigResponse:
        """
        @summary Enables or disables the logon security settings for an asset.
        
        @param request: ModifyLoginSwitchConfigRequest
        @return: ModifyLoginSwitchConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_login_switch_config_with_options(request, runtime)

    async def modify_login_switch_config_async(
        self,
        request: sas_20181203_models.ModifyLoginSwitchConfigRequest,
    ) -> sas_20181203_models.ModifyLoginSwitchConfigResponse:
        """
        @summary Enables or disables the logon security settings for an asset.
        
        @param request: ModifyLoginSwitchConfigRequest
        @return: ModifyLoginSwitchConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_login_switch_config_with_options_async(request, runtime)

    def modify_notice_config_with_options(
        self,
        request: sas_20181203_models.ModifyNoticeConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyNoticeConfigResponse:
        """
        @summary Modifies notification settings.
        
        @param request: ModifyNoticeConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyNoticeConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.project):
            query['Project'] = request.project
        if not UtilClient.is_unset(request.route):
            query['Route'] = request.route
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.time_limit):
            query['TimeLimit'] = request.time_limit
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyNoticeConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyNoticeConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_notice_config_with_options_async(
        self,
        request: sas_20181203_models.ModifyNoticeConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyNoticeConfigResponse:
        """
        @summary Modifies notification settings.
        
        @param request: ModifyNoticeConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyNoticeConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.project):
            query['Project'] = request.project
        if not UtilClient.is_unset(request.route):
            query['Route'] = request.route
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.time_limit):
            query['TimeLimit'] = request.time_limit
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyNoticeConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyNoticeConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_notice_config(
        self,
        request: sas_20181203_models.ModifyNoticeConfigRequest,
    ) -> sas_20181203_models.ModifyNoticeConfigResponse:
        """
        @summary Modifies notification settings.
        
        @param request: ModifyNoticeConfigRequest
        @return: ModifyNoticeConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_notice_config_with_options(request, runtime)

    async def modify_notice_config_async(
        self,
        request: sas_20181203_models.ModifyNoticeConfigRequest,
    ) -> sas_20181203_models.ModifyNoticeConfigResponse:
        """
        @summary Modifies notification settings.
        
        @param request: ModifyNoticeConfigRequest
        @return: ModifyNoticeConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_notice_config_with_options_async(request, runtime)

    def modify_open_log_shipper_with_options(
        self,
        request: sas_20181203_models.ModifyOpenLogShipperRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyOpenLogShipperResponse:
        """
        @summary Activates Simple Log Service.
        
        @description *Prerequisites** [Simple Log Service](https://www.alibabacloud.com/help/en/log-service/latest/billable-items) is activated. A service-linked role for Security Center is created, and Security Center is authorized to access cloud resources. You can call the [CreateServiceLinkedRole](~~CreateServiceLinkedRole~~) operation to create a service-linked role for Security Center and authorize Security Center to access cloud resources. **Scenarios** Before you use the log analysis feature of Security Center, you must call the [ModifyOpenLogShipper](~~ModifyOpenLogShipper~~) operation to activate Simple Log Service.
        
        @param request: ModifyOpenLogShipperRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyOpenLogShipperResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyOpenLogShipper',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyOpenLogShipperResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_open_log_shipper_with_options_async(
        self,
        request: sas_20181203_models.ModifyOpenLogShipperRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyOpenLogShipperResponse:
        """
        @summary Activates Simple Log Service.
        
        @description *Prerequisites** [Simple Log Service](https://www.alibabacloud.com/help/en/log-service/latest/billable-items) is activated. A service-linked role for Security Center is created, and Security Center is authorized to access cloud resources. You can call the [CreateServiceLinkedRole](~~CreateServiceLinkedRole~~) operation to create a service-linked role for Security Center and authorize Security Center to access cloud resources. **Scenarios** Before you use the log analysis feature of Security Center, you must call the [ModifyOpenLogShipper](~~ModifyOpenLogShipper~~) operation to activate Simple Log Service.
        
        @param request: ModifyOpenLogShipperRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyOpenLogShipperResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.resource_directory_account_id):
            query['ResourceDirectoryAccountId'] = request.resource_directory_account_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyOpenLogShipper',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyOpenLogShipperResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_open_log_shipper(
        self,
        request: sas_20181203_models.ModifyOpenLogShipperRequest,
    ) -> sas_20181203_models.ModifyOpenLogShipperResponse:
        """
        @summary Activates Simple Log Service.
        
        @description *Prerequisites** [Simple Log Service](https://www.alibabacloud.com/help/en/log-service/latest/billable-items) is activated. A service-linked role for Security Center is created, and Security Center is authorized to access cloud resources. You can call the [CreateServiceLinkedRole](~~CreateServiceLinkedRole~~) operation to create a service-linked role for Security Center and authorize Security Center to access cloud resources. **Scenarios** Before you use the log analysis feature of Security Center, you must call the [ModifyOpenLogShipper](~~ModifyOpenLogShipper~~) operation to activate Simple Log Service.
        
        @param request: ModifyOpenLogShipperRequest
        @return: ModifyOpenLogShipperResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_open_log_shipper_with_options(request, runtime)

    async def modify_open_log_shipper_async(
        self,
        request: sas_20181203_models.ModifyOpenLogShipperRequest,
    ) -> sas_20181203_models.ModifyOpenLogShipperResponse:
        """
        @summary Activates Simple Log Service.
        
        @description *Prerequisites** [Simple Log Service](https://www.alibabacloud.com/help/en/log-service/latest/billable-items) is activated. A service-linked role for Security Center is created, and Security Center is authorized to access cloud resources. You can call the [CreateServiceLinkedRole](~~CreateServiceLinkedRole~~) operation to create a service-linked role for Security Center and authorize Security Center to access cloud resources. **Scenarios** Before you use the log analysis feature of Security Center, you must call the [ModifyOpenLogShipper](~~ModifyOpenLogShipper~~) operation to activate Simple Log Service.
        
        @param request: ModifyOpenLogShipperRequest
        @return: ModifyOpenLogShipperResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_open_log_shipper_with_options_async(request, runtime)

    def modify_operate_vul_with_options(
        self,
        request: sas_20181203_models.ModifyOperateVulRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyOperateVulResponse:
        """
        @summary Handles detected vulnerabilities. You can fix, check, or ignore the vulnerabilities.
        
        @param request: ModifyOperateVulRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyOperateVulResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.info):
            query['Info'] = request.info
        if not UtilClient.is_unset(request.operate_type):
            query['OperateType'] = request.operate_type
        if not UtilClient.is_unset(request.reason):
            query['Reason'] = request.reason
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyOperateVul',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyOperateVulResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_operate_vul_with_options_async(
        self,
        request: sas_20181203_models.ModifyOperateVulRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyOperateVulResponse:
        """
        @summary Handles detected vulnerabilities. You can fix, check, or ignore the vulnerabilities.
        
        @param request: ModifyOperateVulRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyOperateVulResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.info):
            query['Info'] = request.info
        if not UtilClient.is_unset(request.operate_type):
            query['OperateType'] = request.operate_type
        if not UtilClient.is_unset(request.reason):
            query['Reason'] = request.reason
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyOperateVul',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyOperateVulResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_operate_vul(
        self,
        request: sas_20181203_models.ModifyOperateVulRequest,
    ) -> sas_20181203_models.ModifyOperateVulResponse:
        """
        @summary Handles detected vulnerabilities. You can fix, check, or ignore the vulnerabilities.
        
        @param request: ModifyOperateVulRequest
        @return: ModifyOperateVulResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_operate_vul_with_options(request, runtime)

    async def modify_operate_vul_async(
        self,
        request: sas_20181203_models.ModifyOperateVulRequest,
    ) -> sas_20181203_models.ModifyOperateVulResponse:
        """
        @summary Handles detected vulnerabilities. You can fix, check, or ignore the vulnerabilities.
        
        @param request: ModifyOperateVulRequest
        @return: ModifyOperateVulResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_operate_vul_with_options_async(request, runtime)

    def modify_post_pay_module_switch_with_options(
        self,
        request: sas_20181203_models.ModifyPostPayModuleSwitchRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyPostPayModuleSwitchResponse:
        """
        @summary Modifies the switch settings of pay-as-you-go modules.
        
        @param request: ModifyPostPayModuleSwitchRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyPostPayModuleSwitchResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.post_pay_instance_id):
            query['PostPayInstanceId'] = request.post_pay_instance_id
        if not UtilClient.is_unset(request.post_pay_module_switch):
            query['PostPayModuleSwitch'] = request.post_pay_module_switch
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyPostPayModuleSwitch',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyPostPayModuleSwitchResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_post_pay_module_switch_with_options_async(
        self,
        request: sas_20181203_models.ModifyPostPayModuleSwitchRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyPostPayModuleSwitchResponse:
        """
        @summary Modifies the switch settings of pay-as-you-go modules.
        
        @param request: ModifyPostPayModuleSwitchRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyPostPayModuleSwitchResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.post_pay_instance_id):
            query['PostPayInstanceId'] = request.post_pay_instance_id
        if not UtilClient.is_unset(request.post_pay_module_switch):
            query['PostPayModuleSwitch'] = request.post_pay_module_switch
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyPostPayModuleSwitch',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyPostPayModuleSwitchResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_post_pay_module_switch(
        self,
        request: sas_20181203_models.ModifyPostPayModuleSwitchRequest,
    ) -> sas_20181203_models.ModifyPostPayModuleSwitchResponse:
        """
        @summary Modifies the switch settings of pay-as-you-go modules.
        
        @param request: ModifyPostPayModuleSwitchRequest
        @return: ModifyPostPayModuleSwitchResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_post_pay_module_switch_with_options(request, runtime)

    async def modify_post_pay_module_switch_async(
        self,
        request: sas_20181203_models.ModifyPostPayModuleSwitchRequest,
    ) -> sas_20181203_models.ModifyPostPayModuleSwitchResponse:
        """
        @summary Modifies the switch settings of pay-as-you-go modules.
        
        @param request: ModifyPostPayModuleSwitchRequest
        @return: ModifyPostPayModuleSwitchResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_post_pay_module_switch_with_options_async(request, runtime)

    def modify_process_white_list_with_options(
        self,
        request: sas_20181203_models.ModifyProcessWhiteListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyProcessWhiteListResponse:
        """
        @summary Adds a process to or removes a process from the whitelist by using the application whitelist feature.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
        
        @param request: ModifyProcessWhiteListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyProcessWhiteListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.md_5s):
            query['Md5s'] = request.md_5s
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyProcessWhiteList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyProcessWhiteListResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_process_white_list_with_options_async(
        self,
        request: sas_20181203_models.ModifyProcessWhiteListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyProcessWhiteListResponse:
        """
        @summary Adds a process to or removes a process from the whitelist by using the application whitelist feature.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
        
        @param request: ModifyProcessWhiteListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyProcessWhiteListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.md_5s):
            query['Md5s'] = request.md_5s
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyProcessWhiteList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyProcessWhiteListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_process_white_list(
        self,
        request: sas_20181203_models.ModifyProcessWhiteListRequest,
    ) -> sas_20181203_models.ModifyProcessWhiteListResponse:
        """
        @summary Adds a process to or removes a process from the whitelist by using the application whitelist feature.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
        
        @param request: ModifyProcessWhiteListRequest
        @return: ModifyProcessWhiteListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_process_white_list_with_options(request, runtime)

    async def modify_process_white_list_async(
        self,
        request: sas_20181203_models.ModifyProcessWhiteListRequest,
    ) -> sas_20181203_models.ModifyProcessWhiteListResponse:
        """
        @summary Adds a process to or removes a process from the whitelist by using the application whitelist feature.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
        
        @param request: ModifyProcessWhiteListRequest
        @return: ModifyProcessWhiteListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_process_white_list_with_options_async(request, runtime)

    def modify_property_schedule_config_with_options(
        self,
        request: sas_20181203_models.ModifyPropertyScheduleConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyPropertyScheduleConfigResponse:
        """
        @summary Modifies the collection frequency of asset fingerprints for an automatic periodic collection task.
        
        @param request: ModifyPropertyScheduleConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyPropertyScheduleConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.schedule_time):
            query['ScheduleTime'] = request.schedule_time
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyPropertyScheduleConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyPropertyScheduleConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_property_schedule_config_with_options_async(
        self,
        request: sas_20181203_models.ModifyPropertyScheduleConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyPropertyScheduleConfigResponse:
        """
        @summary Modifies the collection frequency of asset fingerprints for an automatic periodic collection task.
        
        @param request: ModifyPropertyScheduleConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyPropertyScheduleConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.schedule_time):
            query['ScheduleTime'] = request.schedule_time
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyPropertyScheduleConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyPropertyScheduleConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_property_schedule_config(
        self,
        request: sas_20181203_models.ModifyPropertyScheduleConfigRequest,
    ) -> sas_20181203_models.ModifyPropertyScheduleConfigResponse:
        """
        @summary Modifies the collection frequency of asset fingerprints for an automatic periodic collection task.
        
        @param request: ModifyPropertyScheduleConfigRequest
        @return: ModifyPropertyScheduleConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_property_schedule_config_with_options(request, runtime)

    async def modify_property_schedule_config_async(
        self,
        request: sas_20181203_models.ModifyPropertyScheduleConfigRequest,
    ) -> sas_20181203_models.ModifyPropertyScheduleConfigResponse:
        """
        @summary Modifies the collection frequency of asset fingerprints for an automatic periodic collection task.
        
        @param request: ModifyPropertyScheduleConfigRequest
        @return: ModifyPropertyScheduleConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_property_schedule_config_with_options_async(request, runtime)

    def modify_push_all_task_with_options(
        self,
        request: sas_20181203_models.ModifyPushAllTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyPushAllTaskResponse:
        """
        @summary Performs security check tasks on servers with a few clicks.
        
        @param request: ModifyPushAllTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyPushAllTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.tasks):
            query['Tasks'] = request.tasks
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyPushAllTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyPushAllTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_push_all_task_with_options_async(
        self,
        request: sas_20181203_models.ModifyPushAllTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyPushAllTaskResponse:
        """
        @summary Performs security check tasks on servers with a few clicks.
        
        @param request: ModifyPushAllTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyPushAllTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.tasks):
            query['Tasks'] = request.tasks
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyPushAllTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyPushAllTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_push_all_task(
        self,
        request: sas_20181203_models.ModifyPushAllTaskRequest,
    ) -> sas_20181203_models.ModifyPushAllTaskResponse:
        """
        @summary Performs security check tasks on servers with a few clicks.
        
        @param request: ModifyPushAllTaskRequest
        @return: ModifyPushAllTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_push_all_task_with_options(request, runtime)

    async def modify_push_all_task_async(
        self,
        request: sas_20181203_models.ModifyPushAllTaskRequest,
    ) -> sas_20181203_models.ModifyPushAllTaskResponse:
        """
        @summary Performs security check tasks on servers with a few clicks.
        
        @param request: ModifyPushAllTaskRequest
        @return: ModifyPushAllTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_push_all_task_with_options_async(request, runtime)

    def modify_refresh_process_info_with_options(
        self,
        request: sas_20181203_models.ModifyRefreshProcessInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyRefreshProcessInfoResponse:
        """
        @summary Refreshes the list of processes that are associated with a Linux software vulnerability.
        
        @param request: ModifyRefreshProcessInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyRefreshProcessInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyRefreshProcessInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyRefreshProcessInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_refresh_process_info_with_options_async(
        self,
        request: sas_20181203_models.ModifyRefreshProcessInfoRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyRefreshProcessInfoResponse:
        """
        @summary Refreshes the list of processes that are associated with a Linux software vulnerability.
        
        @param request: ModifyRefreshProcessInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyRefreshProcessInfoResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyRefreshProcessInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyRefreshProcessInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_refresh_process_info(
        self,
        request: sas_20181203_models.ModifyRefreshProcessInfoRequest,
    ) -> sas_20181203_models.ModifyRefreshProcessInfoResponse:
        """
        @summary Refreshes the list of processes that are associated with a Linux software vulnerability.
        
        @param request: ModifyRefreshProcessInfoRequest
        @return: ModifyRefreshProcessInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_refresh_process_info_with_options(request, runtime)

    async def modify_refresh_process_info_async(
        self,
        request: sas_20181203_models.ModifyRefreshProcessInfoRequest,
    ) -> sas_20181203_models.ModifyRefreshProcessInfoResponse:
        """
        @summary Refreshes the list of processes that are associated with a Linux software vulnerability.
        
        @param request: ModifyRefreshProcessInfoRequest
        @return: ModifyRefreshProcessInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_refresh_process_info_with_options_async(request, runtime)

    def modify_sas_container_web_defense_rule_with_options(
        self,
        request: sas_20181203_models.ModifySasContainerWebDefenseRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifySasContainerWebDefenseRuleResponse:
        """
        @summary Modifies a rule for container tamper-proofing.
        
        @param request: ModifySasContainerWebDefenseRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifySasContainerWebDefenseRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.path_conf_dtolist):
            query['PathConfDTOList'] = request.path_conf_dtolist
        if not UtilClient.is_unset(request.rule_id):
            query['RuleId'] = request.rule_id
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifySasContainerWebDefenseRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifySasContainerWebDefenseRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_sas_container_web_defense_rule_with_options_async(
        self,
        request: sas_20181203_models.ModifySasContainerWebDefenseRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifySasContainerWebDefenseRuleResponse:
        """
        @summary Modifies a rule for container tamper-proofing.
        
        @param request: ModifySasContainerWebDefenseRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifySasContainerWebDefenseRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.path_conf_dtolist):
            query['PathConfDTOList'] = request.path_conf_dtolist
        if not UtilClient.is_unset(request.rule_id):
            query['RuleId'] = request.rule_id
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifySasContainerWebDefenseRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifySasContainerWebDefenseRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_sas_container_web_defense_rule(
        self,
        request: sas_20181203_models.ModifySasContainerWebDefenseRuleRequest,
    ) -> sas_20181203_models.ModifySasContainerWebDefenseRuleResponse:
        """
        @summary Modifies a rule for container tamper-proofing.
        
        @param request: ModifySasContainerWebDefenseRuleRequest
        @return: ModifySasContainerWebDefenseRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_sas_container_web_defense_rule_with_options(request, runtime)

    async def modify_sas_container_web_defense_rule_async(
        self,
        request: sas_20181203_models.ModifySasContainerWebDefenseRuleRequest,
    ) -> sas_20181203_models.ModifySasContainerWebDefenseRuleResponse:
        """
        @summary Modifies a rule for container tamper-proofing.
        
        @param request: ModifySasContainerWebDefenseRuleRequest
        @return: ModifySasContainerWebDefenseRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_sas_container_web_defense_rule_with_options_async(request, runtime)

    def modify_search_condition_with_options(
        self,
        request: sas_20181203_models.ModifySearchConditionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifySearchConditionResponse:
        """
        @summary Modifies common filter conditions to search for assets.
        
        @param request: ModifySearchConditionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifySearchConditionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.filter_conditions):
            query['FilterConditions'] = request.filter_conditions
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifySearchCondition',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifySearchConditionResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_search_condition_with_options_async(
        self,
        request: sas_20181203_models.ModifySearchConditionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifySearchConditionResponse:
        """
        @summary Modifies common filter conditions to search for assets.
        
        @param request: ModifySearchConditionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifySearchConditionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.filter_conditions):
            query['FilterConditions'] = request.filter_conditions
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifySearchCondition',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifySearchConditionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_search_condition(
        self,
        request: sas_20181203_models.ModifySearchConditionRequest,
    ) -> sas_20181203_models.ModifySearchConditionResponse:
        """
        @summary Modifies common filter conditions to search for assets.
        
        @param request: ModifySearchConditionRequest
        @return: ModifySearchConditionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_search_condition_with_options(request, runtime)

    async def modify_search_condition_async(
        self,
        request: sas_20181203_models.ModifySearchConditionRequest,
    ) -> sas_20181203_models.ModifySearchConditionResponse:
        """
        @summary Modifies common filter conditions to search for assets.
        
        @param request: ModifySearchConditionRequest
        @return: ModifySearchConditionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_search_condition_with_options_async(request, runtime)

    def modify_security_check_schedule_config_with_options(
        self,
        request: sas_20181203_models.ModifySecurityCheckScheduleConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifySecurityCheckScheduleConfigResponse:
        """
        @deprecated OpenAPI ModifySecurityCheckScheduleConfig is deprecated, please use Sas::2018-12-03::ChangeCheckConfig instead.
        
        @summary Specifies the time when an automatic configuration check is performed on cloud services.
        
        @description This operation is phased out. You can use the ChangeCheckConfig operation.
        
        @param request: ModifySecurityCheckScheduleConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifySecurityCheckScheduleConfigResponse
        Deprecated
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.days_of_week):
            query['DaysOfWeek'] = request.days_of_week
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifySecurityCheckScheduleConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifySecurityCheckScheduleConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_security_check_schedule_config_with_options_async(
        self,
        request: sas_20181203_models.ModifySecurityCheckScheduleConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifySecurityCheckScheduleConfigResponse:
        """
        @deprecated OpenAPI ModifySecurityCheckScheduleConfig is deprecated, please use Sas::2018-12-03::ChangeCheckConfig instead.
        
        @summary Specifies the time when an automatic configuration check is performed on cloud services.
        
        @description This operation is phased out. You can use the ChangeCheckConfig operation.
        
        @param request: ModifySecurityCheckScheduleConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifySecurityCheckScheduleConfigResponse
        Deprecated
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.days_of_week):
            query['DaysOfWeek'] = request.days_of_week
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifySecurityCheckScheduleConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifySecurityCheckScheduleConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_security_check_schedule_config(
        self,
        request: sas_20181203_models.ModifySecurityCheckScheduleConfigRequest,
    ) -> sas_20181203_models.ModifySecurityCheckScheduleConfigResponse:
        """
        @deprecated OpenAPI ModifySecurityCheckScheduleConfig is deprecated, please use Sas::2018-12-03::ChangeCheckConfig instead.
        
        @summary Specifies the time when an automatic configuration check is performed on cloud services.
        
        @description This operation is phased out. You can use the ChangeCheckConfig operation.
        
        @param request: ModifySecurityCheckScheduleConfigRequest
        @return: ModifySecurityCheckScheduleConfigResponse
        Deprecated
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_security_check_schedule_config_with_options(request, runtime)

    async def modify_security_check_schedule_config_async(
        self,
        request: sas_20181203_models.ModifySecurityCheckScheduleConfigRequest,
    ) -> sas_20181203_models.ModifySecurityCheckScheduleConfigResponse:
        """
        @deprecated OpenAPI ModifySecurityCheckScheduleConfig is deprecated, please use Sas::2018-12-03::ChangeCheckConfig instead.
        
        @summary Specifies the time when an automatic configuration check is performed on cloud services.
        
        @description This operation is phased out. You can use the ChangeCheckConfig operation.
        
        @param request: ModifySecurityCheckScheduleConfigRequest
        @return: ModifySecurityCheckScheduleConfigResponse
        Deprecated
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_security_check_schedule_config_with_options_async(request, runtime)

    def modify_security_event_mark_miss_individually_with_options(
        self,
        request: sas_20181203_models.ModifySecurityEventMarkMissIndividuallyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifySecurityEventMarkMissIndividuallyResponse:
        """
        @summary Modifies the alert handling rule for alerts that are added to the whitelist by asset.
        
        @param request: ModifySecurityEventMarkMissIndividuallyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifySecurityEventMarkMissIndividuallyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        body = {}
        if not UtilClient.is_unset(request.delete_mark_miss_param):
            body['DeleteMarkMissParam'] = request.delete_mark_miss_param
        if not UtilClient.is_unset(request.from_):
            body['From'] = request.from_
        if not UtilClient.is_unset(request.insert_mark_miss_param):
            body['InsertMarkMissParam'] = request.insert_mark_miss_param
        if not UtilClient.is_unset(request.lang):
            body['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ModifySecurityEventMarkMissIndividually',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifySecurityEventMarkMissIndividuallyResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_security_event_mark_miss_individually_with_options_async(
        self,
        request: sas_20181203_models.ModifySecurityEventMarkMissIndividuallyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifySecurityEventMarkMissIndividuallyResponse:
        """
        @summary Modifies the alert handling rule for alerts that are added to the whitelist by asset.
        
        @param request: ModifySecurityEventMarkMissIndividuallyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifySecurityEventMarkMissIndividuallyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        body = {}
        if not UtilClient.is_unset(request.delete_mark_miss_param):
            body['DeleteMarkMissParam'] = request.delete_mark_miss_param
        if not UtilClient.is_unset(request.from_):
            body['From'] = request.from_
        if not UtilClient.is_unset(request.insert_mark_miss_param):
            body['InsertMarkMissParam'] = request.insert_mark_miss_param
        if not UtilClient.is_unset(request.lang):
            body['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ModifySecurityEventMarkMissIndividually',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifySecurityEventMarkMissIndividuallyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_security_event_mark_miss_individually(
        self,
        request: sas_20181203_models.ModifySecurityEventMarkMissIndividuallyRequest,
    ) -> sas_20181203_models.ModifySecurityEventMarkMissIndividuallyResponse:
        """
        @summary Modifies the alert handling rule for alerts that are added to the whitelist by asset.
        
        @param request: ModifySecurityEventMarkMissIndividuallyRequest
        @return: ModifySecurityEventMarkMissIndividuallyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_security_event_mark_miss_individually_with_options(request, runtime)

    async def modify_security_event_mark_miss_individually_async(
        self,
        request: sas_20181203_models.ModifySecurityEventMarkMissIndividuallyRequest,
    ) -> sas_20181203_models.ModifySecurityEventMarkMissIndividuallyResponse:
        """
        @summary Modifies the alert handling rule for alerts that are added to the whitelist by asset.
        
        @param request: ModifySecurityEventMarkMissIndividuallyRequest
        @return: ModifySecurityEventMarkMissIndividuallyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_security_event_mark_miss_individually_with_options_async(request, runtime)

    def modify_serverless_auth_to_machine_with_options(
        self,
        request: sas_20181203_models.ModifyServerlessAuthToMachineRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyServerlessAuthToMachineResponse:
        """
        @summary Manage Serverless Asset Authorization
        
        @param request: ModifyServerlessAuthToMachineRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyServerlessAuthToMachineResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_criteria):
            query['AppCriteria'] = request.app_criteria
        if not UtilClient.is_unset(request.auth_item):
            query['AuthItem'] = request.auth_item
        if not UtilClient.is_unset(request.auto_bind):
            query['AutoBind'] = request.auto_bind
        if not UtilClient.is_unset(request.bind_all):
            query['BindAll'] = request.bind_all
        if not UtilClient.is_unset(request.bind_app_list):
            query['BindAppList'] = request.bind_app_list
        if not UtilClient.is_unset(request.bind_asset_type):
            query['BindAssetType'] = request.bind_asset_type
        if not UtilClient.is_unset(request.bind_uuid_list):
            query['BindUuidList'] = request.bind_uuid_list
        if not UtilClient.is_unset(request.criteria):
            query['Criteria'] = request.criteria
        if not UtilClient.is_unset(request.logical_exp):
            query['LogicalExp'] = request.logical_exp
        if not UtilClient.is_unset(request.ntm_version):
            query['NtmVersion'] = request.ntm_version
        if not UtilClient.is_unset(request.pre_bind):
            query['PreBind'] = request.pre_bind
        if not UtilClient.is_unset(request.pre_bind_order_id):
            query['PreBindOrderId'] = request.pre_bind_order_id
        if not UtilClient.is_unset(request.resource_directory_uid):
            query['ResourceDirectoryUid'] = request.resource_directory_uid
        if not UtilClient.is_unset(request.un_bind_app_list):
            query['UnBindAppList'] = request.un_bind_app_list
        if not UtilClient.is_unset(request.un_bind_uuid_list):
            query['UnBindUuidList'] = request.un_bind_uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyServerlessAuthToMachine',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyServerlessAuthToMachineResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_serverless_auth_to_machine_with_options_async(
        self,
        request: sas_20181203_models.ModifyServerlessAuthToMachineRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyServerlessAuthToMachineResponse:
        """
        @summary Manage Serverless Asset Authorization
        
        @param request: ModifyServerlessAuthToMachineRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyServerlessAuthToMachineResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.app_criteria):
            query['AppCriteria'] = request.app_criteria
        if not UtilClient.is_unset(request.auth_item):
            query['AuthItem'] = request.auth_item
        if not UtilClient.is_unset(request.auto_bind):
            query['AutoBind'] = request.auto_bind
        if not UtilClient.is_unset(request.bind_all):
            query['BindAll'] = request.bind_all
        if not UtilClient.is_unset(request.bind_app_list):
            query['BindAppList'] = request.bind_app_list
        if not UtilClient.is_unset(request.bind_asset_type):
            query['BindAssetType'] = request.bind_asset_type
        if not UtilClient.is_unset(request.bind_uuid_list):
            query['BindUuidList'] = request.bind_uuid_list
        if not UtilClient.is_unset(request.criteria):
            query['Criteria'] = request.criteria
        if not UtilClient.is_unset(request.logical_exp):
            query['LogicalExp'] = request.logical_exp
        if not UtilClient.is_unset(request.ntm_version):
            query['NtmVersion'] = request.ntm_version
        if not UtilClient.is_unset(request.pre_bind):
            query['PreBind'] = request.pre_bind
        if not UtilClient.is_unset(request.pre_bind_order_id):
            query['PreBindOrderId'] = request.pre_bind_order_id
        if not UtilClient.is_unset(request.resource_directory_uid):
            query['ResourceDirectoryUid'] = request.resource_directory_uid
        if not UtilClient.is_unset(request.un_bind_app_list):
            query['UnBindAppList'] = request.un_bind_app_list
        if not UtilClient.is_unset(request.un_bind_uuid_list):
            query['UnBindUuidList'] = request.un_bind_uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyServerlessAuthToMachine',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyServerlessAuthToMachineResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_serverless_auth_to_machine(
        self,
        request: sas_20181203_models.ModifyServerlessAuthToMachineRequest,
    ) -> sas_20181203_models.ModifyServerlessAuthToMachineResponse:
        """
        @summary Manage Serverless Asset Authorization
        
        @param request: ModifyServerlessAuthToMachineRequest
        @return: ModifyServerlessAuthToMachineResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_serverless_auth_to_machine_with_options(request, runtime)

    async def modify_serverless_auth_to_machine_async(
        self,
        request: sas_20181203_models.ModifyServerlessAuthToMachineRequest,
    ) -> sas_20181203_models.ModifyServerlessAuthToMachineResponse:
        """
        @summary Manage Serverless Asset Authorization
        
        @param request: ModifyServerlessAuthToMachineRequest
        @return: ModifyServerlessAuthToMachineResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_serverless_auth_to_machine_with_options_async(request, runtime)

    def modify_soar_strategy_subscribe_with_options(
        self,
        request: sas_20181203_models.ModifySoarStrategySubscribeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifySoarStrategySubscribeResponse:
        """
        @summary Creates or deletes a policy template on the My Policies tab of the Playbook page.
        
        @description Only the Enterprise and Ultimate editions of Security Center support this API operation.
        
        @param request: ModifySoarStrategySubscribeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifySoarStrategySubscribeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        if not UtilClient.is_unset(request.subscribe_status):
            query['SubscribeStatus'] = request.subscribe_status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifySoarStrategySubscribe',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifySoarStrategySubscribeResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_soar_strategy_subscribe_with_options_async(
        self,
        request: sas_20181203_models.ModifySoarStrategySubscribeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifySoarStrategySubscribeResponse:
        """
        @summary Creates or deletes a policy template on the My Policies tab of the Playbook page.
        
        @description Only the Enterprise and Ultimate editions of Security Center support this API operation.
        
        @param request: ModifySoarStrategySubscribeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifySoarStrategySubscribeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        if not UtilClient.is_unset(request.subscribe_status):
            query['SubscribeStatus'] = request.subscribe_status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifySoarStrategySubscribe',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifySoarStrategySubscribeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_soar_strategy_subscribe(
        self,
        request: sas_20181203_models.ModifySoarStrategySubscribeRequest,
    ) -> sas_20181203_models.ModifySoarStrategySubscribeResponse:
        """
        @summary Creates or deletes a policy template on the My Policies tab of the Playbook page.
        
        @description Only the Enterprise and Ultimate editions of Security Center support this API operation.
        
        @param request: ModifySoarStrategySubscribeRequest
        @return: ModifySoarStrategySubscribeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_soar_strategy_subscribe_with_options(request, runtime)

    async def modify_soar_strategy_subscribe_async(
        self,
        request: sas_20181203_models.ModifySoarStrategySubscribeRequest,
    ) -> sas_20181203_models.ModifySoarStrategySubscribeResponse:
        """
        @summary Creates or deletes a policy template on the My Policies tab of the Playbook page.
        
        @description Only the Enterprise and Ultimate editions of Security Center support this API operation.
        
        @param request: ModifySoarStrategySubscribeRequest
        @return: ModifySoarStrategySubscribeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_soar_strategy_subscribe_with_options_async(request, runtime)

    def modify_start_vul_scan_with_options(
        self,
        request: sas_20181203_models.ModifyStartVulScanRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyStartVulScanResponse:
        """
        @summary Enables the quick scan feature. You can also enable the feature on the Vulnerabilities page of the Security Center console.
        
        @param request: ModifyStartVulScanRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyStartVulScanResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.types):
            query['Types'] = request.types
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyStartVulScan',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyStartVulScanResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_start_vul_scan_with_options_async(
        self,
        request: sas_20181203_models.ModifyStartVulScanRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyStartVulScanResponse:
        """
        @summary Enables the quick scan feature. You can also enable the feature on the Vulnerabilities page of the Security Center console.
        
        @param request: ModifyStartVulScanRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyStartVulScanResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.types):
            query['Types'] = request.types
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyStartVulScan',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyStartVulScanResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_start_vul_scan(
        self,
        request: sas_20181203_models.ModifyStartVulScanRequest,
    ) -> sas_20181203_models.ModifyStartVulScanResponse:
        """
        @summary Enables the quick scan feature. You can also enable the feature on the Vulnerabilities page of the Security Center console.
        
        @param request: ModifyStartVulScanRequest
        @return: ModifyStartVulScanResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_start_vul_scan_with_options(request, runtime)

    async def modify_start_vul_scan_async(
        self,
        request: sas_20181203_models.ModifyStartVulScanRequest,
    ) -> sas_20181203_models.ModifyStartVulScanResponse:
        """
        @summary Enables the quick scan feature. You can also enable the feature on the Vulnerabilities page of the Security Center console.
        
        @param request: ModifyStartVulScanRequest
        @return: ModifyStartVulScanResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_start_vul_scan_with_options_async(request, runtime)

    def modify_strategy_with_options(
        self,
        request: sas_20181203_models.ModifyStrategyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyStrategyResponse:
        """
        @summary Modifies a baseline check policy.
        
        @param request: ModifyStrategyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyStrategyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.custom_type):
            query['CustomType'] = request.custom_type
        if not UtilClient.is_unset(request.cycle_days):
            query['CycleDays'] = request.cycle_days
        if not UtilClient.is_unset(request.cycle_start_time):
            query['CycleStartTime'] = request.cycle_start_time
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.risk_custom_params):
            query['RiskCustomParams'] = request.risk_custom_params
        if not UtilClient.is_unset(request.risk_sub_type_name):
            query['RiskSubTypeName'] = request.risk_sub_type_name
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyStrategy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyStrategyResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_strategy_with_options_async(
        self,
        request: sas_20181203_models.ModifyStrategyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyStrategyResponse:
        """
        @summary Modifies a baseline check policy.
        
        @param request: ModifyStrategyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyStrategyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.custom_type):
            query['CustomType'] = request.custom_type
        if not UtilClient.is_unset(request.cycle_days):
            query['CycleDays'] = request.cycle_days
        if not UtilClient.is_unset(request.cycle_start_time):
            query['CycleStartTime'] = request.cycle_start_time
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.risk_custom_params):
            query['RiskCustomParams'] = request.risk_custom_params
        if not UtilClient.is_unset(request.risk_sub_type_name):
            query['RiskSubTypeName'] = request.risk_sub_type_name
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyStrategy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyStrategyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_strategy(
        self,
        request: sas_20181203_models.ModifyStrategyRequest,
    ) -> sas_20181203_models.ModifyStrategyResponse:
        """
        @summary Modifies a baseline check policy.
        
        @param request: ModifyStrategyRequest
        @return: ModifyStrategyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_strategy_with_options(request, runtime)

    async def modify_strategy_async(
        self,
        request: sas_20181203_models.ModifyStrategyRequest,
    ) -> sas_20181203_models.ModifyStrategyResponse:
        """
        @summary Modifies a baseline check policy.
        
        @param request: ModifyStrategyRequest
        @return: ModifyStrategyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_strategy_with_options_async(request, runtime)

    def modify_strategy_target_with_options(
        self,
        request: sas_20181203_models.ModifyStrategyTargetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyStrategyTargetResponse:
        """
        @summary Modifies the servers to which a baseline check policy is applied.
        
        @param request: ModifyStrategyTargetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyStrategyTargetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config):
            query['Config'] = request.config
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.target):
            query['Target'] = request.target
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyStrategyTarget',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyStrategyTargetResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_strategy_target_with_options_async(
        self,
        request: sas_20181203_models.ModifyStrategyTargetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyStrategyTargetResponse:
        """
        @summary Modifies the servers to which a baseline check policy is applied.
        
        @param request: ModifyStrategyTargetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyStrategyTargetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config):
            query['Config'] = request.config
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.target):
            query['Target'] = request.target
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyStrategyTarget',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyStrategyTargetResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_strategy_target(
        self,
        request: sas_20181203_models.ModifyStrategyTargetRequest,
    ) -> sas_20181203_models.ModifyStrategyTargetResponse:
        """
        @summary Modifies the servers to which a baseline check policy is applied.
        
        @param request: ModifyStrategyTargetRequest
        @return: ModifyStrategyTargetResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_strategy_target_with_options(request, runtime)

    async def modify_strategy_target_async(
        self,
        request: sas_20181203_models.ModifyStrategyTargetRequest,
    ) -> sas_20181203_models.ModifyStrategyTargetResponse:
        """
        @summary Modifies the servers to which a baseline check policy is applied.
        
        @param request: ModifyStrategyTargetRequest
        @return: ModifyStrategyTargetResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_strategy_target_with_options_async(request, runtime)

    def modify_tag_with_uuid_with_options(
        self,
        request: sas_20181203_models.ModifyTagWithUuidRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyTagWithUuidResponse:
        """
        @summary Modifies the names of the tags that are added to assets, or modifies the tags for assets.
        
        @param request: ModifyTagWithUuidRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyTagWithUuidResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.machine_types):
            query['MachineTypes'] = request.machine_types
        if not UtilClient.is_unset(request.tag_id):
            query['TagId'] = request.tag_id
        if not UtilClient.is_unset(request.tag_list):
            query['TagList'] = request.tag_list
        if not UtilClient.is_unset(request.target):
            query['Target'] = request.target
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyTagWithUuid',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyTagWithUuidResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_tag_with_uuid_with_options_async(
        self,
        request: sas_20181203_models.ModifyTagWithUuidRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyTagWithUuidResponse:
        """
        @summary Modifies the names of the tags that are added to assets, or modifies the tags for assets.
        
        @param request: ModifyTagWithUuidRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyTagWithUuidResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.machine_types):
            query['MachineTypes'] = request.machine_types
        if not UtilClient.is_unset(request.tag_id):
            query['TagId'] = request.tag_id
        if not UtilClient.is_unset(request.tag_list):
            query['TagList'] = request.tag_list
        if not UtilClient.is_unset(request.target):
            query['Target'] = request.target
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyTagWithUuid',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyTagWithUuidResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_tag_with_uuid(
        self,
        request: sas_20181203_models.ModifyTagWithUuidRequest,
    ) -> sas_20181203_models.ModifyTagWithUuidResponse:
        """
        @summary Modifies the names of the tags that are added to assets, or modifies the tags for assets.
        
        @param request: ModifyTagWithUuidRequest
        @return: ModifyTagWithUuidResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_tag_with_uuid_with_options(request, runtime)

    async def modify_tag_with_uuid_async(
        self,
        request: sas_20181203_models.ModifyTagWithUuidRequest,
    ) -> sas_20181203_models.ModifyTagWithUuidResponse:
        """
        @summary Modifies the names of the tags that are added to assets, or modifies the tags for assets.
        
        @param request: ModifyTagWithUuidRequest
        @return: ModifyTagWithUuidResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_tag_with_uuid_with_options_async(request, runtime)

    def modify_uni_backup_policy_with_options(
        self,
        tmp_req: sas_20181203_models.ModifyUniBackupPolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyUniBackupPolicyResponse:
        """
        @summary Modifies an anti-ransomware policy for databases.
        
        @param tmp_req: ModifyUniBackupPolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyUniBackupPolicyResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.ModifyUniBackupPolicyShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.full_plan):
            request.full_plan_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.full_plan, 'FullPlan', 'json')
        if not UtilClient.is_unset(tmp_req.inc_plan):
            request.inc_plan_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.inc_plan, 'IncPlan', 'json')
        query = {}
        if not UtilClient.is_unset(request.account_name):
            query['AccountName'] = request.account_name
        if not UtilClient.is_unset(request.account_password):
            query['AccountPassword'] = request.account_password
        if not UtilClient.is_unset(request.full_plan_shrink):
            query['FullPlan'] = request.full_plan_shrink
        if not UtilClient.is_unset(request.inc_plan_shrink):
            query['IncPlan'] = request.inc_plan_shrink
        if not UtilClient.is_unset(request.policy_id):
            query['PolicyId'] = request.policy_id
        if not UtilClient.is_unset(request.policy_name):
            query['PolicyName'] = request.policy_name
        if not UtilClient.is_unset(request.policy_status):
            query['PolicyStatus'] = request.policy_status
        if not UtilClient.is_unset(request.retention):
            query['Retention'] = request.retention
        if not UtilClient.is_unset(request.speed_limiter):
            query['SpeedLimiter'] = request.speed_limiter
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyUniBackupPolicy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyUniBackupPolicyResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_uni_backup_policy_with_options_async(
        self,
        tmp_req: sas_20181203_models.ModifyUniBackupPolicyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyUniBackupPolicyResponse:
        """
        @summary Modifies an anti-ransomware policy for databases.
        
        @param tmp_req: ModifyUniBackupPolicyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyUniBackupPolicyResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.ModifyUniBackupPolicyShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.full_plan):
            request.full_plan_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.full_plan, 'FullPlan', 'json')
        if not UtilClient.is_unset(tmp_req.inc_plan):
            request.inc_plan_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.inc_plan, 'IncPlan', 'json')
        query = {}
        if not UtilClient.is_unset(request.account_name):
            query['AccountName'] = request.account_name
        if not UtilClient.is_unset(request.account_password):
            query['AccountPassword'] = request.account_password
        if not UtilClient.is_unset(request.full_plan_shrink):
            query['FullPlan'] = request.full_plan_shrink
        if not UtilClient.is_unset(request.inc_plan_shrink):
            query['IncPlan'] = request.inc_plan_shrink
        if not UtilClient.is_unset(request.policy_id):
            query['PolicyId'] = request.policy_id
        if not UtilClient.is_unset(request.policy_name):
            query['PolicyName'] = request.policy_name
        if not UtilClient.is_unset(request.policy_status):
            query['PolicyStatus'] = request.policy_status
        if not UtilClient.is_unset(request.retention):
            query['Retention'] = request.retention
        if not UtilClient.is_unset(request.speed_limiter):
            query['SpeedLimiter'] = request.speed_limiter
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyUniBackupPolicy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyUniBackupPolicyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_uni_backup_policy(
        self,
        request: sas_20181203_models.ModifyUniBackupPolicyRequest,
    ) -> sas_20181203_models.ModifyUniBackupPolicyResponse:
        """
        @summary Modifies an anti-ransomware policy for databases.
        
        @param request: ModifyUniBackupPolicyRequest
        @return: ModifyUniBackupPolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_uni_backup_policy_with_options(request, runtime)

    async def modify_uni_backup_policy_async(
        self,
        request: sas_20181203_models.ModifyUniBackupPolicyRequest,
    ) -> sas_20181203_models.ModifyUniBackupPolicyResponse:
        """
        @summary Modifies an anti-ransomware policy for databases.
        
        @param request: ModifyUniBackupPolicyRequest
        @return: ModifyUniBackupPolicyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_uni_backup_policy_with_options_async(request, runtime)

    def modify_vpc_honey_pot_with_options(
        self,
        request: sas_20181203_models.ModifyVpcHoneyPotRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyVpcHoneyPotResponse:
        """
        @deprecated OpenAPI ModifyVpcHoneyPot is deprecated
        
        @summary Enables or disables a honeypot.
        
        @param request: ModifyVpcHoneyPotRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyVpcHoneyPotResponse
        Deprecated
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.honey_pot_action):
            query['HoneyPotAction'] = request.honey_pot_action
        if not UtilClient.is_unset(request.vpc_id):
            query['VpcId'] = request.vpc_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyVpcHoneyPot',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyVpcHoneyPotResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_vpc_honey_pot_with_options_async(
        self,
        request: sas_20181203_models.ModifyVpcHoneyPotRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyVpcHoneyPotResponse:
        """
        @deprecated OpenAPI ModifyVpcHoneyPot is deprecated
        
        @summary Enables or disables a honeypot.
        
        @param request: ModifyVpcHoneyPotRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyVpcHoneyPotResponse
        Deprecated
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.honey_pot_action):
            query['HoneyPotAction'] = request.honey_pot_action
        if not UtilClient.is_unset(request.vpc_id):
            query['VpcId'] = request.vpc_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyVpcHoneyPot',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyVpcHoneyPotResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_vpc_honey_pot(
        self,
        request: sas_20181203_models.ModifyVpcHoneyPotRequest,
    ) -> sas_20181203_models.ModifyVpcHoneyPotResponse:
        """
        @deprecated OpenAPI ModifyVpcHoneyPot is deprecated
        
        @summary Enables or disables a honeypot.
        
        @param request: ModifyVpcHoneyPotRequest
        @return: ModifyVpcHoneyPotResponse
        Deprecated
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_vpc_honey_pot_with_options(request, runtime)

    async def modify_vpc_honey_pot_async(
        self,
        request: sas_20181203_models.ModifyVpcHoneyPotRequest,
    ) -> sas_20181203_models.ModifyVpcHoneyPotResponse:
        """
        @deprecated OpenAPI ModifyVpcHoneyPot is deprecated
        
        @summary Enables or disables a honeypot.
        
        @param request: ModifyVpcHoneyPotRequest
        @return: ModifyVpcHoneyPotResponse
        Deprecated
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_vpc_honey_pot_with_options_async(request, runtime)

    def modify_vul_config_with_options(
        self,
        request: sas_20181203_models.ModifyVulConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyVulConfigResponse:
        """
        @summary Modifies the configurations of the vulnerability scan feature.
        
        @param request: ModifyVulConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyVulConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config):
            query['Config'] = request.config
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyVulConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyVulConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_vul_config_with_options_async(
        self,
        request: sas_20181203_models.ModifyVulConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyVulConfigResponse:
        """
        @summary Modifies the configurations of the vulnerability scan feature.
        
        @param request: ModifyVulConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyVulConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config):
            query['Config'] = request.config
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyVulConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyVulConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_vul_config(
        self,
        request: sas_20181203_models.ModifyVulConfigRequest,
    ) -> sas_20181203_models.ModifyVulConfigResponse:
        """
        @summary Modifies the configurations of the vulnerability scan feature.
        
        @param request: ModifyVulConfigRequest
        @return: ModifyVulConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_vul_config_with_options(request, runtime)

    async def modify_vul_config_async(
        self,
        request: sas_20181203_models.ModifyVulConfigRequest,
    ) -> sas_20181203_models.ModifyVulConfigResponse:
        """
        @summary Modifies the configurations of the vulnerability scan feature.
        
        @param request: ModifyVulConfigRequest
        @return: ModifyVulConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_vul_config_with_options_async(request, runtime)

    def modify_vul_target_with_options(
        self,
        request: sas_20181203_models.ModifyVulTargetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyVulTargetResponse:
        """
        @summary Modifies the configurations of the vulnerability scan feature for a server.
        
        @param request: ModifyVulTargetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyVulTargetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config):
            query['Config'] = request.config
        if not UtilClient.is_unset(request.target):
            query['Target'] = request.target
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyVulTarget',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyVulTargetResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_vul_target_with_options_async(
        self,
        request: sas_20181203_models.ModifyVulTargetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyVulTargetResponse:
        """
        @summary Modifies the configurations of the vulnerability scan feature for a server.
        
        @param request: ModifyVulTargetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyVulTargetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config):
            query['Config'] = request.config
        if not UtilClient.is_unset(request.target):
            query['Target'] = request.target
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyVulTarget',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyVulTargetResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_vul_target(
        self,
        request: sas_20181203_models.ModifyVulTargetRequest,
    ) -> sas_20181203_models.ModifyVulTargetResponse:
        """
        @summary Modifies the configurations of the vulnerability scan feature for a server.
        
        @param request: ModifyVulTargetRequest
        @return: ModifyVulTargetResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_vul_target_with_options(request, runtime)

    async def modify_vul_target_async(
        self,
        request: sas_20181203_models.ModifyVulTargetRequest,
    ) -> sas_20181203_models.ModifyVulTargetResponse:
        """
        @summary Modifies the configurations of the vulnerability scan feature for a server.
        
        @param request: ModifyVulTargetRequest
        @return: ModifyVulTargetResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_vul_target_with_options_async(request, runtime)

    def modify_vul_target_config_with_options(
        self,
        request: sas_20181203_models.ModifyVulTargetConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyVulTargetConfigResponse:
        """
        @summary Configures vulnerability scan for a server.
        
        @param request: ModifyVulTargetConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyVulTargetConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config):
            query['Config'] = request.config
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyVulTargetConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyVulTargetConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_vul_target_config_with_options_async(
        self,
        request: sas_20181203_models.ModifyVulTargetConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyVulTargetConfigResponse:
        """
        @summary Configures vulnerability scan for a server.
        
        @param request: ModifyVulTargetConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyVulTargetConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config):
            query['Config'] = request.config
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyVulTargetConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyVulTargetConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_vul_target_config(
        self,
        request: sas_20181203_models.ModifyVulTargetConfigRequest,
    ) -> sas_20181203_models.ModifyVulTargetConfigResponse:
        """
        @summary Configures vulnerability scan for a server.
        
        @param request: ModifyVulTargetConfigRequest
        @return: ModifyVulTargetConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_vul_target_config_with_options(request, runtime)

    async def modify_vul_target_config_async(
        self,
        request: sas_20181203_models.ModifyVulTargetConfigRequest,
    ) -> sas_20181203_models.ModifyVulTargetConfigResponse:
        """
        @summary Configures vulnerability scan for a server.
        
        @param request: ModifyVulTargetConfigRequest
        @return: ModifyVulTargetConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_vul_target_config_with_options_async(request, runtime)

    def modify_vul_whitelist_target_with_options(
        self,
        request: sas_20181203_models.ModifyVulWhitelistTargetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyVulWhitelistTargetResponse:
        """
        @summary Modifies the servers that are added to a vulnerability whitelist.
        
        @param request: ModifyVulWhitelistTargetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyVulWhitelistTargetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.reason):
            query['Reason'] = request.reason
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.target_info):
            query['TargetInfo'] = request.target_info
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyVulWhitelistTarget',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyVulWhitelistTargetResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_vul_whitelist_target_with_options_async(
        self,
        request: sas_20181203_models.ModifyVulWhitelistTargetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyVulWhitelistTargetResponse:
        """
        @summary Modifies the servers that are added to a vulnerability whitelist.
        
        @param request: ModifyVulWhitelistTargetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyVulWhitelistTargetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.reason):
            query['Reason'] = request.reason
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.target_info):
            query['TargetInfo'] = request.target_info
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyVulWhitelistTarget',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyVulWhitelistTargetResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_vul_whitelist_target(
        self,
        request: sas_20181203_models.ModifyVulWhitelistTargetRequest,
    ) -> sas_20181203_models.ModifyVulWhitelistTargetResponse:
        """
        @summary Modifies the servers that are added to a vulnerability whitelist.
        
        @param request: ModifyVulWhitelistTargetRequest
        @return: ModifyVulWhitelistTargetResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_vul_whitelist_target_with_options(request, runtime)

    async def modify_vul_whitelist_target_async(
        self,
        request: sas_20181203_models.ModifyVulWhitelistTargetRequest,
    ) -> sas_20181203_models.ModifyVulWhitelistTargetResponse:
        """
        @summary Modifies the servers that are added to a vulnerability whitelist.
        
        @param request: ModifyVulWhitelistTargetRequest
        @return: ModifyVulWhitelistTargetResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_vul_whitelist_target_with_options_async(request, runtime)

    def modify_web_lock_create_config_with_options(
        self,
        request: sas_20181203_models.ModifyWebLockCreateConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyWebLockCreateConfigResponse:
        """
        @summary Adds a directory to protect for a specified server.
        
        @param request: ModifyWebLockCreateConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyWebLockCreateConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.defence_mode):
            query['DefenceMode'] = request.defence_mode
        if not UtilClient.is_unset(request.dir):
            query['Dir'] = request.dir
        if not UtilClient.is_unset(request.exclusive_dir):
            query['ExclusiveDir'] = request.exclusive_dir
        if not UtilClient.is_unset(request.exclusive_file):
            query['ExclusiveFile'] = request.exclusive_file
        if not UtilClient.is_unset(request.exclusive_file_type):
            query['ExclusiveFileType'] = request.exclusive_file_type
        if not UtilClient.is_unset(request.inclusive_file):
            query['InclusiveFile'] = request.inclusive_file
        if not UtilClient.is_unset(request.inclusive_file_type):
            query['InclusiveFileType'] = request.inclusive_file_type
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.local_backup_dir):
            query['LocalBackupDir'] = request.local_backup_dir
        if not UtilClient.is_unset(request.mode):
            query['Mode'] = request.mode
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyWebLockCreateConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyWebLockCreateConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_web_lock_create_config_with_options_async(
        self,
        request: sas_20181203_models.ModifyWebLockCreateConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyWebLockCreateConfigResponse:
        """
        @summary Adds a directory to protect for a specified server.
        
        @param request: ModifyWebLockCreateConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyWebLockCreateConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.defence_mode):
            query['DefenceMode'] = request.defence_mode
        if not UtilClient.is_unset(request.dir):
            query['Dir'] = request.dir
        if not UtilClient.is_unset(request.exclusive_dir):
            query['ExclusiveDir'] = request.exclusive_dir
        if not UtilClient.is_unset(request.exclusive_file):
            query['ExclusiveFile'] = request.exclusive_file
        if not UtilClient.is_unset(request.exclusive_file_type):
            query['ExclusiveFileType'] = request.exclusive_file_type
        if not UtilClient.is_unset(request.inclusive_file):
            query['InclusiveFile'] = request.inclusive_file
        if not UtilClient.is_unset(request.inclusive_file_type):
            query['InclusiveFileType'] = request.inclusive_file_type
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.local_backup_dir):
            query['LocalBackupDir'] = request.local_backup_dir
        if not UtilClient.is_unset(request.mode):
            query['Mode'] = request.mode
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyWebLockCreateConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyWebLockCreateConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_web_lock_create_config(
        self,
        request: sas_20181203_models.ModifyWebLockCreateConfigRequest,
    ) -> sas_20181203_models.ModifyWebLockCreateConfigResponse:
        """
        @summary Adds a directory to protect for a specified server.
        
        @param request: ModifyWebLockCreateConfigRequest
        @return: ModifyWebLockCreateConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_web_lock_create_config_with_options(request, runtime)

    async def modify_web_lock_create_config_async(
        self,
        request: sas_20181203_models.ModifyWebLockCreateConfigRequest,
    ) -> sas_20181203_models.ModifyWebLockCreateConfigResponse:
        """
        @summary Adds a directory to protect for a specified server.
        
        @param request: ModifyWebLockCreateConfigRequest
        @return: ModifyWebLockCreateConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_web_lock_create_config_with_options_async(request, runtime)

    def modify_web_lock_delete_config_with_options(
        self,
        request: sas_20181203_models.ModifyWebLockDeleteConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyWebLockDeleteConfigResponse:
        """
        @summary Deletes a directory on a specified server from the protected directories of web tamper proofing.
        
        @description After you delete a directory that has web tamper proofing enabled on a server, files in the directory are no longer protected by web tamper proofing. The information about the websites that are hosted on the server may be maliciously modified by attackers. Proceed with caution.
        
        @param request: ModifyWebLockDeleteConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyWebLockDeleteConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyWebLockDeleteConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyWebLockDeleteConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_web_lock_delete_config_with_options_async(
        self,
        request: sas_20181203_models.ModifyWebLockDeleteConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyWebLockDeleteConfigResponse:
        """
        @summary Deletes a directory on a specified server from the protected directories of web tamper proofing.
        
        @description After you delete a directory that has web tamper proofing enabled on a server, files in the directory are no longer protected by web tamper proofing. The information about the websites that are hosted on the server may be maliciously modified by attackers. Proceed with caution.
        
        @param request: ModifyWebLockDeleteConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyWebLockDeleteConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyWebLockDeleteConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyWebLockDeleteConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_web_lock_delete_config(
        self,
        request: sas_20181203_models.ModifyWebLockDeleteConfigRequest,
    ) -> sas_20181203_models.ModifyWebLockDeleteConfigResponse:
        """
        @summary Deletes a directory on a specified server from the protected directories of web tamper proofing.
        
        @description After you delete a directory that has web tamper proofing enabled on a server, files in the directory are no longer protected by web tamper proofing. The information about the websites that are hosted on the server may be maliciously modified by attackers. Proceed with caution.
        
        @param request: ModifyWebLockDeleteConfigRequest
        @return: ModifyWebLockDeleteConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_web_lock_delete_config_with_options(request, runtime)

    async def modify_web_lock_delete_config_async(
        self,
        request: sas_20181203_models.ModifyWebLockDeleteConfigRequest,
    ) -> sas_20181203_models.ModifyWebLockDeleteConfigResponse:
        """
        @summary Deletes a directory on a specified server from the protected directories of web tamper proofing.
        
        @description After you delete a directory that has web tamper proofing enabled on a server, files in the directory are no longer protected by web tamper proofing. The information about the websites that are hosted on the server may be maliciously modified by attackers. Proceed with caution.
        
        @param request: ModifyWebLockDeleteConfigRequest
        @return: ModifyWebLockDeleteConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_web_lock_delete_config_with_options_async(request, runtime)

    def modify_web_lock_process_status_with_options(
        self,
        request: sas_20181203_models.ModifyWebLockProcessStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyWebLockProcessStatusResponse:
        """
        @summary Changes the status of processes for web tamper proofing.
        
        @param request: ModifyWebLockProcessStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyWebLockProcessStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.deal_all):
            query['DealAll'] = request.deal_all
        if not UtilClient.is_unset(request.operate_info):
            query['OperateInfo'] = request.operate_info
        if not UtilClient.is_unset(request.process_path):
            query['ProcessPath'] = request.process_path
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyWebLockProcessStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyWebLockProcessStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_web_lock_process_status_with_options_async(
        self,
        request: sas_20181203_models.ModifyWebLockProcessStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyWebLockProcessStatusResponse:
        """
        @summary Changes the status of processes for web tamper proofing.
        
        @param request: ModifyWebLockProcessStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyWebLockProcessStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.deal_all):
            query['DealAll'] = request.deal_all
        if not UtilClient.is_unset(request.operate_info):
            query['OperateInfo'] = request.operate_info
        if not UtilClient.is_unset(request.process_path):
            query['ProcessPath'] = request.process_path
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyWebLockProcessStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyWebLockProcessStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_web_lock_process_status(
        self,
        request: sas_20181203_models.ModifyWebLockProcessStatusRequest,
    ) -> sas_20181203_models.ModifyWebLockProcessStatusResponse:
        """
        @summary Changes the status of processes for web tamper proofing.
        
        @param request: ModifyWebLockProcessStatusRequest
        @return: ModifyWebLockProcessStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_web_lock_process_status_with_options(request, runtime)

    async def modify_web_lock_process_status_async(
        self,
        request: sas_20181203_models.ModifyWebLockProcessStatusRequest,
    ) -> sas_20181203_models.ModifyWebLockProcessStatusResponse:
        """
        @summary Changes the status of processes for web tamper proofing.
        
        @param request: ModifyWebLockProcessStatusRequest
        @return: ModifyWebLockProcessStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_web_lock_process_status_with_options_async(request, runtime)

    def modify_web_lock_refresh_with_options(
        self,
        request: sas_20181203_models.ModifyWebLockRefreshRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyWebLockRefreshResponse:
        """
        @summary Refreshes the status of the web tamper proofing feature for a server.
        
        @description If an exception occurs when you enable or disable the web tamper proofing feature for a server, you can call this operation to refresh the status of the web tamper proofing feature.
        
        @param request: ModifyWebLockRefreshRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyWebLockRefreshResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyWebLockRefresh',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyWebLockRefreshResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_web_lock_refresh_with_options_async(
        self,
        request: sas_20181203_models.ModifyWebLockRefreshRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyWebLockRefreshResponse:
        """
        @summary Refreshes the status of the web tamper proofing feature for a server.
        
        @description If an exception occurs when you enable or disable the web tamper proofing feature for a server, you can call this operation to refresh the status of the web tamper proofing feature.
        
        @param request: ModifyWebLockRefreshRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyWebLockRefreshResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyWebLockRefresh',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyWebLockRefreshResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_web_lock_refresh(
        self,
        request: sas_20181203_models.ModifyWebLockRefreshRequest,
    ) -> sas_20181203_models.ModifyWebLockRefreshResponse:
        """
        @summary Refreshes the status of the web tamper proofing feature for a server.
        
        @description If an exception occurs when you enable or disable the web tamper proofing feature for a server, you can call this operation to refresh the status of the web tamper proofing feature.
        
        @param request: ModifyWebLockRefreshRequest
        @return: ModifyWebLockRefreshResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_web_lock_refresh_with_options(request, runtime)

    async def modify_web_lock_refresh_async(
        self,
        request: sas_20181203_models.ModifyWebLockRefreshRequest,
    ) -> sas_20181203_models.ModifyWebLockRefreshResponse:
        """
        @summary Refreshes the status of the web tamper proofing feature for a server.
        
        @description If an exception occurs when you enable or disable the web tamper proofing feature for a server, you can call this operation to refresh the status of the web tamper proofing feature.
        
        @param request: ModifyWebLockRefreshRequest
        @return: ModifyWebLockRefreshResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_web_lock_refresh_with_options_async(request, runtime)

    def modify_web_lock_start_with_options(
        self,
        request: sas_20181203_models.ModifyWebLockStartRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyWebLockStartResponse:
        """
        @summary Enables web tamper proofing for a specified server.
        
        @param request: ModifyWebLockStartRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyWebLockStartResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.defence_mode):
            query['DefenceMode'] = request.defence_mode
        if not UtilClient.is_unset(request.dir):
            query['Dir'] = request.dir
        if not UtilClient.is_unset(request.exclusive_dir):
            query['ExclusiveDir'] = request.exclusive_dir
        if not UtilClient.is_unset(request.exclusive_file):
            query['ExclusiveFile'] = request.exclusive_file
        if not UtilClient.is_unset(request.exclusive_file_type):
            query['ExclusiveFileType'] = request.exclusive_file_type
        if not UtilClient.is_unset(request.inclusive_file_type):
            query['InclusiveFileType'] = request.inclusive_file_type
        if not UtilClient.is_unset(request.local_backup_dir):
            query['LocalBackupDir'] = request.local_backup_dir
        if not UtilClient.is_unset(request.mode):
            query['Mode'] = request.mode
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyWebLockStart',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyWebLockStartResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_web_lock_start_with_options_async(
        self,
        request: sas_20181203_models.ModifyWebLockStartRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyWebLockStartResponse:
        """
        @summary Enables web tamper proofing for a specified server.
        
        @param request: ModifyWebLockStartRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyWebLockStartResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.defence_mode):
            query['DefenceMode'] = request.defence_mode
        if not UtilClient.is_unset(request.dir):
            query['Dir'] = request.dir
        if not UtilClient.is_unset(request.exclusive_dir):
            query['ExclusiveDir'] = request.exclusive_dir
        if not UtilClient.is_unset(request.exclusive_file):
            query['ExclusiveFile'] = request.exclusive_file
        if not UtilClient.is_unset(request.exclusive_file_type):
            query['ExclusiveFileType'] = request.exclusive_file_type
        if not UtilClient.is_unset(request.inclusive_file_type):
            query['InclusiveFileType'] = request.inclusive_file_type
        if not UtilClient.is_unset(request.local_backup_dir):
            query['LocalBackupDir'] = request.local_backup_dir
        if not UtilClient.is_unset(request.mode):
            query['Mode'] = request.mode
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyWebLockStart',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyWebLockStartResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_web_lock_start(
        self,
        request: sas_20181203_models.ModifyWebLockStartRequest,
    ) -> sas_20181203_models.ModifyWebLockStartResponse:
        """
        @summary Enables web tamper proofing for a specified server.
        
        @param request: ModifyWebLockStartRequest
        @return: ModifyWebLockStartResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_web_lock_start_with_options(request, runtime)

    async def modify_web_lock_start_async(
        self,
        request: sas_20181203_models.ModifyWebLockStartRequest,
    ) -> sas_20181203_models.ModifyWebLockStartResponse:
        """
        @summary Enables web tamper proofing for a specified server.
        
        @param request: ModifyWebLockStartRequest
        @return: ModifyWebLockStartResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_web_lock_start_with_options_async(request, runtime)

    def modify_web_lock_status_with_options(
        self,
        request: sas_20181203_models.ModifyWebLockStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyWebLockStatusResponse:
        """
        @summary Enables or disables web tamper proofing for a server.
        
        @param request: ModifyWebLockStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyWebLockStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyWebLockStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyWebLockStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_web_lock_status_with_options_async(
        self,
        request: sas_20181203_models.ModifyWebLockStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyWebLockStatusResponse:
        """
        @summary Enables or disables web tamper proofing for a server.
        
        @param request: ModifyWebLockStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyWebLockStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyWebLockStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyWebLockStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_web_lock_status(
        self,
        request: sas_20181203_models.ModifyWebLockStatusRequest,
    ) -> sas_20181203_models.ModifyWebLockStatusResponse:
        """
        @summary Enables or disables web tamper proofing for a server.
        
        @param request: ModifyWebLockStatusRequest
        @return: ModifyWebLockStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_web_lock_status_with_options(request, runtime)

    async def modify_web_lock_status_async(
        self,
        request: sas_20181203_models.ModifyWebLockStatusRequest,
    ) -> sas_20181203_models.ModifyWebLockStatusResponse:
        """
        @summary Enables or disables web tamper proofing for a server.
        
        @param request: ModifyWebLockStatusRequest
        @return: ModifyWebLockStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_web_lock_status_with_options_async(request, runtime)

    def modify_web_lock_unbind_with_options(
        self,
        request: sas_20181203_models.ModifyWebLockUnbindRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyWebLockUnbindResponse:
        """
        @summary Disables web tamper proofing for a specified server.
        
        @param request: ModifyWebLockUnbindRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyWebLockUnbindResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyWebLockUnbind',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyWebLockUnbindResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_web_lock_unbind_with_options_async(
        self,
        request: sas_20181203_models.ModifyWebLockUnbindRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyWebLockUnbindResponse:
        """
        @summary Disables web tamper proofing for a specified server.
        
        @param request: ModifyWebLockUnbindRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyWebLockUnbindResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyWebLockUnbind',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyWebLockUnbindResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_web_lock_unbind(
        self,
        request: sas_20181203_models.ModifyWebLockUnbindRequest,
    ) -> sas_20181203_models.ModifyWebLockUnbindResponse:
        """
        @summary Disables web tamper proofing for a specified server.
        
        @param request: ModifyWebLockUnbindRequest
        @return: ModifyWebLockUnbindResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_web_lock_unbind_with_options(request, runtime)

    async def modify_web_lock_unbind_async(
        self,
        request: sas_20181203_models.ModifyWebLockUnbindRequest,
    ) -> sas_20181203_models.ModifyWebLockUnbindResponse:
        """
        @summary Disables web tamper proofing for a specified server.
        
        @param request: ModifyWebLockUnbindRequest
        @return: ModifyWebLockUnbindResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_web_lock_unbind_with_options_async(request, runtime)

    def modify_web_lock_update_config_with_options(
        self,
        request: sas_20181203_models.ModifyWebLockUpdateConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyWebLockUpdateConfigResponse:
        """
        @summary Modifies the protection policy for a specified server.
        
        @param request: ModifyWebLockUpdateConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyWebLockUpdateConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.defence_mode):
            query['DefenceMode'] = request.defence_mode
        if not UtilClient.is_unset(request.dir):
            query['Dir'] = request.dir
        if not UtilClient.is_unset(request.exclusive_dir):
            query['ExclusiveDir'] = request.exclusive_dir
        if not UtilClient.is_unset(request.exclusive_file):
            query['ExclusiveFile'] = request.exclusive_file
        if not UtilClient.is_unset(request.exclusive_file_type):
            query['ExclusiveFileType'] = request.exclusive_file_type
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.inclusive_file):
            query['InclusiveFile'] = request.inclusive_file
        if not UtilClient.is_unset(request.inclusive_file_type):
            query['InclusiveFileType'] = request.inclusive_file_type
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.local_backup_dir):
            query['LocalBackupDir'] = request.local_backup_dir
        if not UtilClient.is_unset(request.mode):
            query['Mode'] = request.mode
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyWebLockUpdateConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyWebLockUpdateConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_web_lock_update_config_with_options_async(
        self,
        request: sas_20181203_models.ModifyWebLockUpdateConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyWebLockUpdateConfigResponse:
        """
        @summary Modifies the protection policy for a specified server.
        
        @param request: ModifyWebLockUpdateConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyWebLockUpdateConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.defence_mode):
            query['DefenceMode'] = request.defence_mode
        if not UtilClient.is_unset(request.dir):
            query['Dir'] = request.dir
        if not UtilClient.is_unset(request.exclusive_dir):
            query['ExclusiveDir'] = request.exclusive_dir
        if not UtilClient.is_unset(request.exclusive_file):
            query['ExclusiveFile'] = request.exclusive_file
        if not UtilClient.is_unset(request.exclusive_file_type):
            query['ExclusiveFileType'] = request.exclusive_file_type
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.inclusive_file):
            query['InclusiveFile'] = request.inclusive_file
        if not UtilClient.is_unset(request.inclusive_file_type):
            query['InclusiveFileType'] = request.inclusive_file_type
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.local_backup_dir):
            query['LocalBackupDir'] = request.local_backup_dir
        if not UtilClient.is_unset(request.mode):
            query['Mode'] = request.mode
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyWebLockUpdateConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyWebLockUpdateConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_web_lock_update_config(
        self,
        request: sas_20181203_models.ModifyWebLockUpdateConfigRequest,
    ) -> sas_20181203_models.ModifyWebLockUpdateConfigResponse:
        """
        @summary Modifies the protection policy for a specified server.
        
        @param request: ModifyWebLockUpdateConfigRequest
        @return: ModifyWebLockUpdateConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_web_lock_update_config_with_options(request, runtime)

    async def modify_web_lock_update_config_async(
        self,
        request: sas_20181203_models.ModifyWebLockUpdateConfigRequest,
    ) -> sas_20181203_models.ModifyWebLockUpdateConfigResponse:
        """
        @summary Modifies the protection policy for a specified server.
        
        @param request: ModifyWebLockUpdateConfigRequest
        @return: ModifyWebLockUpdateConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_web_lock_update_config_with_options_async(request, runtime)

    def modify_web_path_with_options(
        self,
        request: sas_20181203_models.ModifyWebPathRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyWebPathResponse:
        """
        @summary Modifies a custom web directory.
        
        @param request: ModifyWebPathRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyWebPathResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config):
            query['Config'] = request.config
        if not UtilClient.is_unset(request.target):
            query['Target'] = request.target
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyWebPath',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyWebPathResponse(),
            self.call_api(params, req, runtime)
        )

    async def modify_web_path_with_options_async(
        self,
        request: sas_20181203_models.ModifyWebPathRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ModifyWebPathResponse:
        """
        @summary Modifies a custom web directory.
        
        @param request: ModifyWebPathRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ModifyWebPathResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config):
            query['Config'] = request.config
        if not UtilClient.is_unset(request.target):
            query['Target'] = request.target
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ModifyWebPath',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ModifyWebPathResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def modify_web_path(
        self,
        request: sas_20181203_models.ModifyWebPathRequest,
    ) -> sas_20181203_models.ModifyWebPathResponse:
        """
        @summary Modifies a custom web directory.
        
        @param request: ModifyWebPathRequest
        @return: ModifyWebPathResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.modify_web_path_with_options(request, runtime)

    async def modify_web_path_async(
        self,
        request: sas_20181203_models.ModifyWebPathRequest,
    ) -> sas_20181203_models.ModifyWebPathResponse:
        """
        @summary Modifies a custom web directory.
        
        @param request: ModifyWebPathRequest
        @return: ModifyWebPathResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.modify_web_path_with_options_async(request, runtime)

    def open_backup_auto_config_with_options(
        self,
        request: sas_20181203_models.OpenBackupAutoConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.OpenBackupAutoConfigResponse:
        """
        @summary Enables the automatic configuration of anti-ransomware policies for servers in the managed anti-ransomware feature. You can call this operation only after you purchase the managed anti-ransomware feature.
        
        @param request: OpenBackupAutoConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OpenBackupAutoConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.max_batch_size):
            query['MaxBatchSize'] = request.max_batch_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OpenBackupAutoConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.OpenBackupAutoConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def open_backup_auto_config_with_options_async(
        self,
        request: sas_20181203_models.OpenBackupAutoConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.OpenBackupAutoConfigResponse:
        """
        @summary Enables the automatic configuration of anti-ransomware policies for servers in the managed anti-ransomware feature. You can call this operation only after you purchase the managed anti-ransomware feature.
        
        @param request: OpenBackupAutoConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OpenBackupAutoConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.max_batch_size):
            query['MaxBatchSize'] = request.max_batch_size
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OpenBackupAutoConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.OpenBackupAutoConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def open_backup_auto_config(
        self,
        request: sas_20181203_models.OpenBackupAutoConfigRequest,
    ) -> sas_20181203_models.OpenBackupAutoConfigResponse:
        """
        @summary Enables the automatic configuration of anti-ransomware policies for servers in the managed anti-ransomware feature. You can call this operation only after you purchase the managed anti-ransomware feature.
        
        @param request: OpenBackupAutoConfigRequest
        @return: OpenBackupAutoConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.open_backup_auto_config_with_options(request, runtime)

    async def open_backup_auto_config_async(
        self,
        request: sas_20181203_models.OpenBackupAutoConfigRequest,
    ) -> sas_20181203_models.OpenBackupAutoConfigResponse:
        """
        @summary Enables the automatic configuration of anti-ransomware policies for servers in the managed anti-ransomware feature. You can call this operation only after you purchase the managed anti-ransomware feature.
        
        @param request: OpenBackupAutoConfigRequest
        @return: OpenBackupAutoConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.open_backup_auto_config_with_options_async(request, runtime)

    def open_partial_buy_with_options(
        self,
        request: sas_20181203_models.OpenPartialBuyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.OpenPartialBuyResponse:
        """
        @summary 开启按量购买
        
        @param request: OpenPartialBuyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OpenPartialBuyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.instance_id):
            query['InstanceId'] = request.instance_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OpenPartialBuy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.OpenPartialBuyResponse(),
            self.call_api(params, req, runtime)
        )

    async def open_partial_buy_with_options_async(
        self,
        request: sas_20181203_models.OpenPartialBuyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.OpenPartialBuyResponse:
        """
        @summary 开启按量购买
        
        @param request: OpenPartialBuyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OpenPartialBuyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.instance_id):
            query['InstanceId'] = request.instance_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OpenPartialBuy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.OpenPartialBuyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def open_partial_buy(
        self,
        request: sas_20181203_models.OpenPartialBuyRequest,
    ) -> sas_20181203_models.OpenPartialBuyResponse:
        """
        @summary 开启按量购买
        
        @param request: OpenPartialBuyRequest
        @return: OpenPartialBuyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.open_partial_buy_with_options(request, runtime)

    async def open_partial_buy_async(
        self,
        request: sas_20181203_models.OpenPartialBuyRequest,
    ) -> sas_20181203_models.OpenPartialBuyResponse:
        """
        @summary 开启按量购买
        
        @param request: OpenPartialBuyRequest
        @return: OpenPartialBuyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.open_partial_buy_with_options_async(request, runtime)

    def open_sensitive_file_scan_with_options(
        self,
        request: sas_20181203_models.OpenSensitiveFileScanRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.OpenSensitiveFileScanResponse:
        """
        @summary Enables or disables sensitive file scan.
        
        @param request: OpenSensitiveFileScanRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OpenSensitiveFileScanResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.switch_on):
            query['SwitchOn'] = request.switch_on
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OpenSensitiveFileScan',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.OpenSensitiveFileScanResponse(),
            self.call_api(params, req, runtime)
        )

    async def open_sensitive_file_scan_with_options_async(
        self,
        request: sas_20181203_models.OpenSensitiveFileScanRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.OpenSensitiveFileScanResponse:
        """
        @summary Enables or disables sensitive file scan.
        
        @param request: OpenSensitiveFileScanRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OpenSensitiveFileScanResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.switch_on):
            query['SwitchOn'] = request.switch_on
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OpenSensitiveFileScan',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.OpenSensitiveFileScanResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def open_sensitive_file_scan(
        self,
        request: sas_20181203_models.OpenSensitiveFileScanRequest,
    ) -> sas_20181203_models.OpenSensitiveFileScanResponse:
        """
        @summary Enables or disables sensitive file scan.
        
        @param request: OpenSensitiveFileScanRequest
        @return: OpenSensitiveFileScanResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.open_sensitive_file_scan_with_options(request, runtime)

    async def open_sensitive_file_scan_async(
        self,
        request: sas_20181203_models.OpenSensitiveFileScanRequest,
    ) -> sas_20181203_models.OpenSensitiveFileScanResponse:
        """
        @summary Enables or disables sensitive file scan.
        
        @param request: OpenSensitiveFileScanRequest
        @return: OpenSensitiveFileScanResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.open_sensitive_file_scan_with_options_async(request, runtime)

    def operate_agent_client_install_with_options(
        self,
        request: sas_20181203_models.OperateAgentClientInstallRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.OperateAgentClientInstallResponse:
        """
        @summary Installs the Security Center agent on servers.
        
        @param request: OperateAgentClientInstallRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OperateAgentClientInstallResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.instance_ids):
            query['InstanceIds'] = request.instance_ids
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.os):
            query['Os'] = request.os
        if not UtilClient.is_unset(request.region):
            query['Region'] = request.region
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OperateAgentClientInstall',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.OperateAgentClientInstallResponse(),
            self.call_api(params, req, runtime)
        )

    async def operate_agent_client_install_with_options_async(
        self,
        request: sas_20181203_models.OperateAgentClientInstallRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.OperateAgentClientInstallResponse:
        """
        @summary Installs the Security Center agent on servers.
        
        @param request: OperateAgentClientInstallRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OperateAgentClientInstallResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.instance_ids):
            query['InstanceIds'] = request.instance_ids
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.os):
            query['Os'] = request.os
        if not UtilClient.is_unset(request.region):
            query['Region'] = request.region
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OperateAgentClientInstall',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.OperateAgentClientInstallResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def operate_agent_client_install(
        self,
        request: sas_20181203_models.OperateAgentClientInstallRequest,
    ) -> sas_20181203_models.OperateAgentClientInstallResponse:
        """
        @summary Installs the Security Center agent on servers.
        
        @param request: OperateAgentClientInstallRequest
        @return: OperateAgentClientInstallResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.operate_agent_client_install_with_options(request, runtime)

    async def operate_agent_client_install_async(
        self,
        request: sas_20181203_models.OperateAgentClientInstallRequest,
    ) -> sas_20181203_models.OperateAgentClientInstallResponse:
        """
        @summary Installs the Security Center agent on servers.
        
        @param request: OperateAgentClientInstallRequest
        @return: OperateAgentClientInstallResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.operate_agent_client_install_with_options_async(request, runtime)

    def operate_application_with_options(
        self,
        request: sas_20181203_models.OperateApplicationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.OperateApplicationResponse:
        """
        @summary Adds or deletes container applications for tamper proofing.
        
        @param request: OperateApplicationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OperateApplicationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.container_web_defense_application_dtos):
            query['ContainerWebDefenseApplicationDTOS'] = request.container_web_defense_application_dtos
        if not UtilClient.is_unset(request.rule_id):
            query['RuleId'] = request.rule_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OperateApplication',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.OperateApplicationResponse(),
            self.call_api(params, req, runtime)
        )

    async def operate_application_with_options_async(
        self,
        request: sas_20181203_models.OperateApplicationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.OperateApplicationResponse:
        """
        @summary Adds or deletes container applications for tamper proofing.
        
        @param request: OperateApplicationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OperateApplicationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.container_web_defense_application_dtos):
            query['ContainerWebDefenseApplicationDTOS'] = request.container_web_defense_application_dtos
        if not UtilClient.is_unset(request.rule_id):
            query['RuleId'] = request.rule_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OperateApplication',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.OperateApplicationResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def operate_application(
        self,
        request: sas_20181203_models.OperateApplicationRequest,
    ) -> sas_20181203_models.OperateApplicationResponse:
        """
        @summary Adds or deletes container applications for tamper proofing.
        
        @param request: OperateApplicationRequest
        @return: OperateApplicationResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.operate_application_with_options(request, runtime)

    async def operate_application_async(
        self,
        request: sas_20181203_models.OperateApplicationRequest,
    ) -> sas_20181203_models.OperateApplicationResponse:
        """
        @summary Adds or deletes container applications for tamper proofing.
        
        @param request: OperateApplicationRequest
        @return: OperateApplicationResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.operate_application_with_options_async(request, runtime)

    def operate_bucket_scan_task_with_options(
        self,
        request: sas_20181203_models.OperateBucketScanTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.OperateBucketScanTaskResponse:
        """
        @summary Manages an Object Storage Service (OSS) bucket check task.
        
        @param request: OperateBucketScanTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OperateBucketScanTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.bucket_name):
            query['BucketName'] = request.bucket_name
        if not UtilClient.is_unset(request.operate_code):
            query['OperateCode'] = request.operate_code
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OperateBucketScanTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.OperateBucketScanTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def operate_bucket_scan_task_with_options_async(
        self,
        request: sas_20181203_models.OperateBucketScanTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.OperateBucketScanTaskResponse:
        """
        @summary Manages an Object Storage Service (OSS) bucket check task.
        
        @param request: OperateBucketScanTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OperateBucketScanTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.bucket_name):
            query['BucketName'] = request.bucket_name
        if not UtilClient.is_unset(request.operate_code):
            query['OperateCode'] = request.operate_code
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OperateBucketScanTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.OperateBucketScanTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def operate_bucket_scan_task(
        self,
        request: sas_20181203_models.OperateBucketScanTaskRequest,
    ) -> sas_20181203_models.OperateBucketScanTaskResponse:
        """
        @summary Manages an Object Storage Service (OSS) bucket check task.
        
        @param request: OperateBucketScanTaskRequest
        @return: OperateBucketScanTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.operate_bucket_scan_task_with_options(request, runtime)

    async def operate_bucket_scan_task_async(
        self,
        request: sas_20181203_models.OperateBucketScanTaskRequest,
    ) -> sas_20181203_models.OperateBucketScanTaskResponse:
        """
        @summary Manages an Object Storage Service (OSS) bucket check task.
        
        @param request: OperateBucketScanTaskRequest
        @return: OperateBucketScanTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.operate_bucket_scan_task_with_options_async(request, runtime)

    def operate_common_overall_config_with_options(
        self,
        request: sas_20181203_models.OperateCommonOverallConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.OperateCommonOverallConfigResponse:
        """
        @summary Enables or disables a feature by type.
        
        @param request: OperateCommonOverallConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OperateCommonOverallConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config):
            query['Config'] = request.config
        if not UtilClient.is_unset(request.no_target_as_on):
            query['NoTargetAsOn'] = request.no_target_as_on
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OperateCommonOverallConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.OperateCommonOverallConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def operate_common_overall_config_with_options_async(
        self,
        request: sas_20181203_models.OperateCommonOverallConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.OperateCommonOverallConfigResponse:
        """
        @summary Enables or disables a feature by type.
        
        @param request: OperateCommonOverallConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OperateCommonOverallConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config):
            query['Config'] = request.config
        if not UtilClient.is_unset(request.no_target_as_on):
            query['NoTargetAsOn'] = request.no_target_as_on
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OperateCommonOverallConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.OperateCommonOverallConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def operate_common_overall_config(
        self,
        request: sas_20181203_models.OperateCommonOverallConfigRequest,
    ) -> sas_20181203_models.OperateCommonOverallConfigResponse:
        """
        @summary Enables or disables a feature by type.
        
        @param request: OperateCommonOverallConfigRequest
        @return: OperateCommonOverallConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.operate_common_overall_config_with_options(request, runtime)

    async def operate_common_overall_config_async(
        self,
        request: sas_20181203_models.OperateCommonOverallConfigRequest,
    ) -> sas_20181203_models.OperateCommonOverallConfigResponse:
        """
        @summary Enables or disables a feature by type.
        
        @param request: OperateCommonOverallConfigRequest
        @return: OperateCommonOverallConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.operate_common_overall_config_with_options_async(request, runtime)

    def operate_common_target_config_with_options(
        self,
        request: sas_20181203_models.OperateCommonTargetConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.OperateCommonTargetConfigResponse:
        """
        @summary Configures features by type. The features include container image scan, local file detection, container network visualization, and container escape prevention.
        
        @param request: OperateCommonTargetConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OperateCommonTargetConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.field_name):
            query['FieldName'] = request.field_name
        if not UtilClient.is_unset(request.field_value):
            query['FieldValue'] = request.field_value
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.target_operations):
            query['TargetOperations'] = request.target_operations
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OperateCommonTargetConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.OperateCommonTargetConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def operate_common_target_config_with_options_async(
        self,
        request: sas_20181203_models.OperateCommonTargetConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.OperateCommonTargetConfigResponse:
        """
        @summary Configures features by type. The features include container image scan, local file detection, container network visualization, and container escape prevention.
        
        @param request: OperateCommonTargetConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OperateCommonTargetConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.field_name):
            query['FieldName'] = request.field_name
        if not UtilClient.is_unset(request.field_value):
            query['FieldValue'] = request.field_value
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.target_operations):
            query['TargetOperations'] = request.target_operations
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OperateCommonTargetConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.OperateCommonTargetConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def operate_common_target_config(
        self,
        request: sas_20181203_models.OperateCommonTargetConfigRequest,
    ) -> sas_20181203_models.OperateCommonTargetConfigResponse:
        """
        @summary Configures features by type. The features include container image scan, local file detection, container network visualization, and container escape prevention.
        
        @param request: OperateCommonTargetConfigRequest
        @return: OperateCommonTargetConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.operate_common_target_config_with_options(request, runtime)

    async def operate_common_target_config_async(
        self,
        request: sas_20181203_models.OperateCommonTargetConfigRequest,
    ) -> sas_20181203_models.OperateCommonTargetConfigResponse:
        """
        @summary Configures features by type. The features include container image scan, local file detection, container network visualization, and container escape prevention.
        
        @param request: OperateCommonTargetConfigRequest
        @return: OperateCommonTargetConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.operate_common_target_config_with_options_async(request, runtime)

    def operate_image_baseline_whitelist_with_options(
        self,
        request: sas_20181203_models.OperateImageBaselineWhitelistRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.OperateImageBaselineWhitelistResponse:
        """
        @summary Adds a check item of an image baseline to the whitelist, or removes a check item of an image baseline from the whitelist.
        
        @param request: OperateImageBaselineWhitelistRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OperateImageBaselineWhitelistResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.baseline_item_key_list):
            query['BaselineItemKeyList'] = request.baseline_item_key_list
        if not UtilClient.is_unset(request.image_uuid):
            query['ImageUuid'] = request.image_uuid
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.operation):
            query['Operation'] = request.operation
        if not UtilClient.is_unset(request.scan_range):
            query['ScanRange'] = request.scan_range
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OperateImageBaselineWhitelist',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.OperateImageBaselineWhitelistResponse(),
            self.call_api(params, req, runtime)
        )

    async def operate_image_baseline_whitelist_with_options_async(
        self,
        request: sas_20181203_models.OperateImageBaselineWhitelistRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.OperateImageBaselineWhitelistResponse:
        """
        @summary Adds a check item of an image baseline to the whitelist, or removes a check item of an image baseline from the whitelist.
        
        @param request: OperateImageBaselineWhitelistRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OperateImageBaselineWhitelistResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.baseline_item_key_list):
            query['BaselineItemKeyList'] = request.baseline_item_key_list
        if not UtilClient.is_unset(request.image_uuid):
            query['ImageUuid'] = request.image_uuid
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.operation):
            query['Operation'] = request.operation
        if not UtilClient.is_unset(request.scan_range):
            query['ScanRange'] = request.scan_range
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OperateImageBaselineWhitelist',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.OperateImageBaselineWhitelistResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def operate_image_baseline_whitelist(
        self,
        request: sas_20181203_models.OperateImageBaselineWhitelistRequest,
    ) -> sas_20181203_models.OperateImageBaselineWhitelistResponse:
        """
        @summary Adds a check item of an image baseline to the whitelist, or removes a check item of an image baseline from the whitelist.
        
        @param request: OperateImageBaselineWhitelistRequest
        @return: OperateImageBaselineWhitelistResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.operate_image_baseline_whitelist_with_options(request, runtime)

    async def operate_image_baseline_whitelist_async(
        self,
        request: sas_20181203_models.OperateImageBaselineWhitelistRequest,
    ) -> sas_20181203_models.OperateImageBaselineWhitelistResponse:
        """
        @summary Adds a check item of an image baseline to the whitelist, or removes a check item of an image baseline from the whitelist.
        
        @param request: OperateImageBaselineWhitelistRequest
        @return: OperateImageBaselineWhitelistResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.operate_image_baseline_whitelist_with_options_async(request, runtime)

    def operate_image_vul_with_options(
        self,
        request: sas_20181203_models.OperateImageVulRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.OperateImageVulResponse:
        """
        @summary Handles an image vulnerability, such as fixing the image vulnerability, verifying the fix of the image vulnerability, ignoring the image vulnerability, or canceling ignoring the image vulnerability.
        
        @param request: OperateImageVulRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OperateImageVulResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.info):
            query['Info'] = request.info
        if not UtilClient.is_unset(request.operate_type):
            query['OperateType'] = request.operate_type
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OperateImageVul',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.OperateImageVulResponse(),
            self.call_api(params, req, runtime)
        )

    async def operate_image_vul_with_options_async(
        self,
        request: sas_20181203_models.OperateImageVulRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.OperateImageVulResponse:
        """
        @summary Handles an image vulnerability, such as fixing the image vulnerability, verifying the fix of the image vulnerability, ignoring the image vulnerability, or canceling ignoring the image vulnerability.
        
        @param request: OperateImageVulRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OperateImageVulResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.info):
            query['Info'] = request.info
        if not UtilClient.is_unset(request.operate_type):
            query['OperateType'] = request.operate_type
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OperateImageVul',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.OperateImageVulResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def operate_image_vul(
        self,
        request: sas_20181203_models.OperateImageVulRequest,
    ) -> sas_20181203_models.OperateImageVulResponse:
        """
        @summary Handles an image vulnerability, such as fixing the image vulnerability, verifying the fix of the image vulnerability, ignoring the image vulnerability, or canceling ignoring the image vulnerability.
        
        @param request: OperateImageVulRequest
        @return: OperateImageVulResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.operate_image_vul_with_options(request, runtime)

    async def operate_image_vul_async(
        self,
        request: sas_20181203_models.OperateImageVulRequest,
    ) -> sas_20181203_models.OperateImageVulResponse:
        """
        @summary Handles an image vulnerability, such as fixing the image vulnerability, verifying the fix of the image vulnerability, ignoring the image vulnerability, or canceling ignoring the image vulnerability.
        
        @param request: OperateImageVulRequest
        @return: OperateImageVulResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.operate_image_vul_with_options_async(request, runtime)

    def operate_suspicious_overall_config_with_options(
        self,
        request: sas_20181203_models.OperateSuspiciousOverallConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.OperateSuspiciousOverallConfigResponse:
        """
        @summary Enables or disables a feature that detects exceptions.
        
        @param request: OperateSuspiciousOverallConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OperateSuspiciousOverallConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config):
            query['Config'] = request.config
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.no_target_as_on):
            query['NoTargetAsOn'] = request.no_target_as_on
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OperateSuspiciousOverallConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.OperateSuspiciousOverallConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def operate_suspicious_overall_config_with_options_async(
        self,
        request: sas_20181203_models.OperateSuspiciousOverallConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.OperateSuspiciousOverallConfigResponse:
        """
        @summary Enables or disables a feature that detects exceptions.
        
        @param request: OperateSuspiciousOverallConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OperateSuspiciousOverallConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config):
            query['Config'] = request.config
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.no_target_as_on):
            query['NoTargetAsOn'] = request.no_target_as_on
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OperateSuspiciousOverallConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.OperateSuspiciousOverallConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def operate_suspicious_overall_config(
        self,
        request: sas_20181203_models.OperateSuspiciousOverallConfigRequest,
    ) -> sas_20181203_models.OperateSuspiciousOverallConfigResponse:
        """
        @summary Enables or disables a feature that detects exceptions.
        
        @param request: OperateSuspiciousOverallConfigRequest
        @return: OperateSuspiciousOverallConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.operate_suspicious_overall_config_with_options(request, runtime)

    async def operate_suspicious_overall_config_async(
        self,
        request: sas_20181203_models.OperateSuspiciousOverallConfigRequest,
    ) -> sas_20181203_models.OperateSuspiciousOverallConfigResponse:
        """
        @summary Enables or disables a feature that detects exceptions.
        
        @param request: OperateSuspiciousOverallConfigRequest
        @return: OperateSuspiciousOverallConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.operate_suspicious_overall_config_with_options_async(request, runtime)

    def operate_suspicious_target_config_with_options(
        self,
        request: sas_20181203_models.OperateSuspiciousTargetConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.OperateSuspiciousTargetConfigResponse:
        """
        @summary Configures the scope on which proactive defense takes effect.
        
        @param request: OperateSuspiciousTargetConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OperateSuspiciousTargetConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.target_operations):
            query['TargetOperations'] = request.target_operations
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OperateSuspiciousTargetConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.OperateSuspiciousTargetConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def operate_suspicious_target_config_with_options_async(
        self,
        request: sas_20181203_models.OperateSuspiciousTargetConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.OperateSuspiciousTargetConfigResponse:
        """
        @summary Configures the scope on which proactive defense takes effect.
        
        @param request: OperateSuspiciousTargetConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OperateSuspiciousTargetConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.target_operations):
            query['TargetOperations'] = request.target_operations
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OperateSuspiciousTargetConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.OperateSuspiciousTargetConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def operate_suspicious_target_config(
        self,
        request: sas_20181203_models.OperateSuspiciousTargetConfigRequest,
    ) -> sas_20181203_models.OperateSuspiciousTargetConfigResponse:
        """
        @summary Configures the scope on which proactive defense takes effect.
        
        @param request: OperateSuspiciousTargetConfigRequest
        @return: OperateSuspiciousTargetConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.operate_suspicious_target_config_with_options(request, runtime)

    async def operate_suspicious_target_config_async(
        self,
        request: sas_20181203_models.OperateSuspiciousTargetConfigRequest,
    ) -> sas_20181203_models.OperateSuspiciousTargetConfigResponse:
        """
        @summary Configures the scope on which proactive defense takes effect.
        
        @param request: OperateSuspiciousTargetConfigRequest
        @return: OperateSuspiciousTargetConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.operate_suspicious_target_config_with_options_async(request, runtime)

    def operate_switch_status_with_options(
        self,
        request: sas_20181203_models.OperateSwitchStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.OperateSwitchStatusResponse:
        """
        @summary Changes the status of a rule for container tamper-proofing.
        
        @param request: OperateSwitchStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OperateSwitchStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.rule_id):
            query['RuleId'] = request.rule_id
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OperateSwitchStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.OperateSwitchStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def operate_switch_status_with_options_async(
        self,
        request: sas_20181203_models.OperateSwitchStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.OperateSwitchStatusResponse:
        """
        @summary Changes the status of a rule for container tamper-proofing.
        
        @param request: OperateSwitchStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OperateSwitchStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.rule_id):
            query['RuleId'] = request.rule_id
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OperateSwitchStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.OperateSwitchStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def operate_switch_status(
        self,
        request: sas_20181203_models.OperateSwitchStatusRequest,
    ) -> sas_20181203_models.OperateSwitchStatusResponse:
        """
        @summary Changes the status of a rule for container tamper-proofing.
        
        @param request: OperateSwitchStatusRequest
        @return: OperateSwitchStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.operate_switch_status_with_options(request, runtime)

    async def operate_switch_status_async(
        self,
        request: sas_20181203_models.OperateSwitchStatusRequest,
    ) -> sas_20181203_models.OperateSwitchStatusResponse:
        """
        @summary Changes the status of a rule for container tamper-proofing.
        
        @param request: OperateSwitchStatusRequest
        @return: OperateSwitchStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.operate_switch_status_with_options_async(request, runtime)

    def operate_virus_events_with_options(
        self,
        request: sas_20181203_models.OperateVirusEventsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.OperateVirusEventsResponse:
        """
        @summary Handles alert events that are generated by the antivirus feature. You can perform in-depth detection and removal, add alert events to the whitelist, ignore alert events, or manually handle alert events.
        
        @param request: OperateVirusEventsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OperateVirusEventsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.operation_all):
            query['OperationAll'] = request.operation_all
        if not UtilClient.is_unset(request.operation_code):
            query['OperationCode'] = request.operation_code
        if not UtilClient.is_unset(request.operation_range):
            query['OperationRange'] = request.operation_range
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OperateVirusEvents',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.OperateVirusEventsResponse(),
            self.call_api(params, req, runtime)
        )

    async def operate_virus_events_with_options_async(
        self,
        request: sas_20181203_models.OperateVirusEventsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.OperateVirusEventsResponse:
        """
        @summary Handles alert events that are generated by the antivirus feature. You can perform in-depth detection and removal, add alert events to the whitelist, ignore alert events, or manually handle alert events.
        
        @param request: OperateVirusEventsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OperateVirusEventsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.operation_all):
            query['OperationAll'] = request.operation_all
        if not UtilClient.is_unset(request.operation_code):
            query['OperationCode'] = request.operation_code
        if not UtilClient.is_unset(request.operation_range):
            query['OperationRange'] = request.operation_range
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OperateVirusEvents',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.OperateVirusEventsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def operate_virus_events(
        self,
        request: sas_20181203_models.OperateVirusEventsRequest,
    ) -> sas_20181203_models.OperateVirusEventsResponse:
        """
        @summary Handles alert events that are generated by the antivirus feature. You can perform in-depth detection and removal, add alert events to the whitelist, ignore alert events, or manually handle alert events.
        
        @param request: OperateVirusEventsRequest
        @return: OperateVirusEventsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.operate_virus_events_with_options(request, runtime)

    async def operate_virus_events_async(
        self,
        request: sas_20181203_models.OperateVirusEventsRequest,
    ) -> sas_20181203_models.OperateVirusEventsResponse:
        """
        @summary Handles alert events that are generated by the antivirus feature. You can perform in-depth detection and removal, add alert events to the whitelist, ignore alert events, or manually handle alert events.
        
        @param request: OperateVirusEventsRequest
        @return: OperateVirusEventsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.operate_virus_events_with_options_async(request, runtime)

    def operate_vuls_with_options(
        self,
        request: sas_20181203_models.OperateVulsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.OperateVulsResponse:
        """
        @summary Fixes Linux software vulnerabilities.
        
        @param request: OperateVulsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OperateVulsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.operate_type):
            query['OperateType'] = request.operate_type
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        if not UtilClient.is_unset(request.vul_names):
            query['VulNames'] = request.vul_names
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OperateVuls',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.OperateVulsResponse(),
            self.call_api(params, req, runtime)
        )

    async def operate_vuls_with_options_async(
        self,
        request: sas_20181203_models.OperateVulsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.OperateVulsResponse:
        """
        @summary Fixes Linux software vulnerabilities.
        
        @param request: OperateVulsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OperateVulsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.operate_type):
            query['OperateType'] = request.operate_type
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        if not UtilClient.is_unset(request.vul_names):
            query['VulNames'] = request.vul_names
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OperateVuls',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.OperateVulsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def operate_vuls(
        self,
        request: sas_20181203_models.OperateVulsRequest,
    ) -> sas_20181203_models.OperateVulsResponse:
        """
        @summary Fixes Linux software vulnerabilities.
        
        @param request: OperateVulsRequest
        @return: OperateVulsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.operate_vuls_with_options(request, runtime)

    async def operate_vuls_async(
        self,
        request: sas_20181203_models.OperateVulsRequest,
    ) -> sas_20181203_models.OperateVulsResponse:
        """
        @summary Fixes Linux software vulnerabilities.
        
        @param request: OperateVulsRequest
        @return: OperateVulsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.operate_vuls_with_options_async(request, runtime)

    def operate_web_lock_file_events_with_options(
        self,
        request: sas_20181203_models.OperateWebLockFileEventsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.OperateWebLockFileEventsResponse:
        """
        @summary Handles alert events that are generated for web tamper proofing.
        
        @param request: OperateWebLockFileEventsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OperateWebLockFileEventsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.deal_all):
            query['DealAll'] = request.deal_all
        if not UtilClient.is_unset(request.event_ids):
            query['EventIds'] = request.event_ids
        if not UtilClient.is_unset(request.operation_code):
            query['OperationCode'] = request.operation_code
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OperateWebLockFileEvents',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.OperateWebLockFileEventsResponse(),
            self.call_api(params, req, runtime)
        )

    async def operate_web_lock_file_events_with_options_async(
        self,
        request: sas_20181203_models.OperateWebLockFileEventsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.OperateWebLockFileEventsResponse:
        """
        @summary Handles alert events that are generated for web tamper proofing.
        
        @param request: OperateWebLockFileEventsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OperateWebLockFileEventsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.deal_all):
            query['DealAll'] = request.deal_all
        if not UtilClient.is_unset(request.event_ids):
            query['EventIds'] = request.event_ids
        if not UtilClient.is_unset(request.operation_code):
            query['OperationCode'] = request.operation_code
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OperateWebLockFileEvents',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.OperateWebLockFileEventsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def operate_web_lock_file_events(
        self,
        request: sas_20181203_models.OperateWebLockFileEventsRequest,
    ) -> sas_20181203_models.OperateWebLockFileEventsResponse:
        """
        @summary Handles alert events that are generated for web tamper proofing.
        
        @param request: OperateWebLockFileEventsRequest
        @return: OperateWebLockFileEventsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.operate_web_lock_file_events_with_options(request, runtime)

    async def operate_web_lock_file_events_async(
        self,
        request: sas_20181203_models.OperateWebLockFileEventsRequest,
    ) -> sas_20181203_models.OperateWebLockFileEventsResponse:
        """
        @summary Handles alert events that are generated for web tamper proofing.
        
        @param request: OperateWebLockFileEventsRequest
        @return: OperateWebLockFileEventsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.operate_web_lock_file_events_with_options_async(request, runtime)

    def operation_cancel_ignore_susp_event_with_options(
        self,
        request: sas_20181203_models.OperationCancelIgnoreSuspEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.OperationCancelIgnoreSuspEventResponse:
        """
        @summary Cancels ignoring alert events.
        
        @param request: OperationCancelIgnoreSuspEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OperationCancelIgnoreSuspEventResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.security_event_ids):
            query['SecurityEventIds'] = request.security_event_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OperationCancelIgnoreSuspEvent',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.OperationCancelIgnoreSuspEventResponse(),
            self.call_api(params, req, runtime)
        )

    async def operation_cancel_ignore_susp_event_with_options_async(
        self,
        request: sas_20181203_models.OperationCancelIgnoreSuspEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.OperationCancelIgnoreSuspEventResponse:
        """
        @summary Cancels ignoring alert events.
        
        @param request: OperationCancelIgnoreSuspEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OperationCancelIgnoreSuspEventResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.security_event_ids):
            query['SecurityEventIds'] = request.security_event_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OperationCancelIgnoreSuspEvent',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.OperationCancelIgnoreSuspEventResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def operation_cancel_ignore_susp_event(
        self,
        request: sas_20181203_models.OperationCancelIgnoreSuspEventRequest,
    ) -> sas_20181203_models.OperationCancelIgnoreSuspEventResponse:
        """
        @summary Cancels ignoring alert events.
        
        @param request: OperationCancelIgnoreSuspEventRequest
        @return: OperationCancelIgnoreSuspEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.operation_cancel_ignore_susp_event_with_options(request, runtime)

    async def operation_cancel_ignore_susp_event_async(
        self,
        request: sas_20181203_models.OperationCancelIgnoreSuspEventRequest,
    ) -> sas_20181203_models.OperationCancelIgnoreSuspEventResponse:
        """
        @summary Cancels ignoring alert events.
        
        @param request: OperationCancelIgnoreSuspEventRequest
        @return: OperationCancelIgnoreSuspEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.operation_cancel_ignore_susp_event_with_options_async(request, runtime)

    def operation_customize_report_chart_with_options(
        self,
        request: sas_20181203_models.OperationCustomizeReportChartRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.OperationCustomizeReportChartResponse:
        """
        @summary Modifies the chart of a security report.
        
        @param request: OperationCustomizeReportChartRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OperationCustomizeReportChartResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.chart_ids):
            query['ChartIds'] = request.chart_ids
        if not UtilClient.is_unset(request.report_id):
            query['ReportId'] = request.report_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OperationCustomizeReportChart',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.OperationCustomizeReportChartResponse(),
            self.call_api(params, req, runtime)
        )

    async def operation_customize_report_chart_with_options_async(
        self,
        request: sas_20181203_models.OperationCustomizeReportChartRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.OperationCustomizeReportChartResponse:
        """
        @summary Modifies the chart of a security report.
        
        @param request: OperationCustomizeReportChartRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OperationCustomizeReportChartResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.chart_ids):
            query['ChartIds'] = request.chart_ids
        if not UtilClient.is_unset(request.report_id):
            query['ReportId'] = request.report_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OperationCustomizeReportChart',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.OperationCustomizeReportChartResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def operation_customize_report_chart(
        self,
        request: sas_20181203_models.OperationCustomizeReportChartRequest,
    ) -> sas_20181203_models.OperationCustomizeReportChartResponse:
        """
        @summary Modifies the chart of a security report.
        
        @param request: OperationCustomizeReportChartRequest
        @return: OperationCustomizeReportChartResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.operation_customize_report_chart_with_options(request, runtime)

    async def operation_customize_report_chart_async(
        self,
        request: sas_20181203_models.OperationCustomizeReportChartRequest,
    ) -> sas_20181203_models.OperationCustomizeReportChartResponse:
        """
        @summary Modifies the chart of a security report.
        
        @param request: OperationCustomizeReportChartRequest
        @return: OperationCustomizeReportChartResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.operation_customize_report_chart_with_options_async(request, runtime)

    def operation_susp_events_with_options(
        self,
        request: sas_20181203_models.OperationSuspEventsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.OperationSuspEventsResponse:
        """
        @summary Handles multiple exceptions at a time.
        
        @param request: OperationSuspEventsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OperationSuspEventsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.operation):
            query['Operation'] = request.operation
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.sub_operation):
            query['SubOperation'] = request.sub_operation
        if not UtilClient.is_unset(request.suspicious_event_ids):
            query['SuspiciousEventIds'] = request.suspicious_event_ids
        if not UtilClient.is_unset(request.warn_type):
            query['WarnType'] = request.warn_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OperationSuspEvents',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.OperationSuspEventsResponse(),
            self.call_api(params, req, runtime)
        )

    async def operation_susp_events_with_options_async(
        self,
        request: sas_20181203_models.OperationSuspEventsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.OperationSuspEventsResponse:
        """
        @summary Handles multiple exceptions at a time.
        
        @param request: OperationSuspEventsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: OperationSuspEventsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.operation):
            query['Operation'] = request.operation
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.sub_operation):
            query['SubOperation'] = request.sub_operation
        if not UtilClient.is_unset(request.suspicious_event_ids):
            query['SuspiciousEventIds'] = request.suspicious_event_ids
        if not UtilClient.is_unset(request.warn_type):
            query['WarnType'] = request.warn_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='OperationSuspEvents',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.OperationSuspEventsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def operation_susp_events(
        self,
        request: sas_20181203_models.OperationSuspEventsRequest,
    ) -> sas_20181203_models.OperationSuspEventsResponse:
        """
        @summary Handles multiple exceptions at a time.
        
        @param request: OperationSuspEventsRequest
        @return: OperationSuspEventsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.operation_susp_events_with_options(request, runtime)

    async def operation_susp_events_async(
        self,
        request: sas_20181203_models.OperationSuspEventsRequest,
    ) -> sas_20181203_models.OperationSuspEventsResponse:
        """
        @summary Handles multiple exceptions at a time.
        
        @param request: OperationSuspEventsRequest
        @return: OperationSuspEventsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.operation_susp_events_with_options_async(request, runtime)

    def page_image_registry_with_options(
        self,
        request: sas_20181203_models.PageImageRegistryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.PageImageRegistryResponse:
        """
        @summary Queries image repositories by page.
        
        @param request: PageImageRegistryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: PageImageRegistryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        body = {}
        if not UtilClient.is_unset(request.current_page):
            body['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.registry_name_like):
            body['RegistryNameLike'] = request.registry_name_like
        if not UtilClient.is_unset(request.registry_type_in_list):
            body['RegistryTypeInList'] = request.registry_type_in_list
        if not UtilClient.is_unset(request.registry_type_not_in_list):
            body['RegistryTypeNotInList'] = request.registry_type_not_in_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='PageImageRegistry',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.PageImageRegistryResponse(),
            self.call_api(params, req, runtime)
        )

    async def page_image_registry_with_options_async(
        self,
        request: sas_20181203_models.PageImageRegistryRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.PageImageRegistryResponse:
        """
        @summary Queries image repositories by page.
        
        @param request: PageImageRegistryRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: PageImageRegistryResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        body = {}
        if not UtilClient.is_unset(request.current_page):
            body['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.registry_name_like):
            body['RegistryNameLike'] = request.registry_name_like
        if not UtilClient.is_unset(request.registry_type_in_list):
            body['RegistryTypeInList'] = request.registry_type_in_list
        if not UtilClient.is_unset(request.registry_type_not_in_list):
            body['RegistryTypeNotInList'] = request.registry_type_not_in_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='PageImageRegistry',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.PageImageRegistryResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def page_image_registry(
        self,
        request: sas_20181203_models.PageImageRegistryRequest,
    ) -> sas_20181203_models.PageImageRegistryResponse:
        """
        @summary Queries image repositories by page.
        
        @param request: PageImageRegistryRequest
        @return: PageImageRegistryResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.page_image_registry_with_options(request, runtime)

    async def page_image_registry_async(
        self,
        request: sas_20181203_models.PageImageRegistryRequest,
    ) -> sas_20181203_models.PageImageRegistryResponse:
        """
        @summary Queries image repositories by page.
        
        @param request: PageImageRegistryRequest
        @return: PageImageRegistryResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.page_image_registry_with_options_async(request, runtime)

    def pause_client_with_options(
        self,
        request: sas_20181203_models.PauseClientRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.PauseClientResponse:
        """
        @summary Enables or disables the Security Center agent.
        
        @param request: PauseClientRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: PauseClientResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        if not UtilClient.is_unset(request.value):
            query['Value'] = request.value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='PauseClient',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.PauseClientResponse(),
            self.call_api(params, req, runtime)
        )

    async def pause_client_with_options_async(
        self,
        request: sas_20181203_models.PauseClientRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.PauseClientResponse:
        """
        @summary Enables or disables the Security Center agent.
        
        @param request: PauseClientRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: PauseClientResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        if not UtilClient.is_unset(request.value):
            query['Value'] = request.value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='PauseClient',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.PauseClientResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def pause_client(
        self,
        request: sas_20181203_models.PauseClientRequest,
    ) -> sas_20181203_models.PauseClientResponse:
        """
        @summary Enables or disables the Security Center agent.
        
        @param request: PauseClientRequest
        @return: PauseClientResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.pause_client_with_options(request, runtime)

    async def pause_client_async(
        self,
        request: sas_20181203_models.PauseClientRequest,
    ) -> sas_20181203_models.PauseClientResponse:
        """
        @summary Enables or disables the Security Center agent.
        
        @param request: PauseClientRequest
        @return: PauseClientResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.pause_client_with_options_async(request, runtime)

    def process_soar_strategy_task_with_options(
        self,
        request: sas_20181203_models.ProcessSoarStrategyTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ProcessSoarStrategyTaskResponse:
        """
        @summary Modify the status of strategy tasks
        
        @description This API call is only supported by the Enterprise and Flagship editions of Cloud Security Center, other versions do not support it.
        
        @param request: ProcessSoarStrategyTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ProcessSoarStrategyTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.strategy_task_id):
            query['StrategyTaskId'] = request.strategy_task_id
        if not UtilClient.is_unset(request.task_action):
            query['TaskAction'] = request.task_action
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ProcessSoarStrategyTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ProcessSoarStrategyTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def process_soar_strategy_task_with_options_async(
        self,
        request: sas_20181203_models.ProcessSoarStrategyTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ProcessSoarStrategyTaskResponse:
        """
        @summary Modify the status of strategy tasks
        
        @description This API call is only supported by the Enterprise and Flagship editions of Cloud Security Center, other versions do not support it.
        
        @param request: ProcessSoarStrategyTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ProcessSoarStrategyTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.strategy_task_id):
            query['StrategyTaskId'] = request.strategy_task_id
        if not UtilClient.is_unset(request.task_action):
            query['TaskAction'] = request.task_action
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ProcessSoarStrategyTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ProcessSoarStrategyTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def process_soar_strategy_task(
        self,
        request: sas_20181203_models.ProcessSoarStrategyTaskRequest,
    ) -> sas_20181203_models.ProcessSoarStrategyTaskResponse:
        """
        @summary Modify the status of strategy tasks
        
        @description This API call is only supported by the Enterprise and Flagship editions of Cloud Security Center, other versions do not support it.
        
        @param request: ProcessSoarStrategyTaskRequest
        @return: ProcessSoarStrategyTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.process_soar_strategy_task_with_options(request, runtime)

    async def process_soar_strategy_task_async(
        self,
        request: sas_20181203_models.ProcessSoarStrategyTaskRequest,
    ) -> sas_20181203_models.ProcessSoarStrategyTaskResponse:
        """
        @summary Modify the status of strategy tasks
        
        @description This API call is only supported by the Enterprise and Flagship editions of Cloud Security Center, other versions do not support it.
        
        @param request: ProcessSoarStrategyTaskRequest
        @return: ProcessSoarStrategyTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.process_soar_strategy_task_with_options_async(request, runtime)

    def public_create_image_scan_task_with_options(
        self,
        request: sas_20181203_models.PublicCreateImageScanTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.PublicCreateImageScanTaskResponse:
        """
        @summary Creates an image scan task.
        
        @description Before you call the PublicCreateImageScanTask operation, we recommend that you call the [PublicPreCheckImageScanTask](~~PublicPreCheckImageScanTask~~) operation to query the number of images to scan and the quota for container image scan to be consumed by the image scan task. Make sure that the remaining quota for container image scan is sufficient. This prevents the task from being stopped due to an insufficient quota.
        
        @param request: PublicCreateImageScanTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: PublicCreateImageScanTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.digests):
            query['Digests'] = request.digests
        if not UtilClient.is_unset(request.instance_ids):
            query['InstanceIds'] = request.instance_ids
        if not UtilClient.is_unset(request.region_ids):
            query['RegionIds'] = request.region_ids
        if not UtilClient.is_unset(request.registry_types):
            query['RegistryTypes'] = request.registry_types
        if not UtilClient.is_unset(request.repo_ids):
            query['RepoIds'] = request.repo_ids
        if not UtilClient.is_unset(request.repo_names):
            query['RepoNames'] = request.repo_names
        if not UtilClient.is_unset(request.repo_namespaces):
            query['RepoNamespaces'] = request.repo_namespaces
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.tags):
            query['Tags'] = request.tags
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='PublicCreateImageScanTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.PublicCreateImageScanTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def public_create_image_scan_task_with_options_async(
        self,
        request: sas_20181203_models.PublicCreateImageScanTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.PublicCreateImageScanTaskResponse:
        """
        @summary Creates an image scan task.
        
        @description Before you call the PublicCreateImageScanTask operation, we recommend that you call the [PublicPreCheckImageScanTask](~~PublicPreCheckImageScanTask~~) operation to query the number of images to scan and the quota for container image scan to be consumed by the image scan task. Make sure that the remaining quota for container image scan is sufficient. This prevents the task from being stopped due to an insufficient quota.
        
        @param request: PublicCreateImageScanTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: PublicCreateImageScanTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.digests):
            query['Digests'] = request.digests
        if not UtilClient.is_unset(request.instance_ids):
            query['InstanceIds'] = request.instance_ids
        if not UtilClient.is_unset(request.region_ids):
            query['RegionIds'] = request.region_ids
        if not UtilClient.is_unset(request.registry_types):
            query['RegistryTypes'] = request.registry_types
        if not UtilClient.is_unset(request.repo_ids):
            query['RepoIds'] = request.repo_ids
        if not UtilClient.is_unset(request.repo_names):
            query['RepoNames'] = request.repo_names
        if not UtilClient.is_unset(request.repo_namespaces):
            query['RepoNamespaces'] = request.repo_namespaces
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.tags):
            query['Tags'] = request.tags
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='PublicCreateImageScanTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.PublicCreateImageScanTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def public_create_image_scan_task(
        self,
        request: sas_20181203_models.PublicCreateImageScanTaskRequest,
    ) -> sas_20181203_models.PublicCreateImageScanTaskResponse:
        """
        @summary Creates an image scan task.
        
        @description Before you call the PublicCreateImageScanTask operation, we recommend that you call the [PublicPreCheckImageScanTask](~~PublicPreCheckImageScanTask~~) operation to query the number of images to scan and the quota for container image scan to be consumed by the image scan task. Make sure that the remaining quota for container image scan is sufficient. This prevents the task from being stopped due to an insufficient quota.
        
        @param request: PublicCreateImageScanTaskRequest
        @return: PublicCreateImageScanTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.public_create_image_scan_task_with_options(request, runtime)

    async def public_create_image_scan_task_async(
        self,
        request: sas_20181203_models.PublicCreateImageScanTaskRequest,
    ) -> sas_20181203_models.PublicCreateImageScanTaskResponse:
        """
        @summary Creates an image scan task.
        
        @description Before you call the PublicCreateImageScanTask operation, we recommend that you call the [PublicPreCheckImageScanTask](~~PublicPreCheckImageScanTask~~) operation to query the number of images to scan and the quota for container image scan to be consumed by the image scan task. Make sure that the remaining quota for container image scan is sufficient. This prevents the task from being stopped due to an insufficient quota.
        
        @param request: PublicCreateImageScanTaskRequest
        @return: PublicCreateImageScanTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.public_create_image_scan_task_with_options_async(request, runtime)

    def public_pre_check_image_scan_task_with_options(
        self,
        request: sas_20181203_models.PublicPreCheckImageScanTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.PublicPreCheckImageScanTaskResponse:
        """
        @summary Queries the number of images to scan in an image scan task and the quota for container image scan to be consumed by the task.
        
        @description You can call the PublicPreCheckImageScanTask operation to estimate the quota for container image scan to be consumed by the task. This ensures that you know the quota to be consumed before you perform the task. If the remaining quota for container image scan is less than the quota to be consumed by the task, you must purchase a sufficient quota. This prevents the task from being stopped due to an insufficient quota.
        If you do not specify the optional parameters when you call this operation, the total number of protected images and the quota for container image scan to be consumed by scanning all the protected images are queried. If you specify the optional parameters, the number of images that meet the specified conditions and the quota for container image scan to be consumed by scanning the images are queried.
        
        @param request: PublicPreCheckImageScanTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: PublicPreCheckImageScanTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.digests):
            query['Digests'] = request.digests
        if not UtilClient.is_unset(request.instance_ids):
            query['InstanceIds'] = request.instance_ids
        if not UtilClient.is_unset(request.region_ids):
            query['RegionIds'] = request.region_ids
        if not UtilClient.is_unset(request.registry_types):
            query['RegistryTypes'] = request.registry_types
        if not UtilClient.is_unset(request.repo_ids):
            query['RepoIds'] = request.repo_ids
        if not UtilClient.is_unset(request.repo_names):
            query['RepoNames'] = request.repo_names
        if not UtilClient.is_unset(request.repo_namespaces):
            query['RepoNamespaces'] = request.repo_namespaces
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.tags):
            query['Tags'] = request.tags
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='PublicPreCheckImageScanTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.PublicPreCheckImageScanTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def public_pre_check_image_scan_task_with_options_async(
        self,
        request: sas_20181203_models.PublicPreCheckImageScanTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.PublicPreCheckImageScanTaskResponse:
        """
        @summary Queries the number of images to scan in an image scan task and the quota for container image scan to be consumed by the task.
        
        @description You can call the PublicPreCheckImageScanTask operation to estimate the quota for container image scan to be consumed by the task. This ensures that you know the quota to be consumed before you perform the task. If the remaining quota for container image scan is less than the quota to be consumed by the task, you must purchase a sufficient quota. This prevents the task from being stopped due to an insufficient quota.
        If you do not specify the optional parameters when you call this operation, the total number of protected images and the quota for container image scan to be consumed by scanning all the protected images are queried. If you specify the optional parameters, the number of images that meet the specified conditions and the quota for container image scan to be consumed by scanning the images are queried.
        
        @param request: PublicPreCheckImageScanTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: PublicPreCheckImageScanTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.digests):
            query['Digests'] = request.digests
        if not UtilClient.is_unset(request.instance_ids):
            query['InstanceIds'] = request.instance_ids
        if not UtilClient.is_unset(request.region_ids):
            query['RegionIds'] = request.region_ids
        if not UtilClient.is_unset(request.registry_types):
            query['RegistryTypes'] = request.registry_types
        if not UtilClient.is_unset(request.repo_ids):
            query['RepoIds'] = request.repo_ids
        if not UtilClient.is_unset(request.repo_names):
            query['RepoNames'] = request.repo_names
        if not UtilClient.is_unset(request.repo_namespaces):
            query['RepoNamespaces'] = request.repo_namespaces
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.tags):
            query['Tags'] = request.tags
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='PublicPreCheckImageScanTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.PublicPreCheckImageScanTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def public_pre_check_image_scan_task(
        self,
        request: sas_20181203_models.PublicPreCheckImageScanTaskRequest,
    ) -> sas_20181203_models.PublicPreCheckImageScanTaskResponse:
        """
        @summary Queries the number of images to scan in an image scan task and the quota for container image scan to be consumed by the task.
        
        @description You can call the PublicPreCheckImageScanTask operation to estimate the quota for container image scan to be consumed by the task. This ensures that you know the quota to be consumed before you perform the task. If the remaining quota for container image scan is less than the quota to be consumed by the task, you must purchase a sufficient quota. This prevents the task from being stopped due to an insufficient quota.
        If you do not specify the optional parameters when you call this operation, the total number of protected images and the quota for container image scan to be consumed by scanning all the protected images are queried. If you specify the optional parameters, the number of images that meet the specified conditions and the quota for container image scan to be consumed by scanning the images are queried.
        
        @param request: PublicPreCheckImageScanTaskRequest
        @return: PublicPreCheckImageScanTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.public_pre_check_image_scan_task_with_options(request, runtime)

    async def public_pre_check_image_scan_task_async(
        self,
        request: sas_20181203_models.PublicPreCheckImageScanTaskRequest,
    ) -> sas_20181203_models.PublicPreCheckImageScanTaskResponse:
        """
        @summary Queries the number of images to scan in an image scan task and the quota for container image scan to be consumed by the task.
        
        @description You can call the PublicPreCheckImageScanTask operation to estimate the quota for container image scan to be consumed by the task. This ensures that you know the quota to be consumed before you perform the task. If the remaining quota for container image scan is less than the quota to be consumed by the task, you must purchase a sufficient quota. This prevents the task from being stopped due to an insufficient quota.
        If you do not specify the optional parameters when you call this operation, the total number of protected images and the quota for container image scan to be consumed by scanning all the protected images are queried. If you specify the optional parameters, the number of images that meet the specified conditions and the quota for container image scan to be consumed by scanning the images are queried.
        
        @param request: PublicPreCheckImageScanTaskRequest
        @return: PublicPreCheckImageScanTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.public_pre_check_image_scan_task_with_options_async(request, runtime)

    def public_sync_and_create_image_scan_task_with_options(
        self,
        request: sas_20181203_models.PublicSyncAndCreateImageScanTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.PublicSyncAndCreateImageScanTaskResponse:
        """
        @summary Adds images to Security Center and creates an image scan task to scan the images.
        
        @param request: PublicSyncAndCreateImageScanTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: PublicSyncAndCreateImageScanTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.images):
            query['Images'] = request.images
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='PublicSyncAndCreateImageScanTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.PublicSyncAndCreateImageScanTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def public_sync_and_create_image_scan_task_with_options_async(
        self,
        request: sas_20181203_models.PublicSyncAndCreateImageScanTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.PublicSyncAndCreateImageScanTaskResponse:
        """
        @summary Adds images to Security Center and creates an image scan task to scan the images.
        
        @param request: PublicSyncAndCreateImageScanTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: PublicSyncAndCreateImageScanTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.images):
            query['Images'] = request.images
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='PublicSyncAndCreateImageScanTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.PublicSyncAndCreateImageScanTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def public_sync_and_create_image_scan_task(
        self,
        request: sas_20181203_models.PublicSyncAndCreateImageScanTaskRequest,
    ) -> sas_20181203_models.PublicSyncAndCreateImageScanTaskResponse:
        """
        @summary Adds images to Security Center and creates an image scan task to scan the images.
        
        @param request: PublicSyncAndCreateImageScanTaskRequest
        @return: PublicSyncAndCreateImageScanTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.public_sync_and_create_image_scan_task_with_options(request, runtime)

    async def public_sync_and_create_image_scan_task_async(
        self,
        request: sas_20181203_models.PublicSyncAndCreateImageScanTaskRequest,
    ) -> sas_20181203_models.PublicSyncAndCreateImageScanTaskResponse:
        """
        @summary Adds images to Security Center and creates an image scan task to scan the images.
        
        @param request: PublicSyncAndCreateImageScanTaskRequest
        @return: PublicSyncAndCreateImageScanTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.public_sync_and_create_image_scan_task_with_options_async(request, runtime)

    def query_attack_count_with_options(
        self,
        request: sas_20181203_models.QueryAttackCountRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.QueryAttackCountResponse:
        """
        @summary Queries the number of alert events in each attack phase.
        
        @param request: QueryAttackCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryAttackCountResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        body = {}
        if not UtilClient.is_unset(request.from_):
            body['From'] = request.from_
        if not UtilClient.is_unset(request.lang):
            body['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryAttackCount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.QueryAttackCountResponse(),
            self.call_api(params, req, runtime)
        )

    async def query_attack_count_with_options_async(
        self,
        request: sas_20181203_models.QueryAttackCountRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.QueryAttackCountResponse:
        """
        @summary Queries the number of alert events in each attack phase.
        
        @param request: QueryAttackCountRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryAttackCountResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        body = {}
        if not UtilClient.is_unset(request.from_):
            body['From'] = request.from_
        if not UtilClient.is_unset(request.lang):
            body['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryAttackCount',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.QueryAttackCountResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def query_attack_count(
        self,
        request: sas_20181203_models.QueryAttackCountRequest,
    ) -> sas_20181203_models.QueryAttackCountResponse:
        """
        @summary Queries the number of alert events in each attack phase.
        
        @param request: QueryAttackCountRequest
        @return: QueryAttackCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.query_attack_count_with_options(request, runtime)

    async def query_attack_count_async(
        self,
        request: sas_20181203_models.QueryAttackCountRequest,
    ) -> sas_20181203_models.QueryAttackCountResponse:
        """
        @summary Queries the number of alert events in each attack phase.
        
        @param request: QueryAttackCountRequest
        @return: QueryAttackCountResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.query_attack_count_with_options_async(request, runtime)

    def query_discover_database_with_options(
        self,
        request: sas_20181203_models.QueryDiscoverDatabaseRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.QueryDiscoverDatabaseResponse:
        """
        @summary Queries the progress of a database scan task.
        
        @param request: QueryDiscoverDatabaseRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryDiscoverDatabaseResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.create_mark):
            query['CreateMark'] = request.create_mark
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='QueryDiscoverDatabase',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.QueryDiscoverDatabaseResponse(),
            self.call_api(params, req, runtime)
        )

    async def query_discover_database_with_options_async(
        self,
        request: sas_20181203_models.QueryDiscoverDatabaseRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.QueryDiscoverDatabaseResponse:
        """
        @summary Queries the progress of a database scan task.
        
        @param request: QueryDiscoverDatabaseRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryDiscoverDatabaseResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.create_mark):
            query['CreateMark'] = request.create_mark
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='QueryDiscoverDatabase',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.QueryDiscoverDatabaseResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def query_discover_database(
        self,
        request: sas_20181203_models.QueryDiscoverDatabaseRequest,
    ) -> sas_20181203_models.QueryDiscoverDatabaseResponse:
        """
        @summary Queries the progress of a database scan task.
        
        @param request: QueryDiscoverDatabaseRequest
        @return: QueryDiscoverDatabaseResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.query_discover_database_with_options(request, runtime)

    async def query_discover_database_async(
        self,
        request: sas_20181203_models.QueryDiscoverDatabaseRequest,
    ) -> sas_20181203_models.QueryDiscoverDatabaseResponse:
        """
        @summary Queries the progress of a database scan task.
        
        @param request: QueryDiscoverDatabaseRequest
        @return: QueryDiscoverDatabaseResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.query_discover_database_with_options_async(request, runtime)

    def query_group_id_by_group_name_with_options(
        self,
        request: sas_20181203_models.QueryGroupIdByGroupNameRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.QueryGroupIdByGroupNameResponse:
        """
        @summary Queries the ID of an asset group by using the name of the asset group.
        
        @description You can call the QueryGroupIdByGroupName operation to query the ID of an asset group to which your assets belong by using the name of the asset group. When you call operations such as [GetSuspiciousStatistics](~~GetSuspiciousStatistics~~) and [DeleteGroup](~~DeleteGroup~~), you must specify the ID of the asset group. To query the ID of an asset group, call the QueryGroupIdByGroupName operation.
        ### Limits
        You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
        
        @param request: QueryGroupIdByGroupNameRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryGroupIdByGroupNameResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.group_name):
            query['GroupName'] = request.group_name
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='QueryGroupIdByGroupName',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.QueryGroupIdByGroupNameResponse(),
            self.call_api(params, req, runtime)
        )

    async def query_group_id_by_group_name_with_options_async(
        self,
        request: sas_20181203_models.QueryGroupIdByGroupNameRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.QueryGroupIdByGroupNameResponse:
        """
        @summary Queries the ID of an asset group by using the name of the asset group.
        
        @description You can call the QueryGroupIdByGroupName operation to query the ID of an asset group to which your assets belong by using the name of the asset group. When you call operations such as [GetSuspiciousStatistics](~~GetSuspiciousStatistics~~) and [DeleteGroup](~~DeleteGroup~~), you must specify the ID of the asset group. To query the ID of an asset group, call the QueryGroupIdByGroupName operation.
        ### Limits
        You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
        
        @param request: QueryGroupIdByGroupNameRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryGroupIdByGroupNameResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.group_name):
            query['GroupName'] = request.group_name
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='QueryGroupIdByGroupName',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.QueryGroupIdByGroupNameResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def query_group_id_by_group_name(
        self,
        request: sas_20181203_models.QueryGroupIdByGroupNameRequest,
    ) -> sas_20181203_models.QueryGroupIdByGroupNameResponse:
        """
        @summary Queries the ID of an asset group by using the name of the asset group.
        
        @description You can call the QueryGroupIdByGroupName operation to query the ID of an asset group to which your assets belong by using the name of the asset group. When you call operations such as [GetSuspiciousStatistics](~~GetSuspiciousStatistics~~) and [DeleteGroup](~~DeleteGroup~~), you must specify the ID of the asset group. To query the ID of an asset group, call the QueryGroupIdByGroupName operation.
        ### Limits
        You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
        
        @param request: QueryGroupIdByGroupNameRequest
        @return: QueryGroupIdByGroupNameResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.query_group_id_by_group_name_with_options(request, runtime)

    async def query_group_id_by_group_name_async(
        self,
        request: sas_20181203_models.QueryGroupIdByGroupNameRequest,
    ) -> sas_20181203_models.QueryGroupIdByGroupNameResponse:
        """
        @summary Queries the ID of an asset group by using the name of the asset group.
        
        @description You can call the QueryGroupIdByGroupName operation to query the ID of an asset group to which your assets belong by using the name of the asset group. When you call operations such as [GetSuspiciousStatistics](~~GetSuspiciousStatistics~~) and [DeleteGroup](~~DeleteGroup~~), you must specify the ID of the asset group. To query the ID of an asset group, call the QueryGroupIdByGroupName operation.
        ### Limits
        You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
        
        @param request: QueryGroupIdByGroupNameRequest
        @return: QueryGroupIdByGroupNameResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.query_group_id_by_group_name_with_options_async(request, runtime)

    def query_grouped_security_event_mark_miss_list_with_options(
        self,
        request: sas_20181203_models.QueryGroupedSecurityEventMarkMissListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.QueryGroupedSecurityEventMarkMissListResponse:
        """
        @summary Queries whitelist rules.
        
        @param request: QueryGroupedSecurityEventMarkMissListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryGroupedSecurityEventMarkMissListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.disposal_way):
            query['DisposalWay'] = request.disposal_way
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        body = {}
        if not UtilClient.is_unset(request.current_page):
            body['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.event_name):
            body['EventName'] = request.event_name
        if not UtilClient.is_unset(request.from_):
            body['From'] = request.from_
        if not UtilClient.is_unset(request.lang):
            body['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.remark):
            body['Remark'] = request.remark
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryGroupedSecurityEventMarkMissList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.QueryGroupedSecurityEventMarkMissListResponse(),
            self.call_api(params, req, runtime)
        )

    async def query_grouped_security_event_mark_miss_list_with_options_async(
        self,
        request: sas_20181203_models.QueryGroupedSecurityEventMarkMissListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.QueryGroupedSecurityEventMarkMissListResponse:
        """
        @summary Queries whitelist rules.
        
        @param request: QueryGroupedSecurityEventMarkMissListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryGroupedSecurityEventMarkMissListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.disposal_way):
            query['DisposalWay'] = request.disposal_way
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        body = {}
        if not UtilClient.is_unset(request.current_page):
            body['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.event_name):
            body['EventName'] = request.event_name
        if not UtilClient.is_unset(request.from_):
            body['From'] = request.from_
        if not UtilClient.is_unset(request.lang):
            body['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.remark):
            body['Remark'] = request.remark
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='QueryGroupedSecurityEventMarkMissList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.QueryGroupedSecurityEventMarkMissListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def query_grouped_security_event_mark_miss_list(
        self,
        request: sas_20181203_models.QueryGroupedSecurityEventMarkMissListRequest,
    ) -> sas_20181203_models.QueryGroupedSecurityEventMarkMissListResponse:
        """
        @summary Queries whitelist rules.
        
        @param request: QueryGroupedSecurityEventMarkMissListRequest
        @return: QueryGroupedSecurityEventMarkMissListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.query_grouped_security_event_mark_miss_list_with_options(request, runtime)

    async def query_grouped_security_event_mark_miss_list_async(
        self,
        request: sas_20181203_models.QueryGroupedSecurityEventMarkMissListRequest,
    ) -> sas_20181203_models.QueryGroupedSecurityEventMarkMissListResponse:
        """
        @summary Queries whitelist rules.
        
        @param request: QueryGroupedSecurityEventMarkMissListRequest
        @return: QueryGroupedSecurityEventMarkMissListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.query_grouped_security_event_mark_miss_list_with_options_async(request, runtime)

    def query_guid_task_list_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.QueryGuidTaskListResponse:
        """
        @summary Queries the list of beginner tasks. Security Center provides rewards for users who complete tasks. The rewards include the quota for a value-added feature and log storage capacity.
        
        @param request: QueryGuidTaskListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryGuidTaskListResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='QueryGuidTaskList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.QueryGuidTaskListResponse(),
            self.call_api(params, req, runtime)
        )

    async def query_guid_task_list_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.QueryGuidTaskListResponse:
        """
        @summary Queries the list of beginner tasks. Security Center provides rewards for users who complete tasks. The rewards include the quota for a value-added feature and log storage capacity.
        
        @param request: QueryGuidTaskListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryGuidTaskListResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='QueryGuidTaskList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.QueryGuidTaskListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def query_guid_task_list(self) -> sas_20181203_models.QueryGuidTaskListResponse:
        """
        @summary Queries the list of beginner tasks. Security Center provides rewards for users who complete tasks. The rewards include the quota for a value-added feature and log storage capacity.
        
        @return: QueryGuidTaskListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.query_guid_task_list_with_options(runtime)

    async def query_guid_task_list_async(self) -> sas_20181203_models.QueryGuidTaskListResponse:
        """
        @summary Queries the list of beginner tasks. Security Center provides rewards for users who complete tasks. The rewards include the quota for a value-added feature and log storage capacity.
        
        @return: QueryGuidTaskListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.query_guid_task_list_with_options_async(runtime)

    def query_jenkins_image_registry_persistence_day_with_options(
        self,
        request: sas_20181203_models.QueryJenkinsImageRegistryPersistenceDayRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.QueryJenkinsImageRegistryPersistenceDayResponse:
        """
        @summary Queries the retention period of images that are stored in a Jenkins image repository.
        
        @param request: QueryJenkinsImageRegistryPersistenceDayRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryJenkinsImageRegistryPersistenceDayResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='QueryJenkinsImageRegistryPersistenceDay',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.QueryJenkinsImageRegistryPersistenceDayResponse(),
            self.call_api(params, req, runtime)
        )

    async def query_jenkins_image_registry_persistence_day_with_options_async(
        self,
        request: sas_20181203_models.QueryJenkinsImageRegistryPersistenceDayRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.QueryJenkinsImageRegistryPersistenceDayResponse:
        """
        @summary Queries the retention period of images that are stored in a Jenkins image repository.
        
        @param request: QueryJenkinsImageRegistryPersistenceDayRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryJenkinsImageRegistryPersistenceDayResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='QueryJenkinsImageRegistryPersistenceDay',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.QueryJenkinsImageRegistryPersistenceDayResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def query_jenkins_image_registry_persistence_day(
        self,
        request: sas_20181203_models.QueryJenkinsImageRegistryPersistenceDayRequest,
    ) -> sas_20181203_models.QueryJenkinsImageRegistryPersistenceDayResponse:
        """
        @summary Queries the retention period of images that are stored in a Jenkins image repository.
        
        @param request: QueryJenkinsImageRegistryPersistenceDayRequest
        @return: QueryJenkinsImageRegistryPersistenceDayResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.query_jenkins_image_registry_persistence_day_with_options(request, runtime)

    async def query_jenkins_image_registry_persistence_day_async(
        self,
        request: sas_20181203_models.QueryJenkinsImageRegistryPersistenceDayRequest,
    ) -> sas_20181203_models.QueryJenkinsImageRegistryPersistenceDayResponse:
        """
        @summary Queries the retention period of images that are stored in a Jenkins image repository.
        
        @param request: QueryJenkinsImageRegistryPersistenceDayRequest
        @return: QueryJenkinsImageRegistryPersistenceDayResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.query_jenkins_image_registry_persistence_day_with_options_async(request, runtime)

    def query_pre_check_database_with_options(
        self,
        request: sas_20181203_models.QueryPreCheckDatabaseRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.QueryPreCheckDatabaseResponse:
        """
        @summary Queries the result of a database precheck task.
        
        @param request: QueryPreCheckDatabaseRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryPreCheckDatabaseResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.instance_uuid):
            query['InstanceUuid'] = request.instance_uuid
        if not UtilClient.is_unset(request.task_id):
            query['TaskId'] = request.task_id
        if not UtilClient.is_unset(request.uni_region_id):
            query['UniRegionId'] = request.uni_region_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='QueryPreCheckDatabase',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.QueryPreCheckDatabaseResponse(),
            self.call_api(params, req, runtime)
        )

    async def query_pre_check_database_with_options_async(
        self,
        request: sas_20181203_models.QueryPreCheckDatabaseRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.QueryPreCheckDatabaseResponse:
        """
        @summary Queries the result of a database precheck task.
        
        @param request: QueryPreCheckDatabaseRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: QueryPreCheckDatabaseResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.instance_uuid):
            query['InstanceUuid'] = request.instance_uuid
        if not UtilClient.is_unset(request.task_id):
            query['TaskId'] = request.task_id
        if not UtilClient.is_unset(request.uni_region_id):
            query['UniRegionId'] = request.uni_region_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='QueryPreCheckDatabase',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.QueryPreCheckDatabaseResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def query_pre_check_database(
        self,
        request: sas_20181203_models.QueryPreCheckDatabaseRequest,
    ) -> sas_20181203_models.QueryPreCheckDatabaseResponse:
        """
        @summary Queries the result of a database precheck task.
        
        @param request: QueryPreCheckDatabaseRequest
        @return: QueryPreCheckDatabaseResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.query_pre_check_database_with_options(request, runtime)

    async def query_pre_check_database_async(
        self,
        request: sas_20181203_models.QueryPreCheckDatabaseRequest,
    ) -> sas_20181203_models.QueryPreCheckDatabaseResponse:
        """
        @summary Queries the result of a database precheck task.
        
        @param request: QueryPreCheckDatabaseRequest
        @return: QueryPreCheckDatabaseResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.query_pre_check_database_with_options_async(request, runtime)

    def reboot_machine_with_options(
        self,
        request: sas_20181203_models.RebootMachineRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.RebootMachineResponse:
        """
        @summary Restarts a server. Only Windows servers are supported.
        
        @param request: RebootMachineRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RebootMachineResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='RebootMachine',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.RebootMachineResponse(),
            self.call_api(params, req, runtime)
        )

    async def reboot_machine_with_options_async(
        self,
        request: sas_20181203_models.RebootMachineRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.RebootMachineResponse:
        """
        @summary Restarts a server. Only Windows servers are supported.
        
        @param request: RebootMachineRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RebootMachineResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='RebootMachine',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.RebootMachineResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def reboot_machine(
        self,
        request: sas_20181203_models.RebootMachineRequest,
    ) -> sas_20181203_models.RebootMachineResponse:
        """
        @summary Restarts a server. Only Windows servers are supported.
        
        @param request: RebootMachineRequest
        @return: RebootMachineResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.reboot_machine_with_options(request, runtime)

    async def reboot_machine_async(
        self,
        request: sas_20181203_models.RebootMachineRequest,
    ) -> sas_20181203_models.RebootMachineResponse:
        """
        @summary Restarts a server. Only Windows servers are supported.
        
        @param request: RebootMachineRequest
        @return: RebootMachineResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.reboot_machine_with_options_async(request, runtime)

    def receive_function_trial_reward_by_ali_uid_with_options(
        self,
        request: sas_20181203_models.ReceiveFunctionTrialRewardByAliUidRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ReceiveFunctionTrialRewardByAliUidResponse:
        """
        @summary Receives a reward that allows you to enable a free trial of the cloud honeypot feature or the feature of SDK for malicious file detection. You can receive a reward after you complete the required task.
        
        @param request: ReceiveFunctionTrialRewardByAliUidRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ReceiveFunctionTrialRewardByAliUidResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.function_name):
            query['FunctionName'] = request.function_name
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ReceiveFunctionTrialRewardByAliUid',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ReceiveFunctionTrialRewardByAliUidResponse(),
            self.call_api(params, req, runtime)
        )

    async def receive_function_trial_reward_by_ali_uid_with_options_async(
        self,
        request: sas_20181203_models.ReceiveFunctionTrialRewardByAliUidRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ReceiveFunctionTrialRewardByAliUidResponse:
        """
        @summary Receives a reward that allows you to enable a free trial of the cloud honeypot feature or the feature of SDK for malicious file detection. You can receive a reward after you complete the required task.
        
        @param request: ReceiveFunctionTrialRewardByAliUidRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ReceiveFunctionTrialRewardByAliUidResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.function_name):
            query['FunctionName'] = request.function_name
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ReceiveFunctionTrialRewardByAliUid',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ReceiveFunctionTrialRewardByAliUidResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def receive_function_trial_reward_by_ali_uid(
        self,
        request: sas_20181203_models.ReceiveFunctionTrialRewardByAliUidRequest,
    ) -> sas_20181203_models.ReceiveFunctionTrialRewardByAliUidResponse:
        """
        @summary Receives a reward that allows you to enable a free trial of the cloud honeypot feature or the feature of SDK for malicious file detection. You can receive a reward after you complete the required task.
        
        @param request: ReceiveFunctionTrialRewardByAliUidRequest
        @return: ReceiveFunctionTrialRewardByAliUidResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.receive_function_trial_reward_by_ali_uid_with_options(request, runtime)

    async def receive_function_trial_reward_by_ali_uid_async(
        self,
        request: sas_20181203_models.ReceiveFunctionTrialRewardByAliUidRequest,
    ) -> sas_20181203_models.ReceiveFunctionTrialRewardByAliUidResponse:
        """
        @summary Receives a reward that allows you to enable a free trial of the cloud honeypot feature or the feature of SDK for malicious file detection. You can receive a reward after you complete the required task.
        
        @param request: ReceiveFunctionTrialRewardByAliUidRequest
        @return: ReceiveFunctionTrialRewardByAliUidResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.receive_function_trial_reward_by_ali_uid_with_options_async(request, runtime)

    def refresh_assets_with_options(
        self,
        request: sas_20181203_models.RefreshAssetsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.RefreshAssetsResponse:
        """
        @summary Synchronizes assets.
        
        @param request: RefreshAssetsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RefreshAssetsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.asset_type):
            query['AssetType'] = request.asset_type
        if not UtilClient.is_unset(request.cloud_asset_sub_type):
            query['CloudAssetSubType'] = request.cloud_asset_sub_type
        if not UtilClient.is_unset(request.cloud_asset_type):
            query['CloudAssetType'] = request.cloud_asset_type
        if not UtilClient.is_unset(request.vendor):
            query['Vendor'] = request.vendor
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='RefreshAssets',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.RefreshAssetsResponse(),
            self.call_api(params, req, runtime)
        )

    async def refresh_assets_with_options_async(
        self,
        request: sas_20181203_models.RefreshAssetsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.RefreshAssetsResponse:
        """
        @summary Synchronizes assets.
        
        @param request: RefreshAssetsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RefreshAssetsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.asset_type):
            query['AssetType'] = request.asset_type
        if not UtilClient.is_unset(request.cloud_asset_sub_type):
            query['CloudAssetSubType'] = request.cloud_asset_sub_type
        if not UtilClient.is_unset(request.cloud_asset_type):
            query['CloudAssetType'] = request.cloud_asset_type
        if not UtilClient.is_unset(request.vendor):
            query['Vendor'] = request.vendor
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='RefreshAssets',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.RefreshAssetsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def refresh_assets(
        self,
        request: sas_20181203_models.RefreshAssetsRequest,
    ) -> sas_20181203_models.RefreshAssetsResponse:
        """
        @summary Synchronizes assets.
        
        @param request: RefreshAssetsRequest
        @return: RefreshAssetsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.refresh_assets_with_options(request, runtime)

    async def refresh_assets_async(
        self,
        request: sas_20181203_models.RefreshAssetsRequest,
    ) -> sas_20181203_models.RefreshAssetsResponse:
        """
        @summary Synchronizes assets.
        
        @param request: RefreshAssetsRequest
        @return: RefreshAssetsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.refresh_assets_with_options_async(request, runtime)

    def refresh_container_assets_with_options(
        self,
        request: sas_20181203_models.RefreshContainerAssetsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.RefreshContainerAssetsResponse:
        """
        @summary Refreshes the statistics of container assets in the Assets module.
        
        @param request: RefreshContainerAssetsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RefreshContainerAssetsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.asset_type):
            query['AssetType'] = request.asset_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='RefreshContainerAssets',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.RefreshContainerAssetsResponse(),
            self.call_api(params, req, runtime)
        )

    async def refresh_container_assets_with_options_async(
        self,
        request: sas_20181203_models.RefreshContainerAssetsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.RefreshContainerAssetsResponse:
        """
        @summary Refreshes the statistics of container assets in the Assets module.
        
        @param request: RefreshContainerAssetsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RefreshContainerAssetsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.asset_type):
            query['AssetType'] = request.asset_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='RefreshContainerAssets',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.RefreshContainerAssetsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def refresh_container_assets(
        self,
        request: sas_20181203_models.RefreshContainerAssetsRequest,
    ) -> sas_20181203_models.RefreshContainerAssetsResponse:
        """
        @summary Refreshes the statistics of container assets in the Assets module.
        
        @param request: RefreshContainerAssetsRequest
        @return: RefreshContainerAssetsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.refresh_container_assets_with_options(request, runtime)

    async def refresh_container_assets_async(
        self,
        request: sas_20181203_models.RefreshContainerAssetsRequest,
    ) -> sas_20181203_models.RefreshContainerAssetsResponse:
        """
        @summary Refreshes the statistics of container assets in the Assets module.
        
        @param request: RefreshContainerAssetsRequest
        @return: RefreshContainerAssetsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.refresh_container_assets_with_options_async(request, runtime)

    def refresh_oss_bucket_scan_info_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.RefreshOssBucketScanInfoResponse:
        """
        @summary Refreshes the list of Object Storage Service (OSS) buckets.
        
        @param request: RefreshOssBucketScanInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RefreshOssBucketScanInfoResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='RefreshOssBucketScanInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.RefreshOssBucketScanInfoResponse(),
            self.call_api(params, req, runtime)
        )

    async def refresh_oss_bucket_scan_info_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.RefreshOssBucketScanInfoResponse:
        """
        @summary Refreshes the list of Object Storage Service (OSS) buckets.
        
        @param request: RefreshOssBucketScanInfoRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RefreshOssBucketScanInfoResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='RefreshOssBucketScanInfo',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.RefreshOssBucketScanInfoResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def refresh_oss_bucket_scan_info(self) -> sas_20181203_models.RefreshOssBucketScanInfoResponse:
        """
        @summary Refreshes the list of Object Storage Service (OSS) buckets.
        
        @return: RefreshOssBucketScanInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.refresh_oss_bucket_scan_info_with_options(runtime)

    async def refresh_oss_bucket_scan_info_async(self) -> sas_20181203_models.RefreshOssBucketScanInfoResponse:
        """
        @summary Refreshes the list of Object Storage Service (OSS) buckets.
        
        @return: RefreshOssBucketScanInfoResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.refresh_oss_bucket_scan_info_with_options_async(runtime)

    def refresh_registry_token_with_options(
        self,
        request: sas_20181203_models.RefreshRegistryTokenRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.RefreshRegistryTokenResponse:
        """
        @summary Updates an image token.
        
        @param request: RefreshRegistryTokenRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RefreshRegistryTokenResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.registry_id):
            query['RegistryId'] = request.registry_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='RefreshRegistryToken',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.RefreshRegistryTokenResponse(),
            self.call_api(params, req, runtime)
        )

    async def refresh_registry_token_with_options_async(
        self,
        request: sas_20181203_models.RefreshRegistryTokenRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.RefreshRegistryTokenResponse:
        """
        @summary Updates an image token.
        
        @param request: RefreshRegistryTokenRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RefreshRegistryTokenResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.registry_id):
            query['RegistryId'] = request.registry_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='RefreshRegistryToken',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.RefreshRegistryTokenResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def refresh_registry_token(
        self,
        request: sas_20181203_models.RefreshRegistryTokenRequest,
    ) -> sas_20181203_models.RefreshRegistryTokenResponse:
        """
        @summary Updates an image token.
        
        @param request: RefreshRegistryTokenRequest
        @return: RefreshRegistryTokenResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.refresh_registry_token_with_options(request, runtime)

    async def refresh_registry_token_async(
        self,
        request: sas_20181203_models.RefreshRegistryTokenRequest,
    ) -> sas_20181203_models.RefreshRegistryTokenResponse:
        """
        @summary Updates an image token.
        
        @param request: RefreshRegistryTokenRequest
        @return: RefreshRegistryTokenResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.refresh_registry_token_with_options_async(request, runtime)

    def release_sas_instance_with_options(
        self,
        request: sas_20181203_models.ReleaseSasInstanceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ReleaseSasInstanceResponse:
        """
        @summary 释放云安全中心实例
        
        @param request: ReleaseSasInstanceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ReleaseSasInstanceResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.charge_type):
            body['ChargeType'] = request.charge_type
        if not UtilClient.is_unset(request.instance_id):
            body['InstanceId'] = request.instance_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ReleaseSasInstance',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ReleaseSasInstanceResponse(),
            self.call_api(params, req, runtime)
        )

    async def release_sas_instance_with_options_async(
        self,
        request: sas_20181203_models.ReleaseSasInstanceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ReleaseSasInstanceResponse:
        """
        @summary 释放云安全中心实例
        
        @param request: ReleaseSasInstanceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ReleaseSasInstanceResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.charge_type):
            body['ChargeType'] = request.charge_type
        if not UtilClient.is_unset(request.instance_id):
            body['InstanceId'] = request.instance_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ReleaseSasInstance',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ReleaseSasInstanceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def release_sas_instance(
        self,
        request: sas_20181203_models.ReleaseSasInstanceRequest,
    ) -> sas_20181203_models.ReleaseSasInstanceResponse:
        """
        @summary 释放云安全中心实例
        
        @param request: ReleaseSasInstanceRequest
        @return: ReleaseSasInstanceResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.release_sas_instance_with_options(request, runtime)

    async def release_sas_instance_async(
        self,
        request: sas_20181203_models.ReleaseSasInstanceRequest,
    ) -> sas_20181203_models.ReleaseSasInstanceResponse:
        """
        @summary 释放云安全中心实例
        
        @param request: ReleaseSasInstanceRequest
        @return: ReleaseSasInstanceResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.release_sas_instance_with_options_async(request, runtime)

    def remove_check_instance_result_white_list_with_options(
        self,
        request: sas_20181203_models.RemoveCheckInstanceResultWhiteListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.RemoveCheckInstanceResultWhiteListResponse:
        """
        @summary Removes an instance from the whitelist.
        
        @param request: RemoveCheckInstanceResultWhiteListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RemoveCheckInstanceResultWhiteListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_id):
            query['CheckId'] = request.check_id
        if not UtilClient.is_unset(request.instance_ids):
            query['InstanceIds'] = request.instance_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='RemoveCheckInstanceResultWhiteList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.RemoveCheckInstanceResultWhiteListResponse(),
            self.call_api(params, req, runtime)
        )

    async def remove_check_instance_result_white_list_with_options_async(
        self,
        request: sas_20181203_models.RemoveCheckInstanceResultWhiteListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.RemoveCheckInstanceResultWhiteListResponse:
        """
        @summary Removes an instance from the whitelist.
        
        @param request: RemoveCheckInstanceResultWhiteListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RemoveCheckInstanceResultWhiteListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_id):
            query['CheckId'] = request.check_id
        if not UtilClient.is_unset(request.instance_ids):
            query['InstanceIds'] = request.instance_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='RemoveCheckInstanceResultWhiteList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.RemoveCheckInstanceResultWhiteListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def remove_check_instance_result_white_list(
        self,
        request: sas_20181203_models.RemoveCheckInstanceResultWhiteListRequest,
    ) -> sas_20181203_models.RemoveCheckInstanceResultWhiteListResponse:
        """
        @summary Removes an instance from the whitelist.
        
        @param request: RemoveCheckInstanceResultWhiteListRequest
        @return: RemoveCheckInstanceResultWhiteListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.remove_check_instance_result_white_list_with_options(request, runtime)

    async def remove_check_instance_result_white_list_async(
        self,
        request: sas_20181203_models.RemoveCheckInstanceResultWhiteListRequest,
    ) -> sas_20181203_models.RemoveCheckInstanceResultWhiteListResponse:
        """
        @summary Removes an instance from the whitelist.
        
        @param request: RemoveCheckInstanceResultWhiteListRequest
        @return: RemoveCheckInstanceResultWhiteListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.remove_check_instance_result_white_list_with_options_async(request, runtime)

    def remove_check_result_white_list_with_options(
        self,
        request: sas_20181203_models.RemoveCheckResultWhiteListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.RemoveCheckResultWhiteListResponse:
        """
        @summary Removes the check items of the configuration assessment feature from the whitelist.
        
        @param request: RemoveCheckResultWhiteListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RemoveCheckResultWhiteListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_group_id):
            query['CheckGroupId'] = request.check_group_id
        if not UtilClient.is_unset(request.check_ids):
            query['CheckIds'] = request.check_ids
        if not UtilClient.is_unset(request.rule_id):
            query['RuleId'] = request.rule_id
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='RemoveCheckResultWhiteList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.RemoveCheckResultWhiteListResponse(),
            self.call_api(params, req, runtime)
        )

    async def remove_check_result_white_list_with_options_async(
        self,
        request: sas_20181203_models.RemoveCheckResultWhiteListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.RemoveCheckResultWhiteListResponse:
        """
        @summary Removes the check items of the configuration assessment feature from the whitelist.
        
        @param request: RemoveCheckResultWhiteListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RemoveCheckResultWhiteListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_group_id):
            query['CheckGroupId'] = request.check_group_id
        if not UtilClient.is_unset(request.check_ids):
            query['CheckIds'] = request.check_ids
        if not UtilClient.is_unset(request.rule_id):
            query['RuleId'] = request.rule_id
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='RemoveCheckResultWhiteList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.RemoveCheckResultWhiteListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def remove_check_result_white_list(
        self,
        request: sas_20181203_models.RemoveCheckResultWhiteListRequest,
    ) -> sas_20181203_models.RemoveCheckResultWhiteListResponse:
        """
        @summary Removes the check items of the configuration assessment feature from the whitelist.
        
        @param request: RemoveCheckResultWhiteListRequest
        @return: RemoveCheckResultWhiteListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.remove_check_result_white_list_with_options(request, runtime)

    async def remove_check_result_white_list_async(
        self,
        request: sas_20181203_models.RemoveCheckResultWhiteListRequest,
    ) -> sas_20181203_models.RemoveCheckResultWhiteListResponse:
        """
        @summary Removes the check items of the configuration assessment feature from the whitelist.
        
        @param request: RemoveCheckResultWhiteListRequest
        @return: RemoveCheckResultWhiteListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.remove_check_result_white_list_with_options_async(request, runtime)

    def reset_honeypot_with_options(
        self,
        request: sas_20181203_models.ResetHoneypotRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ResetHoneypotResponse:
        """
        @summary Resets a honeypot.
        
        @param request: ResetHoneypotRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ResetHoneypotResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.honeypot_id):
            query['HoneypotId'] = request.honeypot_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ResetHoneypot',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ResetHoneypotResponse(),
            self.call_api(params, req, runtime)
        )

    async def reset_honeypot_with_options_async(
        self,
        request: sas_20181203_models.ResetHoneypotRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ResetHoneypotResponse:
        """
        @summary Resets a honeypot.
        
        @param request: ResetHoneypotRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ResetHoneypotResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.honeypot_id):
            query['HoneypotId'] = request.honeypot_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ResetHoneypot',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ResetHoneypotResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def reset_honeypot(
        self,
        request: sas_20181203_models.ResetHoneypotRequest,
    ) -> sas_20181203_models.ResetHoneypotResponse:
        """
        @summary Resets a honeypot.
        
        @param request: ResetHoneypotRequest
        @return: ResetHoneypotResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.reset_honeypot_with_options(request, runtime)

    async def reset_honeypot_async(
        self,
        request: sas_20181203_models.ResetHoneypotRequest,
    ) -> sas_20181203_models.ResetHoneypotResponse:
        """
        @summary Resets a honeypot.
        
        @param request: ResetHoneypotRequest
        @return: ResetHoneypotResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.reset_honeypot_with_options_async(request, runtime)

    def reset_log_shipper_with_options(
        self,
        request: sas_20181203_models.ResetLogShipperRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ResetLogShipperResponse:
        """
        @summary Resets and upgrades the log analysis feature. You can call this operation only when the log analysis feature uses the pay-as-you-go billing method.
        
        @param request: ResetLogShipperRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ResetLogShipperResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.hot_ttl):
            query['HotTtl'] = request.hot_ttl
        if not UtilClient.is_unset(request.log_meta_list):
            query['LogMetaList'] = request.log_meta_list
        if not UtilClient.is_unset(request.ttl):
            query['Ttl'] = request.ttl
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ResetLogShipper',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ResetLogShipperResponse(),
            self.call_api(params, req, runtime)
        )

    async def reset_log_shipper_with_options_async(
        self,
        request: sas_20181203_models.ResetLogShipperRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ResetLogShipperResponse:
        """
        @summary Resets and upgrades the log analysis feature. You can call this operation only when the log analysis feature uses the pay-as-you-go billing method.
        
        @param request: ResetLogShipperRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ResetLogShipperResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.hot_ttl):
            query['HotTtl'] = request.hot_ttl
        if not UtilClient.is_unset(request.log_meta_list):
            query['LogMetaList'] = request.log_meta_list
        if not UtilClient.is_unset(request.ttl):
            query['Ttl'] = request.ttl
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ResetLogShipper',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ResetLogShipperResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def reset_log_shipper(
        self,
        request: sas_20181203_models.ResetLogShipperRequest,
    ) -> sas_20181203_models.ResetLogShipperResponse:
        """
        @summary Resets and upgrades the log analysis feature. You can call this operation only when the log analysis feature uses the pay-as-you-go billing method.
        
        @param request: ResetLogShipperRequest
        @return: ResetLogShipperResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.reset_log_shipper_with_options(request, runtime)

    async def reset_log_shipper_async(
        self,
        request: sas_20181203_models.ResetLogShipperRequest,
    ) -> sas_20181203_models.ResetLogShipperResponse:
        """
        @summary Resets and upgrades the log analysis feature. You can call this operation only when the log analysis feature uses the pay-as-you-go billing method.
        
        @param request: ResetLogShipperRequest
        @return: ResetLogShipperResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.reset_log_shipper_with_options_async(request, runtime)

    def retry_agentless_task_with_options(
        self,
        request: sas_20181203_models.RetryAgentlessTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.RetryAgentlessTaskResponse:
        """
        @summary Retries agentless detection tasks.
        
        @param request: RetryAgentlessTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RetryAgentlessTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.task_id):
            query['TaskId'] = request.task_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='RetryAgentlessTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.RetryAgentlessTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def retry_agentless_task_with_options_async(
        self,
        request: sas_20181203_models.RetryAgentlessTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.RetryAgentlessTaskResponse:
        """
        @summary Retries agentless detection tasks.
        
        @param request: RetryAgentlessTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RetryAgentlessTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.task_id):
            query['TaskId'] = request.task_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='RetryAgentlessTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.RetryAgentlessTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def retry_agentless_task(
        self,
        request: sas_20181203_models.RetryAgentlessTaskRequest,
    ) -> sas_20181203_models.RetryAgentlessTaskResponse:
        """
        @summary Retries agentless detection tasks.
        
        @param request: RetryAgentlessTaskRequest
        @return: RetryAgentlessTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.retry_agentless_task_with_options(request, runtime)

    async def retry_agentless_task_async(
        self,
        request: sas_20181203_models.RetryAgentlessTaskRequest,
    ) -> sas_20181203_models.RetryAgentlessTaskResponse:
        """
        @summary Retries agentless detection tasks.
        
        @param request: RetryAgentlessTaskRequest
        @return: RetryAgentlessTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.retry_agentless_task_with_options_async(request, runtime)

    def retry_install_probe_with_options(
        self,
        request: sas_20181203_models.RetryInstallProbeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.RetryInstallProbeResponse:
        """
        @summary Retry installing the honeypot probe.
        
        @param request: RetryInstallProbeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RetryInstallProbeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.probe_id):
            query['ProbeId'] = request.probe_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='RetryInstallProbe',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.RetryInstallProbeResponse(),
            self.call_api(params, req, runtime)
        )

    async def retry_install_probe_with_options_async(
        self,
        request: sas_20181203_models.RetryInstallProbeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.RetryInstallProbeResponse:
        """
        @summary Retry installing the honeypot probe.
        
        @param request: RetryInstallProbeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RetryInstallProbeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.probe_id):
            query['ProbeId'] = request.probe_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='RetryInstallProbe',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.RetryInstallProbeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def retry_install_probe(
        self,
        request: sas_20181203_models.RetryInstallProbeRequest,
    ) -> sas_20181203_models.RetryInstallProbeResponse:
        """
        @summary Retry installing the honeypot probe.
        
        @param request: RetryInstallProbeRequest
        @return: RetryInstallProbeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.retry_install_probe_with_options(request, runtime)

    async def retry_install_probe_async(
        self,
        request: sas_20181203_models.RetryInstallProbeRequest,
    ) -> sas_20181203_models.RetryInstallProbeResponse:
        """
        @summary Retry installing the honeypot probe.
        
        @param request: RetryInstallProbeRequest
        @return: RetryInstallProbeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.retry_install_probe_with_options_async(request, runtime)

    def rollback_susp_event_quara_file_with_options(
        self,
        request: sas_20181203_models.RollbackSuspEventQuaraFileRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.RollbackSuspEventQuaraFileResponse:
        """
        @summary Restores a quarantined file.
        
        @param request: RollbackSuspEventQuaraFileRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RollbackSuspEventQuaraFileResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.quara_file_id):
            query['QuaraFileId'] = request.quara_file_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='RollbackSuspEventQuaraFile',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.RollbackSuspEventQuaraFileResponse(),
            self.call_api(params, req, runtime)
        )

    async def rollback_susp_event_quara_file_with_options_async(
        self,
        request: sas_20181203_models.RollbackSuspEventQuaraFileRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.RollbackSuspEventQuaraFileResponse:
        """
        @summary Restores a quarantined file.
        
        @param request: RollbackSuspEventQuaraFileRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RollbackSuspEventQuaraFileResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.quara_file_id):
            query['QuaraFileId'] = request.quara_file_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='RollbackSuspEventQuaraFile',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.RollbackSuspEventQuaraFileResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def rollback_susp_event_quara_file(
        self,
        request: sas_20181203_models.RollbackSuspEventQuaraFileRequest,
    ) -> sas_20181203_models.RollbackSuspEventQuaraFileResponse:
        """
        @summary Restores a quarantined file.
        
        @param request: RollbackSuspEventQuaraFileRequest
        @return: RollbackSuspEventQuaraFileResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.rollback_susp_event_quara_file_with_options(request, runtime)

    async def rollback_susp_event_quara_file_async(
        self,
        request: sas_20181203_models.RollbackSuspEventQuaraFileRequest,
    ) -> sas_20181203_models.RollbackSuspEventQuaraFileResponse:
        """
        @summary Restores a quarantined file.
        
        @param request: RollbackSuspEventQuaraFileRequest
        @return: RollbackSuspEventQuaraFileResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.rollback_susp_event_quara_file_with_options_async(request, runtime)

    def sas_install_code_with_options(
        self,
        request: sas_20181203_models.SasInstallCodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.SasInstallCodeResponse:
        """
        @summary Queries the installation verification code that is used to run the installation command of the Security Center agent.
        
        @param request: SasInstallCodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SasInstallCodeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SasInstallCode',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.SasInstallCodeResponse(),
            self.call_api(params, req, runtime)
        )

    async def sas_install_code_with_options_async(
        self,
        request: sas_20181203_models.SasInstallCodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.SasInstallCodeResponse:
        """
        @summary Queries the installation verification code that is used to run the installation command of the Security Center agent.
        
        @param request: SasInstallCodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SasInstallCodeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SasInstallCode',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.SasInstallCodeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def sas_install_code(
        self,
        request: sas_20181203_models.SasInstallCodeRequest,
    ) -> sas_20181203_models.SasInstallCodeResponse:
        """
        @summary Queries the installation verification code that is used to run the installation command of the Security Center agent.
        
        @param request: SasInstallCodeRequest
        @return: SasInstallCodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.sas_install_code_with_options(request, runtime)

    async def sas_install_code_async(
        self,
        request: sas_20181203_models.SasInstallCodeRequest,
    ) -> sas_20181203_models.SasInstallCodeResponse:
        """
        @summary Queries the installation verification code that is used to run the installation command of the Security Center agent.
        
        @param request: SasInstallCodeRequest
        @return: SasInstallCodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.sas_install_code_with_options_async(request, runtime)

    def save_customize_report_config_with_options(
        self,
        request: sas_20181203_models.SaveCustomizeReportConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.SaveCustomizeReportConfigResponse:
        """
        @summary Saves the configurations of a custom security report.
        
        @param request: SaveCustomizeReportConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SaveCustomizeReportConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.group_type):
            query['GroupType'] = request.group_type
        if not UtilClient.is_unset(request.member_account_sync_flag):
            query['MemberAccountSyncFlag'] = request.member_account_sync_flag
        if not UtilClient.is_unset(request.pinned_time):
            query['PinnedTime'] = request.pinned_time
        if not UtilClient.is_unset(request.recipients):
            query['Recipients'] = request.recipients
        if not UtilClient.is_unset(request.report_days):
            query['ReportDays'] = request.report_days
        if not UtilClient.is_unset(request.report_end_date):
            query['ReportEndDate'] = request.report_end_date
        if not UtilClient.is_unset(request.report_id):
            query['ReportId'] = request.report_id
        if not UtilClient.is_unset(request.report_lang):
            query['ReportLang'] = request.report_lang
        if not UtilClient.is_unset(request.report_send_type):
            query['ReportSendType'] = request.report_send_type
        if not UtilClient.is_unset(request.report_start_date):
            query['ReportStartDate'] = request.report_start_date
        if not UtilClient.is_unset(request.report_status):
            query['ReportStatus'] = request.report_status
        if not UtilClient.is_unset(request.report_type):
            query['ReportType'] = request.report_type
        if not UtilClient.is_unset(request.report_version):
            query['ReportVersion'] = request.report_version
        if not UtilClient.is_unset(request.send_end_time):
            query['SendEndTime'] = request.send_end_time
        if not UtilClient.is_unset(request.send_period_days):
            query['SendPeriodDays'] = request.send_period_days
        if not UtilClient.is_unset(request.send_period_type):
            query['SendPeriodType'] = request.send_period_type
        if not UtilClient.is_unset(request.send_start_time):
            query['SendStartTime'] = request.send_start_time
        if not UtilClient.is_unset(request.target_groups):
            query['TargetGroups'] = request.target_groups
        if not UtilClient.is_unset(request.target_uids):
            query['TargetUids'] = request.target_uids
        if not UtilClient.is_unset(request.title):
            query['Title'] = request.title
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SaveCustomizeReportConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.SaveCustomizeReportConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def save_customize_report_config_with_options_async(
        self,
        request: sas_20181203_models.SaveCustomizeReportConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.SaveCustomizeReportConfigResponse:
        """
        @summary Saves the configurations of a custom security report.
        
        @param request: SaveCustomizeReportConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SaveCustomizeReportConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.group_type):
            query['GroupType'] = request.group_type
        if not UtilClient.is_unset(request.member_account_sync_flag):
            query['MemberAccountSyncFlag'] = request.member_account_sync_flag
        if not UtilClient.is_unset(request.pinned_time):
            query['PinnedTime'] = request.pinned_time
        if not UtilClient.is_unset(request.recipients):
            query['Recipients'] = request.recipients
        if not UtilClient.is_unset(request.report_days):
            query['ReportDays'] = request.report_days
        if not UtilClient.is_unset(request.report_end_date):
            query['ReportEndDate'] = request.report_end_date
        if not UtilClient.is_unset(request.report_id):
            query['ReportId'] = request.report_id
        if not UtilClient.is_unset(request.report_lang):
            query['ReportLang'] = request.report_lang
        if not UtilClient.is_unset(request.report_send_type):
            query['ReportSendType'] = request.report_send_type
        if not UtilClient.is_unset(request.report_start_date):
            query['ReportStartDate'] = request.report_start_date
        if not UtilClient.is_unset(request.report_status):
            query['ReportStatus'] = request.report_status
        if not UtilClient.is_unset(request.report_type):
            query['ReportType'] = request.report_type
        if not UtilClient.is_unset(request.report_version):
            query['ReportVersion'] = request.report_version
        if not UtilClient.is_unset(request.send_end_time):
            query['SendEndTime'] = request.send_end_time
        if not UtilClient.is_unset(request.send_period_days):
            query['SendPeriodDays'] = request.send_period_days
        if not UtilClient.is_unset(request.send_period_type):
            query['SendPeriodType'] = request.send_period_type
        if not UtilClient.is_unset(request.send_start_time):
            query['SendStartTime'] = request.send_start_time
        if not UtilClient.is_unset(request.target_groups):
            query['TargetGroups'] = request.target_groups
        if not UtilClient.is_unset(request.target_uids):
            query['TargetUids'] = request.target_uids
        if not UtilClient.is_unset(request.title):
            query['Title'] = request.title
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SaveCustomizeReportConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.SaveCustomizeReportConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def save_customize_report_config(
        self,
        request: sas_20181203_models.SaveCustomizeReportConfigRequest,
    ) -> sas_20181203_models.SaveCustomizeReportConfigResponse:
        """
        @summary Saves the configurations of a custom security report.
        
        @param request: SaveCustomizeReportConfigRequest
        @return: SaveCustomizeReportConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.save_customize_report_config_with_options(request, runtime)

    async def save_customize_report_config_async(
        self,
        request: sas_20181203_models.SaveCustomizeReportConfigRequest,
    ) -> sas_20181203_models.SaveCustomizeReportConfigResponse:
        """
        @summary Saves the configurations of a custom security report.
        
        @param request: SaveCustomizeReportConfigRequest
        @return: SaveCustomizeReportConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.save_customize_report_config_with_options_async(request, runtime)

    def save_image_baseline_strategy_with_options(
        self,
        request: sas_20181203_models.SaveImageBaselineStrategyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.SaveImageBaselineStrategyResponse:
        """
        @summary Saves a baseline check policy for images.
        
        @param request: SaveImageBaselineStrategyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SaveImageBaselineStrategyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.baseline_item_list):
            query['BaselineItemList'] = request.baseline_item_list
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        if not UtilClient.is_unset(request.strategy_name):
            query['StrategyName'] = request.strategy_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SaveImageBaselineStrategy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.SaveImageBaselineStrategyResponse(),
            self.call_api(params, req, runtime)
        )

    async def save_image_baseline_strategy_with_options_async(
        self,
        request: sas_20181203_models.SaveImageBaselineStrategyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.SaveImageBaselineStrategyResponse:
        """
        @summary Saves a baseline check policy for images.
        
        @param request: SaveImageBaselineStrategyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SaveImageBaselineStrategyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.baseline_item_list):
            query['BaselineItemList'] = request.baseline_item_list
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        if not UtilClient.is_unset(request.strategy_name):
            query['StrategyName'] = request.strategy_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SaveImageBaselineStrategy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.SaveImageBaselineStrategyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def save_image_baseline_strategy(
        self,
        request: sas_20181203_models.SaveImageBaselineStrategyRequest,
    ) -> sas_20181203_models.SaveImageBaselineStrategyResponse:
        """
        @summary Saves a baseline check policy for images.
        
        @param request: SaveImageBaselineStrategyRequest
        @return: SaveImageBaselineStrategyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.save_image_baseline_strategy_with_options(request, runtime)

    async def save_image_baseline_strategy_async(
        self,
        request: sas_20181203_models.SaveImageBaselineStrategyRequest,
    ) -> sas_20181203_models.SaveImageBaselineStrategyResponse:
        """
        @summary Saves a baseline check policy for images.
        
        @param request: SaveImageBaselineStrategyRequest
        @return: SaveImageBaselineStrategyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.save_image_baseline_strategy_with_options_async(request, runtime)

    def save_susp_event_user_setting_with_options(
        self,
        request: sas_20181203_models.SaveSuspEventUserSettingRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.SaveSuspEventUserSettingResponse:
        """
        @summary Saves alert settings.
        
        @param request: SaveSuspEventUserSettingRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SaveSuspEventUserSettingResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.levels_on):
            query['LevelsOn'] = request.levels_on
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SaveSuspEventUserSetting',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.SaveSuspEventUserSettingResponse(),
            self.call_api(params, req, runtime)
        )

    async def save_susp_event_user_setting_with_options_async(
        self,
        request: sas_20181203_models.SaveSuspEventUserSettingRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.SaveSuspEventUserSettingResponse:
        """
        @summary Saves alert settings.
        
        @param request: SaveSuspEventUserSettingRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SaveSuspEventUserSettingResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.from_):
            query['From'] = request.from_
        if not UtilClient.is_unset(request.levels_on):
            query['LevelsOn'] = request.levels_on
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SaveSuspEventUserSetting',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.SaveSuspEventUserSettingResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def save_susp_event_user_setting(
        self,
        request: sas_20181203_models.SaveSuspEventUserSettingRequest,
    ) -> sas_20181203_models.SaveSuspEventUserSettingResponse:
        """
        @summary Saves alert settings.
        
        @param request: SaveSuspEventUserSettingRequest
        @return: SaveSuspEventUserSettingResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.save_susp_event_user_setting_with_options(request, runtime)

    async def save_susp_event_user_setting_async(
        self,
        request: sas_20181203_models.SaveSuspEventUserSettingRequest,
    ) -> sas_20181203_models.SaveSuspEventUserSettingResponse:
        """
        @summary Saves alert settings.
        
        @param request: SaveSuspEventUserSettingRequest
        @return: SaveSuspEventUserSettingResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.save_susp_event_user_setting_with_options_async(request, runtime)

    def save_white_list_strategy_with_options(
        self,
        request: sas_20181203_models.SaveWhiteListStrategyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.SaveWhiteListStrategyResponse:
        """
        @summary Creates an application whitelist policy.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or enabled the feature, you can call this operation.
        
        @param request: SaveWhiteListStrategyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SaveWhiteListStrategyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        if not UtilClient.is_unset(request.strategy_name):
            query['StrategyName'] = request.strategy_name
        if not UtilClient.is_unset(request.study_time):
            query['StudyTime'] = request.study_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SaveWhiteListStrategy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.SaveWhiteListStrategyResponse(),
            self.call_api(params, req, runtime)
        )

    async def save_white_list_strategy_with_options_async(
        self,
        request: sas_20181203_models.SaveWhiteListStrategyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.SaveWhiteListStrategyResponse:
        """
        @summary Creates an application whitelist policy.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or enabled the feature, you can call this operation.
        
        @param request: SaveWhiteListStrategyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SaveWhiteListStrategyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        if not UtilClient.is_unset(request.strategy_name):
            query['StrategyName'] = request.strategy_name
        if not UtilClient.is_unset(request.study_time):
            query['StudyTime'] = request.study_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SaveWhiteListStrategy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.SaveWhiteListStrategyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def save_white_list_strategy(
        self,
        request: sas_20181203_models.SaveWhiteListStrategyRequest,
    ) -> sas_20181203_models.SaveWhiteListStrategyResponse:
        """
        @summary Creates an application whitelist policy.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or enabled the feature, you can call this operation.
        
        @param request: SaveWhiteListStrategyRequest
        @return: SaveWhiteListStrategyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.save_white_list_strategy_with_options(request, runtime)

    async def save_white_list_strategy_async(
        self,
        request: sas_20181203_models.SaveWhiteListStrategyRequest,
    ) -> sas_20181203_models.SaveWhiteListStrategyResponse:
        """
        @summary Creates an application whitelist policy.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or enabled the feature, you can call this operation.
        
        @param request: SaveWhiteListStrategyRequest
        @return: SaveWhiteListStrategyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.save_white_list_strategy_with_options_async(request, runtime)

    def save_white_list_strategy_assets_with_options(
        self,
        request: sas_20181203_models.SaveWhiteListStrategyAssetsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.SaveWhiteListStrategyAssetsResponse:
        """
        @summary Manages the servers to which an application whitelist policy is applied.
        
        @param request: SaveWhiteListStrategyAssetsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SaveWhiteListStrategyAssetsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.operations):
            query['Operations'] = request.operations
        if not UtilClient.is_unset(request.relation_type):
            query['RelationType'] = request.relation_type
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SaveWhiteListStrategyAssets',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.SaveWhiteListStrategyAssetsResponse(),
            self.call_api(params, req, runtime)
        )

    async def save_white_list_strategy_assets_with_options_async(
        self,
        request: sas_20181203_models.SaveWhiteListStrategyAssetsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.SaveWhiteListStrategyAssetsResponse:
        """
        @summary Manages the servers to which an application whitelist policy is applied.
        
        @param request: SaveWhiteListStrategyAssetsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SaveWhiteListStrategyAssetsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.operations):
            query['Operations'] = request.operations
        if not UtilClient.is_unset(request.relation_type):
            query['RelationType'] = request.relation_type
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SaveWhiteListStrategyAssets',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.SaveWhiteListStrategyAssetsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def save_white_list_strategy_assets(
        self,
        request: sas_20181203_models.SaveWhiteListStrategyAssetsRequest,
    ) -> sas_20181203_models.SaveWhiteListStrategyAssetsResponse:
        """
        @summary Manages the servers to which an application whitelist policy is applied.
        
        @param request: SaveWhiteListStrategyAssetsRequest
        @return: SaveWhiteListStrategyAssetsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.save_white_list_strategy_assets_with_options(request, runtime)

    async def save_white_list_strategy_assets_async(
        self,
        request: sas_20181203_models.SaveWhiteListStrategyAssetsRequest,
    ) -> sas_20181203_models.SaveWhiteListStrategyAssetsResponse:
        """
        @summary Manages the servers to which an application whitelist policy is applied.
        
        @param request: SaveWhiteListStrategyAssetsRequest
        @return: SaveWhiteListStrategyAssetsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.save_white_list_strategy_assets_with_options_async(request, runtime)

    def send_customize_report_with_options(
        self,
        request: sas_20181203_models.SendCustomizeReportRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.SendCustomizeReportResponse:
        """
        @summary Sends a security report to an email address that you specify. You can send only a security report whose statistics are collected in a custom time range.
        
        @param request: SendCustomizeReportRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SendCustomizeReportResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.report_id):
            query['ReportId'] = request.report_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SendCustomizeReport',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.SendCustomizeReportResponse(),
            self.call_api(params, req, runtime)
        )

    async def send_customize_report_with_options_async(
        self,
        request: sas_20181203_models.SendCustomizeReportRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.SendCustomizeReportResponse:
        """
        @summary Sends a security report to an email address that you specify. You can send only a security report whose statistics are collected in a custom time range.
        
        @param request: SendCustomizeReportRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SendCustomizeReportResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.report_id):
            query['ReportId'] = request.report_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SendCustomizeReport',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.SendCustomizeReportResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def send_customize_report(
        self,
        request: sas_20181203_models.SendCustomizeReportRequest,
    ) -> sas_20181203_models.SendCustomizeReportResponse:
        """
        @summary Sends a security report to an email address that you specify. You can send only a security report whose statistics are collected in a custom time range.
        
        @param request: SendCustomizeReportRequest
        @return: SendCustomizeReportResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.send_customize_report_with_options(request, runtime)

    async def send_customize_report_async(
        self,
        request: sas_20181203_models.SendCustomizeReportRequest,
    ) -> sas_20181203_models.SendCustomizeReportResponse:
        """
        @summary Sends a security report to an email address that you specify. You can send only a security report whose statistics are collected in a custom time range.
        
        @param request: SendCustomizeReportRequest
        @return: SendCustomizeReportResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.send_customize_report_with_options_async(request, runtime)

    def set_build_risk_define_rule_config_with_options(
        self,
        request: sas_20181203_models.SetBuildRiskDefineRuleConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.SetBuildRiskDefineRuleConfigResponse:
        """
        @summary Modifies configurations for scanning image build command risks.
        
        @param request: SetBuildRiskDefineRuleConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SetBuildRiskDefineRuleConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config):
            query['Config'] = request.config
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SetBuildRiskDefineRuleConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.SetBuildRiskDefineRuleConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def set_build_risk_define_rule_config_with_options_async(
        self,
        request: sas_20181203_models.SetBuildRiskDefineRuleConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.SetBuildRiskDefineRuleConfigResponse:
        """
        @summary Modifies configurations for scanning image build command risks.
        
        @param request: SetBuildRiskDefineRuleConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SetBuildRiskDefineRuleConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config):
            query['Config'] = request.config
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SetBuildRiskDefineRuleConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.SetBuildRiskDefineRuleConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def set_build_risk_define_rule_config(
        self,
        request: sas_20181203_models.SetBuildRiskDefineRuleConfigRequest,
    ) -> sas_20181203_models.SetBuildRiskDefineRuleConfigResponse:
        """
        @summary Modifies configurations for scanning image build command risks.
        
        @param request: SetBuildRiskDefineRuleConfigRequest
        @return: SetBuildRiskDefineRuleConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.set_build_risk_define_rule_config_with_options(request, runtime)

    async def set_build_risk_define_rule_config_async(
        self,
        request: sas_20181203_models.SetBuildRiskDefineRuleConfigRequest,
    ) -> sas_20181203_models.SetBuildRiskDefineRuleConfigResponse:
        """
        @summary Modifies configurations for scanning image build command risks.
        
        @param request: SetBuildRiskDefineRuleConfigRequest
        @return: SetBuildRiskDefineRuleConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.set_build_risk_define_rule_config_with_options_async(request, runtime)

    def set_cluster_interception_config_with_options(
        self,
        request: sas_20181203_models.SetClusterInterceptionConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.SetClusterInterceptionConfigResponse:
        """
        @summary Configures the status of the container firewall feature.
        
        @param request: SetClusterInterceptionConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SetClusterInterceptionConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_ids):
            query['ClusterIds'] = request.cluster_ids
        if not UtilClient.is_unset(request.switch_on):
            query['SwitchOn'] = request.switch_on
        if not UtilClient.is_unset(request.switch_type):
            query['SwitchType'] = request.switch_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SetClusterInterceptionConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.SetClusterInterceptionConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def set_cluster_interception_config_with_options_async(
        self,
        request: sas_20181203_models.SetClusterInterceptionConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.SetClusterInterceptionConfigResponse:
        """
        @summary Configures the status of the container firewall feature.
        
        @param request: SetClusterInterceptionConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SetClusterInterceptionConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_ids):
            query['ClusterIds'] = request.cluster_ids
        if not UtilClient.is_unset(request.switch_on):
            query['SwitchOn'] = request.switch_on
        if not UtilClient.is_unset(request.switch_type):
            query['SwitchType'] = request.switch_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SetClusterInterceptionConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.SetClusterInterceptionConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def set_cluster_interception_config(
        self,
        request: sas_20181203_models.SetClusterInterceptionConfigRequest,
    ) -> sas_20181203_models.SetClusterInterceptionConfigResponse:
        """
        @summary Configures the status of the container firewall feature.
        
        @param request: SetClusterInterceptionConfigRequest
        @return: SetClusterInterceptionConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.set_cluster_interception_config_with_options(request, runtime)

    async def set_cluster_interception_config_async(
        self,
        request: sas_20181203_models.SetClusterInterceptionConfigRequest,
    ) -> sas_20181203_models.SetClusterInterceptionConfigResponse:
        """
        @summary Configures the status of the container firewall feature.
        
        @param request: SetClusterInterceptionConfigRequest
        @return: SetClusterInterceptionConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.set_cluster_interception_config_with_options_async(request, runtime)

    def set_image_build_risk_status_with_options(
        self,
        request: sas_20181203_models.SetImageBuildRiskStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.SetImageBuildRiskStatusResponse:
        """
        @summary Specifies the status of an image build command risk.
        
        @param request: SetImageBuildRiskStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SetImageBuildRiskStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.image_uuids):
            query['ImageUuids'] = request.image_uuids
        if not UtilClient.is_unset(request.risk_key):
            query['RiskKey'] = request.risk_key
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SetImageBuildRiskStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.SetImageBuildRiskStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def set_image_build_risk_status_with_options_async(
        self,
        request: sas_20181203_models.SetImageBuildRiskStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.SetImageBuildRiskStatusResponse:
        """
        @summary Specifies the status of an image build command risk.
        
        @param request: SetImageBuildRiskStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SetImageBuildRiskStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.image_uuids):
            query['ImageUuids'] = request.image_uuids
        if not UtilClient.is_unset(request.risk_key):
            query['RiskKey'] = request.risk_key
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SetImageBuildRiskStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.SetImageBuildRiskStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def set_image_build_risk_status(
        self,
        request: sas_20181203_models.SetImageBuildRiskStatusRequest,
    ) -> sas_20181203_models.SetImageBuildRiskStatusResponse:
        """
        @summary Specifies the status of an image build command risk.
        
        @param request: SetImageBuildRiskStatusRequest
        @return: SetImageBuildRiskStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.set_image_build_risk_status_with_options(request, runtime)

    async def set_image_build_risk_status_async(
        self,
        request: sas_20181203_models.SetImageBuildRiskStatusRequest,
    ) -> sas_20181203_models.SetImageBuildRiskStatusResponse:
        """
        @summary Specifies the status of an image build command risk.
        
        @param request: SetImageBuildRiskStatusRequest
        @return: SetImageBuildRiskStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.set_image_build_risk_status_with_options_async(request, runtime)

    def set_image_sensitive_file_status_with_options(
        self,
        tmp_req: sas_20181203_models.SetImageSensitiveFileStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.SetImageSensitiveFileStatusResponse:
        """
        @summary Modifies the status of sensitive files in an image.
        
        @param tmp_req: SetImageSensitiveFileStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SetImageSensitiveFileStatusResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.SetImageSensitiveFileStatusShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.scan_range):
            request.scan_range_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.scan_range, 'ScanRange', 'json')
        query = {}
        if not UtilClient.is_unset(request.id_list):
            query['IdList'] = request.id_list
        if not UtilClient.is_unset(request.image_uuids):
            query['ImageUuids'] = request.image_uuids
        if not UtilClient.is_unset(request.scan_range_shrink):
            query['ScanRange'] = request.scan_range_shrink
        if not UtilClient.is_unset(request.sensitive_file_key):
            query['SensitiveFileKey'] = request.sensitive_file_key
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SetImageSensitiveFileStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.SetImageSensitiveFileStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def set_image_sensitive_file_status_with_options_async(
        self,
        tmp_req: sas_20181203_models.SetImageSensitiveFileStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.SetImageSensitiveFileStatusResponse:
        """
        @summary Modifies the status of sensitive files in an image.
        
        @param tmp_req: SetImageSensitiveFileStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SetImageSensitiveFileStatusResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.SetImageSensitiveFileStatusShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.scan_range):
            request.scan_range_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.scan_range, 'ScanRange', 'json')
        query = {}
        if not UtilClient.is_unset(request.id_list):
            query['IdList'] = request.id_list
        if not UtilClient.is_unset(request.image_uuids):
            query['ImageUuids'] = request.image_uuids
        if not UtilClient.is_unset(request.scan_range_shrink):
            query['ScanRange'] = request.scan_range_shrink
        if not UtilClient.is_unset(request.sensitive_file_key):
            query['SensitiveFileKey'] = request.sensitive_file_key
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SetImageSensitiveFileStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.SetImageSensitiveFileStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def set_image_sensitive_file_status(
        self,
        request: sas_20181203_models.SetImageSensitiveFileStatusRequest,
    ) -> sas_20181203_models.SetImageSensitiveFileStatusResponse:
        """
        @summary Modifies the status of sensitive files in an image.
        
        @param request: SetImageSensitiveFileStatusRequest
        @return: SetImageSensitiveFileStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.set_image_sensitive_file_status_with_options(request, runtime)

    async def set_image_sensitive_file_status_async(
        self,
        request: sas_20181203_models.SetImageSensitiveFileStatusRequest,
    ) -> sas_20181203_models.SetImageSensitiveFileStatusResponse:
        """
        @summary Modifies the status of sensitive files in an image.
        
        @param request: SetImageSensitiveFileStatusRequest
        @return: SetImageSensitiveFileStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.set_image_sensitive_file_status_with_options_async(request, runtime)

    def set_registry_scan_day_num_with_options(
        self,
        request: sas_20181203_models.SetRegistryScanDayNumRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.SetRegistryScanDayNumResponse:
        """
        @summary Specifies a cycle to scan images for image repositories. Unit: days.
        
        @param request: SetRegistryScanDayNumRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SetRegistryScanDayNumResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.scan_day_num):
            query['ScanDayNum'] = request.scan_day_num
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SetRegistryScanDayNum',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.SetRegistryScanDayNumResponse(),
            self.call_api(params, req, runtime)
        )

    async def set_registry_scan_day_num_with_options_async(
        self,
        request: sas_20181203_models.SetRegistryScanDayNumRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.SetRegistryScanDayNumResponse:
        """
        @summary Specifies a cycle to scan images for image repositories. Unit: days.
        
        @param request: SetRegistryScanDayNumRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SetRegistryScanDayNumResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.scan_day_num):
            query['ScanDayNum'] = request.scan_day_num
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SetRegistryScanDayNum',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.SetRegistryScanDayNumResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def set_registry_scan_day_num(
        self,
        request: sas_20181203_models.SetRegistryScanDayNumRequest,
    ) -> sas_20181203_models.SetRegistryScanDayNumResponse:
        """
        @summary Specifies a cycle to scan images for image repositories. Unit: days.
        
        @param request: SetRegistryScanDayNumRequest
        @return: SetRegistryScanDayNumResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.set_registry_scan_day_num_with_options(request, runtime)

    async def set_registry_scan_day_num_async(
        self,
        request: sas_20181203_models.SetRegistryScanDayNumRequest,
    ) -> sas_20181203_models.SetRegistryScanDayNumResponse:
        """
        @summary Specifies a cycle to scan images for image repositories. Unit: days.
        
        @param request: SetRegistryScanDayNumRequest
        @return: SetRegistryScanDayNumResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.set_registry_scan_day_num_with_options_async(request, runtime)

    def set_sensitive_define_rule_config_with_options(
        self,
        request: sas_20181203_models.SetSensitiveDefineRuleConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.SetSensitiveDefineRuleConfigResponse:
        """
        @summary Configure the check rules of sensitive files.
        
        @param request: SetSensitiveDefineRuleConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SetSensitiveDefineRuleConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config):
            query['Config'] = request.config
        if not UtilClient.is_unset(request.enable_new_rule):
            query['EnableNewRule'] = request.enable_new_rule
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SetSensitiveDefineRuleConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.SetSensitiveDefineRuleConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def set_sensitive_define_rule_config_with_options_async(
        self,
        request: sas_20181203_models.SetSensitiveDefineRuleConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.SetSensitiveDefineRuleConfigResponse:
        """
        @summary Configure the check rules of sensitive files.
        
        @param request: SetSensitiveDefineRuleConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SetSensitiveDefineRuleConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config):
            query['Config'] = request.config
        if not UtilClient.is_unset(request.enable_new_rule):
            query['EnableNewRule'] = request.enable_new_rule
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SetSensitiveDefineRuleConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.SetSensitiveDefineRuleConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def set_sensitive_define_rule_config(
        self,
        request: sas_20181203_models.SetSensitiveDefineRuleConfigRequest,
    ) -> sas_20181203_models.SetSensitiveDefineRuleConfigResponse:
        """
        @summary Configure the check rules of sensitive files.
        
        @param request: SetSensitiveDefineRuleConfigRequest
        @return: SetSensitiveDefineRuleConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.set_sensitive_define_rule_config_with_options(request, runtime)

    async def set_sensitive_define_rule_config_async(
        self,
        request: sas_20181203_models.SetSensitiveDefineRuleConfigRequest,
    ) -> sas_20181203_models.SetSensitiveDefineRuleConfigResponse:
        """
        @summary Configure the check rules of sensitive files.
        
        @param request: SetSensitiveDefineRuleConfigRequest
        @return: SetSensitiveDefineRuleConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.set_sensitive_define_rule_config_with_options_async(request, runtime)

    def set_sync_refresh_region_with_options(
        self,
        request: sas_20181203_models.SetSyncRefreshRegionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.SetSyncRefreshRegionResponse:
        """
        @summary Configures the regions from which you want to synchronize assets.
        
        @param request: SetSyncRefreshRegionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SetSyncRefreshRegionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.default_region):
            query['DefaultRegion'] = request.default_region
        if not UtilClient.is_unset(request.region_ids):
            query['RegionIds'] = request.region_ids
        if not UtilClient.is_unset(request.vendor):
            query['Vendor'] = request.vendor
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SetSyncRefreshRegion',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.SetSyncRefreshRegionResponse(),
            self.call_api(params, req, runtime)
        )

    async def set_sync_refresh_region_with_options_async(
        self,
        request: sas_20181203_models.SetSyncRefreshRegionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.SetSyncRefreshRegionResponse:
        """
        @summary Configures the regions from which you want to synchronize assets.
        
        @param request: SetSyncRefreshRegionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SetSyncRefreshRegionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.default_region):
            query['DefaultRegion'] = request.default_region
        if not UtilClient.is_unset(request.region_ids):
            query['RegionIds'] = request.region_ids
        if not UtilClient.is_unset(request.vendor):
            query['Vendor'] = request.vendor
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SetSyncRefreshRegion',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.SetSyncRefreshRegionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def set_sync_refresh_region(
        self,
        request: sas_20181203_models.SetSyncRefreshRegionRequest,
    ) -> sas_20181203_models.SetSyncRefreshRegionResponse:
        """
        @summary Configures the regions from which you want to synchronize assets.
        
        @param request: SetSyncRefreshRegionRequest
        @return: SetSyncRefreshRegionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.set_sync_refresh_region_with_options(request, runtime)

    async def set_sync_refresh_region_async(
        self,
        request: sas_20181203_models.SetSyncRefreshRegionRequest,
    ) -> sas_20181203_models.SetSyncRefreshRegionResponse:
        """
        @summary Configures the regions from which you want to synchronize assets.
        
        @param request: SetSyncRefreshRegionRequest
        @return: SetSyncRefreshRegionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.set_sync_refresh_region_with_options_async(request, runtime)

    def start_baseline_security_check_with_options(
        self,
        request: sas_20181203_models.StartBaselineSecurityCheckRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.StartBaselineSecurityCheckResponse:
        """
        @deprecated OpenAPI StartBaselineSecurityCheck is deprecated, please use Sas::2018-12-03::SubmitCheck instead.
        
        @summary Checks cloud service configurations. You can check all items or a single item and verify whether an item is checked.
        
        @param request: StartBaselineSecurityCheckRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: StartBaselineSecurityCheckResponse
        Deprecated
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.item_ids):
            query['ItemIds'] = request.item_ids
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='StartBaselineSecurityCheck',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.StartBaselineSecurityCheckResponse(),
            self.call_api(params, req, runtime)
        )

    async def start_baseline_security_check_with_options_async(
        self,
        request: sas_20181203_models.StartBaselineSecurityCheckRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.StartBaselineSecurityCheckResponse:
        """
        @deprecated OpenAPI StartBaselineSecurityCheck is deprecated, please use Sas::2018-12-03::SubmitCheck instead.
        
        @summary Checks cloud service configurations. You can check all items or a single item and verify whether an item is checked.
        
        @param request: StartBaselineSecurityCheckRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: StartBaselineSecurityCheckResponse
        Deprecated
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.item_ids):
            query['ItemIds'] = request.item_ids
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.resource_owner_id):
            query['ResourceOwnerId'] = request.resource_owner_id
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='StartBaselineSecurityCheck',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.StartBaselineSecurityCheckResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def start_baseline_security_check(
        self,
        request: sas_20181203_models.StartBaselineSecurityCheckRequest,
    ) -> sas_20181203_models.StartBaselineSecurityCheckResponse:
        """
        @deprecated OpenAPI StartBaselineSecurityCheck is deprecated, please use Sas::2018-12-03::SubmitCheck instead.
        
        @summary Checks cloud service configurations. You can check all items or a single item and verify whether an item is checked.
        
        @param request: StartBaselineSecurityCheckRequest
        @return: StartBaselineSecurityCheckResponse
        Deprecated
        """
        runtime = util_models.RuntimeOptions()
        return self.start_baseline_security_check_with_options(request, runtime)

    async def start_baseline_security_check_async(
        self,
        request: sas_20181203_models.StartBaselineSecurityCheckRequest,
    ) -> sas_20181203_models.StartBaselineSecurityCheckResponse:
        """
        @deprecated OpenAPI StartBaselineSecurityCheck is deprecated, please use Sas::2018-12-03::SubmitCheck instead.
        
        @summary Checks cloud service configurations. You can check all items or a single item and verify whether an item is checked.
        
        @param request: StartBaselineSecurityCheckRequest
        @return: StartBaselineSecurityCheckResponse
        Deprecated
        """
        runtime = util_models.RuntimeOptions()
        return await self.start_baseline_security_check_with_options_async(request, runtime)

    def start_discover_database_task_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.StartDiscoverDatabaseTaskResponse:
        """
        @summary Starts a database scan task.
        
        @param request: StartDiscoverDatabaseTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: StartDiscoverDatabaseTaskResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='StartDiscoverDatabaseTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.StartDiscoverDatabaseTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def start_discover_database_task_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.StartDiscoverDatabaseTaskResponse:
        """
        @summary Starts a database scan task.
        
        @param request: StartDiscoverDatabaseTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: StartDiscoverDatabaseTaskResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='StartDiscoverDatabaseTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.StartDiscoverDatabaseTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def start_discover_database_task(self) -> sas_20181203_models.StartDiscoverDatabaseTaskResponse:
        """
        @summary Starts a database scan task.
        
        @return: StartDiscoverDatabaseTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.start_discover_database_task_with_options(runtime)

    async def start_discover_database_task_async(self) -> sas_20181203_models.StartDiscoverDatabaseTaskResponse:
        """
        @summary Starts a database scan task.
        
        @return: StartDiscoverDatabaseTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.start_discover_database_task_with_options_async(runtime)

    def start_honeypot_with_options(
        self,
        request: sas_20181203_models.StartHoneypotRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.StartHoneypotResponse:
        """
        @summary Starts a honeypot.
        
        @param request: StartHoneypotRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: StartHoneypotResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.honeypot_id):
            query['HoneypotId'] = request.honeypot_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='StartHoneypot',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.StartHoneypotResponse(),
            self.call_api(params, req, runtime)
        )

    async def start_honeypot_with_options_async(
        self,
        request: sas_20181203_models.StartHoneypotRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.StartHoneypotResponse:
        """
        @summary Starts a honeypot.
        
        @param request: StartHoneypotRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: StartHoneypotResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.honeypot_id):
            query['HoneypotId'] = request.honeypot_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='StartHoneypot',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.StartHoneypotResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def start_honeypot(
        self,
        request: sas_20181203_models.StartHoneypotRequest,
    ) -> sas_20181203_models.StartHoneypotResponse:
        """
        @summary Starts a honeypot.
        
        @param request: StartHoneypotRequest
        @return: StartHoneypotResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.start_honeypot_with_options(request, runtime)

    async def start_honeypot_async(
        self,
        request: sas_20181203_models.StartHoneypotRequest,
    ) -> sas_20181203_models.StartHoneypotResponse:
        """
        @summary Starts a honeypot.
        
        @param request: StartHoneypotRequest
        @return: StartHoneypotResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.start_honeypot_with_options_async(request, runtime)

    def start_idc_probe_scan_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.StartIdcProbeScanResponse:
        """
        @summary Starts an IDC scan task.
        
        @param request: StartIdcProbeScanRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: StartIdcProbeScanResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='StartIdcProbeScan',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.StartIdcProbeScanResponse(),
            self.call_api(params, req, runtime)
        )

    async def start_idc_probe_scan_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.StartIdcProbeScanResponse:
        """
        @summary Starts an IDC scan task.
        
        @param request: StartIdcProbeScanRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: StartIdcProbeScanResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='StartIdcProbeScan',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.StartIdcProbeScanResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def start_idc_probe_scan(self) -> sas_20181203_models.StartIdcProbeScanResponse:
        """
        @summary Starts an IDC scan task.
        
        @return: StartIdcProbeScanResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.start_idc_probe_scan_with_options(runtime)

    async def start_idc_probe_scan_async(self) -> sas_20181203_models.StartIdcProbeScanResponse:
        """
        @summary Starts an IDC scan task.
        
        @return: StartIdcProbeScanResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.start_idc_probe_scan_with_options_async(runtime)

    def start_pre_check_database_with_options(
        self,
        request: sas_20181203_models.StartPreCheckDatabaseRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.StartPreCheckDatabaseResponse:
        """
        @summary Starts a database precheck task.
        
        @param request: StartPreCheckDatabaseRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: StartPreCheckDatabaseResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.database_type):
            query['DatabaseType'] = request.database_type
        if not UtilClient.is_unset(request.instance_uuid):
            query['InstanceUuid'] = request.instance_uuid
        if not UtilClient.is_unset(request.uni_region_id):
            query['UniRegionId'] = request.uni_region_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='StartPreCheckDatabase',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.StartPreCheckDatabaseResponse(),
            self.call_api(params, req, runtime)
        )

    async def start_pre_check_database_with_options_async(
        self,
        request: sas_20181203_models.StartPreCheckDatabaseRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.StartPreCheckDatabaseResponse:
        """
        @summary Starts a database precheck task.
        
        @param request: StartPreCheckDatabaseRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: StartPreCheckDatabaseResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.database_type):
            query['DatabaseType'] = request.database_type
        if not UtilClient.is_unset(request.instance_uuid):
            query['InstanceUuid'] = request.instance_uuid
        if not UtilClient.is_unset(request.uni_region_id):
            query['UniRegionId'] = request.uni_region_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='StartPreCheckDatabase',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.StartPreCheckDatabaseResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def start_pre_check_database(
        self,
        request: sas_20181203_models.StartPreCheckDatabaseRequest,
    ) -> sas_20181203_models.StartPreCheckDatabaseResponse:
        """
        @summary Starts a database precheck task.
        
        @param request: StartPreCheckDatabaseRequest
        @return: StartPreCheckDatabaseResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.start_pre_check_database_with_options(request, runtime)

    async def start_pre_check_database_async(
        self,
        request: sas_20181203_models.StartPreCheckDatabaseRequest,
    ) -> sas_20181203_models.StartPreCheckDatabaseResponse:
        """
        @summary Starts a database precheck task.
        
        @param request: StartPreCheckDatabaseRequest
        @return: StartPreCheckDatabaseResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.start_pre_check_database_with_options_async(request, runtime)

    def start_virus_scan_task_with_options(
        self,
        request: sas_20181203_models.StartVirusScanTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.StartVirusScanTaskResponse:
        """
        @summary Performs a virus scan task on a server or multiple servers.
        
        @param request: StartVirusScanTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: StartVirusScanTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.target_info):
            query['TargetInfo'] = request.target_info
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='StartVirusScanTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.StartVirusScanTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def start_virus_scan_task_with_options_async(
        self,
        request: sas_20181203_models.StartVirusScanTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.StartVirusScanTaskResponse:
        """
        @summary Performs a virus scan task on a server or multiple servers.
        
        @param request: StartVirusScanTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: StartVirusScanTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.target_info):
            query['TargetInfo'] = request.target_info
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='StartVirusScanTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.StartVirusScanTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def start_virus_scan_task(
        self,
        request: sas_20181203_models.StartVirusScanTaskRequest,
    ) -> sas_20181203_models.StartVirusScanTaskResponse:
        """
        @summary Performs a virus scan task on a server or multiple servers.
        
        @param request: StartVirusScanTaskRequest
        @return: StartVirusScanTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.start_virus_scan_task_with_options(request, runtime)

    async def start_virus_scan_task_async(
        self,
        request: sas_20181203_models.StartVirusScanTaskRequest,
    ) -> sas_20181203_models.StartVirusScanTaskResponse:
        """
        @summary Performs a virus scan task on a server or multiple servers.
        
        @param request: StartVirusScanTaskRequest
        @return: StartVirusScanTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.start_virus_scan_task_with_options_async(request, runtime)

    def stop_honeypot_with_options(
        self,
        request: sas_20181203_models.StopHoneypotRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.StopHoneypotResponse:
        """
        @summary Stops a honeypot.
        
        @param request: StopHoneypotRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: StopHoneypotResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.honeypot_id):
            query['HoneypotId'] = request.honeypot_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='StopHoneypot',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.StopHoneypotResponse(),
            self.call_api(params, req, runtime)
        )

    async def stop_honeypot_with_options_async(
        self,
        request: sas_20181203_models.StopHoneypotRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.StopHoneypotResponse:
        """
        @summary Stops a honeypot.
        
        @param request: StopHoneypotRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: StopHoneypotResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.honeypot_id):
            query['HoneypotId'] = request.honeypot_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='StopHoneypot',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.StopHoneypotResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def stop_honeypot(
        self,
        request: sas_20181203_models.StopHoneypotRequest,
    ) -> sas_20181203_models.StopHoneypotResponse:
        """
        @summary Stops a honeypot.
        
        @param request: StopHoneypotRequest
        @return: StopHoneypotResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.stop_honeypot_with_options(request, runtime)

    async def stop_honeypot_async(
        self,
        request: sas_20181203_models.StopHoneypotRequest,
    ) -> sas_20181203_models.StopHoneypotResponse:
        """
        @summary Stops a honeypot.
        
        @param request: StopHoneypotRequest
        @return: StopHoneypotResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.stop_honeypot_with_options_async(request, runtime)

    def submit_check_with_options(
        self,
        request: sas_20181203_models.SubmitCheckRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.SubmitCheckResponse:
        """
        @summary Submits a configuration assessment task.
        
        @param request: SubmitCheckRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SubmitCheckResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.scan_range):
            query['ScanRange'] = request.scan_range
        if not UtilClient.is_unset(request.task_source):
            query['TaskSource'] = request.task_source
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SubmitCheck',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.SubmitCheckResponse(),
            self.call_api(params, req, runtime)
        )

    async def submit_check_with_options_async(
        self,
        request: sas_20181203_models.SubmitCheckRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.SubmitCheckResponse:
        """
        @summary Submits a configuration assessment task.
        
        @param request: SubmitCheckRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SubmitCheckResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.scan_range):
            query['ScanRange'] = request.scan_range
        if not UtilClient.is_unset(request.task_source):
            query['TaskSource'] = request.task_source
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SubmitCheck',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.SubmitCheckResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def submit_check(
        self,
        request: sas_20181203_models.SubmitCheckRequest,
    ) -> sas_20181203_models.SubmitCheckResponse:
        """
        @summary Submits a configuration assessment task.
        
        @param request: SubmitCheckRequest
        @return: SubmitCheckResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.submit_check_with_options(request, runtime)

    async def submit_check_async(
        self,
        request: sas_20181203_models.SubmitCheckRequest,
    ) -> sas_20181203_models.SubmitCheckResponse:
        """
        @summary Submits a configuration assessment task.
        
        @param request: SubmitCheckRequest
        @return: SubmitCheckResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.submit_check_with_options_async(request, runtime)

    def submit_operation_task_with_options(
        self,
        request: sas_20181203_models.SubmitOperationTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.SubmitOperationTaskResponse:
        """
        @summary Submits a repair task of risk items detected in configuration assessment or rolls back a repair task that is executed.
        
        @param request: SubmitOperationTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SubmitOperationTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_id):
            query['CheckId'] = request.check_id
        if not UtilClient.is_unset(request.dimension_type):
            query['DimensionType'] = request.dimension_type
        if not UtilClient.is_unset(request.operation_task_instances):
            query['OperationTaskInstances'] = request.operation_task_instances
        if not UtilClient.is_unset(request.relation_key):
            query['RelationKey'] = request.relation_key
        if not UtilClient.is_unset(request.repair_temp_param):
            query['RepairTempParam'] = request.repair_temp_param
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SubmitOperationTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.SubmitOperationTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def submit_operation_task_with_options_async(
        self,
        request: sas_20181203_models.SubmitOperationTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.SubmitOperationTaskResponse:
        """
        @summary Submits a repair task of risk items detected in configuration assessment or rolls back a repair task that is executed.
        
        @param request: SubmitOperationTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SubmitOperationTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_id):
            query['CheckId'] = request.check_id
        if not UtilClient.is_unset(request.dimension_type):
            query['DimensionType'] = request.dimension_type
        if not UtilClient.is_unset(request.operation_task_instances):
            query['OperationTaskInstances'] = request.operation_task_instances
        if not UtilClient.is_unset(request.relation_key):
            query['RelationKey'] = request.relation_key
        if not UtilClient.is_unset(request.repair_temp_param):
            query['RepairTempParam'] = request.repair_temp_param
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='SubmitOperationTask',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.SubmitOperationTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def submit_operation_task(
        self,
        request: sas_20181203_models.SubmitOperationTaskRequest,
    ) -> sas_20181203_models.SubmitOperationTaskResponse:
        """
        @summary Submits a repair task of risk items detected in configuration assessment or rolls back a repair task that is executed.
        
        @param request: SubmitOperationTaskRequest
        @return: SubmitOperationTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.submit_operation_task_with_options(request, runtime)

    async def submit_operation_task_async(
        self,
        request: sas_20181203_models.SubmitOperationTaskRequest,
    ) -> sas_20181203_models.SubmitOperationTaskResponse:
        """
        @summary Submits a repair task of risk items detected in configuration assessment or rolls back a repair task that is executed.
        
        @param request: SubmitOperationTaskRequest
        @return: SubmitOperationTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.submit_operation_task_with_options_async(request, runtime)

    def submit_tenant_check_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.SubmitTenantCheckResponse:
        """
        @summary Submits a free quick scan task, which includes vulnerability detection in the free category and free check items of Cloud Security Posture Management (CSPM).
        
        @param request: SubmitTenantCheckRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SubmitTenantCheckResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='SubmitTenantCheck',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.SubmitTenantCheckResponse(),
            self.call_api(params, req, runtime)
        )

    async def submit_tenant_check_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.SubmitTenantCheckResponse:
        """
        @summary Submits a free quick scan task, which includes vulnerability detection in the free category and free check items of Cloud Security Posture Management (CSPM).
        
        @param request: SubmitTenantCheckRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SubmitTenantCheckResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='SubmitTenantCheck',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.SubmitTenantCheckResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def submit_tenant_check(self) -> sas_20181203_models.SubmitTenantCheckResponse:
        """
        @summary Submits a free quick scan task, which includes vulnerability detection in the free category and free check items of Cloud Security Posture Management (CSPM).
        
        @return: SubmitTenantCheckResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.submit_tenant_check_with_options(runtime)

    async def submit_tenant_check_async(self) -> sas_20181203_models.SubmitTenantCheckResponse:
        """
        @summary Submits a free quick scan task, which includes vulnerability detection in the free category and free check items of Cloud Security Posture Management (CSPM).
        
        @return: SubmitTenantCheckResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.submit_tenant_check_with_options_async(runtime)

    def trigger_check_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.TriggerCheckResponse:
        """
        @summary Triggers ISO 27001 compliance checks of Security Center.
        
        @param request: TriggerCheckRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: TriggerCheckResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='TriggerCheck',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.TriggerCheckResponse(),
            self.call_api(params, req, runtime)
        )

    async def trigger_check_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.TriggerCheckResponse:
        """
        @summary Triggers ISO 27001 compliance checks of Security Center.
        
        @param request: TriggerCheckRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: TriggerCheckResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='TriggerCheck',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.TriggerCheckResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def trigger_check(self) -> sas_20181203_models.TriggerCheckResponse:
        """
        @summary Triggers ISO 27001 compliance checks of Security Center.
        
        @return: TriggerCheckResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.trigger_check_with_options(runtime)

    async def trigger_check_async(self) -> sas_20181203_models.TriggerCheckResponse:
        """
        @summary Triggers ISO 27001 compliance checks of Security Center.
        
        @return: TriggerCheckResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.trigger_check_with_options_async(runtime)

    def un_bind_hybrid_proxy_with_options(
        self,
        request: sas_20181203_models.UnBindHybridProxyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UnBindHybridProxyResponse:
        """
        @summary Removes servers from a proxy cluster.
        
        @param request: UnBindHybridProxyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UnBindHybridProxyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.yundun_uuids):
            query['YundunUuids'] = request.yundun_uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UnBindHybridProxy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UnBindHybridProxyResponse(),
            self.call_api(params, req, runtime)
        )

    async def un_bind_hybrid_proxy_with_options_async(
        self,
        request: sas_20181203_models.UnBindHybridProxyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UnBindHybridProxyResponse:
        """
        @summary Removes servers from a proxy cluster.
        
        @param request: UnBindHybridProxyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UnBindHybridProxyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.yundun_uuids):
            query['YundunUuids'] = request.yundun_uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UnBindHybridProxy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UnBindHybridProxyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def un_bind_hybrid_proxy(
        self,
        request: sas_20181203_models.UnBindHybridProxyRequest,
    ) -> sas_20181203_models.UnBindHybridProxyResponse:
        """
        @summary Removes servers from a proxy cluster.
        
        @param request: UnBindHybridProxyRequest
        @return: UnBindHybridProxyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.un_bind_hybrid_proxy_with_options(request, runtime)

    async def un_bind_hybrid_proxy_async(
        self,
        request: sas_20181203_models.UnBindHybridProxyRequest,
    ) -> sas_20181203_models.UnBindHybridProxyResponse:
        """
        @summary Removes servers from a proxy cluster.
        
        @param request: UnBindHybridProxyRequest
        @return: UnBindHybridProxyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.un_bind_hybrid_proxy_with_options_async(request, runtime)

    def un_mark_monitor_accounts_with_options(
        self,
        request: sas_20181203_models.UnMarkMonitorAccountsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UnMarkMonitorAccountsResponse:
        """
        @summary Cancel marking for members. You can call this operation to remove followed members from the list. In the Security Center console, the drop-down list above the left-side navigation pane no longer displays the members.
        
        @param request: UnMarkMonitorAccountsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UnMarkMonitorAccountsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.account_ids):
            query['AccountIds'] = request.account_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UnMarkMonitorAccounts',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UnMarkMonitorAccountsResponse(),
            self.call_api(params, req, runtime)
        )

    async def un_mark_monitor_accounts_with_options_async(
        self,
        request: sas_20181203_models.UnMarkMonitorAccountsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UnMarkMonitorAccountsResponse:
        """
        @summary Cancel marking for members. You can call this operation to remove followed members from the list. In the Security Center console, the drop-down list above the left-side navigation pane no longer displays the members.
        
        @param request: UnMarkMonitorAccountsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UnMarkMonitorAccountsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.account_ids):
            query['AccountIds'] = request.account_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UnMarkMonitorAccounts',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UnMarkMonitorAccountsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def un_mark_monitor_accounts(
        self,
        request: sas_20181203_models.UnMarkMonitorAccountsRequest,
    ) -> sas_20181203_models.UnMarkMonitorAccountsResponse:
        """
        @summary Cancel marking for members. You can call this operation to remove followed members from the list. In the Security Center console, the drop-down list above the left-side navigation pane no longer displays the members.
        
        @param request: UnMarkMonitorAccountsRequest
        @return: UnMarkMonitorAccountsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.un_mark_monitor_accounts_with_options(request, runtime)

    async def un_mark_monitor_accounts_async(
        self,
        request: sas_20181203_models.UnMarkMonitorAccountsRequest,
    ) -> sas_20181203_models.UnMarkMonitorAccountsResponse:
        """
        @summary Cancel marking for members. You can call this operation to remove followed members from the list. In the Security Center console, the drop-down list above the left-side navigation pane no longer displays the members.
        
        @param request: UnMarkMonitorAccountsRequest
        @return: UnMarkMonitorAccountsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.un_mark_monitor_accounts_with_options_async(request, runtime)

    def unbind_aegis_with_options(
        self,
        request: sas_20181203_models.UnbindAegisRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UnbindAegisResponse:
        """
        @summary Unbinds servers that are not deployed on Alibaba Cloud from Security Center.
        
        @description If you no longer require protection for servers that are not deployed on Alibaba Cloud, you can call this operation to unbind the servers from Security Center. After you unbind a server that is not deployed on Alibaba Cloud from Security Center, the server no longer consumes the quota of protected servers or protected server vCPUs. This way, you can install the Security Center agent on other servers to meet your business requirements.
        > You can unbind only the servers that are not deployed on Alibaba Cloud from Security Center. If you use an Alibaba Cloud Elastic Compute Service (ECS) instance, you do not need to unbind the ECS instance. If you uninstall the Security Center agent from an ECS instance, the ECS instance still exists as a disconnected server in the asset list of the Security Center console. The ECS instance is not removed from the asset list.
        *Prerequisites**\
        The server that you want to unbind from Security Center is not deployed on Alibaba Cloud and the Security Center agent is disabled for the server. In this case, the agent is in the Close state and Security Center does not protect the server. You can call the [PauseClient](~~PauseClient~~) operation to disable the agent.
        The client protection feature is disabled for the server that you want to unbind from Security Center. For more information about how to disable the client protection feature, see [Use the client protection feature](https://www.alibabacloud.com/help/en/security-center/latest/local-file-detection-engine).
        
        @param request: UnbindAegisRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UnbindAegisResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UnbindAegis',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UnbindAegisResponse(),
            self.call_api(params, req, runtime)
        )

    async def unbind_aegis_with_options_async(
        self,
        request: sas_20181203_models.UnbindAegisRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UnbindAegisResponse:
        """
        @summary Unbinds servers that are not deployed on Alibaba Cloud from Security Center.
        
        @description If you no longer require protection for servers that are not deployed on Alibaba Cloud, you can call this operation to unbind the servers from Security Center. After you unbind a server that is not deployed on Alibaba Cloud from Security Center, the server no longer consumes the quota of protected servers or protected server vCPUs. This way, you can install the Security Center agent on other servers to meet your business requirements.
        > You can unbind only the servers that are not deployed on Alibaba Cloud from Security Center. If you use an Alibaba Cloud Elastic Compute Service (ECS) instance, you do not need to unbind the ECS instance. If you uninstall the Security Center agent from an ECS instance, the ECS instance still exists as a disconnected server in the asset list of the Security Center console. The ECS instance is not removed from the asset list.
        *Prerequisites**\
        The server that you want to unbind from Security Center is not deployed on Alibaba Cloud and the Security Center agent is disabled for the server. In this case, the agent is in the Close state and Security Center does not protect the server. You can call the [PauseClient](~~PauseClient~~) operation to disable the agent.
        The client protection feature is disabled for the server that you want to unbind from Security Center. For more information about how to disable the client protection feature, see [Use the client protection feature](https://www.alibabacloud.com/help/en/security-center/latest/local-file-detection-engine).
        
        @param request: UnbindAegisRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UnbindAegisResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UnbindAegis',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UnbindAegisResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def unbind_aegis(
        self,
        request: sas_20181203_models.UnbindAegisRequest,
    ) -> sas_20181203_models.UnbindAegisResponse:
        """
        @summary Unbinds servers that are not deployed on Alibaba Cloud from Security Center.
        
        @description If you no longer require protection for servers that are not deployed on Alibaba Cloud, you can call this operation to unbind the servers from Security Center. After you unbind a server that is not deployed on Alibaba Cloud from Security Center, the server no longer consumes the quota of protected servers or protected server vCPUs. This way, you can install the Security Center agent on other servers to meet your business requirements.
        > You can unbind only the servers that are not deployed on Alibaba Cloud from Security Center. If you use an Alibaba Cloud Elastic Compute Service (ECS) instance, you do not need to unbind the ECS instance. If you uninstall the Security Center agent from an ECS instance, the ECS instance still exists as a disconnected server in the asset list of the Security Center console. The ECS instance is not removed from the asset list.
        *Prerequisites**\
        The server that you want to unbind from Security Center is not deployed on Alibaba Cloud and the Security Center agent is disabled for the server. In this case, the agent is in the Close state and Security Center does not protect the server. You can call the [PauseClient](~~PauseClient~~) operation to disable the agent.
        The client protection feature is disabled for the server that you want to unbind from Security Center. For more information about how to disable the client protection feature, see [Use the client protection feature](https://www.alibabacloud.com/help/en/security-center/latest/local-file-detection-engine).
        
        @param request: UnbindAegisRequest
        @return: UnbindAegisResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.unbind_aegis_with_options(request, runtime)

    async def unbind_aegis_async(
        self,
        request: sas_20181203_models.UnbindAegisRequest,
    ) -> sas_20181203_models.UnbindAegisResponse:
        """
        @summary Unbinds servers that are not deployed on Alibaba Cloud from Security Center.
        
        @description If you no longer require protection for servers that are not deployed on Alibaba Cloud, you can call this operation to unbind the servers from Security Center. After you unbind a server that is not deployed on Alibaba Cloud from Security Center, the server no longer consumes the quota of protected servers or protected server vCPUs. This way, you can install the Security Center agent on other servers to meet your business requirements.
        > You can unbind only the servers that are not deployed on Alibaba Cloud from Security Center. If you use an Alibaba Cloud Elastic Compute Service (ECS) instance, you do not need to unbind the ECS instance. If you uninstall the Security Center agent from an ECS instance, the ECS instance still exists as a disconnected server in the asset list of the Security Center console. The ECS instance is not removed from the asset list.
        *Prerequisites**\
        The server that you want to unbind from Security Center is not deployed on Alibaba Cloud and the Security Center agent is disabled for the server. In this case, the agent is in the Close state and Security Center does not protect the server. You can call the [PauseClient](~~PauseClient~~) operation to disable the agent.
        The client protection feature is disabled for the server that you want to unbind from Security Center. For more information about how to disable the client protection feature, see [Use the client protection feature](https://www.alibabacloud.com/help/en/security-center/latest/local-file-detection-engine).
        
        @param request: UnbindAegisRequest
        @return: UnbindAegisResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.unbind_aegis_with_options_async(request, runtime)

    def uninstall_backup_client_with_options(
        self,
        request: sas_20181203_models.UninstallBackupClientRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UninstallBackupClientResponse:
        """
        @summary Uninstalls the anti-ransomware agent.
        
        @param request: UninstallBackupClientRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UninstallBackupClientResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.policy_version):
            query['PolicyVersion'] = request.policy_version
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UninstallBackupClient',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UninstallBackupClientResponse(),
            self.call_api(params, req, runtime)
        )

    async def uninstall_backup_client_with_options_async(
        self,
        request: sas_20181203_models.UninstallBackupClientRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UninstallBackupClientResponse:
        """
        @summary Uninstalls the anti-ransomware agent.
        
        @param request: UninstallBackupClientRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UninstallBackupClientResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.policy_version):
            query['PolicyVersion'] = request.policy_version
        if not UtilClient.is_unset(request.uuid):
            query['Uuid'] = request.uuid
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UninstallBackupClient',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UninstallBackupClientResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def uninstall_backup_client(
        self,
        request: sas_20181203_models.UninstallBackupClientRequest,
    ) -> sas_20181203_models.UninstallBackupClientResponse:
        """
        @summary Uninstalls the anti-ransomware agent.
        
        @param request: UninstallBackupClientRequest
        @return: UninstallBackupClientResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.uninstall_backup_client_with_options(request, runtime)

    async def uninstall_backup_client_async(
        self,
        request: sas_20181203_models.UninstallBackupClientRequest,
    ) -> sas_20181203_models.UninstallBackupClientResponse:
        """
        @summary Uninstalls the anti-ransomware agent.
        
        @param request: UninstallBackupClientRequest
        @return: UninstallBackupClientResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.uninstall_backup_client_with_options_async(request, runtime)

    def uninstall_uni_backup_agent_with_options(
        self,
        request: sas_20181203_models.UninstallUniBackupAgentRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UninstallUniBackupAgentResponse:
        """
        @summary Uninstalls the database backup agent.
        
        @param request: UninstallUniBackupAgentRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UninstallUniBackupAgentResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.policy_id):
            query['PolicyId'] = request.policy_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UninstallUniBackupAgent',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UninstallUniBackupAgentResponse(),
            self.call_api(params, req, runtime)
        )

    async def uninstall_uni_backup_agent_with_options_async(
        self,
        request: sas_20181203_models.UninstallUniBackupAgentRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UninstallUniBackupAgentResponse:
        """
        @summary Uninstalls the database backup agent.
        
        @param request: UninstallUniBackupAgentRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UninstallUniBackupAgentResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.policy_id):
            query['PolicyId'] = request.policy_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UninstallUniBackupAgent',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UninstallUniBackupAgentResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def uninstall_uni_backup_agent(
        self,
        request: sas_20181203_models.UninstallUniBackupAgentRequest,
    ) -> sas_20181203_models.UninstallUniBackupAgentResponse:
        """
        @summary Uninstalls the database backup agent.
        
        @param request: UninstallUniBackupAgentRequest
        @return: UninstallUniBackupAgentResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.uninstall_uni_backup_agent_with_options(request, runtime)

    async def uninstall_uni_backup_agent_async(
        self,
        request: sas_20181203_models.UninstallUniBackupAgentRequest,
    ) -> sas_20181203_models.UninstallUniBackupAgentResponse:
        """
        @summary Uninstalls the database backup agent.
        
        @param request: UninstallUniBackupAgentRequest
        @return: UninstallUniBackupAgentResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.uninstall_uni_backup_agent_with_options_async(request, runtime)

    def update_alarm_event_with_options(
        self,
        request: sas_20181203_models.UpdateAlarmEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateAlarmEventResponse:
        """
        @summary Updates the status of the honeypot installation time.
        
        @param request: UpdateAlarmEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateAlarmEventResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.alarm_event_id_list):
            body['AlarmEventIdList'] = request.alarm_event_id_list
        if not UtilClient.is_unset(request.lang):
            body['Lang'] = request.lang
        if not UtilClient.is_unset(request.operation_code):
            body['OperationCode'] = request.operation_code
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateAlarmEvent',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateAlarmEventResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_alarm_event_with_options_async(
        self,
        request: sas_20181203_models.UpdateAlarmEventRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateAlarmEventResponse:
        """
        @summary Updates the status of the honeypot installation time.
        
        @param request: UpdateAlarmEventRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateAlarmEventResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.alarm_event_id_list):
            body['AlarmEventIdList'] = request.alarm_event_id_list
        if not UtilClient.is_unset(request.lang):
            body['Lang'] = request.lang
        if not UtilClient.is_unset(request.operation_code):
            body['OperationCode'] = request.operation_code
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateAlarmEvent',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateAlarmEventResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_alarm_event(
        self,
        request: sas_20181203_models.UpdateAlarmEventRequest,
    ) -> sas_20181203_models.UpdateAlarmEventResponse:
        """
        @summary Updates the status of the honeypot installation time.
        
        @param request: UpdateAlarmEventRequest
        @return: UpdateAlarmEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_alarm_event_with_options(request, runtime)

    async def update_alarm_event_async(
        self,
        request: sas_20181203_models.UpdateAlarmEventRequest,
    ) -> sas_20181203_models.UpdateAlarmEventResponse:
        """
        @summary Updates the status of the honeypot installation time.
        
        @param request: UpdateAlarmEventRequest
        @return: UpdateAlarmEventResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_alarm_event_with_options_async(request, runtime)

    def update_attack_path_sensitive_asset_config_with_options(
        self,
        request: sas_20181203_models.UpdateAttackPathSensitiveAssetConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateAttackPathSensitiveAssetConfigResponse:
        """
        @summary Update the configuration of sensitive assets in the attack path.
        
        @param request: UpdateAttackPathSensitiveAssetConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateAttackPathSensitiveAssetConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.attack_path_asset_list):
            query['AttackPathAssetList'] = request.attack_path_asset_list
        if not UtilClient.is_unset(request.attack_path_sensitive_asset_config_id):
            query['AttackPathSensitiveAssetConfigId'] = request.attack_path_sensitive_asset_config_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateAttackPathSensitiveAssetConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateAttackPathSensitiveAssetConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_attack_path_sensitive_asset_config_with_options_async(
        self,
        request: sas_20181203_models.UpdateAttackPathSensitiveAssetConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateAttackPathSensitiveAssetConfigResponse:
        """
        @summary Update the configuration of sensitive assets in the attack path.
        
        @param request: UpdateAttackPathSensitiveAssetConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateAttackPathSensitiveAssetConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.attack_path_asset_list):
            query['AttackPathAssetList'] = request.attack_path_asset_list
        if not UtilClient.is_unset(request.attack_path_sensitive_asset_config_id):
            query['AttackPathSensitiveAssetConfigId'] = request.attack_path_sensitive_asset_config_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateAttackPathSensitiveAssetConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateAttackPathSensitiveAssetConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_attack_path_sensitive_asset_config(
        self,
        request: sas_20181203_models.UpdateAttackPathSensitiveAssetConfigRequest,
    ) -> sas_20181203_models.UpdateAttackPathSensitiveAssetConfigResponse:
        """
        @summary Update the configuration of sensitive assets in the attack path.
        
        @param request: UpdateAttackPathSensitiveAssetConfigRequest
        @return: UpdateAttackPathSensitiveAssetConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_attack_path_sensitive_asset_config_with_options(request, runtime)

    async def update_attack_path_sensitive_asset_config_async(
        self,
        request: sas_20181203_models.UpdateAttackPathSensitiveAssetConfigRequest,
    ) -> sas_20181203_models.UpdateAttackPathSensitiveAssetConfigResponse:
        """
        @summary Update the configuration of sensitive assets in the attack path.
        
        @param request: UpdateAttackPathSensitiveAssetConfigRequest
        @return: UpdateAttackPathSensitiveAssetConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_attack_path_sensitive_asset_config_with_options_async(request, runtime)

    def update_attack_path_whitelist_with_options(
        self,
        request: sas_20181203_models.UpdateAttackPathWhitelistRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateAttackPathWhitelistResponse:
        """
        @summary Update Attack Path Whitelist.
        
        @param request: UpdateAttackPathWhitelistRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateAttackPathWhitelistResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.attack_path_asset_list):
            query['AttackPathAssetList'] = request.attack_path_asset_list
        if not UtilClient.is_unset(request.attack_path_whitelist_id):
            query['AttackPathWhitelistId'] = request.attack_path_whitelist_id
        if not UtilClient.is_unset(request.path_name):
            query['PathName'] = request.path_name
        if not UtilClient.is_unset(request.path_type):
            query['PathType'] = request.path_type
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.whitelist_name):
            query['WhitelistName'] = request.whitelist_name
        if not UtilClient.is_unset(request.whitelist_type):
            query['WhitelistType'] = request.whitelist_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateAttackPathWhitelist',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateAttackPathWhitelistResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_attack_path_whitelist_with_options_async(
        self,
        request: sas_20181203_models.UpdateAttackPathWhitelistRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateAttackPathWhitelistResponse:
        """
        @summary Update Attack Path Whitelist.
        
        @param request: UpdateAttackPathWhitelistRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateAttackPathWhitelistResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.attack_path_asset_list):
            query['AttackPathAssetList'] = request.attack_path_asset_list
        if not UtilClient.is_unset(request.attack_path_whitelist_id):
            query['AttackPathWhitelistId'] = request.attack_path_whitelist_id
        if not UtilClient.is_unset(request.path_name):
            query['PathName'] = request.path_name
        if not UtilClient.is_unset(request.path_type):
            query['PathType'] = request.path_type
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        if not UtilClient.is_unset(request.whitelist_name):
            query['WhitelistName'] = request.whitelist_name
        if not UtilClient.is_unset(request.whitelist_type):
            query['WhitelistType'] = request.whitelist_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateAttackPathWhitelist',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateAttackPathWhitelistResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_attack_path_whitelist(
        self,
        request: sas_20181203_models.UpdateAttackPathWhitelistRequest,
    ) -> sas_20181203_models.UpdateAttackPathWhitelistResponse:
        """
        @summary Update Attack Path Whitelist.
        
        @param request: UpdateAttackPathWhitelistRequest
        @return: UpdateAttackPathWhitelistResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_attack_path_whitelist_with_options(request, runtime)

    async def update_attack_path_whitelist_async(
        self,
        request: sas_20181203_models.UpdateAttackPathWhitelistRequest,
    ) -> sas_20181203_models.UpdateAttackPathWhitelistResponse:
        """
        @summary Update Attack Path Whitelist.
        
        @param request: UpdateAttackPathWhitelistRequest
        @return: UpdateAttackPathWhitelistResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_attack_path_whitelist_with_options_async(request, runtime)

    def update_baseline_check_white_record_with_options(
        self,
        request: sas_20181203_models.UpdateBaselineCheckWhiteRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateBaselineCheckWhiteRecordResponse:
        """
        @summary Updates the whitelist rule for a baseline check item.
        
        @param request: UpdateBaselineCheckWhiteRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateBaselineCheckWhiteRecordResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_id):
            query['CheckId'] = request.check_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reason):
            query['Reason'] = request.reason
        if not UtilClient.is_unset(request.record_id):
            query['RecordId'] = request.record_id
        if not UtilClient.is_unset(request.remove_container_uuids):
            query['RemoveContainerUuids'] = request.remove_container_uuids
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateBaselineCheckWhiteRecord',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateBaselineCheckWhiteRecordResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_baseline_check_white_record_with_options_async(
        self,
        request: sas_20181203_models.UpdateBaselineCheckWhiteRecordRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateBaselineCheckWhiteRecordResponse:
        """
        @summary Updates the whitelist rule for a baseline check item.
        
        @param request: UpdateBaselineCheckWhiteRecordRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateBaselineCheckWhiteRecordResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_id):
            query['CheckId'] = request.check_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reason):
            query['Reason'] = request.reason
        if not UtilClient.is_unset(request.record_id):
            query['RecordId'] = request.record_id
        if not UtilClient.is_unset(request.remove_container_uuids):
            query['RemoveContainerUuids'] = request.remove_container_uuids
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateBaselineCheckWhiteRecord',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateBaselineCheckWhiteRecordResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_baseline_check_white_record(
        self,
        request: sas_20181203_models.UpdateBaselineCheckWhiteRecordRequest,
    ) -> sas_20181203_models.UpdateBaselineCheckWhiteRecordResponse:
        """
        @summary Updates the whitelist rule for a baseline check item.
        
        @param request: UpdateBaselineCheckWhiteRecordRequest
        @return: UpdateBaselineCheckWhiteRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_baseline_check_white_record_with_options(request, runtime)

    async def update_baseline_check_white_record_async(
        self,
        request: sas_20181203_models.UpdateBaselineCheckWhiteRecordRequest,
    ) -> sas_20181203_models.UpdateBaselineCheckWhiteRecordResponse:
        """
        @summary Updates the whitelist rule for a baseline check item.
        
        @param request: UpdateBaselineCheckWhiteRecordRequest
        @return: UpdateBaselineCheckWhiteRecordResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_baseline_check_white_record_with_options_async(request, runtime)

    def update_client_alert_mode_with_options(
        self,
        request: sas_20181203_models.UpdateClientAlertModeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateClientAlertModeResponse:
        """
        @summary Modifies alerting settings for servers.
        
        @param request: UpdateClientAlertModeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateClientAlertModeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.mode):
            query['Mode'] = request.mode
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateClientAlertMode',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateClientAlertModeResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_client_alert_mode_with_options_async(
        self,
        request: sas_20181203_models.UpdateClientAlertModeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateClientAlertModeResponse:
        """
        @summary Modifies alerting settings for servers.
        
        @param request: UpdateClientAlertModeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateClientAlertModeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.mode):
            query['Mode'] = request.mode
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateClientAlertMode',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateClientAlertModeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_client_alert_mode(
        self,
        request: sas_20181203_models.UpdateClientAlertModeRequest,
    ) -> sas_20181203_models.UpdateClientAlertModeResponse:
        """
        @summary Modifies alerting settings for servers.
        
        @param request: UpdateClientAlertModeRequest
        @return: UpdateClientAlertModeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_client_alert_mode_with_options(request, runtime)

    async def update_client_alert_mode_async(
        self,
        request: sas_20181203_models.UpdateClientAlertModeRequest,
    ) -> sas_20181203_models.UpdateClientAlertModeResponse:
        """
        @summary Modifies alerting settings for servers.
        
        @param request: UpdateClientAlertModeRequest
        @return: UpdateClientAlertModeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_client_alert_mode_with_options_async(request, runtime)

    def update_common_switch_config_with_options(
        self,
        request: sas_20181203_models.UpdateCommonSwitchConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateCommonSwitchConfigResponse:
        """
        @summary Modifies the settings of common switches.
        
        @param request: UpdateCommonSwitchConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateCommonSwitchConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.target_default):
            query['TargetDefault'] = request.target_default
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateCommonSwitchConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateCommonSwitchConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_common_switch_config_with_options_async(
        self,
        request: sas_20181203_models.UpdateCommonSwitchConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateCommonSwitchConfigResponse:
        """
        @summary Modifies the settings of common switches.
        
        @param request: UpdateCommonSwitchConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateCommonSwitchConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.target_default):
            query['TargetDefault'] = request.target_default
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateCommonSwitchConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateCommonSwitchConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_common_switch_config(
        self,
        request: sas_20181203_models.UpdateCommonSwitchConfigRequest,
    ) -> sas_20181203_models.UpdateCommonSwitchConfigResponse:
        """
        @summary Modifies the settings of common switches.
        
        @param request: UpdateCommonSwitchConfigRequest
        @return: UpdateCommonSwitchConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_common_switch_config_with_options(request, runtime)

    async def update_common_switch_config_async(
        self,
        request: sas_20181203_models.UpdateCommonSwitchConfigRequest,
    ) -> sas_20181203_models.UpdateCommonSwitchConfigResponse:
        """
        @summary Modifies the settings of common switches.
        
        @param request: UpdateCommonSwitchConfigRequest
        @return: UpdateCommonSwitchConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_common_switch_config_with_options_async(request, runtime)

    def update_customize_report_status_with_options(
        self,
        request: sas_20181203_models.UpdateCustomizeReportStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateCustomizeReportStatusResponse:
        """
        @summary Changes the status of a security report.
        
        @param request: UpdateCustomizeReportStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateCustomizeReportStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.pinned_time):
            query['PinnedTime'] = request.pinned_time
        if not UtilClient.is_unset(request.report_id):
            query['ReportId'] = request.report_id
        if not UtilClient.is_unset(request.report_status):
            query['ReportStatus'] = request.report_status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateCustomizeReportStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateCustomizeReportStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_customize_report_status_with_options_async(
        self,
        request: sas_20181203_models.UpdateCustomizeReportStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateCustomizeReportStatusResponse:
        """
        @summary Changes the status of a security report.
        
        @param request: UpdateCustomizeReportStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateCustomizeReportStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.pinned_time):
            query['PinnedTime'] = request.pinned_time
        if not UtilClient.is_unset(request.report_id):
            query['ReportId'] = request.report_id
        if not UtilClient.is_unset(request.report_status):
            query['ReportStatus'] = request.report_status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateCustomizeReportStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateCustomizeReportStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_customize_report_status(
        self,
        request: sas_20181203_models.UpdateCustomizeReportStatusRequest,
    ) -> sas_20181203_models.UpdateCustomizeReportStatusResponse:
        """
        @summary Changes the status of a security report.
        
        @param request: UpdateCustomizeReportStatusRequest
        @return: UpdateCustomizeReportStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_customize_report_status_with_options(request, runtime)

    async def update_customize_report_status_async(
        self,
        request: sas_20181203_models.UpdateCustomizeReportStatusRequest,
    ) -> sas_20181203_models.UpdateCustomizeReportStatusResponse:
        """
        @summary Changes the status of a security report.
        
        @param request: UpdateCustomizeReportStatusRequest
        @return: UpdateCustomizeReportStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_customize_report_status_with_options_async(request, runtime)

    def update_file_protect_event_status_with_options(
        self,
        request: sas_20181203_models.UpdateFileProtectEventStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateFileProtectEventStatusResponse:
        """
        @summary Modifies the status of core file monitoring events reported by the Security Center agent.
        
        @param request: UpdateFileProtectEventStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateFileProtectEventStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateFileProtectEventStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateFileProtectEventStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_file_protect_event_status_with_options_async(
        self,
        request: sas_20181203_models.UpdateFileProtectEventStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateFileProtectEventStatusResponse:
        """
        @summary Modifies the status of core file monitoring events reported by the Security Center agent.
        
        @param request: UpdateFileProtectEventStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateFileProtectEventStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateFileProtectEventStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateFileProtectEventStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_file_protect_event_status(
        self,
        request: sas_20181203_models.UpdateFileProtectEventStatusRequest,
    ) -> sas_20181203_models.UpdateFileProtectEventStatusResponse:
        """
        @summary Modifies the status of core file monitoring events reported by the Security Center agent.
        
        @param request: UpdateFileProtectEventStatusRequest
        @return: UpdateFileProtectEventStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_file_protect_event_status_with_options(request, runtime)

    async def update_file_protect_event_status_async(
        self,
        request: sas_20181203_models.UpdateFileProtectEventStatusRequest,
    ) -> sas_20181203_models.UpdateFileProtectEventStatusResponse:
        """
        @summary Modifies the status of core file monitoring events reported by the Security Center agent.
        
        @param request: UpdateFileProtectEventStatusRequest
        @return: UpdateFileProtectEventStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_file_protect_event_status_with_options_async(request, runtime)

    def update_file_protect_remark_with_options(
        self,
        request: sas_20181203_models.UpdateFileProtectRemarkRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateFileProtectRemarkResponse:
        """
        @summary Adds remarks to core file monitoring events reported by the Security Center agent.
        
        @param request: UpdateFileProtectRemarkRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateFileProtectRemarkResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateFileProtectRemark',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateFileProtectRemarkResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_file_protect_remark_with_options_async(
        self,
        request: sas_20181203_models.UpdateFileProtectRemarkRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateFileProtectRemarkResponse:
        """
        @summary Adds remarks to core file monitoring events reported by the Security Center agent.
        
        @param request: UpdateFileProtectRemarkRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateFileProtectRemarkResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateFileProtectRemark',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateFileProtectRemarkResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_file_protect_remark(
        self,
        request: sas_20181203_models.UpdateFileProtectRemarkRequest,
    ) -> sas_20181203_models.UpdateFileProtectRemarkResponse:
        """
        @summary Adds remarks to core file monitoring events reported by the Security Center agent.
        
        @param request: UpdateFileProtectRemarkRequest
        @return: UpdateFileProtectRemarkResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_file_protect_remark_with_options(request, runtime)

    async def update_file_protect_remark_async(
        self,
        request: sas_20181203_models.UpdateFileProtectRemarkRequest,
    ) -> sas_20181203_models.UpdateFileProtectRemarkResponse:
        """
        @summary Adds remarks to core file monitoring events reported by the Security Center agent.
        
        @param request: UpdateFileProtectRemarkRequest
        @return: UpdateFileProtectRemarkResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_file_protect_remark_with_options_async(request, runtime)

    def update_file_protect_rule_with_options(
        self,
        request: sas_20181203_models.UpdateFileProtectRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateFileProtectRuleResponse:
        """
        @summary Modifies the content of a core file monitoring rule based on the ID of the rule.
        
        @param request: UpdateFileProtectRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateFileProtectRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.alert_level):
            query['AlertLevel'] = request.alert_level
        if not UtilClient.is_unset(request.file_ops):
            query['FileOps'] = request.file_ops
        if not UtilClient.is_unset(request.file_paths):
            query['FilePaths'] = request.file_paths
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.proc_paths):
            query['ProcPaths'] = request.proc_paths
        if not UtilClient.is_unset(request.rule_action):
            query['RuleAction'] = request.rule_action
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateFileProtectRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateFileProtectRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_file_protect_rule_with_options_async(
        self,
        request: sas_20181203_models.UpdateFileProtectRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateFileProtectRuleResponse:
        """
        @summary Modifies the content of a core file monitoring rule based on the ID of the rule.
        
        @param request: UpdateFileProtectRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateFileProtectRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.alert_level):
            query['AlertLevel'] = request.alert_level
        if not UtilClient.is_unset(request.file_ops):
            query['FileOps'] = request.file_ops
        if not UtilClient.is_unset(request.file_paths):
            query['FilePaths'] = request.file_paths
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.proc_paths):
            query['ProcPaths'] = request.proc_paths
        if not UtilClient.is_unset(request.rule_action):
            query['RuleAction'] = request.rule_action
        if not UtilClient.is_unset(request.rule_name):
            query['RuleName'] = request.rule_name
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateFileProtectRule',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateFileProtectRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_file_protect_rule(
        self,
        request: sas_20181203_models.UpdateFileProtectRuleRequest,
    ) -> sas_20181203_models.UpdateFileProtectRuleResponse:
        """
        @summary Modifies the content of a core file monitoring rule based on the ID of the rule.
        
        @param request: UpdateFileProtectRuleRequest
        @return: UpdateFileProtectRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_file_protect_rule_with_options(request, runtime)

    async def update_file_protect_rule_async(
        self,
        request: sas_20181203_models.UpdateFileProtectRuleRequest,
    ) -> sas_20181203_models.UpdateFileProtectRuleResponse:
        """
        @summary Modifies the content of a core file monitoring rule based on the ID of the rule.
        
        @param request: UpdateFileProtectRuleRequest
        @return: UpdateFileProtectRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_file_protect_rule_with_options_async(request, runtime)

    def update_file_upload_limit_with_options(
        self,
        request: sas_20181203_models.UpdateFileUploadLimitRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateFileUploadLimitResponse:
        """
        @summary Modifies the queries per second (QPS) limit on the files uploaded from the client.
        
        @param request: UpdateFileUploadLimitRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateFileUploadLimitResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.limit):
            query['Limit'] = request.limit
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateFileUploadLimit',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateFileUploadLimitResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_file_upload_limit_with_options_async(
        self,
        request: sas_20181203_models.UpdateFileUploadLimitRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateFileUploadLimitResponse:
        """
        @summary Modifies the queries per second (QPS) limit on the files uploaded from the client.
        
        @param request: UpdateFileUploadLimitRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateFileUploadLimitResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.limit):
            query['Limit'] = request.limit
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateFileUploadLimit',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateFileUploadLimitResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_file_upload_limit(
        self,
        request: sas_20181203_models.UpdateFileUploadLimitRequest,
    ) -> sas_20181203_models.UpdateFileUploadLimitResponse:
        """
        @summary Modifies the queries per second (QPS) limit on the files uploaded from the client.
        
        @param request: UpdateFileUploadLimitRequest
        @return: UpdateFileUploadLimitResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_file_upload_limit_with_options(request, runtime)

    async def update_file_upload_limit_async(
        self,
        request: sas_20181203_models.UpdateFileUploadLimitRequest,
    ) -> sas_20181203_models.UpdateFileUploadLimitResponse:
        """
        @summary Modifies the queries per second (QPS) limit on the files uploaded from the client.
        
        @param request: UpdateFileUploadLimitRequest
        @return: UpdateFileUploadLimitResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_file_upload_limit_with_options_async(request, runtime)

    def update_honeypot_with_options(
        self,
        request: sas_20181203_models.UpdateHoneypotRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateHoneypotResponse:
        """
        @summary Modifies the configuration of a specified honeypot.
        
        @param request: UpdateHoneypotRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateHoneypotResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.honeypot_id):
            query['HoneypotId'] = request.honeypot_id
        if not UtilClient.is_unset(request.honeypot_name):
            query['HoneypotName'] = request.honeypot_name
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.meta):
            query['Meta'] = request.meta
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateHoneypot',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateHoneypotResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_honeypot_with_options_async(
        self,
        request: sas_20181203_models.UpdateHoneypotRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateHoneypotResponse:
        """
        @summary Modifies the configuration of a specified honeypot.
        
        @param request: UpdateHoneypotRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateHoneypotResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.honeypot_id):
            query['HoneypotId'] = request.honeypot_id
        if not UtilClient.is_unset(request.honeypot_name):
            query['HoneypotName'] = request.honeypot_name
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.meta):
            query['Meta'] = request.meta
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateHoneypot',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateHoneypotResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_honeypot(
        self,
        request: sas_20181203_models.UpdateHoneypotRequest,
    ) -> sas_20181203_models.UpdateHoneypotResponse:
        """
        @summary Modifies the configuration of a specified honeypot.
        
        @param request: UpdateHoneypotRequest
        @return: UpdateHoneypotResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_honeypot_with_options(request, runtime)

    async def update_honeypot_async(
        self,
        request: sas_20181203_models.UpdateHoneypotRequest,
    ) -> sas_20181203_models.UpdateHoneypotResponse:
        """
        @summary Modifies the configuration of a specified honeypot.
        
        @param request: UpdateHoneypotRequest
        @return: UpdateHoneypotResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_honeypot_with_options_async(request, runtime)

    def update_honeypot_node_with_options(
        self,
        request: sas_20181203_models.UpdateHoneypotNodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateHoneypotNodeResponse:
        """
        @summary Modifies the configuration of a specified management node.
        
        @param request: UpdateHoneypotNodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateHoneypotNodeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.available_probe_num):
            query['AvailableProbeNum'] = request.available_probe_num
        if not UtilClient.is_unset(request.node_id):
            query['NodeId'] = request.node_id
        if not UtilClient.is_unset(request.node_name):
            query['NodeName'] = request.node_name
        if not UtilClient.is_unset(request.security_group_probe_ip_list):
            query['SecurityGroupProbeIpList'] = request.security_group_probe_ip_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateHoneypotNode',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateHoneypotNodeResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_honeypot_node_with_options_async(
        self,
        request: sas_20181203_models.UpdateHoneypotNodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateHoneypotNodeResponse:
        """
        @summary Modifies the configuration of a specified management node.
        
        @param request: UpdateHoneypotNodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateHoneypotNodeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.available_probe_num):
            query['AvailableProbeNum'] = request.available_probe_num
        if not UtilClient.is_unset(request.node_id):
            query['NodeId'] = request.node_id
        if not UtilClient.is_unset(request.node_name):
            query['NodeName'] = request.node_name
        if not UtilClient.is_unset(request.security_group_probe_ip_list):
            query['SecurityGroupProbeIpList'] = request.security_group_probe_ip_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateHoneypotNode',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateHoneypotNodeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_honeypot_node(
        self,
        request: sas_20181203_models.UpdateHoneypotNodeRequest,
    ) -> sas_20181203_models.UpdateHoneypotNodeResponse:
        """
        @summary Modifies the configuration of a specified management node.
        
        @param request: UpdateHoneypotNodeRequest
        @return: UpdateHoneypotNodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_honeypot_node_with_options(request, runtime)

    async def update_honeypot_node_async(
        self,
        request: sas_20181203_models.UpdateHoneypotNodeRequest,
    ) -> sas_20181203_models.UpdateHoneypotNodeResponse:
        """
        @summary Modifies the configuration of a specified management node.
        
        @param request: UpdateHoneypotNodeRequest
        @return: UpdateHoneypotNodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_honeypot_node_with_options_async(request, runtime)

    def update_honeypot_preset_with_options(
        self,
        request: sas_20181203_models.UpdateHoneypotPresetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateHoneypotPresetResponse:
        """
        @summary Modifies the configurations of the specified honeypot template.
        
        @param request: UpdateHoneypotPresetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateHoneypotPresetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.honeypot_image_name):
            query['HoneypotImageName'] = request.honeypot_image_name
        if not UtilClient.is_unset(request.honeypot_preset_id):
            query['HoneypotPresetId'] = request.honeypot_preset_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.meta):
            query['Meta'] = request.meta
        if not UtilClient.is_unset(request.preset_name):
            query['PresetName'] = request.preset_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateHoneypotPreset',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateHoneypotPresetResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_honeypot_preset_with_options_async(
        self,
        request: sas_20181203_models.UpdateHoneypotPresetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateHoneypotPresetResponse:
        """
        @summary Modifies the configurations of the specified honeypot template.
        
        @param request: UpdateHoneypotPresetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateHoneypotPresetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.honeypot_image_name):
            query['HoneypotImageName'] = request.honeypot_image_name
        if not UtilClient.is_unset(request.honeypot_preset_id):
            query['HoneypotPresetId'] = request.honeypot_preset_id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.meta):
            query['Meta'] = request.meta
        if not UtilClient.is_unset(request.preset_name):
            query['PresetName'] = request.preset_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateHoneypotPreset',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateHoneypotPresetResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_honeypot_preset(
        self,
        request: sas_20181203_models.UpdateHoneypotPresetRequest,
    ) -> sas_20181203_models.UpdateHoneypotPresetResponse:
        """
        @summary Modifies the configurations of the specified honeypot template.
        
        @param request: UpdateHoneypotPresetRequest
        @return: UpdateHoneypotPresetResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_honeypot_preset_with_options(request, runtime)

    async def update_honeypot_preset_async(
        self,
        request: sas_20181203_models.UpdateHoneypotPresetRequest,
    ) -> sas_20181203_models.UpdateHoneypotPresetResponse:
        """
        @summary Modifies the configurations of the specified honeypot template.
        
        @param request: UpdateHoneypotPresetRequest
        @return: UpdateHoneypotPresetResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_honeypot_preset_with_options_async(request, runtime)

    def update_honeypot_probe_with_options(
        self,
        request: sas_20181203_models.UpdateHoneypotProbeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateHoneypotProbeResponse:
        """
        @summary Modifies the attributes of a specified probe.
        
        @param request: UpdateHoneypotProbeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateHoneypotProbeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.arp):
            query['Arp'] = request.arp
        if not UtilClient.is_unset(request.display_name):
            query['DisplayName'] = request.display_name
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.ping):
            query['Ping'] = request.ping
        if not UtilClient.is_unset(request.probe_id):
            query['ProbeId'] = request.probe_id
        if not UtilClient.is_unset(request.service_ip_list):
            query['ServiceIpList'] = request.service_ip_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateHoneypotProbe',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateHoneypotProbeResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_honeypot_probe_with_options_async(
        self,
        request: sas_20181203_models.UpdateHoneypotProbeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateHoneypotProbeResponse:
        """
        @summary Modifies the attributes of a specified probe.
        
        @param request: UpdateHoneypotProbeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateHoneypotProbeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.arp):
            query['Arp'] = request.arp
        if not UtilClient.is_unset(request.display_name):
            query['DisplayName'] = request.display_name
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.ping):
            query['Ping'] = request.ping
        if not UtilClient.is_unset(request.probe_id):
            query['ProbeId'] = request.probe_id
        if not UtilClient.is_unset(request.service_ip_list):
            query['ServiceIpList'] = request.service_ip_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateHoneypotProbe',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateHoneypotProbeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_honeypot_probe(
        self,
        request: sas_20181203_models.UpdateHoneypotProbeRequest,
    ) -> sas_20181203_models.UpdateHoneypotProbeResponse:
        """
        @summary Modifies the attributes of a specified probe.
        
        @param request: UpdateHoneypotProbeRequest
        @return: UpdateHoneypotProbeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_honeypot_probe_with_options(request, runtime)

    async def update_honeypot_probe_async(
        self,
        request: sas_20181203_models.UpdateHoneypotProbeRequest,
    ) -> sas_20181203_models.UpdateHoneypotProbeResponse:
        """
        @summary Modifies the attributes of a specified probe.
        
        @param request: UpdateHoneypotProbeRequest
        @return: UpdateHoneypotProbeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_honeypot_probe_with_options_async(request, runtime)

    def update_honeypot_probe_bind_with_options(
        self,
        request: sas_20181203_models.UpdateHoneypotProbeBindRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateHoneypotProbeBindResponse:
        """
        @summary Modifies a probe service.
        
        @param request: UpdateHoneypotProbeBindRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateHoneypotProbeBindResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.bind_id):
            query['BindId'] = request.bind_id
        if not UtilClient.is_unset(request.bind_port_list):
            query['BindPortList'] = request.bind_port_list
        if not UtilClient.is_unset(request.bind_type):
            query['BindType'] = request.bind_type
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.honeypot_id):
            query['HoneypotId'] = request.honeypot_id
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.ports):
            query['Ports'] = request.ports
        if not UtilClient.is_unset(request.probe_id):
            query['ProbeId'] = request.probe_id
        if not UtilClient.is_unset(request.service_ip_list):
            query['ServiceIpList'] = request.service_ip_list
        if not UtilClient.is_unset(request.set_status):
            query['SetStatus'] = request.set_status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateHoneypotProbeBind',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateHoneypotProbeBindResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_honeypot_probe_bind_with_options_async(
        self,
        request: sas_20181203_models.UpdateHoneypotProbeBindRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateHoneypotProbeBindResponse:
        """
        @summary Modifies a probe service.
        
        @param request: UpdateHoneypotProbeBindRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateHoneypotProbeBindResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.bind_id):
            query['BindId'] = request.bind_id
        if not UtilClient.is_unset(request.bind_port_list):
            query['BindPortList'] = request.bind_port_list
        if not UtilClient.is_unset(request.bind_type):
            query['BindType'] = request.bind_type
        if not UtilClient.is_unset(request.current_page):
            query['CurrentPage'] = request.current_page
        if not UtilClient.is_unset(request.honeypot_id):
            query['HoneypotId'] = request.honeypot_id
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.ports):
            query['Ports'] = request.ports
        if not UtilClient.is_unset(request.probe_id):
            query['ProbeId'] = request.probe_id
        if not UtilClient.is_unset(request.service_ip_list):
            query['ServiceIpList'] = request.service_ip_list
        if not UtilClient.is_unset(request.set_status):
            query['SetStatus'] = request.set_status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateHoneypotProbeBind',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateHoneypotProbeBindResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_honeypot_probe_bind(
        self,
        request: sas_20181203_models.UpdateHoneypotProbeBindRequest,
    ) -> sas_20181203_models.UpdateHoneypotProbeBindResponse:
        """
        @summary Modifies a probe service.
        
        @param request: UpdateHoneypotProbeBindRequest
        @return: UpdateHoneypotProbeBindResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_honeypot_probe_bind_with_options(request, runtime)

    async def update_honeypot_probe_bind_async(
        self,
        request: sas_20181203_models.UpdateHoneypotProbeBindRequest,
    ) -> sas_20181203_models.UpdateHoneypotProbeBindResponse:
        """
        @summary Modifies a probe service.
        
        @param request: UpdateHoneypotProbeBindRequest
        @return: UpdateHoneypotProbeBindResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_honeypot_probe_bind_with_options_async(request, runtime)

    def update_hybrid_proxy_with_options(
        self,
        request: sas_20181203_models.UpdateHybridProxyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateHybridProxyResponse:
        """
        @summary Updates the Security Center agent that is installed on a proxy server in a hybrid cloud.
        
        @param request: UpdateHybridProxyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateHybridProxyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.proxy_uuid):
            query['ProxyUuid'] = request.proxy_uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateHybridProxy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateHybridProxyResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_hybrid_proxy_with_options_async(
        self,
        request: sas_20181203_models.UpdateHybridProxyRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateHybridProxyResponse:
        """
        @summary Updates the Security Center agent that is installed on a proxy server in a hybrid cloud.
        
        @param request: UpdateHybridProxyRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateHybridProxyResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.proxy_uuid):
            query['ProxyUuid'] = request.proxy_uuid
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateHybridProxy',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateHybridProxyResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_hybrid_proxy(
        self,
        request: sas_20181203_models.UpdateHybridProxyRequest,
    ) -> sas_20181203_models.UpdateHybridProxyResponse:
        """
        @summary Updates the Security Center agent that is installed on a proxy server in a hybrid cloud.
        
        @param request: UpdateHybridProxyRequest
        @return: UpdateHybridProxyResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_hybrid_proxy_with_options(request, runtime)

    async def update_hybrid_proxy_async(
        self,
        request: sas_20181203_models.UpdateHybridProxyRequest,
    ) -> sas_20181203_models.UpdateHybridProxyResponse:
        """
        @summary Updates the Security Center agent that is installed on a proxy server in a hybrid cloud.
        
        @param request: UpdateHybridProxyRequest
        @return: UpdateHybridProxyResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_hybrid_proxy_with_options_async(request, runtime)

    def update_image_event_operation_with_options(
        self,
        request: sas_20181203_models.UpdateImageEventOperationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateImageEventOperationResponse:
        """
        @summary Updates an alert handling rule.
        
        @param request: UpdateImageEventOperationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateImageEventOperationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.conditions):
            query['Conditions'] = request.conditions
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.note):
            query['Note'] = request.note
        if not UtilClient.is_unset(request.scenarios):
            query['Scenarios'] = request.scenarios
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateImageEventOperation',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateImageEventOperationResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_image_event_operation_with_options_async(
        self,
        request: sas_20181203_models.UpdateImageEventOperationRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateImageEventOperationResponse:
        """
        @summary Updates an alert handling rule.
        
        @param request: UpdateImageEventOperationRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateImageEventOperationResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.conditions):
            query['Conditions'] = request.conditions
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.note):
            query['Note'] = request.note
        if not UtilClient.is_unset(request.scenarios):
            query['Scenarios'] = request.scenarios
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateImageEventOperation',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateImageEventOperationResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_image_event_operation(
        self,
        request: sas_20181203_models.UpdateImageEventOperationRequest,
    ) -> sas_20181203_models.UpdateImageEventOperationResponse:
        """
        @summary Updates an alert handling rule.
        
        @param request: UpdateImageEventOperationRequest
        @return: UpdateImageEventOperationResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_image_event_operation_with_options(request, runtime)

    async def update_image_event_operation_async(
        self,
        request: sas_20181203_models.UpdateImageEventOperationRequest,
    ) -> sas_20181203_models.UpdateImageEventOperationResponse:
        """
        @summary Updates an alert handling rule.
        
        @param request: UpdateImageEventOperationRequest
        @return: UpdateImageEventOperationResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_image_event_operation_with_options_async(request, runtime)

    def update_image_vul_whitelist_target_with_options(
        self,
        request: sas_20181203_models.UpdateImageVulWhitelistTargetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateImageVulWhitelistTargetResponse:
        """
        @summary Updates the vulnerability whitelist of an image.
        
        @param request: UpdateImageVulWhitelistTargetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateImageVulWhitelistTargetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reason):
            query['Reason'] = request.reason
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.target):
            query['Target'] = request.target
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateImageVulWhitelistTarget',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateImageVulWhitelistTargetResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_image_vul_whitelist_target_with_options_async(
        self,
        request: sas_20181203_models.UpdateImageVulWhitelistTargetRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateImageVulWhitelistTargetResponse:
        """
        @summary Updates the vulnerability whitelist of an image.
        
        @param request: UpdateImageVulWhitelistTargetRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateImageVulWhitelistTargetResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.reason):
            query['Reason'] = request.reason
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.target):
            query['Target'] = request.target
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateImageVulWhitelistTarget',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateImageVulWhitelistTargetResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_image_vul_whitelist_target(
        self,
        request: sas_20181203_models.UpdateImageVulWhitelistTargetRequest,
    ) -> sas_20181203_models.UpdateImageVulWhitelistTargetResponse:
        """
        @summary Updates the vulnerability whitelist of an image.
        
        @param request: UpdateImageVulWhitelistTargetRequest
        @return: UpdateImageVulWhitelistTargetResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_image_vul_whitelist_target_with_options(request, runtime)

    async def update_image_vul_whitelist_target_async(
        self,
        request: sas_20181203_models.UpdateImageVulWhitelistTargetRequest,
    ) -> sas_20181203_models.UpdateImageVulWhitelistTargetResponse:
        """
        @summary Updates the vulnerability whitelist of an image.
        
        @param request: UpdateImageVulWhitelistTargetRequest
        @return: UpdateImageVulWhitelistTargetResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_image_vul_whitelist_target_with_options_async(request, runtime)

    def update_jenkins_image_registry_name_with_options(
        self,
        request: sas_20181203_models.UpdateJenkinsImageRegistryNameRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateJenkinsImageRegistryNameResponse:
        """
        @summary Modifies the name of a Jenkins image repository.
        
        @param request: UpdateJenkinsImageRegistryNameRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateJenkinsImageRegistryNameResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        body = {}
        if not UtilClient.is_unset(request.registry_id):
            body['RegistryId'] = request.registry_id
        if not UtilClient.is_unset(request.registry_name):
            body['RegistryName'] = request.registry_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateJenkinsImageRegistryName',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateJenkinsImageRegistryNameResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_jenkins_image_registry_name_with_options_async(
        self,
        request: sas_20181203_models.UpdateJenkinsImageRegistryNameRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateJenkinsImageRegistryNameResponse:
        """
        @summary Modifies the name of a Jenkins image repository.
        
        @param request: UpdateJenkinsImageRegistryNameRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateJenkinsImageRegistryNameResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        body = {}
        if not UtilClient.is_unset(request.registry_id):
            body['RegistryId'] = request.registry_id
        if not UtilClient.is_unset(request.registry_name):
            body['RegistryName'] = request.registry_name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateJenkinsImageRegistryName',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateJenkinsImageRegistryNameResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_jenkins_image_registry_name(
        self,
        request: sas_20181203_models.UpdateJenkinsImageRegistryNameRequest,
    ) -> sas_20181203_models.UpdateJenkinsImageRegistryNameResponse:
        """
        @summary Modifies the name of a Jenkins image repository.
        
        @param request: UpdateJenkinsImageRegistryNameRequest
        @return: UpdateJenkinsImageRegistryNameResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_jenkins_image_registry_name_with_options(request, runtime)

    async def update_jenkins_image_registry_name_async(
        self,
        request: sas_20181203_models.UpdateJenkinsImageRegistryNameRequest,
    ) -> sas_20181203_models.UpdateJenkinsImageRegistryNameResponse:
        """
        @summary Modifies the name of a Jenkins image repository.
        
        @param request: UpdateJenkinsImageRegistryNameRequest
        @return: UpdateJenkinsImageRegistryNameResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_jenkins_image_registry_name_with_options_async(request, runtime)

    def update_jenkins_image_registry_persistence_day_with_options(
        self,
        request: sas_20181203_models.UpdateJenkinsImageRegistryPersistenceDayRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateJenkinsImageRegistryPersistenceDayResponse:
        """
        @summary Modifies the retention period of images that are stored in a Jenkins image repository.
        
        @param request: UpdateJenkinsImageRegistryPersistenceDayRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateJenkinsImageRegistryPersistenceDayResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        body = {}
        if not UtilClient.is_unset(request.persistence_day):
            body['PersistenceDay'] = request.persistence_day
        if not UtilClient.is_unset(request.registry_id):
            body['RegistryId'] = request.registry_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateJenkinsImageRegistryPersistenceDay',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateJenkinsImageRegistryPersistenceDayResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_jenkins_image_registry_persistence_day_with_options_async(
        self,
        request: sas_20181203_models.UpdateJenkinsImageRegistryPersistenceDayRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateJenkinsImageRegistryPersistenceDayResponse:
        """
        @summary Modifies the retention period of images that are stored in a Jenkins image repository.
        
        @param request: UpdateJenkinsImageRegistryPersistenceDayRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateJenkinsImageRegistryPersistenceDayResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        body = {}
        if not UtilClient.is_unset(request.persistence_day):
            body['PersistenceDay'] = request.persistence_day
        if not UtilClient.is_unset(request.registry_id):
            body['RegistryId'] = request.registry_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateJenkinsImageRegistryPersistenceDay',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateJenkinsImageRegistryPersistenceDayResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_jenkins_image_registry_persistence_day(
        self,
        request: sas_20181203_models.UpdateJenkinsImageRegistryPersistenceDayRequest,
    ) -> sas_20181203_models.UpdateJenkinsImageRegistryPersistenceDayResponse:
        """
        @summary Modifies the retention period of images that are stored in a Jenkins image repository.
        
        @param request: UpdateJenkinsImageRegistryPersistenceDayRequest
        @return: UpdateJenkinsImageRegistryPersistenceDayResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_jenkins_image_registry_persistence_day_with_options(request, runtime)

    async def update_jenkins_image_registry_persistence_day_async(
        self,
        request: sas_20181203_models.UpdateJenkinsImageRegistryPersistenceDayRequest,
    ) -> sas_20181203_models.UpdateJenkinsImageRegistryPersistenceDayResponse:
        """
        @summary Modifies the retention period of images that are stored in a Jenkins image repository.
        
        @param request: UpdateJenkinsImageRegistryPersistenceDayRequest
        @return: UpdateJenkinsImageRegistryPersistenceDayResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_jenkins_image_registry_persistence_day_with_options_async(request, runtime)

    def update_malicious_file_whitelist_config_with_options(
        self,
        request: sas_20181203_models.UpdateMaliciousFileWhitelistConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateMaliciousFileWhitelistConfigResponse:
        """
        @summary Modifies an alert whitelist rule of sensitive files that are detected by using the agentless detection feature.
        
        @param request: UpdateMaliciousFileWhitelistConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateMaliciousFileWhitelistConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.event_name):
            query['EventName'] = request.event_name
        if not UtilClient.is_unset(request.field):
            query['Field'] = request.field
        if not UtilClient.is_unset(request.field_value):
            query['FieldValue'] = request.field_value
        if not UtilClient.is_unset(request.operator):
            query['Operator'] = request.operator
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        if not UtilClient.is_unset(request.target_value):
            query['TargetValue'] = request.target_value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateMaliciousFileWhitelistConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateMaliciousFileWhitelistConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_malicious_file_whitelist_config_with_options_async(
        self,
        request: sas_20181203_models.UpdateMaliciousFileWhitelistConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateMaliciousFileWhitelistConfigResponse:
        """
        @summary Modifies an alert whitelist rule of sensitive files that are detected by using the agentless detection feature.
        
        @param request: UpdateMaliciousFileWhitelistConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateMaliciousFileWhitelistConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.config_id):
            query['ConfigId'] = request.config_id
        if not UtilClient.is_unset(request.event_name):
            query['EventName'] = request.event_name
        if not UtilClient.is_unset(request.field):
            query['Field'] = request.field
        if not UtilClient.is_unset(request.field_value):
            query['FieldValue'] = request.field_value
        if not UtilClient.is_unset(request.operator):
            query['Operator'] = request.operator
        if not UtilClient.is_unset(request.source):
            query['Source'] = request.source
        if not UtilClient.is_unset(request.target_type):
            query['TargetType'] = request.target_type
        if not UtilClient.is_unset(request.target_value):
            query['TargetValue'] = request.target_value
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateMaliciousFileWhitelistConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateMaliciousFileWhitelistConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_malicious_file_whitelist_config(
        self,
        request: sas_20181203_models.UpdateMaliciousFileWhitelistConfigRequest,
    ) -> sas_20181203_models.UpdateMaliciousFileWhitelistConfigResponse:
        """
        @summary Modifies an alert whitelist rule of sensitive files that are detected by using the agentless detection feature.
        
        @param request: UpdateMaliciousFileWhitelistConfigRequest
        @return: UpdateMaliciousFileWhitelistConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_malicious_file_whitelist_config_with_options(request, runtime)

    async def update_malicious_file_whitelist_config_async(
        self,
        request: sas_20181203_models.UpdateMaliciousFileWhitelistConfigRequest,
    ) -> sas_20181203_models.UpdateMaliciousFileWhitelistConfigResponse:
        """
        @summary Modifies an alert whitelist rule of sensitive files that are detected by using the agentless detection feature.
        
        @param request: UpdateMaliciousFileWhitelistConfigRequest
        @return: UpdateMaliciousFileWhitelistConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_malicious_file_whitelist_config_with_options_async(request, runtime)

    def update_opa_strategy_new_with_options(
        self,
        tmp_req: sas_20181203_models.UpdateOpaStrategyNewRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateOpaStrategyNewResponse:
        """
        @summary Updates the blocking rule for at-risk images.
        
        @param tmp_req: UpdateOpaStrategyNewRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateOpaStrategyNewResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.UpdateOpaStrategyNewShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.alarm_detail):
            request.alarm_detail_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.alarm_detail, 'AlarmDetail', 'json')
        query = {}
        if not UtilClient.is_unset(request.alarm_detail_shrink):
            query['AlarmDetail'] = request.alarm_detail_shrink
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.description):
            query['Description'] = request.description
        if not UtilClient.is_unset(request.image_name):
            query['ImageName'] = request.image_name
        if not UtilClient.is_unset(request.label):
            query['Label'] = request.label
        if not UtilClient.is_unset(request.malicious_image):
            query['MaliciousImage'] = request.malicious_image
        if not UtilClient.is_unset(request.rule_action):
            query['RuleAction'] = request.rule_action
        if not UtilClient.is_unset(request.scopes):
            query['Scopes'] = request.scopes
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        if not UtilClient.is_unset(request.strategy_name):
            query['StrategyName'] = request.strategy_name
        if not UtilClient.is_unset(request.strategy_template_id):
            query['StrategyTemplateId'] = request.strategy_template_id
        if not UtilClient.is_unset(request.un_scaned_image):
            query['UnScanedImage'] = request.un_scaned_image
        if not UtilClient.is_unset(request.white_list):
            query['WhiteList'] = request.white_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateOpaStrategyNew',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateOpaStrategyNewResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_opa_strategy_new_with_options_async(
        self,
        tmp_req: sas_20181203_models.UpdateOpaStrategyNewRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateOpaStrategyNewResponse:
        """
        @summary Updates the blocking rule for at-risk images.
        
        @param tmp_req: UpdateOpaStrategyNewRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateOpaStrategyNewResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.UpdateOpaStrategyNewShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.alarm_detail):
            request.alarm_detail_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.alarm_detail, 'AlarmDetail', 'json')
        query = {}
        if not UtilClient.is_unset(request.alarm_detail_shrink):
            query['AlarmDetail'] = request.alarm_detail_shrink
        if not UtilClient.is_unset(request.cluster_id):
            query['ClusterId'] = request.cluster_id
        if not UtilClient.is_unset(request.cluster_name):
            query['ClusterName'] = request.cluster_name
        if not UtilClient.is_unset(request.description):
            query['Description'] = request.description
        if not UtilClient.is_unset(request.image_name):
            query['ImageName'] = request.image_name
        if not UtilClient.is_unset(request.label):
            query['Label'] = request.label
        if not UtilClient.is_unset(request.malicious_image):
            query['MaliciousImage'] = request.malicious_image
        if not UtilClient.is_unset(request.rule_action):
            query['RuleAction'] = request.rule_action
        if not UtilClient.is_unset(request.scopes):
            query['Scopes'] = request.scopes
        if not UtilClient.is_unset(request.strategy_id):
            query['StrategyId'] = request.strategy_id
        if not UtilClient.is_unset(request.strategy_name):
            query['StrategyName'] = request.strategy_name
        if not UtilClient.is_unset(request.strategy_template_id):
            query['StrategyTemplateId'] = request.strategy_template_id
        if not UtilClient.is_unset(request.un_scaned_image):
            query['UnScanedImage'] = request.un_scaned_image
        if not UtilClient.is_unset(request.white_list):
            query['WhiteList'] = request.white_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateOpaStrategyNew',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateOpaStrategyNewResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_opa_strategy_new(
        self,
        request: sas_20181203_models.UpdateOpaStrategyNewRequest,
    ) -> sas_20181203_models.UpdateOpaStrategyNewResponse:
        """
        @summary Updates the blocking rule for at-risk images.
        
        @param request: UpdateOpaStrategyNewRequest
        @return: UpdateOpaStrategyNewResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_opa_strategy_new_with_options(request, runtime)

    async def update_opa_strategy_new_async(
        self,
        request: sas_20181203_models.UpdateOpaStrategyNewRequest,
    ) -> sas_20181203_models.UpdateOpaStrategyNewResponse:
        """
        @summary Updates the blocking rule for at-risk images.
        
        @param request: UpdateOpaStrategyNewRequest
        @return: UpdateOpaStrategyNewResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_opa_strategy_new_with_options_async(request, runtime)

    def update_oss_scan_config_with_options(
        self,
        request: sas_20181203_models.UpdateOssScanConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateOssScanConfigResponse:
        """
        @summary Modifies a policy of detecting Object Storage Service (OSS) objects by using the SDK for malicious file detection feature.
        
        @param request: UpdateOssScanConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateOssScanConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.all_key_prefix):
            query['AllKeyPrefix'] = request.all_key_prefix
        if not UtilClient.is_unset(request.bucket_name_list):
            query['BucketNameList'] = request.bucket_name_list
        if not UtilClient.is_unset(request.decompress_max_file_count):
            query['DecompressMaxFileCount'] = request.decompress_max_file_count
        if not UtilClient.is_unset(request.decompress_max_layer):
            query['DecompressMaxLayer'] = request.decompress_max_layer
        if not UtilClient.is_unset(request.decryption_list):
            query['DecryptionList'] = request.decryption_list
        if not UtilClient.is_unset(request.enable):
            query['Enable'] = request.enable
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.key_prefix_list):
            query['KeyPrefixList'] = request.key_prefix_list
        if not UtilClient.is_unset(request.key_suffix_list):
            query['KeySuffixList'] = request.key_suffix_list
        if not UtilClient.is_unset(request.last_modified_start_time):
            query['LastModifiedStartTime'] = request.last_modified_start_time
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.real_time_incr):
            query['RealTimeIncr'] = request.real_time_incr
        if not UtilClient.is_unset(request.scan_day_list):
            query['ScanDayList'] = request.scan_day_list
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateOssScanConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateOssScanConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_oss_scan_config_with_options_async(
        self,
        request: sas_20181203_models.UpdateOssScanConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateOssScanConfigResponse:
        """
        @summary Modifies a policy of detecting Object Storage Service (OSS) objects by using the SDK for malicious file detection feature.
        
        @param request: UpdateOssScanConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateOssScanConfigResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.all_key_prefix):
            query['AllKeyPrefix'] = request.all_key_prefix
        if not UtilClient.is_unset(request.bucket_name_list):
            query['BucketNameList'] = request.bucket_name_list
        if not UtilClient.is_unset(request.decompress_max_file_count):
            query['DecompressMaxFileCount'] = request.decompress_max_file_count
        if not UtilClient.is_unset(request.decompress_max_layer):
            query['DecompressMaxLayer'] = request.decompress_max_layer
        if not UtilClient.is_unset(request.decryption_list):
            query['DecryptionList'] = request.decryption_list
        if not UtilClient.is_unset(request.enable):
            query['Enable'] = request.enable
        if not UtilClient.is_unset(request.end_time):
            query['EndTime'] = request.end_time
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.key_prefix_list):
            query['KeyPrefixList'] = request.key_prefix_list
        if not UtilClient.is_unset(request.key_suffix_list):
            query['KeySuffixList'] = request.key_suffix_list
        if not UtilClient.is_unset(request.last_modified_start_time):
            query['LastModifiedStartTime'] = request.last_modified_start_time
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.real_time_incr):
            query['RealTimeIncr'] = request.real_time_incr
        if not UtilClient.is_unset(request.scan_day_list):
            query['ScanDayList'] = request.scan_day_list
        if not UtilClient.is_unset(request.start_time):
            query['StartTime'] = request.start_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateOssScanConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateOssScanConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_oss_scan_config(
        self,
        request: sas_20181203_models.UpdateOssScanConfigRequest,
    ) -> sas_20181203_models.UpdateOssScanConfigResponse:
        """
        @summary Modifies a policy of detecting Object Storage Service (OSS) objects by using the SDK for malicious file detection feature.
        
        @param request: UpdateOssScanConfigRequest
        @return: UpdateOssScanConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_oss_scan_config_with_options(request, runtime)

    async def update_oss_scan_config_async(
        self,
        request: sas_20181203_models.UpdateOssScanConfigRequest,
    ) -> sas_20181203_models.UpdateOssScanConfigResponse:
        """
        @summary Modifies a policy of detecting Object Storage Service (OSS) objects by using the SDK for malicious file detection feature.
        
        @param request: UpdateOssScanConfigRequest
        @return: UpdateOssScanConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_oss_scan_config_with_options_async(request, runtime)

    def update_post_paid_bind_rel_with_options(
        self,
        request: sas_20181203_models.UpdatePostPaidBindRelRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdatePostPaidBindRelResponse:
        """
        @summary Change Postpaid Asset Authorization Version
        
        @param request: UpdatePostPaidBindRelRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdatePostPaidBindRelResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.auto_bind):
            query['AutoBind'] = request.auto_bind
        if not UtilClient.is_unset(request.auto_bind_version):
            query['AutoBindVersion'] = request.auto_bind_version
        if not UtilClient.is_unset(request.bind_action):
            query['BindAction'] = request.bind_action
        if not UtilClient.is_unset(request.update_if_necessary):
            query['UpdateIfNecessary'] = request.update_if_necessary
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdatePostPaidBindRel',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdatePostPaidBindRelResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_post_paid_bind_rel_with_options_async(
        self,
        request: sas_20181203_models.UpdatePostPaidBindRelRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdatePostPaidBindRelResponse:
        """
        @summary Change Postpaid Asset Authorization Version
        
        @param request: UpdatePostPaidBindRelRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdatePostPaidBindRelResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.auto_bind):
            query['AutoBind'] = request.auto_bind
        if not UtilClient.is_unset(request.auto_bind_version):
            query['AutoBindVersion'] = request.auto_bind_version
        if not UtilClient.is_unset(request.bind_action):
            query['BindAction'] = request.bind_action
        if not UtilClient.is_unset(request.update_if_necessary):
            query['UpdateIfNecessary'] = request.update_if_necessary
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdatePostPaidBindRel',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdatePostPaidBindRelResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_post_paid_bind_rel(
        self,
        request: sas_20181203_models.UpdatePostPaidBindRelRequest,
    ) -> sas_20181203_models.UpdatePostPaidBindRelResponse:
        """
        @summary Change Postpaid Asset Authorization Version
        
        @param request: UpdatePostPaidBindRelRequest
        @return: UpdatePostPaidBindRelResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_post_paid_bind_rel_with_options(request, runtime)

    async def update_post_paid_bind_rel_async(
        self,
        request: sas_20181203_models.UpdatePostPaidBindRelRequest,
    ) -> sas_20181203_models.UpdatePostPaidBindRelResponse:
        """
        @summary Change Postpaid Asset Authorization Version
        
        @param request: UpdatePostPaidBindRelRequest
        @return: UpdatePostPaidBindRelResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_post_paid_bind_rel_with_options_async(request, runtime)

    def update_publish_auto_upgrade_with_options(
        self,
        request: sas_20181203_models.UpdatePublishAutoUpgradeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdatePublishAutoUpgradeResponse:
        """
        @summary Enables or disables automatic upgrade.
        
        @param request: UpdatePublishAutoUpgradeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdatePublishAutoUpgradeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.auto_upgrade):
            query['AutoUpgrade'] = request.auto_upgrade
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdatePublishAutoUpgrade',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdatePublishAutoUpgradeResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_publish_auto_upgrade_with_options_async(
        self,
        request: sas_20181203_models.UpdatePublishAutoUpgradeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdatePublishAutoUpgradeResponse:
        """
        @summary Enables or disables automatic upgrade.
        
        @param request: UpdatePublishAutoUpgradeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdatePublishAutoUpgradeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.auto_upgrade):
            query['AutoUpgrade'] = request.auto_upgrade
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdatePublishAutoUpgrade',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdatePublishAutoUpgradeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_publish_auto_upgrade(
        self,
        request: sas_20181203_models.UpdatePublishAutoUpgradeRequest,
    ) -> sas_20181203_models.UpdatePublishAutoUpgradeResponse:
        """
        @summary Enables or disables automatic upgrade.
        
        @param request: UpdatePublishAutoUpgradeRequest
        @return: UpdatePublishAutoUpgradeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_publish_auto_upgrade_with_options(request, runtime)

    async def update_publish_auto_upgrade_async(
        self,
        request: sas_20181203_models.UpdatePublishAutoUpgradeRequest,
    ) -> sas_20181203_models.UpdatePublishAutoUpgradeResponse:
        """
        @summary Enables or disables automatic upgrade.
        
        @param request: UpdatePublishAutoUpgradeRequest
        @return: UpdatePublishAutoUpgradeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_publish_auto_upgrade_with_options_async(request, runtime)

    def update_publish_batch_with_options(
        self,
        request: sas_20181203_models.UpdatePublishBatchRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdatePublishBatchResponse:
        """
        @summary Updates a release batch.
        
        @param request: UpdatePublishBatchRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdatePublishBatchResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.batch_id):
            query['BatchId'] = request.batch_id
        if not UtilClient.is_unset(request.batch_name):
            query['BatchName'] = request.batch_name
        if not UtilClient.is_unset(request.interval):
            query['Interval'] = request.interval
        if not UtilClient.is_unset(request.operation_base):
            query['OperationBase'] = request.operation_base
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdatePublishBatch',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdatePublishBatchResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_publish_batch_with_options_async(
        self,
        request: sas_20181203_models.UpdatePublishBatchRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdatePublishBatchResponse:
        """
        @summary Updates a release batch.
        
        @param request: UpdatePublishBatchRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdatePublishBatchResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.batch_id):
            query['BatchId'] = request.batch_id
        if not UtilClient.is_unset(request.batch_name):
            query['BatchName'] = request.batch_name
        if not UtilClient.is_unset(request.interval):
            query['Interval'] = request.interval
        if not UtilClient.is_unset(request.operation_base):
            query['OperationBase'] = request.operation_base
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdatePublishBatch',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdatePublishBatchResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_publish_batch(
        self,
        request: sas_20181203_models.UpdatePublishBatchRequest,
    ) -> sas_20181203_models.UpdatePublishBatchResponse:
        """
        @summary Updates a release batch.
        
        @param request: UpdatePublishBatchRequest
        @return: UpdatePublishBatchResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_publish_batch_with_options(request, runtime)

    async def update_publish_batch_async(
        self,
        request: sas_20181203_models.UpdatePublishBatchRequest,
    ) -> sas_20181203_models.UpdatePublishBatchResponse:
        """
        @summary Updates a release batch.
        
        @param request: UpdatePublishBatchRequest
        @return: UpdatePublishBatchResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_publish_batch_with_options_async(request, runtime)

    def update_publish_cron_with_options(
        self,
        request: sas_20181203_models.UpdatePublishCronRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdatePublishCronResponse:
        """
        @summary Modifies the configuration of the client upgrade time. If you want to call this operation, contact technical support.
        
        @param request: UpdatePublishCronRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdatePublishCronResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cron):
            query['Cron'] = request.cron
        if not UtilClient.is_unset(request.cron_day):
            query['CronDay'] = request.cron_day
        if not UtilClient.is_unset(request.cron_time):
            query['CronTime'] = request.cron_time
        if not UtilClient.is_unset(request.cron_type):
            query['CronType'] = request.cron_type
        if not UtilClient.is_unset(request.duration):
            query['Duration'] = request.duration
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdatePublishCron',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdatePublishCronResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_publish_cron_with_options_async(
        self,
        request: sas_20181203_models.UpdatePublishCronRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdatePublishCronResponse:
        """
        @summary Modifies the configuration of the client upgrade time. If you want to call this operation, contact technical support.
        
        @param request: UpdatePublishCronRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdatePublishCronResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.cron):
            query['Cron'] = request.cron
        if not UtilClient.is_unset(request.cron_day):
            query['CronDay'] = request.cron_day
        if not UtilClient.is_unset(request.cron_time):
            query['CronTime'] = request.cron_time
        if not UtilClient.is_unset(request.cron_type):
            query['CronType'] = request.cron_type
        if not UtilClient.is_unset(request.duration):
            query['Duration'] = request.duration
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdatePublishCron',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdatePublishCronResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_publish_cron(
        self,
        request: sas_20181203_models.UpdatePublishCronRequest,
    ) -> sas_20181203_models.UpdatePublishCronResponse:
        """
        @summary Modifies the configuration of the client upgrade time. If you want to call this operation, contact technical support.
        
        @param request: UpdatePublishCronRequest
        @return: UpdatePublishCronResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_publish_cron_with_options(request, runtime)

    async def update_publish_cron_async(
        self,
        request: sas_20181203_models.UpdatePublishCronRequest,
    ) -> sas_20181203_models.UpdatePublishCronResponse:
        """
        @summary Modifies the configuration of the client upgrade time. If you want to call this operation, contact technical support.
        
        @param request: UpdatePublishCronRequest
        @return: UpdatePublishCronResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_publish_cron_with_options_async(request, runtime)

    def update_publish_gray_switch_with_options(
        self,
        request: sas_20181203_models.UpdatePublishGraySwitchRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdatePublishGraySwitchResponse:
        """
        @summary Modifies the settings of the canary release feature for agent upgrade. If you want to use the feature, contact technical support.
        
        @param request: UpdatePublishGraySwitchRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdatePublishGraySwitchResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.gray_switch_status):
            query['GraySwitchStatus'] = request.gray_switch_status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdatePublishGraySwitch',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdatePublishGraySwitchResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_publish_gray_switch_with_options_async(
        self,
        request: sas_20181203_models.UpdatePublishGraySwitchRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdatePublishGraySwitchResponse:
        """
        @summary Modifies the settings of the canary release feature for agent upgrade. If you want to use the feature, contact technical support.
        
        @param request: UpdatePublishGraySwitchRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdatePublishGraySwitchResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.gray_switch_status):
            query['GraySwitchStatus'] = request.gray_switch_status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdatePublishGraySwitch',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdatePublishGraySwitchResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_publish_gray_switch(
        self,
        request: sas_20181203_models.UpdatePublishGraySwitchRequest,
    ) -> sas_20181203_models.UpdatePublishGraySwitchResponse:
        """
        @summary Modifies the settings of the canary release feature for agent upgrade. If you want to use the feature, contact technical support.
        
        @param request: UpdatePublishGraySwitchRequest
        @return: UpdatePublishGraySwitchResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_publish_gray_switch_with_options(request, runtime)

    async def update_publish_gray_switch_async(
        self,
        request: sas_20181203_models.UpdatePublishGraySwitchRequest,
    ) -> sas_20181203_models.UpdatePublishGraySwitchResponse:
        """
        @summary Modifies the settings of the canary release feature for agent upgrade. If you want to use the feature, contact technical support.
        
        @param request: UpdatePublishGraySwitchRequest
        @return: UpdatePublishGraySwitchResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_publish_gray_switch_with_options_async(request, runtime)

    def update_selection_key_by_type_with_options(
        self,
        request: sas_20181203_models.UpdateSelectionKeyByTypeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateSelectionKeyByTypeResponse:
        """
        @summary Updates the unique identifier of an asset selection.
        
        @param request: UpdateSelectionKeyByTypeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateSelectionKeyByTypeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.business_type):
            query['BusinessType'] = request.business_type
        if not UtilClient.is_unset(request.selection_key):
            query['SelectionKey'] = request.selection_key
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateSelectionKeyByType',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateSelectionKeyByTypeResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_selection_key_by_type_with_options_async(
        self,
        request: sas_20181203_models.UpdateSelectionKeyByTypeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateSelectionKeyByTypeResponse:
        """
        @summary Updates the unique identifier of an asset selection.
        
        @param request: UpdateSelectionKeyByTypeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateSelectionKeyByTypeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.business_type):
            query['BusinessType'] = request.business_type
        if not UtilClient.is_unset(request.selection_key):
            query['SelectionKey'] = request.selection_key
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateSelectionKeyByType',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateSelectionKeyByTypeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_selection_key_by_type(
        self,
        request: sas_20181203_models.UpdateSelectionKeyByTypeRequest,
    ) -> sas_20181203_models.UpdateSelectionKeyByTypeResponse:
        """
        @summary Updates the unique identifier of an asset selection.
        
        @param request: UpdateSelectionKeyByTypeRequest
        @return: UpdateSelectionKeyByTypeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_selection_key_by_type_with_options(request, runtime)

    async def update_selection_key_by_type_async(
        self,
        request: sas_20181203_models.UpdateSelectionKeyByTypeRequest,
    ) -> sas_20181203_models.UpdateSelectionKeyByTypeResponse:
        """
        @summary Updates the unique identifier of an asset selection.
        
        @param request: UpdateSelectionKeyByTypeRequest
        @return: UpdateSelectionKeyByTypeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_selection_key_by_type_with_options_async(request, runtime)

    def update_strict_event_name_with_options(
        self,
        request: sas_20181203_models.UpdateStrictEventNameRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateStrictEventNameResponse:
        """
        @summary Update the selected strict events in strict mode
        
        @param request: UpdateStrictEventNameRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateStrictEventNameResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.event_name_list):
            query['EventNameList'] = request.event_name_list
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.operator):
            query['Operator'] = request.operator
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateStrictEventName',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateStrictEventNameResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_strict_event_name_with_options_async(
        self,
        request: sas_20181203_models.UpdateStrictEventNameRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateStrictEventNameResponse:
        """
        @summary Update the selected strict events in strict mode
        
        @param request: UpdateStrictEventNameRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateStrictEventNameResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.event_name_list):
            query['EventNameList'] = request.event_name_list
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.operator):
            query['Operator'] = request.operator
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateStrictEventName',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateStrictEventNameResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_strict_event_name(
        self,
        request: sas_20181203_models.UpdateStrictEventNameRequest,
    ) -> sas_20181203_models.UpdateStrictEventNameResponse:
        """
        @summary Update the selected strict events in strict mode
        
        @param request: UpdateStrictEventNameRequest
        @return: UpdateStrictEventNameResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_strict_event_name_with_options(request, runtime)

    async def update_strict_event_name_async(
        self,
        request: sas_20181203_models.UpdateStrictEventNameRequest,
    ) -> sas_20181203_models.UpdateStrictEventNameResponse:
        """
        @summary Update the selected strict events in strict mode
        
        @param request: UpdateStrictEventNameRequest
        @return: UpdateStrictEventNameResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_strict_event_name_with_options_async(request, runtime)

    def update_target_list_by_batch_with_options(
        self,
        request: sas_20181203_models.UpdateTargetListByBatchRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateTargetListByBatchResponse:
        """
        @summary Updates machines in a release batch.
        
        @param request: UpdateTargetListByBatchRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateTargetListByBatchResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.batch_id):
            query['BatchId'] = request.batch_id
        if not UtilClient.is_unset(request.operation_list):
            query['OperationList'] = request.operation_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateTargetListByBatch',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateTargetListByBatchResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_target_list_by_batch_with_options_async(
        self,
        request: sas_20181203_models.UpdateTargetListByBatchRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateTargetListByBatchResponse:
        """
        @summary Updates machines in a release batch.
        
        @param request: UpdateTargetListByBatchRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateTargetListByBatchResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.batch_id):
            query['BatchId'] = request.batch_id
        if not UtilClient.is_unset(request.operation_list):
            query['OperationList'] = request.operation_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateTargetListByBatch',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateTargetListByBatchResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_target_list_by_batch(
        self,
        request: sas_20181203_models.UpdateTargetListByBatchRequest,
    ) -> sas_20181203_models.UpdateTargetListByBatchResponse:
        """
        @summary Updates machines in a release batch.
        
        @param request: UpdateTargetListByBatchRequest
        @return: UpdateTargetListByBatchResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_target_list_by_batch_with_options(request, runtime)

    async def update_target_list_by_batch_async(
        self,
        request: sas_20181203_models.UpdateTargetListByBatchRequest,
    ) -> sas_20181203_models.UpdateTargetListByBatchResponse:
        """
        @summary Updates machines in a release batch.
        
        @param request: UpdateTargetListByBatchRequest
        @return: UpdateTargetListByBatchResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_target_list_by_batch_with_options_async(request, runtime)

    def update_white_list_with_options(
        self,
        request: sas_20181203_models.UpdateWhiteListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateWhiteListResponse:
        """
        @summary Modify Image Service Whitelist.
        
        @param request: UpdateWhiteListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateWhiteListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.registry_id):
            query['RegistryId'] = request.registry_id
        if not UtilClient.is_unset(request.white_list):
            query['WhiteList'] = request.white_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateWhiteList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateWhiteListResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_white_list_with_options_async(
        self,
        request: sas_20181203_models.UpdateWhiteListRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateWhiteListResponse:
        """
        @summary Modify Image Service Whitelist.
        
        @param request: UpdateWhiteListRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateWhiteListResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.registry_id):
            query['RegistryId'] = request.registry_id
        if not UtilClient.is_unset(request.white_list):
            query['WhiteList'] = request.white_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateWhiteList',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateWhiteListResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_white_list(
        self,
        request: sas_20181203_models.UpdateWhiteListRequest,
    ) -> sas_20181203_models.UpdateWhiteListResponse:
        """
        @summary Modify Image Service Whitelist.
        
        @param request: UpdateWhiteListRequest
        @return: UpdateWhiteListResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_white_list_with_options(request, runtime)

    async def update_white_list_async(
        self,
        request: sas_20181203_models.UpdateWhiteListRequest,
    ) -> sas_20181203_models.UpdateWhiteListResponse:
        """
        @summary Modify Image Service Whitelist.
        
        @param request: UpdateWhiteListRequest
        @return: UpdateWhiteListResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_white_list_with_options_async(request, runtime)

    def update_white_list_strategy_status_with_options(
        self,
        request: sas_20181203_models.UpdateWhiteListStrategyStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateWhiteListStrategyStatusResponse:
        """
        @summary Updates the status of an application whitelist policy.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
        
        @param request: UpdateWhiteListStrategyStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateWhiteListStrategyStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        if not UtilClient.is_unset(request.strategy_ids):
            query['StrategyIds'] = request.strategy_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateWhiteListStrategyStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateWhiteListStrategyStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_white_list_strategy_status_with_options_async(
        self,
        request: sas_20181203_models.UpdateWhiteListStrategyStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpdateWhiteListStrategyStatusResponse:
        """
        @summary Updates the status of an application whitelist policy.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
        
        @param request: UpdateWhiteListStrategyStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateWhiteListStrategyStatusResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.source_ip):
            query['SourceIp'] = request.source_ip
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        if not UtilClient.is_unset(request.strategy_ids):
            query['StrategyIds'] = request.strategy_ids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateWhiteListStrategyStatus',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpdateWhiteListStrategyStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_white_list_strategy_status(
        self,
        request: sas_20181203_models.UpdateWhiteListStrategyStatusRequest,
    ) -> sas_20181203_models.UpdateWhiteListStrategyStatusResponse:
        """
        @summary Updates the status of an application whitelist policy.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
        
        @param request: UpdateWhiteListStrategyStatusRequest
        @return: UpdateWhiteListStrategyStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_white_list_strategy_status_with_options(request, runtime)

    async def update_white_list_strategy_status_async(
        self,
        request: sas_20181203_models.UpdateWhiteListStrategyStatusRequest,
    ) -> sas_20181203_models.UpdateWhiteListStrategyStatusResponse:
        """
        @summary Updates the status of an application whitelist policy.
        
        @description The application whitelist feature is in public preview. You cannot apply for a trial of the feature. If you applied for a trial of the feature or the feature is in use, you can call this operation.
        
        @param request: UpdateWhiteListStrategyStatusRequest
        @return: UpdateWhiteListStrategyStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_white_list_strategy_status_with_options_async(request, runtime)

    def upgrade_backup_policy_version_with_options(
        self,
        request: sas_20181203_models.UpgradeBackupPolicyVersionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpgradeBackupPolicyVersionResponse:
        """
        @summary Upgrades the version of an anti-ransomware policy.
        
        @param request: UpgradeBackupPolicyVersionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpgradeBackupPolicyVersionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpgradeBackupPolicyVersion',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpgradeBackupPolicyVersionResponse(),
            self.call_api(params, req, runtime)
        )

    async def upgrade_backup_policy_version_with_options_async(
        self,
        request: sas_20181203_models.UpgradeBackupPolicyVersionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpgradeBackupPolicyVersionResponse:
        """
        @summary Upgrades the version of an anti-ransomware policy.
        
        @param request: UpgradeBackupPolicyVersionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpgradeBackupPolicyVersionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpgradeBackupPolicyVersion',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpgradeBackupPolicyVersionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def upgrade_backup_policy_version(
        self,
        request: sas_20181203_models.UpgradeBackupPolicyVersionRequest,
    ) -> sas_20181203_models.UpgradeBackupPolicyVersionResponse:
        """
        @summary Upgrades the version of an anti-ransomware policy.
        
        @param request: UpgradeBackupPolicyVersionRequest
        @return: UpgradeBackupPolicyVersionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.upgrade_backup_policy_version_with_options(request, runtime)

    async def upgrade_backup_policy_version_async(
        self,
        request: sas_20181203_models.UpgradeBackupPolicyVersionRequest,
    ) -> sas_20181203_models.UpgradeBackupPolicyVersionResponse:
        """
        @summary Upgrades the version of an anti-ransomware policy.
        
        @param request: UpgradeBackupPolicyVersionRequest
        @return: UpgradeBackupPolicyVersionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.upgrade_backup_policy_version_with_options_async(request, runtime)

    def upgrade_honeypot_node_with_options(
        self,
        request: sas_20181203_models.UpgradeHoneypotNodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpgradeHoneypotNodeResponse:
        """
        @summary Upgrades the version of the management node to which a honeypot belongs.
        
        @param request: UpgradeHoneypotNodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpgradeHoneypotNodeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.allow_honeypot_access_internet):
            query['AllowHoneypotAccessInternet'] = request.allow_honeypot_access_internet
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.node_id):
            query['NodeId'] = request.node_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpgradeHoneypotNode',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpgradeHoneypotNodeResponse(),
            self.call_api(params, req, runtime)
        )

    async def upgrade_honeypot_node_with_options_async(
        self,
        request: sas_20181203_models.UpgradeHoneypotNodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpgradeHoneypotNodeResponse:
        """
        @summary Upgrades the version of the management node to which a honeypot belongs.
        
        @param request: UpgradeHoneypotNodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpgradeHoneypotNodeResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.allow_honeypot_access_internet):
            query['AllowHoneypotAccessInternet'] = request.allow_honeypot_access_internet
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.node_id):
            query['NodeId'] = request.node_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpgradeHoneypotNode',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpgradeHoneypotNodeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def upgrade_honeypot_node(
        self,
        request: sas_20181203_models.UpgradeHoneypotNodeRequest,
    ) -> sas_20181203_models.UpgradeHoneypotNodeResponse:
        """
        @summary Upgrades the version of the management node to which a honeypot belongs.
        
        @param request: UpgradeHoneypotNodeRequest
        @return: UpgradeHoneypotNodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.upgrade_honeypot_node_with_options(request, runtime)

    async def upgrade_honeypot_node_async(
        self,
        request: sas_20181203_models.UpgradeHoneypotNodeRequest,
    ) -> sas_20181203_models.UpgradeHoneypotNodeResponse:
        """
        @summary Upgrades the version of the management node to which a honeypot belongs.
        
        @param request: UpgradeHoneypotNodeRequest
        @return: UpgradeHoneypotNodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.upgrade_honeypot_node_with_options_async(request, runtime)

    def upgrade_version_by_uuids_with_options(
        self,
        request: sas_20181203_models.UpgradeVersionByUuidsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpgradeVersionByUuidsResponse:
        """
        @summary Manually upgrades the client version on assets.
        
        @param request: UpgradeVersionByUuidsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpgradeVersionByUuidsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.upgrade_version):
            query['UpgradeVersion'] = request.upgrade_version
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpgradeVersionByUuids',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpgradeVersionByUuidsResponse(),
            self.call_api(params, req, runtime)
        )

    async def upgrade_version_by_uuids_with_options_async(
        self,
        request: sas_20181203_models.UpgradeVersionByUuidsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UpgradeVersionByUuidsResponse:
        """
        @summary Manually upgrades the client version on assets.
        
        @param request: UpgradeVersionByUuidsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpgradeVersionByUuidsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.upgrade_version):
            query['UpgradeVersion'] = request.upgrade_version
        if not UtilClient.is_unset(request.uuid_list):
            query['UuidList'] = request.uuid_list
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpgradeVersionByUuids',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UpgradeVersionByUuidsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def upgrade_version_by_uuids(
        self,
        request: sas_20181203_models.UpgradeVersionByUuidsRequest,
    ) -> sas_20181203_models.UpgradeVersionByUuidsResponse:
        """
        @summary Manually upgrades the client version on assets.
        
        @param request: UpgradeVersionByUuidsRequest
        @return: UpgradeVersionByUuidsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.upgrade_version_by_uuids_with_options(request, runtime)

    async def upgrade_version_by_uuids_async(
        self,
        request: sas_20181203_models.UpgradeVersionByUuidsRequest,
    ) -> sas_20181203_models.UpgradeVersionByUuidsResponse:
        """
        @summary Manually upgrades the client version on assets.
        
        @param request: UpgradeVersionByUuidsRequest
        @return: UpgradeVersionByUuidsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.upgrade_version_by_uuids_with_options_async(request, runtime)

    def uploaded_honey_pot_file_with_options(
        self,
        request: sas_20181203_models.UploadedHoneyPotFileRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UploadedHoneyPotFileResponse:
        """
        @summary Uploads a honeypot file.
        
        @param request: UploadedHoneyPotFileRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UploadedHoneyPotFileResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.file_key):
            query['FileKey'] = request.file_key
        if not UtilClient.is_unset(request.file_name):
            query['FileName'] = request.file_name
        if not UtilClient.is_unset(request.file_type):
            query['FileType'] = request.file_type
        if not UtilClient.is_unset(request.honeypot_image_name):
            query['HoneypotImageName'] = request.honeypot_image_name
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.node_id):
            query['NodeId'] = request.node_id
        if not UtilClient.is_unset(request.template_extra):
            query['TemplateExtra'] = request.template_extra
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UploadedHoneyPotFile',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UploadedHoneyPotFileResponse(),
            self.call_api(params, req, runtime)
        )

    async def uploaded_honey_pot_file_with_options_async(
        self,
        request: sas_20181203_models.UploadedHoneyPotFileRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.UploadedHoneyPotFileResponse:
        """
        @summary Uploads a honeypot file.
        
        @param request: UploadedHoneyPotFileRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UploadedHoneyPotFileResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.file_key):
            query['FileKey'] = request.file_key
        if not UtilClient.is_unset(request.file_name):
            query['FileName'] = request.file_name
        if not UtilClient.is_unset(request.file_type):
            query['FileType'] = request.file_type
        if not UtilClient.is_unset(request.honeypot_image_name):
            query['HoneypotImageName'] = request.honeypot_image_name
        if not UtilClient.is_unset(request.lang):
            query['Lang'] = request.lang
        if not UtilClient.is_unset(request.node_id):
            query['NodeId'] = request.node_id
        if not UtilClient.is_unset(request.template_extra):
            query['TemplateExtra'] = request.template_extra
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UploadedHoneyPotFile',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.UploadedHoneyPotFileResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def uploaded_honey_pot_file(
        self,
        request: sas_20181203_models.UploadedHoneyPotFileRequest,
    ) -> sas_20181203_models.UploadedHoneyPotFileResponse:
        """
        @summary Uploads a honeypot file.
        
        @param request: UploadedHoneyPotFileRequest
        @return: UploadedHoneyPotFileResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.uploaded_honey_pot_file_with_options(request, runtime)

    async def uploaded_honey_pot_file_async(
        self,
        request: sas_20181203_models.UploadedHoneyPotFileRequest,
    ) -> sas_20181203_models.UploadedHoneyPotFileResponse:
        """
        @summary Uploads a honeypot file.
        
        @param request: UploadedHoneyPotFileRequest
        @return: UploadedHoneyPotFileResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.uploaded_honey_pot_file_with_options_async(request, runtime)

    def validate_hc_warnings_with_options(
        self,
        request: sas_20181203_models.ValidateHcWarningsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ValidateHcWarningsResponse:
        """
        @summary Verifies whether risk items are fixed. If a risk item is fixed, the status of the related check item is updated to Passed.
        
        @param request: ValidateHcWarningsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ValidateHcWarningsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_ids):
            query['CheckIds'] = request.check_ids
        if not UtilClient.is_unset(request.risk_ids):
            query['RiskIds'] = request.risk_ids
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ValidateHcWarnings',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ValidateHcWarningsResponse(),
            self.call_api(params, req, runtime)
        )

    async def validate_hc_warnings_with_options_async(
        self,
        request: sas_20181203_models.ValidateHcWarningsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.ValidateHcWarningsResponse:
        """
        @summary Verifies whether risk items are fixed. If a risk item is fixed, the status of the related check item is updated to Passed.
        
        @param request: ValidateHcWarningsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ValidateHcWarningsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_ids):
            query['CheckIds'] = request.check_ids
        if not UtilClient.is_unset(request.risk_ids):
            query['RiskIds'] = request.risk_ids
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        if not UtilClient.is_unset(request.uuids):
            query['Uuids'] = request.uuids
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ValidateHcWarnings',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.ValidateHcWarningsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def validate_hc_warnings(
        self,
        request: sas_20181203_models.ValidateHcWarningsRequest,
    ) -> sas_20181203_models.ValidateHcWarningsResponse:
        """
        @summary Verifies whether risk items are fixed. If a risk item is fixed, the status of the related check item is updated to Passed.
        
        @param request: ValidateHcWarningsRequest
        @return: ValidateHcWarningsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.validate_hc_warnings_with_options(request, runtime)

    async def validate_hc_warnings_async(
        self,
        request: sas_20181203_models.ValidateHcWarningsRequest,
    ) -> sas_20181203_models.ValidateHcWarningsResponse:
        """
        @summary Verifies whether risk items are fixed. If a risk item is fixed, the status of the related check item is updated to Passed.
        
        @param request: ValidateHcWarningsRequest
        @return: ValidateHcWarningsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.validate_hc_warnings_with_options_async(request, runtime)

    def verify_check_custom_config_with_options(
        self,
        tmp_req: sas_20181203_models.VerifyCheckCustomConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.VerifyCheckCustomConfigResponse:
        """
        @summary Customization and validation of check items and repair parameters
        
        @param tmp_req: VerifyCheckCustomConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: VerifyCheckCustomConfigResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.VerifyCheckCustomConfigShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.custom_check_config):
            request.custom_check_config_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.custom_check_config, 'CustomCheckConfig', 'json')
        query = {}
        if not UtilClient.is_unset(request.check_id):
            query['CheckId'] = request.check_id
        if not UtilClient.is_unset(request.custom_check_config_shrink):
            query['CustomCheckConfig'] = request.custom_check_config_shrink
        if not UtilClient.is_unset(request.custom_configs):
            query['CustomConfigs'] = request.custom_configs
        if not UtilClient.is_unset(request.repair_configs):
            query['RepairConfigs'] = request.repair_configs
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='VerifyCheckCustomConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.VerifyCheckCustomConfigResponse(),
            self.call_api(params, req, runtime)
        )

    async def verify_check_custom_config_with_options_async(
        self,
        tmp_req: sas_20181203_models.VerifyCheckCustomConfigRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.VerifyCheckCustomConfigResponse:
        """
        @summary Customization and validation of check items and repair parameters
        
        @param tmp_req: VerifyCheckCustomConfigRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: VerifyCheckCustomConfigResponse
        """
        UtilClient.validate_model(tmp_req)
        request = sas_20181203_models.VerifyCheckCustomConfigShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.custom_check_config):
            request.custom_check_config_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.custom_check_config, 'CustomCheckConfig', 'json')
        query = {}
        if not UtilClient.is_unset(request.check_id):
            query['CheckId'] = request.check_id
        if not UtilClient.is_unset(request.custom_check_config_shrink):
            query['CustomCheckConfig'] = request.custom_check_config_shrink
        if not UtilClient.is_unset(request.custom_configs):
            query['CustomConfigs'] = request.custom_configs
        if not UtilClient.is_unset(request.repair_configs):
            query['RepairConfigs'] = request.repair_configs
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='VerifyCheckCustomConfig',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.VerifyCheckCustomConfigResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def verify_check_custom_config(
        self,
        request: sas_20181203_models.VerifyCheckCustomConfigRequest,
    ) -> sas_20181203_models.VerifyCheckCustomConfigResponse:
        """
        @summary Customization and validation of check items and repair parameters
        
        @param request: VerifyCheckCustomConfigRequest
        @return: VerifyCheckCustomConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.verify_check_custom_config_with_options(request, runtime)

    async def verify_check_custom_config_async(
        self,
        request: sas_20181203_models.VerifyCheckCustomConfigRequest,
    ) -> sas_20181203_models.VerifyCheckCustomConfigResponse:
        """
        @summary Customization and validation of check items and repair parameters
        
        @param request: VerifyCheckCustomConfigRequest
        @return: VerifyCheckCustomConfigResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.verify_check_custom_config_with_options_async(request, runtime)

    def verify_check_instance_result_with_options(
        self,
        request: sas_20181203_models.VerifyCheckInstanceResultRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.VerifyCheckInstanceResultResponse:
        """
        @summary Verifies the instances on which risks are detected based on a check item.
        
        @param request: VerifyCheckInstanceResultRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: VerifyCheckInstanceResultResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_id):
            query['CheckId'] = request.check_id
        if not UtilClient.is_unset(request.instance_ids):
            query['InstanceIds'] = request.instance_ids
        if not UtilClient.is_unset(request.task_source):
            query['TaskSource'] = request.task_source
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='VerifyCheckInstanceResult',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.VerifyCheckInstanceResultResponse(),
            self.call_api(params, req, runtime)
        )

    async def verify_check_instance_result_with_options_async(
        self,
        request: sas_20181203_models.VerifyCheckInstanceResultRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.VerifyCheckInstanceResultResponse:
        """
        @summary Verifies the instances on which risks are detected based on a check item.
        
        @param request: VerifyCheckInstanceResultRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: VerifyCheckInstanceResultResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_id):
            query['CheckId'] = request.check_id
        if not UtilClient.is_unset(request.instance_ids):
            query['InstanceIds'] = request.instance_ids
        if not UtilClient.is_unset(request.task_source):
            query['TaskSource'] = request.task_source
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='VerifyCheckInstanceResult',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.VerifyCheckInstanceResultResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def verify_check_instance_result(
        self,
        request: sas_20181203_models.VerifyCheckInstanceResultRequest,
    ) -> sas_20181203_models.VerifyCheckInstanceResultResponse:
        """
        @summary Verifies the instances on which risks are detected based on a check item.
        
        @param request: VerifyCheckInstanceResultRequest
        @return: VerifyCheckInstanceResultResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.verify_check_instance_result_with_options(request, runtime)

    async def verify_check_instance_result_async(
        self,
        request: sas_20181203_models.VerifyCheckInstanceResultRequest,
    ) -> sas_20181203_models.VerifyCheckInstanceResultResponse:
        """
        @summary Verifies the instances on which risks are detected based on a check item.
        
        @param request: VerifyCheckInstanceResultRequest
        @return: VerifyCheckInstanceResultResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.verify_check_instance_result_with_options_async(request, runtime)

    def verify_check_result_with_options(
        self,
        request: sas_20181203_models.VerifyCheckResultRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.VerifyCheckResultResponse:
        """
        @summary Verifies risk items that are detected based on check items.
        
        @param request: VerifyCheckResultRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: VerifyCheckResultResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_ids):
            query['CheckIds'] = request.check_ids
        if not UtilClient.is_unset(request.task_source):
            query['TaskSource'] = request.task_source
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='VerifyCheckResult',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.VerifyCheckResultResponse(),
            self.call_api(params, req, runtime)
        )

    async def verify_check_result_with_options_async(
        self,
        request: sas_20181203_models.VerifyCheckResultRequest,
        runtime: util_models.RuntimeOptions,
    ) -> sas_20181203_models.VerifyCheckResultResponse:
        """
        @summary Verifies risk items that are detected based on check items.
        
        @param request: VerifyCheckResultRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: VerifyCheckResultResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.check_ids):
            query['CheckIds'] = request.check_ids
        if not UtilClient.is_unset(request.task_source):
            query['TaskSource'] = request.task_source
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='VerifyCheckResult',
            version='2018-12-03',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            sas_20181203_models.VerifyCheckResultResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def verify_check_result(
        self,
        request: sas_20181203_models.VerifyCheckResultRequest,
    ) -> sas_20181203_models.VerifyCheckResultResponse:
        """
        @summary Verifies risk items that are detected based on check items.
        
        @param request: VerifyCheckResultRequest
        @return: VerifyCheckResultResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.verify_check_result_with_options(request, runtime)

    async def verify_check_result_async(
        self,
        request: sas_20181203_models.VerifyCheckResultRequest,
    ) -> sas_20181203_models.VerifyCheckResultResponse:
        """
        @summary Verifies risk items that are detected based on check items.
        
        @param request: VerifyCheckResultRequest
        @return: VerifyCheckResultResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.verify_check_result_with_options_async(request, runtime)
