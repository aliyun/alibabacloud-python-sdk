# -*- coding: utf-8 -*-
# This file is auto-generated, don't edit it. Thanks.
from Tea.request import TeaRequest
from Tea.exceptions import TeaException
from Tea.core import TeaCore
from typing import Dict

from alibabacloud_tea_openapi.client import Client as OpenApiClient
from alibabacloud_tea_openapi import models as open_api_models
from alibabacloud_tea_util.client import Client as UtilClient
from alibabacloud_tea_fileform.client import Client as FileFormClient
from alibabacloud_tea_xml.client import Client as XMLClient
from alibabacloud_endpoint_util.client import Client as EndpointUtilClient
from alibabacloud_dataworks_public20240518 import models as dataworks_public_20240518_models
from alibabacloud_tea_util import models as util_models
from alibabacloud_openapi_util.client import Client as OpenApiUtilClient
from alibabacloud_tea_fileform import models as file_form_models


class Client(OpenApiClient):
    """
    *\
    """
    def __init__(
        self, 
        config: open_api_models.Config,
    ):
        super().__init__(config)
        self._endpoint_rule = 'regional'
        self._endpoint_map = {
            'ap-northeast-1': 'dataworks.ap-northeast-1.aliyuncs.com',
            'ap-south-1': 'dataworks.ap-south-1.aliyuncs.com',
            'ap-southeast-1': 'dataworks.ap-southeast-1.aliyuncs.com',
            'ap-southeast-2': 'dataworks.ap-southeast-2.aliyuncs.com',
            'ap-southeast-3': 'dataworks.ap-southeast-3.aliyuncs.com',
            'ap-southeast-5': 'dataworks.ap-southeast-5.aliyuncs.com',
            'cn-beijing': 'dataworks.cn-beijing.aliyuncs.com',
            'cn-chengdu': 'dataworks.cn-chengdu.aliyuncs.com',
            'cn-hangzhou': 'dataworks.cn-hangzhou.aliyuncs.com',
            'cn-hongkong': 'dataworks.cn-hongkong.aliyuncs.com',
            'cn-huhehaote': 'dataworks.aliyuncs.com',
            'cn-qingdao': 'dataworks.aliyuncs.com',
            'cn-shanghai': 'dataworks.cn-shanghai.aliyuncs.com',
            'cn-shenzhen': 'dataworks.cn-shenzhen.aliyuncs.com',
            'cn-zhangjiakou': 'dataworks.aliyuncs.com',
            'eu-central-1': 'dataworks.eu-central-1.aliyuncs.com',
            'eu-west-1': 'dataworks.eu-west-1.aliyuncs.com',
            'me-east-1': 'dataworks.me-east-1.aliyuncs.com',
            'us-east-1': 'dataworks.us-east-1.aliyuncs.com',
            'us-west-1': 'dataworks.us-west-1.aliyuncs.com',
            'cn-hangzhou-finance': 'dataworks.aliyuncs.com',
            'cn-shenzhen-finance-1': 'dataworks.aliyuncs.com',
            'cn-shanghai-finance-1': 'dataworks.aliyuncs.com',
            'cn-north-2-gov-1': 'dataworks.aliyuncs.com'
        }
        self.check_config(config)
        self._endpoint = self.get_endpoint('dataworks-public', self._region_id, self._endpoint_rule, self._network, self._suffix, self._endpoint_map, self._endpoint)

    def _post_ossobject(
        self,
        bucket_name: str,
        data: dict,
    ) -> dict:
        _request = TeaRequest()
        form = UtilClient.assert_as_map(data)
        boundary = FileFormClient.get_boundary()
        host = UtilClient.assert_as_string(form.get('host'))
        _request.protocol = 'HTTPS'
        _request.method = 'POST'
        _request.pathname = f'/'
        _request.headers = {
            'host': host,
            'date': UtilClient.get_date_utcstring(),
            'user-agent': UtilClient.get_user_agent('')
        }
        _request.headers['content-type'] = f'multipart/form-data; boundary={boundary}'
        _request.body = FileFormClient.to_file_form(form, boundary)
        _last_request = _request
        _response = TeaCore.do_action(_request)
        resp_map = None
        body_str = UtilClient.read_as_string(_response.body)
        if UtilClient.is_4xx(_response.status_code) or UtilClient.is_5xx(_response.status_code):
            resp_map = XMLClient.parse_xml(body_str, None)
            err = UtilClient.assert_as_map(resp_map.get('Error'))
            raise TeaException({
                'code': err.get('Code'),
                'message': err.get('Message'),
                'data': {
                    'httpCode': _response.status_code,
                    'requestId': err.get('RequestId'),
                    'hostId': err.get('HostId')
                }
            })
        resp_map = XMLClient.parse_xml(body_str, None)
        return TeaCore.merge(resp_map)

    async def _post_ossobject_async(
        self,
        bucket_name: str,
        data: dict,
    ) -> dict:
        _request = TeaRequest()
        form = UtilClient.assert_as_map(data)
        boundary = FileFormClient.get_boundary()
        host = UtilClient.assert_as_string(form.get('host'))
        _request.protocol = 'HTTPS'
        _request.method = 'POST'
        _request.pathname = f'/'
        _request.headers = {
            'host': host,
            'date': UtilClient.get_date_utcstring(),
            'user-agent': UtilClient.get_user_agent('')
        }
        _request.headers['content-type'] = f'multipart/form-data; boundary={boundary}'
        _request.body = FileFormClient.to_file_form(form, boundary)
        _last_request = _request
        _response = await TeaCore.async_do_action(_request)
        resp_map = None
        body_str = await UtilClient.read_as_string_async(_response.body)
        if UtilClient.is_4xx(_response.status_code) or UtilClient.is_5xx(_response.status_code):
            resp_map = XMLClient.parse_xml(body_str, None)
            err = UtilClient.assert_as_map(resp_map.get('Error'))
            raise TeaException({
                'code': err.get('Code'),
                'message': err.get('Message'),
                'data': {
                    'httpCode': _response.status_code,
                    'requestId': err.get('RequestId'),
                    'hostId': err.get('HostId')
                }
            })
        resp_map = XMLClient.parse_xml(body_str, None)
        return TeaCore.merge(resp_map)

    def get_endpoint(
        self,
        product_id: str,
        region_id: str,
        endpoint_rule: str,
        network: str,
        suffix: str,
        endpoint_map: Dict[str, str],
        endpoint: str,
    ) -> str:
        if not UtilClient.empty(endpoint):
            return endpoint
        if not UtilClient.is_unset(endpoint_map) and not UtilClient.empty(endpoint_map.get(region_id)):
            return endpoint_map.get(region_id)
        return EndpointUtilClient.get_endpoint_rules(product_id, region_id, endpoint_rule, network, suffix)

    def abolish_pipeline_run_with_options(
        self,
        request: dataworks_public_20240518_models.AbolishPipelineRunRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.AbolishPipelineRunResponse:
        """
        @summary Terminates the process for deploying or undeploying an entity. The process is not deleted and can still be queried by calling query operations.
        
        @param request: AbolishPipelineRunRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AbolishPipelineRunResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='AbolishPipelineRun',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.AbolishPipelineRunResponse(),
            self.call_api(params, req, runtime)
        )

    async def abolish_pipeline_run_with_options_async(
        self,
        request: dataworks_public_20240518_models.AbolishPipelineRunRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.AbolishPipelineRunResponse:
        """
        @summary Terminates the process for deploying or undeploying an entity. The process is not deleted and can still be queried by calling query operations.
        
        @param request: AbolishPipelineRunRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AbolishPipelineRunResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='AbolishPipelineRun',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.AbolishPipelineRunResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def abolish_pipeline_run(
        self,
        request: dataworks_public_20240518_models.AbolishPipelineRunRequest,
    ) -> dataworks_public_20240518_models.AbolishPipelineRunResponse:
        """
        @summary Terminates the process for deploying or undeploying an entity. The process is not deleted and can still be queried by calling query operations.
        
        @param request: AbolishPipelineRunRequest
        @return: AbolishPipelineRunResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.abolish_pipeline_run_with_options(request, runtime)

    async def abolish_pipeline_run_async(
        self,
        request: dataworks_public_20240518_models.AbolishPipelineRunRequest,
    ) -> dataworks_public_20240518_models.AbolishPipelineRunResponse:
        """
        @summary Terminates the process for deploying or undeploying an entity. The process is not deleted and can still be queried by calling query operations.
        
        @param request: AbolishPipelineRunRequest
        @return: AbolishPipelineRunResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.abolish_pipeline_run_with_options_async(request, runtime)

    def add_entity_into_meta_collection_with_options(
        self,
        request: dataworks_public_20240518_models.AddEntityIntoMetaCollectionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.AddEntityIntoMetaCollectionResponse:
        """
        @summary 从集合中移除实体对象
        
        @param request: AddEntityIntoMetaCollectionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddEntityIntoMetaCollectionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.meta_collection_id):
            query['MetaCollectionId'] = request.meta_collection_id
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddEntityIntoMetaCollection',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.AddEntityIntoMetaCollectionResponse(),
            self.call_api(params, req, runtime)
        )

    async def add_entity_into_meta_collection_with_options_async(
        self,
        request: dataworks_public_20240518_models.AddEntityIntoMetaCollectionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.AddEntityIntoMetaCollectionResponse:
        """
        @summary 从集合中移除实体对象
        
        @param request: AddEntityIntoMetaCollectionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AddEntityIntoMetaCollectionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.meta_collection_id):
            query['MetaCollectionId'] = request.meta_collection_id
        if not UtilClient.is_unset(request.remark):
            query['Remark'] = request.remark
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='AddEntityIntoMetaCollection',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.AddEntityIntoMetaCollectionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def add_entity_into_meta_collection(
        self,
        request: dataworks_public_20240518_models.AddEntityIntoMetaCollectionRequest,
    ) -> dataworks_public_20240518_models.AddEntityIntoMetaCollectionResponse:
        """
        @summary 从集合中移除实体对象
        
        @param request: AddEntityIntoMetaCollectionRequest
        @return: AddEntityIntoMetaCollectionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.add_entity_into_meta_collection_with_options(request, runtime)

    async def add_entity_into_meta_collection_async(
        self,
        request: dataworks_public_20240518_models.AddEntityIntoMetaCollectionRequest,
    ) -> dataworks_public_20240518_models.AddEntityIntoMetaCollectionResponse:
        """
        @summary 从集合中移除实体对象
        
        @param request: AddEntityIntoMetaCollectionRequest
        @return: AddEntityIntoMetaCollectionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.add_entity_into_meta_collection_with_options_async(request, runtime)

    def associate_project_to_resource_group_with_options(
        self,
        request: dataworks_public_20240518_models.AssociateProjectToResourceGroupRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.AssociateProjectToResourceGroupResponse:
        """
        @summary Associates a resource group with a workspace.
        
        @description 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
        2.  Your account must be assigned one of the following roles of the desired workspace:
        Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
        
        @param request: AssociateProjectToResourceGroupRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AssociateProjectToResourceGroupResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.resource_group_id):
            body['ResourceGroupId'] = request.resource_group_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='AssociateProjectToResourceGroup',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.AssociateProjectToResourceGroupResponse(),
            self.call_api(params, req, runtime)
        )

    async def associate_project_to_resource_group_with_options_async(
        self,
        request: dataworks_public_20240518_models.AssociateProjectToResourceGroupRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.AssociateProjectToResourceGroupResponse:
        """
        @summary Associates a resource group with a workspace.
        
        @description 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
        2.  Your account must be assigned one of the following roles of the desired workspace:
        Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
        
        @param request: AssociateProjectToResourceGroupRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AssociateProjectToResourceGroupResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.resource_group_id):
            body['ResourceGroupId'] = request.resource_group_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='AssociateProjectToResourceGroup',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.AssociateProjectToResourceGroupResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def associate_project_to_resource_group(
        self,
        request: dataworks_public_20240518_models.AssociateProjectToResourceGroupRequest,
    ) -> dataworks_public_20240518_models.AssociateProjectToResourceGroupResponse:
        """
        @summary Associates a resource group with a workspace.
        
        @description 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
        2.  Your account must be assigned one of the following roles of the desired workspace:
        Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
        
        @param request: AssociateProjectToResourceGroupRequest
        @return: AssociateProjectToResourceGroupResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.associate_project_to_resource_group_with_options(request, runtime)

    async def associate_project_to_resource_group_async(
        self,
        request: dataworks_public_20240518_models.AssociateProjectToResourceGroupRequest,
    ) -> dataworks_public_20240518_models.AssociateProjectToResourceGroupResponse:
        """
        @summary Associates a resource group with a workspace.
        
        @description 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
        2.  Your account must be assigned one of the following roles of the desired workspace:
        Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
        
        @param request: AssociateProjectToResourceGroupRequest
        @return: AssociateProjectToResourceGroupResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.associate_project_to_resource_group_with_options_async(request, runtime)

    def attach_data_quality_rules_to_evaluation_task_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.AttachDataQualityRulesToEvaluationTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.AttachDataQualityRulesToEvaluationTaskResponse:
        """
        @summary Associates monitoring rules with a data quality monitoring task.
        
        @param tmp_req: AttachDataQualityRulesToEvaluationTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AttachDataQualityRulesToEvaluationTaskResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.AttachDataQualityRulesToEvaluationTaskShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.data_quality_rule_ids):
            request.data_quality_rule_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.data_quality_rule_ids, 'DataQualityRuleIds', 'json')
        body = {}
        if not UtilClient.is_unset(request.data_quality_evaluation_task_id):
            body['DataQualityEvaluationTaskId'] = request.data_quality_evaluation_task_id
        if not UtilClient.is_unset(request.data_quality_rule_ids_shrink):
            body['DataQualityRuleIds'] = request.data_quality_rule_ids_shrink
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='AttachDataQualityRulesToEvaluationTask',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.AttachDataQualityRulesToEvaluationTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def attach_data_quality_rules_to_evaluation_task_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.AttachDataQualityRulesToEvaluationTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.AttachDataQualityRulesToEvaluationTaskResponse:
        """
        @summary Associates monitoring rules with a data quality monitoring task.
        
        @param tmp_req: AttachDataQualityRulesToEvaluationTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: AttachDataQualityRulesToEvaluationTaskResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.AttachDataQualityRulesToEvaluationTaskShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.data_quality_rule_ids):
            request.data_quality_rule_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.data_quality_rule_ids, 'DataQualityRuleIds', 'json')
        body = {}
        if not UtilClient.is_unset(request.data_quality_evaluation_task_id):
            body['DataQualityEvaluationTaskId'] = request.data_quality_evaluation_task_id
        if not UtilClient.is_unset(request.data_quality_rule_ids_shrink):
            body['DataQualityRuleIds'] = request.data_quality_rule_ids_shrink
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='AttachDataQualityRulesToEvaluationTask',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.AttachDataQualityRulesToEvaluationTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def attach_data_quality_rules_to_evaluation_task(
        self,
        request: dataworks_public_20240518_models.AttachDataQualityRulesToEvaluationTaskRequest,
    ) -> dataworks_public_20240518_models.AttachDataQualityRulesToEvaluationTaskResponse:
        """
        @summary Associates monitoring rules with a data quality monitoring task.
        
        @param request: AttachDataQualityRulesToEvaluationTaskRequest
        @return: AttachDataQualityRulesToEvaluationTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.attach_data_quality_rules_to_evaluation_task_with_options(request, runtime)

    async def attach_data_quality_rules_to_evaluation_task_async(
        self,
        request: dataworks_public_20240518_models.AttachDataQualityRulesToEvaluationTaskRequest,
    ) -> dataworks_public_20240518_models.AttachDataQualityRulesToEvaluationTaskResponse:
        """
        @summary Associates monitoring rules with a data quality monitoring task.
        
        @param request: AttachDataQualityRulesToEvaluationTaskRequest
        @return: AttachDataQualityRulesToEvaluationTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.attach_data_quality_rules_to_evaluation_task_with_options_async(request, runtime)

    def batch_update_tasks_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.BatchUpdateTasksRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.BatchUpdateTasksResponse:
        """
        @summary Performs incremental updates on multiple tasks at a time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: BatchUpdateTasksRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: BatchUpdateTasksResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.BatchUpdateTasksShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.tasks):
            request.tasks_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tasks, 'Tasks', 'json')
        body = {}
        if not UtilClient.is_unset(request.comment):
            body['Comment'] = request.comment
        if not UtilClient.is_unset(request.tasks_shrink):
            body['Tasks'] = request.tasks_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='BatchUpdateTasks',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.BatchUpdateTasksResponse(),
            self.call_api(params, req, runtime)
        )

    async def batch_update_tasks_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.BatchUpdateTasksRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.BatchUpdateTasksResponse:
        """
        @summary Performs incremental updates on multiple tasks at a time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: BatchUpdateTasksRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: BatchUpdateTasksResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.BatchUpdateTasksShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.tasks):
            request.tasks_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tasks, 'Tasks', 'json')
        body = {}
        if not UtilClient.is_unset(request.comment):
            body['Comment'] = request.comment
        if not UtilClient.is_unset(request.tasks_shrink):
            body['Tasks'] = request.tasks_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='BatchUpdateTasks',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.BatchUpdateTasksResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def batch_update_tasks(
        self,
        request: dataworks_public_20240518_models.BatchUpdateTasksRequest,
    ) -> dataworks_public_20240518_models.BatchUpdateTasksResponse:
        """
        @summary Performs incremental updates on multiple tasks at a time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: BatchUpdateTasksRequest
        @return: BatchUpdateTasksResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.batch_update_tasks_with_options(request, runtime)

    async def batch_update_tasks_async(
        self,
        request: dataworks_public_20240518_models.BatchUpdateTasksRequest,
    ) -> dataworks_public_20240518_models.BatchUpdateTasksResponse:
        """
        @summary Performs incremental updates on multiple tasks at a time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: BatchUpdateTasksRequest
        @return: BatchUpdateTasksResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.batch_update_tasks_with_options_async(request, runtime)

    def clone_data_source_with_options(
        self,
        request: dataworks_public_20240518_models.CloneDataSourceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CloneDataSourceResponse:
        """
        @summary Clones an existing data source.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
        Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
        
        @param request: CloneDataSourceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CloneDataSourceResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.clone_data_source_name):
            query['CloneDataSourceName'] = request.clone_data_source_name
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CloneDataSource',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CloneDataSourceResponse(),
            self.call_api(params, req, runtime)
        )

    async def clone_data_source_with_options_async(
        self,
        request: dataworks_public_20240518_models.CloneDataSourceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CloneDataSourceResponse:
        """
        @summary Clones an existing data source.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
        Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
        
        @param request: CloneDataSourceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CloneDataSourceResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.clone_data_source_name):
            query['CloneDataSourceName'] = request.clone_data_source_name
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CloneDataSource',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CloneDataSourceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def clone_data_source(
        self,
        request: dataworks_public_20240518_models.CloneDataSourceRequest,
    ) -> dataworks_public_20240518_models.CloneDataSourceResponse:
        """
        @summary Clones an existing data source.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
        Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
        
        @param request: CloneDataSourceRequest
        @return: CloneDataSourceResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.clone_data_source_with_options(request, runtime)

    async def clone_data_source_async(
        self,
        request: dataworks_public_20240518_models.CloneDataSourceRequest,
    ) -> dataworks_public_20240518_models.CloneDataSourceResponse:
        """
        @summary Clones an existing data source.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
        Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
        
        @param request: CloneDataSourceRequest
        @return: CloneDataSourceResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.clone_data_source_with_options_async(request, runtime)

    def create_alert_rule_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.CreateAlertRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateAlertRuleResponse:
        """
        @summary Creates a custom monitoring alert rule.
        
        @param tmp_req: CreateAlertRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateAlertRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.CreateAlertRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.notification):
            request.notification_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.notification, 'Notification', 'json')
        if not UtilClient.is_unset(tmp_req.trigger_condition):
            request.trigger_condition_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.trigger_condition, 'TriggerCondition', 'json')
        query = {}
        if not UtilClient.is_unset(request.enabled):
            query['Enabled'] = request.enabled
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.notification_shrink):
            query['Notification'] = request.notification_shrink
        if not UtilClient.is_unset(request.owner):
            query['Owner'] = request.owner
        if not UtilClient.is_unset(request.trigger_condition_shrink):
            query['TriggerCondition'] = request.trigger_condition_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateAlertRule',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateAlertRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_alert_rule_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.CreateAlertRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateAlertRuleResponse:
        """
        @summary Creates a custom monitoring alert rule.
        
        @param tmp_req: CreateAlertRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateAlertRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.CreateAlertRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.notification):
            request.notification_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.notification, 'Notification', 'json')
        if not UtilClient.is_unset(tmp_req.trigger_condition):
            request.trigger_condition_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.trigger_condition, 'TriggerCondition', 'json')
        query = {}
        if not UtilClient.is_unset(request.enabled):
            query['Enabled'] = request.enabled
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.notification_shrink):
            query['Notification'] = request.notification_shrink
        if not UtilClient.is_unset(request.owner):
            query['Owner'] = request.owner
        if not UtilClient.is_unset(request.trigger_condition_shrink):
            query['TriggerCondition'] = request.trigger_condition_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateAlertRule',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateAlertRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_alert_rule(
        self,
        request: dataworks_public_20240518_models.CreateAlertRuleRequest,
    ) -> dataworks_public_20240518_models.CreateAlertRuleResponse:
        """
        @summary Creates a custom monitoring alert rule.
        
        @param request: CreateAlertRuleRequest
        @return: CreateAlertRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_alert_rule_with_options(request, runtime)

    async def create_alert_rule_async(
        self,
        request: dataworks_public_20240518_models.CreateAlertRuleRequest,
    ) -> dataworks_public_20240518_models.CreateAlertRuleResponse:
        """
        @summary Creates a custom monitoring alert rule.
        
        @param request: CreateAlertRuleRequest
        @return: CreateAlertRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_alert_rule_with_options_async(request, runtime)

    def create_business_with_options(
        self,
        request: dataworks_public_20240518_models.CreateBusinessRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateBusinessResponse:
        """
        @param request: CreateBusinessRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateBusinessResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.business_name):
            body['BusinessName'] = request.business_name
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.owner):
            body['Owner'] = request.owner
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        if not UtilClient.is_unset(request.use_type):
            body['UseType'] = request.use_type
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateBusiness',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateBusinessResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_business_with_options_async(
        self,
        request: dataworks_public_20240518_models.CreateBusinessRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateBusinessResponse:
        """
        @param request: CreateBusinessRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateBusinessResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.business_name):
            body['BusinessName'] = request.business_name
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.owner):
            body['Owner'] = request.owner
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        if not UtilClient.is_unset(request.use_type):
            body['UseType'] = request.use_type
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateBusiness',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateBusinessResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_business(
        self,
        request: dataworks_public_20240518_models.CreateBusinessRequest,
    ) -> dataworks_public_20240518_models.CreateBusinessResponse:
        """
        @param request: CreateBusinessRequest
        @return: CreateBusinessResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_business_with_options(request, runtime)

    async def create_business_async(
        self,
        request: dataworks_public_20240518_models.CreateBusinessRequest,
    ) -> dataworks_public_20240518_models.CreateBusinessResponse:
        """
        @param request: CreateBusinessRequest
        @return: CreateBusinessResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_business_with_options_async(request, runtime)

    def create_dialarm_rule_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.CreateDIAlarmRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateDIAlarmRuleResponse:
        """
        @summary Creates an alert rule for a synchronization task.
        
        @param tmp_req: CreateDIAlarmRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateDIAlarmRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.CreateDIAlarmRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.notification_settings):
            request.notification_settings_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.notification_settings, 'NotificationSettings', 'json')
        if not UtilClient.is_unset(tmp_req.trigger_conditions):
            request.trigger_conditions_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.trigger_conditions, 'TriggerConditions', 'json')
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateDIAlarmRule',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateDIAlarmRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_dialarm_rule_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.CreateDIAlarmRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateDIAlarmRuleResponse:
        """
        @summary Creates an alert rule for a synchronization task.
        
        @param tmp_req: CreateDIAlarmRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateDIAlarmRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.CreateDIAlarmRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.notification_settings):
            request.notification_settings_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.notification_settings, 'NotificationSettings', 'json')
        if not UtilClient.is_unset(tmp_req.trigger_conditions):
            request.trigger_conditions_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.trigger_conditions, 'TriggerConditions', 'json')
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateDIAlarmRule',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateDIAlarmRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_dialarm_rule(
        self,
        request: dataworks_public_20240518_models.CreateDIAlarmRuleRequest,
    ) -> dataworks_public_20240518_models.CreateDIAlarmRuleResponse:
        """
        @summary Creates an alert rule for a synchronization task.
        
        @param request: CreateDIAlarmRuleRequest
        @return: CreateDIAlarmRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_dialarm_rule_with_options(request, runtime)

    async def create_dialarm_rule_async(
        self,
        request: dataworks_public_20240518_models.CreateDIAlarmRuleRequest,
    ) -> dataworks_public_20240518_models.CreateDIAlarmRuleResponse:
        """
        @summary Creates an alert rule for a synchronization task.
        
        @param request: CreateDIAlarmRuleRequest
        @return: CreateDIAlarmRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_dialarm_rule_with_options_async(request, runtime)

    def create_dijob_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.CreateDIJobRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateDIJobResponse:
        """
        @summary Creates a new-version synchronization task.
        
        @description    This API operation is available for all DataWorks editions.
        You can call this API operation to create a synchronization task. When you call this API operation, you must configure parameters such as SourceDataSourceSettings, DestinationDataSourceSettings, MigrationType, TransformationRules, TableMappings, and JobSettings. The SourceDataSourceSettings parameter defines the settings related to the source. The DestinationDataSourceSettings parameter defines the settings related to the destination. The MigrationType parameter defines the synchronization task type. The TransformationRules parameter defines the transformation rules for objects involved in the synchronization task. The TableMappings parameter defines the mappings between rules used to select synchronization objects in the source and transformation rules applied to the selected synchronization objects. The JobSettings parameter defines the settings for the dimension of the synchronization task, including policies for data type mappings between source fields and destination fields and settings for periodic scheduling.
        
        @param tmp_req: CreateDIJobRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateDIJobResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.CreateDIJobShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.destination_data_source_settings):
            request.destination_data_source_settings_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.destination_data_source_settings, 'DestinationDataSourceSettings', 'json')
        if not UtilClient.is_unset(tmp_req.job_settings):
            request.job_settings_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.job_settings, 'JobSettings', 'json')
        if not UtilClient.is_unset(tmp_req.resource_settings):
            request.resource_settings_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.resource_settings, 'ResourceSettings', 'json')
        if not UtilClient.is_unset(tmp_req.source_data_source_settings):
            request.source_data_source_settings_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.source_data_source_settings, 'SourceDataSourceSettings', 'json')
        if not UtilClient.is_unset(tmp_req.table_mappings):
            request.table_mappings_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.table_mappings, 'TableMappings', 'json')
        if not UtilClient.is_unset(tmp_req.transformation_rules):
            request.transformation_rules_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.transformation_rules, 'TransformationRules', 'json')
        query = {}
        if not UtilClient.is_unset(request.destination_data_source_type):
            query['DestinationDataSourceType'] = request.destination_data_source_type
        if not UtilClient.is_unset(request.job_name):
            query['JobName'] = request.job_name
        if not UtilClient.is_unset(request.job_type):
            query['JobType'] = request.job_type
        if not UtilClient.is_unset(request.migration_type):
            query['MigrationType'] = request.migration_type
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.source_data_source_type):
            query['SourceDataSourceType'] = request.source_data_source_type
        body = {}
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.destination_data_source_settings_shrink):
            body['DestinationDataSourceSettings'] = request.destination_data_source_settings_shrink
        if not UtilClient.is_unset(request.job_settings_shrink):
            body['JobSettings'] = request.job_settings_shrink
        if not UtilClient.is_unset(request.resource_settings_shrink):
            body['ResourceSettings'] = request.resource_settings_shrink
        if not UtilClient.is_unset(request.source_data_source_settings_shrink):
            body['SourceDataSourceSettings'] = request.source_data_source_settings_shrink
        if not UtilClient.is_unset(request.table_mappings_shrink):
            body['TableMappings'] = request.table_mappings_shrink
        if not UtilClient.is_unset(request.transformation_rules_shrink):
            body['TransformationRules'] = request.transformation_rules_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateDIJob',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateDIJobResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_dijob_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.CreateDIJobRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateDIJobResponse:
        """
        @summary Creates a new-version synchronization task.
        
        @description    This API operation is available for all DataWorks editions.
        You can call this API operation to create a synchronization task. When you call this API operation, you must configure parameters such as SourceDataSourceSettings, DestinationDataSourceSettings, MigrationType, TransformationRules, TableMappings, and JobSettings. The SourceDataSourceSettings parameter defines the settings related to the source. The DestinationDataSourceSettings parameter defines the settings related to the destination. The MigrationType parameter defines the synchronization task type. The TransformationRules parameter defines the transformation rules for objects involved in the synchronization task. The TableMappings parameter defines the mappings between rules used to select synchronization objects in the source and transformation rules applied to the selected synchronization objects. The JobSettings parameter defines the settings for the dimension of the synchronization task, including policies for data type mappings between source fields and destination fields and settings for periodic scheduling.
        
        @param tmp_req: CreateDIJobRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateDIJobResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.CreateDIJobShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.destination_data_source_settings):
            request.destination_data_source_settings_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.destination_data_source_settings, 'DestinationDataSourceSettings', 'json')
        if not UtilClient.is_unset(tmp_req.job_settings):
            request.job_settings_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.job_settings, 'JobSettings', 'json')
        if not UtilClient.is_unset(tmp_req.resource_settings):
            request.resource_settings_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.resource_settings, 'ResourceSettings', 'json')
        if not UtilClient.is_unset(tmp_req.source_data_source_settings):
            request.source_data_source_settings_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.source_data_source_settings, 'SourceDataSourceSettings', 'json')
        if not UtilClient.is_unset(tmp_req.table_mappings):
            request.table_mappings_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.table_mappings, 'TableMappings', 'json')
        if not UtilClient.is_unset(tmp_req.transformation_rules):
            request.transformation_rules_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.transformation_rules, 'TransformationRules', 'json')
        query = {}
        if not UtilClient.is_unset(request.destination_data_source_type):
            query['DestinationDataSourceType'] = request.destination_data_source_type
        if not UtilClient.is_unset(request.job_name):
            query['JobName'] = request.job_name
        if not UtilClient.is_unset(request.job_type):
            query['JobType'] = request.job_type
        if not UtilClient.is_unset(request.migration_type):
            query['MigrationType'] = request.migration_type
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.source_data_source_type):
            query['SourceDataSourceType'] = request.source_data_source_type
        body = {}
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.destination_data_source_settings_shrink):
            body['DestinationDataSourceSettings'] = request.destination_data_source_settings_shrink
        if not UtilClient.is_unset(request.job_settings_shrink):
            body['JobSettings'] = request.job_settings_shrink
        if not UtilClient.is_unset(request.resource_settings_shrink):
            body['ResourceSettings'] = request.resource_settings_shrink
        if not UtilClient.is_unset(request.source_data_source_settings_shrink):
            body['SourceDataSourceSettings'] = request.source_data_source_settings_shrink
        if not UtilClient.is_unset(request.table_mappings_shrink):
            body['TableMappings'] = request.table_mappings_shrink
        if not UtilClient.is_unset(request.transformation_rules_shrink):
            body['TransformationRules'] = request.transformation_rules_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateDIJob',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateDIJobResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_dijob(
        self,
        request: dataworks_public_20240518_models.CreateDIJobRequest,
    ) -> dataworks_public_20240518_models.CreateDIJobResponse:
        """
        @summary Creates a new-version synchronization task.
        
        @description    This API operation is available for all DataWorks editions.
        You can call this API operation to create a synchronization task. When you call this API operation, you must configure parameters such as SourceDataSourceSettings, DestinationDataSourceSettings, MigrationType, TransformationRules, TableMappings, and JobSettings. The SourceDataSourceSettings parameter defines the settings related to the source. The DestinationDataSourceSettings parameter defines the settings related to the destination. The MigrationType parameter defines the synchronization task type. The TransformationRules parameter defines the transformation rules for objects involved in the synchronization task. The TableMappings parameter defines the mappings between rules used to select synchronization objects in the source and transformation rules applied to the selected synchronization objects. The JobSettings parameter defines the settings for the dimension of the synchronization task, including policies for data type mappings between source fields and destination fields and settings for periodic scheduling.
        
        @param request: CreateDIJobRequest
        @return: CreateDIJobResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_dijob_with_options(request, runtime)

    async def create_dijob_async(
        self,
        request: dataworks_public_20240518_models.CreateDIJobRequest,
    ) -> dataworks_public_20240518_models.CreateDIJobResponse:
        """
        @summary Creates a new-version synchronization task.
        
        @description    This API operation is available for all DataWorks editions.
        You can call this API operation to create a synchronization task. When you call this API operation, you must configure parameters such as SourceDataSourceSettings, DestinationDataSourceSettings, MigrationType, TransformationRules, TableMappings, and JobSettings. The SourceDataSourceSettings parameter defines the settings related to the source. The DestinationDataSourceSettings parameter defines the settings related to the destination. The MigrationType parameter defines the synchronization task type. The TransformationRules parameter defines the transformation rules for objects involved in the synchronization task. The TableMappings parameter defines the mappings between rules used to select synchronization objects in the source and transformation rules applied to the selected synchronization objects. The JobSettings parameter defines the settings for the dimension of the synchronization task, including policies for data type mappings between source fields and destination fields and settings for periodic scheduling.
        
        @param request: CreateDIJobRequest
        @return: CreateDIJobResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_dijob_with_options_async(request, runtime)

    def create_data_asset_tag_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.CreateDataAssetTagRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateDataAssetTagResponse:
        """
        @summary Creates a tag.
        
        @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
        
        @param tmp_req: CreateDataAssetTagRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateDataAssetTagResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.CreateDataAssetTagShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.managers):
            request.managers_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.managers, 'Managers', 'json')
        if not UtilClient.is_unset(tmp_req.values):
            request.values_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.values, 'Values', 'json')
        query = {}
        if not UtilClient.is_unset(request.description):
            query['Description'] = request.description
        if not UtilClient.is_unset(request.key):
            query['Key'] = request.key
        if not UtilClient.is_unset(request.managers_shrink):
            query['Managers'] = request.managers_shrink
        if not UtilClient.is_unset(request.value_type):
            query['ValueType'] = request.value_type
        if not UtilClient.is_unset(request.values_shrink):
            query['Values'] = request.values_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateDataAssetTag',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateDataAssetTagResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_data_asset_tag_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.CreateDataAssetTagRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateDataAssetTagResponse:
        """
        @summary Creates a tag.
        
        @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
        
        @param tmp_req: CreateDataAssetTagRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateDataAssetTagResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.CreateDataAssetTagShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.managers):
            request.managers_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.managers, 'Managers', 'json')
        if not UtilClient.is_unset(tmp_req.values):
            request.values_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.values, 'Values', 'json')
        query = {}
        if not UtilClient.is_unset(request.description):
            query['Description'] = request.description
        if not UtilClient.is_unset(request.key):
            query['Key'] = request.key
        if not UtilClient.is_unset(request.managers_shrink):
            query['Managers'] = request.managers_shrink
        if not UtilClient.is_unset(request.value_type):
            query['ValueType'] = request.value_type
        if not UtilClient.is_unset(request.values_shrink):
            query['Values'] = request.values_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateDataAssetTag',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateDataAssetTagResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_data_asset_tag(
        self,
        request: dataworks_public_20240518_models.CreateDataAssetTagRequest,
    ) -> dataworks_public_20240518_models.CreateDataAssetTagResponse:
        """
        @summary Creates a tag.
        
        @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
        
        @param request: CreateDataAssetTagRequest
        @return: CreateDataAssetTagResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_data_asset_tag_with_options(request, runtime)

    async def create_data_asset_tag_async(
        self,
        request: dataworks_public_20240518_models.CreateDataAssetTagRequest,
    ) -> dataworks_public_20240518_models.CreateDataAssetTagResponse:
        """
        @summary Creates a tag.
        
        @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
        
        @param request: CreateDataAssetTagRequest
        @return: CreateDataAssetTagResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_data_asset_tag_with_options_async(request, runtime)

    def create_data_quality_alert_rule_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.CreateDataQualityAlertRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateDataQualityAlertRuleResponse:
        """
        @summary 创建数据质量告警规则
        
        @param tmp_req: CreateDataQualityAlertRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateDataQualityAlertRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.CreateDataQualityAlertRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.notification):
            request.notification_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.notification, 'Notification', 'json')
        if not UtilClient.is_unset(tmp_req.target):
            request.target_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.target, 'Target', 'json')
        body = {}
        if not UtilClient.is_unset(request.condition):
            body['Condition'] = request.condition
        if not UtilClient.is_unset(request.notification_shrink):
            body['Notification'] = request.notification_shrink
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.target_shrink):
            body['Target'] = request.target_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateDataQualityAlertRule',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateDataQualityAlertRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_data_quality_alert_rule_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.CreateDataQualityAlertRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateDataQualityAlertRuleResponse:
        """
        @summary 创建数据质量告警规则
        
        @param tmp_req: CreateDataQualityAlertRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateDataQualityAlertRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.CreateDataQualityAlertRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.notification):
            request.notification_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.notification, 'Notification', 'json')
        if not UtilClient.is_unset(tmp_req.target):
            request.target_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.target, 'Target', 'json')
        body = {}
        if not UtilClient.is_unset(request.condition):
            body['Condition'] = request.condition
        if not UtilClient.is_unset(request.notification_shrink):
            body['Notification'] = request.notification_shrink
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.target_shrink):
            body['Target'] = request.target_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateDataQualityAlertRule',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateDataQualityAlertRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_data_quality_alert_rule(
        self,
        request: dataworks_public_20240518_models.CreateDataQualityAlertRuleRequest,
    ) -> dataworks_public_20240518_models.CreateDataQualityAlertRuleResponse:
        """
        @summary 创建数据质量告警规则
        
        @param request: CreateDataQualityAlertRuleRequest
        @return: CreateDataQualityAlertRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_data_quality_alert_rule_with_options(request, runtime)

    async def create_data_quality_alert_rule_async(
        self,
        request: dataworks_public_20240518_models.CreateDataQualityAlertRuleRequest,
    ) -> dataworks_public_20240518_models.CreateDataQualityAlertRuleResponse:
        """
        @summary 创建数据质量告警规则
        
        @param request: CreateDataQualityAlertRuleRequest
        @return: CreateDataQualityAlertRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_data_quality_alert_rule_with_options_async(request, runtime)

    def create_data_quality_evaluation_task_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.CreateDataQualityEvaluationTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateDataQualityEvaluationTaskResponse:
        """
        @summary Creates a monitor in DataWorks Data Quality.
        
        @description This API operation is supported in all DataWorks editions.
        
        @param tmp_req: CreateDataQualityEvaluationTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateDataQualityEvaluationTaskResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.CreateDataQualityEvaluationTaskShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.data_quality_rules):
            request.data_quality_rules_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.data_quality_rules, 'DataQualityRules', 'json')
        if not UtilClient.is_unset(tmp_req.hooks):
            request.hooks_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.hooks, 'Hooks', 'json')
        if not UtilClient.is_unset(tmp_req.notifications):
            request.notifications_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.notifications, 'Notifications', 'json')
        if not UtilClient.is_unset(tmp_req.target):
            request.target_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.target, 'Target', 'json')
        if not UtilClient.is_unset(tmp_req.trigger):
            request.trigger_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.trigger, 'Trigger', 'json')
        body = {}
        if not UtilClient.is_unset(request.data_quality_rules_shrink):
            body['DataQualityRules'] = request.data_quality_rules_shrink
        if not UtilClient.is_unset(request.data_source_id):
            body['DataSourceId'] = request.data_source_id
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.hooks_shrink):
            body['Hooks'] = request.hooks_shrink
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.notifications_shrink):
            body['Notifications'] = request.notifications_shrink
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.runtime_conf):
            body['RuntimeConf'] = request.runtime_conf
        if not UtilClient.is_unset(request.target_shrink):
            body['Target'] = request.target_shrink
        if not UtilClient.is_unset(request.trigger_shrink):
            body['Trigger'] = request.trigger_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateDataQualityEvaluationTask',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateDataQualityEvaluationTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_data_quality_evaluation_task_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.CreateDataQualityEvaluationTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateDataQualityEvaluationTaskResponse:
        """
        @summary Creates a monitor in DataWorks Data Quality.
        
        @description This API operation is supported in all DataWorks editions.
        
        @param tmp_req: CreateDataQualityEvaluationTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateDataQualityEvaluationTaskResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.CreateDataQualityEvaluationTaskShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.data_quality_rules):
            request.data_quality_rules_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.data_quality_rules, 'DataQualityRules', 'json')
        if not UtilClient.is_unset(tmp_req.hooks):
            request.hooks_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.hooks, 'Hooks', 'json')
        if not UtilClient.is_unset(tmp_req.notifications):
            request.notifications_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.notifications, 'Notifications', 'json')
        if not UtilClient.is_unset(tmp_req.target):
            request.target_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.target, 'Target', 'json')
        if not UtilClient.is_unset(tmp_req.trigger):
            request.trigger_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.trigger, 'Trigger', 'json')
        body = {}
        if not UtilClient.is_unset(request.data_quality_rules_shrink):
            body['DataQualityRules'] = request.data_quality_rules_shrink
        if not UtilClient.is_unset(request.data_source_id):
            body['DataSourceId'] = request.data_source_id
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.hooks_shrink):
            body['Hooks'] = request.hooks_shrink
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.notifications_shrink):
            body['Notifications'] = request.notifications_shrink
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.runtime_conf):
            body['RuntimeConf'] = request.runtime_conf
        if not UtilClient.is_unset(request.target_shrink):
            body['Target'] = request.target_shrink
        if not UtilClient.is_unset(request.trigger_shrink):
            body['Trigger'] = request.trigger_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateDataQualityEvaluationTask',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateDataQualityEvaluationTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_data_quality_evaluation_task(
        self,
        request: dataworks_public_20240518_models.CreateDataQualityEvaluationTaskRequest,
    ) -> dataworks_public_20240518_models.CreateDataQualityEvaluationTaskResponse:
        """
        @summary Creates a monitor in DataWorks Data Quality.
        
        @description This API operation is supported in all DataWorks editions.
        
        @param request: CreateDataQualityEvaluationTaskRequest
        @return: CreateDataQualityEvaluationTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_data_quality_evaluation_task_with_options(request, runtime)

    async def create_data_quality_evaluation_task_async(
        self,
        request: dataworks_public_20240518_models.CreateDataQualityEvaluationTaskRequest,
    ) -> dataworks_public_20240518_models.CreateDataQualityEvaluationTaskResponse:
        """
        @summary Creates a monitor in DataWorks Data Quality.
        
        @description This API operation is supported in all DataWorks editions.
        
        @param request: CreateDataQualityEvaluationTaskRequest
        @return: CreateDataQualityEvaluationTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_data_quality_evaluation_task_with_options_async(request, runtime)

    def create_data_quality_evaluation_task_instance_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.CreateDataQualityEvaluationTaskInstanceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateDataQualityEvaluationTaskInstanceResponse:
        """
        @summary Creates a monitor instance.
        
        @param tmp_req: CreateDataQualityEvaluationTaskInstanceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateDataQualityEvaluationTaskInstanceResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.CreateDataQualityEvaluationTaskInstanceShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.runtime_resource):
            request.runtime_resource_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.runtime_resource, 'RuntimeResource', 'json')
        body = {}
        if not UtilClient.is_unset(request.data_quality_evaluation_task_id):
            body['DataQualityEvaluationTaskId'] = request.data_quality_evaluation_task_id
        if not UtilClient.is_unset(request.parameters):
            body['Parameters'] = request.parameters
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.runtime_resource_shrink):
            body['RuntimeResource'] = request.runtime_resource_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateDataQualityEvaluationTaskInstance',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateDataQualityEvaluationTaskInstanceResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_data_quality_evaluation_task_instance_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.CreateDataQualityEvaluationTaskInstanceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateDataQualityEvaluationTaskInstanceResponse:
        """
        @summary Creates a monitor instance.
        
        @param tmp_req: CreateDataQualityEvaluationTaskInstanceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateDataQualityEvaluationTaskInstanceResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.CreateDataQualityEvaluationTaskInstanceShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.runtime_resource):
            request.runtime_resource_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.runtime_resource, 'RuntimeResource', 'json')
        body = {}
        if not UtilClient.is_unset(request.data_quality_evaluation_task_id):
            body['DataQualityEvaluationTaskId'] = request.data_quality_evaluation_task_id
        if not UtilClient.is_unset(request.parameters):
            body['Parameters'] = request.parameters
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.runtime_resource_shrink):
            body['RuntimeResource'] = request.runtime_resource_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateDataQualityEvaluationTaskInstance',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateDataQualityEvaluationTaskInstanceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_data_quality_evaluation_task_instance(
        self,
        request: dataworks_public_20240518_models.CreateDataQualityEvaluationTaskInstanceRequest,
    ) -> dataworks_public_20240518_models.CreateDataQualityEvaluationTaskInstanceResponse:
        """
        @summary Creates a monitor instance.
        
        @param request: CreateDataQualityEvaluationTaskInstanceRequest
        @return: CreateDataQualityEvaluationTaskInstanceResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_data_quality_evaluation_task_instance_with_options(request, runtime)

    async def create_data_quality_evaluation_task_instance_async(
        self,
        request: dataworks_public_20240518_models.CreateDataQualityEvaluationTaskInstanceRequest,
    ) -> dataworks_public_20240518_models.CreateDataQualityEvaluationTaskInstanceResponse:
        """
        @summary Creates a monitor instance.
        
        @param request: CreateDataQualityEvaluationTaskInstanceRequest
        @return: CreateDataQualityEvaluationTaskInstanceResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_data_quality_evaluation_task_instance_with_options_async(request, runtime)

    def create_data_quality_rule_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.CreateDataQualityRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateDataQualityRuleResponse:
        """
        @summary Creates a data quality monitoring rule.
        
        @param tmp_req: CreateDataQualityRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateDataQualityRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.CreateDataQualityRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.checking_config):
            request.checking_config_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.checking_config, 'CheckingConfig', 'json')
        if not UtilClient.is_unset(tmp_req.error_handlers):
            request.error_handlers_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.error_handlers, 'ErrorHandlers', 'json')
        if not UtilClient.is_unset(tmp_req.sampling_config):
            request.sampling_config_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.sampling_config, 'SamplingConfig', 'json')
        if not UtilClient.is_unset(tmp_req.target):
            request.target_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.target, 'Target', 'json')
        body = {}
        if not UtilClient.is_unset(request.checking_config_shrink):
            body['CheckingConfig'] = request.checking_config_shrink
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.enabled):
            body['Enabled'] = request.enabled
        if not UtilClient.is_unset(request.error_handlers_shrink):
            body['ErrorHandlers'] = request.error_handlers_shrink
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.sampling_config_shrink):
            body['SamplingConfig'] = request.sampling_config_shrink
        if not UtilClient.is_unset(request.severity):
            body['Severity'] = request.severity
        if not UtilClient.is_unset(request.target_shrink):
            body['Target'] = request.target_shrink
        if not UtilClient.is_unset(request.template_code):
            body['TemplateCode'] = request.template_code
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateDataQualityRule',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateDataQualityRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_data_quality_rule_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.CreateDataQualityRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateDataQualityRuleResponse:
        """
        @summary Creates a data quality monitoring rule.
        
        @param tmp_req: CreateDataQualityRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateDataQualityRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.CreateDataQualityRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.checking_config):
            request.checking_config_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.checking_config, 'CheckingConfig', 'json')
        if not UtilClient.is_unset(tmp_req.error_handlers):
            request.error_handlers_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.error_handlers, 'ErrorHandlers', 'json')
        if not UtilClient.is_unset(tmp_req.sampling_config):
            request.sampling_config_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.sampling_config, 'SamplingConfig', 'json')
        if not UtilClient.is_unset(tmp_req.target):
            request.target_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.target, 'Target', 'json')
        body = {}
        if not UtilClient.is_unset(request.checking_config_shrink):
            body['CheckingConfig'] = request.checking_config_shrink
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.enabled):
            body['Enabled'] = request.enabled
        if not UtilClient.is_unset(request.error_handlers_shrink):
            body['ErrorHandlers'] = request.error_handlers_shrink
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.sampling_config_shrink):
            body['SamplingConfig'] = request.sampling_config_shrink
        if not UtilClient.is_unset(request.severity):
            body['Severity'] = request.severity
        if not UtilClient.is_unset(request.target_shrink):
            body['Target'] = request.target_shrink
        if not UtilClient.is_unset(request.template_code):
            body['TemplateCode'] = request.template_code
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateDataQualityRule',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateDataQualityRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_data_quality_rule(
        self,
        request: dataworks_public_20240518_models.CreateDataQualityRuleRequest,
    ) -> dataworks_public_20240518_models.CreateDataQualityRuleResponse:
        """
        @summary Creates a data quality monitoring rule.
        
        @param request: CreateDataQualityRuleRequest
        @return: CreateDataQualityRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_data_quality_rule_with_options(request, runtime)

    async def create_data_quality_rule_async(
        self,
        request: dataworks_public_20240518_models.CreateDataQualityRuleRequest,
    ) -> dataworks_public_20240518_models.CreateDataQualityRuleResponse:
        """
        @summary Creates a data quality monitoring rule.
        
        @param request: CreateDataQualityRuleRequest
        @return: CreateDataQualityRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_data_quality_rule_with_options_async(request, runtime)

    def create_data_quality_rule_template_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.CreateDataQualityRuleTemplateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateDataQualityRuleTemplateResponse:
        """
        @summary Creates a data quality monitoring rule template.
        
        @param tmp_req: CreateDataQualityRuleTemplateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateDataQualityRuleTemplateResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.CreateDataQualityRuleTemplateShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.checking_config):
            request.checking_config_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.checking_config, 'CheckingConfig', 'json')
        if not UtilClient.is_unset(tmp_req.sampling_config):
            request.sampling_config_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.sampling_config, 'SamplingConfig', 'json')
        body = {}
        if not UtilClient.is_unset(request.checking_config_shrink):
            body['CheckingConfig'] = request.checking_config_shrink
        if not UtilClient.is_unset(request.directory_path):
            body['DirectoryPath'] = request.directory_path
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.sampling_config_shrink):
            body['SamplingConfig'] = request.sampling_config_shrink
        if not UtilClient.is_unset(request.visible_scope):
            body['VisibleScope'] = request.visible_scope
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateDataQualityRuleTemplate',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateDataQualityRuleTemplateResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_data_quality_rule_template_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.CreateDataQualityRuleTemplateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateDataQualityRuleTemplateResponse:
        """
        @summary Creates a data quality monitoring rule template.
        
        @param tmp_req: CreateDataQualityRuleTemplateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateDataQualityRuleTemplateResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.CreateDataQualityRuleTemplateShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.checking_config):
            request.checking_config_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.checking_config, 'CheckingConfig', 'json')
        if not UtilClient.is_unset(tmp_req.sampling_config):
            request.sampling_config_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.sampling_config, 'SamplingConfig', 'json')
        body = {}
        if not UtilClient.is_unset(request.checking_config_shrink):
            body['CheckingConfig'] = request.checking_config_shrink
        if not UtilClient.is_unset(request.directory_path):
            body['DirectoryPath'] = request.directory_path
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.sampling_config_shrink):
            body['SamplingConfig'] = request.sampling_config_shrink
        if not UtilClient.is_unset(request.visible_scope):
            body['VisibleScope'] = request.visible_scope
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateDataQualityRuleTemplate',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateDataQualityRuleTemplateResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_data_quality_rule_template(
        self,
        request: dataworks_public_20240518_models.CreateDataQualityRuleTemplateRequest,
    ) -> dataworks_public_20240518_models.CreateDataQualityRuleTemplateResponse:
        """
        @summary Creates a data quality monitoring rule template.
        
        @param request: CreateDataQualityRuleTemplateRequest
        @return: CreateDataQualityRuleTemplateResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_data_quality_rule_template_with_options(request, runtime)

    async def create_data_quality_rule_template_async(
        self,
        request: dataworks_public_20240518_models.CreateDataQualityRuleTemplateRequest,
    ) -> dataworks_public_20240518_models.CreateDataQualityRuleTemplateResponse:
        """
        @summary Creates a data quality monitoring rule template.
        
        @param request: CreateDataQualityRuleTemplateRequest
        @return: CreateDataQualityRuleTemplateResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_data_quality_rule_template_with_options_async(request, runtime)

    def create_data_quality_scan_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.CreateDataQualityScanRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateDataQualityScanResponse:
        """
        @summary 创建数据质量监控
        
        @param tmp_req: CreateDataQualityScanRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateDataQualityScanResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.CreateDataQualityScanShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.compute_resource):
            request.compute_resource_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.compute_resource, 'ComputeResource', 'json')
        if not UtilClient.is_unset(tmp_req.hooks):
            request.hooks_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.hooks, 'Hooks', 'json')
        if not UtilClient.is_unset(tmp_req.parameters):
            request.parameters_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.parameters, 'Parameters', 'json')
        if not UtilClient.is_unset(tmp_req.runtime_resource):
            request.runtime_resource_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.runtime_resource, 'RuntimeResource', 'json')
        if not UtilClient.is_unset(tmp_req.trigger):
            request.trigger_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.trigger, 'Trigger', 'json')
        body = {}
        if not UtilClient.is_unset(request.client_token):
            body['ClientToken'] = request.client_token
        if not UtilClient.is_unset(request.compute_resource_shrink):
            body['ComputeResource'] = request.compute_resource_shrink
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.hooks_shrink):
            body['Hooks'] = request.hooks_shrink
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.owner):
            body['Owner'] = request.owner
        if not UtilClient.is_unset(request.parameters_shrink):
            body['Parameters'] = request.parameters_shrink
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.runtime_resource_shrink):
            body['RuntimeResource'] = request.runtime_resource_shrink
        if not UtilClient.is_unset(request.spec):
            body['Spec'] = request.spec
        if not UtilClient.is_unset(request.trigger_shrink):
            body['Trigger'] = request.trigger_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateDataQualityScan',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateDataQualityScanResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_data_quality_scan_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.CreateDataQualityScanRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateDataQualityScanResponse:
        """
        @summary 创建数据质量监控
        
        @param tmp_req: CreateDataQualityScanRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateDataQualityScanResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.CreateDataQualityScanShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.compute_resource):
            request.compute_resource_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.compute_resource, 'ComputeResource', 'json')
        if not UtilClient.is_unset(tmp_req.hooks):
            request.hooks_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.hooks, 'Hooks', 'json')
        if not UtilClient.is_unset(tmp_req.parameters):
            request.parameters_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.parameters, 'Parameters', 'json')
        if not UtilClient.is_unset(tmp_req.runtime_resource):
            request.runtime_resource_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.runtime_resource, 'RuntimeResource', 'json')
        if not UtilClient.is_unset(tmp_req.trigger):
            request.trigger_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.trigger, 'Trigger', 'json')
        body = {}
        if not UtilClient.is_unset(request.client_token):
            body['ClientToken'] = request.client_token
        if not UtilClient.is_unset(request.compute_resource_shrink):
            body['ComputeResource'] = request.compute_resource_shrink
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.hooks_shrink):
            body['Hooks'] = request.hooks_shrink
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.owner):
            body['Owner'] = request.owner
        if not UtilClient.is_unset(request.parameters_shrink):
            body['Parameters'] = request.parameters_shrink
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.runtime_resource_shrink):
            body['RuntimeResource'] = request.runtime_resource_shrink
        if not UtilClient.is_unset(request.spec):
            body['Spec'] = request.spec
        if not UtilClient.is_unset(request.trigger_shrink):
            body['Trigger'] = request.trigger_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateDataQualityScan',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateDataQualityScanResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_data_quality_scan(
        self,
        request: dataworks_public_20240518_models.CreateDataQualityScanRequest,
    ) -> dataworks_public_20240518_models.CreateDataQualityScanResponse:
        """
        @summary 创建数据质量监控
        
        @param request: CreateDataQualityScanRequest
        @return: CreateDataQualityScanResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_data_quality_scan_with_options(request, runtime)

    async def create_data_quality_scan_async(
        self,
        request: dataworks_public_20240518_models.CreateDataQualityScanRequest,
    ) -> dataworks_public_20240518_models.CreateDataQualityScanResponse:
        """
        @summary 创建数据质量监控
        
        @param request: CreateDataQualityScanRequest
        @return: CreateDataQualityScanResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_data_quality_scan_with_options_async(request, runtime)

    def create_data_quality_scan_run_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.CreateDataQualityScanRunRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateDataQualityScanRunResponse:
        """
        @summary 创建数据质量监控运行实例
        
        @param tmp_req: CreateDataQualityScanRunRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateDataQualityScanRunResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.CreateDataQualityScanRunShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.parameters):
            request.parameters_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.parameters, 'Parameters', 'json')
        if not UtilClient.is_unset(tmp_req.runtime_resource):
            request.runtime_resource_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.runtime_resource, 'RuntimeResource', 'json')
        body = {}
        if not UtilClient.is_unset(request.data_quality_scan_id):
            body['DataQualityScanId'] = request.data_quality_scan_id
        if not UtilClient.is_unset(request.parameters_shrink):
            body['Parameters'] = request.parameters_shrink
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.runtime_resource_shrink):
            body['RuntimeResource'] = request.runtime_resource_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateDataQualityScanRun',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateDataQualityScanRunResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_data_quality_scan_run_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.CreateDataQualityScanRunRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateDataQualityScanRunResponse:
        """
        @summary 创建数据质量监控运行实例
        
        @param tmp_req: CreateDataQualityScanRunRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateDataQualityScanRunResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.CreateDataQualityScanRunShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.parameters):
            request.parameters_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.parameters, 'Parameters', 'json')
        if not UtilClient.is_unset(tmp_req.runtime_resource):
            request.runtime_resource_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.runtime_resource, 'RuntimeResource', 'json')
        body = {}
        if not UtilClient.is_unset(request.data_quality_scan_id):
            body['DataQualityScanId'] = request.data_quality_scan_id
        if not UtilClient.is_unset(request.parameters_shrink):
            body['Parameters'] = request.parameters_shrink
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.runtime_resource_shrink):
            body['RuntimeResource'] = request.runtime_resource_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateDataQualityScanRun',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateDataQualityScanRunResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_data_quality_scan_run(
        self,
        request: dataworks_public_20240518_models.CreateDataQualityScanRunRequest,
    ) -> dataworks_public_20240518_models.CreateDataQualityScanRunResponse:
        """
        @summary 创建数据质量监控运行实例
        
        @param request: CreateDataQualityScanRunRequest
        @return: CreateDataQualityScanRunResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_data_quality_scan_run_with_options(request, runtime)

    async def create_data_quality_scan_run_async(
        self,
        request: dataworks_public_20240518_models.CreateDataQualityScanRunRequest,
    ) -> dataworks_public_20240518_models.CreateDataQualityScanRunResponse:
        """
        @summary 创建数据质量监控运行实例
        
        @param request: CreateDataQualityScanRunRequest
        @return: CreateDataQualityScanRunResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_data_quality_scan_run_with_options_async(request, runtime)

    def create_data_quality_template_with_options(
        self,
        request: dataworks_public_20240518_models.CreateDataQualityTemplateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateDataQualityTemplateResponse:
        """
        @summary 创建数据质量模板
        
        @param request: CreateDataQualityTemplateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateDataQualityTemplateResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.owner):
            body['Owner'] = request.owner
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.spec):
            body['Spec'] = request.spec
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateDataQualityTemplate',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateDataQualityTemplateResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_data_quality_template_with_options_async(
        self,
        request: dataworks_public_20240518_models.CreateDataQualityTemplateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateDataQualityTemplateResponse:
        """
        @summary 创建数据质量模板
        
        @param request: CreateDataQualityTemplateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateDataQualityTemplateResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.owner):
            body['Owner'] = request.owner
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.spec):
            body['Spec'] = request.spec
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateDataQualityTemplate',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateDataQualityTemplateResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_data_quality_template(
        self,
        request: dataworks_public_20240518_models.CreateDataQualityTemplateRequest,
    ) -> dataworks_public_20240518_models.CreateDataQualityTemplateResponse:
        """
        @summary 创建数据质量模板
        
        @param request: CreateDataQualityTemplateRequest
        @return: CreateDataQualityTemplateResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_data_quality_template_with_options(request, runtime)

    async def create_data_quality_template_async(
        self,
        request: dataworks_public_20240518_models.CreateDataQualityTemplateRequest,
    ) -> dataworks_public_20240518_models.CreateDataQualityTemplateResponse:
        """
        @summary 创建数据质量模板
        
        @param request: CreateDataQualityTemplateRequest
        @return: CreateDataQualityTemplateResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_data_quality_template_with_options_async(request, runtime)

    def create_data_source_with_options(
        self,
        request: dataworks_public_20240518_models.CreateDataSourceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateDataSourceResponse:
        """
        @summary Adds a data source to the development environment or production environment of a workspace.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
        Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
        
        @param request: CreateDataSourceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateDataSourceResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.connection_properties):
            query['ConnectionProperties'] = request.connection_properties
        if not UtilClient.is_unset(request.connection_properties_mode):
            query['ConnectionPropertiesMode'] = request.connection_properties_mode
        if not UtilClient.is_unset(request.description):
            query['Description'] = request.description
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateDataSource',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateDataSourceResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_data_source_with_options_async(
        self,
        request: dataworks_public_20240518_models.CreateDataSourceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateDataSourceResponse:
        """
        @summary Adds a data source to the development environment or production environment of a workspace.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
        Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
        
        @param request: CreateDataSourceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateDataSourceResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.connection_properties):
            query['ConnectionProperties'] = request.connection_properties
        if not UtilClient.is_unset(request.connection_properties_mode):
            query['ConnectionPropertiesMode'] = request.connection_properties_mode
        if not UtilClient.is_unset(request.description):
            query['Description'] = request.description
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateDataSource',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateDataSourceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_data_source(
        self,
        request: dataworks_public_20240518_models.CreateDataSourceRequest,
    ) -> dataworks_public_20240518_models.CreateDataSourceResponse:
        """
        @summary Adds a data source to the development environment or production environment of a workspace.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
        Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
        
        @param request: CreateDataSourceRequest
        @return: CreateDataSourceResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_data_source_with_options(request, runtime)

    async def create_data_source_async(
        self,
        request: dataworks_public_20240518_models.CreateDataSourceRequest,
    ) -> dataworks_public_20240518_models.CreateDataSourceResponse:
        """
        @summary Adds a data source to the development environment or production environment of a workspace.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
        Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
        
        @param request: CreateDataSourceRequest
        @return: CreateDataSourceResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_data_source_with_options_async(request, runtime)

    def create_data_source_shared_rule_with_options(
        self,
        request: dataworks_public_20240518_models.CreateDataSourceSharedRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateDataSourceSharedRuleResponse:
        """
        @summary Creates a rule for sharing a data source to other workspaces or RAM users.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  If you want to share a data source from Workspace A to Workspace B, you must have the permissions to share the data source in both workspaces. You can call this operation only if you are assigned one of the following roles in DataWorks:
        Tenant Owner, Tenant Administrator, Workspace Administrator, and Workspace Owner
        
        @param request: CreateDataSourceSharedRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateDataSourceSharedRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.data_source_id):
            query['DataSourceId'] = request.data_source_id
        if not UtilClient.is_unset(request.env_type):
            query['EnvType'] = request.env_type
        if not UtilClient.is_unset(request.shared_user):
            query['SharedUser'] = request.shared_user
        if not UtilClient.is_unset(request.target_project_id):
            query['TargetProjectId'] = request.target_project_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateDataSourceSharedRule',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateDataSourceSharedRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_data_source_shared_rule_with_options_async(
        self,
        request: dataworks_public_20240518_models.CreateDataSourceSharedRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateDataSourceSharedRuleResponse:
        """
        @summary Creates a rule for sharing a data source to other workspaces or RAM users.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  If you want to share a data source from Workspace A to Workspace B, you must have the permissions to share the data source in both workspaces. You can call this operation only if you are assigned one of the following roles in DataWorks:
        Tenant Owner, Tenant Administrator, Workspace Administrator, and Workspace Owner
        
        @param request: CreateDataSourceSharedRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateDataSourceSharedRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.data_source_id):
            query['DataSourceId'] = request.data_source_id
        if not UtilClient.is_unset(request.env_type):
            query['EnvType'] = request.env_type
        if not UtilClient.is_unset(request.shared_user):
            query['SharedUser'] = request.shared_user
        if not UtilClient.is_unset(request.target_project_id):
            query['TargetProjectId'] = request.target_project_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateDataSourceSharedRule',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateDataSourceSharedRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_data_source_shared_rule(
        self,
        request: dataworks_public_20240518_models.CreateDataSourceSharedRuleRequest,
    ) -> dataworks_public_20240518_models.CreateDataSourceSharedRuleResponse:
        """
        @summary Creates a rule for sharing a data source to other workspaces or RAM users.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  If you want to share a data source from Workspace A to Workspace B, you must have the permissions to share the data source in both workspaces. You can call this operation only if you are assigned one of the following roles in DataWorks:
        Tenant Owner, Tenant Administrator, Workspace Administrator, and Workspace Owner
        
        @param request: CreateDataSourceSharedRuleRequest
        @return: CreateDataSourceSharedRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_data_source_shared_rule_with_options(request, runtime)

    async def create_data_source_shared_rule_async(
        self,
        request: dataworks_public_20240518_models.CreateDataSourceSharedRuleRequest,
    ) -> dataworks_public_20240518_models.CreateDataSourceSharedRuleResponse:
        """
        @summary Creates a rule for sharing a data source to other workspaces or RAM users.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  If you want to share a data source from Workspace A to Workspace B, you must have the permissions to share the data source in both workspaces. You can call this operation only if you are assigned one of the following roles in DataWorks:
        Tenant Owner, Tenant Administrator, Workspace Administrator, and Workspace Owner
        
        @param request: CreateDataSourceSharedRuleRequest
        @return: CreateDataSourceSharedRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_data_source_shared_rule_with_options_async(request, runtime)

    def create_file_with_options(
        self,
        request: dataworks_public_20240518_models.CreateFileRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateFileResponse:
        """
        @param request: CreateFileRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateFileResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.advanced_settings):
            body['AdvancedSettings'] = request.advanced_settings
        if not UtilClient.is_unset(request.apply_schedule_immediately):
            body['ApplyScheduleImmediately'] = request.apply_schedule_immediately
        if not UtilClient.is_unset(request.auto_parsing):
            body['AutoParsing'] = request.auto_parsing
        if not UtilClient.is_unset(request.auto_rerun_interval_millis):
            body['AutoRerunIntervalMillis'] = request.auto_rerun_interval_millis
        if not UtilClient.is_unset(request.auto_rerun_times):
            body['AutoRerunTimes'] = request.auto_rerun_times
        if not UtilClient.is_unset(request.connection_name):
            body['ConnectionName'] = request.connection_name
        if not UtilClient.is_unset(request.content):
            body['Content'] = request.content
        if not UtilClient.is_unset(request.create_folder_if_not_exists):
            body['CreateFolderIfNotExists'] = request.create_folder_if_not_exists
        if not UtilClient.is_unset(request.cron_express):
            body['CronExpress'] = request.cron_express
        if not UtilClient.is_unset(request.cycle_type):
            body['CycleType'] = request.cycle_type
        if not UtilClient.is_unset(request.dependent_node_id_list):
            body['DependentNodeIdList'] = request.dependent_node_id_list
        if not UtilClient.is_unset(request.dependent_type):
            body['DependentType'] = request.dependent_type
        if not UtilClient.is_unset(request.end_effect_date):
            body['EndEffectDate'] = request.end_effect_date
        if not UtilClient.is_unset(request.file_description):
            body['FileDescription'] = request.file_description
        if not UtilClient.is_unset(request.file_folder_path):
            body['FileFolderPath'] = request.file_folder_path
        if not UtilClient.is_unset(request.file_name):
            body['FileName'] = request.file_name
        if not UtilClient.is_unset(request.file_type):
            body['FileType'] = request.file_type
        if not UtilClient.is_unset(request.ignore_parent_skip_running_property):
            body['IgnoreParentSkipRunningProperty'] = request.ignore_parent_skip_running_property
        if not UtilClient.is_unset(request.image_id):
            body['ImageId'] = request.image_id
        if not UtilClient.is_unset(request.input_list):
            body['InputList'] = request.input_list
        if not UtilClient.is_unset(request.input_parameters):
            body['InputParameters'] = request.input_parameters
        if not UtilClient.is_unset(request.output_parameters):
            body['OutputParameters'] = request.output_parameters
        if not UtilClient.is_unset(request.owner):
            body['Owner'] = request.owner
        if not UtilClient.is_unset(request.para_value):
            body['ParaValue'] = request.para_value
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        if not UtilClient.is_unset(request.rerun_mode):
            body['RerunMode'] = request.rerun_mode
        if not UtilClient.is_unset(request.resource_group_id):
            body['ResourceGroupId'] = request.resource_group_id
        if not UtilClient.is_unset(request.resource_group_identifier):
            body['ResourceGroupIdentifier'] = request.resource_group_identifier
        if not UtilClient.is_unset(request.scheduler_type):
            body['SchedulerType'] = request.scheduler_type
        if not UtilClient.is_unset(request.start_effect_date):
            body['StartEffectDate'] = request.start_effect_date
        if not UtilClient.is_unset(request.start_immediately):
            body['StartImmediately'] = request.start_immediately
        if not UtilClient.is_unset(request.stop):
            body['Stop'] = request.stop
        if not UtilClient.is_unset(request.timeout):
            body['Timeout'] = request.timeout
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateFile',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateFileResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_file_with_options_async(
        self,
        request: dataworks_public_20240518_models.CreateFileRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateFileResponse:
        """
        @param request: CreateFileRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateFileResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.advanced_settings):
            body['AdvancedSettings'] = request.advanced_settings
        if not UtilClient.is_unset(request.apply_schedule_immediately):
            body['ApplyScheduleImmediately'] = request.apply_schedule_immediately
        if not UtilClient.is_unset(request.auto_parsing):
            body['AutoParsing'] = request.auto_parsing
        if not UtilClient.is_unset(request.auto_rerun_interval_millis):
            body['AutoRerunIntervalMillis'] = request.auto_rerun_interval_millis
        if not UtilClient.is_unset(request.auto_rerun_times):
            body['AutoRerunTimes'] = request.auto_rerun_times
        if not UtilClient.is_unset(request.connection_name):
            body['ConnectionName'] = request.connection_name
        if not UtilClient.is_unset(request.content):
            body['Content'] = request.content
        if not UtilClient.is_unset(request.create_folder_if_not_exists):
            body['CreateFolderIfNotExists'] = request.create_folder_if_not_exists
        if not UtilClient.is_unset(request.cron_express):
            body['CronExpress'] = request.cron_express
        if not UtilClient.is_unset(request.cycle_type):
            body['CycleType'] = request.cycle_type
        if not UtilClient.is_unset(request.dependent_node_id_list):
            body['DependentNodeIdList'] = request.dependent_node_id_list
        if not UtilClient.is_unset(request.dependent_type):
            body['DependentType'] = request.dependent_type
        if not UtilClient.is_unset(request.end_effect_date):
            body['EndEffectDate'] = request.end_effect_date
        if not UtilClient.is_unset(request.file_description):
            body['FileDescription'] = request.file_description
        if not UtilClient.is_unset(request.file_folder_path):
            body['FileFolderPath'] = request.file_folder_path
        if not UtilClient.is_unset(request.file_name):
            body['FileName'] = request.file_name
        if not UtilClient.is_unset(request.file_type):
            body['FileType'] = request.file_type
        if not UtilClient.is_unset(request.ignore_parent_skip_running_property):
            body['IgnoreParentSkipRunningProperty'] = request.ignore_parent_skip_running_property
        if not UtilClient.is_unset(request.image_id):
            body['ImageId'] = request.image_id
        if not UtilClient.is_unset(request.input_list):
            body['InputList'] = request.input_list
        if not UtilClient.is_unset(request.input_parameters):
            body['InputParameters'] = request.input_parameters
        if not UtilClient.is_unset(request.output_parameters):
            body['OutputParameters'] = request.output_parameters
        if not UtilClient.is_unset(request.owner):
            body['Owner'] = request.owner
        if not UtilClient.is_unset(request.para_value):
            body['ParaValue'] = request.para_value
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        if not UtilClient.is_unset(request.rerun_mode):
            body['RerunMode'] = request.rerun_mode
        if not UtilClient.is_unset(request.resource_group_id):
            body['ResourceGroupId'] = request.resource_group_id
        if not UtilClient.is_unset(request.resource_group_identifier):
            body['ResourceGroupIdentifier'] = request.resource_group_identifier
        if not UtilClient.is_unset(request.scheduler_type):
            body['SchedulerType'] = request.scheduler_type
        if not UtilClient.is_unset(request.start_effect_date):
            body['StartEffectDate'] = request.start_effect_date
        if not UtilClient.is_unset(request.start_immediately):
            body['StartImmediately'] = request.start_immediately
        if not UtilClient.is_unset(request.stop):
            body['Stop'] = request.stop
        if not UtilClient.is_unset(request.timeout):
            body['Timeout'] = request.timeout
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateFile',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateFileResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_file(
        self,
        request: dataworks_public_20240518_models.CreateFileRequest,
    ) -> dataworks_public_20240518_models.CreateFileResponse:
        """
        @param request: CreateFileRequest
        @return: CreateFileResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_file_with_options(request, runtime)

    async def create_file_async(
        self,
        request: dataworks_public_20240518_models.CreateFileRequest,
    ) -> dataworks_public_20240518_models.CreateFileResponse:
        """
        @param request: CreateFileRequest
        @return: CreateFileResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_file_with_options_async(request, runtime)

    def create_folder_with_options(
        self,
        request: dataworks_public_20240518_models.CreateFolderRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateFolderResponse:
        """
        @param request: CreateFolderRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateFolderResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.folder_path):
            body['FolderPath'] = request.folder_path
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateFolder',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateFolderResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_folder_with_options_async(
        self,
        request: dataworks_public_20240518_models.CreateFolderRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateFolderResponse:
        """
        @param request: CreateFolderRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateFolderResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.folder_path):
            body['FolderPath'] = request.folder_path
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateFolder',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateFolderResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_folder(
        self,
        request: dataworks_public_20240518_models.CreateFolderRequest,
    ) -> dataworks_public_20240518_models.CreateFolderResponse:
        """
        @param request: CreateFolderRequest
        @return: CreateFolderResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_folder_with_options(request, runtime)

    async def create_folder_async(
        self,
        request: dataworks_public_20240518_models.CreateFolderRequest,
    ) -> dataworks_public_20240518_models.CreateFolderResponse:
        """
        @param request: CreateFolderRequest
        @return: CreateFolderResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_folder_with_options_async(request, runtime)

    def create_function_with_options(
        self,
        request: dataworks_public_20240518_models.CreateFunctionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateFunctionResponse:
        """
        @summary Creates a user-defined function (UDF) in DataStudio. The information about the UDF is described by using FlowSpec.
        
        @description >  You cannot use this API operation to create multiple UDFs at a time. If you specify multiple UDFs by using FlowSpec, the system creates only the first specified UDF.
        
        @param request: CreateFunctionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateFunctionResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.spec):
            body['Spec'] = request.spec
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateFunction',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateFunctionResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_function_with_options_async(
        self,
        request: dataworks_public_20240518_models.CreateFunctionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateFunctionResponse:
        """
        @summary Creates a user-defined function (UDF) in DataStudio. The information about the UDF is described by using FlowSpec.
        
        @description >  You cannot use this API operation to create multiple UDFs at a time. If you specify multiple UDFs by using FlowSpec, the system creates only the first specified UDF.
        
        @param request: CreateFunctionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateFunctionResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.spec):
            body['Spec'] = request.spec
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateFunction',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateFunctionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_function(
        self,
        request: dataworks_public_20240518_models.CreateFunctionRequest,
    ) -> dataworks_public_20240518_models.CreateFunctionResponse:
        """
        @summary Creates a user-defined function (UDF) in DataStudio. The information about the UDF is described by using FlowSpec.
        
        @description >  You cannot use this API operation to create multiple UDFs at a time. If you specify multiple UDFs by using FlowSpec, the system creates only the first specified UDF.
        
        @param request: CreateFunctionRequest
        @return: CreateFunctionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_function_with_options(request, runtime)

    async def create_function_async(
        self,
        request: dataworks_public_20240518_models.CreateFunctionRequest,
    ) -> dataworks_public_20240518_models.CreateFunctionResponse:
        """
        @summary Creates a user-defined function (UDF) in DataStudio. The information about the UDF is described by using FlowSpec.
        
        @description >  You cannot use this API operation to create multiple UDFs at a time. If you specify multiple UDFs by using FlowSpec, the system creates only the first specified UDF.
        
        @param request: CreateFunctionRequest
        @return: CreateFunctionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_function_with_options_async(request, runtime)

    def create_lineage_relationship_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.CreateLineageRelationshipRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateLineageRelationshipResponse:
        """
        @summary Creates a lineage between a source entity and a destination entity. Either the source or destination entity must be a custom entity.
        
        @param tmp_req: CreateLineageRelationshipRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateLineageRelationshipResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.CreateLineageRelationshipShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.dst_entity):
            request.dst_entity_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.dst_entity, 'DstEntity', 'json')
        if not UtilClient.is_unset(tmp_req.src_entity):
            request.src_entity_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.src_entity, 'SrcEntity', 'json')
        if not UtilClient.is_unset(tmp_req.task):
            request.task_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.task, 'Task', 'json')
        query = {}
        if not UtilClient.is_unset(request.dst_entity_shrink):
            query['DstEntity'] = request.dst_entity_shrink
        if not UtilClient.is_unset(request.src_entity_shrink):
            query['SrcEntity'] = request.src_entity_shrink
        if not UtilClient.is_unset(request.task_shrink):
            query['Task'] = request.task_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateLineageRelationship',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateLineageRelationshipResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_lineage_relationship_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.CreateLineageRelationshipRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateLineageRelationshipResponse:
        """
        @summary Creates a lineage between a source entity and a destination entity. Either the source or destination entity must be a custom entity.
        
        @param tmp_req: CreateLineageRelationshipRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateLineageRelationshipResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.CreateLineageRelationshipShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.dst_entity):
            request.dst_entity_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.dst_entity, 'DstEntity', 'json')
        if not UtilClient.is_unset(tmp_req.src_entity):
            request.src_entity_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.src_entity, 'SrcEntity', 'json')
        if not UtilClient.is_unset(tmp_req.task):
            request.task_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.task, 'Task', 'json')
        query = {}
        if not UtilClient.is_unset(request.dst_entity_shrink):
            query['DstEntity'] = request.dst_entity_shrink
        if not UtilClient.is_unset(request.src_entity_shrink):
            query['SrcEntity'] = request.src_entity_shrink
        if not UtilClient.is_unset(request.task_shrink):
            query['Task'] = request.task_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateLineageRelationship',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateLineageRelationshipResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_lineage_relationship(
        self,
        request: dataworks_public_20240518_models.CreateLineageRelationshipRequest,
    ) -> dataworks_public_20240518_models.CreateLineageRelationshipResponse:
        """
        @summary Creates a lineage between a source entity and a destination entity. Either the source or destination entity must be a custom entity.
        
        @param request: CreateLineageRelationshipRequest
        @return: CreateLineageRelationshipResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_lineage_relationship_with_options(request, runtime)

    async def create_lineage_relationship_async(
        self,
        request: dataworks_public_20240518_models.CreateLineageRelationshipRequest,
    ) -> dataworks_public_20240518_models.CreateLineageRelationshipResponse:
        """
        @summary Creates a lineage between a source entity and a destination entity. Either the source or destination entity must be a custom entity.
        
        @param request: CreateLineageRelationshipRequest
        @return: CreateLineageRelationshipResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_lineage_relationship_with_options_async(request, runtime)

    def create_meta_collection_with_options(
        self,
        request: dataworks_public_20240518_models.CreateMetaCollectionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateMetaCollectionResponse:
        """
        @summary Creates a collection in Data Map. Collections include categories, subcategories, data albums, and categories that are created in the data albums.
        
        @param request: CreateMetaCollectionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateMetaCollectionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.description):
            query['Description'] = request.description
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.parent_id):
            query['ParentId'] = request.parent_id
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateMetaCollection',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateMetaCollectionResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_meta_collection_with_options_async(
        self,
        request: dataworks_public_20240518_models.CreateMetaCollectionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateMetaCollectionResponse:
        """
        @summary Creates a collection in Data Map. Collections include categories, subcategories, data albums, and categories that are created in the data albums.
        
        @param request: CreateMetaCollectionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateMetaCollectionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.description):
            query['Description'] = request.description
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.parent_id):
            query['ParentId'] = request.parent_id
        if not UtilClient.is_unset(request.type):
            query['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='CreateMetaCollection',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateMetaCollectionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_meta_collection(
        self,
        request: dataworks_public_20240518_models.CreateMetaCollectionRequest,
    ) -> dataworks_public_20240518_models.CreateMetaCollectionResponse:
        """
        @summary Creates a collection in Data Map. Collections include categories, subcategories, data albums, and categories that are created in the data albums.
        
        @param request: CreateMetaCollectionRequest
        @return: CreateMetaCollectionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_meta_collection_with_options(request, runtime)

    async def create_meta_collection_async(
        self,
        request: dataworks_public_20240518_models.CreateMetaCollectionRequest,
    ) -> dataworks_public_20240518_models.CreateMetaCollectionResponse:
        """
        @summary Creates a collection in Data Map. Collections include categories, subcategories, data albums, and categories that are created in the data albums.
        
        @param request: CreateMetaCollectionRequest
        @return: CreateMetaCollectionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_meta_collection_with_options_async(request, runtime)

    def create_network_with_options(
        self,
        request: dataworks_public_20240518_models.CreateNetworkRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateNetworkResponse:
        """
        @summary Creates a network and associates the network with a general resource group.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: CreateNetworkRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateNetworkResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.client_token):
            body['ClientToken'] = request.client_token
        if not UtilClient.is_unset(request.resource_group_id):
            body['ResourceGroupId'] = request.resource_group_id
        if not UtilClient.is_unset(request.vpc_id):
            body['VpcId'] = request.vpc_id
        if not UtilClient.is_unset(request.vswitch_id):
            body['VswitchId'] = request.vswitch_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateNetwork',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateNetworkResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_network_with_options_async(
        self,
        request: dataworks_public_20240518_models.CreateNetworkRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateNetworkResponse:
        """
        @summary Creates a network and associates the network with a general resource group.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: CreateNetworkRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateNetworkResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.client_token):
            body['ClientToken'] = request.client_token
        if not UtilClient.is_unset(request.resource_group_id):
            body['ResourceGroupId'] = request.resource_group_id
        if not UtilClient.is_unset(request.vpc_id):
            body['VpcId'] = request.vpc_id
        if not UtilClient.is_unset(request.vswitch_id):
            body['VswitchId'] = request.vswitch_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateNetwork',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateNetworkResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_network(
        self,
        request: dataworks_public_20240518_models.CreateNetworkRequest,
    ) -> dataworks_public_20240518_models.CreateNetworkResponse:
        """
        @summary Creates a network and associates the network with a general resource group.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: CreateNetworkRequest
        @return: CreateNetworkResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_network_with_options(request, runtime)

    async def create_network_async(
        self,
        request: dataworks_public_20240518_models.CreateNetworkRequest,
    ) -> dataworks_public_20240518_models.CreateNetworkResponse:
        """
        @summary Creates a network and associates the network with a general resource group.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: CreateNetworkRequest
        @return: CreateNetworkResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_network_with_options_async(request, runtime)

    def create_node_with_options(
        self,
        request: dataworks_public_20240518_models.CreateNodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateNodeResponse:
        """
        @summary Creates a node in DataStudio. The information about the node is described by using FlowSpec.
        
        @description >  You cannot use this API operation to create multiple nodes at a time. If you specify multiple nodes by using FlowSpec, the system creates only the first specified node.
        
        @param request: CreateNodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateNodeResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.container_id):
            body['ContainerId'] = request.container_id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.scene):
            body['Scene'] = request.scene
        if not UtilClient.is_unset(request.spec):
            body['Spec'] = request.spec
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateNode',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateNodeResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_node_with_options_async(
        self,
        request: dataworks_public_20240518_models.CreateNodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateNodeResponse:
        """
        @summary Creates a node in DataStudio. The information about the node is described by using FlowSpec.
        
        @description >  You cannot use this API operation to create multiple nodes at a time. If you specify multiple nodes by using FlowSpec, the system creates only the first specified node.
        
        @param request: CreateNodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateNodeResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.container_id):
            body['ContainerId'] = request.container_id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.scene):
            body['Scene'] = request.scene
        if not UtilClient.is_unset(request.spec):
            body['Spec'] = request.spec
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateNode',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateNodeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_node(
        self,
        request: dataworks_public_20240518_models.CreateNodeRequest,
    ) -> dataworks_public_20240518_models.CreateNodeResponse:
        """
        @summary Creates a node in DataStudio. The information about the node is described by using FlowSpec.
        
        @description >  You cannot use this API operation to create multiple nodes at a time. If you specify multiple nodes by using FlowSpec, the system creates only the first specified node.
        
        @param request: CreateNodeRequest
        @return: CreateNodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_node_with_options(request, runtime)

    async def create_node_async(
        self,
        request: dataworks_public_20240518_models.CreateNodeRequest,
    ) -> dataworks_public_20240518_models.CreateNodeResponse:
        """
        @summary Creates a node in DataStudio. The information about the node is described by using FlowSpec.
        
        @description >  You cannot use this API operation to create multiple nodes at a time. If you specify multiple nodes by using FlowSpec, the system creates only the first specified node.
        
        @param request: CreateNodeRequest
        @return: CreateNodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_node_with_options_async(request, runtime)

    def create_pipeline_run_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.CreatePipelineRunRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreatePipelineRunResponse:
        """
        @summary Creates a process for deploying or undeploying an entity in Data Studio.
        
        @description >  You cannot use this API operation to create a process for multiple entities at a time. If you specify multiple entities in a request, the system creates a process only for the first entity.
        
        @param tmp_req: CreatePipelineRunRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreatePipelineRunResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.CreatePipelineRunShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.object_ids):
            request.object_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.object_ids, 'ObjectIds', 'json')
        body = {}
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.object_ids_shrink):
            body['ObjectIds'] = request.object_ids_shrink
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.type):
            body['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreatePipelineRun',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreatePipelineRunResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_pipeline_run_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.CreatePipelineRunRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreatePipelineRunResponse:
        """
        @summary Creates a process for deploying or undeploying an entity in Data Studio.
        
        @description >  You cannot use this API operation to create a process for multiple entities at a time. If you specify multiple entities in a request, the system creates a process only for the first entity.
        
        @param tmp_req: CreatePipelineRunRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreatePipelineRunResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.CreatePipelineRunShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.object_ids):
            request.object_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.object_ids, 'ObjectIds', 'json')
        body = {}
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.object_ids_shrink):
            body['ObjectIds'] = request.object_ids_shrink
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.type):
            body['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreatePipelineRun',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreatePipelineRunResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_pipeline_run(
        self,
        request: dataworks_public_20240518_models.CreatePipelineRunRequest,
    ) -> dataworks_public_20240518_models.CreatePipelineRunResponse:
        """
        @summary Creates a process for deploying or undeploying an entity in Data Studio.
        
        @description >  You cannot use this API operation to create a process for multiple entities at a time. If you specify multiple entities in a request, the system creates a process only for the first entity.
        
        @param request: CreatePipelineRunRequest
        @return: CreatePipelineRunResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_pipeline_run_with_options(request, runtime)

    async def create_pipeline_run_async(
        self,
        request: dataworks_public_20240518_models.CreatePipelineRunRequest,
    ) -> dataworks_public_20240518_models.CreatePipelineRunResponse:
        """
        @summary Creates a process for deploying or undeploying an entity in Data Studio.
        
        @description >  You cannot use this API operation to create a process for multiple entities at a time. If you specify multiple entities in a request, the system creates a process only for the first entity.
        
        @param request: CreatePipelineRunRequest
        @return: CreatePipelineRunResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_pipeline_run_with_options_async(request, runtime)

    def create_project_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.CreateProjectRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateProjectResponse:
        """
        @summary Creates a workspace.
        
        @param tmp_req: CreateProjectRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateProjectResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.CreateProjectShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.aliyun_resource_tags):
            request.aliyun_resource_tags_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.aliyun_resource_tags, 'AliyunResourceTags', 'json')
        body = {}
        if not UtilClient.is_unset(request.aliyun_resource_group_id):
            body['AliyunResourceGroupId'] = request.aliyun_resource_group_id
        if not UtilClient.is_unset(request.aliyun_resource_tags_shrink):
            body['AliyunResourceTags'] = request.aliyun_resource_tags_shrink
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.dev_environment_enabled):
            body['DevEnvironmentEnabled'] = request.dev_environment_enabled
        if not UtilClient.is_unset(request.dev_role_disabled):
            body['DevRoleDisabled'] = request.dev_role_disabled
        if not UtilClient.is_unset(request.display_name):
            body['DisplayName'] = request.display_name
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.pai_task_enabled):
            body['PaiTaskEnabled'] = request.pai_task_enabled
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateProject',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateProjectResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_project_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.CreateProjectRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateProjectResponse:
        """
        @summary Creates a workspace.
        
        @param tmp_req: CreateProjectRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateProjectResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.CreateProjectShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.aliyun_resource_tags):
            request.aliyun_resource_tags_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.aliyun_resource_tags, 'AliyunResourceTags', 'json')
        body = {}
        if not UtilClient.is_unset(request.aliyun_resource_group_id):
            body['AliyunResourceGroupId'] = request.aliyun_resource_group_id
        if not UtilClient.is_unset(request.aliyun_resource_tags_shrink):
            body['AliyunResourceTags'] = request.aliyun_resource_tags_shrink
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.dev_environment_enabled):
            body['DevEnvironmentEnabled'] = request.dev_environment_enabled
        if not UtilClient.is_unset(request.dev_role_disabled):
            body['DevRoleDisabled'] = request.dev_role_disabled
        if not UtilClient.is_unset(request.display_name):
            body['DisplayName'] = request.display_name
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.pai_task_enabled):
            body['PaiTaskEnabled'] = request.pai_task_enabled
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateProject',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateProjectResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_project(
        self,
        request: dataworks_public_20240518_models.CreateProjectRequest,
    ) -> dataworks_public_20240518_models.CreateProjectResponse:
        """
        @summary Creates a workspace.
        
        @param request: CreateProjectRequest
        @return: CreateProjectResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_project_with_options(request, runtime)

    async def create_project_async(
        self,
        request: dataworks_public_20240518_models.CreateProjectRequest,
    ) -> dataworks_public_20240518_models.CreateProjectResponse:
        """
        @summary Creates a workspace.
        
        @param request: CreateProjectRequest
        @return: CreateProjectResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_project_with_options_async(request, runtime)

    def create_project_member_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.CreateProjectMemberRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateProjectMemberResponse:
        """
        @summary Adds a workspace member and assigns a workspace-level role to the member.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: CreateProjectMemberRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateProjectMemberResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.CreateProjectMemberShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.role_codes):
            request.role_codes_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.role_codes, 'RoleCodes', 'json')
        body = {}
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.role_codes_shrink):
            body['RoleCodes'] = request.role_codes_shrink
        if not UtilClient.is_unset(request.user_id):
            body['UserId'] = request.user_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateProjectMember',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateProjectMemberResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_project_member_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.CreateProjectMemberRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateProjectMemberResponse:
        """
        @summary Adds a workspace member and assigns a workspace-level role to the member.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: CreateProjectMemberRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateProjectMemberResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.CreateProjectMemberShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.role_codes):
            request.role_codes_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.role_codes, 'RoleCodes', 'json')
        body = {}
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.role_codes_shrink):
            body['RoleCodes'] = request.role_codes_shrink
        if not UtilClient.is_unset(request.user_id):
            body['UserId'] = request.user_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateProjectMember',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateProjectMemberResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_project_member(
        self,
        request: dataworks_public_20240518_models.CreateProjectMemberRequest,
    ) -> dataworks_public_20240518_models.CreateProjectMemberResponse:
        """
        @summary Adds a workspace member and assigns a workspace-level role to the member.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: CreateProjectMemberRequest
        @return: CreateProjectMemberResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_project_member_with_options(request, runtime)

    async def create_project_member_async(
        self,
        request: dataworks_public_20240518_models.CreateProjectMemberRequest,
    ) -> dataworks_public_20240518_models.CreateProjectMemberResponse:
        """
        @summary Adds a workspace member and assigns a workspace-level role to the member.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: CreateProjectMemberRequest
        @return: CreateProjectMemberResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_project_member_with_options_async(request, runtime)

    def create_resource_with_options(
        self,
        request: dataworks_public_20240518_models.CreateResourceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateResourceResponse:
        """
        @summary >  You cannot use this API operation to create multiple file resources at a time. If you specify multiple file resources by using FlowSpec, the system creates only the first specified resource.
        
        @description Private
        
        @param request: CreateResourceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateResourceResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.resource_file):
            body['ResourceFile'] = request.resource_file
        if not UtilClient.is_unset(request.spec):
            body['Spec'] = request.spec
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateResource',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateResourceResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_resource_with_options_async(
        self,
        request: dataworks_public_20240518_models.CreateResourceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateResourceResponse:
        """
        @summary >  You cannot use this API operation to create multiple file resources at a time. If you specify multiple file resources by using FlowSpec, the system creates only the first specified resource.
        
        @description Private
        
        @param request: CreateResourceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateResourceResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.resource_file):
            body['ResourceFile'] = request.resource_file
        if not UtilClient.is_unset(request.spec):
            body['Spec'] = request.spec
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateResource',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateResourceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_resource(
        self,
        request: dataworks_public_20240518_models.CreateResourceRequest,
    ) -> dataworks_public_20240518_models.CreateResourceResponse:
        """
        @summary >  You cannot use this API operation to create multiple file resources at a time. If you specify multiple file resources by using FlowSpec, the system creates only the first specified resource.
        
        @description Private
        
        @param request: CreateResourceRequest
        @return: CreateResourceResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_resource_with_options(request, runtime)

    async def create_resource_async(
        self,
        request: dataworks_public_20240518_models.CreateResourceRequest,
    ) -> dataworks_public_20240518_models.CreateResourceResponse:
        """
        @summary >  You cannot use this API operation to create multiple file resources at a time. If you specify multiple file resources by using FlowSpec, the system creates only the first specified resource.
        
        @description Private
        
        @param request: CreateResourceRequest
        @return: CreateResourceResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_resource_with_options_async(request, runtime)

    def create_resource_advance(
        self,
        request: dataworks_public_20240518_models.CreateResourceAdvanceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateResourceResponse:
        # Step 0: init client
        credential_model = None
        if UtilClient.is_unset(self._credential):
            raise TeaException({
                'code': 'InvalidCredentials',
                'message': 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
            })
        credential_model = self._credential.get_credential()
        access_key_id = credential_model.access_key_id
        access_key_secret = credential_model.access_key_secret
        security_token = credential_model.security_token
        credential_type = credential_model.type
        open_platform_endpoint = self._open_platform_endpoint
        if UtilClient.empty(open_platform_endpoint):
            open_platform_endpoint = 'openplatform.aliyuncs.com'
        if UtilClient.is_unset(credential_type):
            credential_type = 'access_key'
        auth_config = open_api_models.Config(
            access_key_id=access_key_id,
            access_key_secret=access_key_secret,
            security_token=security_token,
            type=credential_type,
            endpoint=open_platform_endpoint,
            protocol=self._protocol,
            region_id=self._region_id
        )
        auth_client = OpenApiClient(auth_config)
        auth_request = {
            'Product': 'dataworks-public',
            'RegionId': self._region_id
        }
        auth_req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(auth_request)
        )
        auth_params = open_api_models.Params(
            action='AuthorizeFileUpload',
            version='2019-12-19',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        auth_response = {}
        file_obj = file_form_models.FileField()
        oss_header = {}
        tmp_body = {}
        use_accelerate = False
        auth_response_body = {}
        create_resource_req = dataworks_public_20240518_models.CreateResourceRequest()
        OpenApiUtilClient.convert(request, create_resource_req)
        if not UtilClient.is_unset(request.resource_file_object):
            tmp_resp_0 = auth_client.call_api(auth_params, auth_req, runtime)
            auth_response = UtilClient.assert_as_map(tmp_resp_0)
            tmp_body = UtilClient.assert_as_map(auth_response.get('body'))
            use_accelerate = UtilClient.assert_as_boolean(tmp_body.get('UseAccelerate'))
            auth_response_body = UtilClient.stringify_map_value(tmp_body)
            file_obj = file_form_models.FileField(
                filename=auth_response_body.get('ObjectKey'),
                content=request.resource_file_object,
                content_type=''
            )
            oss_header = {
                'host': f"{auth_response_body.get('Bucket')}.{OpenApiUtilClient.get_endpoint(auth_response_body.get('Endpoint'), use_accelerate, self._endpoint_type)}",
                'OSSAccessKeyId': auth_response_body.get('AccessKeyId'),
                'policy': auth_response_body.get('EncodedPolicy'),
                'Signature': auth_response_body.get('Signature'),
                'key': auth_response_body.get('ObjectKey'),
                'file': file_obj,
                'success_action_status': '201'
            }
            self._post_ossobject(auth_response_body.get('Bucket'), oss_header)
            create_resource_req.resource_file = f"http://{auth_response_body.get('Bucket')}.{auth_response_body.get('Endpoint')}/{auth_response_body.get('ObjectKey')}"
        create_resource_resp = self.create_resource_with_options(create_resource_req, runtime)
        return create_resource_resp

    async def create_resource_advance_async(
        self,
        request: dataworks_public_20240518_models.CreateResourceAdvanceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateResourceResponse:
        # Step 0: init client
        credential_model = None
        if UtilClient.is_unset(self._credential):
            raise TeaException({
                'code': 'InvalidCredentials',
                'message': 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
            })
        credential_model = await self._credential.get_credential_async()
        access_key_id = credential_model.access_key_id
        access_key_secret = credential_model.access_key_secret
        security_token = credential_model.security_token
        credential_type = credential_model.type
        open_platform_endpoint = self._open_platform_endpoint
        if UtilClient.empty(open_platform_endpoint):
            open_platform_endpoint = 'openplatform.aliyuncs.com'
        if UtilClient.is_unset(credential_type):
            credential_type = 'access_key'
        auth_config = open_api_models.Config(
            access_key_id=access_key_id,
            access_key_secret=access_key_secret,
            security_token=security_token,
            type=credential_type,
            endpoint=open_platform_endpoint,
            protocol=self._protocol,
            region_id=self._region_id
        )
        auth_client = OpenApiClient(auth_config)
        auth_request = {
            'Product': 'dataworks-public',
            'RegionId': self._region_id
        }
        auth_req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(auth_request)
        )
        auth_params = open_api_models.Params(
            action='AuthorizeFileUpload',
            version='2019-12-19',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        auth_response = {}
        file_obj = file_form_models.FileField()
        oss_header = {}
        tmp_body = {}
        use_accelerate = False
        auth_response_body = {}
        create_resource_req = dataworks_public_20240518_models.CreateResourceRequest()
        OpenApiUtilClient.convert(request, create_resource_req)
        if not UtilClient.is_unset(request.resource_file_object):
            tmp_resp_0 = await auth_client.call_api_async(auth_params, auth_req, runtime)
            auth_response = UtilClient.assert_as_map(tmp_resp_0)
            tmp_body = UtilClient.assert_as_map(auth_response.get('body'))
            use_accelerate = UtilClient.assert_as_boolean(tmp_body.get('UseAccelerate'))
            auth_response_body = UtilClient.stringify_map_value(tmp_body)
            file_obj = file_form_models.FileField(
                filename=auth_response_body.get('ObjectKey'),
                content=request.resource_file_object,
                content_type=''
            )
            oss_header = {
                'host': f"{auth_response_body.get('Bucket')}.{OpenApiUtilClient.get_endpoint(auth_response_body.get('Endpoint'), use_accelerate, self._endpoint_type)}",
                'OSSAccessKeyId': auth_response_body.get('AccessKeyId'),
                'policy': auth_response_body.get('EncodedPolicy'),
                'Signature': auth_response_body.get('Signature'),
                'key': auth_response_body.get('ObjectKey'),
                'file': file_obj,
                'success_action_status': '201'
            }
            await self._post_ossobject_async(auth_response_body.get('Bucket'), oss_header)
            create_resource_req.resource_file = f"http://{auth_response_body.get('Bucket')}.{auth_response_body.get('Endpoint')}/{auth_response_body.get('ObjectKey')}"
        create_resource_resp = await self.create_resource_with_options_async(create_resource_req, runtime)
        return create_resource_resp

    def create_resource_file_with_options(
        self,
        request: dataworks_public_20240518_models.CreateResourceFileRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateResourceFileResponse:
        """
        @summary Creates a resource file in DataStudio. The following types are supported: JAR, Archive, File, and Python.
        
        @param request: CreateResourceFileRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateResourceFileResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.content):
            body['Content'] = request.content
        if not UtilClient.is_unset(request.file_description):
            body['FileDescription'] = request.file_description
        if not UtilClient.is_unset(request.file_folder_path):
            body['FileFolderPath'] = request.file_folder_path
        if not UtilClient.is_unset(request.file_name):
            body['FileName'] = request.file_name
        if not UtilClient.is_unset(request.file_type):
            body['FileType'] = request.file_type
        if not UtilClient.is_unset(request.origin_resource_name):
            body['OriginResourceName'] = request.origin_resource_name
        if not UtilClient.is_unset(request.owner):
            body['Owner'] = request.owner
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.register_to_calc_engine):
            body['RegisterToCalcEngine'] = request.register_to_calc_engine
        if not UtilClient.is_unset(request.resource_file):
            body['ResourceFile'] = request.resource_file
        if not UtilClient.is_unset(request.storage_url):
            body['StorageURL'] = request.storage_url
        if not UtilClient.is_unset(request.upload_mode):
            body['UploadMode'] = request.upload_mode
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateResourceFile',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateResourceFileResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_resource_file_with_options_async(
        self,
        request: dataworks_public_20240518_models.CreateResourceFileRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateResourceFileResponse:
        """
        @summary Creates a resource file in DataStudio. The following types are supported: JAR, Archive, File, and Python.
        
        @param request: CreateResourceFileRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateResourceFileResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.content):
            body['Content'] = request.content
        if not UtilClient.is_unset(request.file_description):
            body['FileDescription'] = request.file_description
        if not UtilClient.is_unset(request.file_folder_path):
            body['FileFolderPath'] = request.file_folder_path
        if not UtilClient.is_unset(request.file_name):
            body['FileName'] = request.file_name
        if not UtilClient.is_unset(request.file_type):
            body['FileType'] = request.file_type
        if not UtilClient.is_unset(request.origin_resource_name):
            body['OriginResourceName'] = request.origin_resource_name
        if not UtilClient.is_unset(request.owner):
            body['Owner'] = request.owner
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.register_to_calc_engine):
            body['RegisterToCalcEngine'] = request.register_to_calc_engine
        if not UtilClient.is_unset(request.resource_file):
            body['ResourceFile'] = request.resource_file
        if not UtilClient.is_unset(request.storage_url):
            body['StorageURL'] = request.storage_url
        if not UtilClient.is_unset(request.upload_mode):
            body['UploadMode'] = request.upload_mode
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateResourceFile',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateResourceFileResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_resource_file(
        self,
        request: dataworks_public_20240518_models.CreateResourceFileRequest,
    ) -> dataworks_public_20240518_models.CreateResourceFileResponse:
        """
        @summary Creates a resource file in DataStudio. The following types are supported: JAR, Archive, File, and Python.
        
        @param request: CreateResourceFileRequest
        @return: CreateResourceFileResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_resource_file_with_options(request, runtime)

    async def create_resource_file_async(
        self,
        request: dataworks_public_20240518_models.CreateResourceFileRequest,
    ) -> dataworks_public_20240518_models.CreateResourceFileResponse:
        """
        @summary Creates a resource file in DataStudio. The following types are supported: JAR, Archive, File, and Python.
        
        @param request: CreateResourceFileRequest
        @return: CreateResourceFileResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_resource_file_with_options_async(request, runtime)

    def create_resource_file_advance(
        self,
        request: dataworks_public_20240518_models.CreateResourceFileAdvanceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateResourceFileResponse:
        # Step 0: init client
        credential_model = None
        if UtilClient.is_unset(self._credential):
            raise TeaException({
                'code': 'InvalidCredentials',
                'message': 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
            })
        credential_model = self._credential.get_credential()
        access_key_id = credential_model.access_key_id
        access_key_secret = credential_model.access_key_secret
        security_token = credential_model.security_token
        credential_type = credential_model.type
        open_platform_endpoint = self._open_platform_endpoint
        if UtilClient.empty(open_platform_endpoint):
            open_platform_endpoint = 'openplatform.aliyuncs.com'
        if UtilClient.is_unset(credential_type):
            credential_type = 'access_key'
        auth_config = open_api_models.Config(
            access_key_id=access_key_id,
            access_key_secret=access_key_secret,
            security_token=security_token,
            type=credential_type,
            endpoint=open_platform_endpoint,
            protocol=self._protocol,
            region_id=self._region_id
        )
        auth_client = OpenApiClient(auth_config)
        auth_request = {
            'Product': 'dataworks-public',
            'RegionId': self._region_id
        }
        auth_req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(auth_request)
        )
        auth_params = open_api_models.Params(
            action='AuthorizeFileUpload',
            version='2019-12-19',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        auth_response = {}
        file_obj = file_form_models.FileField()
        oss_header = {}
        tmp_body = {}
        use_accelerate = False
        auth_response_body = {}
        create_resource_file_req = dataworks_public_20240518_models.CreateResourceFileRequest()
        OpenApiUtilClient.convert(request, create_resource_file_req)
        if not UtilClient.is_unset(request.resource_file_object):
            tmp_resp_0 = auth_client.call_api(auth_params, auth_req, runtime)
            auth_response = UtilClient.assert_as_map(tmp_resp_0)
            tmp_body = UtilClient.assert_as_map(auth_response.get('body'))
            use_accelerate = UtilClient.assert_as_boolean(tmp_body.get('UseAccelerate'))
            auth_response_body = UtilClient.stringify_map_value(tmp_body)
            file_obj = file_form_models.FileField(
                filename=auth_response_body.get('ObjectKey'),
                content=request.resource_file_object,
                content_type=''
            )
            oss_header = {
                'host': f"{auth_response_body.get('Bucket')}.{OpenApiUtilClient.get_endpoint(auth_response_body.get('Endpoint'), use_accelerate, self._endpoint_type)}",
                'OSSAccessKeyId': auth_response_body.get('AccessKeyId'),
                'policy': auth_response_body.get('EncodedPolicy'),
                'Signature': auth_response_body.get('Signature'),
                'key': auth_response_body.get('ObjectKey'),
                'file': file_obj,
                'success_action_status': '201'
            }
            self._post_ossobject(auth_response_body.get('Bucket'), oss_header)
            create_resource_file_req.resource_file = f"http://{auth_response_body.get('Bucket')}.{auth_response_body.get('Endpoint')}/{auth_response_body.get('ObjectKey')}"
        create_resource_file_resp = self.create_resource_file_with_options(create_resource_file_req, runtime)
        return create_resource_file_resp

    async def create_resource_file_advance_async(
        self,
        request: dataworks_public_20240518_models.CreateResourceFileAdvanceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateResourceFileResponse:
        # Step 0: init client
        credential_model = None
        if UtilClient.is_unset(self._credential):
            raise TeaException({
                'code': 'InvalidCredentials',
                'message': 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
            })
        credential_model = await self._credential.get_credential_async()
        access_key_id = credential_model.access_key_id
        access_key_secret = credential_model.access_key_secret
        security_token = credential_model.security_token
        credential_type = credential_model.type
        open_platform_endpoint = self._open_platform_endpoint
        if UtilClient.empty(open_platform_endpoint):
            open_platform_endpoint = 'openplatform.aliyuncs.com'
        if UtilClient.is_unset(credential_type):
            credential_type = 'access_key'
        auth_config = open_api_models.Config(
            access_key_id=access_key_id,
            access_key_secret=access_key_secret,
            security_token=security_token,
            type=credential_type,
            endpoint=open_platform_endpoint,
            protocol=self._protocol,
            region_id=self._region_id
        )
        auth_client = OpenApiClient(auth_config)
        auth_request = {
            'Product': 'dataworks-public',
            'RegionId': self._region_id
        }
        auth_req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(auth_request)
        )
        auth_params = open_api_models.Params(
            action='AuthorizeFileUpload',
            version='2019-12-19',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        auth_response = {}
        file_obj = file_form_models.FileField()
        oss_header = {}
        tmp_body = {}
        use_accelerate = False
        auth_response_body = {}
        create_resource_file_req = dataworks_public_20240518_models.CreateResourceFileRequest()
        OpenApiUtilClient.convert(request, create_resource_file_req)
        if not UtilClient.is_unset(request.resource_file_object):
            tmp_resp_0 = await auth_client.call_api_async(auth_params, auth_req, runtime)
            auth_response = UtilClient.assert_as_map(tmp_resp_0)
            tmp_body = UtilClient.assert_as_map(auth_response.get('body'))
            use_accelerate = UtilClient.assert_as_boolean(tmp_body.get('UseAccelerate'))
            auth_response_body = UtilClient.stringify_map_value(tmp_body)
            file_obj = file_form_models.FileField(
                filename=auth_response_body.get('ObjectKey'),
                content=request.resource_file_object,
                content_type=''
            )
            oss_header = {
                'host': f"{auth_response_body.get('Bucket')}.{OpenApiUtilClient.get_endpoint(auth_response_body.get('Endpoint'), use_accelerate, self._endpoint_type)}",
                'OSSAccessKeyId': auth_response_body.get('AccessKeyId'),
                'policy': auth_response_body.get('EncodedPolicy'),
                'Signature': auth_response_body.get('Signature'),
                'key': auth_response_body.get('ObjectKey'),
                'file': file_obj,
                'success_action_status': '201'
            }
            await self._post_ossobject_async(auth_response_body.get('Bucket'), oss_header)
            create_resource_file_req.resource_file = f"http://{auth_response_body.get('Bucket')}.{auth_response_body.get('Endpoint')}/{auth_response_body.get('ObjectKey')}"
        create_resource_file_resp = await self.create_resource_file_with_options_async(create_resource_file_req, runtime)
        return create_resource_file_resp

    def create_resource_group_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.CreateResourceGroupRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateResourceGroupResponse:
        """
        @summary Creates a serverless resource group.
        
        @description 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
        2.  *Before you call this API operation, you must make sure that you have a good command of the billing details and [pricing](https://help.aliyun.com/document_detail/2680173.html) of serverless resource groups.
        
        @param tmp_req: CreateResourceGroupRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateResourceGroupResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.CreateResourceGroupShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.aliyun_resource_tags):
            request.aliyun_resource_tags_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.aliyun_resource_tags, 'AliyunResourceTags', 'json')
        body = {}
        if not UtilClient.is_unset(request.aliyun_resource_group_id):
            body['AliyunResourceGroupId'] = request.aliyun_resource_group_id
        if not UtilClient.is_unset(request.aliyun_resource_tags_shrink):
            body['AliyunResourceTags'] = request.aliyun_resource_tags_shrink
        if not UtilClient.is_unset(request.auto_renew_enabled):
            body['AutoRenewEnabled'] = request.auto_renew_enabled
        if not UtilClient.is_unset(request.client_token):
            body['ClientToken'] = request.client_token
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.payment_duration):
            body['PaymentDuration'] = request.payment_duration
        if not UtilClient.is_unset(request.payment_duration_unit):
            body['PaymentDurationUnit'] = request.payment_duration_unit
        if not UtilClient.is_unset(request.payment_type):
            body['PaymentType'] = request.payment_type
        if not UtilClient.is_unset(request.remark):
            body['Remark'] = request.remark
        if not UtilClient.is_unset(request.spec):
            body['Spec'] = request.spec
        if not UtilClient.is_unset(request.vpc_id):
            body['VpcId'] = request.vpc_id
        if not UtilClient.is_unset(request.vswitch_id):
            body['VswitchId'] = request.vswitch_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateResourceGroup',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateResourceGroupResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_resource_group_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.CreateResourceGroupRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateResourceGroupResponse:
        """
        @summary Creates a serverless resource group.
        
        @description 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
        2.  *Before you call this API operation, you must make sure that you have a good command of the billing details and [pricing](https://help.aliyun.com/document_detail/2680173.html) of serverless resource groups.
        
        @param tmp_req: CreateResourceGroupRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateResourceGroupResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.CreateResourceGroupShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.aliyun_resource_tags):
            request.aliyun_resource_tags_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.aliyun_resource_tags, 'AliyunResourceTags', 'json')
        body = {}
        if not UtilClient.is_unset(request.aliyun_resource_group_id):
            body['AliyunResourceGroupId'] = request.aliyun_resource_group_id
        if not UtilClient.is_unset(request.aliyun_resource_tags_shrink):
            body['AliyunResourceTags'] = request.aliyun_resource_tags_shrink
        if not UtilClient.is_unset(request.auto_renew_enabled):
            body['AutoRenewEnabled'] = request.auto_renew_enabled
        if not UtilClient.is_unset(request.client_token):
            body['ClientToken'] = request.client_token
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.payment_duration):
            body['PaymentDuration'] = request.payment_duration
        if not UtilClient.is_unset(request.payment_duration_unit):
            body['PaymentDurationUnit'] = request.payment_duration_unit
        if not UtilClient.is_unset(request.payment_type):
            body['PaymentType'] = request.payment_type
        if not UtilClient.is_unset(request.remark):
            body['Remark'] = request.remark
        if not UtilClient.is_unset(request.spec):
            body['Spec'] = request.spec
        if not UtilClient.is_unset(request.vpc_id):
            body['VpcId'] = request.vpc_id
        if not UtilClient.is_unset(request.vswitch_id):
            body['VswitchId'] = request.vswitch_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateResourceGroup',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateResourceGroupResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_resource_group(
        self,
        request: dataworks_public_20240518_models.CreateResourceGroupRequest,
    ) -> dataworks_public_20240518_models.CreateResourceGroupResponse:
        """
        @summary Creates a serverless resource group.
        
        @description 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
        2.  *Before you call this API operation, you must make sure that you have a good command of the billing details and [pricing](https://help.aliyun.com/document_detail/2680173.html) of serverless resource groups.
        
        @param request: CreateResourceGroupRequest
        @return: CreateResourceGroupResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_resource_group_with_options(request, runtime)

    async def create_resource_group_async(
        self,
        request: dataworks_public_20240518_models.CreateResourceGroupRequest,
    ) -> dataworks_public_20240518_models.CreateResourceGroupResponse:
        """
        @summary Creates a serverless resource group.
        
        @description 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
        2.  *Before you call this API operation, you must make sure that you have a good command of the billing details and [pricing](https://help.aliyun.com/document_detail/2680173.html) of serverless resource groups.
        
        @param request: CreateResourceGroupRequest
        @return: CreateResourceGroupResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_resource_group_with_options_async(request, runtime)

    def create_route_with_options(
        self,
        request: dataworks_public_20240518_models.CreateRouteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateRouteResponse:
        """
        @summary Creates a route for a network.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: CreateRouteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateRouteResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.destination_cidr):
            body['DestinationCidr'] = request.destination_cidr
        if not UtilClient.is_unset(request.network_id):
            body['NetworkId'] = request.network_id
        if not UtilClient.is_unset(request.resource_group_id):
            body['ResourceGroupId'] = request.resource_group_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateRoute',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateRouteResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_route_with_options_async(
        self,
        request: dataworks_public_20240518_models.CreateRouteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateRouteResponse:
        """
        @summary Creates a route for a network.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: CreateRouteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateRouteResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.destination_cidr):
            body['DestinationCidr'] = request.destination_cidr
        if not UtilClient.is_unset(request.network_id):
            body['NetworkId'] = request.network_id
        if not UtilClient.is_unset(request.resource_group_id):
            body['ResourceGroupId'] = request.resource_group_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateRoute',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateRouteResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_route(
        self,
        request: dataworks_public_20240518_models.CreateRouteRequest,
    ) -> dataworks_public_20240518_models.CreateRouteResponse:
        """
        @summary Creates a route for a network.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: CreateRouteRequest
        @return: CreateRouteResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_route_with_options(request, runtime)

    async def create_route_async(
        self,
        request: dataworks_public_20240518_models.CreateRouteRequest,
    ) -> dataworks_public_20240518_models.CreateRouteResponse:
        """
        @summary Creates a route for a network.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: CreateRouteRequest
        @return: CreateRouteResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_route_with_options_async(request, runtime)

    def create_udf_file_with_options(
        self,
        request: dataworks_public_20240518_models.CreateUdfFileRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateUdfFileResponse:
        """
        @param request: CreateUdfFileRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateUdfFileResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.class_name):
            body['ClassName'] = request.class_name
        if not UtilClient.is_unset(request.cmd_description):
            body['CmdDescription'] = request.cmd_description
        if not UtilClient.is_unset(request.create_folder_if_not_exists):
            body['CreateFolderIfNotExists'] = request.create_folder_if_not_exists
        if not UtilClient.is_unset(request.example):
            body['Example'] = request.example
        if not UtilClient.is_unset(request.file_folder_path):
            body['FileFolderPath'] = request.file_folder_path
        if not UtilClient.is_unset(request.file_name):
            body['FileName'] = request.file_name
        if not UtilClient.is_unset(request.function_type):
            body['FunctionType'] = request.function_type
        if not UtilClient.is_unset(request.parameter_description):
            body['ParameterDescription'] = request.parameter_description
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        if not UtilClient.is_unset(request.resources):
            body['Resources'] = request.resources
        if not UtilClient.is_unset(request.return_value):
            body['ReturnValue'] = request.return_value
        if not UtilClient.is_unset(request.udf_description):
            body['UdfDescription'] = request.udf_description
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateUdfFile',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateUdfFileResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_udf_file_with_options_async(
        self,
        request: dataworks_public_20240518_models.CreateUdfFileRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateUdfFileResponse:
        """
        @param request: CreateUdfFileRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateUdfFileResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.class_name):
            body['ClassName'] = request.class_name
        if not UtilClient.is_unset(request.cmd_description):
            body['CmdDescription'] = request.cmd_description
        if not UtilClient.is_unset(request.create_folder_if_not_exists):
            body['CreateFolderIfNotExists'] = request.create_folder_if_not_exists
        if not UtilClient.is_unset(request.example):
            body['Example'] = request.example
        if not UtilClient.is_unset(request.file_folder_path):
            body['FileFolderPath'] = request.file_folder_path
        if not UtilClient.is_unset(request.file_name):
            body['FileName'] = request.file_name
        if not UtilClient.is_unset(request.function_type):
            body['FunctionType'] = request.function_type
        if not UtilClient.is_unset(request.parameter_description):
            body['ParameterDescription'] = request.parameter_description
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        if not UtilClient.is_unset(request.resources):
            body['Resources'] = request.resources
        if not UtilClient.is_unset(request.return_value):
            body['ReturnValue'] = request.return_value
        if not UtilClient.is_unset(request.udf_description):
            body['UdfDescription'] = request.udf_description
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateUdfFile',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateUdfFileResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_udf_file(
        self,
        request: dataworks_public_20240518_models.CreateUdfFileRequest,
    ) -> dataworks_public_20240518_models.CreateUdfFileResponse:
        """
        @param request: CreateUdfFileRequest
        @return: CreateUdfFileResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_udf_file_with_options(request, runtime)

    async def create_udf_file_async(
        self,
        request: dataworks_public_20240518_models.CreateUdfFileRequest,
    ) -> dataworks_public_20240518_models.CreateUdfFileResponse:
        """
        @param request: CreateUdfFileRequest
        @return: CreateUdfFileResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_udf_file_with_options_async(request, runtime)

    def create_workflow_definition_with_options(
        self,
        request: dataworks_public_20240518_models.CreateWorkflowDefinitionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateWorkflowDefinitionResponse:
        """
        @summary Creates a workflow in a directory of DataStudio.
        
        @description > You cannot use this API operation to create multiple workflows at a time. If you specify multiple workflows by using FlowSpec, the system creates only the first specified workflow. Other specified workflows and the nodes in the workflows are ignored. You can call the CreateNode operation to create a node.
        
        @param request: CreateWorkflowDefinitionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateWorkflowDefinitionResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.spec):
            body['Spec'] = request.spec
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateWorkflowDefinition',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateWorkflowDefinitionResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_workflow_definition_with_options_async(
        self,
        request: dataworks_public_20240518_models.CreateWorkflowDefinitionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateWorkflowDefinitionResponse:
        """
        @summary Creates a workflow in a directory of DataStudio.
        
        @description > You cannot use this API operation to create multiple workflows at a time. If you specify multiple workflows by using FlowSpec, the system creates only the first specified workflow. Other specified workflows and the nodes in the workflows are ignored. You can call the CreateNode operation to create a node.
        
        @param request: CreateWorkflowDefinitionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateWorkflowDefinitionResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.spec):
            body['Spec'] = request.spec
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateWorkflowDefinition',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateWorkflowDefinitionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_workflow_definition(
        self,
        request: dataworks_public_20240518_models.CreateWorkflowDefinitionRequest,
    ) -> dataworks_public_20240518_models.CreateWorkflowDefinitionResponse:
        """
        @summary Creates a workflow in a directory of DataStudio.
        
        @description > You cannot use this API operation to create multiple workflows at a time. If you specify multiple workflows by using FlowSpec, the system creates only the first specified workflow. Other specified workflows and the nodes in the workflows are ignored. You can call the CreateNode operation to create a node.
        
        @param request: CreateWorkflowDefinitionRequest
        @return: CreateWorkflowDefinitionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_workflow_definition_with_options(request, runtime)

    async def create_workflow_definition_async(
        self,
        request: dataworks_public_20240518_models.CreateWorkflowDefinitionRequest,
    ) -> dataworks_public_20240518_models.CreateWorkflowDefinitionResponse:
        """
        @summary Creates a workflow in a directory of DataStudio.
        
        @description > You cannot use this API operation to create multiple workflows at a time. If you specify multiple workflows by using FlowSpec, the system creates only the first specified workflow. Other specified workflows and the nodes in the workflows are ignored. You can call the CreateNode operation to create a node.
        
        @param request: CreateWorkflowDefinitionRequest
        @return: CreateWorkflowDefinitionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_workflow_definition_with_options_async(request, runtime)

    def create_workflow_instances_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.CreateWorkflowInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateWorkflowInstancesResponse:
        """
        @summary Creates a workflow instance, such as a data backfill workflow instance, based on configurations.
        
        @param tmp_req: CreateWorkflowInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateWorkflowInstancesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.CreateWorkflowInstancesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.default_run_properties):
            request.default_run_properties_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.default_run_properties, 'DefaultRunProperties', 'json')
        if not UtilClient.is_unset(tmp_req.periods):
            request.periods_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.periods, 'Periods', 'json')
        if not UtilClient.is_unset(tmp_req.tags):
            request.tags_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tags, 'Tags', 'json')
        body = {}
        if not UtilClient.is_unset(request.auto_start_enabled):
            body['AutoStartEnabled'] = request.auto_start_enabled
        if not UtilClient.is_unset(request.comment):
            body['Comment'] = request.comment
        if not UtilClient.is_unset(request.default_run_properties_shrink):
            body['DefaultRunProperties'] = request.default_run_properties_shrink
        if not UtilClient.is_unset(request.env_type):
            body['EnvType'] = request.env_type
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.periods_shrink):
            body['Periods'] = request.periods_shrink
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.tag_creation_policy):
            body['TagCreationPolicy'] = request.tag_creation_policy
        if not UtilClient.is_unset(request.tags_shrink):
            body['Tags'] = request.tags_shrink
        if not UtilClient.is_unset(request.task_parameters):
            body['TaskParameters'] = request.task_parameters
        if not UtilClient.is_unset(request.type):
            body['Type'] = request.type
        if not UtilClient.is_unset(request.workflow_id):
            body['WorkflowId'] = request.workflow_id
        if not UtilClient.is_unset(request.workflow_parameters):
            body['WorkflowParameters'] = request.workflow_parameters
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateWorkflowInstances',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateWorkflowInstancesResponse(),
            self.call_api(params, req, runtime)
        )

    async def create_workflow_instances_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.CreateWorkflowInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.CreateWorkflowInstancesResponse:
        """
        @summary Creates a workflow instance, such as a data backfill workflow instance, based on configurations.
        
        @param tmp_req: CreateWorkflowInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: CreateWorkflowInstancesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.CreateWorkflowInstancesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.default_run_properties):
            request.default_run_properties_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.default_run_properties, 'DefaultRunProperties', 'json')
        if not UtilClient.is_unset(tmp_req.periods):
            request.periods_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.periods, 'Periods', 'json')
        if not UtilClient.is_unset(tmp_req.tags):
            request.tags_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tags, 'Tags', 'json')
        body = {}
        if not UtilClient.is_unset(request.auto_start_enabled):
            body['AutoStartEnabled'] = request.auto_start_enabled
        if not UtilClient.is_unset(request.comment):
            body['Comment'] = request.comment
        if not UtilClient.is_unset(request.default_run_properties_shrink):
            body['DefaultRunProperties'] = request.default_run_properties_shrink
        if not UtilClient.is_unset(request.env_type):
            body['EnvType'] = request.env_type
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.periods_shrink):
            body['Periods'] = request.periods_shrink
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.tag_creation_policy):
            body['TagCreationPolicy'] = request.tag_creation_policy
        if not UtilClient.is_unset(request.tags_shrink):
            body['Tags'] = request.tags_shrink
        if not UtilClient.is_unset(request.task_parameters):
            body['TaskParameters'] = request.task_parameters
        if not UtilClient.is_unset(request.type):
            body['Type'] = request.type
        if not UtilClient.is_unset(request.workflow_id):
            body['WorkflowId'] = request.workflow_id
        if not UtilClient.is_unset(request.workflow_parameters):
            body['WorkflowParameters'] = request.workflow_parameters
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='CreateWorkflowInstances',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.CreateWorkflowInstancesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def create_workflow_instances(
        self,
        request: dataworks_public_20240518_models.CreateWorkflowInstancesRequest,
    ) -> dataworks_public_20240518_models.CreateWorkflowInstancesResponse:
        """
        @summary Creates a workflow instance, such as a data backfill workflow instance, based on configurations.
        
        @param request: CreateWorkflowInstancesRequest
        @return: CreateWorkflowInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.create_workflow_instances_with_options(request, runtime)

    async def create_workflow_instances_async(
        self,
        request: dataworks_public_20240518_models.CreateWorkflowInstancesRequest,
    ) -> dataworks_public_20240518_models.CreateWorkflowInstancesResponse:
        """
        @summary Creates a workflow instance, such as a data backfill workflow instance, based on configurations.
        
        @param request: CreateWorkflowInstancesRequest
        @return: CreateWorkflowInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.create_workflow_instances_with_options_async(request, runtime)

    def delete_alert_rule_with_options(
        self,
        request: dataworks_public_20240518_models.DeleteAlertRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteAlertRuleResponse:
        """
        @summary Deletes a custom monitoring alert rule.
        
        @param request: DeleteAlertRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteAlertRuleResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteAlertRule',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteAlertRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_alert_rule_with_options_async(
        self,
        request: dataworks_public_20240518_models.DeleteAlertRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteAlertRuleResponse:
        """
        @summary Deletes a custom monitoring alert rule.
        
        @param request: DeleteAlertRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteAlertRuleResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteAlertRule',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteAlertRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_alert_rule(
        self,
        request: dataworks_public_20240518_models.DeleteAlertRuleRequest,
    ) -> dataworks_public_20240518_models.DeleteAlertRuleResponse:
        """
        @summary Deletes a custom monitoring alert rule.
        
        @param request: DeleteAlertRuleRequest
        @return: DeleteAlertRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_alert_rule_with_options(request, runtime)

    async def delete_alert_rule_async(
        self,
        request: dataworks_public_20240518_models.DeleteAlertRuleRequest,
    ) -> dataworks_public_20240518_models.DeleteAlertRuleResponse:
        """
        @summary Deletes a custom monitoring alert rule.
        
        @param request: DeleteAlertRuleRequest
        @return: DeleteAlertRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_alert_rule_with_options_async(request, runtime)

    def delete_business_with_options(
        self,
        request: dataworks_public_20240518_models.DeleteBusinessRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteBusinessResponse:
        """
        @param request: DeleteBusinessRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteBusinessResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.business_id):
            body['BusinessId'] = request.business_id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteBusiness',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteBusinessResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_business_with_options_async(
        self,
        request: dataworks_public_20240518_models.DeleteBusinessRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteBusinessResponse:
        """
        @param request: DeleteBusinessRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteBusinessResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.business_id):
            body['BusinessId'] = request.business_id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteBusiness',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteBusinessResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_business(
        self,
        request: dataworks_public_20240518_models.DeleteBusinessRequest,
    ) -> dataworks_public_20240518_models.DeleteBusinessResponse:
        """
        @param request: DeleteBusinessRequest
        @return: DeleteBusinessResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_business_with_options(request, runtime)

    async def delete_business_async(
        self,
        request: dataworks_public_20240518_models.DeleteBusinessRequest,
    ) -> dataworks_public_20240518_models.DeleteBusinessResponse:
        """
        @param request: DeleteBusinessRequest
        @return: DeleteBusinessResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_business_with_options_async(request, runtime)

    def delete_certificate_with_options(
        self,
        request: dataworks_public_20240518_models.DeleteCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteCertificateResponse:
        """
        @summary Deletes a certificate file.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  You can call this operation only if you are assigned one of the following roles in DataWorks: Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M.
        
        @param request: DeleteCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteCertificateResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteCertificate',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteCertificateResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_certificate_with_options_async(
        self,
        request: dataworks_public_20240518_models.DeleteCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteCertificateResponse:
        """
        @summary Deletes a certificate file.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  You can call this operation only if you are assigned one of the following roles in DataWorks: Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M.
        
        @param request: DeleteCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteCertificateResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteCertificate',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteCertificateResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_certificate(
        self,
        request: dataworks_public_20240518_models.DeleteCertificateRequest,
    ) -> dataworks_public_20240518_models.DeleteCertificateResponse:
        """
        @summary Deletes a certificate file.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  You can call this operation only if you are assigned one of the following roles in DataWorks: Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M.
        
        @param request: DeleteCertificateRequest
        @return: DeleteCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_certificate_with_options(request, runtime)

    async def delete_certificate_async(
        self,
        request: dataworks_public_20240518_models.DeleteCertificateRequest,
    ) -> dataworks_public_20240518_models.DeleteCertificateResponse:
        """
        @summary Deletes a certificate file.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  You can call this operation only if you are assigned one of the following roles in DataWorks: Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M.
        
        @param request: DeleteCertificateRequest
        @return: DeleteCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_certificate_with_options_async(request, runtime)

    def delete_dialarm_rule_with_options(
        self,
        request: dataworks_public_20240518_models.DeleteDIAlarmRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteDIAlarmRuleResponse:
        """
        @summary Deletes an alert rule configured for a synchronization task.
        
        @param request: DeleteDIAlarmRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteDIAlarmRuleResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteDIAlarmRule',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteDIAlarmRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_dialarm_rule_with_options_async(
        self,
        request: dataworks_public_20240518_models.DeleteDIAlarmRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteDIAlarmRuleResponse:
        """
        @summary Deletes an alert rule configured for a synchronization task.
        
        @param request: DeleteDIAlarmRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteDIAlarmRuleResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteDIAlarmRule',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteDIAlarmRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_dialarm_rule(
        self,
        request: dataworks_public_20240518_models.DeleteDIAlarmRuleRequest,
    ) -> dataworks_public_20240518_models.DeleteDIAlarmRuleResponse:
        """
        @summary Deletes an alert rule configured for a synchronization task.
        
        @param request: DeleteDIAlarmRuleRequest
        @return: DeleteDIAlarmRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_dialarm_rule_with_options(request, runtime)

    async def delete_dialarm_rule_async(
        self,
        request: dataworks_public_20240518_models.DeleteDIAlarmRuleRequest,
    ) -> dataworks_public_20240518_models.DeleteDIAlarmRuleResponse:
        """
        @summary Deletes an alert rule configured for a synchronization task.
        
        @param request: DeleteDIAlarmRuleRequest
        @return: DeleteDIAlarmRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_dialarm_rule_with_options_async(request, runtime)

    def delete_dijob_with_options(
        self,
        request: dataworks_public_20240518_models.DeleteDIJobRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteDIJobResponse:
        """
        @summary Deletes a new-version synchronization task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: DeleteDIJobRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteDIJobResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteDIJob',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteDIJobResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_dijob_with_options_async(
        self,
        request: dataworks_public_20240518_models.DeleteDIJobRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteDIJobResponse:
        """
        @summary Deletes a new-version synchronization task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: DeleteDIJobRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteDIJobResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteDIJob',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteDIJobResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_dijob(
        self,
        request: dataworks_public_20240518_models.DeleteDIJobRequest,
    ) -> dataworks_public_20240518_models.DeleteDIJobResponse:
        """
        @summary Deletes a new-version synchronization task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: DeleteDIJobRequest
        @return: DeleteDIJobResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_dijob_with_options(request, runtime)

    async def delete_dijob_async(
        self,
        request: dataworks_public_20240518_models.DeleteDIJobRequest,
    ) -> dataworks_public_20240518_models.DeleteDIJobResponse:
        """
        @summary Deletes a new-version synchronization task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: DeleteDIJobRequest
        @return: DeleteDIJobResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_dijob_with_options_async(request, runtime)

    def delete_data_asset_tag_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.DeleteDataAssetTagRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteDataAssetTagResponse:
        """
        @summary Deletes a tag.
        
        @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
        
        @param tmp_req: DeleteDataAssetTagRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteDataAssetTagResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.DeleteDataAssetTagShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.values):
            request.values_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.values, 'Values', 'json')
        query = {}
        if not UtilClient.is_unset(request.key):
            query['Key'] = request.key
        if not UtilClient.is_unset(request.values_shrink):
            query['Values'] = request.values_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteDataAssetTag',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteDataAssetTagResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_data_asset_tag_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.DeleteDataAssetTagRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteDataAssetTagResponse:
        """
        @summary Deletes a tag.
        
        @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
        
        @param tmp_req: DeleteDataAssetTagRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteDataAssetTagResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.DeleteDataAssetTagShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.values):
            request.values_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.values, 'Values', 'json')
        query = {}
        if not UtilClient.is_unset(request.key):
            query['Key'] = request.key
        if not UtilClient.is_unset(request.values_shrink):
            query['Values'] = request.values_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteDataAssetTag',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteDataAssetTagResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_data_asset_tag(
        self,
        request: dataworks_public_20240518_models.DeleteDataAssetTagRequest,
    ) -> dataworks_public_20240518_models.DeleteDataAssetTagResponse:
        """
        @summary Deletes a tag.
        
        @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
        
        @param request: DeleteDataAssetTagRequest
        @return: DeleteDataAssetTagResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_data_asset_tag_with_options(request, runtime)

    async def delete_data_asset_tag_async(
        self,
        request: dataworks_public_20240518_models.DeleteDataAssetTagRequest,
    ) -> dataworks_public_20240518_models.DeleteDataAssetTagResponse:
        """
        @summary Deletes a tag.
        
        @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
        
        @param request: DeleteDataAssetTagRequest
        @return: DeleteDataAssetTagResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_data_asset_tag_with_options_async(request, runtime)

    def delete_data_quality_alert_rule_with_options(
        self,
        request: dataworks_public_20240518_models.DeleteDataQualityAlertRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteDataQualityAlertRuleResponse:
        """
        @summary 删除数据质量告警规则
        
        @param request: DeleteDataQualityAlertRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteDataQualityAlertRuleResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteDataQualityAlertRule',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteDataQualityAlertRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_data_quality_alert_rule_with_options_async(
        self,
        request: dataworks_public_20240518_models.DeleteDataQualityAlertRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteDataQualityAlertRuleResponse:
        """
        @summary 删除数据质量告警规则
        
        @param request: DeleteDataQualityAlertRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteDataQualityAlertRuleResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteDataQualityAlertRule',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteDataQualityAlertRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_data_quality_alert_rule(
        self,
        request: dataworks_public_20240518_models.DeleteDataQualityAlertRuleRequest,
    ) -> dataworks_public_20240518_models.DeleteDataQualityAlertRuleResponse:
        """
        @summary 删除数据质量告警规则
        
        @param request: DeleteDataQualityAlertRuleRequest
        @return: DeleteDataQualityAlertRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_data_quality_alert_rule_with_options(request, runtime)

    async def delete_data_quality_alert_rule_async(
        self,
        request: dataworks_public_20240518_models.DeleteDataQualityAlertRuleRequest,
    ) -> dataworks_public_20240518_models.DeleteDataQualityAlertRuleResponse:
        """
        @summary 删除数据质量告警规则
        
        @param request: DeleteDataQualityAlertRuleRequest
        @return: DeleteDataQualityAlertRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_data_quality_alert_rule_with_options_async(request, runtime)

    def delete_data_quality_evaluation_task_with_options(
        self,
        request: dataworks_public_20240518_models.DeleteDataQualityEvaluationTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteDataQualityEvaluationTaskResponse:
        """
        @summary Deletes a data quality monitoring task.
        
        @param request: DeleteDataQualityEvaluationTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteDataQualityEvaluationTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteDataQualityEvaluationTask',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteDataQualityEvaluationTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_data_quality_evaluation_task_with_options_async(
        self,
        request: dataworks_public_20240518_models.DeleteDataQualityEvaluationTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteDataQualityEvaluationTaskResponse:
        """
        @summary Deletes a data quality monitoring task.
        
        @param request: DeleteDataQualityEvaluationTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteDataQualityEvaluationTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteDataQualityEvaluationTask',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteDataQualityEvaluationTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_data_quality_evaluation_task(
        self,
        request: dataworks_public_20240518_models.DeleteDataQualityEvaluationTaskRequest,
    ) -> dataworks_public_20240518_models.DeleteDataQualityEvaluationTaskResponse:
        """
        @summary Deletes a data quality monitoring task.
        
        @param request: DeleteDataQualityEvaluationTaskRequest
        @return: DeleteDataQualityEvaluationTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_data_quality_evaluation_task_with_options(request, runtime)

    async def delete_data_quality_evaluation_task_async(
        self,
        request: dataworks_public_20240518_models.DeleteDataQualityEvaluationTaskRequest,
    ) -> dataworks_public_20240518_models.DeleteDataQualityEvaluationTaskResponse:
        """
        @summary Deletes a data quality monitoring task.
        
        @param request: DeleteDataQualityEvaluationTaskRequest
        @return: DeleteDataQualityEvaluationTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_data_quality_evaluation_task_with_options_async(request, runtime)

    def delete_data_quality_rule_with_options(
        self,
        request: dataworks_public_20240518_models.DeleteDataQualityRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteDataQualityRuleResponse:
        """
        @summary Deletes a data quality monitoring rule.
        
        @param request: DeleteDataQualityRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteDataQualityRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteDataQualityRule',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteDataQualityRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_data_quality_rule_with_options_async(
        self,
        request: dataworks_public_20240518_models.DeleteDataQualityRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteDataQualityRuleResponse:
        """
        @summary Deletes a data quality monitoring rule.
        
        @param request: DeleteDataQualityRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteDataQualityRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteDataQualityRule',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteDataQualityRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_data_quality_rule(
        self,
        request: dataworks_public_20240518_models.DeleteDataQualityRuleRequest,
    ) -> dataworks_public_20240518_models.DeleteDataQualityRuleResponse:
        """
        @summary Deletes a data quality monitoring rule.
        
        @param request: DeleteDataQualityRuleRequest
        @return: DeleteDataQualityRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_data_quality_rule_with_options(request, runtime)

    async def delete_data_quality_rule_async(
        self,
        request: dataworks_public_20240518_models.DeleteDataQualityRuleRequest,
    ) -> dataworks_public_20240518_models.DeleteDataQualityRuleResponse:
        """
        @summary Deletes a data quality monitoring rule.
        
        @param request: DeleteDataQualityRuleRequest
        @return: DeleteDataQualityRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_data_quality_rule_with_options_async(request, runtime)

    def delete_data_quality_rule_template_with_options(
        self,
        request: dataworks_public_20240518_models.DeleteDataQualityRuleTemplateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteDataQualityRuleTemplateResponse:
        """
        @summary Deletes a data quality monitoring rule template.
        
        @param request: DeleteDataQualityRuleTemplateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteDataQualityRuleTemplateResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.code):
            query['Code'] = request.code
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteDataQualityRuleTemplate',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteDataQualityRuleTemplateResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_data_quality_rule_template_with_options_async(
        self,
        request: dataworks_public_20240518_models.DeleteDataQualityRuleTemplateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteDataQualityRuleTemplateResponse:
        """
        @summary Deletes a data quality monitoring rule template.
        
        @param request: DeleteDataQualityRuleTemplateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteDataQualityRuleTemplateResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.code):
            query['Code'] = request.code
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteDataQualityRuleTemplate',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteDataQualityRuleTemplateResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_data_quality_rule_template(
        self,
        request: dataworks_public_20240518_models.DeleteDataQualityRuleTemplateRequest,
    ) -> dataworks_public_20240518_models.DeleteDataQualityRuleTemplateResponse:
        """
        @summary Deletes a data quality monitoring rule template.
        
        @param request: DeleteDataQualityRuleTemplateRequest
        @return: DeleteDataQualityRuleTemplateResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_data_quality_rule_template_with_options(request, runtime)

    async def delete_data_quality_rule_template_async(
        self,
        request: dataworks_public_20240518_models.DeleteDataQualityRuleTemplateRequest,
    ) -> dataworks_public_20240518_models.DeleteDataQualityRuleTemplateResponse:
        """
        @summary Deletes a data quality monitoring rule template.
        
        @param request: DeleteDataQualityRuleTemplateRequest
        @return: DeleteDataQualityRuleTemplateResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_data_quality_rule_template_with_options_async(request, runtime)

    def delete_data_quality_scan_with_options(
        self,
        request: dataworks_public_20240518_models.DeleteDataQualityScanRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteDataQualityScanResponse:
        """
        @summary 删除数据质量监控
        
        @param request: DeleteDataQualityScanRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteDataQualityScanResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteDataQualityScan',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteDataQualityScanResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_data_quality_scan_with_options_async(
        self,
        request: dataworks_public_20240518_models.DeleteDataQualityScanRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteDataQualityScanResponse:
        """
        @summary 删除数据质量监控
        
        @param request: DeleteDataQualityScanRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteDataQualityScanResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteDataQualityScan',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteDataQualityScanResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_data_quality_scan(
        self,
        request: dataworks_public_20240518_models.DeleteDataQualityScanRequest,
    ) -> dataworks_public_20240518_models.DeleteDataQualityScanResponse:
        """
        @summary 删除数据质量监控
        
        @param request: DeleteDataQualityScanRequest
        @return: DeleteDataQualityScanResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_data_quality_scan_with_options(request, runtime)

    async def delete_data_quality_scan_async(
        self,
        request: dataworks_public_20240518_models.DeleteDataQualityScanRequest,
    ) -> dataworks_public_20240518_models.DeleteDataQualityScanResponse:
        """
        @summary 删除数据质量监控
        
        @param request: DeleteDataQualityScanRequest
        @return: DeleteDataQualityScanResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_data_quality_scan_with_options_async(request, runtime)

    def delete_data_quality_template_with_options(
        self,
        request: dataworks_public_20240518_models.DeleteDataQualityTemplateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteDataQualityTemplateResponse:
        """
        @summary 删除数据质量模板
        
        @param request: DeleteDataQualityTemplateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteDataQualityTemplateResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteDataQualityTemplate',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteDataQualityTemplateResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_data_quality_template_with_options_async(
        self,
        request: dataworks_public_20240518_models.DeleteDataQualityTemplateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteDataQualityTemplateResponse:
        """
        @summary 删除数据质量模板
        
        @param request: DeleteDataQualityTemplateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteDataQualityTemplateResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteDataQualityTemplate',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteDataQualityTemplateResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_data_quality_template(
        self,
        request: dataworks_public_20240518_models.DeleteDataQualityTemplateRequest,
    ) -> dataworks_public_20240518_models.DeleteDataQualityTemplateResponse:
        """
        @summary 删除数据质量模板
        
        @param request: DeleteDataQualityTemplateRequest
        @return: DeleteDataQualityTemplateResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_data_quality_template_with_options(request, runtime)

    async def delete_data_quality_template_async(
        self,
        request: dataworks_public_20240518_models.DeleteDataQualityTemplateRequest,
    ) -> dataworks_public_20240518_models.DeleteDataQualityTemplateResponse:
        """
        @summary 删除数据质量模板
        
        @param request: DeleteDataQualityTemplateRequest
        @return: DeleteDataQualityTemplateResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_data_quality_template_with_options_async(request, runtime)

    def delete_data_source_with_options(
        self,
        request: dataworks_public_20240518_models.DeleteDataSourceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteDataSourceResponse:
        """
        @summary Removes a data source by ID.
        
        @description 1.  This API operation is available for all Dataworks editions.
        2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
        Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
        
        @param request: DeleteDataSourceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteDataSourceResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteDataSource',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteDataSourceResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_data_source_with_options_async(
        self,
        request: dataworks_public_20240518_models.DeleteDataSourceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteDataSourceResponse:
        """
        @summary Removes a data source by ID.
        
        @description 1.  This API operation is available for all Dataworks editions.
        2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
        Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
        
        @param request: DeleteDataSourceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteDataSourceResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteDataSource',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteDataSourceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_data_source(
        self,
        request: dataworks_public_20240518_models.DeleteDataSourceRequest,
    ) -> dataworks_public_20240518_models.DeleteDataSourceResponse:
        """
        @summary Removes a data source by ID.
        
        @description 1.  This API operation is available for all Dataworks editions.
        2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
        Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
        
        @param request: DeleteDataSourceRequest
        @return: DeleteDataSourceResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_data_source_with_options(request, runtime)

    async def delete_data_source_async(
        self,
        request: dataworks_public_20240518_models.DeleteDataSourceRequest,
    ) -> dataworks_public_20240518_models.DeleteDataSourceResponse:
        """
        @summary Removes a data source by ID.
        
        @description 1.  This API operation is available for all Dataworks editions.
        2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
        Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
        
        @param request: DeleteDataSourceRequest
        @return: DeleteDataSourceResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_data_source_with_options_async(request, runtime)

    def delete_data_source_shared_rule_with_options(
        self,
        request: dataworks_public_20240518_models.DeleteDataSourceSharedRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteDataSourceSharedRuleResponse:
        """
        @summary Deletes a sharing rule of a data source by ID.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  If you want to delete a sharing rule of a data source from Workspace A to Workspace B, you must have the permissions to share the data source in Workspace A or Workspace B. You can call this operation only if you are assigned one of the following roles in DataWorks:
        Tenant Owner, Tenant Administrator, Workspace Administrator, and Workspace Owner
        
        @param request: DeleteDataSourceSharedRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteDataSourceSharedRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteDataSourceSharedRule',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteDataSourceSharedRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_data_source_shared_rule_with_options_async(
        self,
        request: dataworks_public_20240518_models.DeleteDataSourceSharedRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteDataSourceSharedRuleResponse:
        """
        @summary Deletes a sharing rule of a data source by ID.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  If you want to delete a sharing rule of a data source from Workspace A to Workspace B, you must have the permissions to share the data source in Workspace A or Workspace B. You can call this operation only if you are assigned one of the following roles in DataWorks:
        Tenant Owner, Tenant Administrator, Workspace Administrator, and Workspace Owner
        
        @param request: DeleteDataSourceSharedRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteDataSourceSharedRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteDataSourceSharedRule',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteDataSourceSharedRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_data_source_shared_rule(
        self,
        request: dataworks_public_20240518_models.DeleteDataSourceSharedRuleRequest,
    ) -> dataworks_public_20240518_models.DeleteDataSourceSharedRuleResponse:
        """
        @summary Deletes a sharing rule of a data source by ID.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  If you want to delete a sharing rule of a data source from Workspace A to Workspace B, you must have the permissions to share the data source in Workspace A or Workspace B. You can call this operation only if you are assigned one of the following roles in DataWorks:
        Tenant Owner, Tenant Administrator, Workspace Administrator, and Workspace Owner
        
        @param request: DeleteDataSourceSharedRuleRequest
        @return: DeleteDataSourceSharedRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_data_source_shared_rule_with_options(request, runtime)

    async def delete_data_source_shared_rule_async(
        self,
        request: dataworks_public_20240518_models.DeleteDataSourceSharedRuleRequest,
    ) -> dataworks_public_20240518_models.DeleteDataSourceSharedRuleResponse:
        """
        @summary Deletes a sharing rule of a data source by ID.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  If you want to delete a sharing rule of a data source from Workspace A to Workspace B, you must have the permissions to share the data source in Workspace A or Workspace B. You can call this operation only if you are assigned one of the following roles in DataWorks:
        Tenant Owner, Tenant Administrator, Workspace Administrator, and Workspace Owner
        
        @param request: DeleteDataSourceSharedRuleRequest
        @return: DeleteDataSourceSharedRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_data_source_shared_rule_with_options_async(request, runtime)

    def delete_file_with_options(
        self,
        request: dataworks_public_20240518_models.DeleteFileRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteFileResponse:
        """
        @param request: DeleteFileRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteFileResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.file_id):
            body['FileId'] = request.file_id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteFile',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteFileResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_file_with_options_async(
        self,
        request: dataworks_public_20240518_models.DeleteFileRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteFileResponse:
        """
        @param request: DeleteFileRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteFileResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.file_id):
            body['FileId'] = request.file_id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteFile',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteFileResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_file(
        self,
        request: dataworks_public_20240518_models.DeleteFileRequest,
    ) -> dataworks_public_20240518_models.DeleteFileResponse:
        """
        @param request: DeleteFileRequest
        @return: DeleteFileResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_file_with_options(request, runtime)

    async def delete_file_async(
        self,
        request: dataworks_public_20240518_models.DeleteFileRequest,
    ) -> dataworks_public_20240518_models.DeleteFileResponse:
        """
        @param request: DeleteFileRequest
        @return: DeleteFileResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_file_with_options_async(request, runtime)

    def delete_folder_with_options(
        self,
        request: dataworks_public_20240518_models.DeleteFolderRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteFolderResponse:
        """
        @param request: DeleteFolderRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteFolderResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.folder_id):
            body['FolderId'] = request.folder_id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteFolder',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteFolderResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_folder_with_options_async(
        self,
        request: dataworks_public_20240518_models.DeleteFolderRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteFolderResponse:
        """
        @param request: DeleteFolderRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteFolderResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.folder_id):
            body['FolderId'] = request.folder_id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteFolder',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteFolderResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_folder(
        self,
        request: dataworks_public_20240518_models.DeleteFolderRequest,
    ) -> dataworks_public_20240518_models.DeleteFolderResponse:
        """
        @param request: DeleteFolderRequest
        @return: DeleteFolderResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_folder_with_options(request, runtime)

    async def delete_folder_async(
        self,
        request: dataworks_public_20240518_models.DeleteFolderRequest,
    ) -> dataworks_public_20240518_models.DeleteFolderResponse:
        """
        @param request: DeleteFolderRequest
        @return: DeleteFolderResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_folder_with_options_async(request, runtime)

    def delete_function_with_options(
        self,
        request: dataworks_public_20240518_models.DeleteFunctionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteFunctionResponse:
        """
        @summary Deletes a user-defined function (UDF) in DataStudio.
        
        @description >  A UDF that is deployed cannot be deleted. If you want to delete such a UDF, you must first undeploy the UDF.
        
        @param request: DeleteFunctionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteFunctionResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteFunction',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteFunctionResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_function_with_options_async(
        self,
        request: dataworks_public_20240518_models.DeleteFunctionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteFunctionResponse:
        """
        @summary Deletes a user-defined function (UDF) in DataStudio.
        
        @description >  A UDF that is deployed cannot be deleted. If you want to delete such a UDF, you must first undeploy the UDF.
        
        @param request: DeleteFunctionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteFunctionResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteFunction',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteFunctionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_function(
        self,
        request: dataworks_public_20240518_models.DeleteFunctionRequest,
    ) -> dataworks_public_20240518_models.DeleteFunctionResponse:
        """
        @summary Deletes a user-defined function (UDF) in DataStudio.
        
        @description >  A UDF that is deployed cannot be deleted. If you want to delete such a UDF, you must first undeploy the UDF.
        
        @param request: DeleteFunctionRequest
        @return: DeleteFunctionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_function_with_options(request, runtime)

    async def delete_function_async(
        self,
        request: dataworks_public_20240518_models.DeleteFunctionRequest,
    ) -> dataworks_public_20240518_models.DeleteFunctionResponse:
        """
        @summary Deletes a user-defined function (UDF) in DataStudio.
        
        @description >  A UDF that is deployed cannot be deleted. If you want to delete such a UDF, you must first undeploy the UDF.
        
        @param request: DeleteFunctionRequest
        @return: DeleteFunctionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_function_with_options_async(request, runtime)

    def delete_lineage_relationship_with_options(
        self,
        request: dataworks_public_20240518_models.DeleteLineageRelationshipRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteLineageRelationshipResponse:
        """
        @summary 删除血缘关系
        
        @param request: DeleteLineageRelationshipRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteLineageRelationshipResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteLineageRelationship',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteLineageRelationshipResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_lineage_relationship_with_options_async(
        self,
        request: dataworks_public_20240518_models.DeleteLineageRelationshipRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteLineageRelationshipResponse:
        """
        @summary 删除血缘关系
        
        @param request: DeleteLineageRelationshipRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteLineageRelationshipResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteLineageRelationship',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteLineageRelationshipResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_lineage_relationship(
        self,
        request: dataworks_public_20240518_models.DeleteLineageRelationshipRequest,
    ) -> dataworks_public_20240518_models.DeleteLineageRelationshipResponse:
        """
        @summary 删除血缘关系
        
        @param request: DeleteLineageRelationshipRequest
        @return: DeleteLineageRelationshipResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_lineage_relationship_with_options(request, runtime)

    async def delete_lineage_relationship_async(
        self,
        request: dataworks_public_20240518_models.DeleteLineageRelationshipRequest,
    ) -> dataworks_public_20240518_models.DeleteLineageRelationshipResponse:
        """
        @summary 删除血缘关系
        
        @param request: DeleteLineageRelationshipRequest
        @return: DeleteLineageRelationshipResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_lineage_relationship_with_options_async(request, runtime)

    def delete_meta_collection_with_options(
        self,
        request: dataworks_public_20240518_models.DeleteMetaCollectionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteMetaCollectionResponse:
        """
        @summary 删除集合
        
        @param request: DeleteMetaCollectionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteMetaCollectionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteMetaCollection',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteMetaCollectionResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_meta_collection_with_options_async(
        self,
        request: dataworks_public_20240518_models.DeleteMetaCollectionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteMetaCollectionResponse:
        """
        @summary 删除集合
        
        @param request: DeleteMetaCollectionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteMetaCollectionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteMetaCollection',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteMetaCollectionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_meta_collection(
        self,
        request: dataworks_public_20240518_models.DeleteMetaCollectionRequest,
    ) -> dataworks_public_20240518_models.DeleteMetaCollectionResponse:
        """
        @summary 删除集合
        
        @param request: DeleteMetaCollectionRequest
        @return: DeleteMetaCollectionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_meta_collection_with_options(request, runtime)

    async def delete_meta_collection_async(
        self,
        request: dataworks_public_20240518_models.DeleteMetaCollectionRequest,
    ) -> dataworks_public_20240518_models.DeleteMetaCollectionResponse:
        """
        @summary 删除集合
        
        @param request: DeleteMetaCollectionRequest
        @return: DeleteMetaCollectionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_meta_collection_with_options_async(request, runtime)

    def delete_network_with_options(
        self,
        request: dataworks_public_20240518_models.DeleteNetworkRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteNetworkResponse:
        """
        @summary Disassociates and deletes a network from a general resource group.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: DeleteNetworkRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteNetworkResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteNetwork',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteNetworkResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_network_with_options_async(
        self,
        request: dataworks_public_20240518_models.DeleteNetworkRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteNetworkResponse:
        """
        @summary Disassociates and deletes a network from a general resource group.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: DeleteNetworkRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteNetworkResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteNetwork',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteNetworkResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_network(
        self,
        request: dataworks_public_20240518_models.DeleteNetworkRequest,
    ) -> dataworks_public_20240518_models.DeleteNetworkResponse:
        """
        @summary Disassociates and deletes a network from a general resource group.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: DeleteNetworkRequest
        @return: DeleteNetworkResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_network_with_options(request, runtime)

    async def delete_network_async(
        self,
        request: dataworks_public_20240518_models.DeleteNetworkRequest,
    ) -> dataworks_public_20240518_models.DeleteNetworkResponse:
        """
        @summary Disassociates and deletes a network from a general resource group.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: DeleteNetworkRequest
        @return: DeleteNetworkResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_network_with_options_async(request, runtime)

    def delete_node_with_options(
        self,
        request: dataworks_public_20240518_models.DeleteNodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteNodeResponse:
        """
        @summary Deletes a node from DataStudio.
        
        @description >  A node that is deployed cannot be deleted. If you want to delete such a node, you must first undeploy the node.
        
        @param request: DeleteNodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteNodeResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteNode',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteNodeResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_node_with_options_async(
        self,
        request: dataworks_public_20240518_models.DeleteNodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteNodeResponse:
        """
        @summary Deletes a node from DataStudio.
        
        @description >  A node that is deployed cannot be deleted. If you want to delete such a node, you must first undeploy the node.
        
        @param request: DeleteNodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteNodeResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteNode',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteNodeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_node(
        self,
        request: dataworks_public_20240518_models.DeleteNodeRequest,
    ) -> dataworks_public_20240518_models.DeleteNodeResponse:
        """
        @summary Deletes a node from DataStudio.
        
        @description >  A node that is deployed cannot be deleted. If you want to delete such a node, you must first undeploy the node.
        
        @param request: DeleteNodeRequest
        @return: DeleteNodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_node_with_options(request, runtime)

    async def delete_node_async(
        self,
        request: dataworks_public_20240518_models.DeleteNodeRequest,
    ) -> dataworks_public_20240518_models.DeleteNodeResponse:
        """
        @summary Deletes a node from DataStudio.
        
        @description >  A node that is deployed cannot be deleted. If you want to delete such a node, you must first undeploy the node.
        
        @param request: DeleteNodeRequest
        @return: DeleteNodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_node_with_options_async(request, runtime)

    def delete_project_with_options(
        self,
        request: dataworks_public_20240518_models.DeleteProjectRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteProjectResponse:
        """
        @summary Deletes a DataWorks workspace.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: DeleteProjectRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteProjectResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteProject',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteProjectResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_project_with_options_async(
        self,
        request: dataworks_public_20240518_models.DeleteProjectRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteProjectResponse:
        """
        @summary Deletes a DataWorks workspace.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: DeleteProjectRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteProjectResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteProject',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteProjectResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_project(
        self,
        request: dataworks_public_20240518_models.DeleteProjectRequest,
    ) -> dataworks_public_20240518_models.DeleteProjectResponse:
        """
        @summary Deletes a DataWorks workspace.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: DeleteProjectRequest
        @return: DeleteProjectResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_project_with_options(request, runtime)

    async def delete_project_async(
        self,
        request: dataworks_public_20240518_models.DeleteProjectRequest,
    ) -> dataworks_public_20240518_models.DeleteProjectResponse:
        """
        @summary Deletes a DataWorks workspace.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: DeleteProjectRequest
        @return: DeleteProjectResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_project_with_options_async(request, runtime)

    def delete_project_member_with_options(
        self,
        request: dataworks_public_20240518_models.DeleteProjectMemberRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteProjectMemberResponse:
        """
        @summary Removes a workspace member and the workspace-level roles that are assigned to the member.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: DeleteProjectMemberRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteProjectMemberResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.user_id):
            body['UserId'] = request.user_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteProjectMember',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteProjectMemberResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_project_member_with_options_async(
        self,
        request: dataworks_public_20240518_models.DeleteProjectMemberRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteProjectMemberResponse:
        """
        @summary Removes a workspace member and the workspace-level roles that are assigned to the member.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: DeleteProjectMemberRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteProjectMemberResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.user_id):
            body['UserId'] = request.user_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteProjectMember',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteProjectMemberResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_project_member(
        self,
        request: dataworks_public_20240518_models.DeleteProjectMemberRequest,
    ) -> dataworks_public_20240518_models.DeleteProjectMemberResponse:
        """
        @summary Removes a workspace member and the workspace-level roles that are assigned to the member.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: DeleteProjectMemberRequest
        @return: DeleteProjectMemberResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_project_member_with_options(request, runtime)

    async def delete_project_member_async(
        self,
        request: dataworks_public_20240518_models.DeleteProjectMemberRequest,
    ) -> dataworks_public_20240518_models.DeleteProjectMemberResponse:
        """
        @summary Removes a workspace member and the workspace-level roles that are assigned to the member.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: DeleteProjectMemberRequest
        @return: DeleteProjectMemberResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_project_member_with_options_async(request, runtime)

    def delete_resource_with_options(
        self,
        request: dataworks_public_20240518_models.DeleteResourceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteResourceResponse:
        """
        @summary Deletes a file resource from DataStudio.
        
        @description >  A file resource that is deployed cannot be deleted. If you want to delete such a file resource, you must first undeploy the file resource.
        
        @param request: DeleteResourceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteResourceResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteResource',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteResourceResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_resource_with_options_async(
        self,
        request: dataworks_public_20240518_models.DeleteResourceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteResourceResponse:
        """
        @summary Deletes a file resource from DataStudio.
        
        @description >  A file resource that is deployed cannot be deleted. If you want to delete such a file resource, you must first undeploy the file resource.
        
        @param request: DeleteResourceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteResourceResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteResource',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteResourceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_resource(
        self,
        request: dataworks_public_20240518_models.DeleteResourceRequest,
    ) -> dataworks_public_20240518_models.DeleteResourceResponse:
        """
        @summary Deletes a file resource from DataStudio.
        
        @description >  A file resource that is deployed cannot be deleted. If you want to delete such a file resource, you must first undeploy the file resource.
        
        @param request: DeleteResourceRequest
        @return: DeleteResourceResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_resource_with_options(request, runtime)

    async def delete_resource_async(
        self,
        request: dataworks_public_20240518_models.DeleteResourceRequest,
    ) -> dataworks_public_20240518_models.DeleteResourceResponse:
        """
        @summary Deletes a file resource from DataStudio.
        
        @description >  A file resource that is deployed cannot be deleted. If you want to delete such a file resource, you must first undeploy the file resource.
        
        @param request: DeleteResourceRequest
        @return: DeleteResourceResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_resource_with_options_async(request, runtime)

    def delete_resource_group_with_options(
        self,
        request: dataworks_public_20240518_models.DeleteResourceGroupRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteResourceGroupResponse:
        """
        @summary Deletes a serverless resource group.
        
        @description 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
        2.  *Before you call this API operation, you must make sure that you have a good command of the billing details and [pricing](https://help.aliyun.com/document_detail/2680173.html) of serverless resource groups.
        
        @param request: DeleteResourceGroupRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteResourceGroupResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteResourceGroup',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteResourceGroupResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_resource_group_with_options_async(
        self,
        request: dataworks_public_20240518_models.DeleteResourceGroupRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteResourceGroupResponse:
        """
        @summary Deletes a serverless resource group.
        
        @description 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
        2.  *Before you call this API operation, you must make sure that you have a good command of the billing details and [pricing](https://help.aliyun.com/document_detail/2680173.html) of serverless resource groups.
        
        @param request: DeleteResourceGroupRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteResourceGroupResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteResourceGroup',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteResourceGroupResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_resource_group(
        self,
        request: dataworks_public_20240518_models.DeleteResourceGroupRequest,
    ) -> dataworks_public_20240518_models.DeleteResourceGroupResponse:
        """
        @summary Deletes a serverless resource group.
        
        @description 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
        2.  *Before you call this API operation, you must make sure that you have a good command of the billing details and [pricing](https://help.aliyun.com/document_detail/2680173.html) of serverless resource groups.
        
        @param request: DeleteResourceGroupRequest
        @return: DeleteResourceGroupResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_resource_group_with_options(request, runtime)

    async def delete_resource_group_async(
        self,
        request: dataworks_public_20240518_models.DeleteResourceGroupRequest,
    ) -> dataworks_public_20240518_models.DeleteResourceGroupResponse:
        """
        @summary Deletes a serverless resource group.
        
        @description 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
        2.  *Before you call this API operation, you must make sure that you have a good command of the billing details and [pricing](https://help.aliyun.com/document_detail/2680173.html) of serverless resource groups.
        
        @param request: DeleteResourceGroupRequest
        @return: DeleteResourceGroupResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_resource_group_with_options_async(request, runtime)

    def delete_route_with_options(
        self,
        request: dataworks_public_20240518_models.DeleteRouteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteRouteResponse:
        """
        @summary Deletes a route from a network resource.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: DeleteRouteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteRouteResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteRoute',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteRouteResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_route_with_options_async(
        self,
        request: dataworks_public_20240518_models.DeleteRouteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteRouteResponse:
        """
        @summary Deletes a route from a network resource.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: DeleteRouteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteRouteResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteRoute',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteRouteResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_route(
        self,
        request: dataworks_public_20240518_models.DeleteRouteRequest,
    ) -> dataworks_public_20240518_models.DeleteRouteResponse:
        """
        @summary Deletes a route from a network resource.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: DeleteRouteRequest
        @return: DeleteRouteResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_route_with_options(request, runtime)

    async def delete_route_async(
        self,
        request: dataworks_public_20240518_models.DeleteRouteRequest,
    ) -> dataworks_public_20240518_models.DeleteRouteResponse:
        """
        @summary Deletes a route from a network resource.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: DeleteRouteRequest
        @return: DeleteRouteResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_route_with_options_async(request, runtime)

    def delete_task_with_options(
        self,
        request: dataworks_public_20240518_models.DeleteTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteTaskResponse:
        """
        @summary Deletes a task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: DeleteTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.project_env):
            query['ProjectEnv'] = request.project_env
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteTask',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_task_with_options_async(
        self,
        request: dataworks_public_20240518_models.DeleteTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteTaskResponse:
        """
        @summary Deletes a task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: DeleteTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteTaskResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.project_env):
            query['ProjectEnv'] = request.project_env
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='DeleteTask',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_task(
        self,
        request: dataworks_public_20240518_models.DeleteTaskRequest,
    ) -> dataworks_public_20240518_models.DeleteTaskResponse:
        """
        @summary Deletes a task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: DeleteTaskRequest
        @return: DeleteTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_task_with_options(request, runtime)

    async def delete_task_async(
        self,
        request: dataworks_public_20240518_models.DeleteTaskRequest,
    ) -> dataworks_public_20240518_models.DeleteTaskResponse:
        """
        @summary Deletes a task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: DeleteTaskRequest
        @return: DeleteTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_task_with_options_async(request, runtime)

    def delete_workflow_with_options(
        self,
        request: dataworks_public_20240518_models.DeleteWorkflowRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteWorkflowResponse:
        """
        @summary Deletes a workflow.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: DeleteWorkflowRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteWorkflowResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        body = {}
        if not UtilClient.is_unset(request.client_unique_code):
            body['ClientUniqueCode'] = request.client_unique_code
        if not UtilClient.is_unset(request.env_type):
            body['EnvType'] = request.env_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteWorkflow',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteWorkflowResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_workflow_with_options_async(
        self,
        request: dataworks_public_20240518_models.DeleteWorkflowRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteWorkflowResponse:
        """
        @summary Deletes a workflow.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: DeleteWorkflowRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteWorkflowResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        body = {}
        if not UtilClient.is_unset(request.client_unique_code):
            body['ClientUniqueCode'] = request.client_unique_code
        if not UtilClient.is_unset(request.env_type):
            body['EnvType'] = request.env_type
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteWorkflow',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteWorkflowResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_workflow(
        self,
        request: dataworks_public_20240518_models.DeleteWorkflowRequest,
    ) -> dataworks_public_20240518_models.DeleteWorkflowResponse:
        """
        @summary Deletes a workflow.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: DeleteWorkflowRequest
        @return: DeleteWorkflowResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_workflow_with_options(request, runtime)

    async def delete_workflow_async(
        self,
        request: dataworks_public_20240518_models.DeleteWorkflowRequest,
    ) -> dataworks_public_20240518_models.DeleteWorkflowResponse:
        """
        @summary Deletes a workflow.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: DeleteWorkflowRequest
        @return: DeleteWorkflowResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_workflow_with_options_async(request, runtime)

    def delete_workflow_definition_with_options(
        self,
        request: dataworks_public_20240518_models.DeleteWorkflowDefinitionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteWorkflowDefinitionResponse:
        """
        @summary Deletes a workflow from DataStudio.
        
        @description >  A workflow that is deployed cannot be deleted. If you want to delete such a workflow, you must first undeploy the workflow.
        
        @param request: DeleteWorkflowDefinitionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteWorkflowDefinitionResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteWorkflowDefinition',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteWorkflowDefinitionResponse(),
            self.call_api(params, req, runtime)
        )

    async def delete_workflow_definition_with_options_async(
        self,
        request: dataworks_public_20240518_models.DeleteWorkflowDefinitionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeleteWorkflowDefinitionResponse:
        """
        @summary Deletes a workflow from DataStudio.
        
        @description >  A workflow that is deployed cannot be deleted. If you want to delete such a workflow, you must first undeploy the workflow.
        
        @param request: DeleteWorkflowDefinitionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeleteWorkflowDefinitionResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeleteWorkflowDefinition',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeleteWorkflowDefinitionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def delete_workflow_definition(
        self,
        request: dataworks_public_20240518_models.DeleteWorkflowDefinitionRequest,
    ) -> dataworks_public_20240518_models.DeleteWorkflowDefinitionResponse:
        """
        @summary Deletes a workflow from DataStudio.
        
        @description >  A workflow that is deployed cannot be deleted. If you want to delete such a workflow, you must first undeploy the workflow.
        
        @param request: DeleteWorkflowDefinitionRequest
        @return: DeleteWorkflowDefinitionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.delete_workflow_definition_with_options(request, runtime)

    async def delete_workflow_definition_async(
        self,
        request: dataworks_public_20240518_models.DeleteWorkflowDefinitionRequest,
    ) -> dataworks_public_20240518_models.DeleteWorkflowDefinitionResponse:
        """
        @summary Deletes a workflow from DataStudio.
        
        @description >  A workflow that is deployed cannot be deleted. If you want to delete such a workflow, you must first undeploy the workflow.
        
        @param request: DeleteWorkflowDefinitionRequest
        @return: DeleteWorkflowDefinitionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.delete_workflow_definition_with_options_async(request, runtime)

    def deploy_file_with_options(
        self,
        request: dataworks_public_20240518_models.DeployFileRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeployFileResponse:
        """
        @param request: DeployFileRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeployFileResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.comment):
            body['Comment'] = request.comment
        if not UtilClient.is_unset(request.file_id):
            body['FileId'] = request.file_id
        if not UtilClient.is_unset(request.node_id):
            body['NodeId'] = request.node_id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeployFile',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeployFileResponse(),
            self.call_api(params, req, runtime)
        )

    async def deploy_file_with_options_async(
        self,
        request: dataworks_public_20240518_models.DeployFileRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DeployFileResponse:
        """
        @param request: DeployFileRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DeployFileResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.comment):
            body['Comment'] = request.comment
        if not UtilClient.is_unset(request.file_id):
            body['FileId'] = request.file_id
        if not UtilClient.is_unset(request.node_id):
            body['NodeId'] = request.node_id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DeployFile',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DeployFileResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def deploy_file(
        self,
        request: dataworks_public_20240518_models.DeployFileRequest,
    ) -> dataworks_public_20240518_models.DeployFileResponse:
        """
        @param request: DeployFileRequest
        @return: DeployFileResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.deploy_file_with_options(request, runtime)

    async def deploy_file_async(
        self,
        request: dataworks_public_20240518_models.DeployFileRequest,
    ) -> dataworks_public_20240518_models.DeployFileResponse:
        """
        @param request: DeployFileRequest
        @return: DeployFileResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.deploy_file_with_options_async(request, runtime)

    def detach_data_quality_rules_from_evaluation_task_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.DetachDataQualityRulesFromEvaluationTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DetachDataQualityRulesFromEvaluationTaskResponse:
        """
        @summary Disassociates monitoring rules from a data quality monitoring task.
        
        @param tmp_req: DetachDataQualityRulesFromEvaluationTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DetachDataQualityRulesFromEvaluationTaskResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.DetachDataQualityRulesFromEvaluationTaskShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.data_quality_rule_ids):
            request.data_quality_rule_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.data_quality_rule_ids, 'DataQualityRuleIds', 'json')
        body = {}
        if not UtilClient.is_unset(request.data_quality_evaluation_task_id):
            body['DataQualityEvaluationTaskId'] = request.data_quality_evaluation_task_id
        if not UtilClient.is_unset(request.data_quality_rule_ids_shrink):
            body['DataQualityRuleIds'] = request.data_quality_rule_ids_shrink
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DetachDataQualityRulesFromEvaluationTask',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DetachDataQualityRulesFromEvaluationTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def detach_data_quality_rules_from_evaluation_task_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.DetachDataQualityRulesFromEvaluationTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DetachDataQualityRulesFromEvaluationTaskResponse:
        """
        @summary Disassociates monitoring rules from a data quality monitoring task.
        
        @param tmp_req: DetachDataQualityRulesFromEvaluationTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DetachDataQualityRulesFromEvaluationTaskResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.DetachDataQualityRulesFromEvaluationTaskShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.data_quality_rule_ids):
            request.data_quality_rule_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.data_quality_rule_ids, 'DataQualityRuleIds', 'json')
        body = {}
        if not UtilClient.is_unset(request.data_quality_evaluation_task_id):
            body['DataQualityEvaluationTaskId'] = request.data_quality_evaluation_task_id
        if not UtilClient.is_unset(request.data_quality_rule_ids_shrink):
            body['DataQualityRuleIds'] = request.data_quality_rule_ids_shrink
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DetachDataQualityRulesFromEvaluationTask',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DetachDataQualityRulesFromEvaluationTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def detach_data_quality_rules_from_evaluation_task(
        self,
        request: dataworks_public_20240518_models.DetachDataQualityRulesFromEvaluationTaskRequest,
    ) -> dataworks_public_20240518_models.DetachDataQualityRulesFromEvaluationTaskResponse:
        """
        @summary Disassociates monitoring rules from a data quality monitoring task.
        
        @param request: DetachDataQualityRulesFromEvaluationTaskRequest
        @return: DetachDataQualityRulesFromEvaluationTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.detach_data_quality_rules_from_evaluation_task_with_options(request, runtime)

    async def detach_data_quality_rules_from_evaluation_task_async(
        self,
        request: dataworks_public_20240518_models.DetachDataQualityRulesFromEvaluationTaskRequest,
    ) -> dataworks_public_20240518_models.DetachDataQualityRulesFromEvaluationTaskResponse:
        """
        @summary Disassociates monitoring rules from a data quality monitoring task.
        
        @param request: DetachDataQualityRulesFromEvaluationTaskRequest
        @return: DetachDataQualityRulesFromEvaluationTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.detach_data_quality_rules_from_evaluation_task_with_options_async(request, runtime)

    def dissociate_project_from_resource_group_with_options(
        self,
        request: dataworks_public_20240518_models.DissociateProjectFromResourceGroupRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DissociateProjectFromResourceGroupResponse:
        """
        @summary Disassociates a resource group from a workspace.
        
        @description 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
        2.  Your account must be assigned one of the following roles of the desired workspace:
        Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
        
        @param request: DissociateProjectFromResourceGroupRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DissociateProjectFromResourceGroupResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.resource_group_id):
            body['ResourceGroupId'] = request.resource_group_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DissociateProjectFromResourceGroup',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DissociateProjectFromResourceGroupResponse(),
            self.call_api(params, req, runtime)
        )

    async def dissociate_project_from_resource_group_with_options_async(
        self,
        request: dataworks_public_20240518_models.DissociateProjectFromResourceGroupRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.DissociateProjectFromResourceGroupResponse:
        """
        @summary Disassociates a resource group from a workspace.
        
        @description 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
        2.  Your account must be assigned one of the following roles of the desired workspace:
        Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
        
        @param request: DissociateProjectFromResourceGroupRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: DissociateProjectFromResourceGroupResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.resource_group_id):
            body['ResourceGroupId'] = request.resource_group_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='DissociateProjectFromResourceGroup',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.DissociateProjectFromResourceGroupResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def dissociate_project_from_resource_group(
        self,
        request: dataworks_public_20240518_models.DissociateProjectFromResourceGroupRequest,
    ) -> dataworks_public_20240518_models.DissociateProjectFromResourceGroupResponse:
        """
        @summary Disassociates a resource group from a workspace.
        
        @description 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
        2.  Your account must be assigned one of the following roles of the desired workspace:
        Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
        
        @param request: DissociateProjectFromResourceGroupRequest
        @return: DissociateProjectFromResourceGroupResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.dissociate_project_from_resource_group_with_options(request, runtime)

    async def dissociate_project_from_resource_group_async(
        self,
        request: dataworks_public_20240518_models.DissociateProjectFromResourceGroupRequest,
    ) -> dataworks_public_20240518_models.DissociateProjectFromResourceGroupResponse:
        """
        @summary Disassociates a resource group from a workspace.
        
        @description 1.  You can use this API operation only in DataWorks Basic Edition or an advanced edition.
        2.  Your account must be assigned one of the following roles of the desired workspace:
        Tenant Owner, Workspace Administrator, Workspace Owner, and O\\&M
        
        @param request: DissociateProjectFromResourceGroupRequest
        @return: DissociateProjectFromResourceGroupResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.dissociate_project_from_resource_group_with_options_async(request, runtime)

    def establish_relation_table_to_business_with_options(
        self,
        request: dataworks_public_20240518_models.EstablishRelationTableToBusinessRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.EstablishRelationTableToBusinessResponse:
        """
        @param request: EstablishRelationTableToBusinessRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: EstablishRelationTableToBusinessResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.business_id):
            body['BusinessId'] = request.business_id
        if not UtilClient.is_unset(request.folder_id):
            body['FolderId'] = request.folder_id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        if not UtilClient.is_unset(request.table_guid):
            body['TableGuid'] = request.table_guid
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='EstablishRelationTableToBusiness',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.EstablishRelationTableToBusinessResponse(),
            self.call_api(params, req, runtime)
        )

    async def establish_relation_table_to_business_with_options_async(
        self,
        request: dataworks_public_20240518_models.EstablishRelationTableToBusinessRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.EstablishRelationTableToBusinessResponse:
        """
        @param request: EstablishRelationTableToBusinessRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: EstablishRelationTableToBusinessResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.business_id):
            body['BusinessId'] = request.business_id
        if not UtilClient.is_unset(request.folder_id):
            body['FolderId'] = request.folder_id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        if not UtilClient.is_unset(request.table_guid):
            body['TableGuid'] = request.table_guid
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='EstablishRelationTableToBusiness',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.EstablishRelationTableToBusinessResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def establish_relation_table_to_business(
        self,
        request: dataworks_public_20240518_models.EstablishRelationTableToBusinessRequest,
    ) -> dataworks_public_20240518_models.EstablishRelationTableToBusinessResponse:
        """
        @param request: EstablishRelationTableToBusinessRequest
        @return: EstablishRelationTableToBusinessResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.establish_relation_table_to_business_with_options(request, runtime)

    async def establish_relation_table_to_business_async(
        self,
        request: dataworks_public_20240518_models.EstablishRelationTableToBusinessRequest,
    ) -> dataworks_public_20240518_models.EstablishRelationTableToBusinessResponse:
        """
        @param request: EstablishRelationTableToBusinessRequest
        @return: EstablishRelationTableToBusinessResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.establish_relation_table_to_business_with_options_async(request, runtime)

    def exec_pipeline_run_stage_with_options(
        self,
        request: dataworks_public_20240518_models.ExecPipelineRunStageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ExecPipelineRunStageResponse:
        """
        @summary Executes a stage in a process.
        
        @description >  The stages in a process are sequential. For more information, see the GetDeployment operation. Skipping or repeating a stage is not allowed.
        >  The execution of a stage is asynchronous. The response of this operation indicates only whether a stage is triggered but does not indicate whether the execution of the stage is successful. You can call the GetDeployment operation to check whether the execution is successful.
        
        @param request: ExecPipelineRunStageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ExecPipelineRunStageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        body = {}
        if not UtilClient.is_unset(request.code):
            body['Code'] = request.code
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ExecPipelineRunStage',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ExecPipelineRunStageResponse(),
            self.call_api(params, req, runtime)
        )

    async def exec_pipeline_run_stage_with_options_async(
        self,
        request: dataworks_public_20240518_models.ExecPipelineRunStageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ExecPipelineRunStageResponse:
        """
        @summary Executes a stage in a process.
        
        @description >  The stages in a process are sequential. For more information, see the GetDeployment operation. Skipping or repeating a stage is not allowed.
        >  The execution of a stage is asynchronous. The response of this operation indicates only whether a stage is triggered but does not indicate whether the execution of the stage is successful. You can call the GetDeployment operation to check whether the execution is successful.
        
        @param request: ExecPipelineRunStageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ExecPipelineRunStageResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        body = {}
        if not UtilClient.is_unset(request.code):
            body['Code'] = request.code
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ExecPipelineRunStage',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ExecPipelineRunStageResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def exec_pipeline_run_stage(
        self,
        request: dataworks_public_20240518_models.ExecPipelineRunStageRequest,
    ) -> dataworks_public_20240518_models.ExecPipelineRunStageResponse:
        """
        @summary Executes a stage in a process.
        
        @description >  The stages in a process are sequential. For more information, see the GetDeployment operation. Skipping or repeating a stage is not allowed.
        >  The execution of a stage is asynchronous. The response of this operation indicates only whether a stage is triggered but does not indicate whether the execution of the stage is successful. You can call the GetDeployment operation to check whether the execution is successful.
        
        @param request: ExecPipelineRunStageRequest
        @return: ExecPipelineRunStageResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.exec_pipeline_run_stage_with_options(request, runtime)

    async def exec_pipeline_run_stage_async(
        self,
        request: dataworks_public_20240518_models.ExecPipelineRunStageRequest,
    ) -> dataworks_public_20240518_models.ExecPipelineRunStageResponse:
        """
        @summary Executes a stage in a process.
        
        @description >  The stages in a process are sequential. For more information, see the GetDeployment operation. Skipping or repeating a stage is not allowed.
        >  The execution of a stage is asynchronous. The response of this operation indicates only whether a stage is triggered but does not indicate whether the execution of the stage is successful. You can call the GetDeployment operation to check whether the execution is successful.
        
        @param request: ExecPipelineRunStageRequest
        @return: ExecPipelineRunStageResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.exec_pipeline_run_stage_with_options_async(request, runtime)

    def execute_adhoc_workflow_instance_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.ExecuteAdhocWorkflowInstanceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ExecuteAdhocWorkflowInstanceResponse:
        """
        @summary Create a temporary workflow instance based on configurations.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: ExecuteAdhocWorkflowInstanceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ExecuteAdhocWorkflowInstanceResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.ExecuteAdhocWorkflowInstanceShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.tasks):
            request.tasks_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tasks, 'Tasks', 'json')
        body = {}
        if not UtilClient.is_unset(request.biz_date):
            body['BizDate'] = request.biz_date
        if not UtilClient.is_unset(request.env_type):
            body['EnvType'] = request.env_type
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.owner):
            body['Owner'] = request.owner
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.tasks_shrink):
            body['Tasks'] = request.tasks_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ExecuteAdhocWorkflowInstance',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ExecuteAdhocWorkflowInstanceResponse(),
            self.call_api(params, req, runtime)
        )

    async def execute_adhoc_workflow_instance_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.ExecuteAdhocWorkflowInstanceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ExecuteAdhocWorkflowInstanceResponse:
        """
        @summary Create a temporary workflow instance based on configurations.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: ExecuteAdhocWorkflowInstanceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ExecuteAdhocWorkflowInstanceResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.ExecuteAdhocWorkflowInstanceShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.tasks):
            request.tasks_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tasks, 'Tasks', 'json')
        body = {}
        if not UtilClient.is_unset(request.biz_date):
            body['BizDate'] = request.biz_date
        if not UtilClient.is_unset(request.env_type):
            body['EnvType'] = request.env_type
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.owner):
            body['Owner'] = request.owner
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.tasks_shrink):
            body['Tasks'] = request.tasks_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ExecuteAdhocWorkflowInstance',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ExecuteAdhocWorkflowInstanceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def execute_adhoc_workflow_instance(
        self,
        request: dataworks_public_20240518_models.ExecuteAdhocWorkflowInstanceRequest,
    ) -> dataworks_public_20240518_models.ExecuteAdhocWorkflowInstanceResponse:
        """
        @summary Create a temporary workflow instance based on configurations.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ExecuteAdhocWorkflowInstanceRequest
        @return: ExecuteAdhocWorkflowInstanceResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.execute_adhoc_workflow_instance_with_options(request, runtime)

    async def execute_adhoc_workflow_instance_async(
        self,
        request: dataworks_public_20240518_models.ExecuteAdhocWorkflowInstanceRequest,
    ) -> dataworks_public_20240518_models.ExecuteAdhocWorkflowInstanceResponse:
        """
        @summary Create a temporary workflow instance based on configurations.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ExecuteAdhocWorkflowInstanceRequest
        @return: ExecuteAdhocWorkflowInstanceResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.execute_adhoc_workflow_instance_with_options_async(request, runtime)

    def get_alert_rule_with_options(
        self,
        request: dataworks_public_20240518_models.GetAlertRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetAlertRuleResponse:
        """
        @summary Queries a custom alert monitoring rule.
        
        @param request: GetAlertRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAlertRuleResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetAlertRule',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetAlertRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_alert_rule_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetAlertRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetAlertRuleResponse:
        """
        @summary Queries a custom alert monitoring rule.
        
        @param request: GetAlertRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetAlertRuleResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetAlertRule',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetAlertRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_alert_rule(
        self,
        request: dataworks_public_20240518_models.GetAlertRuleRequest,
    ) -> dataworks_public_20240518_models.GetAlertRuleResponse:
        """
        @summary Queries a custom alert monitoring rule.
        
        @param request: GetAlertRuleRequest
        @return: GetAlertRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_alert_rule_with_options(request, runtime)

    async def get_alert_rule_async(
        self,
        request: dataworks_public_20240518_models.GetAlertRuleRequest,
    ) -> dataworks_public_20240518_models.GetAlertRuleResponse:
        """
        @summary Queries a custom alert monitoring rule.
        
        @param request: GetAlertRuleRequest
        @return: GetAlertRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_alert_rule_with_options_async(request, runtime)

    def get_business_with_options(
        self,
        request: dataworks_public_20240518_models.GetBusinessRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetBusinessResponse:
        """
        @param request: GetBusinessRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetBusinessResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.business_id):
            body['BusinessId'] = request.business_id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetBusiness',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetBusinessResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_business_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetBusinessRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetBusinessResponse:
        """
        @param request: GetBusinessRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetBusinessResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.business_id):
            body['BusinessId'] = request.business_id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetBusiness',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetBusinessResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_business(
        self,
        request: dataworks_public_20240518_models.GetBusinessRequest,
    ) -> dataworks_public_20240518_models.GetBusinessResponse:
        """
        @param request: GetBusinessRequest
        @return: GetBusinessResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_business_with_options(request, runtime)

    async def get_business_async(
        self,
        request: dataworks_public_20240518_models.GetBusinessRequest,
    ) -> dataworks_public_20240518_models.GetBusinessResponse:
        """
        @param request: GetBusinessRequest
        @return: GetBusinessResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_business_with_options_async(request, runtime)

    def get_catalog_with_options(
        self,
        request: dataworks_public_20240518_models.GetCatalogRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetCatalogResponse:
        """
        @summary 获取数据目录详情
        
        @param request: GetCatalogRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCatalogResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCatalog',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetCatalogResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_catalog_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetCatalogRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetCatalogResponse:
        """
        @summary 获取数据目录详情
        
        @param request: GetCatalogRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCatalogResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCatalog',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetCatalogResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_catalog(
        self,
        request: dataworks_public_20240518_models.GetCatalogRequest,
    ) -> dataworks_public_20240518_models.GetCatalogResponse:
        """
        @summary 获取数据目录详情
        
        @param request: GetCatalogRequest
        @return: GetCatalogResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_catalog_with_options(request, runtime)

    async def get_catalog_async(
        self,
        request: dataworks_public_20240518_models.GetCatalogRequest,
    ) -> dataworks_public_20240518_models.GetCatalogResponse:
        """
        @summary 获取数据目录详情
        
        @param request: GetCatalogRequest
        @return: GetCatalogResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_catalog_with_options_async(request, runtime)

    def get_certificate_with_options(
        self,
        request: dataworks_public_20240518_models.GetCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetCertificateResponse:
        """
        @summary Queries a certificate file.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  You can call this operation only if you are assigned one of the following roles in DataWorks: Tenant Owner, Workspace Administrator, Deploy, Develop, Workspace Owner, and O\\&M.
        
        @param request: GetCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCertificateResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCertificate',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetCertificateResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_certificate_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetCertificateResponse:
        """
        @summary Queries a certificate file.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  You can call this operation only if you are assigned one of the following roles in DataWorks: Tenant Owner, Workspace Administrator, Deploy, Develop, Workspace Owner, and O\\&M.
        
        @param request: GetCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCertificateResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCertificate',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetCertificateResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_certificate(
        self,
        request: dataworks_public_20240518_models.GetCertificateRequest,
    ) -> dataworks_public_20240518_models.GetCertificateResponse:
        """
        @summary Queries a certificate file.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  You can call this operation only if you are assigned one of the following roles in DataWorks: Tenant Owner, Workspace Administrator, Deploy, Develop, Workspace Owner, and O\\&M.
        
        @param request: GetCertificateRequest
        @return: GetCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_certificate_with_options(request, runtime)

    async def get_certificate_async(
        self,
        request: dataworks_public_20240518_models.GetCertificateRequest,
    ) -> dataworks_public_20240518_models.GetCertificateResponse:
        """
        @summary Queries a certificate file.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  You can call this operation only if you are assigned one of the following roles in DataWorks: Tenant Owner, Workspace Administrator, Deploy, Develop, Workspace Owner, and O\\&M.
        
        @param request: GetCertificateRequest
        @return: GetCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_certificate_with_options_async(request, runtime)

    def get_column_with_options(
        self,
        request: dataworks_public_20240518_models.GetColumnRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetColumnResponse:
        """
        @summary 获取字段详情
        
        @param request: GetColumnRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetColumnResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetColumn',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetColumnResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_column_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetColumnRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetColumnResponse:
        """
        @summary 获取字段详情
        
        @param request: GetColumnRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetColumnResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetColumn',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetColumnResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_column(
        self,
        request: dataworks_public_20240518_models.GetColumnRequest,
    ) -> dataworks_public_20240518_models.GetColumnResponse:
        """
        @summary 获取字段详情
        
        @param request: GetColumnRequest
        @return: GetColumnResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_column_with_options(request, runtime)

    async def get_column_async(
        self,
        request: dataworks_public_20240518_models.GetColumnRequest,
    ) -> dataworks_public_20240518_models.GetColumnResponse:
        """
        @summary 获取字段详情
        
        @param request: GetColumnRequest
        @return: GetColumnResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_column_with_options_async(request, runtime)

    def get_create_workflow_instances_result_with_options(
        self,
        request: dataworks_public_20240518_models.GetCreateWorkflowInstancesResultRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetCreateWorkflowInstancesResultResponse:
        """
        @summary Queries the result of asynchronously creating a workflow instance.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetCreateWorkflowInstancesResultRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCreateWorkflowInstancesResultResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCreateWorkflowInstancesResult',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetCreateWorkflowInstancesResultResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_create_workflow_instances_result_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetCreateWorkflowInstancesResultRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetCreateWorkflowInstancesResultResponse:
        """
        @summary Queries the result of asynchronously creating a workflow instance.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetCreateWorkflowInstancesResultRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetCreateWorkflowInstancesResultResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetCreateWorkflowInstancesResult',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetCreateWorkflowInstancesResultResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_create_workflow_instances_result(
        self,
        request: dataworks_public_20240518_models.GetCreateWorkflowInstancesResultRequest,
    ) -> dataworks_public_20240518_models.GetCreateWorkflowInstancesResultResponse:
        """
        @summary Queries the result of asynchronously creating a workflow instance.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetCreateWorkflowInstancesResultRequest
        @return: GetCreateWorkflowInstancesResultResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_create_workflow_instances_result_with_options(request, runtime)

    async def get_create_workflow_instances_result_async(
        self,
        request: dataworks_public_20240518_models.GetCreateWorkflowInstancesResultRequest,
    ) -> dataworks_public_20240518_models.GetCreateWorkflowInstancesResultResponse:
        """
        @summary Queries the result of asynchronously creating a workflow instance.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetCreateWorkflowInstancesResultRequest
        @return: GetCreateWorkflowInstancesResultResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_create_workflow_instances_result_with_options_async(request, runtime)

    def get_dijob_with_options(
        self,
        request: dataworks_public_20240518_models.GetDIJobRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetDIJobResponse:
        """
        @summary Queries the information about a synchronization task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetDIJobRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDIJobResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetDIJob',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetDIJobResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_dijob_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetDIJobRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetDIJobResponse:
        """
        @summary Queries the information about a synchronization task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetDIJobRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDIJobResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetDIJob',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetDIJobResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_dijob(
        self,
        request: dataworks_public_20240518_models.GetDIJobRequest,
    ) -> dataworks_public_20240518_models.GetDIJobResponse:
        """
        @summary Queries the information about a synchronization task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetDIJobRequest
        @return: GetDIJobResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_dijob_with_options(request, runtime)

    async def get_dijob_async(
        self,
        request: dataworks_public_20240518_models.GetDIJobRequest,
    ) -> dataworks_public_20240518_models.GetDIJobResponse:
        """
        @summary Queries the information about a synchronization task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetDIJobRequest
        @return: GetDIJobResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_dijob_with_options_async(request, runtime)

    def get_dijob_log_with_options(
        self,
        request: dataworks_public_20240518_models.GetDIJobLogRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetDIJobLogResponse:
        """
        @summary Obtains logs generated for a synchronization task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetDIJobLogRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDIJobLogResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetDIJobLog',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetDIJobLogResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_dijob_log_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetDIJobLogRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetDIJobLogResponse:
        """
        @summary Obtains logs generated for a synchronization task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetDIJobLogRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDIJobLogResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetDIJobLog',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetDIJobLogResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_dijob_log(
        self,
        request: dataworks_public_20240518_models.GetDIJobLogRequest,
    ) -> dataworks_public_20240518_models.GetDIJobLogResponse:
        """
        @summary Obtains logs generated for a synchronization task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetDIJobLogRequest
        @return: GetDIJobLogResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_dijob_log_with_options(request, runtime)

    async def get_dijob_log_async(
        self,
        request: dataworks_public_20240518_models.GetDIJobLogRequest,
    ) -> dataworks_public_20240518_models.GetDIJobLogResponse:
        """
        @summary Obtains logs generated for a synchronization task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetDIJobLogRequest
        @return: GetDIJobLogResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_dijob_log_with_options_async(request, runtime)

    def get_data_quality_alert_rule_with_options(
        self,
        request: dataworks_public_20240518_models.GetDataQualityAlertRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetDataQualityAlertRuleResponse:
        """
        @summary 查询数据质量告警规则详情
        
        @param request: GetDataQualityAlertRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDataQualityAlertRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetDataQualityAlertRule',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetDataQualityAlertRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_data_quality_alert_rule_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetDataQualityAlertRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetDataQualityAlertRuleResponse:
        """
        @summary 查询数据质量告警规则详情
        
        @param request: GetDataQualityAlertRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDataQualityAlertRuleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetDataQualityAlertRule',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetDataQualityAlertRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_data_quality_alert_rule(
        self,
        request: dataworks_public_20240518_models.GetDataQualityAlertRuleRequest,
    ) -> dataworks_public_20240518_models.GetDataQualityAlertRuleResponse:
        """
        @summary 查询数据质量告警规则详情
        
        @param request: GetDataQualityAlertRuleRequest
        @return: GetDataQualityAlertRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_data_quality_alert_rule_with_options(request, runtime)

    async def get_data_quality_alert_rule_async(
        self,
        request: dataworks_public_20240518_models.GetDataQualityAlertRuleRequest,
    ) -> dataworks_public_20240518_models.GetDataQualityAlertRuleResponse:
        """
        @summary 查询数据质量告警规则详情
        
        @param request: GetDataQualityAlertRuleRequest
        @return: GetDataQualityAlertRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_data_quality_alert_rule_with_options_async(request, runtime)

    def get_data_quality_evaluation_task_with_options(
        self,
        request: dataworks_public_20240518_models.GetDataQualityEvaluationTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetDataQualityEvaluationTaskResponse:
        """
        @summary Queries the details of a monitor.
        
        @param request: GetDataQualityEvaluationTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDataQualityEvaluationTaskResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetDataQualityEvaluationTask',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetDataQualityEvaluationTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_data_quality_evaluation_task_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetDataQualityEvaluationTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetDataQualityEvaluationTaskResponse:
        """
        @summary Queries the details of a monitor.
        
        @param request: GetDataQualityEvaluationTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDataQualityEvaluationTaskResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetDataQualityEvaluationTask',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetDataQualityEvaluationTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_data_quality_evaluation_task(
        self,
        request: dataworks_public_20240518_models.GetDataQualityEvaluationTaskRequest,
    ) -> dataworks_public_20240518_models.GetDataQualityEvaluationTaskResponse:
        """
        @summary Queries the details of a monitor.
        
        @param request: GetDataQualityEvaluationTaskRequest
        @return: GetDataQualityEvaluationTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_data_quality_evaluation_task_with_options(request, runtime)

    async def get_data_quality_evaluation_task_async(
        self,
        request: dataworks_public_20240518_models.GetDataQualityEvaluationTaskRequest,
    ) -> dataworks_public_20240518_models.GetDataQualityEvaluationTaskResponse:
        """
        @summary Queries the details of a monitor.
        
        @param request: GetDataQualityEvaluationTaskRequest
        @return: GetDataQualityEvaluationTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_data_quality_evaluation_task_with_options_async(request, runtime)

    def get_data_quality_evaluation_task_instance_with_options(
        self,
        request: dataworks_public_20240518_models.GetDataQualityEvaluationTaskInstanceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetDataQualityEvaluationTaskInstanceResponse:
        """
        @summary Queries the details of a monitor instance.
        
        @param request: GetDataQualityEvaluationTaskInstanceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDataQualityEvaluationTaskInstanceResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetDataQualityEvaluationTaskInstance',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetDataQualityEvaluationTaskInstanceResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_data_quality_evaluation_task_instance_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetDataQualityEvaluationTaskInstanceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetDataQualityEvaluationTaskInstanceResponse:
        """
        @summary Queries the details of a monitor instance.
        
        @param request: GetDataQualityEvaluationTaskInstanceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDataQualityEvaluationTaskInstanceResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetDataQualityEvaluationTaskInstance',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetDataQualityEvaluationTaskInstanceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_data_quality_evaluation_task_instance(
        self,
        request: dataworks_public_20240518_models.GetDataQualityEvaluationTaskInstanceRequest,
    ) -> dataworks_public_20240518_models.GetDataQualityEvaluationTaskInstanceResponse:
        """
        @summary Queries the details of a monitor instance.
        
        @param request: GetDataQualityEvaluationTaskInstanceRequest
        @return: GetDataQualityEvaluationTaskInstanceResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_data_quality_evaluation_task_instance_with_options(request, runtime)

    async def get_data_quality_evaluation_task_instance_async(
        self,
        request: dataworks_public_20240518_models.GetDataQualityEvaluationTaskInstanceRequest,
    ) -> dataworks_public_20240518_models.GetDataQualityEvaluationTaskInstanceResponse:
        """
        @summary Queries the details of a monitor instance.
        
        @param request: GetDataQualityEvaluationTaskInstanceRequest
        @return: GetDataQualityEvaluationTaskInstanceResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_data_quality_evaluation_task_instance_with_options_async(request, runtime)

    def get_data_quality_rule_with_options(
        self,
        request: dataworks_public_20240518_models.GetDataQualityRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetDataQualityRuleResponse:
        """
        @summary Queries the information about a data quality monitoring rule.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetDataQualityRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDataQualityRuleResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetDataQualityRule',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetDataQualityRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_data_quality_rule_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetDataQualityRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetDataQualityRuleResponse:
        """
        @summary Queries the information about a data quality monitoring rule.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetDataQualityRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDataQualityRuleResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetDataQualityRule',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetDataQualityRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_data_quality_rule(
        self,
        request: dataworks_public_20240518_models.GetDataQualityRuleRequest,
    ) -> dataworks_public_20240518_models.GetDataQualityRuleResponse:
        """
        @summary Queries the information about a data quality monitoring rule.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetDataQualityRuleRequest
        @return: GetDataQualityRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_data_quality_rule_with_options(request, runtime)

    async def get_data_quality_rule_async(
        self,
        request: dataworks_public_20240518_models.GetDataQualityRuleRequest,
    ) -> dataworks_public_20240518_models.GetDataQualityRuleResponse:
        """
        @summary Queries the information about a data quality monitoring rule.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetDataQualityRuleRequest
        @return: GetDataQualityRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_data_quality_rule_with_options_async(request, runtime)

    def get_data_quality_rule_template_with_options(
        self,
        request: dataworks_public_20240518_models.GetDataQualityRuleTemplateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetDataQualityRuleTemplateResponse:
        """
        @summary Queries the information about a data quality monitoring rule template.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetDataQualityRuleTemplateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDataQualityRuleTemplateResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetDataQualityRuleTemplate',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetDataQualityRuleTemplateResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_data_quality_rule_template_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetDataQualityRuleTemplateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetDataQualityRuleTemplateResponse:
        """
        @summary Queries the information about a data quality monitoring rule template.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetDataQualityRuleTemplateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDataQualityRuleTemplateResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetDataQualityRuleTemplate',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetDataQualityRuleTemplateResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_data_quality_rule_template(
        self,
        request: dataworks_public_20240518_models.GetDataQualityRuleTemplateRequest,
    ) -> dataworks_public_20240518_models.GetDataQualityRuleTemplateResponse:
        """
        @summary Queries the information about a data quality monitoring rule template.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetDataQualityRuleTemplateRequest
        @return: GetDataQualityRuleTemplateResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_data_quality_rule_template_with_options(request, runtime)

    async def get_data_quality_rule_template_async(
        self,
        request: dataworks_public_20240518_models.GetDataQualityRuleTemplateRequest,
    ) -> dataworks_public_20240518_models.GetDataQualityRuleTemplateResponse:
        """
        @summary Queries the information about a data quality monitoring rule template.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetDataQualityRuleTemplateRequest
        @return: GetDataQualityRuleTemplateResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_data_quality_rule_template_with_options_async(request, runtime)

    def get_data_quality_scan_with_options(
        self,
        request: dataworks_public_20240518_models.GetDataQualityScanRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetDataQualityScanResponse:
        """
        @summary 获取数据质量监控详情
        
        @param request: GetDataQualityScanRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDataQualityScanResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetDataQualityScan',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetDataQualityScanResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_data_quality_scan_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetDataQualityScanRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetDataQualityScanResponse:
        """
        @summary 获取数据质量监控详情
        
        @param request: GetDataQualityScanRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDataQualityScanResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetDataQualityScan',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetDataQualityScanResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_data_quality_scan(
        self,
        request: dataworks_public_20240518_models.GetDataQualityScanRequest,
    ) -> dataworks_public_20240518_models.GetDataQualityScanResponse:
        """
        @summary 获取数据质量监控详情
        
        @param request: GetDataQualityScanRequest
        @return: GetDataQualityScanResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_data_quality_scan_with_options(request, runtime)

    async def get_data_quality_scan_async(
        self,
        request: dataworks_public_20240518_models.GetDataQualityScanRequest,
    ) -> dataworks_public_20240518_models.GetDataQualityScanResponse:
        """
        @summary 获取数据质量监控详情
        
        @param request: GetDataQualityScanRequest
        @return: GetDataQualityScanResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_data_quality_scan_with_options_async(request, runtime)

    def get_data_quality_scan_run_with_options(
        self,
        request: dataworks_public_20240518_models.GetDataQualityScanRunRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetDataQualityScanRunResponse:
        """
        @summary 创建数据质量监控运行实例
        
        @param request: GetDataQualityScanRunRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDataQualityScanRunResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetDataQualityScanRun',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetDataQualityScanRunResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_data_quality_scan_run_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetDataQualityScanRunRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetDataQualityScanRunResponse:
        """
        @summary 创建数据质量监控运行实例
        
        @param request: GetDataQualityScanRunRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDataQualityScanRunResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetDataQualityScanRun',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetDataQualityScanRunResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_data_quality_scan_run(
        self,
        request: dataworks_public_20240518_models.GetDataQualityScanRunRequest,
    ) -> dataworks_public_20240518_models.GetDataQualityScanRunResponse:
        """
        @summary 创建数据质量监控运行实例
        
        @param request: GetDataQualityScanRunRequest
        @return: GetDataQualityScanRunResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_data_quality_scan_run_with_options(request, runtime)

    async def get_data_quality_scan_run_async(
        self,
        request: dataworks_public_20240518_models.GetDataQualityScanRunRequest,
    ) -> dataworks_public_20240518_models.GetDataQualityScanRunResponse:
        """
        @summary 创建数据质量监控运行实例
        
        @param request: GetDataQualityScanRunRequest
        @return: GetDataQualityScanRunResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_data_quality_scan_run_with_options_async(request, runtime)

    def get_data_quality_scan_run_log_with_options(
        self,
        request: dataworks_public_20240518_models.GetDataQualityScanRunLogRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetDataQualityScanRunLogResponse:
        """
        @summary 创建数据质量监控运行实例
        
        @param request: GetDataQualityScanRunLogRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDataQualityScanRunLogResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.offset):
            query['Offset'] = request.offset
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetDataQualityScanRunLog',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetDataQualityScanRunLogResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_data_quality_scan_run_log_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetDataQualityScanRunLogRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetDataQualityScanRunLogResponse:
        """
        @summary 创建数据质量监控运行实例
        
        @param request: GetDataQualityScanRunLogRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDataQualityScanRunLogResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.offset):
            query['Offset'] = request.offset
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetDataQualityScanRunLog',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetDataQualityScanRunLogResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_data_quality_scan_run_log(
        self,
        request: dataworks_public_20240518_models.GetDataQualityScanRunLogRequest,
    ) -> dataworks_public_20240518_models.GetDataQualityScanRunLogResponse:
        """
        @summary 创建数据质量监控运行实例
        
        @param request: GetDataQualityScanRunLogRequest
        @return: GetDataQualityScanRunLogResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_data_quality_scan_run_log_with_options(request, runtime)

    async def get_data_quality_scan_run_log_async(
        self,
        request: dataworks_public_20240518_models.GetDataQualityScanRunLogRequest,
    ) -> dataworks_public_20240518_models.GetDataQualityScanRunLogResponse:
        """
        @summary 创建数据质量监控运行实例
        
        @param request: GetDataQualityScanRunLogRequest
        @return: GetDataQualityScanRunLogResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_data_quality_scan_run_log_with_options_async(request, runtime)

    def get_data_quality_template_with_options(
        self,
        request: dataworks_public_20240518_models.GetDataQualityTemplateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetDataQualityTemplateResponse:
        """
        @summary 查询数据质量模板详情
        
        @param request: GetDataQualityTemplateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDataQualityTemplateResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetDataQualityTemplate',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetDataQualityTemplateResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_data_quality_template_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetDataQualityTemplateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetDataQualityTemplateResponse:
        """
        @summary 查询数据质量模板详情
        
        @param request: GetDataQualityTemplateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDataQualityTemplateResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetDataQualityTemplate',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetDataQualityTemplateResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_data_quality_template(
        self,
        request: dataworks_public_20240518_models.GetDataQualityTemplateRequest,
    ) -> dataworks_public_20240518_models.GetDataQualityTemplateResponse:
        """
        @summary 查询数据质量模板详情
        
        @param request: GetDataQualityTemplateRequest
        @return: GetDataQualityTemplateResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_data_quality_template_with_options(request, runtime)

    async def get_data_quality_template_async(
        self,
        request: dataworks_public_20240518_models.GetDataQualityTemplateRequest,
    ) -> dataworks_public_20240518_models.GetDataQualityTemplateResponse:
        """
        @summary 查询数据质量模板详情
        
        @param request: GetDataQualityTemplateRequest
        @return: GetDataQualityTemplateResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_data_quality_template_with_options_async(request, runtime)

    def get_data_source_with_options(
        self,
        request: dataworks_public_20240518_models.GetDataSourceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetDataSourceResponse:
        """
        @summary Queries a data source by ID.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
        Tenant Owner, Workspace Administrator, Deployment, Development, Project Owner, and O\\&M
        
        @param request: GetDataSourceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDataSourceResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetDataSource',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetDataSourceResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_data_source_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetDataSourceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetDataSourceResponse:
        """
        @summary Queries a data source by ID.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
        Tenant Owner, Workspace Administrator, Deployment, Development, Project Owner, and O\\&M
        
        @param request: GetDataSourceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDataSourceResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetDataSource',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetDataSourceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_data_source(
        self,
        request: dataworks_public_20240518_models.GetDataSourceRequest,
    ) -> dataworks_public_20240518_models.GetDataSourceResponse:
        """
        @summary Queries a data source by ID.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
        Tenant Owner, Workspace Administrator, Deployment, Development, Project Owner, and O\\&M
        
        @param request: GetDataSourceRequest
        @return: GetDataSourceResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_data_source_with_options(request, runtime)

    async def get_data_source_async(
        self,
        request: dataworks_public_20240518_models.GetDataSourceRequest,
    ) -> dataworks_public_20240518_models.GetDataSourceResponse:
        """
        @summary Queries a data source by ID.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
        Tenant Owner, Workspace Administrator, Deployment, Development, Project Owner, and O\\&M
        
        @param request: GetDataSourceRequest
        @return: GetDataSourceResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_data_source_with_options_async(request, runtime)

    def get_database_with_options(
        self,
        request: dataworks_public_20240518_models.GetDatabaseRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetDatabaseResponse:
        """
        @summary 获取数据库详情
        
        @param request: GetDatabaseRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDatabaseResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetDatabase',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetDatabaseResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_database_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetDatabaseRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetDatabaseResponse:
        """
        @summary 获取数据库详情
        
        @param request: GetDatabaseRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDatabaseResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetDatabase',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetDatabaseResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_database(
        self,
        request: dataworks_public_20240518_models.GetDatabaseRequest,
    ) -> dataworks_public_20240518_models.GetDatabaseResponse:
        """
        @summary 获取数据库详情
        
        @param request: GetDatabaseRequest
        @return: GetDatabaseResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_database_with_options(request, runtime)

    async def get_database_async(
        self,
        request: dataworks_public_20240518_models.GetDatabaseRequest,
    ) -> dataworks_public_20240518_models.GetDatabaseResponse:
        """
        @summary 获取数据库详情
        
        @param request: GetDatabaseRequest
        @return: GetDatabaseResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_database_with_options_async(request, runtime)

    def get_deployment_package_with_options(
        self,
        request: dataworks_public_20240518_models.GetDeploymentPackageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetDeploymentPackageResponse:
        """
        @param request: GetDeploymentPackageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDeploymentPackageResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.deployment_id):
            body['DeploymentId'] = request.deployment_id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetDeploymentPackage',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetDeploymentPackageResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_deployment_package_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetDeploymentPackageRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetDeploymentPackageResponse:
        """
        @param request: GetDeploymentPackageRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetDeploymentPackageResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.deployment_id):
            body['DeploymentId'] = request.deployment_id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetDeploymentPackage',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetDeploymentPackageResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_deployment_package(
        self,
        request: dataworks_public_20240518_models.GetDeploymentPackageRequest,
    ) -> dataworks_public_20240518_models.GetDeploymentPackageResponse:
        """
        @param request: GetDeploymentPackageRequest
        @return: GetDeploymentPackageResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_deployment_package_with_options(request, runtime)

    async def get_deployment_package_async(
        self,
        request: dataworks_public_20240518_models.GetDeploymentPackageRequest,
    ) -> dataworks_public_20240518_models.GetDeploymentPackageResponse:
        """
        @param request: GetDeploymentPackageRequest
        @return: GetDeploymentPackageResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_deployment_package_with_options_async(request, runtime)

    def get_file_with_options(
        self,
        request: dataworks_public_20240518_models.GetFileRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetFileResponse:
        """
        @summary Queries the information about a file.
        
        @param request: GetFileRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetFileResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.file_id):
            body['FileId'] = request.file_id
        if not UtilClient.is_unset(request.node_id):
            body['NodeId'] = request.node_id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetFile',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetFileResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_file_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetFileRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetFileResponse:
        """
        @summary Queries the information about a file.
        
        @param request: GetFileRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetFileResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.file_id):
            body['FileId'] = request.file_id
        if not UtilClient.is_unset(request.node_id):
            body['NodeId'] = request.node_id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetFile',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetFileResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_file(
        self,
        request: dataworks_public_20240518_models.GetFileRequest,
    ) -> dataworks_public_20240518_models.GetFileResponse:
        """
        @summary Queries the information about a file.
        
        @param request: GetFileRequest
        @return: GetFileResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_file_with_options(request, runtime)

    async def get_file_async(
        self,
        request: dataworks_public_20240518_models.GetFileRequest,
    ) -> dataworks_public_20240518_models.GetFileResponse:
        """
        @summary Queries the information about a file.
        
        @param request: GetFileRequest
        @return: GetFileResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_file_with_options_async(request, runtime)

    def get_file_version_with_options(
        self,
        request: dataworks_public_20240518_models.GetFileVersionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetFileVersionResponse:
        """
        @summary Queries the information about a file version.
        
        @param request: GetFileVersionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetFileVersionResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.file_id):
            body['FileId'] = request.file_id
        if not UtilClient.is_unset(request.file_version):
            body['FileVersion'] = request.file_version
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetFileVersion',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetFileVersionResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_file_version_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetFileVersionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetFileVersionResponse:
        """
        @summary Queries the information about a file version.
        
        @param request: GetFileVersionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetFileVersionResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.file_id):
            body['FileId'] = request.file_id
        if not UtilClient.is_unset(request.file_version):
            body['FileVersion'] = request.file_version
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetFileVersion',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetFileVersionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_file_version(
        self,
        request: dataworks_public_20240518_models.GetFileVersionRequest,
    ) -> dataworks_public_20240518_models.GetFileVersionResponse:
        """
        @summary Queries the information about a file version.
        
        @param request: GetFileVersionRequest
        @return: GetFileVersionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_file_version_with_options(request, runtime)

    async def get_file_version_async(
        self,
        request: dataworks_public_20240518_models.GetFileVersionRequest,
    ) -> dataworks_public_20240518_models.GetFileVersionResponse:
        """
        @summary Queries the information about a file version.
        
        @param request: GetFileVersionRequest
        @return: GetFileVersionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_file_version_with_options_async(request, runtime)

    def get_folder_with_options(
        self,
        request: dataworks_public_20240518_models.GetFolderRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetFolderResponse:
        """
        @param request: GetFolderRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetFolderResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.folder_id):
            body['FolderId'] = request.folder_id
        if not UtilClient.is_unset(request.folder_path):
            body['FolderPath'] = request.folder_path
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetFolder',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetFolderResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_folder_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetFolderRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetFolderResponse:
        """
        @param request: GetFolderRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetFolderResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.folder_id):
            body['FolderId'] = request.folder_id
        if not UtilClient.is_unset(request.folder_path):
            body['FolderPath'] = request.folder_path
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetFolder',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetFolderResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_folder(
        self,
        request: dataworks_public_20240518_models.GetFolderRequest,
    ) -> dataworks_public_20240518_models.GetFolderResponse:
        """
        @param request: GetFolderRequest
        @return: GetFolderResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_folder_with_options(request, runtime)

    async def get_folder_async(
        self,
        request: dataworks_public_20240518_models.GetFolderRequest,
    ) -> dataworks_public_20240518_models.GetFolderResponse:
        """
        @param request: GetFolderRequest
        @return: GetFolderResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_folder_with_options_async(request, runtime)

    def get_function_with_options(
        self,
        request: dataworks_public_20240518_models.GetFunctionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetFunctionResponse:
        """
        @summary Queries the information about a user-defined function (UDF) in DataStudio.
        
        @param request: GetFunctionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetFunctionResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetFunction',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetFunctionResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_function_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetFunctionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetFunctionResponse:
        """
        @summary Queries the information about a user-defined function (UDF) in DataStudio.
        
        @param request: GetFunctionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetFunctionResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetFunction',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetFunctionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_function(
        self,
        request: dataworks_public_20240518_models.GetFunctionRequest,
    ) -> dataworks_public_20240518_models.GetFunctionResponse:
        """
        @summary Queries the information about a user-defined function (UDF) in DataStudio.
        
        @param request: GetFunctionRequest
        @return: GetFunctionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_function_with_options(request, runtime)

    async def get_function_async(
        self,
        request: dataworks_public_20240518_models.GetFunctionRequest,
    ) -> dataworks_public_20240518_models.GetFunctionResponse:
        """
        @summary Queries the information about a user-defined function (UDF) in DataStudio.
        
        @param request: GetFunctionRequest
        @return: GetFunctionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_function_with_options_async(request, runtime)

    def get_ideevent_detail_with_options(
        self,
        request: dataworks_public_20240518_models.GetIDEEventDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetIDEEventDetailResponse:
        """
        @summary Queries the data snapshot of an extension point based on the ID of a message in DataWorks OpenEvent when the related extension point event is triggered.
        
        @param request: GetIDEEventDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetIDEEventDetailResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.message_id):
            body['MessageId'] = request.message_id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetIDEEventDetail',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetIDEEventDetailResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_ideevent_detail_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetIDEEventDetailRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetIDEEventDetailResponse:
        """
        @summary Queries the data snapshot of an extension point based on the ID of a message in DataWorks OpenEvent when the related extension point event is triggered.
        
        @param request: GetIDEEventDetailRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetIDEEventDetailResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.message_id):
            body['MessageId'] = request.message_id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetIDEEventDetail',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetIDEEventDetailResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_ideevent_detail(
        self,
        request: dataworks_public_20240518_models.GetIDEEventDetailRequest,
    ) -> dataworks_public_20240518_models.GetIDEEventDetailResponse:
        """
        @summary Queries the data snapshot of an extension point based on the ID of a message in DataWorks OpenEvent when the related extension point event is triggered.
        
        @param request: GetIDEEventDetailRequest
        @return: GetIDEEventDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_ideevent_detail_with_options(request, runtime)

    async def get_ideevent_detail_async(
        self,
        request: dataworks_public_20240518_models.GetIDEEventDetailRequest,
    ) -> dataworks_public_20240518_models.GetIDEEventDetailResponse:
        """
        @summary Queries the data snapshot of an extension point based on the ID of a message in DataWorks OpenEvent when the related extension point event is triggered.
        
        @param request: GetIDEEventDetailRequest
        @return: GetIDEEventDetailResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_ideevent_detail_with_options_async(request, runtime)

    def get_job_status_with_options(
        self,
        request: dataworks_public_20240518_models.GetJobStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetJobStatusResponse:
        """
        @summary Queries the status information of an asynchronous task. After you call an asynchronous operation, an asynchronous task is generated. You can call the GetJobStatus operation to query the status of the asynchronous task.
        
        @param request: GetJobStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetJobStatusResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetJobStatus',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetJobStatusResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_job_status_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetJobStatusRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetJobStatusResponse:
        """
        @summary Queries the status information of an asynchronous task. After you call an asynchronous operation, an asynchronous task is generated. You can call the GetJobStatus operation to query the status of the asynchronous task.
        
        @param request: GetJobStatusRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetJobStatusResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetJobStatus',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetJobStatusResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_job_status(
        self,
        request: dataworks_public_20240518_models.GetJobStatusRequest,
    ) -> dataworks_public_20240518_models.GetJobStatusResponse:
        """
        @summary Queries the status information of an asynchronous task. After you call an asynchronous operation, an asynchronous task is generated. You can call the GetJobStatus operation to query the status of the asynchronous task.
        
        @param request: GetJobStatusRequest
        @return: GetJobStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_job_status_with_options(request, runtime)

    async def get_job_status_async(
        self,
        request: dataworks_public_20240518_models.GetJobStatusRequest,
    ) -> dataworks_public_20240518_models.GetJobStatusResponse:
        """
        @summary Queries the status information of an asynchronous task. After you call an asynchronous operation, an asynchronous task is generated. You can call the GetJobStatus operation to query the status of the asynchronous task.
        
        @param request: GetJobStatusRequest
        @return: GetJobStatusResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_job_status_with_options_async(request, runtime)

    def get_lineage_relationship_with_options(
        self,
        request: dataworks_public_20240518_models.GetLineageRelationshipRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetLineageRelationshipResponse:
        """
        @summary 获取血缘关系详情
        
        @param request: GetLineageRelationshipRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetLineageRelationshipResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetLineageRelationship',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetLineageRelationshipResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_lineage_relationship_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetLineageRelationshipRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetLineageRelationshipResponse:
        """
        @summary 获取血缘关系详情
        
        @param request: GetLineageRelationshipRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetLineageRelationshipResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetLineageRelationship',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetLineageRelationshipResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_lineage_relationship(
        self,
        request: dataworks_public_20240518_models.GetLineageRelationshipRequest,
    ) -> dataworks_public_20240518_models.GetLineageRelationshipResponse:
        """
        @summary 获取血缘关系详情
        
        @param request: GetLineageRelationshipRequest
        @return: GetLineageRelationshipResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_lineage_relationship_with_options(request, runtime)

    async def get_lineage_relationship_async(
        self,
        request: dataworks_public_20240518_models.GetLineageRelationshipRequest,
    ) -> dataworks_public_20240518_models.GetLineageRelationshipResponse:
        """
        @summary 获取血缘关系详情
        
        @param request: GetLineageRelationshipRequest
        @return: GetLineageRelationshipResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_lineage_relationship_with_options_async(request, runtime)

    def get_meta_collection_with_options(
        self,
        request: dataworks_public_20240518_models.GetMetaCollectionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetMetaCollectionResponse:
        """
        @summary Queries the information about a collection in Data Map. Collections include categories and data albums.
        
        @param request: GetMetaCollectionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetMetaCollectionResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetMetaCollection',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetMetaCollectionResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_meta_collection_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetMetaCollectionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetMetaCollectionResponse:
        """
        @summary Queries the information about a collection in Data Map. Collections include categories and data albums.
        
        @param request: GetMetaCollectionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetMetaCollectionResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetMetaCollection',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetMetaCollectionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_meta_collection(
        self,
        request: dataworks_public_20240518_models.GetMetaCollectionRequest,
    ) -> dataworks_public_20240518_models.GetMetaCollectionResponse:
        """
        @summary Queries the information about a collection in Data Map. Collections include categories and data albums.
        
        @param request: GetMetaCollectionRequest
        @return: GetMetaCollectionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_meta_collection_with_options(request, runtime)

    async def get_meta_collection_async(
        self,
        request: dataworks_public_20240518_models.GetMetaCollectionRequest,
    ) -> dataworks_public_20240518_models.GetMetaCollectionResponse:
        """
        @summary Queries the information about a collection in Data Map. Collections include categories and data albums.
        
        @param request: GetMetaCollectionRequest
        @return: GetMetaCollectionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_meta_collection_with_options_async(request, runtime)

    def get_network_with_options(
        self,
        request: dataworks_public_20240518_models.GetNetworkRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetNetworkResponse:
        """
        @summary Queries the information about a network resource.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetNetworkRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetNetworkResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetNetwork',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetNetworkResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_network_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetNetworkRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetNetworkResponse:
        """
        @summary Queries the information about a network resource.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetNetworkRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetNetworkResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetNetwork',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetNetworkResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_network(
        self,
        request: dataworks_public_20240518_models.GetNetworkRequest,
    ) -> dataworks_public_20240518_models.GetNetworkResponse:
        """
        @summary Queries the information about a network resource.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetNetworkRequest
        @return: GetNetworkResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_network_with_options(request, runtime)

    async def get_network_async(
        self,
        request: dataworks_public_20240518_models.GetNetworkRequest,
    ) -> dataworks_public_20240518_models.GetNetworkResponse:
        """
        @summary Queries the information about a network resource.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetNetworkRequest
        @return: GetNetworkResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_network_with_options_async(request, runtime)

    def get_node_with_options(
        self,
        request: dataworks_public_20240518_models.GetNodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetNodeResponse:
        """
        @summary Queries the information about a node in DataStudio.
        
        @param request: GetNodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetNodeResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetNode',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetNodeResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_node_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetNodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetNodeResponse:
        """
        @summary Queries the information about a node in DataStudio.
        
        @param request: GetNodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetNodeResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetNode',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetNodeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_node(
        self,
        request: dataworks_public_20240518_models.GetNodeRequest,
    ) -> dataworks_public_20240518_models.GetNodeResponse:
        """
        @summary Queries the information about a node in DataStudio.
        
        @param request: GetNodeRequest
        @return: GetNodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_node_with_options(request, runtime)

    async def get_node_async(
        self,
        request: dataworks_public_20240518_models.GetNodeRequest,
    ) -> dataworks_public_20240518_models.GetNodeResponse:
        """
        @summary Queries the information about a node in DataStudio.
        
        @param request: GetNodeRequest
        @return: GetNodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_node_with_options_async(request, runtime)

    def get_partition_with_options(
        self,
        request: dataworks_public_20240518_models.GetPartitionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetPartitionResponse:
        """
        @summary 获取数据表的分区详情
        
        @param request: GetPartitionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetPartitionResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetPartition',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetPartitionResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_partition_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetPartitionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetPartitionResponse:
        """
        @summary 获取数据表的分区详情
        
        @param request: GetPartitionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetPartitionResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetPartition',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetPartitionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_partition(
        self,
        request: dataworks_public_20240518_models.GetPartitionRequest,
    ) -> dataworks_public_20240518_models.GetPartitionResponse:
        """
        @summary 获取数据表的分区详情
        
        @param request: GetPartitionRequest
        @return: GetPartitionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_partition_with_options(request, runtime)

    async def get_partition_async(
        self,
        request: dataworks_public_20240518_models.GetPartitionRequest,
    ) -> dataworks_public_20240518_models.GetPartitionResponse:
        """
        @summary 获取数据表的分区详情
        
        @param request: GetPartitionRequest
        @return: GetPartitionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_partition_with_options_async(request, runtime)

    def get_pipeline_run_with_options(
        self,
        request: dataworks_public_20240518_models.GetPipelineRunRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetPipelineRunResponse:
        """
        @summary Queries the information about a process for deploying or undeploying an entity.
        
        @param request: GetPipelineRunRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetPipelineRunResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetPipelineRun',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetPipelineRunResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_pipeline_run_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetPipelineRunRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetPipelineRunResponse:
        """
        @summary Queries the information about a process for deploying or undeploying an entity.
        
        @param request: GetPipelineRunRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetPipelineRunResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetPipelineRun',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetPipelineRunResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_pipeline_run(
        self,
        request: dataworks_public_20240518_models.GetPipelineRunRequest,
    ) -> dataworks_public_20240518_models.GetPipelineRunResponse:
        """
        @summary Queries the information about a process for deploying or undeploying an entity.
        
        @param request: GetPipelineRunRequest
        @return: GetPipelineRunResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_pipeline_run_with_options(request, runtime)

    async def get_pipeline_run_async(
        self,
        request: dataworks_public_20240518_models.GetPipelineRunRequest,
    ) -> dataworks_public_20240518_models.GetPipelineRunResponse:
        """
        @summary Queries the information about a process for deploying or undeploying an entity.
        
        @param request: GetPipelineRunRequest
        @return: GetPipelineRunResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_pipeline_run_with_options_async(request, runtime)

    def get_project_with_options(
        self,
        request: dataworks_public_20240518_models.GetProjectRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetProjectResponse:
        """
        @summary Queries the information about a DataWorks workspace.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetProjectRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetProjectResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetProject',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetProjectResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_project_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetProjectRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetProjectResponse:
        """
        @summary Queries the information about a DataWorks workspace.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetProjectRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetProjectResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetProject',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetProjectResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_project(
        self,
        request: dataworks_public_20240518_models.GetProjectRequest,
    ) -> dataworks_public_20240518_models.GetProjectResponse:
        """
        @summary Queries the information about a DataWorks workspace.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetProjectRequest
        @return: GetProjectResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_project_with_options(request, runtime)

    async def get_project_async(
        self,
        request: dataworks_public_20240518_models.GetProjectRequest,
    ) -> dataworks_public_20240518_models.GetProjectResponse:
        """
        @summary Queries the information about a DataWorks workspace.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetProjectRequest
        @return: GetProjectResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_project_with_options_async(request, runtime)

    def get_project_member_with_options(
        self,
        request: dataworks_public_20240518_models.GetProjectMemberRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetProjectMemberResponse:
        """
        @summary Queries the details about a member in a workspace.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetProjectMemberRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetProjectMemberResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.user_id):
            body['UserId'] = request.user_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetProjectMember',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetProjectMemberResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_project_member_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetProjectMemberRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetProjectMemberResponse:
        """
        @summary Queries the details about a member in a workspace.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetProjectMemberRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetProjectMemberResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.user_id):
            body['UserId'] = request.user_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GetProjectMember',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetProjectMemberResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_project_member(
        self,
        request: dataworks_public_20240518_models.GetProjectMemberRequest,
    ) -> dataworks_public_20240518_models.GetProjectMemberResponse:
        """
        @summary Queries the details about a member in a workspace.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetProjectMemberRequest
        @return: GetProjectMemberResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_project_member_with_options(request, runtime)

    async def get_project_member_async(
        self,
        request: dataworks_public_20240518_models.GetProjectMemberRequest,
    ) -> dataworks_public_20240518_models.GetProjectMemberResponse:
        """
        @summary Queries the details about a member in a workspace.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetProjectMemberRequest
        @return: GetProjectMemberResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_project_member_with_options_async(request, runtime)

    def get_project_role_with_options(
        self,
        request: dataworks_public_20240518_models.GetProjectRoleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetProjectRoleResponse:
        """
        @summary Queries the information about a role in a DataWorks workspace.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetProjectRoleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetProjectRoleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.code):
            query['Code'] = request.code
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetProjectRole',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetProjectRoleResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_project_role_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetProjectRoleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetProjectRoleResponse:
        """
        @summary Queries the information about a role in a DataWorks workspace.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetProjectRoleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetProjectRoleResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.code):
            query['Code'] = request.code
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetProjectRole',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetProjectRoleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_project_role(
        self,
        request: dataworks_public_20240518_models.GetProjectRoleRequest,
    ) -> dataworks_public_20240518_models.GetProjectRoleResponse:
        """
        @summary Queries the information about a role in a DataWorks workspace.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetProjectRoleRequest
        @return: GetProjectRoleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_project_role_with_options(request, runtime)

    async def get_project_role_async(
        self,
        request: dataworks_public_20240518_models.GetProjectRoleRequest,
    ) -> dataworks_public_20240518_models.GetProjectRoleResponse:
        """
        @summary Queries the information about a role in a DataWorks workspace.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetProjectRoleRequest
        @return: GetProjectRoleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_project_role_with_options_async(request, runtime)

    def get_rerun_workflow_instances_result_with_options(
        self,
        request: dataworks_public_20240518_models.GetRerunWorkflowInstancesResultRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetRerunWorkflowInstancesResultResponse:
        """
        @summary Query the result of asynchronous workflow instance reruns.
        
        @param request: GetRerunWorkflowInstancesResultRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetRerunWorkflowInstancesResultResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.operation_id):
            query['OperationId'] = request.operation_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetRerunWorkflowInstancesResult',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetRerunWorkflowInstancesResultResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_rerun_workflow_instances_result_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetRerunWorkflowInstancesResultRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetRerunWorkflowInstancesResultResponse:
        """
        @summary Query the result of asynchronous workflow instance reruns.
        
        @param request: GetRerunWorkflowInstancesResultRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetRerunWorkflowInstancesResultResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.operation_id):
            query['OperationId'] = request.operation_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetRerunWorkflowInstancesResult',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetRerunWorkflowInstancesResultResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_rerun_workflow_instances_result(
        self,
        request: dataworks_public_20240518_models.GetRerunWorkflowInstancesResultRequest,
    ) -> dataworks_public_20240518_models.GetRerunWorkflowInstancesResultResponse:
        """
        @summary Query the result of asynchronous workflow instance reruns.
        
        @param request: GetRerunWorkflowInstancesResultRequest
        @return: GetRerunWorkflowInstancesResultResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_rerun_workflow_instances_result_with_options(request, runtime)

    async def get_rerun_workflow_instances_result_async(
        self,
        request: dataworks_public_20240518_models.GetRerunWorkflowInstancesResultRequest,
    ) -> dataworks_public_20240518_models.GetRerunWorkflowInstancesResultResponse:
        """
        @summary Query the result of asynchronous workflow instance reruns.
        
        @param request: GetRerunWorkflowInstancesResultRequest
        @return: GetRerunWorkflowInstancesResultResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_rerun_workflow_instances_result_with_options_async(request, runtime)

    def get_resource_with_options(
        self,
        request: dataworks_public_20240518_models.GetResourceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetResourceResponse:
        """
        @summary Queries the information about a file resource.
        
        @param request: GetResourceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetResourceResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetResource',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetResourceResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_resource_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetResourceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetResourceResponse:
        """
        @summary Queries the information about a file resource.
        
        @param request: GetResourceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetResourceResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetResource',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetResourceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_resource(
        self,
        request: dataworks_public_20240518_models.GetResourceRequest,
    ) -> dataworks_public_20240518_models.GetResourceResponse:
        """
        @summary Queries the information about a file resource.
        
        @param request: GetResourceRequest
        @return: GetResourceResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_resource_with_options(request, runtime)

    async def get_resource_async(
        self,
        request: dataworks_public_20240518_models.GetResourceRequest,
    ) -> dataworks_public_20240518_models.GetResourceResponse:
        """
        @summary Queries the information about a file resource.
        
        @param request: GetResourceRequest
        @return: GetResourceResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_resource_with_options_async(request, runtime)

    def get_resource_group_with_options(
        self,
        request: dataworks_public_20240518_models.GetResourceGroupRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetResourceGroupResponse:
        """
        @summary Queries the information about a resource group based on its ID.
        
        @description You can use this API operation only in DataWorks Basic Edition or an advanced edition.
        
        @param request: GetResourceGroupRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetResourceGroupResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetResourceGroup',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetResourceGroupResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_resource_group_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetResourceGroupRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetResourceGroupResponse:
        """
        @summary Queries the information about a resource group based on its ID.
        
        @description You can use this API operation only in DataWorks Basic Edition or an advanced edition.
        
        @param request: GetResourceGroupRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetResourceGroupResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetResourceGroup',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetResourceGroupResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_resource_group(
        self,
        request: dataworks_public_20240518_models.GetResourceGroupRequest,
    ) -> dataworks_public_20240518_models.GetResourceGroupResponse:
        """
        @summary Queries the information about a resource group based on its ID.
        
        @description You can use this API operation only in DataWorks Basic Edition or an advanced edition.
        
        @param request: GetResourceGroupRequest
        @return: GetResourceGroupResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_resource_group_with_options(request, runtime)

    async def get_resource_group_async(
        self,
        request: dataworks_public_20240518_models.GetResourceGroupRequest,
    ) -> dataworks_public_20240518_models.GetResourceGroupResponse:
        """
        @summary Queries the information about a resource group based on its ID.
        
        @description You can use this API operation only in DataWorks Basic Edition or an advanced edition.
        
        @param request: GetResourceGroupRequest
        @return: GetResourceGroupResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_resource_group_with_options_async(request, runtime)

    def get_route_with_options(
        self,
        request: dataworks_public_20240518_models.GetRouteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetRouteResponse:
        """
        @summary Queries the information about a route based on its ID.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetRouteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetRouteResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetRoute',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetRouteResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_route_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetRouteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetRouteResponse:
        """
        @summary Queries the information about a route based on its ID.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetRouteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetRouteResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetRoute',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetRouteResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_route(
        self,
        request: dataworks_public_20240518_models.GetRouteRequest,
    ) -> dataworks_public_20240518_models.GetRouteResponse:
        """
        @summary Queries the information about a route based on its ID.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetRouteRequest
        @return: GetRouteResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_route_with_options(request, runtime)

    async def get_route_async(
        self,
        request: dataworks_public_20240518_models.GetRouteRequest,
    ) -> dataworks_public_20240518_models.GetRouteResponse:
        """
        @summary Queries the information about a route based on its ID.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetRouteRequest
        @return: GetRouteResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_route_with_options_async(request, runtime)

    def get_schema_with_options(
        self,
        request: dataworks_public_20240518_models.GetSchemaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetSchemaResponse:
        """
        @summary Queries the information about a schema in Data Map. You can call this API operation to query the information only about MaxCompute and Hologres schemas.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  You can call this API operation to query the information only about MaxCompute and Hologres schemas.
        
        @param request: GetSchemaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSchemaResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetSchema',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetSchemaResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_schema_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetSchemaRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetSchemaResponse:
        """
        @summary Queries the information about a schema in Data Map. You can call this API operation to query the information only about MaxCompute and Hologres schemas.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  You can call this API operation to query the information only about MaxCompute and Hologres schemas.
        
        @param request: GetSchemaRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetSchemaResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetSchema',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetSchemaResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_schema(
        self,
        request: dataworks_public_20240518_models.GetSchemaRequest,
    ) -> dataworks_public_20240518_models.GetSchemaResponse:
        """
        @summary Queries the information about a schema in Data Map. You can call this API operation to query the information only about MaxCompute and Hologres schemas.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  You can call this API operation to query the information only about MaxCompute and Hologres schemas.
        
        @param request: GetSchemaRequest
        @return: GetSchemaResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_schema_with_options(request, runtime)

    async def get_schema_async(
        self,
        request: dataworks_public_20240518_models.GetSchemaRequest,
    ) -> dataworks_public_20240518_models.GetSchemaResponse:
        """
        @summary Queries the information about a schema in Data Map. You can call this API operation to query the information only about MaxCompute and Hologres schemas.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  You can call this API operation to query the information only about MaxCompute and Hologres schemas.
        
        @param request: GetSchemaRequest
        @return: GetSchemaResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_schema_with_options_async(request, runtime)

    def get_table_with_options(
        self,
        request: dataworks_public_20240518_models.GetTableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetTableResponse:
        """
        @summary 获取表详情
        
        @param request: GetTableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetTableResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetTable',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetTableResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_table_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetTableRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetTableResponse:
        """
        @summary 获取表详情
        
        @param request: GetTableRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetTableResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetTable',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetTableResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_table(
        self,
        request: dataworks_public_20240518_models.GetTableRequest,
    ) -> dataworks_public_20240518_models.GetTableResponse:
        """
        @summary 获取表详情
        
        @param request: GetTableRequest
        @return: GetTableResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_table_with_options(request, runtime)

    async def get_table_async(
        self,
        request: dataworks_public_20240518_models.GetTableRequest,
    ) -> dataworks_public_20240518_models.GetTableResponse:
        """
        @summary 获取表详情
        
        @param request: GetTableRequest
        @return: GetTableResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_table_with_options_async(request, runtime)

    def get_task_with_options(
        self,
        request: dataworks_public_20240518_models.GetTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetTaskResponse:
        """
        @summary Queries the information about a task.
        
        @param request: GetTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetTaskResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetTask',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_task_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetTaskResponse:
        """
        @summary Queries the information about a task.
        
        @param request: GetTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetTaskResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetTask',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_task(
        self,
        request: dataworks_public_20240518_models.GetTaskRequest,
    ) -> dataworks_public_20240518_models.GetTaskResponse:
        """
        @summary Queries the information about a task.
        
        @param request: GetTaskRequest
        @return: GetTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_task_with_options(request, runtime)

    async def get_task_async(
        self,
        request: dataworks_public_20240518_models.GetTaskRequest,
    ) -> dataworks_public_20240518_models.GetTaskResponse:
        """
        @summary Queries the information about a task.
        
        @param request: GetTaskRequest
        @return: GetTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_task_with_options_async(request, runtime)

    def get_task_instance_with_options(
        self,
        request: dataworks_public_20240518_models.GetTaskInstanceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetTaskInstanceResponse:
        """
        @summary Queries the information about an instance.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetTaskInstanceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetTaskInstanceResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetTaskInstance',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetTaskInstanceResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_task_instance_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetTaskInstanceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetTaskInstanceResponse:
        """
        @summary Queries the information about an instance.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetTaskInstanceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetTaskInstanceResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetTaskInstance',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetTaskInstanceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_task_instance(
        self,
        request: dataworks_public_20240518_models.GetTaskInstanceRequest,
    ) -> dataworks_public_20240518_models.GetTaskInstanceResponse:
        """
        @summary Queries the information about an instance.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetTaskInstanceRequest
        @return: GetTaskInstanceResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_task_instance_with_options(request, runtime)

    async def get_task_instance_async(
        self,
        request: dataworks_public_20240518_models.GetTaskInstanceRequest,
    ) -> dataworks_public_20240518_models.GetTaskInstanceResponse:
        """
        @summary Queries the information about an instance.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetTaskInstanceRequest
        @return: GetTaskInstanceResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_task_instance_with_options_async(request, runtime)

    def get_task_instance_log_with_options(
        self,
        request: dataworks_public_20240518_models.GetTaskInstanceLogRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetTaskInstanceLogResponse:
        """
        @summary Queries the run log generated during a specific run of an instance.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetTaskInstanceLogRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetTaskInstanceLogResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetTaskInstanceLog',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetTaskInstanceLogResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_task_instance_log_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetTaskInstanceLogRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetTaskInstanceLogResponse:
        """
        @summary Queries the run log generated during a specific run of an instance.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetTaskInstanceLogRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetTaskInstanceLogResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetTaskInstanceLog',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetTaskInstanceLogResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_task_instance_log(
        self,
        request: dataworks_public_20240518_models.GetTaskInstanceLogRequest,
    ) -> dataworks_public_20240518_models.GetTaskInstanceLogResponse:
        """
        @summary Queries the run log generated during a specific run of an instance.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetTaskInstanceLogRequest
        @return: GetTaskInstanceLogResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_task_instance_log_with_options(request, runtime)

    async def get_task_instance_log_async(
        self,
        request: dataworks_public_20240518_models.GetTaskInstanceLogRequest,
    ) -> dataworks_public_20240518_models.GetTaskInstanceLogResponse:
        """
        @summary Queries the run log generated during a specific run of an instance.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetTaskInstanceLogRequest
        @return: GetTaskInstanceLogResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_task_instance_log_with_options_async(request, runtime)

    def get_workflow_with_options(
        self,
        request: dataworks_public_20240518_models.GetWorkflowRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetWorkflowResponse:
        """
        @summary Queries the information about a workflow.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetWorkflowRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetWorkflowResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetWorkflow',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetWorkflowResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_workflow_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetWorkflowRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetWorkflowResponse:
        """
        @summary Queries the information about a workflow.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetWorkflowRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetWorkflowResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetWorkflow',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetWorkflowResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_workflow(
        self,
        request: dataworks_public_20240518_models.GetWorkflowRequest,
    ) -> dataworks_public_20240518_models.GetWorkflowResponse:
        """
        @summary Queries the information about a workflow.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetWorkflowRequest
        @return: GetWorkflowResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_workflow_with_options(request, runtime)

    async def get_workflow_async(
        self,
        request: dataworks_public_20240518_models.GetWorkflowRequest,
    ) -> dataworks_public_20240518_models.GetWorkflowResponse:
        """
        @summary Queries the information about a workflow.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetWorkflowRequest
        @return: GetWorkflowResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_workflow_with_options_async(request, runtime)

    def get_workflow_definition_with_options(
        self,
        request: dataworks_public_20240518_models.GetWorkflowDefinitionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetWorkflowDefinitionResponse:
        """
        @summary Queries the information about a workflow.
        
        @param request: GetWorkflowDefinitionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetWorkflowDefinitionResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetWorkflowDefinition',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetWorkflowDefinitionResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_workflow_definition_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetWorkflowDefinitionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetWorkflowDefinitionResponse:
        """
        @summary Queries the information about a workflow.
        
        @param request: GetWorkflowDefinitionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetWorkflowDefinitionResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetWorkflowDefinition',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetWorkflowDefinitionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_workflow_definition(
        self,
        request: dataworks_public_20240518_models.GetWorkflowDefinitionRequest,
    ) -> dataworks_public_20240518_models.GetWorkflowDefinitionResponse:
        """
        @summary Queries the information about a workflow.
        
        @param request: GetWorkflowDefinitionRequest
        @return: GetWorkflowDefinitionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_workflow_definition_with_options(request, runtime)

    async def get_workflow_definition_async(
        self,
        request: dataworks_public_20240518_models.GetWorkflowDefinitionRequest,
    ) -> dataworks_public_20240518_models.GetWorkflowDefinitionResponse:
        """
        @summary Queries the information about a workflow.
        
        @param request: GetWorkflowDefinitionRequest
        @return: GetWorkflowDefinitionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_workflow_definition_with_options_async(request, runtime)

    def get_workflow_instance_with_options(
        self,
        request: dataworks_public_20240518_models.GetWorkflowInstanceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetWorkflowInstanceResponse:
        """
        @summary Queries the information about a workflow instance.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetWorkflowInstanceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetWorkflowInstanceResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetWorkflowInstance',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetWorkflowInstanceResponse(),
            self.call_api(params, req, runtime)
        )

    async def get_workflow_instance_with_options_async(
        self,
        request: dataworks_public_20240518_models.GetWorkflowInstanceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GetWorkflowInstanceResponse:
        """
        @summary Queries the information about a workflow instance.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetWorkflowInstanceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GetWorkflowInstanceResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='GetWorkflowInstance',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GetWorkflowInstanceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def get_workflow_instance(
        self,
        request: dataworks_public_20240518_models.GetWorkflowInstanceRequest,
    ) -> dataworks_public_20240518_models.GetWorkflowInstanceResponse:
        """
        @summary Queries the information about a workflow instance.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetWorkflowInstanceRequest
        @return: GetWorkflowInstanceResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.get_workflow_instance_with_options(request, runtime)

    async def get_workflow_instance_async(
        self,
        request: dataworks_public_20240518_models.GetWorkflowInstanceRequest,
    ) -> dataworks_public_20240518_models.GetWorkflowInstanceResponse:
        """
        @summary Queries the information about a workflow instance.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GetWorkflowInstanceRequest
        @return: GetWorkflowInstanceResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.get_workflow_instance_with_options_async(request, runtime)

    def grant_member_project_roles_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.GrantMemberProjectRolesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GrantMemberProjectRolesResponse:
        """
        @summary Assigns roles to members in a workspace.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: GrantMemberProjectRolesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GrantMemberProjectRolesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.GrantMemberProjectRolesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.role_codes):
            request.role_codes_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.role_codes, 'RoleCodes', 'json')
        body = {}
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.role_codes_shrink):
            body['RoleCodes'] = request.role_codes_shrink
        if not UtilClient.is_unset(request.user_id):
            body['UserId'] = request.user_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GrantMemberProjectRoles',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GrantMemberProjectRolesResponse(),
            self.call_api(params, req, runtime)
        )

    async def grant_member_project_roles_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.GrantMemberProjectRolesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.GrantMemberProjectRolesResponse:
        """
        @summary Assigns roles to members in a workspace.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: GrantMemberProjectRolesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: GrantMemberProjectRolesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.GrantMemberProjectRolesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.role_codes):
            request.role_codes_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.role_codes, 'RoleCodes', 'json')
        body = {}
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.role_codes_shrink):
            body['RoleCodes'] = request.role_codes_shrink
        if not UtilClient.is_unset(request.user_id):
            body['UserId'] = request.user_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='GrantMemberProjectRoles',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.GrantMemberProjectRolesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def grant_member_project_roles(
        self,
        request: dataworks_public_20240518_models.GrantMemberProjectRolesRequest,
    ) -> dataworks_public_20240518_models.GrantMemberProjectRolesResponse:
        """
        @summary Assigns roles to members in a workspace.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GrantMemberProjectRolesRequest
        @return: GrantMemberProjectRolesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.grant_member_project_roles_with_options(request, runtime)

    async def grant_member_project_roles_async(
        self,
        request: dataworks_public_20240518_models.GrantMemberProjectRolesRequest,
    ) -> dataworks_public_20240518_models.GrantMemberProjectRolesResponse:
        """
        @summary Assigns roles to members in a workspace.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: GrantMemberProjectRolesRequest
        @return: GrantMemberProjectRolesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.grant_member_project_roles_with_options_async(request, runtime)

    def import_certificate_with_options(
        self,
        request: dataworks_public_20240518_models.ImportCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ImportCertificateResponse:
        """
        @summary Imports a certificate file.
        
        @param request: ImportCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ImportCertificateResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.certificate_file):
            query['CertificateFile'] = request.certificate_file
        if not UtilClient.is_unset(request.description):
            query['Description'] = request.description
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ImportCertificate',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ImportCertificateResponse(),
            self.call_api(params, req, runtime)
        )

    async def import_certificate_with_options_async(
        self,
        request: dataworks_public_20240518_models.ImportCertificateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ImportCertificateResponse:
        """
        @summary Imports a certificate file.
        
        @param request: ImportCertificateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ImportCertificateResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.certificate_file):
            query['CertificateFile'] = request.certificate_file
        if not UtilClient.is_unset(request.description):
            query['Description'] = request.description
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ImportCertificate',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ImportCertificateResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def import_certificate(
        self,
        request: dataworks_public_20240518_models.ImportCertificateRequest,
    ) -> dataworks_public_20240518_models.ImportCertificateResponse:
        """
        @summary Imports a certificate file.
        
        @param request: ImportCertificateRequest
        @return: ImportCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.import_certificate_with_options(request, runtime)

    async def import_certificate_async(
        self,
        request: dataworks_public_20240518_models.ImportCertificateRequest,
    ) -> dataworks_public_20240518_models.ImportCertificateResponse:
        """
        @summary Imports a certificate file.
        
        @param request: ImportCertificateRequest
        @return: ImportCertificateResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.import_certificate_with_options_async(request, runtime)

    def import_certificate_advance(
        self,
        request: dataworks_public_20240518_models.ImportCertificateAdvanceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ImportCertificateResponse:
        # Step 0: init client
        credential_model = None
        if UtilClient.is_unset(self._credential):
            raise TeaException({
                'code': 'InvalidCredentials',
                'message': 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
            })
        credential_model = self._credential.get_credential()
        access_key_id = credential_model.access_key_id
        access_key_secret = credential_model.access_key_secret
        security_token = credential_model.security_token
        credential_type = credential_model.type
        open_platform_endpoint = self._open_platform_endpoint
        if UtilClient.empty(open_platform_endpoint):
            open_platform_endpoint = 'openplatform.aliyuncs.com'
        if UtilClient.is_unset(credential_type):
            credential_type = 'access_key'
        auth_config = open_api_models.Config(
            access_key_id=access_key_id,
            access_key_secret=access_key_secret,
            security_token=security_token,
            type=credential_type,
            endpoint=open_platform_endpoint,
            protocol=self._protocol,
            region_id=self._region_id
        )
        auth_client = OpenApiClient(auth_config)
        auth_request = {
            'Product': 'dataworks-public',
            'RegionId': self._region_id
        }
        auth_req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(auth_request)
        )
        auth_params = open_api_models.Params(
            action='AuthorizeFileUpload',
            version='2019-12-19',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        auth_response = {}
        file_obj = file_form_models.FileField()
        oss_header = {}
        tmp_body = {}
        use_accelerate = False
        auth_response_body = {}
        import_certificate_req = dataworks_public_20240518_models.ImportCertificateRequest()
        OpenApiUtilClient.convert(request, import_certificate_req)
        if not UtilClient.is_unset(request.certificate_file_object):
            tmp_resp_0 = auth_client.call_api(auth_params, auth_req, runtime)
            auth_response = UtilClient.assert_as_map(tmp_resp_0)
            tmp_body = UtilClient.assert_as_map(auth_response.get('body'))
            use_accelerate = UtilClient.assert_as_boolean(tmp_body.get('UseAccelerate'))
            auth_response_body = UtilClient.stringify_map_value(tmp_body)
            file_obj = file_form_models.FileField(
                filename=auth_response_body.get('ObjectKey'),
                content=request.certificate_file_object,
                content_type=''
            )
            oss_header = {
                'host': f"{auth_response_body.get('Bucket')}.{OpenApiUtilClient.get_endpoint(auth_response_body.get('Endpoint'), use_accelerate, self._endpoint_type)}",
                'OSSAccessKeyId': auth_response_body.get('AccessKeyId'),
                'policy': auth_response_body.get('EncodedPolicy'),
                'Signature': auth_response_body.get('Signature'),
                'key': auth_response_body.get('ObjectKey'),
                'file': file_obj,
                'success_action_status': '201'
            }
            self._post_ossobject(auth_response_body.get('Bucket'), oss_header)
            import_certificate_req.certificate_file = f"http://{auth_response_body.get('Bucket')}.{auth_response_body.get('Endpoint')}/{auth_response_body.get('ObjectKey')}"
        import_certificate_resp = self.import_certificate_with_options(import_certificate_req, runtime)
        return import_certificate_resp

    async def import_certificate_advance_async(
        self,
        request: dataworks_public_20240518_models.ImportCertificateAdvanceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ImportCertificateResponse:
        # Step 0: init client
        credential_model = None
        if UtilClient.is_unset(self._credential):
            raise TeaException({
                'code': 'InvalidCredentials',
                'message': 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
            })
        credential_model = await self._credential.get_credential_async()
        access_key_id = credential_model.access_key_id
        access_key_secret = credential_model.access_key_secret
        security_token = credential_model.security_token
        credential_type = credential_model.type
        open_platform_endpoint = self._open_platform_endpoint
        if UtilClient.empty(open_platform_endpoint):
            open_platform_endpoint = 'openplatform.aliyuncs.com'
        if UtilClient.is_unset(credential_type):
            credential_type = 'access_key'
        auth_config = open_api_models.Config(
            access_key_id=access_key_id,
            access_key_secret=access_key_secret,
            security_token=security_token,
            type=credential_type,
            endpoint=open_platform_endpoint,
            protocol=self._protocol,
            region_id=self._region_id
        )
        auth_client = OpenApiClient(auth_config)
        auth_request = {
            'Product': 'dataworks-public',
            'RegionId': self._region_id
        }
        auth_req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(auth_request)
        )
        auth_params = open_api_models.Params(
            action='AuthorizeFileUpload',
            version='2019-12-19',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        auth_response = {}
        file_obj = file_form_models.FileField()
        oss_header = {}
        tmp_body = {}
        use_accelerate = False
        auth_response_body = {}
        import_certificate_req = dataworks_public_20240518_models.ImportCertificateRequest()
        OpenApiUtilClient.convert(request, import_certificate_req)
        if not UtilClient.is_unset(request.certificate_file_object):
            tmp_resp_0 = await auth_client.call_api_async(auth_params, auth_req, runtime)
            auth_response = UtilClient.assert_as_map(tmp_resp_0)
            tmp_body = UtilClient.assert_as_map(auth_response.get('body'))
            use_accelerate = UtilClient.assert_as_boolean(tmp_body.get('UseAccelerate'))
            auth_response_body = UtilClient.stringify_map_value(tmp_body)
            file_obj = file_form_models.FileField(
                filename=auth_response_body.get('ObjectKey'),
                content=request.certificate_file_object,
                content_type=''
            )
            oss_header = {
                'host': f"{auth_response_body.get('Bucket')}.{OpenApiUtilClient.get_endpoint(auth_response_body.get('Endpoint'), use_accelerate, self._endpoint_type)}",
                'OSSAccessKeyId': auth_response_body.get('AccessKeyId'),
                'policy': auth_response_body.get('EncodedPolicy'),
                'Signature': auth_response_body.get('Signature'),
                'key': auth_response_body.get('ObjectKey'),
                'file': file_obj,
                'success_action_status': '201'
            }
            await self._post_ossobject_async(auth_response_body.get('Bucket'), oss_header)
            import_certificate_req.certificate_file = f"http://{auth_response_body.get('Bucket')}.{auth_response_body.get('Endpoint')}/{auth_response_body.get('ObjectKey')}"
        import_certificate_resp = await self.import_certificate_with_options_async(import_certificate_req, runtime)
        return import_certificate_resp

    def import_workflow_definition_with_options(
        self,
        request: dataworks_public_20240518_models.ImportWorkflowDefinitionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ImportWorkflowDefinitionResponse:
        """
        @summary Imports a workflow and its child nodes that are specified by the FlowSpec field to DataStudio.
        
        @description >
        You cannot use this API operation to import multiple workflows at a time. If you specify multiple workflows by using FlowSpec, the system imports only the first specified workflow.
        ImportWorkflowDefinition is an asynchronous operation. After you send a request, an asynchronous task is generated, and the system returns the ID of the asynchronous task. You can call the GetJobStatus operation to query the status of the asynchronous task.
        
        @param request: ImportWorkflowDefinitionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ImportWorkflowDefinitionResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.spec):
            body['Spec'] = request.spec
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ImportWorkflowDefinition',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ImportWorkflowDefinitionResponse(),
            self.call_api(params, req, runtime)
        )

    async def import_workflow_definition_with_options_async(
        self,
        request: dataworks_public_20240518_models.ImportWorkflowDefinitionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ImportWorkflowDefinitionResponse:
        """
        @summary Imports a workflow and its child nodes that are specified by the FlowSpec field to DataStudio.
        
        @description >
        You cannot use this API operation to import multiple workflows at a time. If you specify multiple workflows by using FlowSpec, the system imports only the first specified workflow.
        ImportWorkflowDefinition is an asynchronous operation. After you send a request, an asynchronous task is generated, and the system returns the ID of the asynchronous task. You can call the GetJobStatus operation to query the status of the asynchronous task.
        
        @param request: ImportWorkflowDefinitionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ImportWorkflowDefinitionResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.spec):
            body['Spec'] = request.spec
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ImportWorkflowDefinition',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ImportWorkflowDefinitionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def import_workflow_definition(
        self,
        request: dataworks_public_20240518_models.ImportWorkflowDefinitionRequest,
    ) -> dataworks_public_20240518_models.ImportWorkflowDefinitionResponse:
        """
        @summary Imports a workflow and its child nodes that are specified by the FlowSpec field to DataStudio.
        
        @description >
        You cannot use this API operation to import multiple workflows at a time. If you specify multiple workflows by using FlowSpec, the system imports only the first specified workflow.
        ImportWorkflowDefinition is an asynchronous operation. After you send a request, an asynchronous task is generated, and the system returns the ID of the asynchronous task. You can call the GetJobStatus operation to query the status of the asynchronous task.
        
        @param request: ImportWorkflowDefinitionRequest
        @return: ImportWorkflowDefinitionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.import_workflow_definition_with_options(request, runtime)

    async def import_workflow_definition_async(
        self,
        request: dataworks_public_20240518_models.ImportWorkflowDefinitionRequest,
    ) -> dataworks_public_20240518_models.ImportWorkflowDefinitionResponse:
        """
        @summary Imports a workflow and its child nodes that are specified by the FlowSpec field to DataStudio.
        
        @description >
        You cannot use this API operation to import multiple workflows at a time. If you specify multiple workflows by using FlowSpec, the system imports only the first specified workflow.
        ImportWorkflowDefinition is an asynchronous operation. After you send a request, an asynchronous task is generated, and the system returns the ID of the asynchronous task. You can call the GetJobStatus operation to query the status of the asynchronous task.
        
        @param request: ImportWorkflowDefinitionRequest
        @return: ImportWorkflowDefinitionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.import_workflow_definition_with_options_async(request, runtime)

    def list_alert_rules_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.ListAlertRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListAlertRulesResponse:
        """
        @summary Queries a list of custom monitoring alert rules.
        
        @param tmp_req: ListAlertRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAlertRulesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.ListAlertRulesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.task_ids):
            request.task_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.task_ids, 'TaskIds', 'json')
        if not UtilClient.is_unset(tmp_req.types):
            request.types_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.types, 'Types', 'json')
        query = {}
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.owner):
            query['Owner'] = request.owner
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.receiver):
            query['Receiver'] = request.receiver
        if not UtilClient.is_unset(request.task_ids_shrink):
            query['TaskIds'] = request.task_ids_shrink
        if not UtilClient.is_unset(request.types_shrink):
            query['Types'] = request.types_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListAlertRules',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListAlertRulesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_alert_rules_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.ListAlertRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListAlertRulesResponse:
        """
        @summary Queries a list of custom monitoring alert rules.
        
        @param tmp_req: ListAlertRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListAlertRulesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.ListAlertRulesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.task_ids):
            request.task_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.task_ids, 'TaskIds', 'json')
        if not UtilClient.is_unset(tmp_req.types):
            request.types_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.types, 'Types', 'json')
        query = {}
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.owner):
            query['Owner'] = request.owner
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.receiver):
            query['Receiver'] = request.receiver
        if not UtilClient.is_unset(request.task_ids_shrink):
            query['TaskIds'] = request.task_ids_shrink
        if not UtilClient.is_unset(request.types_shrink):
            query['Types'] = request.types_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListAlertRules',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListAlertRulesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_alert_rules(
        self,
        request: dataworks_public_20240518_models.ListAlertRulesRequest,
    ) -> dataworks_public_20240518_models.ListAlertRulesResponse:
        """
        @summary Queries a list of custom monitoring alert rules.
        
        @param request: ListAlertRulesRequest
        @return: ListAlertRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_alert_rules_with_options(request, runtime)

    async def list_alert_rules_async(
        self,
        request: dataworks_public_20240518_models.ListAlertRulesRequest,
    ) -> dataworks_public_20240518_models.ListAlertRulesResponse:
        """
        @summary Queries a list of custom monitoring alert rules.
        
        @param request: ListAlertRulesRequest
        @return: ListAlertRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_alert_rules_with_options_async(request, runtime)

    def list_business_with_options(
        self,
        request: dataworks_public_20240518_models.ListBusinessRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListBusinessResponse:
        """
        @param request: ListBusinessRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListBusinessResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.keyword):
            body['Keyword'] = request.keyword
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListBusiness',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListBusinessResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_business_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListBusinessRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListBusinessResponse:
        """
        @param request: ListBusinessRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListBusinessResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.keyword):
            body['Keyword'] = request.keyword
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListBusiness',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListBusinessResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_business(
        self,
        request: dataworks_public_20240518_models.ListBusinessRequest,
    ) -> dataworks_public_20240518_models.ListBusinessResponse:
        """
        @param request: ListBusinessRequest
        @return: ListBusinessResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_business_with_options(request, runtime)

    async def list_business_async(
        self,
        request: dataworks_public_20240518_models.ListBusinessRequest,
    ) -> dataworks_public_20240518_models.ListBusinessResponse:
        """
        @param request: ListBusinessRequest
        @return: ListBusinessResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_business_with_options_async(request, runtime)

    def list_catalogs_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.ListCatalogsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListCatalogsResponse:
        """
        @summary 查询数据目录列表
        
        @param tmp_req: ListCatalogsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCatalogsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.ListCatalogsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.types):
            request.types_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.types, 'Types', 'simple')
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCatalogs',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListCatalogsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_catalogs_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.ListCatalogsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListCatalogsResponse:
        """
        @summary 查询数据目录列表
        
        @param tmp_req: ListCatalogsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCatalogsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.ListCatalogsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.types):
            request.types_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.types, 'Types', 'simple')
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCatalogs',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListCatalogsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_catalogs(
        self,
        request: dataworks_public_20240518_models.ListCatalogsRequest,
    ) -> dataworks_public_20240518_models.ListCatalogsResponse:
        """
        @summary 查询数据目录列表
        
        @param request: ListCatalogsRequest
        @return: ListCatalogsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_catalogs_with_options(request, runtime)

    async def list_catalogs_async(
        self,
        request: dataworks_public_20240518_models.ListCatalogsRequest,
    ) -> dataworks_public_20240518_models.ListCatalogsResponse:
        """
        @summary 查询数据目录列表
        
        @param request: ListCatalogsRequest
        @return: ListCatalogsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_catalogs_with_options_async(request, runtime)

    def list_certificates_with_options(
        self,
        request: dataworks_public_20240518_models.ListCertificatesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListCertificatesResponse:
        """
        @summary Queries a list of certificate files.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  You can call this operation only if you are assigned one of the following roles in DataWorks: Tenant Owner, Workspace Administrator, Deploy, Develop, Visitor, Workspace Owner, O\\&M, Model Designer, Security Administrator, Data Analyst, OpenPlatform Administrator, and Data Governance Administrator.
        
        @param request: ListCertificatesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCertificatesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCertificates',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListCertificatesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_certificates_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListCertificatesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListCertificatesResponse:
        """
        @summary Queries a list of certificate files.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  You can call this operation only if you are assigned one of the following roles in DataWorks: Tenant Owner, Workspace Administrator, Deploy, Develop, Visitor, Workspace Owner, O\\&M, Model Designer, Security Administrator, Data Analyst, OpenPlatform Administrator, and Data Governance Administrator.
        
        @param request: ListCertificatesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCertificatesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListCertificates',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListCertificatesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_certificates(
        self,
        request: dataworks_public_20240518_models.ListCertificatesRequest,
    ) -> dataworks_public_20240518_models.ListCertificatesResponse:
        """
        @summary Queries a list of certificate files.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  You can call this operation only if you are assigned one of the following roles in DataWorks: Tenant Owner, Workspace Administrator, Deploy, Develop, Visitor, Workspace Owner, O\\&M, Model Designer, Security Administrator, Data Analyst, OpenPlatform Administrator, and Data Governance Administrator.
        
        @param request: ListCertificatesRequest
        @return: ListCertificatesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_certificates_with_options(request, runtime)

    async def list_certificates_async(
        self,
        request: dataworks_public_20240518_models.ListCertificatesRequest,
    ) -> dataworks_public_20240518_models.ListCertificatesResponse:
        """
        @summary Queries a list of certificate files.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  You can call this operation only if you are assigned one of the following roles in DataWorks: Tenant Owner, Workspace Administrator, Deploy, Develop, Visitor, Workspace Owner, O\\&M, Model Designer, Security Administrator, Data Analyst, OpenPlatform Administrator, and Data Governance Administrator.
        
        @param request: ListCertificatesRequest
        @return: ListCertificatesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_certificates_with_options_async(request, runtime)

    def list_columns_with_options(
        self,
        request: dataworks_public_20240518_models.ListColumnsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListColumnsResponse:
        """
        @summary 查询字段列表
        
        @param request: ListColumnsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListColumnsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListColumns',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListColumnsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_columns_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListColumnsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListColumnsResponse:
        """
        @summary 查询字段列表
        
        @param request: ListColumnsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListColumnsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListColumns',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListColumnsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_columns(
        self,
        request: dataworks_public_20240518_models.ListColumnsRequest,
    ) -> dataworks_public_20240518_models.ListColumnsResponse:
        """
        @summary 查询字段列表
        
        @param request: ListColumnsRequest
        @return: ListColumnsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_columns_with_options(request, runtime)

    async def list_columns_async(
        self,
        request: dataworks_public_20240518_models.ListColumnsRequest,
    ) -> dataworks_public_20240518_models.ListColumnsResponse:
        """
        @summary 查询字段列表
        
        @param request: ListColumnsRequest
        @return: ListColumnsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_columns_with_options_async(request, runtime)

    def list_crawler_types_with_options(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListCrawlerTypesResponse:
        """
        @summary 查询元数据采集器类型列表
        
        @param request: ListCrawlerTypesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCrawlerTypesResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='ListCrawlerTypes',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListCrawlerTypesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_crawler_types_with_options_async(
        self,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListCrawlerTypesResponse:
        """
        @summary 查询元数据采集器类型列表
        
        @param request: ListCrawlerTypesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListCrawlerTypesResponse
        """
        req = open_api_models.OpenApiRequest()
        params = open_api_models.Params(
            action='ListCrawlerTypes',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListCrawlerTypesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_crawler_types(self) -> dataworks_public_20240518_models.ListCrawlerTypesResponse:
        """
        @summary 查询元数据采集器类型列表
        
        @return: ListCrawlerTypesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_crawler_types_with_options(runtime)

    async def list_crawler_types_async(self) -> dataworks_public_20240518_models.ListCrawlerTypesResponse:
        """
        @summary 查询元数据采集器类型列表
        
        @return: ListCrawlerTypesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_crawler_types_with_options_async(runtime)

    def list_dialarm_rules_with_options(
        self,
        request: dataworks_public_20240518_models.ListDIAlarmRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDIAlarmRulesResponse:
        """
        @summary Views alert rules configured for a synchronization task.
        
        @param request: ListDIAlarmRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDIAlarmRulesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDIAlarmRules',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDIAlarmRulesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_dialarm_rules_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListDIAlarmRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDIAlarmRulesResponse:
        """
        @summary Views alert rules configured for a synchronization task.
        
        @param request: ListDIAlarmRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDIAlarmRulesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDIAlarmRules',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDIAlarmRulesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_dialarm_rules(
        self,
        request: dataworks_public_20240518_models.ListDIAlarmRulesRequest,
    ) -> dataworks_public_20240518_models.ListDIAlarmRulesResponse:
        """
        @summary Views alert rules configured for a synchronization task.
        
        @param request: ListDIAlarmRulesRequest
        @return: ListDIAlarmRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_dialarm_rules_with_options(request, runtime)

    async def list_dialarm_rules_async(
        self,
        request: dataworks_public_20240518_models.ListDIAlarmRulesRequest,
    ) -> dataworks_public_20240518_models.ListDIAlarmRulesResponse:
        """
        @summary Views alert rules configured for a synchronization task.
        
        @param request: ListDIAlarmRulesRequest
        @return: ListDIAlarmRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_dialarm_rules_with_options_async(request, runtime)

    def list_dijob_events_with_options(
        self,
        request: dataworks_public_20240518_models.ListDIJobEventsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDIJobEventsResponse:
        """
        @summary Queries events for a synchronization task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListDIJobEventsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDIJobEventsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDIJobEvents',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDIJobEventsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_dijob_events_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListDIJobEventsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDIJobEventsResponse:
        """
        @summary Queries events for a synchronization task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListDIJobEventsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDIJobEventsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDIJobEvents',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDIJobEventsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_dijob_events(
        self,
        request: dataworks_public_20240518_models.ListDIJobEventsRequest,
    ) -> dataworks_public_20240518_models.ListDIJobEventsResponse:
        """
        @summary Queries events for a synchronization task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListDIJobEventsRequest
        @return: ListDIJobEventsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_dijob_events_with_options(request, runtime)

    async def list_dijob_events_async(
        self,
        request: dataworks_public_20240518_models.ListDIJobEventsRequest,
    ) -> dataworks_public_20240518_models.ListDIJobEventsResponse:
        """
        @summary Queries events for a synchronization task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListDIJobEventsRequest
        @return: ListDIJobEventsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_dijob_events_with_options_async(request, runtime)

    def list_dijob_metrics_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.ListDIJobMetricsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDIJobMetricsResponse:
        """
        @summary Queries metrics for a synchronization task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: ListDIJobMetricsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDIJobMetricsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.ListDIJobMetricsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.metric_name):
            request.metric_name_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.metric_name, 'MetricName', 'json')
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDIJobMetrics',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDIJobMetricsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_dijob_metrics_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.ListDIJobMetricsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDIJobMetricsResponse:
        """
        @summary Queries metrics for a synchronization task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: ListDIJobMetricsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDIJobMetricsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.ListDIJobMetricsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.metric_name):
            request.metric_name_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.metric_name, 'MetricName', 'json')
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDIJobMetrics',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDIJobMetricsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_dijob_metrics(
        self,
        request: dataworks_public_20240518_models.ListDIJobMetricsRequest,
    ) -> dataworks_public_20240518_models.ListDIJobMetricsResponse:
        """
        @summary Queries metrics for a synchronization task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListDIJobMetricsRequest
        @return: ListDIJobMetricsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_dijob_metrics_with_options(request, runtime)

    async def list_dijob_metrics_async(
        self,
        request: dataworks_public_20240518_models.ListDIJobMetricsRequest,
    ) -> dataworks_public_20240518_models.ListDIJobMetricsResponse:
        """
        @summary Queries metrics for a synchronization task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListDIJobMetricsRequest
        @return: ListDIJobMetricsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_dijob_metrics_with_options_async(request, runtime)

    def list_dijob_run_details_with_options(
        self,
        request: dataworks_public_20240518_models.ListDIJobRunDetailsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDIJobRunDetailsResponse:
        """
        @summary Queries the running information about a synchronization task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListDIJobRunDetailsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDIJobRunDetailsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDIJobRunDetails',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDIJobRunDetailsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_dijob_run_details_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListDIJobRunDetailsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDIJobRunDetailsResponse:
        """
        @summary Queries the running information about a synchronization task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListDIJobRunDetailsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDIJobRunDetailsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDIJobRunDetails',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDIJobRunDetailsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_dijob_run_details(
        self,
        request: dataworks_public_20240518_models.ListDIJobRunDetailsRequest,
    ) -> dataworks_public_20240518_models.ListDIJobRunDetailsResponse:
        """
        @summary Queries the running information about a synchronization task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListDIJobRunDetailsRequest
        @return: ListDIJobRunDetailsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_dijob_run_details_with_options(request, runtime)

    async def list_dijob_run_details_async(
        self,
        request: dataworks_public_20240518_models.ListDIJobRunDetailsRequest,
    ) -> dataworks_public_20240518_models.ListDIJobRunDetailsResponse:
        """
        @summary Queries the running information about a synchronization task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListDIJobRunDetailsRequest
        @return: ListDIJobRunDetailsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_dijob_run_details_with_options_async(request, runtime)

    def list_dijobs_with_options(
        self,
        request: dataworks_public_20240518_models.ListDIJobsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDIJobsResponse:
        """
        @summary Queries a list of new-version synchronization tasks in Data Integration. A new-version synchronization task can be a real-time synchronization task used to synchronize full or incremental data in a database, a batch synchronization task used to synchronize full or incremental data in a database, or a real-time synchronization task used to synchronize incremental data in a single table.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListDIJobsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDIJobsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDIJobs',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDIJobsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_dijobs_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListDIJobsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDIJobsResponse:
        """
        @summary Queries a list of new-version synchronization tasks in Data Integration. A new-version synchronization task can be a real-time synchronization task used to synchronize full or incremental data in a database, a batch synchronization task used to synchronize full or incremental data in a database, or a real-time synchronization task used to synchronize incremental data in a single table.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListDIJobsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDIJobsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDIJobs',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDIJobsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_dijobs(
        self,
        request: dataworks_public_20240518_models.ListDIJobsRequest,
    ) -> dataworks_public_20240518_models.ListDIJobsResponse:
        """
        @summary Queries a list of new-version synchronization tasks in Data Integration. A new-version synchronization task can be a real-time synchronization task used to synchronize full or incremental data in a database, a batch synchronization task used to synchronize full or incremental data in a database, or a real-time synchronization task used to synchronize incremental data in a single table.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListDIJobsRequest
        @return: ListDIJobsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_dijobs_with_options(request, runtime)

    async def list_dijobs_async(
        self,
        request: dataworks_public_20240518_models.ListDIJobsRequest,
    ) -> dataworks_public_20240518_models.ListDIJobsResponse:
        """
        @summary Queries a list of new-version synchronization tasks in Data Integration. A new-version synchronization task can be a real-time synchronization task used to synchronize full or incremental data in a database, a batch synchronization task used to synchronize full or incremental data in a database, or a real-time synchronization task used to synchronize incremental data in a single table.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListDIJobsRequest
        @return: ListDIJobsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_dijobs_with_options_async(request, runtime)

    def list_data_asset_tags_with_options(
        self,
        request: dataworks_public_20240518_models.ListDataAssetTagsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDataAssetTagsResponse:
        """
        @summary Queries a list of tags.
        
        @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
        
        @param request: ListDataAssetTagsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDataAssetTagsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDataAssetTags',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDataAssetTagsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_data_asset_tags_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListDataAssetTagsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDataAssetTagsResponse:
        """
        @summary Queries a list of tags.
        
        @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
        
        @param request: ListDataAssetTagsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDataAssetTagsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDataAssetTags',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDataAssetTagsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_data_asset_tags(
        self,
        request: dataworks_public_20240518_models.ListDataAssetTagsRequest,
    ) -> dataworks_public_20240518_models.ListDataAssetTagsResponse:
        """
        @summary Queries a list of tags.
        
        @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
        
        @param request: ListDataAssetTagsRequest
        @return: ListDataAssetTagsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_data_asset_tags_with_options(request, runtime)

    async def list_data_asset_tags_async(
        self,
        request: dataworks_public_20240518_models.ListDataAssetTagsRequest,
    ) -> dataworks_public_20240518_models.ListDataAssetTagsResponse:
        """
        @summary Queries a list of tags.
        
        @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
        
        @param request: ListDataAssetTagsRequest
        @return: ListDataAssetTagsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_data_asset_tags_with_options_async(request, runtime)

    def list_data_assets_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.ListDataAssetsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDataAssetsResponse:
        """
        @summary Queries the information about DataWorks data assets to which tags are added by page.
        
        @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
        
        @param tmp_req: ListDataAssetsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDataAssetsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.ListDataAssetsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.data_asset_ids):
            request.data_asset_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.data_asset_ids, 'DataAssetIds', 'json')
        if not UtilClient.is_unset(tmp_req.tags):
            request.tags_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tags, 'Tags', 'json')
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDataAssets',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDataAssetsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_data_assets_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.ListDataAssetsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDataAssetsResponse:
        """
        @summary Queries the information about DataWorks data assets to which tags are added by page.
        
        @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
        
        @param tmp_req: ListDataAssetsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDataAssetsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.ListDataAssetsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.data_asset_ids):
            request.data_asset_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.data_asset_ids, 'DataAssetIds', 'json')
        if not UtilClient.is_unset(tmp_req.tags):
            request.tags_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tags, 'Tags', 'json')
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDataAssets',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDataAssetsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_data_assets(
        self,
        request: dataworks_public_20240518_models.ListDataAssetsRequest,
    ) -> dataworks_public_20240518_models.ListDataAssetsResponse:
        """
        @summary Queries the information about DataWorks data assets to which tags are added by page.
        
        @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
        
        @param request: ListDataAssetsRequest
        @return: ListDataAssetsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_data_assets_with_options(request, runtime)

    async def list_data_assets_async(
        self,
        request: dataworks_public_20240518_models.ListDataAssetsRequest,
    ) -> dataworks_public_20240518_models.ListDataAssetsResponse:
        """
        @summary Queries the information about DataWorks data assets to which tags are added by page.
        
        @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
        
        @param request: ListDataAssetsRequest
        @return: ListDataAssetsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_data_assets_with_options_async(request, runtime)

    def list_data_quality_alert_rules_with_options(
        self,
        request: dataworks_public_20240518_models.ListDataQualityAlertRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDataQualityAlertRulesResponse:
        """
        @summary 查询数据质量告警规则列表
        
        @param request: ListDataQualityAlertRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDataQualityAlertRulesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.data_quality_scan_id):
            query['DataQualityScanId'] = request.data_quality_scan_id
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.sort_by):
            query['SortBy'] = request.sort_by
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDataQualityAlertRules',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDataQualityAlertRulesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_data_quality_alert_rules_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListDataQualityAlertRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDataQualityAlertRulesResponse:
        """
        @summary 查询数据质量告警规则列表
        
        @param request: ListDataQualityAlertRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDataQualityAlertRulesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.data_quality_scan_id):
            query['DataQualityScanId'] = request.data_quality_scan_id
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.sort_by):
            query['SortBy'] = request.sort_by
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDataQualityAlertRules',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDataQualityAlertRulesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_data_quality_alert_rules(
        self,
        request: dataworks_public_20240518_models.ListDataQualityAlertRulesRequest,
    ) -> dataworks_public_20240518_models.ListDataQualityAlertRulesResponse:
        """
        @summary 查询数据质量告警规则列表
        
        @param request: ListDataQualityAlertRulesRequest
        @return: ListDataQualityAlertRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_data_quality_alert_rules_with_options(request, runtime)

    async def list_data_quality_alert_rules_async(
        self,
        request: dataworks_public_20240518_models.ListDataQualityAlertRulesRequest,
    ) -> dataworks_public_20240518_models.ListDataQualityAlertRulesResponse:
        """
        @summary 查询数据质量告警规则列表
        
        @param request: ListDataQualityAlertRulesRequest
        @return: ListDataQualityAlertRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_data_quality_alert_rules_with_options_async(request, runtime)

    def list_data_quality_evaluation_task_instances_with_options(
        self,
        request: dataworks_public_20240518_models.ListDataQualityEvaluationTaskInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDataQualityEvaluationTaskInstancesResponse:
        """
        @summary Queries a list of instances generated by a data quality monitoring task by page.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListDataQualityEvaluationTaskInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDataQualityEvaluationTaskInstancesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDataQualityEvaluationTaskInstances',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDataQualityEvaluationTaskInstancesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_data_quality_evaluation_task_instances_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListDataQualityEvaluationTaskInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDataQualityEvaluationTaskInstancesResponse:
        """
        @summary Queries a list of instances generated by a data quality monitoring task by page.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListDataQualityEvaluationTaskInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDataQualityEvaluationTaskInstancesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDataQualityEvaluationTaskInstances',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDataQualityEvaluationTaskInstancesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_data_quality_evaluation_task_instances(
        self,
        request: dataworks_public_20240518_models.ListDataQualityEvaluationTaskInstancesRequest,
    ) -> dataworks_public_20240518_models.ListDataQualityEvaluationTaskInstancesResponse:
        """
        @summary Queries a list of instances generated by a data quality monitoring task by page.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListDataQualityEvaluationTaskInstancesRequest
        @return: ListDataQualityEvaluationTaskInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_data_quality_evaluation_task_instances_with_options(request, runtime)

    async def list_data_quality_evaluation_task_instances_async(
        self,
        request: dataworks_public_20240518_models.ListDataQualityEvaluationTaskInstancesRequest,
    ) -> dataworks_public_20240518_models.ListDataQualityEvaluationTaskInstancesResponse:
        """
        @summary Queries a list of instances generated by a data quality monitoring task by page.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListDataQualityEvaluationTaskInstancesRequest
        @return: ListDataQualityEvaluationTaskInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_data_quality_evaluation_task_instances_with_options_async(request, runtime)

    def list_data_quality_evaluation_tasks_with_options(
        self,
        request: dataworks_public_20240518_models.ListDataQualityEvaluationTasksRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDataQualityEvaluationTasksResponse:
        """
        @summary Queries a list of data quality monitoring tasks by page.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListDataQualityEvaluationTasksRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDataQualityEvaluationTasksResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDataQualityEvaluationTasks',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDataQualityEvaluationTasksResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_data_quality_evaluation_tasks_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListDataQualityEvaluationTasksRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDataQualityEvaluationTasksResponse:
        """
        @summary Queries a list of data quality monitoring tasks by page.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListDataQualityEvaluationTasksRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDataQualityEvaluationTasksResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDataQualityEvaluationTasks',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDataQualityEvaluationTasksResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_data_quality_evaluation_tasks(
        self,
        request: dataworks_public_20240518_models.ListDataQualityEvaluationTasksRequest,
    ) -> dataworks_public_20240518_models.ListDataQualityEvaluationTasksResponse:
        """
        @summary Queries a list of data quality monitoring tasks by page.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListDataQualityEvaluationTasksRequest
        @return: ListDataQualityEvaluationTasksResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_data_quality_evaluation_tasks_with_options(request, runtime)

    async def list_data_quality_evaluation_tasks_async(
        self,
        request: dataworks_public_20240518_models.ListDataQualityEvaluationTasksRequest,
    ) -> dataworks_public_20240518_models.ListDataQualityEvaluationTasksResponse:
        """
        @summary Queries a list of data quality monitoring tasks by page.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListDataQualityEvaluationTasksRequest
        @return: ListDataQualityEvaluationTasksResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_data_quality_evaluation_tasks_with_options_async(request, runtime)

    def list_data_quality_results_with_options(
        self,
        request: dataworks_public_20240518_models.ListDataQualityResultsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDataQualityResultsResponse:
        """
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListDataQualityResultsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDataQualityResultsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDataQualityResults',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDataQualityResultsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_data_quality_results_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListDataQualityResultsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDataQualityResultsResponse:
        """
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListDataQualityResultsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDataQualityResultsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDataQualityResults',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDataQualityResultsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_data_quality_results(
        self,
        request: dataworks_public_20240518_models.ListDataQualityResultsRequest,
    ) -> dataworks_public_20240518_models.ListDataQualityResultsResponse:
        """
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListDataQualityResultsRequest
        @return: ListDataQualityResultsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_data_quality_results_with_options(request, runtime)

    async def list_data_quality_results_async(
        self,
        request: dataworks_public_20240518_models.ListDataQualityResultsRequest,
    ) -> dataworks_public_20240518_models.ListDataQualityResultsResponse:
        """
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListDataQualityResultsRequest
        @return: ListDataQualityResultsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_data_quality_results_with_options_async(request, runtime)

    def list_data_quality_rule_templates_with_options(
        self,
        request: dataworks_public_20240518_models.ListDataQualityRuleTemplatesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDataQualityRuleTemplatesResponse:
        """
        @summary Queries a list of data quality monitoring rule templates.
        
        @param request: ListDataQualityRuleTemplatesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDataQualityRuleTemplatesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDataQualityRuleTemplates',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDataQualityRuleTemplatesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_data_quality_rule_templates_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListDataQualityRuleTemplatesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDataQualityRuleTemplatesResponse:
        """
        @summary Queries a list of data quality monitoring rule templates.
        
        @param request: ListDataQualityRuleTemplatesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDataQualityRuleTemplatesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDataQualityRuleTemplates',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDataQualityRuleTemplatesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_data_quality_rule_templates(
        self,
        request: dataworks_public_20240518_models.ListDataQualityRuleTemplatesRequest,
    ) -> dataworks_public_20240518_models.ListDataQualityRuleTemplatesResponse:
        """
        @summary Queries a list of data quality monitoring rule templates.
        
        @param request: ListDataQualityRuleTemplatesRequest
        @return: ListDataQualityRuleTemplatesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_data_quality_rule_templates_with_options(request, runtime)

    async def list_data_quality_rule_templates_async(
        self,
        request: dataworks_public_20240518_models.ListDataQualityRuleTemplatesRequest,
    ) -> dataworks_public_20240518_models.ListDataQualityRuleTemplatesResponse:
        """
        @summary Queries a list of data quality monitoring rule templates.
        
        @param request: ListDataQualityRuleTemplatesRequest
        @return: ListDataQualityRuleTemplatesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_data_quality_rule_templates_with_options_async(request, runtime)

    def list_data_quality_rules_with_options(
        self,
        request: dataworks_public_20240518_models.ListDataQualityRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDataQualityRulesResponse:
        """
        @summary Queries a list of data quality monitoring rules by page.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListDataQualityRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDataQualityRulesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDataQualityRules',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDataQualityRulesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_data_quality_rules_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListDataQualityRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDataQualityRulesResponse:
        """
        @summary Queries a list of data quality monitoring rules by page.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListDataQualityRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDataQualityRulesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDataQualityRules',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDataQualityRulesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_data_quality_rules(
        self,
        request: dataworks_public_20240518_models.ListDataQualityRulesRequest,
    ) -> dataworks_public_20240518_models.ListDataQualityRulesResponse:
        """
        @summary Queries a list of data quality monitoring rules by page.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListDataQualityRulesRequest
        @return: ListDataQualityRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_data_quality_rules_with_options(request, runtime)

    async def list_data_quality_rules_async(
        self,
        request: dataworks_public_20240518_models.ListDataQualityRulesRequest,
    ) -> dataworks_public_20240518_models.ListDataQualityRulesResponse:
        """
        @summary Queries a list of data quality monitoring rules by page.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListDataQualityRulesRequest
        @return: ListDataQualityRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_data_quality_rules_with_options_async(request, runtime)

    def list_data_quality_scan_runs_with_options(
        self,
        request: dataworks_public_20240518_models.ListDataQualityScanRunsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDataQualityScanRunsResponse:
        """
        @summary 查询数据质量监控运行实例列表
        
        @param request: ListDataQualityScanRunsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDataQualityScanRunsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.create_time_from):
            query['CreateTimeFrom'] = request.create_time_from
        if not UtilClient.is_unset(request.create_time_to):
            query['CreateTimeTo'] = request.create_time_to
        if not UtilClient.is_unset(request.data_quality_scan_id):
            query['DataQualityScanId'] = request.data_quality_scan_id
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.sort_by):
            query['SortBy'] = request.sort_by
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDataQualityScanRuns',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDataQualityScanRunsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_data_quality_scan_runs_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListDataQualityScanRunsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDataQualityScanRunsResponse:
        """
        @summary 查询数据质量监控运行实例列表
        
        @param request: ListDataQualityScanRunsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDataQualityScanRunsResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.create_time_from):
            query['CreateTimeFrom'] = request.create_time_from
        if not UtilClient.is_unset(request.create_time_to):
            query['CreateTimeTo'] = request.create_time_to
        if not UtilClient.is_unset(request.data_quality_scan_id):
            query['DataQualityScanId'] = request.data_quality_scan_id
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.sort_by):
            query['SortBy'] = request.sort_by
        if not UtilClient.is_unset(request.status):
            query['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDataQualityScanRuns',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDataQualityScanRunsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_data_quality_scan_runs(
        self,
        request: dataworks_public_20240518_models.ListDataQualityScanRunsRequest,
    ) -> dataworks_public_20240518_models.ListDataQualityScanRunsResponse:
        """
        @summary 查询数据质量监控运行实例列表
        
        @param request: ListDataQualityScanRunsRequest
        @return: ListDataQualityScanRunsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_data_quality_scan_runs_with_options(request, runtime)

    async def list_data_quality_scan_runs_async(
        self,
        request: dataworks_public_20240518_models.ListDataQualityScanRunsRequest,
    ) -> dataworks_public_20240518_models.ListDataQualityScanRunsResponse:
        """
        @summary 查询数据质量监控运行实例列表
        
        @param request: ListDataQualityScanRunsRequest
        @return: ListDataQualityScanRunsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_data_quality_scan_runs_with_options_async(request, runtime)

    def list_data_quality_scans_with_options(
        self,
        request: dataworks_public_20240518_models.ListDataQualityScansRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDataQualityScansResponse:
        """
        @summary 获取数据质量监控详情
        
        @param request: ListDataQualityScansRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDataQualityScansResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.sort_by):
            query['SortBy'] = request.sort_by
        if not UtilClient.is_unset(request.table):
            query['Table'] = request.table
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDataQualityScans',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDataQualityScansResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_data_quality_scans_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListDataQualityScansRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDataQualityScansResponse:
        """
        @summary 获取数据质量监控详情
        
        @param request: ListDataQualityScansRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDataQualityScansResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.sort_by):
            query['SortBy'] = request.sort_by
        if not UtilClient.is_unset(request.table):
            query['Table'] = request.table
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDataQualityScans',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDataQualityScansResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_data_quality_scans(
        self,
        request: dataworks_public_20240518_models.ListDataQualityScansRequest,
    ) -> dataworks_public_20240518_models.ListDataQualityScansResponse:
        """
        @summary 获取数据质量监控详情
        
        @param request: ListDataQualityScansRequest
        @return: ListDataQualityScansResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_data_quality_scans_with_options(request, runtime)

    async def list_data_quality_scans_async(
        self,
        request: dataworks_public_20240518_models.ListDataQualityScansRequest,
    ) -> dataworks_public_20240518_models.ListDataQualityScansResponse:
        """
        @summary 获取数据质量监控详情
        
        @param request: ListDataQualityScansRequest
        @return: ListDataQualityScansResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_data_quality_scans_with_options_async(request, runtime)

    def list_data_quality_templates_with_options(
        self,
        request: dataworks_public_20240518_models.ListDataQualityTemplatesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDataQualityTemplatesResponse:
        """
        @summary 查询数据质量模板详情
        
        @param request: ListDataQualityTemplatesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDataQualityTemplatesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.catalog):
            query['Catalog'] = request.catalog
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDataQualityTemplates',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDataQualityTemplatesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_data_quality_templates_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListDataQualityTemplatesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDataQualityTemplatesResponse:
        """
        @summary 查询数据质量模板详情
        
        @param request: ListDataQualityTemplatesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDataQualityTemplatesResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.catalog):
            query['Catalog'] = request.catalog
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDataQualityTemplates',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDataQualityTemplatesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_data_quality_templates(
        self,
        request: dataworks_public_20240518_models.ListDataQualityTemplatesRequest,
    ) -> dataworks_public_20240518_models.ListDataQualityTemplatesResponse:
        """
        @summary 查询数据质量模板详情
        
        @param request: ListDataQualityTemplatesRequest
        @return: ListDataQualityTemplatesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_data_quality_templates_with_options(request, runtime)

    async def list_data_quality_templates_async(
        self,
        request: dataworks_public_20240518_models.ListDataQualityTemplatesRequest,
    ) -> dataworks_public_20240518_models.ListDataQualityTemplatesResponse:
        """
        @summary 查询数据质量模板详情
        
        @param request: ListDataQualityTemplatesRequest
        @return: ListDataQualityTemplatesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_data_quality_templates_with_options_async(request, runtime)

    def list_data_source_shared_rules_with_options(
        self,
        request: dataworks_public_20240518_models.ListDataSourceSharedRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDataSourceSharedRulesResponse:
        """
        @summary Queries a list of sharing rules of a data source.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  If you want to query the sharing rules of a data source that is associated with Workspace A, you must have the permissions to share the data source in Workspace A. You can call this operation only if you are assigned one of the following roles in DataWorks:
        Tenant Owner, Tenant Administrator, Workspace Administrator, and Workspace Owner
        
        @param request: ListDataSourceSharedRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDataSourceSharedRulesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDataSourceSharedRules',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDataSourceSharedRulesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_data_source_shared_rules_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListDataSourceSharedRulesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDataSourceSharedRulesResponse:
        """
        @summary Queries a list of sharing rules of a data source.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  If you want to query the sharing rules of a data source that is associated with Workspace A, you must have the permissions to share the data source in Workspace A. You can call this operation only if you are assigned one of the following roles in DataWorks:
        Tenant Owner, Tenant Administrator, Workspace Administrator, and Workspace Owner
        
        @param request: ListDataSourceSharedRulesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDataSourceSharedRulesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDataSourceSharedRules',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDataSourceSharedRulesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_data_source_shared_rules(
        self,
        request: dataworks_public_20240518_models.ListDataSourceSharedRulesRequest,
    ) -> dataworks_public_20240518_models.ListDataSourceSharedRulesResponse:
        """
        @summary Queries a list of sharing rules of a data source.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  If you want to query the sharing rules of a data source that is associated with Workspace A, you must have the permissions to share the data source in Workspace A. You can call this operation only if you are assigned one of the following roles in DataWorks:
        Tenant Owner, Tenant Administrator, Workspace Administrator, and Workspace Owner
        
        @param request: ListDataSourceSharedRulesRequest
        @return: ListDataSourceSharedRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_data_source_shared_rules_with_options(request, runtime)

    async def list_data_source_shared_rules_async(
        self,
        request: dataworks_public_20240518_models.ListDataSourceSharedRulesRequest,
    ) -> dataworks_public_20240518_models.ListDataSourceSharedRulesResponse:
        """
        @summary Queries a list of sharing rules of a data source.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  If you want to query the sharing rules of a data source that is associated with Workspace A, you must have the permissions to share the data source in Workspace A. You can call this operation only if you are assigned one of the following roles in DataWorks:
        Tenant Owner, Tenant Administrator, Workspace Administrator, and Workspace Owner
        
        @param request: ListDataSourceSharedRulesRequest
        @return: ListDataSourceSharedRulesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_data_source_shared_rules_with_options_async(request, runtime)

    def list_data_sources_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.ListDataSourcesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDataSourcesResponse:
        """
        @summary Queries a list of data sources based on the business information of data sources.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
        Tenant Owner, Workspace Administrator, Deploy, Develop, Visitor, Workspace Owner, O\\&M, Model Designer, Security Administrator, Data Analyst, OpenPlatform Administrator, and Data Governance Administrator
        
        @param tmp_req: ListDataSourcesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDataSourcesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.ListDataSourcesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.types):
            request.types_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.types, 'Types', 'simple')
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDataSources',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDataSourcesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_data_sources_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.ListDataSourcesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDataSourcesResponse:
        """
        @summary Queries a list of data sources based on the business information of data sources.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
        Tenant Owner, Workspace Administrator, Deploy, Develop, Visitor, Workspace Owner, O\\&M, Model Designer, Security Administrator, Data Analyst, OpenPlatform Administrator, and Data Governance Administrator
        
        @param tmp_req: ListDataSourcesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDataSourcesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.ListDataSourcesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.types):
            request.types_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.types, 'Types', 'simple')
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDataSources',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDataSourcesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_data_sources(
        self,
        request: dataworks_public_20240518_models.ListDataSourcesRequest,
    ) -> dataworks_public_20240518_models.ListDataSourcesResponse:
        """
        @summary Queries a list of data sources based on the business information of data sources.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
        Tenant Owner, Workspace Administrator, Deploy, Develop, Visitor, Workspace Owner, O\\&M, Model Designer, Security Administrator, Data Analyst, OpenPlatform Administrator, and Data Governance Administrator
        
        @param request: ListDataSourcesRequest
        @return: ListDataSourcesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_data_sources_with_options(request, runtime)

    async def list_data_sources_async(
        self,
        request: dataworks_public_20240518_models.ListDataSourcesRequest,
    ) -> dataworks_public_20240518_models.ListDataSourcesResponse:
        """
        @summary Queries a list of data sources based on the business information of data sources.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
        Tenant Owner, Workspace Administrator, Deploy, Develop, Visitor, Workspace Owner, O\\&M, Model Designer, Security Administrator, Data Analyst, OpenPlatform Administrator, and Data Governance Administrator
        
        @param request: ListDataSourcesRequest
        @return: ListDataSourcesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_data_sources_with_options_async(request, runtime)

    def list_databases_with_options(
        self,
        request: dataworks_public_20240518_models.ListDatabasesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDatabasesResponse:
        """
        @summary 查询数据库列表
        
        @param request: ListDatabasesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDatabasesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDatabases',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDatabasesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_databases_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListDatabasesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDatabasesResponse:
        """
        @summary 查询数据库列表
        
        @param request: ListDatabasesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDatabasesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDatabases',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDatabasesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_databases(
        self,
        request: dataworks_public_20240518_models.ListDatabasesRequest,
    ) -> dataworks_public_20240518_models.ListDatabasesResponse:
        """
        @summary 查询数据库列表
        
        @param request: ListDatabasesRequest
        @return: ListDatabasesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_databases_with_options(request, runtime)

    async def list_databases_async(
        self,
        request: dataworks_public_20240518_models.ListDatabasesRequest,
    ) -> dataworks_public_20240518_models.ListDatabasesResponse:
        """
        @summary 查询数据库列表
        
        @param request: ListDatabasesRequest
        @return: ListDatabasesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_databases_with_options_async(request, runtime)

    def list_deployment_package_files_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.ListDeploymentPackageFilesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDeploymentPackageFilesResponse:
        """
        @summary Queries a list of versions of files to be deployed.
        
        @param tmp_req: ListDeploymentPackageFilesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDeploymentPackageFilesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.ListDeploymentPackageFilesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.file_ids):
            request.file_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.file_ids, 'FileIds', 'json')
        query = {}
        if not UtilClient.is_unset(request.business_id):
            query['BusinessId'] = request.business_id
        if not UtilClient.is_unset(request.change_type):
            query['ChangeType'] = request.change_type
        if not UtilClient.is_unset(request.commit_from):
            query['CommitFrom'] = request.commit_from
        if not UtilClient.is_unset(request.commit_to):
            query['CommitTo'] = request.commit_to
        if not UtilClient.is_unset(request.commit_user_id):
            query['CommitUserId'] = request.commit_user_id
        if not UtilClient.is_unset(request.file_ids_shrink):
            query['FileIds'] = request.file_ids_shrink
        if not UtilClient.is_unset(request.file_name):
            query['FileName'] = request.file_name
        if not UtilClient.is_unset(request.file_type):
            query['FileType'] = request.file_type
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.solution_id):
            query['SolutionId'] = request.solution_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDeploymentPackageFiles',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDeploymentPackageFilesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_deployment_package_files_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.ListDeploymentPackageFilesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDeploymentPackageFilesResponse:
        """
        @summary Queries a list of versions of files to be deployed.
        
        @param tmp_req: ListDeploymentPackageFilesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDeploymentPackageFilesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.ListDeploymentPackageFilesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.file_ids):
            request.file_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.file_ids, 'FileIds', 'json')
        query = {}
        if not UtilClient.is_unset(request.business_id):
            query['BusinessId'] = request.business_id
        if not UtilClient.is_unset(request.change_type):
            query['ChangeType'] = request.change_type
        if not UtilClient.is_unset(request.commit_from):
            query['CommitFrom'] = request.commit_from
        if not UtilClient.is_unset(request.commit_to):
            query['CommitTo'] = request.commit_to
        if not UtilClient.is_unset(request.commit_user_id):
            query['CommitUserId'] = request.commit_user_id
        if not UtilClient.is_unset(request.file_ids_shrink):
            query['FileIds'] = request.file_ids_shrink
        if not UtilClient.is_unset(request.file_name):
            query['FileName'] = request.file_name
        if not UtilClient.is_unset(request.file_type):
            query['FileType'] = request.file_type
        if not UtilClient.is_unset(request.page_number):
            query['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            query['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.solution_id):
            query['SolutionId'] = request.solution_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDeploymentPackageFiles',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDeploymentPackageFilesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_deployment_package_files(
        self,
        request: dataworks_public_20240518_models.ListDeploymentPackageFilesRequest,
    ) -> dataworks_public_20240518_models.ListDeploymentPackageFilesResponse:
        """
        @summary Queries a list of versions of files to be deployed.
        
        @param request: ListDeploymentPackageFilesRequest
        @return: ListDeploymentPackageFilesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_deployment_package_files_with_options(request, runtime)

    async def list_deployment_package_files_async(
        self,
        request: dataworks_public_20240518_models.ListDeploymentPackageFilesRequest,
    ) -> dataworks_public_20240518_models.ListDeploymentPackageFilesResponse:
        """
        @summary Queries a list of versions of files to be deployed.
        
        @param request: ListDeploymentPackageFilesRequest
        @return: ListDeploymentPackageFilesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_deployment_package_files_with_options_async(request, runtime)

    def list_deployment_packages_with_options(
        self,
        request: dataworks_public_20240518_models.ListDeploymentPackagesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDeploymentPackagesResponse:
        """
        @summary 查询发布包列表
        
        @param request: ListDeploymentPackagesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDeploymentPackagesResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.creator):
            body['Creator'] = request.creator
        if not UtilClient.is_unset(request.end_create_time):
            body['EndCreateTime'] = request.end_create_time
        if not UtilClient.is_unset(request.end_execute_time):
            body['EndExecuteTime'] = request.end_execute_time
        if not UtilClient.is_unset(request.executor):
            body['Executor'] = request.executor
        if not UtilClient.is_unset(request.keyword):
            body['Keyword'] = request.keyword
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        if not UtilClient.is_unset(request.status):
            body['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListDeploymentPackages',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDeploymentPackagesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_deployment_packages_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListDeploymentPackagesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDeploymentPackagesResponse:
        """
        @summary 查询发布包列表
        
        @param request: ListDeploymentPackagesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDeploymentPackagesResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.creator):
            body['Creator'] = request.creator
        if not UtilClient.is_unset(request.end_create_time):
            body['EndCreateTime'] = request.end_create_time
        if not UtilClient.is_unset(request.end_execute_time):
            body['EndExecuteTime'] = request.end_execute_time
        if not UtilClient.is_unset(request.executor):
            body['Executor'] = request.executor
        if not UtilClient.is_unset(request.keyword):
            body['Keyword'] = request.keyword
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        if not UtilClient.is_unset(request.status):
            body['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListDeploymentPackages',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDeploymentPackagesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_deployment_packages(
        self,
        request: dataworks_public_20240518_models.ListDeploymentPackagesRequest,
    ) -> dataworks_public_20240518_models.ListDeploymentPackagesResponse:
        """
        @summary 查询发布包列表
        
        @param request: ListDeploymentPackagesRequest
        @return: ListDeploymentPackagesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_deployment_packages_with_options(request, runtime)

    async def list_deployment_packages_async(
        self,
        request: dataworks_public_20240518_models.ListDeploymentPackagesRequest,
    ) -> dataworks_public_20240518_models.ListDeploymentPackagesResponse:
        """
        @summary 查询发布包列表
        
        @param request: ListDeploymentPackagesRequest
        @return: ListDeploymentPackagesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_deployment_packages_with_options_async(request, runtime)

    def list_downstream_task_instances_with_options(
        self,
        request: dataworks_public_20240518_models.ListDownstreamTaskInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDownstreamTaskInstancesResponse:
        """
        @summary Queries a list of descendant instances of an instance by page.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListDownstreamTaskInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDownstreamTaskInstancesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDownstreamTaskInstances',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDownstreamTaskInstancesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_downstream_task_instances_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListDownstreamTaskInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDownstreamTaskInstancesResponse:
        """
        @summary Queries a list of descendant instances of an instance by page.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListDownstreamTaskInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDownstreamTaskInstancesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDownstreamTaskInstances',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDownstreamTaskInstancesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_downstream_task_instances(
        self,
        request: dataworks_public_20240518_models.ListDownstreamTaskInstancesRequest,
    ) -> dataworks_public_20240518_models.ListDownstreamTaskInstancesResponse:
        """
        @summary Queries a list of descendant instances of an instance by page.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListDownstreamTaskInstancesRequest
        @return: ListDownstreamTaskInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_downstream_task_instances_with_options(request, runtime)

    async def list_downstream_task_instances_async(
        self,
        request: dataworks_public_20240518_models.ListDownstreamTaskInstancesRequest,
    ) -> dataworks_public_20240518_models.ListDownstreamTaskInstancesResponse:
        """
        @summary Queries a list of descendant instances of an instance by page.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListDownstreamTaskInstancesRequest
        @return: ListDownstreamTaskInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_downstream_task_instances_with_options_async(request, runtime)

    def list_downstream_tasks_with_options(
        self,
        request: dataworks_public_20240518_models.ListDownstreamTasksRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDownstreamTasksResponse:
        """
        @summary Queries a list of descendant tasks of a task by page.
        
        @param request: ListDownstreamTasksRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDownstreamTasksResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDownstreamTasks',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDownstreamTasksResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_downstream_tasks_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListDownstreamTasksRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListDownstreamTasksResponse:
        """
        @summary Queries a list of descendant tasks of a task by page.
        
        @param request: ListDownstreamTasksRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListDownstreamTasksResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListDownstreamTasks',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListDownstreamTasksResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_downstream_tasks(
        self,
        request: dataworks_public_20240518_models.ListDownstreamTasksRequest,
    ) -> dataworks_public_20240518_models.ListDownstreamTasksResponse:
        """
        @summary Queries a list of descendant tasks of a task by page.
        
        @param request: ListDownstreamTasksRequest
        @return: ListDownstreamTasksResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_downstream_tasks_with_options(request, runtime)

    async def list_downstream_tasks_async(
        self,
        request: dataworks_public_20240518_models.ListDownstreamTasksRequest,
    ) -> dataworks_public_20240518_models.ListDownstreamTasksResponse:
        """
        @summary Queries a list of descendant tasks of a task by page.
        
        @param request: ListDownstreamTasksRequest
        @return: ListDownstreamTasksResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_downstream_tasks_with_options_async(request, runtime)

    def list_entities_in_meta_collection_with_options(
        self,
        request: dataworks_public_20240518_models.ListEntitiesInMetaCollectionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListEntitiesInMetaCollectionResponse:
        """
        @summary Queries a list of entities in a collection in Data Map. Collections include categories and data albums. Entities can only be tables.
        
        @param request: ListEntitiesInMetaCollectionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListEntitiesInMetaCollectionResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListEntitiesInMetaCollection',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListEntitiesInMetaCollectionResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_entities_in_meta_collection_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListEntitiesInMetaCollectionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListEntitiesInMetaCollectionResponse:
        """
        @summary Queries a list of entities in a collection in Data Map. Collections include categories and data albums. Entities can only be tables.
        
        @param request: ListEntitiesInMetaCollectionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListEntitiesInMetaCollectionResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListEntitiesInMetaCollection',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListEntitiesInMetaCollectionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_entities_in_meta_collection(
        self,
        request: dataworks_public_20240518_models.ListEntitiesInMetaCollectionRequest,
    ) -> dataworks_public_20240518_models.ListEntitiesInMetaCollectionResponse:
        """
        @summary Queries a list of entities in a collection in Data Map. Collections include categories and data albums. Entities can only be tables.
        
        @param request: ListEntitiesInMetaCollectionRequest
        @return: ListEntitiesInMetaCollectionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_entities_in_meta_collection_with_options(request, runtime)

    async def list_entities_in_meta_collection_async(
        self,
        request: dataworks_public_20240518_models.ListEntitiesInMetaCollectionRequest,
    ) -> dataworks_public_20240518_models.ListEntitiesInMetaCollectionResponse:
        """
        @summary Queries a list of entities in a collection in Data Map. Collections include categories and data albums. Entities can only be tables.
        
        @param request: ListEntitiesInMetaCollectionRequest
        @return: ListEntitiesInMetaCollectionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_entities_in_meta_collection_with_options_async(request, runtime)

    def list_file_versions_with_options(
        self,
        request: dataworks_public_20240518_models.ListFileVersionsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListFileVersionsResponse:
        """
        @param request: ListFileVersionsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListFileVersionsResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.file_id):
            body['FileId'] = request.file_id
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListFileVersions',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListFileVersionsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_file_versions_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListFileVersionsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListFileVersionsResponse:
        """
        @param request: ListFileVersionsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListFileVersionsResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.file_id):
            body['FileId'] = request.file_id
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListFileVersions',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListFileVersionsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_file_versions(
        self,
        request: dataworks_public_20240518_models.ListFileVersionsRequest,
    ) -> dataworks_public_20240518_models.ListFileVersionsResponse:
        """
        @param request: ListFileVersionsRequest
        @return: ListFileVersionsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_file_versions_with_options(request, runtime)

    async def list_file_versions_async(
        self,
        request: dataworks_public_20240518_models.ListFileVersionsRequest,
    ) -> dataworks_public_20240518_models.ListFileVersionsResponse:
        """
        @param request: ListFileVersionsRequest
        @return: ListFileVersionsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_file_versions_with_options_async(request, runtime)

    def list_files_with_options(
        self,
        request: dataworks_public_20240518_models.ListFilesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListFilesResponse:
        """
        @param request: ListFilesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListFilesResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.commit_status):
            body['CommitStatus'] = request.commit_status
        if not UtilClient.is_unset(request.exact_file_name):
            body['ExactFileName'] = request.exact_file_name
        if not UtilClient.is_unset(request.file_folder_path):
            body['FileFolderPath'] = request.file_folder_path
        if not UtilClient.is_unset(request.file_id_in):
            body['FileIdIn'] = request.file_id_in
        if not UtilClient.is_unset(request.file_types):
            body['FileTypes'] = request.file_types
        if not UtilClient.is_unset(request.keyword):
            body['Keyword'] = request.keyword
        if not UtilClient.is_unset(request.last_edit_user):
            body['LastEditUser'] = request.last_edit_user
        if not UtilClient.is_unset(request.need_absolute_folder_path):
            body['NeedAbsoluteFolderPath'] = request.need_absolute_folder_path
        if not UtilClient.is_unset(request.need_content):
            body['NeedContent'] = request.need_content
        if not UtilClient.is_unset(request.node_id):
            body['NodeId'] = request.node_id
        if not UtilClient.is_unset(request.owner):
            body['Owner'] = request.owner
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        if not UtilClient.is_unset(request.use_type):
            body['UseType'] = request.use_type
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListFiles',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListFilesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_files_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListFilesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListFilesResponse:
        """
        @param request: ListFilesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListFilesResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.commit_status):
            body['CommitStatus'] = request.commit_status
        if not UtilClient.is_unset(request.exact_file_name):
            body['ExactFileName'] = request.exact_file_name
        if not UtilClient.is_unset(request.file_folder_path):
            body['FileFolderPath'] = request.file_folder_path
        if not UtilClient.is_unset(request.file_id_in):
            body['FileIdIn'] = request.file_id_in
        if not UtilClient.is_unset(request.file_types):
            body['FileTypes'] = request.file_types
        if not UtilClient.is_unset(request.keyword):
            body['Keyword'] = request.keyword
        if not UtilClient.is_unset(request.last_edit_user):
            body['LastEditUser'] = request.last_edit_user
        if not UtilClient.is_unset(request.need_absolute_folder_path):
            body['NeedAbsoluteFolderPath'] = request.need_absolute_folder_path
        if not UtilClient.is_unset(request.need_content):
            body['NeedContent'] = request.need_content
        if not UtilClient.is_unset(request.node_id):
            body['NodeId'] = request.node_id
        if not UtilClient.is_unset(request.owner):
            body['Owner'] = request.owner
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        if not UtilClient.is_unset(request.use_type):
            body['UseType'] = request.use_type
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListFiles',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListFilesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_files(
        self,
        request: dataworks_public_20240518_models.ListFilesRequest,
    ) -> dataworks_public_20240518_models.ListFilesResponse:
        """
        @param request: ListFilesRequest
        @return: ListFilesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_files_with_options(request, runtime)

    async def list_files_async(
        self,
        request: dataworks_public_20240518_models.ListFilesRequest,
    ) -> dataworks_public_20240518_models.ListFilesResponse:
        """
        @param request: ListFilesRequest
        @return: ListFilesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_files_with_options_async(request, runtime)

    def list_folders_with_options(
        self,
        request: dataworks_public_20240518_models.ListFoldersRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListFoldersResponse:
        """
        @param request: ListFoldersRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListFoldersResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.parent_folder_path):
            body['ParentFolderPath'] = request.parent_folder_path
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListFolders',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListFoldersResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_folders_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListFoldersRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListFoldersResponse:
        """
        @param request: ListFoldersRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListFoldersResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.parent_folder_path):
            body['ParentFolderPath'] = request.parent_folder_path
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListFolders',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListFoldersResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_folders(
        self,
        request: dataworks_public_20240518_models.ListFoldersRequest,
    ) -> dataworks_public_20240518_models.ListFoldersResponse:
        """
        @param request: ListFoldersRequest
        @return: ListFoldersResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_folders_with_options(request, runtime)

    async def list_folders_async(
        self,
        request: dataworks_public_20240518_models.ListFoldersRequest,
    ) -> dataworks_public_20240518_models.ListFoldersResponse:
        """
        @param request: ListFoldersRequest
        @return: ListFoldersResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_folders_with_options_async(request, runtime)

    def list_functions_with_options(
        self,
        request: dataworks_public_20240518_models.ListFunctionsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListFunctionsResponse:
        """
        @summary Queries a list of user-defined functions (UDFs) in DataStudio. You can also specify filter conditions to query specific UDFs.
        
        @param request: ListFunctionsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListFunctionsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListFunctions',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListFunctionsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_functions_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListFunctionsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListFunctionsResponse:
        """
        @summary Queries a list of user-defined functions (UDFs) in DataStudio. You can also specify filter conditions to query specific UDFs.
        
        @param request: ListFunctionsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListFunctionsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListFunctions',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListFunctionsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_functions(
        self,
        request: dataworks_public_20240518_models.ListFunctionsRequest,
    ) -> dataworks_public_20240518_models.ListFunctionsResponse:
        """
        @summary Queries a list of user-defined functions (UDFs) in DataStudio. You can also specify filter conditions to query specific UDFs.
        
        @param request: ListFunctionsRequest
        @return: ListFunctionsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_functions_with_options(request, runtime)

    async def list_functions_async(
        self,
        request: dataworks_public_20240518_models.ListFunctionsRequest,
    ) -> dataworks_public_20240518_models.ListFunctionsResponse:
        """
        @summary Queries a list of user-defined functions (UDFs) in DataStudio. You can also specify filter conditions to query specific UDFs.
        
        @param request: ListFunctionsRequest
        @return: ListFunctionsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_functions_with_options_async(request, runtime)

    def list_lineage_relationships_with_options(
        self,
        request: dataworks_public_20240518_models.ListLineageRelationshipsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListLineageRelationshipsResponse:
        """
        @summary 查询血缘关系
        
        @param request: ListLineageRelationshipsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListLineageRelationshipsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListLineageRelationships',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListLineageRelationshipsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_lineage_relationships_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListLineageRelationshipsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListLineageRelationshipsResponse:
        """
        @summary 查询血缘关系
        
        @param request: ListLineageRelationshipsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListLineageRelationshipsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListLineageRelationships',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListLineageRelationshipsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_lineage_relationships(
        self,
        request: dataworks_public_20240518_models.ListLineageRelationshipsRequest,
    ) -> dataworks_public_20240518_models.ListLineageRelationshipsResponse:
        """
        @summary 查询血缘关系
        
        @param request: ListLineageRelationshipsRequest
        @return: ListLineageRelationshipsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_lineage_relationships_with_options(request, runtime)

    async def list_lineage_relationships_async(
        self,
        request: dataworks_public_20240518_models.ListLineageRelationshipsRequest,
    ) -> dataworks_public_20240518_models.ListLineageRelationshipsResponse:
        """
        @summary 查询血缘关系
        
        @param request: ListLineageRelationshipsRequest
        @return: ListLineageRelationshipsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_lineage_relationships_with_options_async(request, runtime)

    def list_lineages_with_options(
        self,
        request: dataworks_public_20240518_models.ListLineagesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListLineagesResponse:
        """
        @summary Queries a list of ancestor and descendant entities of an entity in Data Map. You can specify whether to return the lineage between the entities.
        
        @param request: ListLineagesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListLineagesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListLineages',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListLineagesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_lineages_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListLineagesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListLineagesResponse:
        """
        @summary Queries a list of ancestor and descendant entities of an entity in Data Map. You can specify whether to return the lineage between the entities.
        
        @param request: ListLineagesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListLineagesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListLineages',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListLineagesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_lineages(
        self,
        request: dataworks_public_20240518_models.ListLineagesRequest,
    ) -> dataworks_public_20240518_models.ListLineagesResponse:
        """
        @summary Queries a list of ancestor and descendant entities of an entity in Data Map. You can specify whether to return the lineage between the entities.
        
        @param request: ListLineagesRequest
        @return: ListLineagesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_lineages_with_options(request, runtime)

    async def list_lineages_async(
        self,
        request: dataworks_public_20240518_models.ListLineagesRequest,
    ) -> dataworks_public_20240518_models.ListLineagesResponse:
        """
        @summary Queries a list of ancestor and descendant entities of an entity in Data Map. You can specify whether to return the lineage between the entities.
        
        @param request: ListLineagesRequest
        @return: ListLineagesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_lineages_with_options_async(request, runtime)

    def list_meta_collections_with_options(
        self,
        request: dataworks_public_20240518_models.ListMetaCollectionsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListMetaCollectionsResponse:
        """
        @summary Queries a list of collections in Data Map. Collections include categories and data albums.
        
        @param request: ListMetaCollectionsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListMetaCollectionsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListMetaCollections',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListMetaCollectionsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_meta_collections_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListMetaCollectionsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListMetaCollectionsResponse:
        """
        @summary Queries a list of collections in Data Map. Collections include categories and data albums.
        
        @param request: ListMetaCollectionsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListMetaCollectionsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListMetaCollections',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListMetaCollectionsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_meta_collections(
        self,
        request: dataworks_public_20240518_models.ListMetaCollectionsRequest,
    ) -> dataworks_public_20240518_models.ListMetaCollectionsResponse:
        """
        @summary Queries a list of collections in Data Map. Collections include categories and data albums.
        
        @param request: ListMetaCollectionsRequest
        @return: ListMetaCollectionsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_meta_collections_with_options(request, runtime)

    async def list_meta_collections_async(
        self,
        request: dataworks_public_20240518_models.ListMetaCollectionsRequest,
    ) -> dataworks_public_20240518_models.ListMetaCollectionsResponse:
        """
        @summary Queries a list of collections in Data Map. Collections include categories and data albums.
        
        @param request: ListMetaCollectionsRequest
        @return: ListMetaCollectionsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_meta_collections_with_options_async(request, runtime)

    def list_networks_with_options(
        self,
        request: dataworks_public_20240518_models.ListNetworksRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListNetworksResponse:
        """
        @summary Queries a list of network resources of a serverless resource group.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListNetworksRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListNetworksResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListNetworks',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListNetworksResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_networks_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListNetworksRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListNetworksResponse:
        """
        @summary Queries a list of network resources of a serverless resource group.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListNetworksRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListNetworksResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListNetworks',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListNetworksResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_networks(
        self,
        request: dataworks_public_20240518_models.ListNetworksRequest,
    ) -> dataworks_public_20240518_models.ListNetworksResponse:
        """
        @summary Queries a list of network resources of a serverless resource group.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListNetworksRequest
        @return: ListNetworksResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_networks_with_options(request, runtime)

    async def list_networks_async(
        self,
        request: dataworks_public_20240518_models.ListNetworksRequest,
    ) -> dataworks_public_20240518_models.ListNetworksResponse:
        """
        @summary Queries a list of network resources of a serverless resource group.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListNetworksRequest
        @return: ListNetworksResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_networks_with_options_async(request, runtime)

    def list_node_dependencies_with_options(
        self,
        request: dataworks_public_20240518_models.ListNodeDependenciesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListNodeDependenciesResponse:
        """
        @summary Queries a list of descendant nodes of a node in DataStudio.
        
        @param request: ListNodeDependenciesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListNodeDependenciesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListNodeDependencies',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListNodeDependenciesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_node_dependencies_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListNodeDependenciesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListNodeDependenciesResponse:
        """
        @summary Queries a list of descendant nodes of a node in DataStudio.
        
        @param request: ListNodeDependenciesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListNodeDependenciesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListNodeDependencies',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListNodeDependenciesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_node_dependencies(
        self,
        request: dataworks_public_20240518_models.ListNodeDependenciesRequest,
    ) -> dataworks_public_20240518_models.ListNodeDependenciesResponse:
        """
        @summary Queries a list of descendant nodes of a node in DataStudio.
        
        @param request: ListNodeDependenciesRequest
        @return: ListNodeDependenciesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_node_dependencies_with_options(request, runtime)

    async def list_node_dependencies_async(
        self,
        request: dataworks_public_20240518_models.ListNodeDependenciesRequest,
    ) -> dataworks_public_20240518_models.ListNodeDependenciesResponse:
        """
        @summary Queries a list of descendant nodes of a node in DataStudio.
        
        @param request: ListNodeDependenciesRequest
        @return: ListNodeDependenciesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_node_dependencies_with_options_async(request, runtime)

    def list_nodes_with_options(
        self,
        request: dataworks_public_20240518_models.ListNodesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListNodesResponse:
        """
        @summary Queries a list of nodes in DataStudio. You can also specify filter conditions to query specific nodes.
        
        @param request: ListNodesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListNodesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListNodes',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListNodesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_nodes_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListNodesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListNodesResponse:
        """
        @summary Queries a list of nodes in DataStudio. You can also specify filter conditions to query specific nodes.
        
        @param request: ListNodesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListNodesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListNodes',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListNodesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_nodes(
        self,
        request: dataworks_public_20240518_models.ListNodesRequest,
    ) -> dataworks_public_20240518_models.ListNodesResponse:
        """
        @summary Queries a list of nodes in DataStudio. You can also specify filter conditions to query specific nodes.
        
        @param request: ListNodesRequest
        @return: ListNodesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_nodes_with_options(request, runtime)

    async def list_nodes_async(
        self,
        request: dataworks_public_20240518_models.ListNodesRequest,
    ) -> dataworks_public_20240518_models.ListNodesResponse:
        """
        @summary Queries a list of nodes in DataStudio. You can also specify filter conditions to query specific nodes.
        
        @param request: ListNodesRequest
        @return: ListNodesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_nodes_with_options_async(request, runtime)

    def list_partitions_with_options(
        self,
        request: dataworks_public_20240518_models.ListPartitionsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListPartitionsResponse:
        """
        @summary 查询数据表的分区列表
        
        @param request: ListPartitionsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListPartitionsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListPartitions',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListPartitionsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_partitions_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListPartitionsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListPartitionsResponse:
        """
        @summary 查询数据表的分区列表
        
        @param request: ListPartitionsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListPartitionsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListPartitions',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListPartitionsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_partitions(
        self,
        request: dataworks_public_20240518_models.ListPartitionsRequest,
    ) -> dataworks_public_20240518_models.ListPartitionsResponse:
        """
        @summary 查询数据表的分区列表
        
        @param request: ListPartitionsRequest
        @return: ListPartitionsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_partitions_with_options(request, runtime)

    async def list_partitions_async(
        self,
        request: dataworks_public_20240518_models.ListPartitionsRequest,
    ) -> dataworks_public_20240518_models.ListPartitionsResponse:
        """
        @summary 查询数据表的分区列表
        
        @param request: ListPartitionsRequest
        @return: ListPartitionsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_partitions_with_options_async(request, runtime)

    def list_pipeline_run_items_with_options(
        self,
        request: dataworks_public_20240518_models.ListPipelineRunItemsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListPipelineRunItemsResponse:
        """
        @summary 通过发布流程的ID获取发布内容
        
        @param request: ListPipelineRunItemsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListPipelineRunItemsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListPipelineRunItems',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListPipelineRunItemsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_pipeline_run_items_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListPipelineRunItemsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListPipelineRunItemsResponse:
        """
        @summary 通过发布流程的ID获取发布内容
        
        @param request: ListPipelineRunItemsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListPipelineRunItemsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListPipelineRunItems',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListPipelineRunItemsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_pipeline_run_items(
        self,
        request: dataworks_public_20240518_models.ListPipelineRunItemsRequest,
    ) -> dataworks_public_20240518_models.ListPipelineRunItemsResponse:
        """
        @summary 通过发布流程的ID获取发布内容
        
        @param request: ListPipelineRunItemsRequest
        @return: ListPipelineRunItemsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_pipeline_run_items_with_options(request, runtime)

    async def list_pipeline_run_items_async(
        self,
        request: dataworks_public_20240518_models.ListPipelineRunItemsRequest,
    ) -> dataworks_public_20240518_models.ListPipelineRunItemsResponse:
        """
        @summary 通过发布流程的ID获取发布内容
        
        @param request: ListPipelineRunItemsRequest
        @return: ListPipelineRunItemsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_pipeline_run_items_with_options_async(request, runtime)

    def list_pipeline_runs_with_options(
        self,
        request: dataworks_public_20240518_models.ListPipelineRunsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListPipelineRunsResponse:
        """
        @summary Queries a list of processes that are used to deploy or undeploy entities in DataStudio. You can also specify filter conditions to query specific processes.
        
        @param request: ListPipelineRunsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListPipelineRunsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListPipelineRuns',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListPipelineRunsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_pipeline_runs_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListPipelineRunsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListPipelineRunsResponse:
        """
        @summary Queries a list of processes that are used to deploy or undeploy entities in DataStudio. You can also specify filter conditions to query specific processes.
        
        @param request: ListPipelineRunsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListPipelineRunsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListPipelineRuns',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListPipelineRunsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_pipeline_runs(
        self,
        request: dataworks_public_20240518_models.ListPipelineRunsRequest,
    ) -> dataworks_public_20240518_models.ListPipelineRunsResponse:
        """
        @summary Queries a list of processes that are used to deploy or undeploy entities in DataStudio. You can also specify filter conditions to query specific processes.
        
        @param request: ListPipelineRunsRequest
        @return: ListPipelineRunsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_pipeline_runs_with_options(request, runtime)

    async def list_pipeline_runs_async(
        self,
        request: dataworks_public_20240518_models.ListPipelineRunsRequest,
    ) -> dataworks_public_20240518_models.ListPipelineRunsResponse:
        """
        @summary Queries a list of processes that are used to deploy or undeploy entities in DataStudio. You can also specify filter conditions to query specific processes.
        
        @param request: ListPipelineRunsRequest
        @return: ListPipelineRunsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_pipeline_runs_with_options_async(request, runtime)

    def list_project_members_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.ListProjectMembersRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListProjectMembersResponse:
        """
        @summary Queries details about members in a workspace.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: ListProjectMembersRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListProjectMembersResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.ListProjectMembersShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.role_codes):
            request.role_codes_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.role_codes, 'RoleCodes', 'json')
        if not UtilClient.is_unset(tmp_req.user_ids):
            request.user_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.user_ids, 'UserIds', 'json')
        body = {}
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.role_codes_shrink):
            body['RoleCodes'] = request.role_codes_shrink
        if not UtilClient.is_unset(request.user_ids_shrink):
            body['UserIds'] = request.user_ids_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListProjectMembers',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListProjectMembersResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_project_members_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.ListProjectMembersRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListProjectMembersResponse:
        """
        @summary Queries details about members in a workspace.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: ListProjectMembersRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListProjectMembersResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.ListProjectMembersShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.role_codes):
            request.role_codes_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.role_codes, 'RoleCodes', 'json')
        if not UtilClient.is_unset(tmp_req.user_ids):
            request.user_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.user_ids, 'UserIds', 'json')
        body = {}
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.role_codes_shrink):
            body['RoleCodes'] = request.role_codes_shrink
        if not UtilClient.is_unset(request.user_ids_shrink):
            body['UserIds'] = request.user_ids_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListProjectMembers',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListProjectMembersResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_project_members(
        self,
        request: dataworks_public_20240518_models.ListProjectMembersRequest,
    ) -> dataworks_public_20240518_models.ListProjectMembersResponse:
        """
        @summary Queries details about members in a workspace.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListProjectMembersRequest
        @return: ListProjectMembersResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_project_members_with_options(request, runtime)

    async def list_project_members_async(
        self,
        request: dataworks_public_20240518_models.ListProjectMembersRequest,
    ) -> dataworks_public_20240518_models.ListProjectMembersResponse:
        """
        @summary Queries details about members in a workspace.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListProjectMembersRequest
        @return: ListProjectMembersResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_project_members_with_options_async(request, runtime)

    def list_project_roles_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.ListProjectRolesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListProjectRolesResponse:
        """
        @summary Queries the information about roles in a DataWorks workspace by page.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: ListProjectRolesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListProjectRolesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.ListProjectRolesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.codes):
            request.codes_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.codes, 'Codes', 'json')
        if not UtilClient.is_unset(tmp_req.names):
            request.names_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.names, 'Names', 'json')
        body = {}
        if not UtilClient.is_unset(request.codes_shrink):
            body['Codes'] = request.codes_shrink
        if not UtilClient.is_unset(request.names_shrink):
            body['Names'] = request.names_shrink
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.type):
            body['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListProjectRoles',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListProjectRolesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_project_roles_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.ListProjectRolesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListProjectRolesResponse:
        """
        @summary Queries the information about roles in a DataWorks workspace by page.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: ListProjectRolesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListProjectRolesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.ListProjectRolesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.codes):
            request.codes_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.codes, 'Codes', 'json')
        if not UtilClient.is_unset(tmp_req.names):
            request.names_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.names, 'Names', 'json')
        body = {}
        if not UtilClient.is_unset(request.codes_shrink):
            body['Codes'] = request.codes_shrink
        if not UtilClient.is_unset(request.names_shrink):
            body['Names'] = request.names_shrink
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.type):
            body['Type'] = request.type
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListProjectRoles',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListProjectRolesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_project_roles(
        self,
        request: dataworks_public_20240518_models.ListProjectRolesRequest,
    ) -> dataworks_public_20240518_models.ListProjectRolesResponse:
        """
        @summary Queries the information about roles in a DataWorks workspace by page.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListProjectRolesRequest
        @return: ListProjectRolesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_project_roles_with_options(request, runtime)

    async def list_project_roles_async(
        self,
        request: dataworks_public_20240518_models.ListProjectRolesRequest,
    ) -> dataworks_public_20240518_models.ListProjectRolesResponse:
        """
        @summary Queries the information about roles in a DataWorks workspace by page.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListProjectRolesRequest
        @return: ListProjectRolesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_project_roles_with_options_async(request, runtime)

    def list_projects_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.ListProjectsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListProjectsResponse:
        """
        @summary Queries a list of DataWorks workspaces of the tenant to which your account belongs.
        
        @param tmp_req: ListProjectsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListProjectsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.ListProjectsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.aliyun_resource_tags):
            request.aliyun_resource_tags_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.aliyun_resource_tags, 'AliyunResourceTags', 'json')
        if not UtilClient.is_unset(tmp_req.ids):
            request.ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ids, 'Ids', 'json')
        if not UtilClient.is_unset(tmp_req.names):
            request.names_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.names, 'Names', 'json')
        body = {}
        if not UtilClient.is_unset(request.aliyun_resource_group_id):
            body['AliyunResourceGroupId'] = request.aliyun_resource_group_id
        if not UtilClient.is_unset(request.aliyun_resource_tags_shrink):
            body['AliyunResourceTags'] = request.aliyun_resource_tags_shrink
        if not UtilClient.is_unset(request.dev_environment_enabled):
            body['DevEnvironmentEnabled'] = request.dev_environment_enabled
        if not UtilClient.is_unset(request.dev_role_disabled):
            body['DevRoleDisabled'] = request.dev_role_disabled
        if not UtilClient.is_unset(request.ids_shrink):
            body['Ids'] = request.ids_shrink
        if not UtilClient.is_unset(request.names_shrink):
            body['Names'] = request.names_shrink
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.pai_task_enabled):
            body['PaiTaskEnabled'] = request.pai_task_enabled
        if not UtilClient.is_unset(request.status):
            body['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListProjects',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListProjectsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_projects_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.ListProjectsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListProjectsResponse:
        """
        @summary Queries a list of DataWorks workspaces of the tenant to which your account belongs.
        
        @param tmp_req: ListProjectsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListProjectsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.ListProjectsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.aliyun_resource_tags):
            request.aliyun_resource_tags_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.aliyun_resource_tags, 'AliyunResourceTags', 'json')
        if not UtilClient.is_unset(tmp_req.ids):
            request.ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ids, 'Ids', 'json')
        if not UtilClient.is_unset(tmp_req.names):
            request.names_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.names, 'Names', 'json')
        body = {}
        if not UtilClient.is_unset(request.aliyun_resource_group_id):
            body['AliyunResourceGroupId'] = request.aliyun_resource_group_id
        if not UtilClient.is_unset(request.aliyun_resource_tags_shrink):
            body['AliyunResourceTags'] = request.aliyun_resource_tags_shrink
        if not UtilClient.is_unset(request.dev_environment_enabled):
            body['DevEnvironmentEnabled'] = request.dev_environment_enabled
        if not UtilClient.is_unset(request.dev_role_disabled):
            body['DevRoleDisabled'] = request.dev_role_disabled
        if not UtilClient.is_unset(request.ids_shrink):
            body['Ids'] = request.ids_shrink
        if not UtilClient.is_unset(request.names_shrink):
            body['Names'] = request.names_shrink
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.pai_task_enabled):
            body['PaiTaskEnabled'] = request.pai_task_enabled
        if not UtilClient.is_unset(request.status):
            body['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListProjects',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListProjectsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_projects(
        self,
        request: dataworks_public_20240518_models.ListProjectsRequest,
    ) -> dataworks_public_20240518_models.ListProjectsResponse:
        """
        @summary Queries a list of DataWorks workspaces of the tenant to which your account belongs.
        
        @param request: ListProjectsRequest
        @return: ListProjectsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_projects_with_options(request, runtime)

    async def list_projects_async(
        self,
        request: dataworks_public_20240518_models.ListProjectsRequest,
    ) -> dataworks_public_20240518_models.ListProjectsResponse:
        """
        @summary Queries a list of DataWorks workspaces of the tenant to which your account belongs.
        
        @param request: ListProjectsRequest
        @return: ListProjectsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_projects_with_options_async(request, runtime)

    def list_resource_groups_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.ListResourceGroupsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListResourceGroupsResponse:
        """
        @summary Queries a list of resource groups.
        
        @param tmp_req: ListResourceGroupsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListResourceGroupsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.ListResourceGroupsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.aliyun_resource_tags):
            request.aliyun_resource_tags_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.aliyun_resource_tags, 'AliyunResourceTags', 'json')
        if not UtilClient.is_unset(tmp_req.resource_group_types):
            request.resource_group_types_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.resource_group_types, 'ResourceGroupTypes', 'json')
        if not UtilClient.is_unset(tmp_req.statuses):
            request.statuses_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.statuses, 'Statuses', 'json')
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListResourceGroups',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListResourceGroupsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_resource_groups_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.ListResourceGroupsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListResourceGroupsResponse:
        """
        @summary Queries a list of resource groups.
        
        @param tmp_req: ListResourceGroupsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListResourceGroupsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.ListResourceGroupsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.aliyun_resource_tags):
            request.aliyun_resource_tags_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.aliyun_resource_tags, 'AliyunResourceTags', 'json')
        if not UtilClient.is_unset(tmp_req.resource_group_types):
            request.resource_group_types_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.resource_group_types, 'ResourceGroupTypes', 'json')
        if not UtilClient.is_unset(tmp_req.statuses):
            request.statuses_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.statuses, 'Statuses', 'json')
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListResourceGroups',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListResourceGroupsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_resource_groups(
        self,
        request: dataworks_public_20240518_models.ListResourceGroupsRequest,
    ) -> dataworks_public_20240518_models.ListResourceGroupsResponse:
        """
        @summary Queries a list of resource groups.
        
        @param request: ListResourceGroupsRequest
        @return: ListResourceGroupsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_resource_groups_with_options(request, runtime)

    async def list_resource_groups_async(
        self,
        request: dataworks_public_20240518_models.ListResourceGroupsRequest,
    ) -> dataworks_public_20240518_models.ListResourceGroupsResponse:
        """
        @summary Queries a list of resource groups.
        
        @param request: ListResourceGroupsRequest
        @return: ListResourceGroupsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_resource_groups_with_options_async(request, runtime)

    def list_resources_with_options(
        self,
        request: dataworks_public_20240518_models.ListResourcesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListResourcesResponse:
        """
        @summary Queries a list of file resources in DataStudio. You can also specify filter conditions to query specific file resources.
        
        @param request: ListResourcesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListResourcesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListResources',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListResourcesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_resources_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListResourcesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListResourcesResponse:
        """
        @summary Queries a list of file resources in DataStudio. You can also specify filter conditions to query specific file resources.
        
        @param request: ListResourcesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListResourcesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListResources',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListResourcesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_resources(
        self,
        request: dataworks_public_20240518_models.ListResourcesRequest,
    ) -> dataworks_public_20240518_models.ListResourcesResponse:
        """
        @summary Queries a list of file resources in DataStudio. You can also specify filter conditions to query specific file resources.
        
        @param request: ListResourcesRequest
        @return: ListResourcesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_resources_with_options(request, runtime)

    async def list_resources_async(
        self,
        request: dataworks_public_20240518_models.ListResourcesRequest,
    ) -> dataworks_public_20240518_models.ListResourcesResponse:
        """
        @summary Queries a list of file resources in DataStudio. You can also specify filter conditions to query specific file resources.
        
        @param request: ListResourcesRequest
        @return: ListResourcesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_resources_with_options_async(request, runtime)

    def list_routes_with_options(
        self,
        request: dataworks_public_20240518_models.ListRoutesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListRoutesResponse:
        """
        @summary Queries a list of routes of a network resource.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListRoutesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListRoutesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListRoutes',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListRoutesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_routes_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListRoutesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListRoutesResponse:
        """
        @summary Queries a list of routes of a network resource.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListRoutesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListRoutesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListRoutes',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListRoutesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_routes(
        self,
        request: dataworks_public_20240518_models.ListRoutesRequest,
    ) -> dataworks_public_20240518_models.ListRoutesResponse:
        """
        @summary Queries a list of routes of a network resource.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListRoutesRequest
        @return: ListRoutesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_routes_with_options(request, runtime)

    async def list_routes_async(
        self,
        request: dataworks_public_20240518_models.ListRoutesRequest,
    ) -> dataworks_public_20240518_models.ListRoutesResponse:
        """
        @summary Queries a list of routes of a network resource.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListRoutesRequest
        @return: ListRoutesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_routes_with_options_async(request, runtime)

    def list_schemas_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.ListSchemasRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListSchemasResponse:
        """
        @summary Queries a list of schemas in a database or a MaxCompute project in Data Map. Only schemas of the MaxCompute and Hologres metadata crawler types are supported.
        
        @param tmp_req: ListSchemasRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListSchemasResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.ListSchemasShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.types):
            request.types_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.types, 'Types', 'simple')
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListSchemas',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListSchemasResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_schemas_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.ListSchemasRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListSchemasResponse:
        """
        @summary Queries a list of schemas in a database or a MaxCompute project in Data Map. Only schemas of the MaxCompute and Hologres metadata crawler types are supported.
        
        @param tmp_req: ListSchemasRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListSchemasResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.ListSchemasShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.types):
            request.types_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.types, 'Types', 'simple')
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListSchemas',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListSchemasResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_schemas(
        self,
        request: dataworks_public_20240518_models.ListSchemasRequest,
    ) -> dataworks_public_20240518_models.ListSchemasResponse:
        """
        @summary Queries a list of schemas in a database or a MaxCompute project in Data Map. Only schemas of the MaxCompute and Hologres metadata crawler types are supported.
        
        @param request: ListSchemasRequest
        @return: ListSchemasResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_schemas_with_options(request, runtime)

    async def list_schemas_async(
        self,
        request: dataworks_public_20240518_models.ListSchemasRequest,
    ) -> dataworks_public_20240518_models.ListSchemasResponse:
        """
        @summary Queries a list of schemas in a database or a MaxCompute project in Data Map. Only schemas of the MaxCompute and Hologres metadata crawler types are supported.
        
        @param request: ListSchemasRequest
        @return: ListSchemasResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_schemas_with_options_async(request, runtime)

    def list_tables_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.ListTablesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListTablesResponse:
        """
        @summary 查询数据表列表
        
        @param tmp_req: ListTablesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListTablesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.ListTablesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.table_types):
            request.table_types_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.table_types, 'TableTypes', 'simple')
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListTables',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListTablesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_tables_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.ListTablesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListTablesResponse:
        """
        @summary 查询数据表列表
        
        @param tmp_req: ListTablesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListTablesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.ListTablesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.table_types):
            request.table_types_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.table_types, 'TableTypes', 'simple')
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListTables',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListTablesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_tables(
        self,
        request: dataworks_public_20240518_models.ListTablesRequest,
    ) -> dataworks_public_20240518_models.ListTablesResponse:
        """
        @summary 查询数据表列表
        
        @param request: ListTablesRequest
        @return: ListTablesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_tables_with_options(request, runtime)

    async def list_tables_async(
        self,
        request: dataworks_public_20240518_models.ListTablesRequest,
    ) -> dataworks_public_20240518_models.ListTablesResponse:
        """
        @summary 查询数据表列表
        
        @param request: ListTablesRequest
        @return: ListTablesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_tables_with_options_async(request, runtime)

    def list_task_instance_operation_logs_with_options(
        self,
        request: dataworks_public_20240518_models.ListTaskInstanceOperationLogsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListTaskInstanceOperationLogsResponse:
        """
        @summary Queries a list of operation logs of an instance by page.
        
        @description This API operation is available for all DataWorks editions.
        You can call this operation to query only the operation logs generated within the previous 31 days.
        
        @param request: ListTaskInstanceOperationLogsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListTaskInstanceOperationLogsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListTaskInstanceOperationLogs',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListTaskInstanceOperationLogsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_task_instance_operation_logs_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListTaskInstanceOperationLogsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListTaskInstanceOperationLogsResponse:
        """
        @summary Queries a list of operation logs of an instance by page.
        
        @description This API operation is available for all DataWorks editions.
        You can call this operation to query only the operation logs generated within the previous 31 days.
        
        @param request: ListTaskInstanceOperationLogsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListTaskInstanceOperationLogsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListTaskInstanceOperationLogs',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListTaskInstanceOperationLogsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_task_instance_operation_logs(
        self,
        request: dataworks_public_20240518_models.ListTaskInstanceOperationLogsRequest,
    ) -> dataworks_public_20240518_models.ListTaskInstanceOperationLogsResponse:
        """
        @summary Queries a list of operation logs of an instance by page.
        
        @description This API operation is available for all DataWorks editions.
        You can call this operation to query only the operation logs generated within the previous 31 days.
        
        @param request: ListTaskInstanceOperationLogsRequest
        @return: ListTaskInstanceOperationLogsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_task_instance_operation_logs_with_options(request, runtime)

    async def list_task_instance_operation_logs_async(
        self,
        request: dataworks_public_20240518_models.ListTaskInstanceOperationLogsRequest,
    ) -> dataworks_public_20240518_models.ListTaskInstanceOperationLogsResponse:
        """
        @summary Queries a list of operation logs of an instance by page.
        
        @description This API operation is available for all DataWorks editions.
        You can call this operation to query only the operation logs generated within the previous 31 days.
        
        @param request: ListTaskInstanceOperationLogsRequest
        @return: ListTaskInstanceOperationLogsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_task_instance_operation_logs_with_options_async(request, runtime)

    def list_task_instances_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.ListTaskInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListTaskInstancesResponse:
        """
        @summary Queries a list of instances. You can also specify filter conditions to query specific instances.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: ListTaskInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListTaskInstancesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.ListTaskInstancesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.ids):
            request.ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ids, 'Ids', 'json')
        if not UtilClient.is_unset(tmp_req.task_ids):
            request.task_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.task_ids, 'TaskIds', 'json')
        body = {}
        if not UtilClient.is_unset(request.bizdate):
            body['Bizdate'] = request.bizdate
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.ids_shrink):
            body['Ids'] = request.ids_shrink
        if not UtilClient.is_unset(request.owner):
            body['Owner'] = request.owner
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.project_env):
            body['ProjectEnv'] = request.project_env
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.runtime_resource):
            body['RuntimeResource'] = request.runtime_resource
        if not UtilClient.is_unset(request.sort_by):
            body['SortBy'] = request.sort_by
        if not UtilClient.is_unset(request.status):
            body['Status'] = request.status
        if not UtilClient.is_unset(request.task_id):
            body['TaskId'] = request.task_id
        if not UtilClient.is_unset(request.task_ids_shrink):
            body['TaskIds'] = request.task_ids_shrink
        if not UtilClient.is_unset(request.task_name):
            body['TaskName'] = request.task_name
        if not UtilClient.is_unset(request.task_type):
            body['TaskType'] = request.task_type
        if not UtilClient.is_unset(request.trigger_recurrence):
            body['TriggerRecurrence'] = request.trigger_recurrence
        if not UtilClient.is_unset(request.trigger_type):
            body['TriggerType'] = request.trigger_type
        if not UtilClient.is_unset(request.workflow_id):
            body['WorkflowId'] = request.workflow_id
        if not UtilClient.is_unset(request.workflow_instance_id):
            body['WorkflowInstanceId'] = request.workflow_instance_id
        if not UtilClient.is_unset(request.workflow_instance_type):
            body['WorkflowInstanceType'] = request.workflow_instance_type
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListTaskInstances',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListTaskInstancesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_task_instances_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.ListTaskInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListTaskInstancesResponse:
        """
        @summary Queries a list of instances. You can also specify filter conditions to query specific instances.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: ListTaskInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListTaskInstancesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.ListTaskInstancesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.ids):
            request.ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ids, 'Ids', 'json')
        if not UtilClient.is_unset(tmp_req.task_ids):
            request.task_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.task_ids, 'TaskIds', 'json')
        body = {}
        if not UtilClient.is_unset(request.bizdate):
            body['Bizdate'] = request.bizdate
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.ids_shrink):
            body['Ids'] = request.ids_shrink
        if not UtilClient.is_unset(request.owner):
            body['Owner'] = request.owner
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.project_env):
            body['ProjectEnv'] = request.project_env
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.runtime_resource):
            body['RuntimeResource'] = request.runtime_resource
        if not UtilClient.is_unset(request.sort_by):
            body['SortBy'] = request.sort_by
        if not UtilClient.is_unset(request.status):
            body['Status'] = request.status
        if not UtilClient.is_unset(request.task_id):
            body['TaskId'] = request.task_id
        if not UtilClient.is_unset(request.task_ids_shrink):
            body['TaskIds'] = request.task_ids_shrink
        if not UtilClient.is_unset(request.task_name):
            body['TaskName'] = request.task_name
        if not UtilClient.is_unset(request.task_type):
            body['TaskType'] = request.task_type
        if not UtilClient.is_unset(request.trigger_recurrence):
            body['TriggerRecurrence'] = request.trigger_recurrence
        if not UtilClient.is_unset(request.trigger_type):
            body['TriggerType'] = request.trigger_type
        if not UtilClient.is_unset(request.workflow_id):
            body['WorkflowId'] = request.workflow_id
        if not UtilClient.is_unset(request.workflow_instance_id):
            body['WorkflowInstanceId'] = request.workflow_instance_id
        if not UtilClient.is_unset(request.workflow_instance_type):
            body['WorkflowInstanceType'] = request.workflow_instance_type
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListTaskInstances',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListTaskInstancesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_task_instances(
        self,
        request: dataworks_public_20240518_models.ListTaskInstancesRequest,
    ) -> dataworks_public_20240518_models.ListTaskInstancesResponse:
        """
        @summary Queries a list of instances. You can also specify filter conditions to query specific instances.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListTaskInstancesRequest
        @return: ListTaskInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_task_instances_with_options(request, runtime)

    async def list_task_instances_async(
        self,
        request: dataworks_public_20240518_models.ListTaskInstancesRequest,
    ) -> dataworks_public_20240518_models.ListTaskInstancesResponse:
        """
        @summary Queries a list of instances. You can also specify filter conditions to query specific instances.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListTaskInstancesRequest
        @return: ListTaskInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_task_instances_with_options_async(request, runtime)

    def list_task_operation_logs_with_options(
        self,
        request: dataworks_public_20240518_models.ListTaskOperationLogsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListTaskOperationLogsResponse:
        """
        @summary Queries a list of operation logs of a task by page.
        
        @description This API operation is available for all DataWorks editions.
        You can call this operation to query only the operation logs generated within the previous 31 days.
        
        @param request: ListTaskOperationLogsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListTaskOperationLogsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListTaskOperationLogs',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListTaskOperationLogsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_task_operation_logs_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListTaskOperationLogsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListTaskOperationLogsResponse:
        """
        @summary Queries a list of operation logs of a task by page.
        
        @description This API operation is available for all DataWorks editions.
        You can call this operation to query only the operation logs generated within the previous 31 days.
        
        @param request: ListTaskOperationLogsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListTaskOperationLogsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListTaskOperationLogs',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListTaskOperationLogsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_task_operation_logs(
        self,
        request: dataworks_public_20240518_models.ListTaskOperationLogsRequest,
    ) -> dataworks_public_20240518_models.ListTaskOperationLogsResponse:
        """
        @summary Queries a list of operation logs of a task by page.
        
        @description This API operation is available for all DataWorks editions.
        You can call this operation to query only the operation logs generated within the previous 31 days.
        
        @param request: ListTaskOperationLogsRequest
        @return: ListTaskOperationLogsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_task_operation_logs_with_options(request, runtime)

    async def list_task_operation_logs_async(
        self,
        request: dataworks_public_20240518_models.ListTaskOperationLogsRequest,
    ) -> dataworks_public_20240518_models.ListTaskOperationLogsResponse:
        """
        @summary Queries a list of operation logs of a task by page.
        
        @description This API operation is available for all DataWorks editions.
        You can call this operation to query only the operation logs generated within the previous 31 days.
        
        @param request: ListTaskOperationLogsRequest
        @return: ListTaskOperationLogsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_task_operation_logs_with_options_async(request, runtime)

    def list_tasks_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.ListTasksRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListTasksResponse:
        """
        @summary Queries a list of tasks by page. You can also specify filter conditions to query tasks.
        
        @param tmp_req: ListTasksRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListTasksResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.ListTasksShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.ids):
            request.ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ids, 'Ids', 'json')
        body = {}
        if not UtilClient.is_unset(request.ids_shrink):
            body['Ids'] = request.ids_shrink
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.owner):
            body['Owner'] = request.owner
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.project_env):
            body['ProjectEnv'] = request.project_env
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.runtime_resource):
            body['RuntimeResource'] = request.runtime_resource
        if not UtilClient.is_unset(request.sort_by):
            body['SortBy'] = request.sort_by
        if not UtilClient.is_unset(request.task_type):
            body['TaskType'] = request.task_type
        if not UtilClient.is_unset(request.trigger_recurrence):
            body['TriggerRecurrence'] = request.trigger_recurrence
        if not UtilClient.is_unset(request.trigger_type):
            body['TriggerType'] = request.trigger_type
        if not UtilClient.is_unset(request.workflow_id):
            body['WorkflowId'] = request.workflow_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListTasks',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListTasksResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_tasks_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.ListTasksRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListTasksResponse:
        """
        @summary Queries a list of tasks by page. You can also specify filter conditions to query tasks.
        
        @param tmp_req: ListTasksRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListTasksResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.ListTasksShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.ids):
            request.ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ids, 'Ids', 'json')
        body = {}
        if not UtilClient.is_unset(request.ids_shrink):
            body['Ids'] = request.ids_shrink
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.owner):
            body['Owner'] = request.owner
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.project_env):
            body['ProjectEnv'] = request.project_env
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.runtime_resource):
            body['RuntimeResource'] = request.runtime_resource
        if not UtilClient.is_unset(request.sort_by):
            body['SortBy'] = request.sort_by
        if not UtilClient.is_unset(request.task_type):
            body['TaskType'] = request.task_type
        if not UtilClient.is_unset(request.trigger_recurrence):
            body['TriggerRecurrence'] = request.trigger_recurrence
        if not UtilClient.is_unset(request.trigger_type):
            body['TriggerType'] = request.trigger_type
        if not UtilClient.is_unset(request.workflow_id):
            body['WorkflowId'] = request.workflow_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListTasks',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListTasksResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_tasks(
        self,
        request: dataworks_public_20240518_models.ListTasksRequest,
    ) -> dataworks_public_20240518_models.ListTasksResponse:
        """
        @summary Queries a list of tasks by page. You can also specify filter conditions to query tasks.
        
        @param request: ListTasksRequest
        @return: ListTasksResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_tasks_with_options(request, runtime)

    async def list_tasks_async(
        self,
        request: dataworks_public_20240518_models.ListTasksRequest,
    ) -> dataworks_public_20240518_models.ListTasksResponse:
        """
        @summary Queries a list of tasks by page. You can also specify filter conditions to query tasks.
        
        @param request: ListTasksRequest
        @return: ListTasksResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_tasks_with_options_async(request, runtime)

    def list_upstream_task_instances_with_options(
        self,
        request: dataworks_public_20240518_models.ListUpstreamTaskInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListUpstreamTaskInstancesResponse:
        """
        @summary Queries a list of ancestor instances of an instance by page.
        
        @param request: ListUpstreamTaskInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListUpstreamTaskInstancesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListUpstreamTaskInstances',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListUpstreamTaskInstancesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_upstream_task_instances_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListUpstreamTaskInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListUpstreamTaskInstancesResponse:
        """
        @summary Queries a list of ancestor instances of an instance by page.
        
        @param request: ListUpstreamTaskInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListUpstreamTaskInstancesResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListUpstreamTaskInstances',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListUpstreamTaskInstancesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_upstream_task_instances(
        self,
        request: dataworks_public_20240518_models.ListUpstreamTaskInstancesRequest,
    ) -> dataworks_public_20240518_models.ListUpstreamTaskInstancesResponse:
        """
        @summary Queries a list of ancestor instances of an instance by page.
        
        @param request: ListUpstreamTaskInstancesRequest
        @return: ListUpstreamTaskInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_upstream_task_instances_with_options(request, runtime)

    async def list_upstream_task_instances_async(
        self,
        request: dataworks_public_20240518_models.ListUpstreamTaskInstancesRequest,
    ) -> dataworks_public_20240518_models.ListUpstreamTaskInstancesResponse:
        """
        @summary Queries a list of ancestor instances of an instance by page.
        
        @param request: ListUpstreamTaskInstancesRequest
        @return: ListUpstreamTaskInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_upstream_task_instances_with_options_async(request, runtime)

    def list_upstream_tasks_with_options(
        self,
        request: dataworks_public_20240518_models.ListUpstreamTasksRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListUpstreamTasksResponse:
        """
        @summary Queries a list of ancestor tasks of a task by page.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListUpstreamTasksRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListUpstreamTasksResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListUpstreamTasks',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListUpstreamTasksResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_upstream_tasks_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListUpstreamTasksRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListUpstreamTasksResponse:
        """
        @summary Queries a list of ancestor tasks of a task by page.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListUpstreamTasksRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListUpstreamTasksResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListUpstreamTasks',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListUpstreamTasksResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_upstream_tasks(
        self,
        request: dataworks_public_20240518_models.ListUpstreamTasksRequest,
    ) -> dataworks_public_20240518_models.ListUpstreamTasksResponse:
        """
        @summary Queries a list of ancestor tasks of a task by page.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListUpstreamTasksRequest
        @return: ListUpstreamTasksResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_upstream_tasks_with_options(request, runtime)

    async def list_upstream_tasks_async(
        self,
        request: dataworks_public_20240518_models.ListUpstreamTasksRequest,
    ) -> dataworks_public_20240518_models.ListUpstreamTasksResponse:
        """
        @summary Queries a list of ancestor tasks of a task by page.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListUpstreamTasksRequest
        @return: ListUpstreamTasksResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_upstream_tasks_with_options_async(request, runtime)

    def list_workflow_definitions_with_options(
        self,
        request: dataworks_public_20240518_models.ListWorkflowDefinitionsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListWorkflowDefinitionsResponse:
        """
        @summary Queries a list of workflows in DataStudio. You can also specify filter conditions to query specific workflows.
        
        @param request: ListWorkflowDefinitionsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListWorkflowDefinitionsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListWorkflowDefinitions',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListWorkflowDefinitionsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_workflow_definitions_with_options_async(
        self,
        request: dataworks_public_20240518_models.ListWorkflowDefinitionsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListWorkflowDefinitionsResponse:
        """
        @summary Queries a list of workflows in DataStudio. You can also specify filter conditions to query specific workflows.
        
        @param request: ListWorkflowDefinitionsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListWorkflowDefinitionsResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='ListWorkflowDefinitions',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListWorkflowDefinitionsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_workflow_definitions(
        self,
        request: dataworks_public_20240518_models.ListWorkflowDefinitionsRequest,
    ) -> dataworks_public_20240518_models.ListWorkflowDefinitionsResponse:
        """
        @summary Queries a list of workflows in DataStudio. You can also specify filter conditions to query specific workflows.
        
        @param request: ListWorkflowDefinitionsRequest
        @return: ListWorkflowDefinitionsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_workflow_definitions_with_options(request, runtime)

    async def list_workflow_definitions_async(
        self,
        request: dataworks_public_20240518_models.ListWorkflowDefinitionsRequest,
    ) -> dataworks_public_20240518_models.ListWorkflowDefinitionsResponse:
        """
        @summary Queries a list of workflows in DataStudio. You can also specify filter conditions to query specific workflows.
        
        @param request: ListWorkflowDefinitionsRequest
        @return: ListWorkflowDefinitionsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_workflow_definitions_with_options_async(request, runtime)

    def list_workflow_instances_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.ListWorkflowInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListWorkflowInstancesResponse:
        """
        @summary Queries a list of workflow instances by page. You can also specify filter conditions to query workflow instances.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: ListWorkflowInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListWorkflowInstancesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.ListWorkflowInstancesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.ids):
            request.ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ids, 'Ids', 'json')
        body = {}
        if not UtilClient.is_unset(request.biz_date):
            body['BizDate'] = request.biz_date
        if not UtilClient.is_unset(request.ids_shrink):
            body['Ids'] = request.ids_shrink
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.owner):
            body['Owner'] = request.owner
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.sort_by):
            body['SortBy'] = request.sort_by
        if not UtilClient.is_unset(request.type):
            body['Type'] = request.type
        if not UtilClient.is_unset(request.workflow_id):
            body['WorkflowId'] = request.workflow_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListWorkflowInstances',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListWorkflowInstancesResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_workflow_instances_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.ListWorkflowInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListWorkflowInstancesResponse:
        """
        @summary Queries a list of workflow instances by page. You can also specify filter conditions to query workflow instances.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: ListWorkflowInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListWorkflowInstancesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.ListWorkflowInstancesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.ids):
            request.ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ids, 'Ids', 'json')
        body = {}
        if not UtilClient.is_unset(request.biz_date):
            body['BizDate'] = request.biz_date
        if not UtilClient.is_unset(request.ids_shrink):
            body['Ids'] = request.ids_shrink
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.owner):
            body['Owner'] = request.owner
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.sort_by):
            body['SortBy'] = request.sort_by
        if not UtilClient.is_unset(request.type):
            body['Type'] = request.type
        if not UtilClient.is_unset(request.workflow_id):
            body['WorkflowId'] = request.workflow_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListWorkflowInstances',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListWorkflowInstancesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_workflow_instances(
        self,
        request: dataworks_public_20240518_models.ListWorkflowInstancesRequest,
    ) -> dataworks_public_20240518_models.ListWorkflowInstancesResponse:
        """
        @summary Queries a list of workflow instances by page. You can also specify filter conditions to query workflow instances.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListWorkflowInstancesRequest
        @return: ListWorkflowInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_workflow_instances_with_options(request, runtime)

    async def list_workflow_instances_async(
        self,
        request: dataworks_public_20240518_models.ListWorkflowInstancesRequest,
    ) -> dataworks_public_20240518_models.ListWorkflowInstancesResponse:
        """
        @summary Queries a list of workflow instances by page. You can also specify filter conditions to query workflow instances.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListWorkflowInstancesRequest
        @return: ListWorkflowInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_workflow_instances_with_options_async(request, runtime)

    def list_workflows_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.ListWorkflowsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListWorkflowsResponse:
        """
        @summary Queries a list of workflows by page. You can also specify filter conditions to query workflows.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: ListWorkflowsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListWorkflowsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.ListWorkflowsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.ids):
            request.ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ids, 'Ids', 'json')
        body = {}
        if not UtilClient.is_unset(request.env_type):
            body['EnvType'] = request.env_type
        if not UtilClient.is_unset(request.ids_shrink):
            body['Ids'] = request.ids_shrink
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.owner):
            body['Owner'] = request.owner
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.sort_by):
            body['SortBy'] = request.sort_by
        if not UtilClient.is_unset(request.trigger_type):
            body['TriggerType'] = request.trigger_type
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListWorkflows',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListWorkflowsResponse(),
            self.call_api(params, req, runtime)
        )

    async def list_workflows_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.ListWorkflowsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ListWorkflowsResponse:
        """
        @summary Queries a list of workflows by page. You can also specify filter conditions to query workflows.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: ListWorkflowsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ListWorkflowsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.ListWorkflowsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.ids):
            request.ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ids, 'Ids', 'json')
        body = {}
        if not UtilClient.is_unset(request.env_type):
            body['EnvType'] = request.env_type
        if not UtilClient.is_unset(request.ids_shrink):
            body['Ids'] = request.ids_shrink
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.owner):
            body['Owner'] = request.owner
        if not UtilClient.is_unset(request.page_number):
            body['PageNumber'] = request.page_number
        if not UtilClient.is_unset(request.page_size):
            body['PageSize'] = request.page_size
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.sort_by):
            body['SortBy'] = request.sort_by
        if not UtilClient.is_unset(request.trigger_type):
            body['TriggerType'] = request.trigger_type
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ListWorkflows',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ListWorkflowsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def list_workflows(
        self,
        request: dataworks_public_20240518_models.ListWorkflowsRequest,
    ) -> dataworks_public_20240518_models.ListWorkflowsResponse:
        """
        @summary Queries a list of workflows by page. You can also specify filter conditions to query workflows.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListWorkflowsRequest
        @return: ListWorkflowsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.list_workflows_with_options(request, runtime)

    async def list_workflows_async(
        self,
        request: dataworks_public_20240518_models.ListWorkflowsRequest,
    ) -> dataworks_public_20240518_models.ListWorkflowsResponse:
        """
        @summary Queries a list of workflows by page. You can also specify filter conditions to query workflows.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ListWorkflowsRequest
        @return: ListWorkflowsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.list_workflows_with_options_async(request, runtime)

    def move_function_with_options(
        self,
        request: dataworks_public_20240518_models.MoveFunctionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.MoveFunctionResponse:
        """
        @summary Moves a user-defined function (UDF) to a path in DataStudio.
        
        @param request: MoveFunctionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: MoveFunctionResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.path):
            body['Path'] = request.path
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='MoveFunction',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.MoveFunctionResponse(),
            self.call_api(params, req, runtime)
        )

    async def move_function_with_options_async(
        self,
        request: dataworks_public_20240518_models.MoveFunctionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.MoveFunctionResponse:
        """
        @summary Moves a user-defined function (UDF) to a path in DataStudio.
        
        @param request: MoveFunctionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: MoveFunctionResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.path):
            body['Path'] = request.path
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='MoveFunction',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.MoveFunctionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def move_function(
        self,
        request: dataworks_public_20240518_models.MoveFunctionRequest,
    ) -> dataworks_public_20240518_models.MoveFunctionResponse:
        """
        @summary Moves a user-defined function (UDF) to a path in DataStudio.
        
        @param request: MoveFunctionRequest
        @return: MoveFunctionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.move_function_with_options(request, runtime)

    async def move_function_async(
        self,
        request: dataworks_public_20240518_models.MoveFunctionRequest,
    ) -> dataworks_public_20240518_models.MoveFunctionResponse:
        """
        @summary Moves a user-defined function (UDF) to a path in DataStudio.
        
        @param request: MoveFunctionRequest
        @return: MoveFunctionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.move_function_with_options_async(request, runtime)

    def move_node_with_options(
        self,
        request: dataworks_public_20240518_models.MoveNodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.MoveNodeResponse:
        """
        @summary Moves a node to a path in DataStudio.
        
        @param request: MoveNodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: MoveNodeResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.path):
            body['Path'] = request.path
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='MoveNode',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.MoveNodeResponse(),
            self.call_api(params, req, runtime)
        )

    async def move_node_with_options_async(
        self,
        request: dataworks_public_20240518_models.MoveNodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.MoveNodeResponse:
        """
        @summary Moves a node to a path in DataStudio.
        
        @param request: MoveNodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: MoveNodeResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.path):
            body['Path'] = request.path
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='MoveNode',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.MoveNodeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def move_node(
        self,
        request: dataworks_public_20240518_models.MoveNodeRequest,
    ) -> dataworks_public_20240518_models.MoveNodeResponse:
        """
        @summary Moves a node to a path in DataStudio.
        
        @param request: MoveNodeRequest
        @return: MoveNodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.move_node_with_options(request, runtime)

    async def move_node_async(
        self,
        request: dataworks_public_20240518_models.MoveNodeRequest,
    ) -> dataworks_public_20240518_models.MoveNodeResponse:
        """
        @summary Moves a node to a path in DataStudio.
        
        @param request: MoveNodeRequest
        @return: MoveNodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.move_node_with_options_async(request, runtime)

    def move_resource_with_options(
        self,
        request: dataworks_public_20240518_models.MoveResourceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.MoveResourceResponse:
        """
        @summary Moves a file resource to a path in DataStudio.
        
        @param request: MoveResourceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: MoveResourceResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.path):
            body['Path'] = request.path
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='MoveResource',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.MoveResourceResponse(),
            self.call_api(params, req, runtime)
        )

    async def move_resource_with_options_async(
        self,
        request: dataworks_public_20240518_models.MoveResourceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.MoveResourceResponse:
        """
        @summary Moves a file resource to a path in DataStudio.
        
        @param request: MoveResourceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: MoveResourceResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.path):
            body['Path'] = request.path
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='MoveResource',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.MoveResourceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def move_resource(
        self,
        request: dataworks_public_20240518_models.MoveResourceRequest,
    ) -> dataworks_public_20240518_models.MoveResourceResponse:
        """
        @summary Moves a file resource to a path in DataStudio.
        
        @param request: MoveResourceRequest
        @return: MoveResourceResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.move_resource_with_options(request, runtime)

    async def move_resource_async(
        self,
        request: dataworks_public_20240518_models.MoveResourceRequest,
    ) -> dataworks_public_20240518_models.MoveResourceResponse:
        """
        @summary Moves a file resource to a path in DataStudio.
        
        @param request: MoveResourceRequest
        @return: MoveResourceResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.move_resource_with_options_async(request, runtime)

    def move_workflow_definition_with_options(
        self,
        request: dataworks_public_20240518_models.MoveWorkflowDefinitionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.MoveWorkflowDefinitionResponse:
        """
        @summary Moves a workflow to a path in DataStudio.
        
        @param request: MoveWorkflowDefinitionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: MoveWorkflowDefinitionResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.path):
            body['Path'] = request.path
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='MoveWorkflowDefinition',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.MoveWorkflowDefinitionResponse(),
            self.call_api(params, req, runtime)
        )

    async def move_workflow_definition_with_options_async(
        self,
        request: dataworks_public_20240518_models.MoveWorkflowDefinitionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.MoveWorkflowDefinitionResponse:
        """
        @summary Moves a workflow to a path in DataStudio.
        
        @param request: MoveWorkflowDefinitionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: MoveWorkflowDefinitionResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.path):
            body['Path'] = request.path
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='MoveWorkflowDefinition',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.MoveWorkflowDefinitionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def move_workflow_definition(
        self,
        request: dataworks_public_20240518_models.MoveWorkflowDefinitionRequest,
    ) -> dataworks_public_20240518_models.MoveWorkflowDefinitionResponse:
        """
        @summary Moves a workflow to a path in DataStudio.
        
        @param request: MoveWorkflowDefinitionRequest
        @return: MoveWorkflowDefinitionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.move_workflow_definition_with_options(request, runtime)

    async def move_workflow_definition_async(
        self,
        request: dataworks_public_20240518_models.MoveWorkflowDefinitionRequest,
    ) -> dataworks_public_20240518_models.MoveWorkflowDefinitionResponse:
        """
        @summary Moves a workflow to a path in DataStudio.
        
        @param request: MoveWorkflowDefinitionRequest
        @return: MoveWorkflowDefinitionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.move_workflow_definition_with_options_async(request, runtime)

    def remove_entity_from_meta_collection_with_options(
        self,
        request: dataworks_public_20240518_models.RemoveEntityFromMetaCollectionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.RemoveEntityFromMetaCollectionResponse:
        """
        @summary 从集合中移除实体对象
        
        @param request: RemoveEntityFromMetaCollectionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RemoveEntityFromMetaCollectionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.meta_collection_id):
            query['MetaCollectionId'] = request.meta_collection_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='RemoveEntityFromMetaCollection',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.RemoveEntityFromMetaCollectionResponse(),
            self.call_api(params, req, runtime)
        )

    async def remove_entity_from_meta_collection_with_options_async(
        self,
        request: dataworks_public_20240518_models.RemoveEntityFromMetaCollectionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.RemoveEntityFromMetaCollectionResponse:
        """
        @summary 从集合中移除实体对象
        
        @param request: RemoveEntityFromMetaCollectionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RemoveEntityFromMetaCollectionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.meta_collection_id):
            query['MetaCollectionId'] = request.meta_collection_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='RemoveEntityFromMetaCollection',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.RemoveEntityFromMetaCollectionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def remove_entity_from_meta_collection(
        self,
        request: dataworks_public_20240518_models.RemoveEntityFromMetaCollectionRequest,
    ) -> dataworks_public_20240518_models.RemoveEntityFromMetaCollectionResponse:
        """
        @summary 从集合中移除实体对象
        
        @param request: RemoveEntityFromMetaCollectionRequest
        @return: RemoveEntityFromMetaCollectionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.remove_entity_from_meta_collection_with_options(request, runtime)

    async def remove_entity_from_meta_collection_async(
        self,
        request: dataworks_public_20240518_models.RemoveEntityFromMetaCollectionRequest,
    ) -> dataworks_public_20240518_models.RemoveEntityFromMetaCollectionResponse:
        """
        @summary 从集合中移除实体对象
        
        @param request: RemoveEntityFromMetaCollectionRequest
        @return: RemoveEntityFromMetaCollectionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.remove_entity_from_meta_collection_with_options_async(request, runtime)

    def remove_task_instance_dependencies_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.RemoveTaskInstanceDependenciesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.RemoveTaskInstanceDependenciesResponse:
        """
        @summary Removes multiple upstream dependencies of an instance at a time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: RemoveTaskInstanceDependenciesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RemoveTaskInstanceDependenciesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.RemoveTaskInstanceDependenciesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.upstream_task_instance_ids):
            request.upstream_task_instance_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.upstream_task_instance_ids, 'UpstreamTaskInstanceIds', 'json')
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        body = {}
        if not UtilClient.is_unset(request.comment):
            body['Comment'] = request.comment
        if not UtilClient.is_unset(request.upstream_task_instance_ids_shrink):
            body['UpstreamTaskInstanceIds'] = request.upstream_task_instance_ids_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='RemoveTaskInstanceDependencies',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.RemoveTaskInstanceDependenciesResponse(),
            self.call_api(params, req, runtime)
        )

    async def remove_task_instance_dependencies_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.RemoveTaskInstanceDependenciesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.RemoveTaskInstanceDependenciesResponse:
        """
        @summary Removes multiple upstream dependencies of an instance at a time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: RemoveTaskInstanceDependenciesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RemoveTaskInstanceDependenciesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.RemoveTaskInstanceDependenciesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.upstream_task_instance_ids):
            request.upstream_task_instance_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.upstream_task_instance_ids, 'UpstreamTaskInstanceIds', 'json')
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        body = {}
        if not UtilClient.is_unset(request.comment):
            body['Comment'] = request.comment
        if not UtilClient.is_unset(request.upstream_task_instance_ids_shrink):
            body['UpstreamTaskInstanceIds'] = request.upstream_task_instance_ids_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='RemoveTaskInstanceDependencies',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.RemoveTaskInstanceDependenciesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def remove_task_instance_dependencies(
        self,
        request: dataworks_public_20240518_models.RemoveTaskInstanceDependenciesRequest,
    ) -> dataworks_public_20240518_models.RemoveTaskInstanceDependenciesResponse:
        """
        @summary Removes multiple upstream dependencies of an instance at a time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: RemoveTaskInstanceDependenciesRequest
        @return: RemoveTaskInstanceDependenciesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.remove_task_instance_dependencies_with_options(request, runtime)

    async def remove_task_instance_dependencies_async(
        self,
        request: dataworks_public_20240518_models.RemoveTaskInstanceDependenciesRequest,
    ) -> dataworks_public_20240518_models.RemoveTaskInstanceDependenciesResponse:
        """
        @summary Removes multiple upstream dependencies of an instance at a time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: RemoveTaskInstanceDependenciesRequest
        @return: RemoveTaskInstanceDependenciesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.remove_task_instance_dependencies_with_options_async(request, runtime)

    def rename_function_with_options(
        self,
        request: dataworks_public_20240518_models.RenameFunctionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.RenameFunctionResponse:
        """
        @summary Renames a user-defined function (UDF) in DataStudio.
        
        @param request: RenameFunctionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RenameFunctionResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='RenameFunction',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.RenameFunctionResponse(),
            self.call_api(params, req, runtime)
        )

    async def rename_function_with_options_async(
        self,
        request: dataworks_public_20240518_models.RenameFunctionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.RenameFunctionResponse:
        """
        @summary Renames a user-defined function (UDF) in DataStudio.
        
        @param request: RenameFunctionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RenameFunctionResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='RenameFunction',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.RenameFunctionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def rename_function(
        self,
        request: dataworks_public_20240518_models.RenameFunctionRequest,
    ) -> dataworks_public_20240518_models.RenameFunctionResponse:
        """
        @summary Renames a user-defined function (UDF) in DataStudio.
        
        @param request: RenameFunctionRequest
        @return: RenameFunctionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.rename_function_with_options(request, runtime)

    async def rename_function_async(
        self,
        request: dataworks_public_20240518_models.RenameFunctionRequest,
    ) -> dataworks_public_20240518_models.RenameFunctionResponse:
        """
        @summary Renames a user-defined function (UDF) in DataStudio.
        
        @param request: RenameFunctionRequest
        @return: RenameFunctionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.rename_function_with_options_async(request, runtime)

    def rename_node_with_options(
        self,
        request: dataworks_public_20240518_models.RenameNodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.RenameNodeResponse:
        """
        @summary Renames a node in DataStudio.
        
        @param request: RenameNodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RenameNodeResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='RenameNode',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.RenameNodeResponse(),
            self.call_api(params, req, runtime)
        )

    async def rename_node_with_options_async(
        self,
        request: dataworks_public_20240518_models.RenameNodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.RenameNodeResponse:
        """
        @summary Renames a node in DataStudio.
        
        @param request: RenameNodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RenameNodeResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='RenameNode',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.RenameNodeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def rename_node(
        self,
        request: dataworks_public_20240518_models.RenameNodeRequest,
    ) -> dataworks_public_20240518_models.RenameNodeResponse:
        """
        @summary Renames a node in DataStudio.
        
        @param request: RenameNodeRequest
        @return: RenameNodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.rename_node_with_options(request, runtime)

    async def rename_node_async(
        self,
        request: dataworks_public_20240518_models.RenameNodeRequest,
    ) -> dataworks_public_20240518_models.RenameNodeResponse:
        """
        @summary Renames a node in DataStudio.
        
        @param request: RenameNodeRequest
        @return: RenameNodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.rename_node_with_options_async(request, runtime)

    def rename_resource_with_options(
        self,
        request: dataworks_public_20240518_models.RenameResourceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.RenameResourceResponse:
        """
        @summary Renames a file resource in DataStudio.
        
        @param request: RenameResourceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RenameResourceResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='RenameResource',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.RenameResourceResponse(),
            self.call_api(params, req, runtime)
        )

    async def rename_resource_with_options_async(
        self,
        request: dataworks_public_20240518_models.RenameResourceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.RenameResourceResponse:
        """
        @summary Renames a file resource in DataStudio.
        
        @param request: RenameResourceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RenameResourceResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='RenameResource',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.RenameResourceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def rename_resource(
        self,
        request: dataworks_public_20240518_models.RenameResourceRequest,
    ) -> dataworks_public_20240518_models.RenameResourceResponse:
        """
        @summary Renames a file resource in DataStudio.
        
        @param request: RenameResourceRequest
        @return: RenameResourceResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.rename_resource_with_options(request, runtime)

    async def rename_resource_async(
        self,
        request: dataworks_public_20240518_models.RenameResourceRequest,
    ) -> dataworks_public_20240518_models.RenameResourceResponse:
        """
        @summary Renames a file resource in DataStudio.
        
        @param request: RenameResourceRequest
        @return: RenameResourceResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.rename_resource_with_options_async(request, runtime)

    def rename_workflow_definition_with_options(
        self,
        request: dataworks_public_20240518_models.RenameWorkflowDefinitionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.RenameWorkflowDefinitionResponse:
        """
        @summary Renames a workflow in DataStudio.
        
        @param request: RenameWorkflowDefinitionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RenameWorkflowDefinitionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='RenameWorkflowDefinition',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.RenameWorkflowDefinitionResponse(),
            self.call_api(params, req, runtime)
        )

    async def rename_workflow_definition_with_options_async(
        self,
        request: dataworks_public_20240518_models.RenameWorkflowDefinitionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.RenameWorkflowDefinitionResponse:
        """
        @summary Renames a workflow in DataStudio.
        
        @param request: RenameWorkflowDefinitionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RenameWorkflowDefinitionResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='RenameWorkflowDefinition',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.RenameWorkflowDefinitionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def rename_workflow_definition(
        self,
        request: dataworks_public_20240518_models.RenameWorkflowDefinitionRequest,
    ) -> dataworks_public_20240518_models.RenameWorkflowDefinitionResponse:
        """
        @summary Renames a workflow in DataStudio.
        
        @param request: RenameWorkflowDefinitionRequest
        @return: RenameWorkflowDefinitionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.rename_workflow_definition_with_options(request, runtime)

    async def rename_workflow_definition_async(
        self,
        request: dataworks_public_20240518_models.RenameWorkflowDefinitionRequest,
    ) -> dataworks_public_20240518_models.RenameWorkflowDefinitionResponse:
        """
        @summary Renames a workflow in DataStudio.
        
        @param request: RenameWorkflowDefinitionRequest
        @return: RenameWorkflowDefinitionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.rename_workflow_definition_with_options_async(request, runtime)

    def rerun_task_instances_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.RerunTaskInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.RerunTaskInstancesResponse:
        """
        @summary Reruns multiple instances at a time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: RerunTaskInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RerunTaskInstancesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.RerunTaskInstancesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.ids):
            request.ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ids, 'Ids', 'json')
        body = {}
        if not UtilClient.is_unset(request.comment):
            body['Comment'] = request.comment
        if not UtilClient.is_unset(request.ids_shrink):
            body['Ids'] = request.ids_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='RerunTaskInstances',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.RerunTaskInstancesResponse(),
            self.call_api(params, req, runtime)
        )

    async def rerun_task_instances_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.RerunTaskInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.RerunTaskInstancesResponse:
        """
        @summary Reruns multiple instances at a time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: RerunTaskInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RerunTaskInstancesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.RerunTaskInstancesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.ids):
            request.ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ids, 'Ids', 'json')
        body = {}
        if not UtilClient.is_unset(request.comment):
            body['Comment'] = request.comment
        if not UtilClient.is_unset(request.ids_shrink):
            body['Ids'] = request.ids_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='RerunTaskInstances',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.RerunTaskInstancesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def rerun_task_instances(
        self,
        request: dataworks_public_20240518_models.RerunTaskInstancesRequest,
    ) -> dataworks_public_20240518_models.RerunTaskInstancesResponse:
        """
        @summary Reruns multiple instances at a time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: RerunTaskInstancesRequest
        @return: RerunTaskInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.rerun_task_instances_with_options(request, runtime)

    async def rerun_task_instances_async(
        self,
        request: dataworks_public_20240518_models.RerunTaskInstancesRequest,
    ) -> dataworks_public_20240518_models.RerunTaskInstancesResponse:
        """
        @summary Reruns multiple instances at a time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: RerunTaskInstancesRequest
        @return: RerunTaskInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.rerun_task_instances_with_options_async(request, runtime)

    def rerun_workflow_instances_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.RerunWorkflowInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.RerunWorkflowInstancesResponse:
        """
        @summary Reruns workflow instances.
        
        @param tmp_req: RerunWorkflowInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RerunWorkflowInstancesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.RerunWorkflowInstancesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.filter):
            request.filter_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.filter, 'Filter', 'json')
        if not UtilClient.is_unset(tmp_req.ids):
            request.ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ids, 'Ids', 'json')
        body = {}
        if not UtilClient.is_unset(request.bizdate):
            body['Bizdate'] = request.bizdate
        if not UtilClient.is_unset(request.end_trigger_time):
            body['EndTriggerTime'] = request.end_trigger_time
        if not UtilClient.is_unset(request.env_type):
            body['EnvType'] = request.env_type
        if not UtilClient.is_unset(request.filter_shrink):
            body['Filter'] = request.filter_shrink
        if not UtilClient.is_unset(request.ids_shrink):
            body['Ids'] = request.ids_shrink
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.start_trigger_time):
            body['StartTriggerTime'] = request.start_trigger_time
        if not UtilClient.is_unset(request.status):
            body['Status'] = request.status
        if not UtilClient.is_unset(request.type):
            body['Type'] = request.type
        if not UtilClient.is_unset(request.workflow_id):
            body['WorkflowId'] = request.workflow_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='RerunWorkflowInstances',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.RerunWorkflowInstancesResponse(),
            self.call_api(params, req, runtime)
        )

    async def rerun_workflow_instances_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.RerunWorkflowInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.RerunWorkflowInstancesResponse:
        """
        @summary Reruns workflow instances.
        
        @param tmp_req: RerunWorkflowInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RerunWorkflowInstancesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.RerunWorkflowInstancesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.filter):
            request.filter_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.filter, 'Filter', 'json')
        if not UtilClient.is_unset(tmp_req.ids):
            request.ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ids, 'Ids', 'json')
        body = {}
        if not UtilClient.is_unset(request.bizdate):
            body['Bizdate'] = request.bizdate
        if not UtilClient.is_unset(request.end_trigger_time):
            body['EndTriggerTime'] = request.end_trigger_time
        if not UtilClient.is_unset(request.env_type):
            body['EnvType'] = request.env_type
        if not UtilClient.is_unset(request.filter_shrink):
            body['Filter'] = request.filter_shrink
        if not UtilClient.is_unset(request.ids_shrink):
            body['Ids'] = request.ids_shrink
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.start_trigger_time):
            body['StartTriggerTime'] = request.start_trigger_time
        if not UtilClient.is_unset(request.status):
            body['Status'] = request.status
        if not UtilClient.is_unset(request.type):
            body['Type'] = request.type
        if not UtilClient.is_unset(request.workflow_id):
            body['WorkflowId'] = request.workflow_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='RerunWorkflowInstances',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.RerunWorkflowInstancesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def rerun_workflow_instances(
        self,
        request: dataworks_public_20240518_models.RerunWorkflowInstancesRequest,
    ) -> dataworks_public_20240518_models.RerunWorkflowInstancesResponse:
        """
        @summary Reruns workflow instances.
        
        @param request: RerunWorkflowInstancesRequest
        @return: RerunWorkflowInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.rerun_workflow_instances_with_options(request, runtime)

    async def rerun_workflow_instances_async(
        self,
        request: dataworks_public_20240518_models.RerunWorkflowInstancesRequest,
    ) -> dataworks_public_20240518_models.RerunWorkflowInstancesResponse:
        """
        @summary Reruns workflow instances.
        
        @param request: RerunWorkflowInstancesRequest
        @return: RerunWorkflowInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.rerun_workflow_instances_with_options_async(request, runtime)

    def resume_task_instances_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.ResumeTaskInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ResumeTaskInstancesResponse:
        """
        @summary Resumes multiple suspended instances at a time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: ResumeTaskInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ResumeTaskInstancesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.ResumeTaskInstancesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.ids):
            request.ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ids, 'Ids', 'json')
        body = {}
        if not UtilClient.is_unset(request.comment):
            body['Comment'] = request.comment
        if not UtilClient.is_unset(request.ids_shrink):
            body['Ids'] = request.ids_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ResumeTaskInstances',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ResumeTaskInstancesResponse(),
            self.call_api(params, req, runtime)
        )

    async def resume_task_instances_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.ResumeTaskInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.ResumeTaskInstancesResponse:
        """
        @summary Resumes multiple suspended instances at a time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: ResumeTaskInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: ResumeTaskInstancesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.ResumeTaskInstancesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.ids):
            request.ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ids, 'Ids', 'json')
        body = {}
        if not UtilClient.is_unset(request.comment):
            body['Comment'] = request.comment
        if not UtilClient.is_unset(request.ids_shrink):
            body['Ids'] = request.ids_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='ResumeTaskInstances',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.ResumeTaskInstancesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def resume_task_instances(
        self,
        request: dataworks_public_20240518_models.ResumeTaskInstancesRequest,
    ) -> dataworks_public_20240518_models.ResumeTaskInstancesResponse:
        """
        @summary Resumes multiple suspended instances at a time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ResumeTaskInstancesRequest
        @return: ResumeTaskInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.resume_task_instances_with_options(request, runtime)

    async def resume_task_instances_async(
        self,
        request: dataworks_public_20240518_models.ResumeTaskInstancesRequest,
    ) -> dataworks_public_20240518_models.ResumeTaskInstancesResponse:
        """
        @summary Resumes multiple suspended instances at a time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: ResumeTaskInstancesRequest
        @return: ResumeTaskInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.resume_task_instances_with_options_async(request, runtime)

    def revoke_member_project_roles_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.RevokeMemberProjectRolesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.RevokeMemberProjectRolesResponse:
        """
        @summary Revokes roles that are assigned to a member in a workspace.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: RevokeMemberProjectRolesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RevokeMemberProjectRolesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.RevokeMemberProjectRolesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.role_codes):
            request.role_codes_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.role_codes, 'RoleCodes', 'json')
        body = {}
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.role_codes_shrink):
            body['RoleCodes'] = request.role_codes_shrink
        if not UtilClient.is_unset(request.user_id):
            body['UserId'] = request.user_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='RevokeMemberProjectRoles',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.RevokeMemberProjectRolesResponse(),
            self.call_api(params, req, runtime)
        )

    async def revoke_member_project_roles_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.RevokeMemberProjectRolesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.RevokeMemberProjectRolesResponse:
        """
        @summary Revokes roles that are assigned to a member in a workspace.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: RevokeMemberProjectRolesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: RevokeMemberProjectRolesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.RevokeMemberProjectRolesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.role_codes):
            request.role_codes_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.role_codes, 'RoleCodes', 'json')
        body = {}
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.role_codes_shrink):
            body['RoleCodes'] = request.role_codes_shrink
        if not UtilClient.is_unset(request.user_id):
            body['UserId'] = request.user_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='RevokeMemberProjectRoles',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.RevokeMemberProjectRolesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def revoke_member_project_roles(
        self,
        request: dataworks_public_20240518_models.RevokeMemberProjectRolesRequest,
    ) -> dataworks_public_20240518_models.RevokeMemberProjectRolesResponse:
        """
        @summary Revokes roles that are assigned to a member in a workspace.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: RevokeMemberProjectRolesRequest
        @return: RevokeMemberProjectRolesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.revoke_member_project_roles_with_options(request, runtime)

    async def revoke_member_project_roles_async(
        self,
        request: dataworks_public_20240518_models.RevokeMemberProjectRolesRequest,
    ) -> dataworks_public_20240518_models.RevokeMemberProjectRolesResponse:
        """
        @summary Revokes roles that are assigned to a member in a workspace.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: RevokeMemberProjectRolesRequest
        @return: RevokeMemberProjectRolesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.revoke_member_project_roles_with_options_async(request, runtime)

    def set_success_task_instances_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.SetSuccessTaskInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.SetSuccessTaskInstancesResponse:
        """
        @summary Sets the statuses of multiple instances to successful at a time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: SetSuccessTaskInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SetSuccessTaskInstancesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.SetSuccessTaskInstancesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.ids):
            request.ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ids, 'Ids', 'json')
        body = {}
        if not UtilClient.is_unset(request.comment):
            body['Comment'] = request.comment
        if not UtilClient.is_unset(request.ids_shrink):
            body['Ids'] = request.ids_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SetSuccessTaskInstances',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.SetSuccessTaskInstancesResponse(),
            self.call_api(params, req, runtime)
        )

    async def set_success_task_instances_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.SetSuccessTaskInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.SetSuccessTaskInstancesResponse:
        """
        @summary Sets the statuses of multiple instances to successful at a time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: SetSuccessTaskInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SetSuccessTaskInstancesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.SetSuccessTaskInstancesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.ids):
            request.ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ids, 'Ids', 'json')
        body = {}
        if not UtilClient.is_unset(request.comment):
            body['Comment'] = request.comment
        if not UtilClient.is_unset(request.ids_shrink):
            body['Ids'] = request.ids_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SetSuccessTaskInstances',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.SetSuccessTaskInstancesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def set_success_task_instances(
        self,
        request: dataworks_public_20240518_models.SetSuccessTaskInstancesRequest,
    ) -> dataworks_public_20240518_models.SetSuccessTaskInstancesResponse:
        """
        @summary Sets the statuses of multiple instances to successful at a time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: SetSuccessTaskInstancesRequest
        @return: SetSuccessTaskInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.set_success_task_instances_with_options(request, runtime)

    async def set_success_task_instances_async(
        self,
        request: dataworks_public_20240518_models.SetSuccessTaskInstancesRequest,
    ) -> dataworks_public_20240518_models.SetSuccessTaskInstancesResponse:
        """
        @summary Sets the statuses of multiple instances to successful at a time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: SetSuccessTaskInstancesRequest
        @return: SetSuccessTaskInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.set_success_task_instances_with_options_async(request, runtime)

    def start_dijob_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.StartDIJobRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.StartDIJobResponse:
        """
        @summary Starts a new-version synchronization task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: StartDIJobRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: StartDIJobResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.StartDIJobShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.realtime_start_settings):
            request.realtime_start_settings_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.realtime_start_settings, 'RealtimeStartSettings', 'json')
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='StartDIJob',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.StartDIJobResponse(),
            self.call_api(params, req, runtime)
        )

    async def start_dijob_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.StartDIJobRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.StartDIJobResponse:
        """
        @summary Starts a new-version synchronization task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: StartDIJobRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: StartDIJobResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.StartDIJobShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.realtime_start_settings):
            request.realtime_start_settings_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.realtime_start_settings, 'RealtimeStartSettings', 'json')
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='StartDIJob',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.StartDIJobResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def start_dijob(
        self,
        request: dataworks_public_20240518_models.StartDIJobRequest,
    ) -> dataworks_public_20240518_models.StartDIJobResponse:
        """
        @summary Starts a new-version synchronization task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: StartDIJobRequest
        @return: StartDIJobResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.start_dijob_with_options(request, runtime)

    async def start_dijob_async(
        self,
        request: dataworks_public_20240518_models.StartDIJobRequest,
    ) -> dataworks_public_20240518_models.StartDIJobResponse:
        """
        @summary Starts a new-version synchronization task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: StartDIJobRequest
        @return: StartDIJobResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.start_dijob_with_options_async(request, runtime)

    def start_workflow_instances_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.StartWorkflowInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.StartWorkflowInstancesResponse:
        """
        @summary Starts multiple workflow instances at a time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: StartWorkflowInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: StartWorkflowInstancesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.StartWorkflowInstancesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.ids):
            request.ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ids, 'Ids', 'json')
        body = {}
        if not UtilClient.is_unset(request.comment):
            body['Comment'] = request.comment
        if not UtilClient.is_unset(request.ids_shrink):
            body['Ids'] = request.ids_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='StartWorkflowInstances',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.StartWorkflowInstancesResponse(),
            self.call_api(params, req, runtime)
        )

    async def start_workflow_instances_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.StartWorkflowInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.StartWorkflowInstancesResponse:
        """
        @summary Starts multiple workflow instances at a time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: StartWorkflowInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: StartWorkflowInstancesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.StartWorkflowInstancesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.ids):
            request.ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ids, 'Ids', 'json')
        body = {}
        if not UtilClient.is_unset(request.comment):
            body['Comment'] = request.comment
        if not UtilClient.is_unset(request.ids_shrink):
            body['Ids'] = request.ids_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='StartWorkflowInstances',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.StartWorkflowInstancesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def start_workflow_instances(
        self,
        request: dataworks_public_20240518_models.StartWorkflowInstancesRequest,
    ) -> dataworks_public_20240518_models.StartWorkflowInstancesResponse:
        """
        @summary Starts multiple workflow instances at a time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: StartWorkflowInstancesRequest
        @return: StartWorkflowInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.start_workflow_instances_with_options(request, runtime)

    async def start_workflow_instances_async(
        self,
        request: dataworks_public_20240518_models.StartWorkflowInstancesRequest,
    ) -> dataworks_public_20240518_models.StartWorkflowInstancesResponse:
        """
        @summary Starts multiple workflow instances at a time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: StartWorkflowInstancesRequest
        @return: StartWorkflowInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.start_workflow_instances_with_options_async(request, runtime)

    def stop_dijob_with_options(
        self,
        request: dataworks_public_20240518_models.StopDIJobRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.StopDIJobResponse:
        """
        @summary Stops a synchronization task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: StopDIJobRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: StopDIJobResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='StopDIJob',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.StopDIJobResponse(),
            self.call_api(params, req, runtime)
        )

    async def stop_dijob_with_options_async(
        self,
        request: dataworks_public_20240518_models.StopDIJobRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.StopDIJobResponse:
        """
        @summary Stops a synchronization task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: StopDIJobRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: StopDIJobResponse
        """
        UtilClient.validate_model(request)
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='StopDIJob',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.StopDIJobResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def stop_dijob(
        self,
        request: dataworks_public_20240518_models.StopDIJobRequest,
    ) -> dataworks_public_20240518_models.StopDIJobResponse:
        """
        @summary Stops a synchronization task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: StopDIJobRequest
        @return: StopDIJobResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.stop_dijob_with_options(request, runtime)

    async def stop_dijob_async(
        self,
        request: dataworks_public_20240518_models.StopDIJobRequest,
    ) -> dataworks_public_20240518_models.StopDIJobResponse:
        """
        @summary Stops a synchronization task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: StopDIJobRequest
        @return: StopDIJobResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.stop_dijob_with_options_async(request, runtime)

    def stop_task_instances_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.StopTaskInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.StopTaskInstancesResponse:
        """
        @summary Stops multiple instances at a time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: StopTaskInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: StopTaskInstancesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.StopTaskInstancesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.ids):
            request.ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ids, 'Ids', 'json')
        body = {}
        if not UtilClient.is_unset(request.comment):
            body['Comment'] = request.comment
        if not UtilClient.is_unset(request.ids_shrink):
            body['Ids'] = request.ids_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='StopTaskInstances',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.StopTaskInstancesResponse(),
            self.call_api(params, req, runtime)
        )

    async def stop_task_instances_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.StopTaskInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.StopTaskInstancesResponse:
        """
        @summary Stops multiple instances at a time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: StopTaskInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: StopTaskInstancesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.StopTaskInstancesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.ids):
            request.ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ids, 'Ids', 'json')
        body = {}
        if not UtilClient.is_unset(request.comment):
            body['Comment'] = request.comment
        if not UtilClient.is_unset(request.ids_shrink):
            body['Ids'] = request.ids_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='StopTaskInstances',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.StopTaskInstancesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def stop_task_instances(
        self,
        request: dataworks_public_20240518_models.StopTaskInstancesRequest,
    ) -> dataworks_public_20240518_models.StopTaskInstancesResponse:
        """
        @summary Stops multiple instances at a time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: StopTaskInstancesRequest
        @return: StopTaskInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.stop_task_instances_with_options(request, runtime)

    async def stop_task_instances_async(
        self,
        request: dataworks_public_20240518_models.StopTaskInstancesRequest,
    ) -> dataworks_public_20240518_models.StopTaskInstancesResponse:
        """
        @summary Stops multiple instances at a time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: StopTaskInstancesRequest
        @return: StopTaskInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.stop_task_instances_with_options_async(request, runtime)

    def stop_workflow_instances_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.StopWorkflowInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.StopWorkflowInstancesResponse:
        """
        @summary Stops multiple workflow instances at a time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: StopWorkflowInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: StopWorkflowInstancesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.StopWorkflowInstancesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.ids):
            request.ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ids, 'Ids', 'json')
        body = {}
        if not UtilClient.is_unset(request.comment):
            body['Comment'] = request.comment
        if not UtilClient.is_unset(request.ids_shrink):
            body['Ids'] = request.ids_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='StopWorkflowInstances',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.StopWorkflowInstancesResponse(),
            self.call_api(params, req, runtime)
        )

    async def stop_workflow_instances_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.StopWorkflowInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.StopWorkflowInstancesResponse:
        """
        @summary Stops multiple workflow instances at a time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: StopWorkflowInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: StopWorkflowInstancesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.StopWorkflowInstancesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.ids):
            request.ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ids, 'Ids', 'json')
        body = {}
        if not UtilClient.is_unset(request.comment):
            body['Comment'] = request.comment
        if not UtilClient.is_unset(request.ids_shrink):
            body['Ids'] = request.ids_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='StopWorkflowInstances',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.StopWorkflowInstancesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def stop_workflow_instances(
        self,
        request: dataworks_public_20240518_models.StopWorkflowInstancesRequest,
    ) -> dataworks_public_20240518_models.StopWorkflowInstancesResponse:
        """
        @summary Stops multiple workflow instances at a time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: StopWorkflowInstancesRequest
        @return: StopWorkflowInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.stop_workflow_instances_with_options(request, runtime)

    async def stop_workflow_instances_async(
        self,
        request: dataworks_public_20240518_models.StopWorkflowInstancesRequest,
    ) -> dataworks_public_20240518_models.StopWorkflowInstancesResponse:
        """
        @summary Stops multiple workflow instances at a time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: StopWorkflowInstancesRequest
        @return: StopWorkflowInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.stop_workflow_instances_with_options_async(request, runtime)

    def submit_file_with_options(
        self,
        request: dataworks_public_20240518_models.SubmitFileRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.SubmitFileResponse:
        """
        @param request: SubmitFileRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SubmitFileResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.comment):
            body['Comment'] = request.comment
        if not UtilClient.is_unset(request.file_id):
            body['FileId'] = request.file_id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        if not UtilClient.is_unset(request.skip_all_deploy_file_extensions):
            body['SkipAllDeployFileExtensions'] = request.skip_all_deploy_file_extensions
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SubmitFile',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.SubmitFileResponse(),
            self.call_api(params, req, runtime)
        )

    async def submit_file_with_options_async(
        self,
        request: dataworks_public_20240518_models.SubmitFileRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.SubmitFileResponse:
        """
        @param request: SubmitFileRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SubmitFileResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.comment):
            body['Comment'] = request.comment
        if not UtilClient.is_unset(request.file_id):
            body['FileId'] = request.file_id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        if not UtilClient.is_unset(request.skip_all_deploy_file_extensions):
            body['SkipAllDeployFileExtensions'] = request.skip_all_deploy_file_extensions
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SubmitFile',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.SubmitFileResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def submit_file(
        self,
        request: dataworks_public_20240518_models.SubmitFileRequest,
    ) -> dataworks_public_20240518_models.SubmitFileResponse:
        """
        @param request: SubmitFileRequest
        @return: SubmitFileResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.submit_file_with_options(request, runtime)

    async def submit_file_async(
        self,
        request: dataworks_public_20240518_models.SubmitFileRequest,
    ) -> dataworks_public_20240518_models.SubmitFileResponse:
        """
        @param request: SubmitFileRequest
        @return: SubmitFileResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.submit_file_with_options_async(request, runtime)

    def suspend_task_instances_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.SuspendTaskInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.SuspendTaskInstancesResponse:
        """
        @summary Suspends multiple instances at a time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: SuspendTaskInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SuspendTaskInstancesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.SuspendTaskInstancesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.ids):
            request.ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ids, 'Ids', 'json')
        body = {}
        if not UtilClient.is_unset(request.comment):
            body['Comment'] = request.comment
        if not UtilClient.is_unset(request.ids_shrink):
            body['Ids'] = request.ids_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SuspendTaskInstances',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.SuspendTaskInstancesResponse(),
            self.call_api(params, req, runtime)
        )

    async def suspend_task_instances_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.SuspendTaskInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.SuspendTaskInstancesResponse:
        """
        @summary Suspends multiple instances at a time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: SuspendTaskInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: SuspendTaskInstancesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.SuspendTaskInstancesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.ids):
            request.ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.ids, 'Ids', 'json')
        body = {}
        if not UtilClient.is_unset(request.comment):
            body['Comment'] = request.comment
        if not UtilClient.is_unset(request.ids_shrink):
            body['Ids'] = request.ids_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='SuspendTaskInstances',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.SuspendTaskInstancesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def suspend_task_instances(
        self,
        request: dataworks_public_20240518_models.SuspendTaskInstancesRequest,
    ) -> dataworks_public_20240518_models.SuspendTaskInstancesResponse:
        """
        @summary Suspends multiple instances at a time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: SuspendTaskInstancesRequest
        @return: SuspendTaskInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.suspend_task_instances_with_options(request, runtime)

    async def suspend_task_instances_async(
        self,
        request: dataworks_public_20240518_models.SuspendTaskInstancesRequest,
    ) -> dataworks_public_20240518_models.SuspendTaskInstancesResponse:
        """
        @summary Suspends multiple instances at a time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: SuspendTaskInstancesRequest
        @return: SuspendTaskInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.suspend_task_instances_with_options_async(request, runtime)

    def tag_data_assets_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.TagDataAssetsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.TagDataAssetsResponse:
        """
        @summary Adds tags to data assets.
        
        @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
        
        @param tmp_req: TagDataAssetsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: TagDataAssetsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.TagDataAssetsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.data_asset_ids):
            request.data_asset_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.data_asset_ids, 'DataAssetIds', 'json')
        if not UtilClient.is_unset(tmp_req.tags):
            request.tags_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tags, 'Tags', 'json')
        query = {}
        if not UtilClient.is_unset(request.auto_trace_enabled):
            query['AutoTraceEnabled'] = request.auto_trace_enabled
        if not UtilClient.is_unset(request.data_asset_ids_shrink):
            query['DataAssetIds'] = request.data_asset_ids_shrink
        if not UtilClient.is_unset(request.data_asset_type):
            query['DataAssetType'] = request.data_asset_type
        if not UtilClient.is_unset(request.env_type):
            query['EnvType'] = request.env_type
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.tags_shrink):
            query['Tags'] = request.tags_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='TagDataAssets',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.TagDataAssetsResponse(),
            self.call_api(params, req, runtime)
        )

    async def tag_data_assets_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.TagDataAssetsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.TagDataAssetsResponse:
        """
        @summary Adds tags to data assets.
        
        @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
        
        @param tmp_req: TagDataAssetsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: TagDataAssetsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.TagDataAssetsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.data_asset_ids):
            request.data_asset_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.data_asset_ids, 'DataAssetIds', 'json')
        if not UtilClient.is_unset(tmp_req.tags):
            request.tags_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tags, 'Tags', 'json')
        query = {}
        if not UtilClient.is_unset(request.auto_trace_enabled):
            query['AutoTraceEnabled'] = request.auto_trace_enabled
        if not UtilClient.is_unset(request.data_asset_ids_shrink):
            query['DataAssetIds'] = request.data_asset_ids_shrink
        if not UtilClient.is_unset(request.data_asset_type):
            query['DataAssetType'] = request.data_asset_type
        if not UtilClient.is_unset(request.env_type):
            query['EnvType'] = request.env_type
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.tags_shrink):
            query['Tags'] = request.tags_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='TagDataAssets',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.TagDataAssetsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def tag_data_assets(
        self,
        request: dataworks_public_20240518_models.TagDataAssetsRequest,
    ) -> dataworks_public_20240518_models.TagDataAssetsResponse:
        """
        @summary Adds tags to data assets.
        
        @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
        
        @param request: TagDataAssetsRequest
        @return: TagDataAssetsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.tag_data_assets_with_options(request, runtime)

    async def tag_data_assets_async(
        self,
        request: dataworks_public_20240518_models.TagDataAssetsRequest,
    ) -> dataworks_public_20240518_models.TagDataAssetsResponse:
        """
        @summary Adds tags to data assets.
        
        @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
        
        @param request: TagDataAssetsRequest
        @return: TagDataAssetsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.tag_data_assets_with_options_async(request, runtime)

    def test_data_source_connectivity_with_options(
        self,
        request: dataworks_public_20240518_models.TestDataSourceConnectivityRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.TestDataSourceConnectivityResponse:
        """
        @summary Tests the connectivity between a data source and a resource group.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  Your account must be assigned one of the following roles of the desired workspace: Tenant Owner, Workspace Administrator, Deploy, Develop, Workspace Owner, and O\\&M
        
        @param request: TestDataSourceConnectivityRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: TestDataSourceConnectivityResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.data_source_id):
            query['DataSourceId'] = request.data_source_id
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.resource_group_id):
            query['ResourceGroupId'] = request.resource_group_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='TestDataSourceConnectivity',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.TestDataSourceConnectivityResponse(),
            self.call_api(params, req, runtime)
        )

    async def test_data_source_connectivity_with_options_async(
        self,
        request: dataworks_public_20240518_models.TestDataSourceConnectivityRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.TestDataSourceConnectivityResponse:
        """
        @summary Tests the connectivity between a data source and a resource group.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  Your account must be assigned one of the following roles of the desired workspace: Tenant Owner, Workspace Administrator, Deploy, Develop, Workspace Owner, and O\\&M
        
        @param request: TestDataSourceConnectivityRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: TestDataSourceConnectivityResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.data_source_id):
            query['DataSourceId'] = request.data_source_id
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.resource_group_id):
            query['ResourceGroupId'] = request.resource_group_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='TestDataSourceConnectivity',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.TestDataSourceConnectivityResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def test_data_source_connectivity(
        self,
        request: dataworks_public_20240518_models.TestDataSourceConnectivityRequest,
    ) -> dataworks_public_20240518_models.TestDataSourceConnectivityResponse:
        """
        @summary Tests the connectivity between a data source and a resource group.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  Your account must be assigned one of the following roles of the desired workspace: Tenant Owner, Workspace Administrator, Deploy, Develop, Workspace Owner, and O\\&M
        
        @param request: TestDataSourceConnectivityRequest
        @return: TestDataSourceConnectivityResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.test_data_source_connectivity_with_options(request, runtime)

    async def test_data_source_connectivity_async(
        self,
        request: dataworks_public_20240518_models.TestDataSourceConnectivityRequest,
    ) -> dataworks_public_20240518_models.TestDataSourceConnectivityResponse:
        """
        @summary Tests the connectivity between a data source and a resource group.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  Your account must be assigned one of the following roles of the desired workspace: Tenant Owner, Workspace Administrator, Deploy, Develop, Workspace Owner, and O\\&M
        
        @param request: TestDataSourceConnectivityRequest
        @return: TestDataSourceConnectivityResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.test_data_source_connectivity_with_options_async(request, runtime)

    def trigger_scheduler_task_instance_with_options(
        self,
        request: dataworks_public_20240518_models.TriggerSchedulerTaskInstanceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.TriggerSchedulerTaskInstanceResponse:
        """
        @summary Triggers a task to run by using an HTTP Trigger node at a specified time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: TriggerSchedulerTaskInstanceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: TriggerSchedulerTaskInstanceResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.env_type):
            query['EnvType'] = request.env_type
        body = {}
        if not UtilClient.is_unset(request.task_id):
            body['TaskId'] = request.task_id
        if not UtilClient.is_unset(request.trigger_time):
            body['TriggerTime'] = request.trigger_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='TriggerSchedulerTaskInstance',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.TriggerSchedulerTaskInstanceResponse(),
            self.call_api(params, req, runtime)
        )

    async def trigger_scheduler_task_instance_with_options_async(
        self,
        request: dataworks_public_20240518_models.TriggerSchedulerTaskInstanceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.TriggerSchedulerTaskInstanceResponse:
        """
        @summary Triggers a task to run by using an HTTP Trigger node at a specified time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: TriggerSchedulerTaskInstanceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: TriggerSchedulerTaskInstanceResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.env_type):
            query['EnvType'] = request.env_type
        body = {}
        if not UtilClient.is_unset(request.task_id):
            body['TaskId'] = request.task_id
        if not UtilClient.is_unset(request.trigger_time):
            body['TriggerTime'] = request.trigger_time
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='TriggerSchedulerTaskInstance',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.TriggerSchedulerTaskInstanceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def trigger_scheduler_task_instance(
        self,
        request: dataworks_public_20240518_models.TriggerSchedulerTaskInstanceRequest,
    ) -> dataworks_public_20240518_models.TriggerSchedulerTaskInstanceResponse:
        """
        @summary Triggers a task to run by using an HTTP Trigger node at a specified time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: TriggerSchedulerTaskInstanceRequest
        @return: TriggerSchedulerTaskInstanceResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.trigger_scheduler_task_instance_with_options(request, runtime)

    async def trigger_scheduler_task_instance_async(
        self,
        request: dataworks_public_20240518_models.TriggerSchedulerTaskInstanceRequest,
    ) -> dataworks_public_20240518_models.TriggerSchedulerTaskInstanceResponse:
        """
        @summary Triggers a task to run by using an HTTP Trigger node at a specified time.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: TriggerSchedulerTaskInstanceRequest
        @return: TriggerSchedulerTaskInstanceResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.trigger_scheduler_task_instance_with_options_async(request, runtime)

    def un_tag_data_assets_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.UnTagDataAssetsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UnTagDataAssetsResponse:
        """
        @summary Removes tags from data assets.
        
        @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
        
        @param tmp_req: UnTagDataAssetsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UnTagDataAssetsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.UnTagDataAssetsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.data_asset_ids):
            request.data_asset_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.data_asset_ids, 'DataAssetIds', 'json')
        if not UtilClient.is_unset(tmp_req.tags):
            request.tags_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tags, 'Tags', 'json')
        query = {}
        if not UtilClient.is_unset(request.data_asset_ids_shrink):
            query['DataAssetIds'] = request.data_asset_ids_shrink
        if not UtilClient.is_unset(request.data_asset_type):
            query['DataAssetType'] = request.data_asset_type
        if not UtilClient.is_unset(request.env_type):
            query['EnvType'] = request.env_type
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.tags_shrink):
            query['Tags'] = request.tags_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UnTagDataAssets',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UnTagDataAssetsResponse(),
            self.call_api(params, req, runtime)
        )

    async def un_tag_data_assets_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.UnTagDataAssetsRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UnTagDataAssetsResponse:
        """
        @summary Removes tags from data assets.
        
        @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
        
        @param tmp_req: UnTagDataAssetsRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UnTagDataAssetsResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.UnTagDataAssetsShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.data_asset_ids):
            request.data_asset_ids_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.data_asset_ids, 'DataAssetIds', 'json')
        if not UtilClient.is_unset(tmp_req.tags):
            request.tags_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tags, 'Tags', 'json')
        query = {}
        if not UtilClient.is_unset(request.data_asset_ids_shrink):
            query['DataAssetIds'] = request.data_asset_ids_shrink
        if not UtilClient.is_unset(request.data_asset_type):
            query['DataAssetType'] = request.data_asset_type
        if not UtilClient.is_unset(request.env_type):
            query['EnvType'] = request.env_type
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.tags_shrink):
            query['Tags'] = request.tags_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UnTagDataAssets',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UnTagDataAssetsResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def un_tag_data_assets(
        self,
        request: dataworks_public_20240518_models.UnTagDataAssetsRequest,
    ) -> dataworks_public_20240518_models.UnTagDataAssetsResponse:
        """
        @summary Removes tags from data assets.
        
        @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
        
        @param request: UnTagDataAssetsRequest
        @return: UnTagDataAssetsResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.un_tag_data_assets_with_options(request, runtime)

    async def un_tag_data_assets_async(
        self,
        request: dataworks_public_20240518_models.UnTagDataAssetsRequest,
    ) -> dataworks_public_20240518_models.UnTagDataAssetsResponse:
        """
        @summary Removes tags from data assets.
        
        @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
        
        @param request: UnTagDataAssetsRequest
        @return: UnTagDataAssetsResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.un_tag_data_assets_with_options_async(request, runtime)

    def update_alert_rule_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.UpdateAlertRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateAlertRuleResponse:
        """
        @summary Updates the information about a custom alert monitoring rule.
        
        @param tmp_req: UpdateAlertRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateAlertRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.UpdateAlertRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.notification):
            request.notification_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.notification, 'Notification', 'json')
        if not UtilClient.is_unset(tmp_req.trigger_condition):
            request.trigger_condition_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.trigger_condition, 'TriggerCondition', 'json')
        query = {}
        if not UtilClient.is_unset(request.enabled):
            query['Enabled'] = request.enabled
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.notification_shrink):
            query['Notification'] = request.notification_shrink
        if not UtilClient.is_unset(request.owner):
            query['Owner'] = request.owner
        if not UtilClient.is_unset(request.trigger_condition_shrink):
            query['TriggerCondition'] = request.trigger_condition_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateAlertRule',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateAlertRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_alert_rule_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.UpdateAlertRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateAlertRuleResponse:
        """
        @summary Updates the information about a custom alert monitoring rule.
        
        @param tmp_req: UpdateAlertRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateAlertRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.UpdateAlertRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.notification):
            request.notification_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.notification, 'Notification', 'json')
        if not UtilClient.is_unset(tmp_req.trigger_condition):
            request.trigger_condition_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.trigger_condition, 'TriggerCondition', 'json')
        query = {}
        if not UtilClient.is_unset(request.enabled):
            query['Enabled'] = request.enabled
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        if not UtilClient.is_unset(request.notification_shrink):
            query['Notification'] = request.notification_shrink
        if not UtilClient.is_unset(request.owner):
            query['Owner'] = request.owner
        if not UtilClient.is_unset(request.trigger_condition_shrink):
            query['TriggerCondition'] = request.trigger_condition_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateAlertRule',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateAlertRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_alert_rule(
        self,
        request: dataworks_public_20240518_models.UpdateAlertRuleRequest,
    ) -> dataworks_public_20240518_models.UpdateAlertRuleResponse:
        """
        @summary Updates the information about a custom alert monitoring rule.
        
        @param request: UpdateAlertRuleRequest
        @return: UpdateAlertRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_alert_rule_with_options(request, runtime)

    async def update_alert_rule_async(
        self,
        request: dataworks_public_20240518_models.UpdateAlertRuleRequest,
    ) -> dataworks_public_20240518_models.UpdateAlertRuleResponse:
        """
        @summary Updates the information about a custom alert monitoring rule.
        
        @param request: UpdateAlertRuleRequest
        @return: UpdateAlertRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_alert_rule_with_options_async(request, runtime)

    def update_business_with_options(
        self,
        request: dataworks_public_20240518_models.UpdateBusinessRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateBusinessResponse:
        """
        @summary Updates a workflow.
        
        @param request: UpdateBusinessRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateBusinessResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.business_id):
            body['BusinessId'] = request.business_id
        if not UtilClient.is_unset(request.business_name):
            body['BusinessName'] = request.business_name
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.owner):
            body['Owner'] = request.owner
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateBusiness',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateBusinessResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_business_with_options_async(
        self,
        request: dataworks_public_20240518_models.UpdateBusinessRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateBusinessResponse:
        """
        @summary Updates a workflow.
        
        @param request: UpdateBusinessRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateBusinessResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.business_id):
            body['BusinessId'] = request.business_id
        if not UtilClient.is_unset(request.business_name):
            body['BusinessName'] = request.business_name
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.owner):
            body['Owner'] = request.owner
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateBusiness',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateBusinessResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_business(
        self,
        request: dataworks_public_20240518_models.UpdateBusinessRequest,
    ) -> dataworks_public_20240518_models.UpdateBusinessResponse:
        """
        @summary Updates a workflow.
        
        @param request: UpdateBusinessRequest
        @return: UpdateBusinessResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_business_with_options(request, runtime)

    async def update_business_async(
        self,
        request: dataworks_public_20240518_models.UpdateBusinessRequest,
    ) -> dataworks_public_20240518_models.UpdateBusinessResponse:
        """
        @summary Updates a workflow.
        
        @param request: UpdateBusinessRequest
        @return: UpdateBusinessResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_business_with_options_async(request, runtime)

    def update_column_business_metadata_with_options(
        self,
        request: dataworks_public_20240518_models.UpdateColumnBusinessMetadataRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateColumnBusinessMetadataResponse:
        """
        @summary 更新字段业务元数据
        
        @param request: UpdateColumnBusinessMetadataRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateColumnBusinessMetadataResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateColumnBusinessMetadata',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateColumnBusinessMetadataResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_column_business_metadata_with_options_async(
        self,
        request: dataworks_public_20240518_models.UpdateColumnBusinessMetadataRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateColumnBusinessMetadataResponse:
        """
        @summary 更新字段业务元数据
        
        @param request: UpdateColumnBusinessMetadataRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateColumnBusinessMetadataResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateColumnBusinessMetadata',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateColumnBusinessMetadataResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_column_business_metadata(
        self,
        request: dataworks_public_20240518_models.UpdateColumnBusinessMetadataRequest,
    ) -> dataworks_public_20240518_models.UpdateColumnBusinessMetadataResponse:
        """
        @summary 更新字段业务元数据
        
        @param request: UpdateColumnBusinessMetadataRequest
        @return: UpdateColumnBusinessMetadataResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_column_business_metadata_with_options(request, runtime)

    async def update_column_business_metadata_async(
        self,
        request: dataworks_public_20240518_models.UpdateColumnBusinessMetadataRequest,
    ) -> dataworks_public_20240518_models.UpdateColumnBusinessMetadataResponse:
        """
        @summary 更新字段业务元数据
        
        @param request: UpdateColumnBusinessMetadataRequest
        @return: UpdateColumnBusinessMetadataResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_column_business_metadata_with_options_async(request, runtime)

    def update_dialarm_rule_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.UpdateDIAlarmRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateDIAlarmRuleResponse:
        """
        @summary Updates an alert rule configured for a synchronization task.
        
        @param tmp_req: UpdateDIAlarmRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateDIAlarmRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.UpdateDIAlarmRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.notification_settings):
            request.notification_settings_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.notification_settings, 'NotificationSettings', 'json')
        if not UtilClient.is_unset(tmp_req.trigger_conditions):
            request.trigger_conditions_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.trigger_conditions, 'TriggerConditions', 'json')
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateDIAlarmRule',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateDIAlarmRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_dialarm_rule_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.UpdateDIAlarmRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateDIAlarmRuleResponse:
        """
        @summary Updates an alert rule configured for a synchronization task.
        
        @param tmp_req: UpdateDIAlarmRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateDIAlarmRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.UpdateDIAlarmRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.notification_settings):
            request.notification_settings_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.notification_settings, 'NotificationSettings', 'json')
        if not UtilClient.is_unset(tmp_req.trigger_conditions):
            request.trigger_conditions_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.trigger_conditions, 'TriggerConditions', 'json')
        query = OpenApiUtilClient.query(UtilClient.to_map(request))
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateDIAlarmRule',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateDIAlarmRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_dialarm_rule(
        self,
        request: dataworks_public_20240518_models.UpdateDIAlarmRuleRequest,
    ) -> dataworks_public_20240518_models.UpdateDIAlarmRuleResponse:
        """
        @summary Updates an alert rule configured for a synchronization task.
        
        @param request: UpdateDIAlarmRuleRequest
        @return: UpdateDIAlarmRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_dialarm_rule_with_options(request, runtime)

    async def update_dialarm_rule_async(
        self,
        request: dataworks_public_20240518_models.UpdateDIAlarmRuleRequest,
    ) -> dataworks_public_20240518_models.UpdateDIAlarmRuleResponse:
        """
        @summary Updates an alert rule configured for a synchronization task.
        
        @param request: UpdateDIAlarmRuleRequest
        @return: UpdateDIAlarmRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_dialarm_rule_with_options_async(request, runtime)

    def update_dijob_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.UpdateDIJobRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateDIJobResponse:
        """
        @summary Updates a synchronization task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: UpdateDIJobRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateDIJobResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.UpdateDIJobShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.job_settings):
            request.job_settings_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.job_settings, 'JobSettings', 'json')
        if not UtilClient.is_unset(tmp_req.resource_settings):
            request.resource_settings_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.resource_settings, 'ResourceSettings', 'json')
        if not UtilClient.is_unset(tmp_req.table_mappings):
            request.table_mappings_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.table_mappings, 'TableMappings', 'json')
        if not UtilClient.is_unset(tmp_req.transformation_rules):
            request.transformation_rules_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.transformation_rules, 'TransformationRules', 'json')
        query = {}
        if not UtilClient.is_unset(request.dijob_id):
            query['DIJobId'] = request.dijob_id
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        body = {}
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.job_settings_shrink):
            body['JobSettings'] = request.job_settings_shrink
        if not UtilClient.is_unset(request.resource_settings_shrink):
            body['ResourceSettings'] = request.resource_settings_shrink
        if not UtilClient.is_unset(request.table_mappings_shrink):
            body['TableMappings'] = request.table_mappings_shrink
        if not UtilClient.is_unset(request.transformation_rules_shrink):
            body['TransformationRules'] = request.transformation_rules_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateDIJob',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateDIJobResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_dijob_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.UpdateDIJobRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateDIJobResponse:
        """
        @summary Updates a synchronization task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: UpdateDIJobRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateDIJobResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.UpdateDIJobShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.job_settings):
            request.job_settings_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.job_settings, 'JobSettings', 'json')
        if not UtilClient.is_unset(tmp_req.resource_settings):
            request.resource_settings_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.resource_settings, 'ResourceSettings', 'json')
        if not UtilClient.is_unset(tmp_req.table_mappings):
            request.table_mappings_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.table_mappings, 'TableMappings', 'json')
        if not UtilClient.is_unset(tmp_req.transformation_rules):
            request.transformation_rules_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.transformation_rules, 'TransformationRules', 'json')
        query = {}
        if not UtilClient.is_unset(request.dijob_id):
            query['DIJobId'] = request.dijob_id
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        body = {}
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.job_settings_shrink):
            body['JobSettings'] = request.job_settings_shrink
        if not UtilClient.is_unset(request.resource_settings_shrink):
            body['ResourceSettings'] = request.resource_settings_shrink
        if not UtilClient.is_unset(request.table_mappings_shrink):
            body['TableMappings'] = request.table_mappings_shrink
        if not UtilClient.is_unset(request.transformation_rules_shrink):
            body['TransformationRules'] = request.transformation_rules_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateDIJob',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateDIJobResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_dijob(
        self,
        request: dataworks_public_20240518_models.UpdateDIJobRequest,
    ) -> dataworks_public_20240518_models.UpdateDIJobResponse:
        """
        @summary Updates a synchronization task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: UpdateDIJobRequest
        @return: UpdateDIJobResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_dijob_with_options(request, runtime)

    async def update_dijob_async(
        self,
        request: dataworks_public_20240518_models.UpdateDIJobRequest,
    ) -> dataworks_public_20240518_models.UpdateDIJobResponse:
        """
        @summary Updates a synchronization task.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: UpdateDIJobRequest
        @return: UpdateDIJobResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_dijob_with_options_async(request, runtime)

    def update_data_asset_tag_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.UpdateDataAssetTagRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateDataAssetTagResponse:
        """
        @summary Updates a tag.
        
        @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
        
        @param tmp_req: UpdateDataAssetTagRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateDataAssetTagResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.UpdateDataAssetTagShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.managers):
            request.managers_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.managers, 'Managers', 'json')
        if not UtilClient.is_unset(tmp_req.values):
            request.values_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.values, 'Values', 'json')
        query = {}
        if not UtilClient.is_unset(request.description):
            query['Description'] = request.description
        if not UtilClient.is_unset(request.key):
            query['Key'] = request.key
        if not UtilClient.is_unset(request.managers_shrink):
            query['Managers'] = request.managers_shrink
        if not UtilClient.is_unset(request.values_shrink):
            query['Values'] = request.values_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateDataAssetTag',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateDataAssetTagResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_data_asset_tag_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.UpdateDataAssetTagRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateDataAssetTagResponse:
        """
        @summary Updates a tag.
        
        @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
        
        @param tmp_req: UpdateDataAssetTagRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateDataAssetTagResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.UpdateDataAssetTagShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.managers):
            request.managers_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.managers, 'Managers', 'json')
        if not UtilClient.is_unset(tmp_req.values):
            request.values_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.values, 'Values', 'json')
        query = {}
        if not UtilClient.is_unset(request.description):
            query['Description'] = request.description
        if not UtilClient.is_unset(request.key):
            query['Key'] = request.key
        if not UtilClient.is_unset(request.managers_shrink):
            query['Managers'] = request.managers_shrink
        if not UtilClient.is_unset(request.values_shrink):
            query['Values'] = request.values_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateDataAssetTag',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateDataAssetTagResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_data_asset_tag(
        self,
        request: dataworks_public_20240518_models.UpdateDataAssetTagRequest,
    ) -> dataworks_public_20240518_models.UpdateDataAssetTagResponse:
        """
        @summary Updates a tag.
        
        @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
        
        @param request: UpdateDataAssetTagRequest
        @return: UpdateDataAssetTagResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_data_asset_tag_with_options(request, runtime)

    async def update_data_asset_tag_async(
        self,
        request: dataworks_public_20240518_models.UpdateDataAssetTagRequest,
    ) -> dataworks_public_20240518_models.UpdateDataAssetTagResponse:
        """
        @summary Updates a tag.
        
        @description This API operation is available only for DataWorks Enterprise Edition or a more advanced edition.
        
        @param request: UpdateDataAssetTagRequest
        @return: UpdateDataAssetTagResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_data_asset_tag_with_options_async(request, runtime)

    def update_data_quality_alert_rule_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.UpdateDataQualityAlertRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateDataQualityAlertRuleResponse:
        """
        @summary 更新数据质量告警规则
        
        @param tmp_req: UpdateDataQualityAlertRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateDataQualityAlertRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.UpdateDataQualityAlertRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.notification):
            request.notification_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.notification, 'Notification', 'json')
        if not UtilClient.is_unset(tmp_req.target):
            request.target_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.target, 'Target', 'json')
        body = {}
        if not UtilClient.is_unset(request.condition):
            body['Condition'] = request.condition
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.notification_shrink):
            body['Notification'] = request.notification_shrink
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.target_shrink):
            body['Target'] = request.target_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateDataQualityAlertRule',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateDataQualityAlertRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_data_quality_alert_rule_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.UpdateDataQualityAlertRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateDataQualityAlertRuleResponse:
        """
        @summary 更新数据质量告警规则
        
        @param tmp_req: UpdateDataQualityAlertRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateDataQualityAlertRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.UpdateDataQualityAlertRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.notification):
            request.notification_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.notification, 'Notification', 'json')
        if not UtilClient.is_unset(tmp_req.target):
            request.target_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.target, 'Target', 'json')
        body = {}
        if not UtilClient.is_unset(request.condition):
            body['Condition'] = request.condition
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.notification_shrink):
            body['Notification'] = request.notification_shrink
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.target_shrink):
            body['Target'] = request.target_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateDataQualityAlertRule',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateDataQualityAlertRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_data_quality_alert_rule(
        self,
        request: dataworks_public_20240518_models.UpdateDataQualityAlertRuleRequest,
    ) -> dataworks_public_20240518_models.UpdateDataQualityAlertRuleResponse:
        """
        @summary 更新数据质量告警规则
        
        @param request: UpdateDataQualityAlertRuleRequest
        @return: UpdateDataQualityAlertRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_data_quality_alert_rule_with_options(request, runtime)

    async def update_data_quality_alert_rule_async(
        self,
        request: dataworks_public_20240518_models.UpdateDataQualityAlertRuleRequest,
    ) -> dataworks_public_20240518_models.UpdateDataQualityAlertRuleResponse:
        """
        @summary 更新数据质量告警规则
        
        @param request: UpdateDataQualityAlertRuleRequest
        @return: UpdateDataQualityAlertRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_data_quality_alert_rule_with_options_async(request, runtime)

    def update_data_quality_evaluation_task_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.UpdateDataQualityEvaluationTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateDataQualityEvaluationTaskResponse:
        """
        @summary Updates a monitor.
        
        @description This API operation is supported in all DataWorks editions.
        
        @param tmp_req: UpdateDataQualityEvaluationTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateDataQualityEvaluationTaskResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.UpdateDataQualityEvaluationTaskShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.data_quality_rules):
            request.data_quality_rules_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.data_quality_rules, 'DataQualityRules', 'json')
        if not UtilClient.is_unset(tmp_req.hooks):
            request.hooks_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.hooks, 'Hooks', 'json')
        if not UtilClient.is_unset(tmp_req.notifications):
            request.notifications_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.notifications, 'Notifications', 'json')
        if not UtilClient.is_unset(tmp_req.target):
            request.target_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.target, 'Target', 'json')
        if not UtilClient.is_unset(tmp_req.trigger):
            request.trigger_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.trigger, 'Trigger', 'json')
        body = {}
        if not UtilClient.is_unset(request.data_quality_rules_shrink):
            body['DataQualityRules'] = request.data_quality_rules_shrink
        if not UtilClient.is_unset(request.data_source_id):
            body['DataSourceId'] = request.data_source_id
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.hooks_shrink):
            body['Hooks'] = request.hooks_shrink
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.notifications_shrink):
            body['Notifications'] = request.notifications_shrink
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.runtime_conf):
            body['RuntimeConf'] = request.runtime_conf
        if not UtilClient.is_unset(request.target_shrink):
            body['Target'] = request.target_shrink
        if not UtilClient.is_unset(request.trigger_shrink):
            body['Trigger'] = request.trigger_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateDataQualityEvaluationTask',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateDataQualityEvaluationTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_data_quality_evaluation_task_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.UpdateDataQualityEvaluationTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateDataQualityEvaluationTaskResponse:
        """
        @summary Updates a monitor.
        
        @description This API operation is supported in all DataWorks editions.
        
        @param tmp_req: UpdateDataQualityEvaluationTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateDataQualityEvaluationTaskResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.UpdateDataQualityEvaluationTaskShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.data_quality_rules):
            request.data_quality_rules_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.data_quality_rules, 'DataQualityRules', 'json')
        if not UtilClient.is_unset(tmp_req.hooks):
            request.hooks_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.hooks, 'Hooks', 'json')
        if not UtilClient.is_unset(tmp_req.notifications):
            request.notifications_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.notifications, 'Notifications', 'json')
        if not UtilClient.is_unset(tmp_req.target):
            request.target_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.target, 'Target', 'json')
        if not UtilClient.is_unset(tmp_req.trigger):
            request.trigger_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.trigger, 'Trigger', 'json')
        body = {}
        if not UtilClient.is_unset(request.data_quality_rules_shrink):
            body['DataQualityRules'] = request.data_quality_rules_shrink
        if not UtilClient.is_unset(request.data_source_id):
            body['DataSourceId'] = request.data_source_id
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.hooks_shrink):
            body['Hooks'] = request.hooks_shrink
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.notifications_shrink):
            body['Notifications'] = request.notifications_shrink
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.runtime_conf):
            body['RuntimeConf'] = request.runtime_conf
        if not UtilClient.is_unset(request.target_shrink):
            body['Target'] = request.target_shrink
        if not UtilClient.is_unset(request.trigger_shrink):
            body['Trigger'] = request.trigger_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateDataQualityEvaluationTask',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateDataQualityEvaluationTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_data_quality_evaluation_task(
        self,
        request: dataworks_public_20240518_models.UpdateDataQualityEvaluationTaskRequest,
    ) -> dataworks_public_20240518_models.UpdateDataQualityEvaluationTaskResponse:
        """
        @summary Updates a monitor.
        
        @description This API operation is supported in all DataWorks editions.
        
        @param request: UpdateDataQualityEvaluationTaskRequest
        @return: UpdateDataQualityEvaluationTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_data_quality_evaluation_task_with_options(request, runtime)

    async def update_data_quality_evaluation_task_async(
        self,
        request: dataworks_public_20240518_models.UpdateDataQualityEvaluationTaskRequest,
    ) -> dataworks_public_20240518_models.UpdateDataQualityEvaluationTaskResponse:
        """
        @summary Updates a monitor.
        
        @description This API operation is supported in all DataWorks editions.
        
        @param request: UpdateDataQualityEvaluationTaskRequest
        @return: UpdateDataQualityEvaluationTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_data_quality_evaluation_task_with_options_async(request, runtime)

    def update_data_quality_rule_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.UpdateDataQualityRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateDataQualityRuleResponse:
        """
        @summary Updates a data quality monitoring rule.
        
        @param tmp_req: UpdateDataQualityRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateDataQualityRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.UpdateDataQualityRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.checking_config):
            request.checking_config_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.checking_config, 'CheckingConfig', 'json')
        if not UtilClient.is_unset(tmp_req.error_handlers):
            request.error_handlers_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.error_handlers, 'ErrorHandlers', 'json')
        if not UtilClient.is_unset(tmp_req.sampling_config):
            request.sampling_config_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.sampling_config, 'SamplingConfig', 'json')
        query = {}
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        body = {}
        if not UtilClient.is_unset(request.checking_config_shrink):
            body['CheckingConfig'] = request.checking_config_shrink
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.enabled):
            body['Enabled'] = request.enabled
        if not UtilClient.is_unset(request.error_handlers_shrink):
            body['ErrorHandlers'] = request.error_handlers_shrink
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.sampling_config_shrink):
            body['SamplingConfig'] = request.sampling_config_shrink
        if not UtilClient.is_unset(request.severity):
            body['Severity'] = request.severity
        if not UtilClient.is_unset(request.template_code):
            body['TemplateCode'] = request.template_code
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateDataQualityRule',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateDataQualityRuleResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_data_quality_rule_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.UpdateDataQualityRuleRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateDataQualityRuleResponse:
        """
        @summary Updates a data quality monitoring rule.
        
        @param tmp_req: UpdateDataQualityRuleRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateDataQualityRuleResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.UpdateDataQualityRuleShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.checking_config):
            request.checking_config_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.checking_config, 'CheckingConfig', 'json')
        if not UtilClient.is_unset(tmp_req.error_handlers):
            request.error_handlers_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.error_handlers, 'ErrorHandlers', 'json')
        if not UtilClient.is_unset(tmp_req.sampling_config):
            request.sampling_config_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.sampling_config, 'SamplingConfig', 'json')
        query = {}
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        body = {}
        if not UtilClient.is_unset(request.checking_config_shrink):
            body['CheckingConfig'] = request.checking_config_shrink
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.enabled):
            body['Enabled'] = request.enabled
        if not UtilClient.is_unset(request.error_handlers_shrink):
            body['ErrorHandlers'] = request.error_handlers_shrink
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.sampling_config_shrink):
            body['SamplingConfig'] = request.sampling_config_shrink
        if not UtilClient.is_unset(request.severity):
            body['Severity'] = request.severity
        if not UtilClient.is_unset(request.template_code):
            body['TemplateCode'] = request.template_code
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateDataQualityRule',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateDataQualityRuleResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_data_quality_rule(
        self,
        request: dataworks_public_20240518_models.UpdateDataQualityRuleRequest,
    ) -> dataworks_public_20240518_models.UpdateDataQualityRuleResponse:
        """
        @summary Updates a data quality monitoring rule.
        
        @param request: UpdateDataQualityRuleRequest
        @return: UpdateDataQualityRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_data_quality_rule_with_options(request, runtime)

    async def update_data_quality_rule_async(
        self,
        request: dataworks_public_20240518_models.UpdateDataQualityRuleRequest,
    ) -> dataworks_public_20240518_models.UpdateDataQualityRuleResponse:
        """
        @summary Updates a data quality monitoring rule.
        
        @param request: UpdateDataQualityRuleRequest
        @return: UpdateDataQualityRuleResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_data_quality_rule_with_options_async(request, runtime)

    def update_data_quality_rule_template_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.UpdateDataQualityRuleTemplateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateDataQualityRuleTemplateResponse:
        """
        @summary Updates a data quality monitoring rule template.
        
        @param tmp_req: UpdateDataQualityRuleTemplateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateDataQualityRuleTemplateResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.UpdateDataQualityRuleTemplateShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.checking_config):
            request.checking_config_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.checking_config, 'CheckingConfig', 'json')
        if not UtilClient.is_unset(tmp_req.sampling_config):
            request.sampling_config_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.sampling_config, 'SamplingConfig', 'json')
        query = {}
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        body = {}
        if not UtilClient.is_unset(request.checking_config_shrink):
            body['CheckingConfig'] = request.checking_config_shrink
        if not UtilClient.is_unset(request.code):
            body['Code'] = request.code
        if not UtilClient.is_unset(request.directory_path):
            body['DirectoryPath'] = request.directory_path
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.sampling_config_shrink):
            body['SamplingConfig'] = request.sampling_config_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateDataQualityRuleTemplate',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateDataQualityRuleTemplateResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_data_quality_rule_template_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.UpdateDataQualityRuleTemplateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateDataQualityRuleTemplateResponse:
        """
        @summary Updates a data quality monitoring rule template.
        
        @param tmp_req: UpdateDataQualityRuleTemplateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateDataQualityRuleTemplateResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.UpdateDataQualityRuleTemplateShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.checking_config):
            request.checking_config_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.checking_config, 'CheckingConfig', 'json')
        if not UtilClient.is_unset(tmp_req.sampling_config):
            request.sampling_config_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.sampling_config, 'SamplingConfig', 'json')
        query = {}
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        body = {}
        if not UtilClient.is_unset(request.checking_config_shrink):
            body['CheckingConfig'] = request.checking_config_shrink
        if not UtilClient.is_unset(request.code):
            body['Code'] = request.code
        if not UtilClient.is_unset(request.directory_path):
            body['DirectoryPath'] = request.directory_path
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.sampling_config_shrink):
            body['SamplingConfig'] = request.sampling_config_shrink
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateDataQualityRuleTemplate',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateDataQualityRuleTemplateResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_data_quality_rule_template(
        self,
        request: dataworks_public_20240518_models.UpdateDataQualityRuleTemplateRequest,
    ) -> dataworks_public_20240518_models.UpdateDataQualityRuleTemplateResponse:
        """
        @summary Updates a data quality monitoring rule template.
        
        @param request: UpdateDataQualityRuleTemplateRequest
        @return: UpdateDataQualityRuleTemplateResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_data_quality_rule_template_with_options(request, runtime)

    async def update_data_quality_rule_template_async(
        self,
        request: dataworks_public_20240518_models.UpdateDataQualityRuleTemplateRequest,
    ) -> dataworks_public_20240518_models.UpdateDataQualityRuleTemplateResponse:
        """
        @summary Updates a data quality monitoring rule template.
        
        @param request: UpdateDataQualityRuleTemplateRequest
        @return: UpdateDataQualityRuleTemplateResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_data_quality_rule_template_with_options_async(request, runtime)

    def update_data_quality_scan_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.UpdateDataQualityScanRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateDataQualityScanResponse:
        """
        @summary 更新数据质量监控
        
        @param tmp_req: UpdateDataQualityScanRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateDataQualityScanResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.UpdateDataQualityScanShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.compute_resource):
            request.compute_resource_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.compute_resource, 'ComputeResource', 'json')
        if not UtilClient.is_unset(tmp_req.hooks):
            request.hooks_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.hooks, 'Hooks', 'json')
        if not UtilClient.is_unset(tmp_req.parameters):
            request.parameters_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.parameters, 'Parameters', 'json')
        if not UtilClient.is_unset(tmp_req.runtime_resource):
            request.runtime_resource_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.runtime_resource, 'RuntimeResource', 'json')
        if not UtilClient.is_unset(tmp_req.trigger):
            request.trigger_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.trigger, 'Trigger', 'json')
        body = {}
        if not UtilClient.is_unset(request.compute_resource_shrink):
            body['ComputeResource'] = request.compute_resource_shrink
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.hooks_shrink):
            body['Hooks'] = request.hooks_shrink
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.owner):
            body['Owner'] = request.owner
        if not UtilClient.is_unset(request.parameters_shrink):
            body['Parameters'] = request.parameters_shrink
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.runtime_resource_shrink):
            body['RuntimeResource'] = request.runtime_resource_shrink
        if not UtilClient.is_unset(request.spec):
            body['Spec'] = request.spec
        if not UtilClient.is_unset(request.trigger_shrink):
            body['Trigger'] = request.trigger_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateDataQualityScan',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateDataQualityScanResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_data_quality_scan_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.UpdateDataQualityScanRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateDataQualityScanResponse:
        """
        @summary 更新数据质量监控
        
        @param tmp_req: UpdateDataQualityScanRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateDataQualityScanResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.UpdateDataQualityScanShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.compute_resource):
            request.compute_resource_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.compute_resource, 'ComputeResource', 'json')
        if not UtilClient.is_unset(tmp_req.hooks):
            request.hooks_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.hooks, 'Hooks', 'json')
        if not UtilClient.is_unset(tmp_req.parameters):
            request.parameters_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.parameters, 'Parameters', 'json')
        if not UtilClient.is_unset(tmp_req.runtime_resource):
            request.runtime_resource_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.runtime_resource, 'RuntimeResource', 'json')
        if not UtilClient.is_unset(tmp_req.trigger):
            request.trigger_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.trigger, 'Trigger', 'json')
        body = {}
        if not UtilClient.is_unset(request.compute_resource_shrink):
            body['ComputeResource'] = request.compute_resource_shrink
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.hooks_shrink):
            body['Hooks'] = request.hooks_shrink
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.owner):
            body['Owner'] = request.owner
        if not UtilClient.is_unset(request.parameters_shrink):
            body['Parameters'] = request.parameters_shrink
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.runtime_resource_shrink):
            body['RuntimeResource'] = request.runtime_resource_shrink
        if not UtilClient.is_unset(request.spec):
            body['Spec'] = request.spec
        if not UtilClient.is_unset(request.trigger_shrink):
            body['Trigger'] = request.trigger_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateDataQualityScan',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateDataQualityScanResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_data_quality_scan(
        self,
        request: dataworks_public_20240518_models.UpdateDataQualityScanRequest,
    ) -> dataworks_public_20240518_models.UpdateDataQualityScanResponse:
        """
        @summary 更新数据质量监控
        
        @param request: UpdateDataQualityScanRequest
        @return: UpdateDataQualityScanResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_data_quality_scan_with_options(request, runtime)

    async def update_data_quality_scan_async(
        self,
        request: dataworks_public_20240518_models.UpdateDataQualityScanRequest,
    ) -> dataworks_public_20240518_models.UpdateDataQualityScanResponse:
        """
        @summary 更新数据质量监控
        
        @param request: UpdateDataQualityScanRequest
        @return: UpdateDataQualityScanResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_data_quality_scan_with_options_async(request, runtime)

    def update_data_quality_template_with_options(
        self,
        request: dataworks_public_20240518_models.UpdateDataQualityTemplateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateDataQualityTemplateResponse:
        """
        @summary 更新数据质量模板
        
        @param request: UpdateDataQualityTemplateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateDataQualityTemplateResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.owner):
            query['Owner'] = request.owner
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.spec):
            body['Spec'] = request.spec
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateDataQualityTemplate',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateDataQualityTemplateResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_data_quality_template_with_options_async(
        self,
        request: dataworks_public_20240518_models.UpdateDataQualityTemplateRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateDataQualityTemplateResponse:
        """
        @summary 更新数据质量模板
        
        @param request: UpdateDataQualityTemplateRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateDataQualityTemplateResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.owner):
            query['Owner'] = request.owner
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.spec):
            body['Spec'] = request.spec
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query),
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateDataQualityTemplate',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateDataQualityTemplateResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_data_quality_template(
        self,
        request: dataworks_public_20240518_models.UpdateDataQualityTemplateRequest,
    ) -> dataworks_public_20240518_models.UpdateDataQualityTemplateResponse:
        """
        @summary 更新数据质量模板
        
        @param request: UpdateDataQualityTemplateRequest
        @return: UpdateDataQualityTemplateResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_data_quality_template_with_options(request, runtime)

    async def update_data_quality_template_async(
        self,
        request: dataworks_public_20240518_models.UpdateDataQualityTemplateRequest,
    ) -> dataworks_public_20240518_models.UpdateDataQualityTemplateResponse:
        """
        @summary 更新数据质量模板
        
        @param request: UpdateDataQualityTemplateRequest
        @return: UpdateDataQualityTemplateResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_data_quality_template_with_options_async(request, runtime)

    def update_data_source_with_options(
        self,
        request: dataworks_public_20240518_models.UpdateDataSourceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateDataSourceResponse:
        """
        @summary Modifies a data source by ID.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
        Tenant Owner, Tenant Administrator, Workspace Administrator, Workspace Owner, and O\\&M
        
        @param request: UpdateDataSourceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateDataSourceResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.connection_properties):
            query['ConnectionProperties'] = request.connection_properties
        if not UtilClient.is_unset(request.connection_properties_mode):
            query['ConnectionPropertiesMode'] = request.connection_properties_mode
        if not UtilClient.is_unset(request.description):
            query['Description'] = request.description
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateDataSource',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateDataSourceResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_data_source_with_options_async(
        self,
        request: dataworks_public_20240518_models.UpdateDataSourceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateDataSourceResponse:
        """
        @summary Modifies a data source by ID.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
        Tenant Owner, Tenant Administrator, Workspace Administrator, Workspace Owner, and O\\&M
        
        @param request: UpdateDataSourceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateDataSourceResponse
        """
        UtilClient.validate_model(request)
        query = {}
        if not UtilClient.is_unset(request.connection_properties):
            query['ConnectionProperties'] = request.connection_properties
        if not UtilClient.is_unset(request.connection_properties_mode):
            query['ConnectionPropertiesMode'] = request.connection_properties_mode
        if not UtilClient.is_unset(request.description):
            query['Description'] = request.description
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.project_id):
            query['ProjectId'] = request.project_id
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateDataSource',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateDataSourceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_data_source(
        self,
        request: dataworks_public_20240518_models.UpdateDataSourceRequest,
    ) -> dataworks_public_20240518_models.UpdateDataSourceResponse:
        """
        @summary Modifies a data source by ID.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
        Tenant Owner, Tenant Administrator, Workspace Administrator, Workspace Owner, and O\\&M
        
        @param request: UpdateDataSourceRequest
        @return: UpdateDataSourceResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_data_source_with_options(request, runtime)

    async def update_data_source_async(
        self,
        request: dataworks_public_20240518_models.UpdateDataSourceRequest,
    ) -> dataworks_public_20240518_models.UpdateDataSourceResponse:
        """
        @summary Modifies a data source by ID.
        
        @description 1.  This API operation is available for all DataWorks editions.
        2.  You can call this operation only if you are assigned one of the following roles in DataWorks:
        Tenant Owner, Tenant Administrator, Workspace Administrator, Workspace Owner, and O\\&M
        
        @param request: UpdateDataSourceRequest
        @return: UpdateDataSourceResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_data_source_with_options_async(request, runtime)

    def update_file_with_options(
        self,
        request: dataworks_public_20240518_models.UpdateFileRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateFileResponse:
        """
        @param request: UpdateFileRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateFileResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.advanced_settings):
            body['AdvancedSettings'] = request.advanced_settings
        if not UtilClient.is_unset(request.apply_schedule_immediately):
            body['ApplyScheduleImmediately'] = request.apply_schedule_immediately
        if not UtilClient.is_unset(request.auto_parsing):
            body['AutoParsing'] = request.auto_parsing
        if not UtilClient.is_unset(request.auto_rerun_interval_millis):
            body['AutoRerunIntervalMillis'] = request.auto_rerun_interval_millis
        if not UtilClient.is_unset(request.auto_rerun_times):
            body['AutoRerunTimes'] = request.auto_rerun_times
        if not UtilClient.is_unset(request.connection_name):
            body['ConnectionName'] = request.connection_name
        if not UtilClient.is_unset(request.content):
            body['Content'] = request.content
        if not UtilClient.is_unset(request.cron_express):
            body['CronExpress'] = request.cron_express
        if not UtilClient.is_unset(request.cycle_type):
            body['CycleType'] = request.cycle_type
        if not UtilClient.is_unset(request.dependent_node_id_list):
            body['DependentNodeIdList'] = request.dependent_node_id_list
        if not UtilClient.is_unset(request.dependent_type):
            body['DependentType'] = request.dependent_type
        if not UtilClient.is_unset(request.end_effect_date):
            body['EndEffectDate'] = request.end_effect_date
        if not UtilClient.is_unset(request.file_description):
            body['FileDescription'] = request.file_description
        if not UtilClient.is_unset(request.file_folder_path):
            body['FileFolderPath'] = request.file_folder_path
        if not UtilClient.is_unset(request.file_id):
            body['FileId'] = request.file_id
        if not UtilClient.is_unset(request.file_name):
            body['FileName'] = request.file_name
        if not UtilClient.is_unset(request.ignore_parent_skip_running_property):
            body['IgnoreParentSkipRunningProperty'] = request.ignore_parent_skip_running_property
        if not UtilClient.is_unset(request.image_id):
            body['ImageId'] = request.image_id
        if not UtilClient.is_unset(request.input_list):
            body['InputList'] = request.input_list
        if not UtilClient.is_unset(request.input_parameters):
            body['InputParameters'] = request.input_parameters
        if not UtilClient.is_unset(request.output_list):
            body['OutputList'] = request.output_list
        if not UtilClient.is_unset(request.output_parameters):
            body['OutputParameters'] = request.output_parameters
        if not UtilClient.is_unset(request.owner):
            body['Owner'] = request.owner
        if not UtilClient.is_unset(request.para_value):
            body['ParaValue'] = request.para_value
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        if not UtilClient.is_unset(request.rerun_mode):
            body['RerunMode'] = request.rerun_mode
        if not UtilClient.is_unset(request.resource_group_identifier):
            body['ResourceGroupIdentifier'] = request.resource_group_identifier
        if not UtilClient.is_unset(request.scheduler_type):
            body['SchedulerType'] = request.scheduler_type
        if not UtilClient.is_unset(request.start_effect_date):
            body['StartEffectDate'] = request.start_effect_date
        if not UtilClient.is_unset(request.start_immediately):
            body['StartImmediately'] = request.start_immediately
        if not UtilClient.is_unset(request.stop):
            body['Stop'] = request.stop
        if not UtilClient.is_unset(request.timeout):
            body['Timeout'] = request.timeout
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateFile',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateFileResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_file_with_options_async(
        self,
        request: dataworks_public_20240518_models.UpdateFileRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateFileResponse:
        """
        @param request: UpdateFileRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateFileResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.advanced_settings):
            body['AdvancedSettings'] = request.advanced_settings
        if not UtilClient.is_unset(request.apply_schedule_immediately):
            body['ApplyScheduleImmediately'] = request.apply_schedule_immediately
        if not UtilClient.is_unset(request.auto_parsing):
            body['AutoParsing'] = request.auto_parsing
        if not UtilClient.is_unset(request.auto_rerun_interval_millis):
            body['AutoRerunIntervalMillis'] = request.auto_rerun_interval_millis
        if not UtilClient.is_unset(request.auto_rerun_times):
            body['AutoRerunTimes'] = request.auto_rerun_times
        if not UtilClient.is_unset(request.connection_name):
            body['ConnectionName'] = request.connection_name
        if not UtilClient.is_unset(request.content):
            body['Content'] = request.content
        if not UtilClient.is_unset(request.cron_express):
            body['CronExpress'] = request.cron_express
        if not UtilClient.is_unset(request.cycle_type):
            body['CycleType'] = request.cycle_type
        if not UtilClient.is_unset(request.dependent_node_id_list):
            body['DependentNodeIdList'] = request.dependent_node_id_list
        if not UtilClient.is_unset(request.dependent_type):
            body['DependentType'] = request.dependent_type
        if not UtilClient.is_unset(request.end_effect_date):
            body['EndEffectDate'] = request.end_effect_date
        if not UtilClient.is_unset(request.file_description):
            body['FileDescription'] = request.file_description
        if not UtilClient.is_unset(request.file_folder_path):
            body['FileFolderPath'] = request.file_folder_path
        if not UtilClient.is_unset(request.file_id):
            body['FileId'] = request.file_id
        if not UtilClient.is_unset(request.file_name):
            body['FileName'] = request.file_name
        if not UtilClient.is_unset(request.ignore_parent_skip_running_property):
            body['IgnoreParentSkipRunningProperty'] = request.ignore_parent_skip_running_property
        if not UtilClient.is_unset(request.image_id):
            body['ImageId'] = request.image_id
        if not UtilClient.is_unset(request.input_list):
            body['InputList'] = request.input_list
        if not UtilClient.is_unset(request.input_parameters):
            body['InputParameters'] = request.input_parameters
        if not UtilClient.is_unset(request.output_list):
            body['OutputList'] = request.output_list
        if not UtilClient.is_unset(request.output_parameters):
            body['OutputParameters'] = request.output_parameters
        if not UtilClient.is_unset(request.owner):
            body['Owner'] = request.owner
        if not UtilClient.is_unset(request.para_value):
            body['ParaValue'] = request.para_value
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        if not UtilClient.is_unset(request.rerun_mode):
            body['RerunMode'] = request.rerun_mode
        if not UtilClient.is_unset(request.resource_group_identifier):
            body['ResourceGroupIdentifier'] = request.resource_group_identifier
        if not UtilClient.is_unset(request.scheduler_type):
            body['SchedulerType'] = request.scheduler_type
        if not UtilClient.is_unset(request.start_effect_date):
            body['StartEffectDate'] = request.start_effect_date
        if not UtilClient.is_unset(request.start_immediately):
            body['StartImmediately'] = request.start_immediately
        if not UtilClient.is_unset(request.stop):
            body['Stop'] = request.stop
        if not UtilClient.is_unset(request.timeout):
            body['Timeout'] = request.timeout
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateFile',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateFileResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_file(
        self,
        request: dataworks_public_20240518_models.UpdateFileRequest,
    ) -> dataworks_public_20240518_models.UpdateFileResponse:
        """
        @param request: UpdateFileRequest
        @return: UpdateFileResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_file_with_options(request, runtime)

    async def update_file_async(
        self,
        request: dataworks_public_20240518_models.UpdateFileRequest,
    ) -> dataworks_public_20240518_models.UpdateFileResponse:
        """
        @param request: UpdateFileRequest
        @return: UpdateFileResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_file_with_options_async(request, runtime)

    def update_folder_with_options(
        self,
        request: dataworks_public_20240518_models.UpdateFolderRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateFolderResponse:
        """
        @param request: UpdateFolderRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateFolderResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.folder_id):
            body['FolderId'] = request.folder_id
        if not UtilClient.is_unset(request.folder_name):
            body['FolderName'] = request.folder_name
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateFolder',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateFolderResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_folder_with_options_async(
        self,
        request: dataworks_public_20240518_models.UpdateFolderRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateFolderResponse:
        """
        @param request: UpdateFolderRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateFolderResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.folder_id):
            body['FolderId'] = request.folder_id
        if not UtilClient.is_unset(request.folder_name):
            body['FolderName'] = request.folder_name
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateFolder',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateFolderResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_folder(
        self,
        request: dataworks_public_20240518_models.UpdateFolderRequest,
    ) -> dataworks_public_20240518_models.UpdateFolderResponse:
        """
        @param request: UpdateFolderRequest
        @return: UpdateFolderResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_folder_with_options(request, runtime)

    async def update_folder_async(
        self,
        request: dataworks_public_20240518_models.UpdateFolderRequest,
    ) -> dataworks_public_20240518_models.UpdateFolderResponse:
        """
        @param request: UpdateFolderRequest
        @return: UpdateFolderResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_folder_with_options_async(request, runtime)

    def update_function_with_options(
        self,
        request: dataworks_public_20240518_models.UpdateFunctionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateFunctionResponse:
        """
        @summary Updates the basic information about a user-defined function (UDF) in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
        
        @param request: UpdateFunctionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateFunctionResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.spec):
            body['Spec'] = request.spec
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateFunction',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateFunctionResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_function_with_options_async(
        self,
        request: dataworks_public_20240518_models.UpdateFunctionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateFunctionResponse:
        """
        @summary Updates the basic information about a user-defined function (UDF) in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
        
        @param request: UpdateFunctionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateFunctionResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.spec):
            body['Spec'] = request.spec
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateFunction',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateFunctionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_function(
        self,
        request: dataworks_public_20240518_models.UpdateFunctionRequest,
    ) -> dataworks_public_20240518_models.UpdateFunctionResponse:
        """
        @summary Updates the basic information about a user-defined function (UDF) in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
        
        @param request: UpdateFunctionRequest
        @return: UpdateFunctionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_function_with_options(request, runtime)

    async def update_function_async(
        self,
        request: dataworks_public_20240518_models.UpdateFunctionRequest,
    ) -> dataworks_public_20240518_models.UpdateFunctionResponse:
        """
        @summary Updates the basic information about a user-defined function (UDF) in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
        
        @param request: UpdateFunctionRequest
        @return: UpdateFunctionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_function_with_options_async(request, runtime)

    def update_ideevent_result_with_options(
        self,
        request: dataworks_public_20240518_models.UpdateIDEEventResultRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateIDEEventResultResponse:
        """
        @summary 回调扩展点消息的检查结果
        
        @param request: UpdateIDEEventResultRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateIDEEventResultResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.check_result):
            body['CheckResult'] = request.check_result
        if not UtilClient.is_unset(request.check_result_tip):
            body['CheckResultTip'] = request.check_result_tip
        if not UtilClient.is_unset(request.extension_code):
            body['ExtensionCode'] = request.extension_code
        if not UtilClient.is_unset(request.message_id):
            body['MessageId'] = request.message_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateIDEEventResult',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateIDEEventResultResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_ideevent_result_with_options_async(
        self,
        request: dataworks_public_20240518_models.UpdateIDEEventResultRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateIDEEventResultResponse:
        """
        @summary 回调扩展点消息的检查结果
        
        @param request: UpdateIDEEventResultRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateIDEEventResultResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.check_result):
            body['CheckResult'] = request.check_result
        if not UtilClient.is_unset(request.check_result_tip):
            body['CheckResultTip'] = request.check_result_tip
        if not UtilClient.is_unset(request.extension_code):
            body['ExtensionCode'] = request.extension_code
        if not UtilClient.is_unset(request.message_id):
            body['MessageId'] = request.message_id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateIDEEventResult',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateIDEEventResultResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_ideevent_result(
        self,
        request: dataworks_public_20240518_models.UpdateIDEEventResultRequest,
    ) -> dataworks_public_20240518_models.UpdateIDEEventResultResponse:
        """
        @summary 回调扩展点消息的检查结果
        
        @param request: UpdateIDEEventResultRequest
        @return: UpdateIDEEventResultResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_ideevent_result_with_options(request, runtime)

    async def update_ideevent_result_async(
        self,
        request: dataworks_public_20240518_models.UpdateIDEEventResultRequest,
    ) -> dataworks_public_20240518_models.UpdateIDEEventResultResponse:
        """
        @summary 回调扩展点消息的检查结果
        
        @param request: UpdateIDEEventResultRequest
        @return: UpdateIDEEventResultResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_ideevent_result_with_options_async(request, runtime)

    def update_meta_collection_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.UpdateMetaCollectionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateMetaCollectionResponse:
        """
        @summary Updates the information about a collection in Data Map, including the collection name, description, and administrator. Collections include categories and data albums. If you want to update the information about a data album, the account that you use must be attached the AliyunDataWorksFullAccess policy, or you are the data album creator or administrator.
        
        @param tmp_req: UpdateMetaCollectionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateMetaCollectionResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.UpdateMetaCollectionShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.administrators):
            request.administrators_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.administrators, 'Administrators', 'simple')
        query = {}
        if not UtilClient.is_unset(request.administrators_shrink):
            query['Administrators'] = request.administrators_shrink
        if not UtilClient.is_unset(request.description):
            query['Description'] = request.description
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateMetaCollection',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateMetaCollectionResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_meta_collection_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.UpdateMetaCollectionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateMetaCollectionResponse:
        """
        @summary Updates the information about a collection in Data Map, including the collection name, description, and administrator. Collections include categories and data albums. If you want to update the information about a data album, the account that you use must be attached the AliyunDataWorksFullAccess policy, or you are the data album creator or administrator.
        
        @param tmp_req: UpdateMetaCollectionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateMetaCollectionResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.UpdateMetaCollectionShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.administrators):
            request.administrators_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.administrators, 'Administrators', 'simple')
        query = {}
        if not UtilClient.is_unset(request.administrators_shrink):
            query['Administrators'] = request.administrators_shrink
        if not UtilClient.is_unset(request.description):
            query['Description'] = request.description
        if not UtilClient.is_unset(request.id):
            query['Id'] = request.id
        if not UtilClient.is_unset(request.name):
            query['Name'] = request.name
        req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(query)
        )
        params = open_api_models.Params(
            action='UpdateMetaCollection',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateMetaCollectionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_meta_collection(
        self,
        request: dataworks_public_20240518_models.UpdateMetaCollectionRequest,
    ) -> dataworks_public_20240518_models.UpdateMetaCollectionResponse:
        """
        @summary Updates the information about a collection in Data Map, including the collection name, description, and administrator. Collections include categories and data albums. If you want to update the information about a data album, the account that you use must be attached the AliyunDataWorksFullAccess policy, or you are the data album creator or administrator.
        
        @param request: UpdateMetaCollectionRequest
        @return: UpdateMetaCollectionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_meta_collection_with_options(request, runtime)

    async def update_meta_collection_async(
        self,
        request: dataworks_public_20240518_models.UpdateMetaCollectionRequest,
    ) -> dataworks_public_20240518_models.UpdateMetaCollectionResponse:
        """
        @summary Updates the information about a collection in Data Map, including the collection name, description, and administrator. Collections include categories and data albums. If you want to update the information about a data album, the account that you use must be attached the AliyunDataWorksFullAccess policy, or you are the data album creator or administrator.
        
        @param request: UpdateMetaCollectionRequest
        @return: UpdateMetaCollectionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_meta_collection_with_options_async(request, runtime)

    def update_node_with_options(
        self,
        request: dataworks_public_20240518_models.UpdateNodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateNodeResponse:
        """
        @summary Updates the basic information about a node in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
        
        @param request: UpdateNodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateNodeResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.spec):
            body['Spec'] = request.spec
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateNode',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateNodeResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_node_with_options_async(
        self,
        request: dataworks_public_20240518_models.UpdateNodeRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateNodeResponse:
        """
        @summary Updates the basic information about a node in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
        
        @param request: UpdateNodeRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateNodeResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.spec):
            body['Spec'] = request.spec
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateNode',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateNodeResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_node(
        self,
        request: dataworks_public_20240518_models.UpdateNodeRequest,
    ) -> dataworks_public_20240518_models.UpdateNodeResponse:
        """
        @summary Updates the basic information about a node in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
        
        @param request: UpdateNodeRequest
        @return: UpdateNodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_node_with_options(request, runtime)

    async def update_node_async(
        self,
        request: dataworks_public_20240518_models.UpdateNodeRequest,
    ) -> dataworks_public_20240518_models.UpdateNodeResponse:
        """
        @summary Updates the basic information about a node in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
        
        @param request: UpdateNodeRequest
        @return: UpdateNodeResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_node_with_options_async(request, runtime)

    def update_project_with_options(
        self,
        request: dataworks_public_20240518_models.UpdateProjectRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateProjectResponse:
        """
        @summary Updates a DataWorks workspace.
        
        @param request: UpdateProjectRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateProjectResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.dev_environment_enabled):
            body['DevEnvironmentEnabled'] = request.dev_environment_enabled
        if not UtilClient.is_unset(request.dev_role_disabled):
            body['DevRoleDisabled'] = request.dev_role_disabled
        if not UtilClient.is_unset(request.display_name):
            body['DisplayName'] = request.display_name
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.pai_task_enabled):
            body['PaiTaskEnabled'] = request.pai_task_enabled
        if not UtilClient.is_unset(request.status):
            body['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateProject',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateProjectResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_project_with_options_async(
        self,
        request: dataworks_public_20240518_models.UpdateProjectRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateProjectResponse:
        """
        @summary Updates a DataWorks workspace.
        
        @param request: UpdateProjectRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateProjectResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.dev_environment_enabled):
            body['DevEnvironmentEnabled'] = request.dev_environment_enabled
        if not UtilClient.is_unset(request.dev_role_disabled):
            body['DevRoleDisabled'] = request.dev_role_disabled
        if not UtilClient.is_unset(request.display_name):
            body['DisplayName'] = request.display_name
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.pai_task_enabled):
            body['PaiTaskEnabled'] = request.pai_task_enabled
        if not UtilClient.is_unset(request.status):
            body['Status'] = request.status
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateProject',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateProjectResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_project(
        self,
        request: dataworks_public_20240518_models.UpdateProjectRequest,
    ) -> dataworks_public_20240518_models.UpdateProjectResponse:
        """
        @summary Updates a DataWorks workspace.
        
        @param request: UpdateProjectRequest
        @return: UpdateProjectResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_project_with_options(request, runtime)

    async def update_project_async(
        self,
        request: dataworks_public_20240518_models.UpdateProjectRequest,
    ) -> dataworks_public_20240518_models.UpdateProjectResponse:
        """
        @summary Updates a DataWorks workspace.
        
        @param request: UpdateProjectRequest
        @return: UpdateProjectResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_project_with_options_async(request, runtime)

    def update_resource_with_options(
        self,
        request: dataworks_public_20240518_models.UpdateResourceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateResourceResponse:
        """
        @summary Updates the basic information about a file resource in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
        
        @param request: UpdateResourceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateResourceResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.resource_file):
            body['ResourceFile'] = request.resource_file
        if not UtilClient.is_unset(request.spec):
            body['Spec'] = request.spec
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateResource',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateResourceResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_resource_with_options_async(
        self,
        request: dataworks_public_20240518_models.UpdateResourceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateResourceResponse:
        """
        @summary Updates the basic information about a file resource in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
        
        @param request: UpdateResourceRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateResourceResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.resource_file):
            body['ResourceFile'] = request.resource_file
        if not UtilClient.is_unset(request.spec):
            body['Spec'] = request.spec
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateResource',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateResourceResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_resource(
        self,
        request: dataworks_public_20240518_models.UpdateResourceRequest,
    ) -> dataworks_public_20240518_models.UpdateResourceResponse:
        """
        @summary Updates the basic information about a file resource in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
        
        @param request: UpdateResourceRequest
        @return: UpdateResourceResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_resource_with_options(request, runtime)

    async def update_resource_async(
        self,
        request: dataworks_public_20240518_models.UpdateResourceRequest,
    ) -> dataworks_public_20240518_models.UpdateResourceResponse:
        """
        @summary Updates the basic information about a file resource in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
        
        @param request: UpdateResourceRequest
        @return: UpdateResourceResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_resource_with_options_async(request, runtime)

    def update_resource_advance(
        self,
        request: dataworks_public_20240518_models.UpdateResourceAdvanceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateResourceResponse:
        # Step 0: init client
        credential_model = None
        if UtilClient.is_unset(self._credential):
            raise TeaException({
                'code': 'InvalidCredentials',
                'message': 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
            })
        credential_model = self._credential.get_credential()
        access_key_id = credential_model.access_key_id
        access_key_secret = credential_model.access_key_secret
        security_token = credential_model.security_token
        credential_type = credential_model.type
        open_platform_endpoint = self._open_platform_endpoint
        if UtilClient.empty(open_platform_endpoint):
            open_platform_endpoint = 'openplatform.aliyuncs.com'
        if UtilClient.is_unset(credential_type):
            credential_type = 'access_key'
        auth_config = open_api_models.Config(
            access_key_id=access_key_id,
            access_key_secret=access_key_secret,
            security_token=security_token,
            type=credential_type,
            endpoint=open_platform_endpoint,
            protocol=self._protocol,
            region_id=self._region_id
        )
        auth_client = OpenApiClient(auth_config)
        auth_request = {
            'Product': 'dataworks-public',
            'RegionId': self._region_id
        }
        auth_req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(auth_request)
        )
        auth_params = open_api_models.Params(
            action='AuthorizeFileUpload',
            version='2019-12-19',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        auth_response = {}
        file_obj = file_form_models.FileField()
        oss_header = {}
        tmp_body = {}
        use_accelerate = False
        auth_response_body = {}
        update_resource_req = dataworks_public_20240518_models.UpdateResourceRequest()
        OpenApiUtilClient.convert(request, update_resource_req)
        if not UtilClient.is_unset(request.resource_file_object):
            tmp_resp_0 = auth_client.call_api(auth_params, auth_req, runtime)
            auth_response = UtilClient.assert_as_map(tmp_resp_0)
            tmp_body = UtilClient.assert_as_map(auth_response.get('body'))
            use_accelerate = UtilClient.assert_as_boolean(tmp_body.get('UseAccelerate'))
            auth_response_body = UtilClient.stringify_map_value(tmp_body)
            file_obj = file_form_models.FileField(
                filename=auth_response_body.get('ObjectKey'),
                content=request.resource_file_object,
                content_type=''
            )
            oss_header = {
                'host': f"{auth_response_body.get('Bucket')}.{OpenApiUtilClient.get_endpoint(auth_response_body.get('Endpoint'), use_accelerate, self._endpoint_type)}",
                'OSSAccessKeyId': auth_response_body.get('AccessKeyId'),
                'policy': auth_response_body.get('EncodedPolicy'),
                'Signature': auth_response_body.get('Signature'),
                'key': auth_response_body.get('ObjectKey'),
                'file': file_obj,
                'success_action_status': '201'
            }
            self._post_ossobject(auth_response_body.get('Bucket'), oss_header)
            update_resource_req.resource_file = f"http://{auth_response_body.get('Bucket')}.{auth_response_body.get('Endpoint')}/{auth_response_body.get('ObjectKey')}"
        update_resource_resp = self.update_resource_with_options(update_resource_req, runtime)
        return update_resource_resp

    async def update_resource_advance_async(
        self,
        request: dataworks_public_20240518_models.UpdateResourceAdvanceRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateResourceResponse:
        # Step 0: init client
        credential_model = None
        if UtilClient.is_unset(self._credential):
            raise TeaException({
                'code': 'InvalidCredentials',
                'message': 'Please set up the credentials correctly. If you are setting them through environment variables, please ensure that ALIBABA_CLOUD_ACCESS_KEY_ID and ALIBABA_CLOUD_ACCESS_KEY_SECRET are set correctly. See https://help.aliyun.com/zh/sdk/developer-reference/configure-the-alibaba-cloud-accesskey-environment-variable-on-linux-macos-and-windows-systems for more details.'
            })
        credential_model = await self._credential.get_credential_async()
        access_key_id = credential_model.access_key_id
        access_key_secret = credential_model.access_key_secret
        security_token = credential_model.security_token
        credential_type = credential_model.type
        open_platform_endpoint = self._open_platform_endpoint
        if UtilClient.empty(open_platform_endpoint):
            open_platform_endpoint = 'openplatform.aliyuncs.com'
        if UtilClient.is_unset(credential_type):
            credential_type = 'access_key'
        auth_config = open_api_models.Config(
            access_key_id=access_key_id,
            access_key_secret=access_key_secret,
            security_token=security_token,
            type=credential_type,
            endpoint=open_platform_endpoint,
            protocol=self._protocol,
            region_id=self._region_id
        )
        auth_client = OpenApiClient(auth_config)
        auth_request = {
            'Product': 'dataworks-public',
            'RegionId': self._region_id
        }
        auth_req = open_api_models.OpenApiRequest(
            query=OpenApiUtilClient.query(auth_request)
        )
        auth_params = open_api_models.Params(
            action='AuthorizeFileUpload',
            version='2019-12-19',
            protocol='HTTPS',
            pathname='/',
            method='GET',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        auth_response = {}
        file_obj = file_form_models.FileField()
        oss_header = {}
        tmp_body = {}
        use_accelerate = False
        auth_response_body = {}
        update_resource_req = dataworks_public_20240518_models.UpdateResourceRequest()
        OpenApiUtilClient.convert(request, update_resource_req)
        if not UtilClient.is_unset(request.resource_file_object):
            tmp_resp_0 = await auth_client.call_api_async(auth_params, auth_req, runtime)
            auth_response = UtilClient.assert_as_map(tmp_resp_0)
            tmp_body = UtilClient.assert_as_map(auth_response.get('body'))
            use_accelerate = UtilClient.assert_as_boolean(tmp_body.get('UseAccelerate'))
            auth_response_body = UtilClient.stringify_map_value(tmp_body)
            file_obj = file_form_models.FileField(
                filename=auth_response_body.get('ObjectKey'),
                content=request.resource_file_object,
                content_type=''
            )
            oss_header = {
                'host': f"{auth_response_body.get('Bucket')}.{OpenApiUtilClient.get_endpoint(auth_response_body.get('Endpoint'), use_accelerate, self._endpoint_type)}",
                'OSSAccessKeyId': auth_response_body.get('AccessKeyId'),
                'policy': auth_response_body.get('EncodedPolicy'),
                'Signature': auth_response_body.get('Signature'),
                'key': auth_response_body.get('ObjectKey'),
                'file': file_obj,
                'success_action_status': '201'
            }
            await self._post_ossobject_async(auth_response_body.get('Bucket'), oss_header)
            update_resource_req.resource_file = f"http://{auth_response_body.get('Bucket')}.{auth_response_body.get('Endpoint')}/{auth_response_body.get('ObjectKey')}"
        update_resource_resp = await self.update_resource_with_options_async(update_resource_req, runtime)
        return update_resource_resp

    def update_resource_group_with_options(
        self,
        request: dataworks_public_20240518_models.UpdateResourceGroupRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateResourceGroupResponse:
        """
        @summary Updates basic information about a resource group.
        
        @description You can use this API operation only in DataWorks Basic Edition or an advanced edition.
        
        @param request: UpdateResourceGroupRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateResourceGroupResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.aliyun_resource_group_id):
            body['AliyunResourceGroupId'] = request.aliyun_resource_group_id
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.remark):
            body['Remark'] = request.remark
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateResourceGroup',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateResourceGroupResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_resource_group_with_options_async(
        self,
        request: dataworks_public_20240518_models.UpdateResourceGroupRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateResourceGroupResponse:
        """
        @summary Updates basic information about a resource group.
        
        @description You can use this API operation only in DataWorks Basic Edition or an advanced edition.
        
        @param request: UpdateResourceGroupRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateResourceGroupResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.aliyun_resource_group_id):
            body['AliyunResourceGroupId'] = request.aliyun_resource_group_id
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.remark):
            body['Remark'] = request.remark
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateResourceGroup',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateResourceGroupResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_resource_group(
        self,
        request: dataworks_public_20240518_models.UpdateResourceGroupRequest,
    ) -> dataworks_public_20240518_models.UpdateResourceGroupResponse:
        """
        @summary Updates basic information about a resource group.
        
        @description You can use this API operation only in DataWorks Basic Edition or an advanced edition.
        
        @param request: UpdateResourceGroupRequest
        @return: UpdateResourceGroupResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_resource_group_with_options(request, runtime)

    async def update_resource_group_async(
        self,
        request: dataworks_public_20240518_models.UpdateResourceGroupRequest,
    ) -> dataworks_public_20240518_models.UpdateResourceGroupResponse:
        """
        @summary Updates basic information about a resource group.
        
        @description You can use this API operation only in DataWorks Basic Edition or an advanced edition.
        
        @param request: UpdateResourceGroupRequest
        @return: UpdateResourceGroupResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_resource_group_with_options_async(request, runtime)

    def update_route_with_options(
        self,
        request: dataworks_public_20240518_models.UpdateRouteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateRouteResponse:
        """
        @summary Updates the information about a route.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: UpdateRouteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateRouteResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.destination_cidr):
            body['DestinationCidr'] = request.destination_cidr
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateRoute',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateRouteResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_route_with_options_async(
        self,
        request: dataworks_public_20240518_models.UpdateRouteRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateRouteResponse:
        """
        @summary Updates the information about a route.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: UpdateRouteRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateRouteResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.destination_cidr):
            body['DestinationCidr'] = request.destination_cidr
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateRoute',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateRouteResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_route(
        self,
        request: dataworks_public_20240518_models.UpdateRouteRequest,
    ) -> dataworks_public_20240518_models.UpdateRouteResponse:
        """
        @summary Updates the information about a route.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: UpdateRouteRequest
        @return: UpdateRouteResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_route_with_options(request, runtime)

    async def update_route_async(
        self,
        request: dataworks_public_20240518_models.UpdateRouteRequest,
    ) -> dataworks_public_20240518_models.UpdateRouteResponse:
        """
        @summary Updates the information about a route.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: UpdateRouteRequest
        @return: UpdateRouteResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_route_with_options_async(request, runtime)

    def update_table_business_metadata_with_options(
        self,
        request: dataworks_public_20240518_models.UpdateTableBusinessMetadataRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateTableBusinessMetadataResponse:
        """
        @summary Updates the business metadata of a table in Data Map. Currently, only the usage notes of a table can be updated.
        
        @param request: UpdateTableBusinessMetadataRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateTableBusinessMetadataResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.readme):
            body['Readme'] = request.readme
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateTableBusinessMetadata',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateTableBusinessMetadataResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_table_business_metadata_with_options_async(
        self,
        request: dataworks_public_20240518_models.UpdateTableBusinessMetadataRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateTableBusinessMetadataResponse:
        """
        @summary Updates the business metadata of a table in Data Map. Currently, only the usage notes of a table can be updated.
        
        @param request: UpdateTableBusinessMetadataRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateTableBusinessMetadataResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.readme):
            body['Readme'] = request.readme
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateTableBusinessMetadata',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateTableBusinessMetadataResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_table_business_metadata(
        self,
        request: dataworks_public_20240518_models.UpdateTableBusinessMetadataRequest,
    ) -> dataworks_public_20240518_models.UpdateTableBusinessMetadataResponse:
        """
        @summary Updates the business metadata of a table in Data Map. Currently, only the usage notes of a table can be updated.
        
        @param request: UpdateTableBusinessMetadataRequest
        @return: UpdateTableBusinessMetadataResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_table_business_metadata_with_options(request, runtime)

    async def update_table_business_metadata_async(
        self,
        request: dataworks_public_20240518_models.UpdateTableBusinessMetadataRequest,
    ) -> dataworks_public_20240518_models.UpdateTableBusinessMetadataResponse:
        """
        @summary Updates the business metadata of a table in Data Map. Currently, only the usage notes of a table can be updated.
        
        @param request: UpdateTableBusinessMetadataRequest
        @return: UpdateTableBusinessMetadataResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_table_business_metadata_with_options_async(request, runtime)

    def update_task_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.UpdateTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateTaskResponse:
        """
        @summary Updates a specified task in full update mode.
        
        @param tmp_req: UpdateTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateTaskResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.UpdateTaskShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.data_source):
            request.data_source_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.data_source, 'DataSource', 'json')
        if not UtilClient.is_unset(tmp_req.dependencies):
            request.dependencies_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.dependencies, 'Dependencies', 'json')
        if not UtilClient.is_unset(tmp_req.inputs):
            request.inputs_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.inputs, 'Inputs', 'json')
        if not UtilClient.is_unset(tmp_req.outputs):
            request.outputs_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.outputs, 'Outputs', 'json')
        if not UtilClient.is_unset(tmp_req.runtime_resource):
            request.runtime_resource_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.runtime_resource, 'RuntimeResource', 'json')
        if not UtilClient.is_unset(tmp_req.script):
            request.script_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.script, 'Script', 'json')
        if not UtilClient.is_unset(tmp_req.tags):
            request.tags_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tags, 'Tags', 'json')
        if not UtilClient.is_unset(tmp_req.trigger):
            request.trigger_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.trigger, 'Trigger', 'json')
        body = {}
        if not UtilClient.is_unset(request.client_unique_code):
            body['ClientUniqueCode'] = request.client_unique_code
        if not UtilClient.is_unset(request.data_source_shrink):
            body['DataSource'] = request.data_source_shrink
        if not UtilClient.is_unset(request.dependencies_shrink):
            body['Dependencies'] = request.dependencies_shrink
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.env_type):
            body['EnvType'] = request.env_type
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.inputs_shrink):
            body['Inputs'] = request.inputs_shrink
        if not UtilClient.is_unset(request.instance_mode):
            body['InstanceMode'] = request.instance_mode
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.outputs_shrink):
            body['Outputs'] = request.outputs_shrink
        if not UtilClient.is_unset(request.owner):
            body['Owner'] = request.owner
        if not UtilClient.is_unset(request.rerun_interval):
            body['RerunInterval'] = request.rerun_interval
        if not UtilClient.is_unset(request.rerun_mode):
            body['RerunMode'] = request.rerun_mode
        if not UtilClient.is_unset(request.rerun_times):
            body['RerunTimes'] = request.rerun_times
        if not UtilClient.is_unset(request.runtime_resource_shrink):
            body['RuntimeResource'] = request.runtime_resource_shrink
        if not UtilClient.is_unset(request.script_shrink):
            body['Script'] = request.script_shrink
        if not UtilClient.is_unset(request.tags_shrink):
            body['Tags'] = request.tags_shrink
        if not UtilClient.is_unset(request.timeout):
            body['Timeout'] = request.timeout
        if not UtilClient.is_unset(request.trigger_shrink):
            body['Trigger'] = request.trigger_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateTask',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateTaskResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_task_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.UpdateTaskRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateTaskResponse:
        """
        @summary Updates a specified task in full update mode.
        
        @param tmp_req: UpdateTaskRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateTaskResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.UpdateTaskShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.data_source):
            request.data_source_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.data_source, 'DataSource', 'json')
        if not UtilClient.is_unset(tmp_req.dependencies):
            request.dependencies_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.dependencies, 'Dependencies', 'json')
        if not UtilClient.is_unset(tmp_req.inputs):
            request.inputs_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.inputs, 'Inputs', 'json')
        if not UtilClient.is_unset(tmp_req.outputs):
            request.outputs_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.outputs, 'Outputs', 'json')
        if not UtilClient.is_unset(tmp_req.runtime_resource):
            request.runtime_resource_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.runtime_resource, 'RuntimeResource', 'json')
        if not UtilClient.is_unset(tmp_req.script):
            request.script_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.script, 'Script', 'json')
        if not UtilClient.is_unset(tmp_req.tags):
            request.tags_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tags, 'Tags', 'json')
        if not UtilClient.is_unset(tmp_req.trigger):
            request.trigger_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.trigger, 'Trigger', 'json')
        body = {}
        if not UtilClient.is_unset(request.client_unique_code):
            body['ClientUniqueCode'] = request.client_unique_code
        if not UtilClient.is_unset(request.data_source_shrink):
            body['DataSource'] = request.data_source_shrink
        if not UtilClient.is_unset(request.dependencies_shrink):
            body['Dependencies'] = request.dependencies_shrink
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.env_type):
            body['EnvType'] = request.env_type
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.inputs_shrink):
            body['Inputs'] = request.inputs_shrink
        if not UtilClient.is_unset(request.instance_mode):
            body['InstanceMode'] = request.instance_mode
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.outputs_shrink):
            body['Outputs'] = request.outputs_shrink
        if not UtilClient.is_unset(request.owner):
            body['Owner'] = request.owner
        if not UtilClient.is_unset(request.rerun_interval):
            body['RerunInterval'] = request.rerun_interval
        if not UtilClient.is_unset(request.rerun_mode):
            body['RerunMode'] = request.rerun_mode
        if not UtilClient.is_unset(request.rerun_times):
            body['RerunTimes'] = request.rerun_times
        if not UtilClient.is_unset(request.runtime_resource_shrink):
            body['RuntimeResource'] = request.runtime_resource_shrink
        if not UtilClient.is_unset(request.script_shrink):
            body['Script'] = request.script_shrink
        if not UtilClient.is_unset(request.tags_shrink):
            body['Tags'] = request.tags_shrink
        if not UtilClient.is_unset(request.timeout):
            body['Timeout'] = request.timeout
        if not UtilClient.is_unset(request.trigger_shrink):
            body['Trigger'] = request.trigger_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateTask',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateTaskResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_task(
        self,
        request: dataworks_public_20240518_models.UpdateTaskRequest,
    ) -> dataworks_public_20240518_models.UpdateTaskResponse:
        """
        @summary Updates a specified task in full update mode.
        
        @param request: UpdateTaskRequest
        @return: UpdateTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_task_with_options(request, runtime)

    async def update_task_async(
        self,
        request: dataworks_public_20240518_models.UpdateTaskRequest,
    ) -> dataworks_public_20240518_models.UpdateTaskResponse:
        """
        @summary Updates a specified task in full update mode.
        
        @param request: UpdateTaskRequest
        @return: UpdateTaskResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_task_with_options_async(request, runtime)

    def update_task_instances_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.UpdateTaskInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateTaskInstancesResponse:
        """
        @summary Modifies properties configured for multiple instances at a time. The properties include the priority, resource group for scheduling, and data source.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: UpdateTaskInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateTaskInstancesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.UpdateTaskInstancesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.task_instances):
            request.task_instances_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.task_instances, 'TaskInstances', 'json')
        body = {}
        if not UtilClient.is_unset(request.comment):
            body['Comment'] = request.comment
        if not UtilClient.is_unset(request.task_instances_shrink):
            body['TaskInstances'] = request.task_instances_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateTaskInstances',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateTaskInstancesResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_task_instances_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.UpdateTaskInstancesRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateTaskInstancesResponse:
        """
        @summary Modifies properties configured for multiple instances at a time. The properties include the priority, resource group for scheduling, and data source.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: UpdateTaskInstancesRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateTaskInstancesResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.UpdateTaskInstancesShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.task_instances):
            request.task_instances_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.task_instances, 'TaskInstances', 'json')
        body = {}
        if not UtilClient.is_unset(request.comment):
            body['Comment'] = request.comment
        if not UtilClient.is_unset(request.task_instances_shrink):
            body['TaskInstances'] = request.task_instances_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateTaskInstances',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateTaskInstancesResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_task_instances(
        self,
        request: dataworks_public_20240518_models.UpdateTaskInstancesRequest,
    ) -> dataworks_public_20240518_models.UpdateTaskInstancesResponse:
        """
        @summary Modifies properties configured for multiple instances at a time. The properties include the priority, resource group for scheduling, and data source.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: UpdateTaskInstancesRequest
        @return: UpdateTaskInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_task_instances_with_options(request, runtime)

    async def update_task_instances_async(
        self,
        request: dataworks_public_20240518_models.UpdateTaskInstancesRequest,
    ) -> dataworks_public_20240518_models.UpdateTaskInstancesResponse:
        """
        @summary Modifies properties configured for multiple instances at a time. The properties include the priority, resource group for scheduling, and data source.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: UpdateTaskInstancesRequest
        @return: UpdateTaskInstancesResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_task_instances_with_options_async(request, runtime)

    def update_udf_file_with_options(
        self,
        request: dataworks_public_20240518_models.UpdateUdfFileRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateUdfFileResponse:
        """
        @param request: UpdateUdfFileRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateUdfFileResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.class_name):
            body['ClassName'] = request.class_name
        if not UtilClient.is_unset(request.cmd_description):
            body['CmdDescription'] = request.cmd_description
        if not UtilClient.is_unset(request.example):
            body['Example'] = request.example
        if not UtilClient.is_unset(request.file_folder_path):
            body['FileFolderPath'] = request.file_folder_path
        if not UtilClient.is_unset(request.file_id):
            body['FileId'] = request.file_id
        if not UtilClient.is_unset(request.function_type):
            body['FunctionType'] = request.function_type
        if not UtilClient.is_unset(request.parameter_description):
            body['ParameterDescription'] = request.parameter_description
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        if not UtilClient.is_unset(request.resources):
            body['Resources'] = request.resources
        if not UtilClient.is_unset(request.return_value):
            body['ReturnValue'] = request.return_value
        if not UtilClient.is_unset(request.udf_description):
            body['UdfDescription'] = request.udf_description
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateUdfFile',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateUdfFileResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_udf_file_with_options_async(
        self,
        request: dataworks_public_20240518_models.UpdateUdfFileRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateUdfFileResponse:
        """
        @param request: UpdateUdfFileRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateUdfFileResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.class_name):
            body['ClassName'] = request.class_name
        if not UtilClient.is_unset(request.cmd_description):
            body['CmdDescription'] = request.cmd_description
        if not UtilClient.is_unset(request.example):
            body['Example'] = request.example
        if not UtilClient.is_unset(request.file_folder_path):
            body['FileFolderPath'] = request.file_folder_path
        if not UtilClient.is_unset(request.file_id):
            body['FileId'] = request.file_id
        if not UtilClient.is_unset(request.function_type):
            body['FunctionType'] = request.function_type
        if not UtilClient.is_unset(request.parameter_description):
            body['ParameterDescription'] = request.parameter_description
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.project_identifier):
            body['ProjectIdentifier'] = request.project_identifier
        if not UtilClient.is_unset(request.resources):
            body['Resources'] = request.resources
        if not UtilClient.is_unset(request.return_value):
            body['ReturnValue'] = request.return_value
        if not UtilClient.is_unset(request.udf_description):
            body['UdfDescription'] = request.udf_description
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateUdfFile',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateUdfFileResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_udf_file(
        self,
        request: dataworks_public_20240518_models.UpdateUdfFileRequest,
    ) -> dataworks_public_20240518_models.UpdateUdfFileResponse:
        """
        @param request: UpdateUdfFileRequest
        @return: UpdateUdfFileResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_udf_file_with_options(request, runtime)

    async def update_udf_file_async(
        self,
        request: dataworks_public_20240518_models.UpdateUdfFileRequest,
    ) -> dataworks_public_20240518_models.UpdateUdfFileResponse:
        """
        @param request: UpdateUdfFileRequest
        @return: UpdateUdfFileResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_udf_file_with_options_async(request, runtime)

    def update_workflow_with_options(
        self,
        tmp_req: dataworks_public_20240518_models.UpdateWorkflowRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateWorkflowResponse:
        """
        @summary Updates a specified workflow in full update mode.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: UpdateWorkflowRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateWorkflowResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.UpdateWorkflowShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.dependencies):
            request.dependencies_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.dependencies, 'Dependencies', 'json')
        if not UtilClient.is_unset(tmp_req.outputs):
            request.outputs_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.outputs, 'Outputs', 'json')
        if not UtilClient.is_unset(tmp_req.tags):
            request.tags_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tags, 'Tags', 'json')
        if not UtilClient.is_unset(tmp_req.tasks):
            request.tasks_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tasks, 'Tasks', 'json')
        if not UtilClient.is_unset(tmp_req.trigger):
            request.trigger_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.trigger, 'Trigger', 'json')
        body = {}
        if not UtilClient.is_unset(request.client_unique_code):
            body['ClientUniqueCode'] = request.client_unique_code
        if not UtilClient.is_unset(request.dependencies_shrink):
            body['Dependencies'] = request.dependencies_shrink
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.env_type):
            body['EnvType'] = request.env_type
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.instance_mode):
            body['InstanceMode'] = request.instance_mode
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.outputs_shrink):
            body['Outputs'] = request.outputs_shrink
        if not UtilClient.is_unset(request.owner):
            body['Owner'] = request.owner
        if not UtilClient.is_unset(request.parameters):
            body['Parameters'] = request.parameters
        if not UtilClient.is_unset(request.tags_shrink):
            body['Tags'] = request.tags_shrink
        if not UtilClient.is_unset(request.tasks_shrink):
            body['Tasks'] = request.tasks_shrink
        if not UtilClient.is_unset(request.trigger_shrink):
            body['Trigger'] = request.trigger_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateWorkflow',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateWorkflowResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_workflow_with_options_async(
        self,
        tmp_req: dataworks_public_20240518_models.UpdateWorkflowRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateWorkflowResponse:
        """
        @summary Updates a specified workflow in full update mode.
        
        @description This API operation is available for all DataWorks editions.
        
        @param tmp_req: UpdateWorkflowRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateWorkflowResponse
        """
        UtilClient.validate_model(tmp_req)
        request = dataworks_public_20240518_models.UpdateWorkflowShrinkRequest()
        OpenApiUtilClient.convert(tmp_req, request)
        if not UtilClient.is_unset(tmp_req.dependencies):
            request.dependencies_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.dependencies, 'Dependencies', 'json')
        if not UtilClient.is_unset(tmp_req.outputs):
            request.outputs_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.outputs, 'Outputs', 'json')
        if not UtilClient.is_unset(tmp_req.tags):
            request.tags_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tags, 'Tags', 'json')
        if not UtilClient.is_unset(tmp_req.tasks):
            request.tasks_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.tasks, 'Tasks', 'json')
        if not UtilClient.is_unset(tmp_req.trigger):
            request.trigger_shrink = OpenApiUtilClient.array_to_string_with_specified_style(tmp_req.trigger, 'Trigger', 'json')
        body = {}
        if not UtilClient.is_unset(request.client_unique_code):
            body['ClientUniqueCode'] = request.client_unique_code
        if not UtilClient.is_unset(request.dependencies_shrink):
            body['Dependencies'] = request.dependencies_shrink
        if not UtilClient.is_unset(request.description):
            body['Description'] = request.description
        if not UtilClient.is_unset(request.env_type):
            body['EnvType'] = request.env_type
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.instance_mode):
            body['InstanceMode'] = request.instance_mode
        if not UtilClient.is_unset(request.name):
            body['Name'] = request.name
        if not UtilClient.is_unset(request.outputs_shrink):
            body['Outputs'] = request.outputs_shrink
        if not UtilClient.is_unset(request.owner):
            body['Owner'] = request.owner
        if not UtilClient.is_unset(request.parameters):
            body['Parameters'] = request.parameters
        if not UtilClient.is_unset(request.tags_shrink):
            body['Tags'] = request.tags_shrink
        if not UtilClient.is_unset(request.tasks_shrink):
            body['Tasks'] = request.tasks_shrink
        if not UtilClient.is_unset(request.trigger_shrink):
            body['Trigger'] = request.trigger_shrink
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateWorkflow',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateWorkflowResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_workflow(
        self,
        request: dataworks_public_20240518_models.UpdateWorkflowRequest,
    ) -> dataworks_public_20240518_models.UpdateWorkflowResponse:
        """
        @summary Updates a specified workflow in full update mode.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: UpdateWorkflowRequest
        @return: UpdateWorkflowResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_workflow_with_options(request, runtime)

    async def update_workflow_async(
        self,
        request: dataworks_public_20240518_models.UpdateWorkflowRequest,
    ) -> dataworks_public_20240518_models.UpdateWorkflowResponse:
        """
        @summary Updates a specified workflow in full update mode.
        
        @description This API operation is available for all DataWorks editions.
        
        @param request: UpdateWorkflowRequest
        @return: UpdateWorkflowResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_workflow_with_options_async(request, runtime)

    def update_workflow_definition_with_options(
        self,
        request: dataworks_public_20240518_models.UpdateWorkflowDefinitionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateWorkflowDefinitionResponse:
        """
        @summary Updates the basic information about a workflow in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
        
        @description >  You cannot use this API operation to create multiple workflows at a time. If you specify multiple workflows in the FlowSpec filed, only the first workflow is created. Other specified workflows and the nodes in the workflows are ignored. You can call the UpdateNode operation to update a node.
        
        @param request: UpdateWorkflowDefinitionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateWorkflowDefinitionResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.spec):
            body['Spec'] = request.spec
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateWorkflowDefinition',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateWorkflowDefinitionResponse(),
            self.call_api(params, req, runtime)
        )

    async def update_workflow_definition_with_options_async(
        self,
        request: dataworks_public_20240518_models.UpdateWorkflowDefinitionRequest,
        runtime: util_models.RuntimeOptions,
    ) -> dataworks_public_20240518_models.UpdateWorkflowDefinitionResponse:
        """
        @summary Updates the basic information about a workflow in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
        
        @description >  You cannot use this API operation to create multiple workflows at a time. If you specify multiple workflows in the FlowSpec filed, only the first workflow is created. Other specified workflows and the nodes in the workflows are ignored. You can call the UpdateNode operation to update a node.
        
        @param request: UpdateWorkflowDefinitionRequest
        @param runtime: runtime options for this request RuntimeOptions
        @return: UpdateWorkflowDefinitionResponse
        """
        UtilClient.validate_model(request)
        body = {}
        if not UtilClient.is_unset(request.id):
            body['Id'] = request.id
        if not UtilClient.is_unset(request.project_id):
            body['ProjectId'] = request.project_id
        if not UtilClient.is_unset(request.spec):
            body['Spec'] = request.spec
        req = open_api_models.OpenApiRequest(
            body=OpenApiUtilClient.parse_to_map(body)
        )
        params = open_api_models.Params(
            action='UpdateWorkflowDefinition',
            version='2024-05-18',
            protocol='HTTPS',
            pathname='/',
            method='POST',
            auth_type='AK',
            style='RPC',
            req_body_type='formData',
            body_type='json'
        )
        return TeaCore.from_map(
            dataworks_public_20240518_models.UpdateWorkflowDefinitionResponse(),
            await self.call_api_async(params, req, runtime)
        )

    def update_workflow_definition(
        self,
        request: dataworks_public_20240518_models.UpdateWorkflowDefinitionRequest,
    ) -> dataworks_public_20240518_models.UpdateWorkflowDefinitionResponse:
        """
        @summary Updates the basic information about a workflow in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
        
        @description >  You cannot use this API operation to create multiple workflows at a time. If you specify multiple workflows in the FlowSpec filed, only the first workflow is created. Other specified workflows and the nodes in the workflows are ignored. You can call the UpdateNode operation to update a node.
        
        @param request: UpdateWorkflowDefinitionRequest
        @return: UpdateWorkflowDefinitionResponse
        """
        runtime = util_models.RuntimeOptions()
        return self.update_workflow_definition_with_options(request, runtime)

    async def update_workflow_definition_async(
        self,
        request: dataworks_public_20240518_models.UpdateWorkflowDefinitionRequest,
    ) -> dataworks_public_20240518_models.UpdateWorkflowDefinitionResponse:
        """
        @summary Updates the basic information about a workflow in DataStudio. This API operation performs an incremental update. The update information is described by using FlowSpec.
        
        @description >  You cannot use this API operation to create multiple workflows at a time. If you specify multiple workflows in the FlowSpec filed, only the first workflow is created. Other specified workflows and the nodes in the workflows are ignored. You can call the UpdateNode operation to update a node.
        
        @param request: UpdateWorkflowDefinitionRequest
        @return: UpdateWorkflowDefinitionResponse
        """
        runtime = util_models.RuntimeOptions()
        return await self.update_workflow_definition_with_options_async(request, runtime)
